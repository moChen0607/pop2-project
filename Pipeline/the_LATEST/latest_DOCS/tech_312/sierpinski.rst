.. VSFX 312 - Advanced Application Scripting documentation master file, created by
   sphinx-quickstart on Thu Feb  4 17:41:34 2016.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

The Sierpinski Gasket
*********************************************************

.. image:: img/sierpinski_gasket_panorama_HD_crop.jpg
 :align: center

Project Definition
=====================================================
A sierpinski triangle is a fractal of infinite complexity that happens when
points are created by sampling a random point in space while taking the
midpoint between the previous point and one of the points on the edge of a
primitive object. In my case, I used a tetrahedron (a pyramid) but you don't
have to use this object in particular to get a similar result.

The project abstract is below. If you're looking for the full documentation,
visit :ref:`here <sierpinski_documentation>`

.. toctree::
  :maxdepth: 1

  Sierpinski's Documentation <sierpinskidocumentation>

Goals
=====================================================
 - Create a point cloud which takes the form of a sierpinski gasket
 - Create geometry from this information efficiently
 - Incorporate the data against animated alembic files
 - Modify the data resulting from the sierpinski points directly

Generating the Sierpinski Point Cloud
=====================================================
 1. Use four points to define a tetrahedron or use an existing model in the
    scene description
 2. Choose an arbitrary location (the seed) within the tetrahedron
 3. Pick random vertices of the tetrahedron
 4. Get/Store the midpoint between that vertex and the seed
 5. Use the midpoint as the new seed
 6. Repeat steps 2-5 X number of times


Here is a quick render of what the sierpinski looks with a modest 10,000,000
points, represented with Renderman's particles.

.. image:: img/sierpinski_10_mill_high.jpg
 :align: center

All of the renders here were generated from the same code, detailed below

.. raw:: html

        <object width="480" height="385"><param name="movie"
        value="_images/deformation_test_01.mp4"></param><param
        name="allowFullScreen" value="true"></param><param
        name="allowscriptaccess" value="always"></param><embed
        src="_images/deformation_test_01.mp4"
        allowscriptaccess="always"
        allowfullscreen="true" width="700"
        height="385"></embed></object>

.. raw:: html

        <object width="480" height="385"><param name="movie"
        value="_images/deformation_test_02.mp4"></param><param
        name="allowFullScreen" value="true"></param><param
        name="allowscriptaccess" value="always"></param><embed
        src="_images/deformation_test_02.mp4"
        allowscriptaccess="always"
        allowfullscreen="true" width="700"
        height="385"></embed></object>

Oops! I set the ground-plane lower than the cache. My gasket floats!

I achieved the following animation by running the sierpinski script on 10,000 cubes (the
object makes no difference). To achieve the effect quickly, I created two control cages for
the sierpinski gasket. One piece of geometry was wrap deformed to every cube that was
generated by the sierpinski script, which I applied during each object's creation, and
another tetrahedron which was driving the motion of the cloth simulation. Once the two were
ready, a simple blendshape connected the two meshes and the sierpinski points followed suit.
In the more extreme bending you can see shearing in the cubes. This is because the simulation
mesh that I used didn't have enough resolution (points) to distribute across the wrap
deformer and so the points are "swapping" mid animation, based on the surface. I could have
paired each vertex to the closest vertex of the tetrahedron but the results were 
far too rigid to be able to tell there was any deformation happening. In the
end, the effect is minimal so I kept it.

Here I'm experimenting with manipulating the sierpinski gasket before it gets written out to
points. If you interpret each point as a vector against the origin, you can rotate and
transform the points fairly intuitively. The person who made the vector class: mcleonard

.. important::
 Project References:
  Normalize Formula

  https://stats.stackexchange.com/questions/70801/how-to-normalize-data-to-0-1-range

  Main sierpinski reference

  http://www.fundza.com/algorithmic/sierpinski/python/index.html

  Sierpinski: Additional info

  http://jwilson.coe.uga.edu/emat6680/parsons/mvp6690/essay1/sierpinski.html

  Rotating a 3D vector

  https://stackoverflow.com/questions/6802577/python-rotation-of-3d-vector

  Code Optimizations

  http://jensvhansen.com/fastest-way-to-query-vertex-position-in-maya

.. note::
 Links to my code (explanation at the :ref:`sierpinski documentation
 <sierpinski_documentation>` Page)
 `Sierpinski Project Files
 <https://github.com/ColinKennedy/tech_312_sierpinski>`_

.. http://www.sfdm.scad.edu/faculty/mkesson/tech312/wip/winter16/colin_kennedy/sierpinski/src/sierpinski.py

 The code to auto wrap selected objects

.. http://www.sfdm.scad.edu/faculty/mkesson/tech312/wip/winter16/colin_kennedy/sierpinski/src/wrapper.py

Conclusion
=============================
This project really put a lot of coding concepts into perspective for me.
Having learned Python "on the hot seat" and being asked to develop tools for
Maya/Nuke/Houdini made me forget how great "Core" Python is. These scripts are great because
they're agnostic, I can literally write any type of file using them which can only result in an
even cleaner design when extending its functionality to other tools and applications.
There's definitely room for improvement as well as areas of performance that could be optimized.

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

