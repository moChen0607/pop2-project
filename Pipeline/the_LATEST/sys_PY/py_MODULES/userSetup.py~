# IMPORT STANDARD LIBRARIES
import sys

# IMPORT THIRD-PARTY LIBRARIES
import maya.OpenMaya as om
import maya.cmds as cmds
import maya.mel as mel

# IMPORT LOCAL LIBRARIES
from fileio.controller import manager_0001 as manager
from fileio.controller import checkout_0003 as checkout
from constants.model.constants import LOGGER
try:
	from constants.model import constants as consts
except checkout.ExitApplicationError:
	LOGGER.critical(["AIE9400"], {'app': consts.os.environ.get('APP_EXECUTABLE', '')})
	cmds.quit()

from maya_STARTUPCONFIG import change_ui_colors  # color/ui preferences
import mayamanager

LOGGER.info(consts.LINE_SEP)
LOGGER.info('===== LOADING userSetup.py =====')
LOGGER.info(consts.LINE_SEP)

LOGGER.info("initializing bifrost config settings")
# Should been created in the userSetup to allow reloading a file using maya.exe <filename.ma> (which tries to use this scriptedPanelType while
# restoring config (and causes error on loading).
#
if mel.eval( "enableBifrostGraphEditing()" ):
    if cmds.scriptedPanelType("BifrostGraphEditor", q=True, ex=True)            == False: cmds.scriptedPanelType("BifrostGraphEditor")
    if cmds.scriptedPanelType("BifrostValueEditor", q=True, ex=True)            == False: cmds.scriptedPanelType("BifrostValueEditor")
    if cmds.scriptedPanelType("BifrostDictionaryEditor", q=True, ex=True)       == False: cmds.scriptedPanelType("BifrostDictionaryEditor")

LOGGER.info("initializing project defaults")
# PROJECT-SPECIFIC DEFAULTS
cmds.currentUnit(linear='cm')
cmds.setAttr('defaultResolution.width',1280)
cmds.setAttr('defaultResolution.height',720)

LOGGER.info("initializing save/open/load/close command overrides")
# def foo():
# 	print om.MFileIO.beforeOpenFilename()
# 	print om.MFileIO.beforeOpenFilename()
# 	print om.MFileIO.beforeOpenFilename()

# CB_BSC = om.MSceneMessage.addCheckCallback(om.MSceneMessage.kBeforeSaveCheck, mayamanager.checkout_write_render_before)
CB_BSC = om.MSceneMessage.addCheckCallback(om.MSceneMessage.kBeforeSaveCheck, mayamanager.checkout_before_compatible)
CB_AS = om.MSceneMessage.addCallback(om.MSceneMessage.kAfterSave, mayamanager.checkout_after_compatible)
mayamanager.close_script_job()

# CB_ME = om.MSceneMessage.addCheckCallback(om.MSceneMessage.kMayaExiting, mayamanager.null_func)
# CB_BSC = om.MSceneMessage.addCheckCallback(om.MSceneMessage.kAfterSave , mayamanager.checkout_after_compatible)
# CB_BSC = om.MSceneMessage.addCheckCallback(om.MSceneMessage.kBeforeSaveCheck, foo)
# CB_BSC = om.MSceneMessage.addCheckCallback(om.MSceneMessage.kBeforeSaveCheck, manager.checkout_maya_save_check)
# CB_BSC = om.MSceneMessage.addCheckCallback(om.MSceneMessage.kBeforeSaveCheck, mayamanager.checkout_maya_save_check)

# CB_BSC = om.MSceneMessage.addCheckCallback(om.MSceneMessage.kBeforeSaveCheck, 
#                                            networkManager.scene_lock)
# CB_BOC = om.MSceneMessage.addCheckCallback(om.MSceneMessage.kBeforeOpenCheck, manager.checkout_maya_open_check)

LOGGER.info("loading project UI preferences")
change_ui_colors.main()

LOGGER.info(consts.LINE_SEP)
LOGGER.info("=== LOAD userSetup.py SUCCESSFUL ===")
LOGGER.info(consts.LINE_SEP)