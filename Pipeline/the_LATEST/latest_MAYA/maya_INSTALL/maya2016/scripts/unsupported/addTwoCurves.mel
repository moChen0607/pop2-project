// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//	Example script : Add two nurbs curves of the select list.
//
global proc int addTwoCurves() 
{

	///////////////////////////////////////////////////
	// get the select list.
	//
	string $selList[] ;
	int $len ;
	$selList = `ls -sl` ;
    $len = size($selList) ;
    if( $len == 0 ) return 0 ;

	///////////////////////////////////////////////////
	// run filter to get the nurbsCurves alone.
	//
	string $crvList[] ;
	global int $gSelectNurbsCurvesBit ;
	$crvList = `filterExpand -ex true -sm $gSelectNurbsCurvesBit` ;
	$len = size( $crvList ) ;
    if( $len != 2 ) return 0 ;

	/////////////////////////////////////////////
	// create average node.
	//
	int $ok = 1 ;
	int $sc = 0  ;
	string $avg ;
	if( catch($avg = `createNode avgCurves`) ) {
		$ok = 0 ;
	    $sc = 1 ;	
	}

	/////////////////////////////////////////////
	// connect input curves to average node.
	//
	if( $ok ) {
		string $inAttr1 ;
		string $inAttr2 ;

		string $shape1[] = `listRelatives -s $crvList[0]` ;
		$inAttr1 = $shape1[0] + ".ws[0]" ;
		string $shape2[] = `listRelatives -s $crvList[1]` ;
		$inAttr2 = $shape2[0] + ".ws[0]" ;

		string $oAttr1 ;
		string $oAttr2 ;
		$oAttr1 = $avg + ".ic1" ;
		$oAttr2 = $avg + ".ic2" ;

		if( catch( `connectAttr $inAttr1 $oAttr1` ) || catch( `connectAttr $inAttr2 $oAttr2` ) )  {
			$ok = 0 ;
		}
		if( $ok == 1 ) { 
			//$inAttr1 = $avg + ".rb" ;
			//setAttr $inAttr1 0 ;

			// do not automate weights for averaging.
			//
			$inAttr1 = $avg + ".aw" ;
			setAttr $inAttr1 0 ;
		}
	}

	/////////////////////////////////////////////////////
	// curve shape to hold the weighted average result.
	//
	string $avgCurve ;
	if( $ok ) {
		if( catch( $avgCurve = `createNode nurbsCurve` ) ) {
			$ok = 0 ;
		} else {
			$sc = 1 ;
		} 
	}

	/////////////////////////////////////////////////////
	// connect average node output to curve shape.
	// 
	if( $ok ) {
		string $inAttr ;
		string $oAttr ;
		//string $shape[] = `listRelatives -s $avgCurve` ;
		$oAttr = $avgCurve + ".cr" ;
		$inAttr = $avg + ".oc" ;
		connectAttr $inAttr $oAttr ;
	}

	if( $ok ) {
		select -r $avgCurve ;
	} else {
		if( $sc == 1 ) delete $avg ;
	}
	return 1 ; 
}
