// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


//
//	Description :
//		A script to return the Knot sequence of a NURBS surface 
//		in the U parameter direction as an array of floats. It 
//		works on a curve of the select list.
//

proc float[] getNurbsSurfaceKnotsU( 
	string $srfName )
//
//	Description :
//		To obtain the Knot Sequence along the U direction.
//		
//
{
	int $noError = 1 ;

	// 1. select isoparm in U direction.
	//
	string $comp = $srfName + ".vn[0]" ;
	string $duplicateNodes[] ;
	if( catch( $duplicateNodes = `duplicateCurve -ch false $comp` ) ) {
		$noError = 0 ;
	}  
	float $knots[];

	if( $noError == 1 ) {
		// save select list.
		//
    	$selList = `ls -sl` ;

		// select duplicated curve.
		//
		select -r $duplicateNodes[0] ;

		$knots = nurbsCurveKnots() ;

		// restore select list.
		//
		select -r $selList ;

		delete $duplicateNodes[0] ;
	}
	return $knots ;
}

global proc float[] nurbsSurfaceKnotsAlongU() 
//
//	Description :
//		To get the knot sequence of a NURBS surface along
//		the U direction as	an array of floats.
//	NOTE : works on a NURBS surface of the selection list.
//
{

	float $knotSeq[] ;

	// 0. Grab the select list items.
	//
	string $selList[] ;
    $selList = `ls -sl` ;


	// 1. Run filter to get NURBS surfaces of the select list.
	//
	global int $gSelectNurbsSurfacesBit ;
	string $srfList[] ;
	$srfList = `filterExpand -ex true -sm $gSelectNurbsSurfacesBit $selList` ;	
	if( size($srfList) == 0 ) {
		warning (uiRes("m_nurbsSurfaceKnotsAlongU.kWarningNoSurfaceSelected")) ;
		return $knotSeq;
	}

	// 2. Will work on only one NURBS surface.
	//
	int $len = size($srfList) ;
	string $lastSrf = $srfList[$len-1] ;
	if( $len != 1 ) {
		string $w = "Returning Knots for the last NURBS surface : ^1s" ;
		warning `format -s $lastSrf $w` ;
	}

	// 3. obtain the knot sequence for the surface.
	//
	$knotSeq = getNurbsSurfaceKnotsU( $lastSrf ) ;


	// 4. Select the surface for which Knots are returned.
	//
	select -r $lastSrf ;

	// 5. Return the Knot Sequence.
	return $knotSeq ;
}

