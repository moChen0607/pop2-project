// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Oct 23, 1997
//
//  Description:
//      The attachBlendCurve() procedure takes the selected curve and 
//		closes it. The selected curve must be open. The result is a periodic
// 		curve with the same number of cvs as the original curve.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      String.
//

global proc string attachBlendCurve()
{
	global int $gSelectNurbsCurvesBit;
	string $curvesList[] = `filterExpand -ex true -sm $gSelectNurbsCurvesBit`;

	int $numCurves = size($curvesList);
	if ( $numCurves == 0 )
	{
		error((uiRes("m_attachBlendCurve.kErrorSelectCurve")) );
		return "";
	}

	if ( $numCurves > 1 )
	{
		warning((uiRes("m_attachBlendCurve.kWarningTooManyCurves")) );
	}

	string $curve = $curvesList[$numCurves-1];
	
	// check that we have the required # of spans on the curve in order to
	// do the attach blend
	//
	int $degree = eval("getAttr " + $curve + ".degree");
	int $numSpans = eval("getAttr " + $curve + ".spans");
	int $minSpans;
	if ( $degree == 1 ) $minSpans = 3;
	else if ( $degree == 2 ) $minSpans = 4;
	else $minSpans = 2 * ($degree - 1);
	if ( $numSpans < $minSpans ) 
	{
		string $degreeStr = "" + $degree;
		string $minSpansStr = "" + $minSpans;
		warning(`format -s $degreeStr -s $minSpansStr (uiRes("m_attachBlendCurve.kWarningTooFewSpans"))` );
		return "";
	}

	// close the curve with preserve shape off and keep original on
	//
	string $results[] = `closeCurve -ch 0 -rpo 0 -ps 0 $curve`;

	int $resultCount = size($results);
	if ( $resultCount == 0 ) 
	{
		error((uiRes("m_attachBlendCurve.kErrorClosingCurveFailed")) );
		return "";
	}

	// rebuild the closed curve result to have the #spans as the original curve
	//
	$results = `rebuildCurve -ch 0 -rpo 1 -rt 0 -kr 0 -kcp 0 -kep 1 -kt 0 -s $numSpans -d $degree -tol 0.05 $results[0]`;

	$resultCount = size($results);
	if ( $resultCount == 0 ) 
	{
		error((uiRes("m_attachBlendCurve.kErrorRebuildingCurveFailed")) );
		return "";
	}

	// set interior cvs on new periodic curve to match cvs from original curve
	//
	float $origCvs[];
	int $i, $j;
	for ( $i = 1, $j = $i+1; $i < $numSpans; $i++, $j++ )
	{
		$origCvs = eval("getAttr " + $curve + ".controlPoints[" + $j + "]");
		eval("setAttr " + $results[0] + ".controlPoints[" + $i + "] -type double3 " + $origCvs[0] + " " + $origCvs[1] + " " + $origCvs[2]);
	}

	// set start cv on new periodic curve to be at the midpoint between the
	// start and end of original curve
	//
	$origCvs = eval("getAttr " + $curve + ".controlPoints[0]");
	float $origCvsEnd[];
	int $numCvsOrig = $numSpans + $degree - 1;
	$origCvsEnd = eval("getAttr " + $curve + ".controlPoints[" + $numCvsOrig + "]");
	for ( $i = 0; $i < 3; $i++ )
	{
		$origCvs[$i] = ($origCvs[$i] + $origCvsEnd[$i]) * 0.5;
	}
	eval("setAttr " + $results[0] + ".controlPoints[0] -type double3 " + $origCvs[0] + " " + $origCvs[1] + " " + $origCvs[2]);

	eval("select -r " + $results[0]);

	// return the final result curve
	return $results[0];
}
