// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
// provided at the time of installation or download, or which otherwise accompanies 

// Functionality to modify the image format control on the Common tab in Render Settings.
// Clears the item list and adds formats supported by Turtle.

global string $g_ilrImgFormat[]; // Image format
global string $g_ilrImgExt[];    // Image format extension
global int $g_ilrImgExtNum[];    // Image format index number

//
// This procedure is called to created the image extension array for Turtle.
//
global proc ilrCreateImageFormats()
{
	global string $g_ilrImgFormat[];
	global string $g_ilrImgExt[];
	global int $g_ilrImgExtNum[];

	// NOTE: When adding a new image format, don't forget to add it to ilroptionsnode, ilruserinterface.mel and ilrbakelayer as well!
	// also make sure you update ilrUpdateImageFormatControl.
	$g_ilrImgFormat[0] = "tga";
	$g_ilrImgFormat[1] = "ppm";
	$g_ilrImgFormat[2] = "exr";
	$g_ilrImgFormat[3] = "tif8";
	$g_ilrImgFormat[4] = "tif16";
	$g_ilrImgFormat[5] = "tif32";
	$g_ilrImgFormat[6] = "iff";
	$g_ilrImgFormat[7] = "exrml";
	$g_ilrImgFormat[8] = "bmp";
	$g_ilrImgFormat[9] = "png";

	$g_ilrImgExt[0] = "tga";
	$g_ilrImgExt[1] = "ppm";
	$g_ilrImgExt[2] = "exr";
	$g_ilrImgExt[3] = "tif";
	$g_ilrImgExt[4] = "tif";
	$g_ilrImgExt[5] = "tif";
	$g_ilrImgExt[6] = "iff";
	$g_ilrImgExt[7] = "exr";
	$g_ilrImgExt[8] = "bmp";
	$g_ilrImgExt[9] = "png";
	
	// Set this according to Maya (buildimageformatsmenu.mel)
	//
	$g_ilrImgExtNum[0] = 19;
	$g_ilrImgExtNum[1] = 51;
	$g_ilrImgExtNum[2] = 51;
	$g_ilrImgExtNum[3] = 3;
	$g_ilrImgExtNum[4] = 51;
	$g_ilrImgExtNum[5] = 51;
	$g_ilrImgExtNum[6] = 7;
	$g_ilrImgExtNum[7] = 51;
	$g_ilrImgExtNum[8] = 20;
	$g_ilrImgExtNum[9] = 32;
}

global proc ilrChangeImageFormat()
{
//
//  Description:
//		This procedure is called when the user changes the type of 
//		image that will be written out.  It sets the internal 
//		representation and then updates the example to show the changes.
//
	if (!`objExists defaultRenderGlobals` || !`objExists TurtleRenderOptions` || currentRenderer() != "turtle") {
		return;
	}
	
	global string $g_ilrImgFormat[];
	global string $g_ilrImgExt[];
	global int $g_ilrImgExtNum[];

	int $item = `getAttr TurtleRenderOptions.imageFormat`;
	
	// Set the image format so that Maya updates the file preview
	//
	setAttr defaultRenderGlobals.imageFormat $g_ilrImgExtNum[$item];
	setAttr defaultRenderGlobals.imfkey -type "string" $g_ilrImgExt[$item];
	
	// Disable compression button for Turtle
	// But make sure to check if the UI exists first
	//
	if (`window -exists unifiedRenderGlobalsWindow`) {
		setParent unifiedRenderGlobalsWindow;
		if (`button -exists renderGlobalsCompression`) {
			button -edit -enable 0 renderGlobalsCompression;
		}
	}
}

global proc ilrSetImageFormat(string $format)
{
	if (!`objExists TurtleRenderOptions`) {
		return;
	}
	
	// Fix to support both 'tif' and tif8', when setting 8bit TIFF output
	if ($format == "tif") {
		$format = "tif8";
	}

	global string $g_ilrImgFormat[];
	
	int $numFormats = size($g_ilrImgFormat);
	if ($numFormats == 0) {
		ilrCreateImageFormats();
		$numFormats = size($g_ilrImgFormat);
	}

	for ($i = 0; $i < $numFormats; $i = $i + 1) {
		if ($g_ilrImgFormat[$i] == $format) {
			setAttr TurtleRenderOptions.imageFormat $i;
			ilrChangeImageFormat();
			break;
		}
	}
}

global proc ilrUpdateUnifiedRenderGlobalsWindowSpecifiedUI()
{
	evalDeferred -lp "updateUnifiedRenderGlobalsWindowSpecifiedUI; ilrModifyCommonTab;";
}

global proc ilrTakeOverRenderGlobalsWindow()
{
	global string $gMasterLayerRendererName;

	if( currentRenderer() != "turtle" ) {
		return;
	}

	// Make sure the Render Settings window is created so we can modify it.
	if (!`window -exists unifiedRenderGlobalsWindow`) {
		unifiedRenderGlobalsWindow;
		window -edit -visible 0 unifiedRenderGlobalsWindow;
	}

	setParent unifiedRenderGlobalsWindow;

	// Remove the other renderers' tabs and their scriptjobs that are interfering with Turtle's Common tab.
	string $renderer = isDisplayingAllRendererTabs() ? $gMasterLayerRendererName : "turtle";
	string $tabLayout;
	string $tabLayouts[] = `formLayout -query -childArray tabForm`;	
	for ($tabLayout in $tabLayouts)
	{
		if ($tabLayout != rendererTabLayoutName($renderer)) {
			deleteUI $tabLayout;
		}
	}

	// Exchange script jobs on layer menu. (New in Maya 2009)
	if (ilrGetMayaVersion() >= 2009) {
	
		string $layer;
		string $layers[] = `listConnections renderLayerManager.renderLayerId`;
		
		int $jobsReplaced = false;

		for ($layer in $layers) {
			if ($jobsReplaced) {
				scriptJob -parent unifiedRenderGlobalsRenderLayerOptionMenu
					-nodeNameChanged $layer ilrUpdateUnifiedRenderGlobalsWindowSpecifiedUI;
			} else {
				scriptJob -replacePrevious -parent unifiedRenderGlobalsRenderLayerOptionMenu
					-nodeNameChanged $layer ilrUpdateUnifiedRenderGlobalsWindowSpecifiedUI;
				$jobsReplaced = true;
			}
		}
	}	
	
	// Exchange script jobs on window.
    scriptJob -replacePrevious -parent unifiedRenderGlobalsWindow
		-event SceneOpened unifiedRenderGlobalsWindowSceneOpenedCallback;
	scriptJob -parent unifiedRenderGlobalsWindow
		-event renderLayerManagerChange ilrUpdateUnifiedRenderGlobalsWindowSpecifiedUI;
	scriptJob -parent unifiedRenderGlobalsWindow
		-event renderLayerChange ilrUpdateUnifiedRenderGlobalsWindowSpecifiedUI;
		
	// Modify the gui stuff.
	ilrModifyCommonTab;
}

global proc ilrModifyCommonTab()
{
	if( currentRenderer() != "turtle" || !`window -exists unifiedRenderGlobalsWindow`) {
		return;
	}

	setParent unifiedRenderGlobalsWindow;	
	setParentToCommonTab;

	// Remake image format control.
	setParent imageFileOutputSW;
	setParent imageMenuMayaSW;
	setParent ..;
	
	string $parent = `setParent -q`;

	global string $g_ilrImgExt[];
	if (size( $g_ilrImgExt ) == 0) {
		// If the file format array has not been initialized yet, do so.
		ilrCreateImageFormats();
	}

	optionMenuGrp -e -changeCommand "" imageMenuMayaSW;

	string $item;
	string $items[] = `optionMenuGrp -q -itemListLong imageMenuMayaSW`;
	for ($item in $items) {
		deleteUI $item;
	}

	string $menu = $parent + "|imageMenuMayaSW|OptionMenu";

	menuItem -parent $menu -label "Targa (tga)" -data 0;
//	menuItem -parent $menu -label "Portable Pixelmap (ppm)" -data 1;
	menuItem -parent $menu -label "OpenEXR (exr)" -data 2;
	menuItem -parent $menu -label "TIFF (tif)" -data 3;
	menuItem -parent $menu -label "TIFF16 (tif)" -data 4;
	menuItem -parent $menu -label "TIFF32 (tif)" -data 5;
	menuItem -parent $menu -label "Maya IFF (iff)" -data 6;
	menuItem -parent $menu -label "OpenEXR MultiLayer (exr)" -data 7;
	menuItem -parent $menu -label "Windows Bitmap (bmp)" -data 8;
	menuItem -parent $menu -label "PNG (png)" -data 9;

	connectControl -index 1 imageMenuMayaSW TurtleRenderOptions.imageFormat;
	connectControl -index 2 imageMenuMayaSW TurtleRenderOptions.imageFormat;

	scriptJob
		-parent $parent
		-replacePrevious
		-attributeChange "TurtleRenderOptions.imageFormat"
		"ilrChangeImageFormat";

	ilrChangeImageFormat;
}
