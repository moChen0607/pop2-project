// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
// provided at the time of installation or download, or which otherwise accompanies 

//
// UV Size Assignment Editor procedures
//

global proc ilrUVSizeAssignmentEditor()
{

	// Remove any existing UI to avoid duplicate element names
	//
	if(`window -query -exists ilrUVSAMainWindow`) {
		deleteUI ilrUVSAMainWindow;
	}
	
	string $layerName = ilrGetCurrentBakeLayer();

	string $shapes[] = `sets -query $layerName`;
	for ($s in $shapes) {
		ilrBakeAttributes(1, $s);
	}

	
	// Build the UI
	//
	string $oldParent = `setParent -query`;
	setUITemplate -pushTemplate attributeEditorTemplate;

	//-resizeToFitChildren true
	string $editor = `window -title "Turtle UV Size Assignment Editor"  -widthHeight 320 500 -resizeToFitChildren false ilrUVSAMainWindow`;

	setParent $editor;
		paneLayout -configuration "horizontal2" -paneSize 1 100 50 -paneSize 2 100 50;

			string $activeList = `selectionConnection -parent $editor -object $layerName ilrBakeLayerSelection`;
			spreadSheetEditor -mainListConnection $activeList -ko false -fal {"ilrBakeResX","ilrBakeResY","ilrBakeResOverride","ilrBakeScale"};


			tabLayout -tabsVisible 0 -scrollable 1 -innerMarginWidth 5 -innerMarginHeight 5;
				columnLayout -adjustableColumn true -rowSpacing 10;
				
					text -label "Resolution Settings" -align "left" -font "boldLabelFont";
	 				rowLayout	
					-numberOfColumns 3 
					-columnWidth3 170 170 180
					-columnAttach3 "both" "both" "both"  
					-columnOffset3 3 3 3 
					-columnAlign3 "center" "center" "center";
	 					checkBox -label "Create Power of 2 Textures" -align "left" ilrCheckPower2;
	 					connectControl ilrCheckPower2 TurtleUIOptions.uvsaPower2;

	 					checkBox -label "Create Quadratic Textures" -align "left" ilrCheckQuadratic;
	 					connectControl ilrCheckQuadratic TurtleUIOptions.uvsaQuadratic;
					setParent ..;
		 	
					intFieldGrp -numberOfFields 2 -cw 1 90 -columnAlign3 left left left -label "Min Resolution:" ilrUVMin;
					connectControl -index 2 ilrUVMin TurtleUIOptions.uvsaMinResX;
					connectControl -index 3 ilrUVMin TurtleUIOptions.uvsaMinResY;

					intFieldGrp -numberOfFields 2 -cw 1 90 -columnAlign3 left left left -label "Max Resolution:" ilrUVMax;
					connectControl -index 2 ilrUVMax TurtleUIOptions.uvsaMaxResX;
					connectControl -index 3 ilrUVMax TurtleUIOptions.uvsaMaxResY;
					button -label "Compute Scale and Texture Sizes" -c "ilrUVSACallback";
					separator;
					text -label "Shared UV-set" -align "left" -font "boldLabelFont";
					
					floatSliderGrp -label "UV Padding" -field true
							 		-minValue 0.0 -maxValue 1.0
 									-fieldMinValue 0.0 -fieldMaxValue 1.0
 									-cal 1 left 
 									-precision 3
 									ilrUVPadding;
 					connectControl ilrUVPadding TurtleUIOptions.uvsaUvPadding;
					
					float $padding = `getAttr TurtleUIOptions.uvsaUvPadding`; 
					button -label "Compute Shared UV-set" -c "ilrSharedUVCallback";

				setParent ..;
			setParent ..;
		setParent ..;
	setParent ..;

	setUITemplate -popTemplate;

	showWindow $editor;
	
	setParent $oldParent;

}

global proc int ilrUVSACallback()
{
	//
	// Create the shared uv command
	//
	
	string $cmd = "ilrUVSACmd";
	$cmd += " -bakelayer \"" + ilrGetCurrentBakeLayer() + "\"";
	$cmd += " -minx " + `getAttr TurtleUIOptions.uvsaMinResX`;
	$cmd += " -miny " + `getAttr TurtleUIOptions.uvsaMinResY`;
	$cmd += " -maxx " + `getAttr TurtleUIOptions.uvsaMaxResX`;
	$cmd += " -maxy " + `getAttr TurtleUIOptions.uvsaMaxResY`;
	$cmd += " -quadratic " + `getAttr TurtleUIOptions.uvsaQuadratic`;
	$cmd += " -powerof2 " + `getAttr TurtleUIOptions.uvsaPower2`;

	print($cmd + "\n");

	// Run command
	//
	if ( catch( eval($cmd) ) )
	{
		error("Error computing scale and texture sizes, see script editor for details!");
		return 0;
	}

	return 1;
}

global proc int ilrSharedUVCallback()
{
	//
	// Create the shared uv command
	//
	
	string $cmd = "ilrCreateSharedUVCmd";
	$cmd += " -bakelayer \"" + ilrGetCurrentBakeLayer() + "\"";
	$cmd += " -padding " + `getAttr TurtleUIOptions.uvsaUvPadding`;

	print($cmd + "\n");

	// Run command
	//
	if ( catch( eval($cmd) ) )
	{
		error("Error computing shared UV-set, see script editor for details!");
		return 0;
	}

	return 1;
}

global proc ilrUpdateUVSA()
{
	if(!`window -query -exists ilrUVSAMainWindow`) {
		return;
	}
	string $oldParent = `setParent -query`;
		
	string $layerName = ilrGetCurrentBakeLayer();

	string $shapes[] = `sets -query $layerName`;
	for ($s in $shapes) {
		ilrBakeAttributes(1, $s);
	}
	setParent ilrUVSAMainWindow;
	selectionConnection -edit -object $layerName ilrBakeLayerSelection;

	setParent $oldParent;	
}