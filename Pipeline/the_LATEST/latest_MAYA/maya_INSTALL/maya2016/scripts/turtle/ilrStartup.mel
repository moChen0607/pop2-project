// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
// provided at the time of installation or download, or which otherwise accompanies 

//
// Startup and initialization stuff
//

global int    $g_ilrIsSystemLinux;
global int    $g_ilrIsSystemNT;
global int    $g_ilrIsSystemMac;
global float  $g_ilrMayaVersion;
global string $g_ilrPluginName  = "";
global int    $g_ilrDebugEnabled   = 0;


global proc ilrDebugPrint(string $msg)
{
	global int $g_ilrDebugEnabled;
	if ($g_ilrDebugEnabled) {
		print("// TURTLE DEBUG: " + $msg + "\n");
	}
}

proc int ilrIsNumeric(string $str)
{
	return isValidString($str, "[0-9.]*");
}

global proc float ilrGetMayaVersion()
{
	string $ver = `about -version`;

	string $item;
	string $items[];
	tokenize($ver, " ", $items);

	for ($item in $items)
	{
		if (ilrIsNumeric($item)) {
			$ver = $item;
			break;
		}
	}

	float $fver = $ver;
	return $fver;
}

global proc ilrLoadScripts()
{

	// if in batch mode how much of this is required
	if (`about -batch`)
	{
		//return;
	}

	eval("source \"ilrUserInterface.mel\"");
	eval("source \"ilrRender.mel\"");
	eval("source \"ilrRenderWindow.mel\"");
	eval("source \"ilrBake.mel\"");
	eval("source \"ilrImagePlane.mel\"");
	eval("source \"ilrAttributes.mel\"");
	eval("source \"ilrProgressBar.mel\"");
	eval("source \"ilrCreateGlobalsTab.mel\"");
	eval("source \"ilrRegisterRenderer.mel\"");
	eval("source \"ilrLightLinks.mel\"");
	eval("source \"ilrBakeLayer.mel\"");
	eval("source \"ilrBakeLayerEditor.mel\"");
	eval("source \"ilrPointCloudBakeEditor.mel\"");
	eval("source \"ilrIBLLightRigEditor.mel\"");
	eval("source \"ilrUVSizeAssignmentEditor.mel\"");
	eval("source \"ilrTextureResamplingEditor.mel\"");
	eval("source \"ilrModifyRenderGlobalsWindow.mel\"");
	eval("source \"ilrUtilities.mel\"");
	eval("source \"ilrHwTextureCache.mel\"");

	eval("source \"AEilrOccDataTemplate.mel\"");
	eval("source \"AEilrSurfaceThicknessTemplate.mel\"");
	eval("source \"AEilrOccSamplerTemplate.mel\"");
	eval("source \"AEilrNormalMapTemplate.mel\"");
	eval("source \"AEilrLUANodeTemplate.mel\"");
	eval("source \"AEilrBasicPhotonShaderTemplate.mel\"");
	eval("source \"AEilrPhysicPhotonShaderTemplate.mel\"");
	eval("source \"AEilrDielectricPhotonShaderTemplate.mel\"");
	eval("source \"AEilrBssrdfShaderTemplate.mel\"");
	eval("source \"AEilrOrenNayarShaderTemplate.mel\"");
	eval("source \"AEilrRaySamplerTemplate.mel\"");
	eval("source \"AEilrAshikhminShaderTemplate.mel\"");
	eval("source \"AEilrShadowMaskTemplate.mel\"");
	eval("source \"AEilrDielectricShaderTemplate.mel\"");
	eval("source \"AEilrBakeLayerTemplate.mel\"");
	eval("source \"AEilrBakeLayerManagerTemplate.mel\"");
	eval("source \"AEilrHwBakeVisualizerTemplate.mel\"");
	eval("source \"AEilrUVMappingVisualizerTemplate.mel\"");
	eval("source \"AEilrOutputShaderBackendNodeTemplate.mel\"");
	eval("source \"AEilrPointCloudShapeTemplate.mel\"");

	eval("source \"ilrAECameraOptions.mel\"");
	eval("source \"ilrAEDisplacementShaderOptions.mel\"");
	eval("source \"ilrAEFileOptions.mel\"");
	eval("source \"ilrAEGeometryShapeOptions.mel\"");
	eval("source \"ilrAELightOptions.mel\"");
	eval("source \"ilrAERenderLayerOptions.mel\"");
	eval("source \"ilrAEShadingEngineOptions.mel\"");
	eval("source \"ilrAESurfaceShaderOptions.mel\"");
}

// This procedure for loading Turtle if it has not been loaded yet.
//
global proc ilrLoadTurtle()
{
	ilrDebugPrint("Making sure Turtle plug-in is loaded");

	string $plugin = "Turtle";
	if (!`pluginInfo -q -l $plugin`) {
		loadPlugin $plugin;
	}
}

global proc ilrStartup(string $pluginName)
{
	ilrDebugPrint("Starting startup");
	
	global string $g_ilrPluginName;
	global int    $g_ilrIsSystemLinux;
	global int    $g_ilrIsSystemNT;
	global int    $g_ilrIsSystemMac;
	global int    $g_ilrIsSystemMacX86;
	global float  $g_ilrMayaVersion;
	global int    $g_ilrScriptJobs[];

	$g_ilrPluginName = $pluginName;
	$g_ilrMayaVersion = ilrGetMayaVersion();
	$g_ilrIsSystemLinux = `about -li`;
	$g_ilrIsSystemNT = `about -nt`;
	$g_ilrIsSystemMac = `about -mac`;
	$g_ilrIsSystemMacX86 = 0;
	if ($g_ilrMayaVersion >= 8.5) {
		$g_ilrIsSystemMacX86 = `about -x86`;
	}

	// load the scripts
	ilrLoadScripts();

	evalDeferred -lp "ilrLoadShelf";

	// Create script jobs
	$g_ilrScriptJobs[size($g_ilrScriptJobs)] = `scriptJob -protected -event "SceneOpened" "ilrInitScene"`;
	$g_ilrScriptJobs[size($g_ilrScriptJobs)] = `scriptJob -protected -event "NewSceneOpened" "ilrInitScene"`;
	$g_ilrScriptJobs[size($g_ilrScriptJobs)] = `scriptJob -protected -event "SceneImported" "ilrInitScene"`;

	$g_ilrScriptJobs[size($g_ilrScriptJobs)] = `scriptJob -protected -event "SelectionChanged" "ilrUpdateAEDeferred"`;
	$g_ilrScriptJobs[size($g_ilrScriptJobs)] = `scriptJob -protected -event "SelectionChanged" "ilrUpdateSpreadSheetEditor"`;
	$g_ilrScriptJobs[size($g_ilrScriptJobs)] = `scriptJob -protected -event "constructionHistoryChanged" "ilrUpdateAEDeferred"`;

	ilrDebugPrint("Startup done");
}

global proc ilrLoadShelf()
{
	// if in batch mode, then no shelves
	if (`about -batch`)
	{
		return;
	}

	global string $gShelfTopLevel;
	setParent $gShelfTopLevel;

	if ( `shelfLayout -exists TURTLE` ) {
		return;
	}

	loadNewShelf "shelf_TURTLE.mel";
}
