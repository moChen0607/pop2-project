// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  April 2000
//
//  Description:
//
//  Option box for the paintGrid command 
//

//
//  Procedure Name:
//      setOptionVars
//
//  Description:
//		Initialize the option values.
//
//  Input Arguments:
//		Whether to set the options to default values.
//
//  Return Value:
//      None.
//
proc setOptionVars(int $forceFactorySettings)
{
	//	SpansU V.
	//
	if ($forceFactorySettings || !`optionVar -exists paintGridSpansU`) {
		optionVar -intValue paintGridSpansU 4;
	}
	if ($forceFactorySettings || !`optionVar -exists paintGridSpansV`) {
		optionVar -intValue paintGridSpansV 4;
	}
	//	EdgeU V.
	//
	if ($forceFactorySettings || !`optionVar -exists paintGridEdgeU`) {
		optionVar -intValue paintGridEdgeU 1;
	}
	if ($forceFactorySettings || !`optionVar -exists paintGridEdgeV`) {
		optionVar -intValue paintGridEdgeV 1;
	}

	//	Curve Degree
	//
	if ($forceFactorySettings || !`optionVar -exists paintGridCurveDegree`) {
		optionVar -intValue paintGridCurveDegree 1;
	}

	//	Stroke Per Span
	//
	if ($forceFactorySettings || !`optionVar -exists paintGridStrokesPerSpan`) {
		optionVar -intValue paintGridStrokesPerSpan 4;
	}

	//  Points Per Curve	
	//
	if ($forceFactorySettings || !`optionVar -exists paintGridPointsPerCurve`) {
		optionVar -intValue paintGridPointsPerCurve 2;
	}

	//	NoiseScale
	//
	if ($forceFactorySettings || !`optionVar -exists paintGridNoiseScale`) {
		optionVar -floatValue paintGridNoiseScale 0.0;
	}

	//	NoiseFrequency
	//
	if ($forceFactorySettings || !`optionVar -exists paintGridNoiseFrequency`) {
		optionVar -floatValue paintGridNoiseFrequency 1.0;
	}

	//	SampleDensity
	//
	if ($forceFactorySettings || !`optionVar -exists paintGridSampleDensity`) {
		optionVar -floatValue paintGridSampleDensity 1.0;
	}

	//  Equalization
	if ($forceFactorySettings || !`optionVar -exists paintGridEqualization`) {
		optionVar -intValue paintGridEqualization 1;
	}

	//  Share One Brush
	if ($forceFactorySettings || !`optionVar -exists paintGridShareOneBrush`) {
		optionVar -intValue paintGridShareOneBrush 1;
	}

	//  SurfaceOffsetMin	
	//
	if ($forceFactorySettings || !`optionVar -exists paintGridSurfaceOffsetMin`) {
		optionVar -floatValue paintGridSurfaceOffsetMin 0;
	}

	//  SurfaceOffsetMax	
	//
	if ($forceFactorySettings || !`optionVar -exists paintGridSurfaceOffsetMax`) {
		optionVar -floatValue paintGridSurfaceOffsetMax 0;
	}

}

//
//  Procedure Name:
//      paintGridSetup
//
//  Description:
//		Update the state of the option box UI to reflect the option values.
//
//  Input Arguments:
//      parent               - Top level parent layout of the option box UI.
//                             Required so that UI object names can be 
//                             successfully resolved.
//
//	forceFactorySettings - Whether the option values should be set to
//                             default values.
//
//  Return Value:
//      None.
//
global proc paintGridSetup(string $parent, int $forceFactorySettings)
{
	//	Retrieve the option settings
	//
	setOptionVars($forceFactorySettings);

	setParent $parent;

	//	Query the optionVar's and set the values into the controls.

	//	SpansU V.
	//
	intSliderGrp -edit 
		-v `optionVar -query paintGridSpansU`
		paintGridSpansU;
	intSliderGrp -edit 
		-v `optionVar -query paintGridSpansV`
		paintGridSpansV;

	//	CurveDegree.
	//
	intSliderGrp -edit 
		-v `optionVar -query paintGridCurveDegree`
		paintGridCurveDegree;

	//	StrokesPerSpan.
	//
	intSliderGrp -edit 
		-v `optionVar -query paintGridStrokesPerSpan`
		paintGridStrokesPerSpan;

	//	PointsPerCurve.
	//
	intSliderGrp -edit 
		-v `optionVar -query paintGridPointsPerCurve`
		paintGridPointsPerCurve;

	//	NoiseScale.
	//
	floatSliderGrp -edit 
		-v `optionVar -query paintGridNoiseScale`
		paintGridNoiseScale;

	//	NoiseFrequency.
	//
	floatSliderGrp -edit 
		-v `optionVar -query paintGridNoiseFrequency`
		paintGridNoiseFrequency;

	//	SampleDensity.
	//
	floatSliderGrp -edit 
		-v `optionVar -query paintGridSampleDensity`
		paintGridSampleDensity;

	//	SurfaceOffsetMin.
	//
	floatSliderGrp -edit 
		-v `optionVar -query paintGridSurfaceOffsetMin`
		paintGridSurfaceOffsetMin;

	//	SurfaceOffsetMax.
	//
	floatSliderGrp -edit 
		-v `optionVar -query paintGridSurfaceOffsetMax`
		paintGridSurfaceOffsetMax;

	//	EdgeU V.
	//
	checkBoxGrp -edit 
		-value1 `optionVar -query paintGridEdgeU`
		paintGridEdgeU;

	checkBoxGrp -edit 
		-value1 `optionVar -query paintGridEdgeV`
		paintGridEdgeV;

	//	Equalization.
	//
	checkBoxGrp -edit 
		-value1 `optionVar -query paintGridEqualization`
		paintGridEqualization;

	//	Equalization.
	//
	checkBoxGrp -edit 
		-value1 `optionVar -query paintGridShareOneBrush`
		paintGridShareOneBrush;


}

//
//  Procedure Name:
//      paintGridCallback
//
//  Description:
//		Update the option values with the current state of the option box UI.
//
//  Input Arguments:
//      parent - Top level parent layout of the option box UI.  Required so
//               that UI object names can be successfully resolved.
//
//	doIt   - Whether the command should execute.
//
//  Return Value:
//      None.
//
global proc paintGridCallback(string $parent, int $doIt)
{
    setParent $parent;

	//	Set the optionVar's from the control values, and then
	//	perform the command.

	//	SpansU V.
	//
	optionVar -intValue paintGridSpansU
		`intSliderGrp -query -v paintGridSpansU`;
	optionVar -intValue paintGridSpansV
		`intSliderGrp -query -v paintGridSpansV`;

	//	CurveDegree.
	//
	int $curveDegree = `intSliderGrp -query -v paintGridCurveDegree`;
	optionVar -intValue paintGridCurveDegree $curveDegree;

	//	StrokesPerSpan.
	//
	optionVar -intValue paintGridStrokesPerSpan
		`intSliderGrp -query -v paintGridStrokesPerSpan`;

	//	PointsPerCurve.
	//
	int $pointsPerCurve = `intSliderGrp -query -v paintGridPointsPerCurve`;
	if( $pointsPerCurve < $curveDegree + 1 )
	{
		$pointsPerCurve = $curveDegree + 1;
	}
	optionVar -intValue paintGridPointsPerCurve $pointsPerCurve;

	//	NoiseScale.
	//
	optionVar -floatValue paintGridNoiseScale
		`floatSliderGrp -query -v paintGridNoiseScale`;

	//	NoiseFrequency.
	//
	optionVar -floatValue paintGridNoiseFrequency
		`floatSliderGrp -query -v paintGridNoiseFrequency`;

	//	SampleDensity.
	//
	optionVar -floatValue paintGridSampleDensity
		`floatSliderGrp -query -v paintGridSampleDensity`;

	//	Equalization.
	//
	optionVar -intValue paintGridEqualization
		`checkBoxGrp -query -value1 paintGridEqualization`;

	//	ShareOneBrush.
	//
	optionVar -intValue paintGridShareOneBrush
		`checkBoxGrp -query -value1 paintGridShareOneBrush`;


	//	SurfaceOffsetMin.
	//
	optionVar -floatValue paintGridSurfaceOffsetMin
		`floatSliderGrp -query -v paintGridSurfaceOffsetMin`;

	//	SurfaceOffsetMax.
	//
	optionVar -floatValue paintGridSurfaceOffsetMax
		`floatSliderGrp -query -v paintGridSurfaceOffsetMax`;

	//	EdgeU V.
	//
	optionVar -intValue paintGridEdgeU
		`checkBoxGrp -query -value1 paintGridEdgeU`;
	optionVar -intValue paintGridEdgeV
		`checkBoxGrp -query -value1 paintGridEdgeV`;

	if ($doIt) {
		performPaintGrid 0;
	}
}

//
//  Procedure Name:
//      paintGridOptions
//
//  Description:
//		Construct the option box UI.  Involves accessing the standard option
//		box and customizing the UI accordingly.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
proc paintGridOptions()
{
	//	Name of the command for this option box.
	//
	string $commandName = "paintGrid";

	//	Build the option box actions.
	//
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	string $layout = getOptionBox();
	setParent $layout;
	
	setOptionBoxCommandName($commandName);
	
	setUITemplate -pushTemplate DefaultTemplate;

	waitCursor -state 1;

	tabLayout -tabsVisible 0 -scrollable 1;
	
	string $parent = `columnLayout -adjustableColumn 1`;
	
    intSliderGrp
        -label (uiRes("m_performPaintGrid.kSpansU"))
		-field 1
		-min 0 
		-max 50
		-fieldMinValue 0
		-fieldMaxValue 10000
		paintGridSpansU;

    intSliderGrp
        -label (uiRes("m_performPaintGrid.kSpansV"))
		-field 1
		-min 0 
		-max 50
		-fieldMinValue 0
		-fieldMaxValue 10000
		paintGridSpansV;

    intSliderGrp
        -label (uiRes("m_performPaintGrid.kCurveDegree"))
		-field 1
		-min 1 
		-max 3 
		-fieldMinValue 1
		-fieldMaxValue 3
		paintGridCurveDegree;

    intSliderGrp
        -label (uiRes("m_performPaintGrid.kStrokesPerSpan"))
		-field 1
		-min 1 
		-max 50 
		-fieldMinValue 1
		-fieldMaxValue 10000 
		paintGridStrokesPerSpan;

    intSliderGrp
        -label (uiRes("m_performPaintGrid.kPointsPerCurve"))
		-field 1
		-min 2 
		-max 100 
		-fieldMinValue 2
		-fieldMaxValue 10000 
		paintGridPointsPerCurve;
		

    floatSliderGrp
        -label (uiRes("m_performPaintGrid.kGridSmear"))
		-field 1
		-min 0 
		-max 2 
		-fieldMinValue -1000 
		-fieldMaxValue 1000 
		-pre 4
		paintGridNoiseScale;

    floatSliderGrp
        -label (uiRes("m_performPaintGrid.kSmearFrequency"))
		-field 1
		-min 0 
		-max 10 
		-fieldMinValue -100000 
		-fieldMaxValue 100000 
		-pre 4
		paintGridNoiseFrequency;

    floatSliderGrp
        -label (uiRes("m_performPaintGrid.kSampleDensity"))
		-field 1
		-min 0 
		-max 10 
		-fieldMinValue 0 
		-fieldMaxValue 10000 
		-pre 4
		paintGridSampleDensity;

    floatSliderGrp
        -label (uiRes("m_performPaintGrid.kSurfaceOffsetMin"))
		-field 1
		-min -10 
		-max 10
		-pre 4
		paintGridSurfaceOffsetMin;

    floatSliderGrp
        -label (uiRes("m_performPaintGrid.kSurfaceOffsetMax"))
		-field 1
		-min -10 
		-max 10
		-pre 4
		paintGridSurfaceOffsetMax;
		
	checkBoxGrp -ncb 1 -label1 (uiRes("m_performPaintGrid.kEdgeU"))
					paintGridEdgeU;
	checkBoxGrp -ncb 1 -label1 (uiRes("m_performPaintGrid.kEdgeV"))
					paintGridEdgeV;

	checkBoxGrp -ncb 1 -label1 (uiRes("m_performPaintGrid.kEqualization"))
					paintGridEqualization;

	checkBoxGrp -ncb 1 -label1 (uiRes("m_performPaintGrid.kShareOneBrush"))
					paintGridShareOneBrush;
	
	waitCursor -state 0;
	
	setUITemplate -popTemplate;

	//	'Create' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-label (uiRes("m_performPaintGrid.kPaintStrokes"))
		-command ($callback + " " + $parent + " " + 1)
		$applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;

	setOptionBoxTitle (uiRes("m_performPaintGrid.kAutoPaintGrid"));

	//	Customize the 'Help' menu item text.
	//
	setOptionBoxHelpTag( "PaintGrid" );

	eval (($setup + " " + $parent + " " + 0));	
	
	showOptionBox();
}

//
//  Procedure Name:
//      paintGridHelp
//
//  Description:
//		Return a short description about this command.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      string.
//
proc string paintGridHelp()
{
	return 
	"  Command: paintGrid - Automatically paint current brush in a grid layout on selected surfaces.\n" +
	"Selection: nurbs surfaces";
}

//
//  Procedure Name:
//      assembleCmd
//
//  Description:
//		Construct the command that will apply the option box values.
//
//  Input Arguments:
//      None.
//
proc string assembleCmd()
{
	string $cmd = "paintGrid";

	setOptionVars(false);

	$cmd = ($cmd
		+ " " + `optionVar -query paintGridSpansU` 
		+ " " + `optionVar -query paintGridSpansV` 
		+ " " + `optionVar -query paintGridEdgeU` 
		+ " " + `optionVar -query paintGridEdgeV` 
		+ " " + `optionVar -query paintGridCurveDegree` 
		+ " " + `optionVar -query paintGridStrokesPerSpan` 
		+ " " + `optionVar -query paintGridPointsPerCurve` 
		+ " " + `optionVar -query paintGridNoiseScale` 
		+ " " + `optionVar -query paintGridNoiseFrequency` 
		+ " " + `optionVar -query paintGridSampleDensity` 
		+ " " + `optionVar -query paintGridEqualization` 
		+ " " + `optionVar -query paintGridSurfaceOffsetMin` 
		+ " " + `optionVar -query paintGridSurfaceOffsetMax` 
		+ " " + `optionVar -query paintGridShareOneBrush` 
		);

	return $cmd;
}

//
//  Procedure Name:
//      performPaintGrid
//
//  Description:
//		Perform the paintGrid command using the corresponding 
//		option values.
//
//  Input Arguments:
//      0 - Execute the command.
//      1 - Show the option box dialog.
//      2 - Return the command.
//
global proc string performPaintGrid(int $action)
{
	string $cmd = "";

	switch ($action) {

		//	Execute the command.
		//
		case 0:
			$cmd = `assembleCmd`;
			eval($cmd);
			break;

		//	Show the option box.
		//
		case 1:
			paintGridOptions;
			break;

		//	Return the command string.
		//
		case 2:
			//	Get the command.
			//
			$cmd = `assembleCmd`;
			break;
	}
	return $cmd;
}

