// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  2000
//
// Description:	Scales the overall effect of lighting on a brush.
//		This is useful when compensating for bright lights
//	
//<doc>
//<name scaleBrushBrightness>
//
//<synopsis>
//	scaleBrushBrightness (float $scaleFac, int $template)
//
//<returns>
//  None.
//
//<description>
//  Scales the overall effect of lighting on a brush.
//	This is useful when compensating for bright lights
//
//<flags>
//	float 	$scaleFac A factor to scale the brightness by.
//	int 	$template If true then the factor is applied to the template,
//	    or current brush. Otherwise it is applied to selected strokes and brushes.
//
//<examples>
//  scaleBrushBrightness (2.5, true);
//  scaleBrushBrightness (0.5, false);
//
//</doc>

global proc scaleBrushBrightnessParameters( string $sel, float $scaleFac )
{
	$parm = $sel + ".color1R";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".color1G";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".color1B";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".color2R";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".color2G";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".color2B";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );

	string $leafImage = getAttr( $sel + ".leafImage" );
	string $flowerImage = getAttr( $sel + ".leafImage" );
	$parm = $sel + ".specular";
	setAttr $parm ( getAttr( $parm ) * $scaleFac ); 
	$parm = $sel + ".valRand";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".budColorR";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".budColorG";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".budColorB";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".leafColor1R";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".leafColor1G";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".leafColor1B";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".leafColor2R";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".leafColor2G";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".leafColor2B";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".leafValRand";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".petalColor1R";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".petalColor1G";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".petalColor1B";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".petalColor2R";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".petalColor2G";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".petalColor2B";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );
	$parm = $sel + ".flowerValRand";
	setAttr $parm ( getAttr( $parm ) * $scaleFac );

	float $texColorScale = getAttr ($sel + ".texColorScale" );
	if( $texColorScale != 1 )
	{
		float $texFac = (1-$texColorScale) * $scaleFac + $texColorScale;
		$parm = $sel + ".texColor1R";
		setAttr $parm ( getAttr( $parm ) * $texFac );
		$parm = $sel + ".texColor1G";
		setAttr $parm ( getAttr( $parm ) * $texFac );
		$parm = $sel + ".texColor1B";
		setAttr $parm ( getAttr( $parm ) * $texFac );
		$parm = $sel + ".texColor2R";
		setAttr $parm ( getAttr( $parm ) * $texFac );
		$parm = $sel + ".texColor2G";
		setAttr $parm ( getAttr( $parm ) * $texFac );
		$parm = $sel + ".texColor2B";
		setAttr $parm ( getAttr( $parm ) * $texFac );
	}
}

global proc scaleBrushBrightness( float $scaleFac, int $template )
{
	string $sel, $parm;

	if( $scaleFac < 0.01 )
		$scaleFac = 0.01; // avoid loosing ability to scale back up

	if( $template )
	{
		string $defaultBrush = getDefaultBrush();
		scaleBrushBrightnessParameters( $defaultBrush, $scaleFac );
	}
	else
	{
		string $selected[] = getSelectedBrushes();
		if( size( $selected ) <= 0  )
		{
			warning( (uiRes("m_scaleBrushBrightness.kNoBrushesSelected")));
			return;
		}	
		for( $sel in $selected )
		{
			scaleBrushBrightnessParameters( $sel, $scaleFac );
		}
	}
}
