// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date: 98
//
//
//  Description:
//		This lists related curves to all strokes
//


global proc string[] listAllStrokeCurves( int $listControls )
{
	string	$strokes[] = `listTransforms "-type stroke"`;
	string  $list[];
	int $i;
	int $listIndex = 0;
	for( $i = 0; $i < size( $strokes ); $i++ )
	{
		string $strokeCurves[];
		if( $listControls )
			$strokeCurves =  `listConnections ($strokes[$i]+".controlCurve")`;
		else
			$strokeCurves =  `listConnections ($strokes[$i]+".pathCurve")`;
		for($j = 0; $j < size( $strokeCurves ); $j++ )
		{
			if( nodeType( $strokeCurves[$j] ) == "curveFromSurfaceCoS" )
			{
				string $cos[] = `listConnections  ($strokeCurves[$j] 
									+ ".curveOnSurface")`;
				$list[$listIndex] = $cos[0];
			}
			else
			{
				$list[$listIndex] = $strokeCurves[$j];
			}
			$listIndex++;
		}
	}
	return( $list );
}

global proc string[] listAllCurveFromSurfaceNodes( )
{
	string	$strokes[] = `listTransforms "-type stroke"`;
	string  $list[];
	int $i;
	int $listIndex = 0;
	for( $i = 0; $i < size( $strokes ); $i++ )
	{
		string $strokeCurves[] = `listConnections ($strokes[$i]+".pathCurve")`;
		for($j = 0; $j < size( $strokeCurves ); $j++ )
		{
			if( nodeType( $strokeCurves[$j] ) == "curveFromSurfaceCoS" )
			{
				$list[$listIndex] = $strokeCurves[$j];
				$listIndex++;
			}
		}
	}
	return( $list );
}
