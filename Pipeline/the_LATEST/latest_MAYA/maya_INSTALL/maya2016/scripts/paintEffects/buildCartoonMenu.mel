// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date: 2005 
//
//
//
//  Description:
//      This implements the "Cartoon" menu on the main menubar.
//
//
//  Input Arguments:
//      parent to parent the menu to.
//
//  Return Value:
//      None.
//

global proc ToonAssignFillShaderMenu( string $parent )
//
// Build the Submenu
{
	setParent -menu $parent;
	menuItem -label (uiRes("m_buildCartoonMenu.kSolid")) 
       	-annotation (uiRes("m_buildCartoonMenu.kSolidAnnot"))
		-image "toonSolid.png"
		-command "assignToonShader \"solid\"";
	menuItem -label (uiRes("m_buildCartoonMenu.kLightTwoTone")) 
       	-annotation (uiRes("m_buildCartoonMenu.kTwoToneAnnot"))
		-image "toonLightAngle2.png"
		-command "assignToonShader \"lightAngle\"";

	menuItem -label (uiRes("m_buildCartoonMenu.kBrightTwoTone")) 
       	-annotation (uiRes("m_buildCartoonMenu.kBrightTwoToneAnnot"))
		-image "toonBrightness2.png"
		-command "assignToonShader \"shadedBrightness\"";

	menuItem -label (uiRes("m_buildCartoonMenu.kBrightThreeTone")) 
       	-annotation (uiRes("m_buildCartoonMenu.kBrightThreeToneAnnot"))
		-image "toonBrightness3.png"
		-command "assignToonShader \"threeToneBrightness\"";

	menuItem -label (uiRes("m_buildCartoonMenu.kDark")) 
       	-annotation (uiRes("m_buildCartoonMenu.kDarkAnnot"))
		-image "toonDarkProfile.png"
		-command "assignToonShader \"darkProfile\"";

	menuItem -label (uiRes("m_buildCartoonMenu.kRim")) 
       	-annotation (uiRes("m_buildCartoonMenu.kRimAnnot"))
		-image "toonRimLight.png"
		-command "assignToonShader \"rimLight\"";

	menuItem -label (uiRes("m_buildCartoonMenu.kCircle")) 
       	-annotation (uiRes("m_buildCartoonMenu.kCircleAnnot"))
		-image "toonCircleHigh.png"
		-command "assignToonShader \"circleHighlight\"";

	setParent -menu ..;
}

global proc ToonCreatePfxOutlineMenu( string $parent )
{
	setParent -menu $parent;
    menu -edit -deleteAllItems $parent;

	menuItem -label (uiRes("m_buildCartoonMenu.kNewOutline")) 
		-image "toonAddOutline.png"
		-command "assignNewPfxToon"
       	-annotation (uiRes("m_buildCartoonMenu.kNewOutlineAnnot"));

	menuItem -label (uiRes("m_buildCartoonMenu.kRemoveOutline")) 
		-image "toonRemoveOutline.png"
		-command "removePfxToonOutlines"
       	-annotation (uiRes("m_buildCartoonMenu.kRemoveOutlineAnnot"));
	string $pfxToons[] = `ls -type pfxToon`;
	int $i;

	string $fmt = (uiRes("m_buildCartoonMenu.kAssignToon"));
	for( $i = 0; $i < size( $pfxToons ); $i++ ){
		string $pfxToon = $pfxToons[$i];
		menuItem -label $pfxToon 
 			-command ("assignPfxToon "+$pfxToon+" 0" ) 
        	-annotation `format -s $pfxToon $fmt`;
	}
}

global proc ToonCreateBackgroundColorMenu( string $parent )
{
	setParent -menu $parent;
    menu -edit -deleteAllItems $parent;
	string $perspCameras[] = `listCameras -p`;
	string $orthoCameras[] = `listCameras -o`;
	string $camera;

	string $fmt = (uiRes("m_buildCartoonMenu.kEditCameraBG"));
	for( $camera in $perspCameras ){
		menuItem -label $camera
			-image "toonPerspBackground.png"
 			-command ("editAttributeColor "+$camera + ".backgroundColor" ) 
        	-annotation `format -s $camera $fmt`;
	}

	menuItem -divider true;

	for( $camera in $orthoCameras ){
		menuItem -label $camera 
			-command ("editAttributeColor "+$camera + ".backgroundColor" ) 
        	-annotation `format -s $camera $fmt`;
	}
}

global proc buildCartoonMenu( string $parent )
{
	setParent -menu $parent;
	if( `menu -query -numberOfItems $parent` != 0 ) {
		//
		//	Menu is built already - just return
		//
		return;
	}
	
	// Shading
	menuItem -divider true -dividerLabel (uiRes("m_buildCartoonMenu.kToonShading"));
	
	string $item;

	$item = `menuItem -label (uiRes("m_buildCartoonMenu.kAssignFill"))  
        -annotation (uiRes("m_buildCartoonMenu.kAssignFillAnnot")) 
		-subMenu true -tearOff true -allowOptionBoxes true toonAssignFillShaderItem`;

	ToonAssignFillShaderMenu $item;
	setParent -menu ..;

	$item = `menuItem -label (uiRes("m_buildCartoonMenu.kAssignOutline"))  
        -annotation (uiRes("m_buildCartoonMenu.kAssignOutlineAnnot")) 
		-subMenu true -tearOff false -allowOptionBoxes true toonCreatePfxOutlineItem`;
	menuItem -edit -postMenuCommand ("ToonCreatePfxOutlineMenu " + $item) $item;
	setParent -menu ..;

	menuItem -label (uiRes("m_buildCartoonMenu.kCreateMod")) 
		-annotation (uiRes("m_buildCartoonMenu.kCreateModAnnot")) 
		-image "toonLineModifier.png"
		-command "createLineModifier";

	$item = `menuItem -label (uiRes("m_buildCartoonMenu.kSetCameraBG"))  
        -annotation (uiRes("m_buildCartoonMenu.kSetCameraBGAnnot")) 
		-subMenu true -tearOff true -allowOptionBoxes true toonCreateBackgroundColorItem`;
	menuItem -edit -postMenuCommand ("ToonCreateBackgroundColorMenu " + $item) $item;
	setParent -menu ..;

	// Geometry
	menuItem -divider true -dividerLabel (uiRes("m_buildCartoonMenu.kToonGeometry"));

	menuItem -label (uiRes("m_buildCartoonMenu.kReverseSurf")) 
		-annotation (uiRes("m_buildCartoonMenu.kReverseSurfAnnot")) 
		-image "toonReverseSurfaces.png"
		-command "reverseToonObjects 0";

	menuItem -label (uiRes("m_buildCartoonMenu.kToonToPoly")) 
		-ecr true
		-annotation (uiRes("m_buildCartoonMenu.kToonToPolyAnnot")) 
		-command "PaintEffectsToPoly"
		-image "toonToPolygons.png";
		menuItem -optionBox true
			-annotation (uiRes("m_buildCartoonMenu.kPaintToPolyOptions")) 
			-command "PaintEffectsToPolyOptions";

	// Painting
	menuItem -divider true -dividerLabel (uiRes("m_buildCartoonMenu.kToonPainting"));

	menuItem -label (uiRes("m_buildCartoonMenu.kPaintLineAttr")) 
		-subMenu true -tearOff true -allowOptionBoxes true
        paintLineAttributesItem;

		// specify the attribute name to be displayed in 3dPaint tool 
		// as second parameter to paintToonAttribute
		menuItem -label (uiRes("m_buildCartoonMenu.kLineWidth")) 
	        -image "toonPaintWidth.png"
	       	-annotation (uiRes("m_buildCartoonMenu.kLineWidthAnnot"))
			-command "paintToonAttribute \"lineWidthMap\" \"Line Width\"";

		// specify the attribute name to be displayed in 3dPaint tool 
		// as second parameter to paintToonAttribute
		menuItem -label (uiRes("m_buildCartoonMenu.kLineOffset")) 
	        -image "toonPaintOffset.png"
	       	-annotation (uiRes("m_buildCartoonMenu.kLineOffsetAnnot"))
			-command "paintToonAttribute \"lineOffsetMap\" \"Line Offset\" ";

		// specify the attribute name to be displayed in 3dPaint tool 
		// as second parameter to paintToonAttribute
		menuItem -label (uiRes("m_buildCartoonMenu.kLineOpacity")) 
	        -image "toonPaintOpacity.png"
	       	-annotation (uiRes("m_buildCartoonMenu.kLineOpacityAnnot"))
			-command "paintToonAttribute \"lineOpacityMap\" \"Line Opacity\" ";

		// specify the attribute name to be displayed in 3dPaint tool 
		// as second parameter to paintToonAttribute
		menuItem -label (uiRes("m_buildCartoonMenu.kProfileColor")) 
	        -image "toonPaintProfileColor.png"
	       	-annotation (uiRes("m_buildCartoonMenu.kProfileColorAnnot"))
			-command "paintToonAttribute \"profileColor\" \"Profile Color\" ";

		// specify the attribute name to be displayed in 3dPaint tool 
		// as second parameter to paintToonAttribute
		menuItem -label (uiRes("m_buildCartoonMenu.kCreateColor")) 
	        -image "toonPaintCreaseColor.png"
	       	-annotation (uiRes("m_buildCartoonMenu.kCreateColorAnnot"))
			-command "paintToonAttribute \"creaseColor\" \"Crease Color\" ";

		// specify the attribute name to be displayed in 3dPaint tool 
		// as second parameter to paintToonAttribute
		menuItem -label (uiRes("m_buildCartoonMenu.kBorderColor")) 
	        -image "toonPaintBorderColor.png"
	       	-annotation (uiRes("m_buildCartoonMenu.kBorderColorAnnot"))
			-command "paintToonAttribute \"borderColor\" \"Border Color\" ";

		setParent -menu ..;

	menuItem -label (uiRes("m_buildCartoonMenu.kAssignBrush")) 
		-annotation (uiRes("m_buildCartoonMenu.kAssignBrushAnnot")) 
		-image "toonAssignPfxBrush.png"
		-command "assignBrushToPfxToon";

	menuItem -divider true -dividerLabel (uiRes("m_buildCartoonMenu.kToonLibrary"));

	menuItem -label (uiRes("m_buildCartoonMenu.kGetToon")) 
		-annotation (getRunTimeCommandAnnotation("GetToonExample"))
		-image "toonGetExample.png"
		-command "GetToonExample";
}

