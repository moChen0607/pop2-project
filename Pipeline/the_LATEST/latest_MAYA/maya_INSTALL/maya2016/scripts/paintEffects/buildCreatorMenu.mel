// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  16 Feb 1999
//
//
//
//  Description:
//      This implements the "Display" menu on the main menubar.
//


// Helper procs. these are approxomately in the same order the items are in the Display menu

// global proc gridMenuUpdate() {
// //
// // This is called when a "gridDisplayChanged" event is detected.
// // Update the menu item, the option var and the gShowGrid variable.
// //
// 	if( `menuItem -exists dispGridItem` ) {
// 		menuItem -e -cb `grid -q -tgl` dispGridItem;
// 	}
// }

// global proc viewAxesMenuUpdate() {
// //
// // This is called when a "viewAxesDisplayChanged" event is detected.
// // Update the menu item, the option var and the gToggleViewAxis variable.
// //
// 	if( `menuItem -exists viewAxesItem` ) {
// 		menuItem -e -cb `toggleAxis -q -v` viewAxesItem;
// 	}
// }

// global proc originAxesMenuUpdate() {
// //
// // This is called when a "originAxesDisplayChanged" event is detected.
// // Update the menu item, the option var and the gToggleOriginAxis variable.
// //
// 	if( `menuItem -exists originAxesItem` ) {
// 		menuItem -e -cb `toggleAxis -q -o` originAxesItem;
// 	}
// }

// Moved to brushToolSettings.mel
//global proc brushToolSettings(){
//	if ( !`window -exists PaintEffectsBrushWindow` ){
//
//		window
//			-t "Paint Effects Brush Settings"
//			-width 510 -height 600
//			PaintEffectsBrushWindow;
//
//		// string $lName = `frameLayout -bv 0 -cl 0 -cll 0 -lv 0`;
//		string $cmd = "getDefaultBrush( )";
//		string $defName = `eval $cmd`;
//
//		string $lName = `paneLayout`;
//
//		createEditor $lName $defName;
//
//		setParent ..;
//		frameLayout;
//		nameField -ncc ("brushNameCallback " + $lName) -o $defName;
//	}
//
//	showWindow PaintEffectsBrushWindow;
//}

global proc creatorGlobalSettings(){

	if ( !`window -exists CreatorGlobalsWindow` ){
        string $windowTitle = (uiRes("m_buildCreatorMenu.kPaintsEffectsGlobals"));
		window -title $windowTitle
			-iconName $windowTitle
			-width 510 -height 600
			CreatorGlobalsWindow;

		string $lName = `frameLayout -bv 0 -cl 0 -cll 0 -lv 0`;

		createEditor $lName "strokeGlobals";
	}

	showWindow CreatorGlobalsWindow;
}

global proc checkPresetBlend()
{
	global string $presetBlendMenu;
	global int $gPresetBlending;

	if(`menuItem -q -cb presetBlendMenu`)
	{
		$gPresetBlending = 1;
	}
	else
	{
		$gPresetBlending = 0;
		if (`window -ex brushPresetBlendWnd`)
		{
			deleteUI -window brushPresetBlendWnd;
		}
		
	}
}

global proc changeTubeDirection()
{
	int $attr;
	string $brush;

	$brush = getDefaultBrush();
	$attr = `getAttr($brush + ".tubeDirection")`;
	$attr = !$attr;
	setAttr ($brush + ".tubeDirection") $attr;
}

global proc updateCreatorMenu(string $parent)
{
	global string $gCreatorWireCtx;
	if ( `licenseCheck -m "edit" -typ "particlePaint"`) {
		int $doProject = `dynWireCtx -q -dp $gCreatorWireCtx`;
		menuItem -e -radioButton ($doProject) ($parent + "|PaintOnPaintable");
		menuItem -e -radioButton (!$doProject) ($parent + "|PaintOnPlane");
	}
}

global proc buildCreatorMenu ( string $parent ) {
//
//	Build the Creator menu.  Checks to see if it's already
//	been built, and returns if this is true.
//
	setParent -m $parent;

	string $characterGeneratorURL = "https://charactergenerator.autodesk.com/account/MyAvatars.aspx";
	string $recapURL = "https://recap360.autodesk.com/";

	menuItem -divider true -dividerLabel (uiRes("m_buildCreatorMenu.kCloudServicesDivider"));

		menuItem -label (uiRes("m_buildCreatorMenu.kCharacterGenerator"))
			-version "2016"
			-annotation  (uiRes("m_buildCreatorMenu.kCharacterGeneratorAnnot"))
			-command ( "showHelp -absolute \"" + $characterGeneratorURL + "\"" );

		menuItem -label (uiRes("m_buildCreatorMenu.kReCap"))
			-version "2016"
			-annotation  (uiRes("m_buildCreatorMenu.kReCapAnnot"))
			-command ( "showHelp -absolute \"" + $recapURL + "\"" );

	global string	$gCreatorWireCtx;
	global int		$gPresetBlending;
	global string	$presetBlendMenu;
	string			$flipTubeDirMenu;

	// "Paint Effects" is under "MODELING->Generate".
//	if( `menu -q -ni $parent` == 0 ) {

	menuItem -divider true -dividerLabel (uiRes("m_buildCreatorMenu.kPaintEffectsDivider"));

		menuItem -label (uiRes("m_buildCreatorMenu.kPfxTool"))
			-annotation  (uiRes("m_buildCreatorMenu.kPfxToolAnnot"))
			-image "paintEffectsTool.png"
			-command "PaintEffectsTool";
		menuItem -optionBox true
			-annotation (uiRes("m_buildCreatorMenu.kPfxToolOptAnnot"))
			-image "paintEffectsTool.png"
			-command "PaintEffectsToolOptions";
	
		if ( `licenseCheck -m "edit" -typ "particlePaint"`) {
			menuItem -label (uiRes("m_buildCreatorMenu.kPfxMakePaintable"))
				-annotation (uiRes("m_buildCreatorMenu.kPfxMakePaintableAnnot"))
				-image "makePaintable.png" 
				-command ("MakePaintable");
		}
		
		menuItem -d true -ld false;

		menuItem -label (uiRes("m_buildCreatorMenu.kPfxGetBrush"))
			-annotation  (uiRes("m_buildCreatorMenu.kPfxGetBrushAnnot"))
			-image "paintEffectsBrushesLarge.png"
			-command ("{VisorWindow;string $pnl=visorPanelName();if(size($pnl)>0) visorPanelMenuCommand( $pnl, \"selectOrCreateTabByLabel Paint Effects\");}");

		menuItem -label (uiRes("m_buildCreatorMenu.kPfxTemplBrush"))
			-annotation (uiRes("m_buildCreatorMenu.kPfxTemplBrushAnnot"))
			-image "templateBrushSettings.png"  
			-command "TemplateBrushSettings";
		menuItem -label (uiRes("m_buildCreatorMenu.kPfxResetTempl"))
			-annotation (uiRes("m_buildCreatorMenu.kPfxResetTemplAnnot"))
			-image "resetTemplateBrush.png"  
			-command "ResetTemplateBrush";

		menuItem -label (uiRes("m_buildCreatorMenu.kPfxFlipTubeDir"))
			-annotation (uiRes("m_buildCreatorMenu.kPfxFlipTubeDirAnnot"))
			-image "flipTube.png"
			-command "changeTubeDirection" flipTubeDirMenu;

		menuItem -label (uiRes("m_buildCreatorMenu.kPfxMakeCollide"))
			-annotation (uiRes("m_buildCreatorMenu.kPfxMakeCollideAnnot"))
			-version "2014"
			-image "hairCollide.png"
			-command "makeCollidePaintEffects" pfxMakeCollideMenu;
			
		menuItem -d true -ld false;
		
		if ( `licenseCheck -m "edit" -typ "particlePaint"`) {
			radioMenuItemCollection;
			menuItem -label (uiRes("m_buildCreatorMenu.kPfxPaintOnObj"))
				-radioButton ( false )
				-annotation (uiRes("m_buildCreatorMenu.kPfxPaintOnObjAnnot"))
				-command ("PaintOnPaintableObjects") PaintOnPaintable;
			menuItem -label (uiRes("m_buildCreatorMenu.kPfxPaintOnView"))
				-radioButton ( false )
				-annotation (uiRes("m_buildCreatorMenu.kPfxPaintOnViewAnnot"))
				-command ("PaintOnViewPlane") PaintOnPlane;

			menuItem -d true -ld false;
			
			menuItem -label (uiRes("m_buildCreatorMenu.kPfxSetLastStroke"))
				-annotation  (uiRes("m_buildCreatorMenu.kPfxSetLastStrokeAnnot"))
				-command  "ApplySettingsToLastStroke";
			menuItem -label  (uiRes("m_buildCreatorMenu.kPfxGetSelStroke"))
				-annotation (uiRes("m_buildCreatorMenu.kPfxGetSelStrokeAnnot"))
				-command "GetSettingsFromSelectedStroke";
			menuItem -label (uiRes("m_buildCreatorMenu.kPfxSetSelStroke"))
				-annotation (uiRes("m_buildCreatorMenu.kPfxSetSelStrokeAnnot"))
				-command "ApplySettingsToSelectedStroke";
			
			menuItem -d true -ld false;
			
			menuItem -label (uiRes("m_buildCreatorMenu.kPfxShareBrush"))
				-annotation (uiRes("m_buildCreatorMenu.kPfxShareBrushAnnot"))
				-command "ShareOneBrush";
			menuItem -label (uiRes("m_buildCreatorMenu.kPfxRemoveSharing"))
				-annotation (uiRes("m_buildCreatorMenu.kPfxRemoveSharingAnnot"))
				-command "RemoveBrushSharing";

			menuItem -label  (uiRes("m_buildCreatorMenu.kPfxSelNames"))
				-annotation (uiRes("m_buildCreatorMenu.kPfxSelNamesAnnot"))
				-command "SelectBrushNames";

			menuItem -d true -ld false;

			menuItem -label  (uiRes("m_buildCreatorMenu.kPfxCreateMod"))
				-annotation (uiRes("m_buildCreatorMenu.kPfxCreateModAnnot"))
				-command "createLineModifier";
			menuItem -label (uiRes("m_buildCreatorMenu.kPfxSetLineModifierObject"))
				-annotation (uiRes("m_buildCreatorMenu.kPfxSetLineModifierObjecteAnnot"))
				-version "2014"
				-command "setLineModifierFillObject";
				
			menuItem -d true -ld false;

			menuItem -l  (uiRes("m_buildCreatorMenu.kPfxBrushAnim")) -subMenu true -aob true; 

			menuItem -label (uiRes("m_buildCreatorMenu.kPfxLoopBrush"))
				 -annotation (uiRes("m_buildCreatorMenu.kPfxLoopBrushAnnot"))
				 -command "LoopBrushAnimation"
            	 -dmc "performLoopBrushAnim 2";
    		menuItem -optionBox true -command "LoopBrushAnimationOptions";

			menuItem -label (uiRes("m_buildCreatorMenu.kPfxBrushSpring"))
				 -annotation  (uiRes("m_buildCreatorMenu.kPfxBrushSpringAnnot"))
				 -command "MakeBrushSpring"
        	     -dmc "performMakeBrushSpring 2";
    		menuItem -optionBox true -command "MakeBrushSpringOptions";

			menuItem -label  (uiRes("m_buildCreatorMenu.kPfxBakeSpring"))
				 -annotation  (uiRes("m_buildCreatorMenu.kPfxBakeSpringAnnot"))
				 -command "BakeSpringAnimation"
             	 -dmc "performBakeBrushSpringAnim 2";
    		menuItem -optionBox true -command "BakeSpringAnimationOptions";

			setParent -m ..;

			menuItem -l  (uiRes("m_buildCreatorMenu.kPfxCurveUtils")) -subMenu true -aob true;
			menuItem -l  (uiRes("m_buildCreatorMenu.kPfxSimpStrokePath"))
				-annotation 
				 (uiRes("m_buildCreatorMenu.kPfxSimpStrokePathAnnot"))
				-c "SimplifyStrokePathCurves";

			menuItem -l (uiRes("m_buildCreatorMenu.kPfxStrokeConCurv"))
				-annotation 
				 (uiRes("m_buildCreatorMenu.kPfxStrokeConCurvAnnot"))
				-c "SetStrokeControlCurves";

			menuItem -label (uiRes("m_buildCreatorMenu.kPfxBrushCurves"))
				-annotation (uiRes("m_buildCreatorMenu.kPfxBrushCurvesAnnot"))
				-command "AttachBrushToCurves";
				
			menuItem -label (uiRes("m_buildCreatorMenu.kPfxBrushTransfer"))
				-annotation (uiRes("m_buildCreatorMenu.kPfxBrushTransferAnnot"))
				-command "reparentStrokes";

			menuItem -label (uiRes("m_buildCreatorMenu.kPfxPressureCurve"))
				 -annotation (uiRes("m_buildCreatorMenu.kPfxPressureCurveAnnot"))
				 -command "MakePressureCurve"
            	 -dmc "performMakePressureCurve 2";
    		menuItem -optionBox true -command "MakePressureCurveOptions";

			setParent -m ..;
			menuItem -l (uiRes("m_buildCreatorMenu.kPfxAutoPaint")) -subMenu true -aob true;
			menuItem -l (uiRes("m_buildCreatorMenu.kPfxPaintGrid"))
				-annotation 
		 		 (uiRes("m_buildCreatorMenu.kPfxPaintGridAnnot"))
				-c "PaintGrid"
           		-dmc "performPaintGrid 2";
    		menuItem -optionBox true -command "PaintGridOptions";

			menuItem -l (uiRes("m_buildCreatorMenu.kPfxPaintRandom"))
				-annotation 
		 		(uiRes("m_buildCreatorMenu.kPfxPaintRandomAnnot"))
				-c "PaintRandom"
           		-dmc "performPaintRandom 2";
   			menuItem -optionBox true -command "PaintRandomOptions";

			setParent -m ..;
		
			menuItem -d true -ld false;
		}
		
		menuItem -label (uiRes("m_buildCreatorMenu.kPfxGlobals"))
			-annotation (uiRes("m_buildCreatorMenu.kPfxGlobalsAnnot"))
			-command "PaintEffectsGlobalSettings";

		menuItem -label  (uiRes("m_buildCreatorMenu.kPfxMeshQual"))
			-annotation (uiRes("m_buildCreatorMenu.kPfxMeshQualAnnot"))
			-command "PaintEffectsMeshQuality";

		menuItem -l (uiRes("m_buildCreatorMenu.kPfxPresetBlend")) -cb false
			-annotation  (uiRes("m_buildCreatorMenu.kPfxPresetBlendAnnot"))
			-command "checkPresetBlend" presetBlendMenu;

		menuItem -ecr false -optionBox 1 
			-annotation  (uiRes("m_buildCreatorMenu.kPfxPresetBlendLevels"))
			-l "Preset Blending"
			-c "PresetBlendingWindow";


		menuItem -label (uiRes("m_buildCreatorMenu.kPfxSaveBrushPreset"))
			-annotation  (uiRes("m_buildCreatorMenu.kPfxSaveBrushPresetAnnot"))
			-command "SaveBrushPreset";

		updateCreatorMenu($parent);
//	}
}

