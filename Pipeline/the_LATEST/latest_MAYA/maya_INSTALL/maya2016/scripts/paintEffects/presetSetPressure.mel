// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.



proc int isShadingPressureMap( int $mapIndex )
{
	if( (($mapIndex >= 2 ) && ($mapIndex <= 5 ))
		|| ($mapIndex == 8) || ($mapIndex == 9) )
	{
		return true;
	}
	return false;
}

global proc presetSetPressure(int $pindex, int $mapping, float $min, float $max )
{
	global float $gPresetBrushShadeBlend;
	global float $gPresetBrushShapeBlend;
	global int   $gPresetBlending;
	global string $gCreatorWireCtx;
	string $whichCtx = $gCreatorWireCtx;
	int $cMap;
	int $isShade;
	float $cMin, $cMax;

	if( $gPresetBlending && ($gPresetBrushShadeBlend < .999 || $gPresetBrushShapeBlend < .999 ))
	{
		switch( $pindex )
		{
			case 1:
				$cMap = `dynWireCtx -q -pm1 $whichCtx`;
				$cMin = `dynWireCtx -q -ps1 $whichCtx`;
				$cMax = `dynWireCtx -q -px1 $whichCtx`;
			break;
			case 2:
				$cMap = `dynWireCtx -q -pm2 $whichCtx`;
				$cMin = `dynWireCtx -q -ps2 $whichCtx`;
				$cMax = `dynWireCtx -q -px2 $whichCtx`;
			break;
			case 3:
				$cMap = `dynWireCtx -q -pm3 $whichCtx`;
				$cMin = `dynWireCtx -q -ps3 $whichCtx`;
				$cMax = `dynWireCtx -q -px3 $whichCtx`;
			break;
			default:
			return;
		}
		$isShade = isShadingPressureMap( $cMap );
		if( $cMap != $mapping )
		{
			if( ($isShade &&  $gPresetBrushShadeBlend < 0.5 )
				||(!$isShade &&  $gPresetBrushShapeBlend < 0.5 ))
			{
				return;
			}
			else
			{
				$mapping = $cMap;
			}
		}
		else
		{
			if( $isShade )
			{
				$min = $min *  $gPresetBrushShadeBlend + $cMin * (1-$gPresetBrushShadeBlend);
				$max = $max *  $gPresetBrushShadeBlend + $cMax * (1-$gPresetBrushShadeBlend);
			}
			else
			{
				$min = $min *  $gPresetBrushShapeBlend + $cMin * (1-$gPresetBrushShapeBlend);
				$max = $max *  $gPresetBrushShapeBlend + $cMax * (1-$gPresetBrushShapeBlend);
			}
		}
	}
	setStrokePressure( $pindex, $mapping, $min, $max );

}
