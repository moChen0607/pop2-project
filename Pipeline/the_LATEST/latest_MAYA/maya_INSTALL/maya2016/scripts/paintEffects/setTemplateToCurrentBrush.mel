// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Description:
//		This script is executed when a new scene file is created.  It will create
//		panels if required or use existing panels.
//
//  Creation Date: Dec 1998
//
global proc string setTemplateToCurrentBrush()
{
	// No arguments. Takes selection list and finds
	// the first stroke on it, then copies that strokes'
	// brush to the template brush.
	// Returns the name of the brush copied to the Template.

	string $nodes[] = `ls -sl`;
	string $node;
	string $brush = "";

	int $idx = size( $nodes );
	int $i = 0;
	while ($i < $idx) {
		if (`nodeType $nodes[$i]` == "transform") {
			string $chillins[] = `listRelatives -c -s -f $nodes[$i]`;
			string $chillin;

			for ($chillin in $chillins) {
				string $type = `nodeType $chillin`;

				if ($type == "stroke" || $type == "pfxHair" || $type == "pfxToon") {
					// TODO if there are multiple strokes, we should get only
					// the first one!?
					$nodes[$i] = $chillin;
				}
			}
		}
		string $type = `nodeType $nodes[$i]`;
		if ($type == "stroke" || $type == "pfxHair" || $type == "pfxToon") {
			string $attr = $nodes[$i] + ".brush";
			string $result = `connectionInfo -sfd $attr`;
			string $buffer[];
			int $num = `tokenize $result "." $buffer`;
			$brush = $buffer[0];
			$i = $idx; // Break out of loop.
		}
		else {
			if (`nodeType $nodes[$i]` == "brush") {
				$brush = $nodes[$i];
				$i = $idx; // Break out of loop.
			}
		}
		++$i;
	}
	if ($brush == "") {
		// No stroke or brush was on the selection list.
		warning((uiRes("m_setTemplateToCurrentBrush.kNoBrushSelected")));
		return "";
	}
	string $defaultBrush = `getDefaultBrush`;
	if( objExists($defaultBrush +".notes") ) {
		if( catch(`deleteAttr -at "notes" $defaultBrush`) ) {
			string $fmt = uiRes("m_brushPresetSetup.kCouldNotDeleteDynAttrNotes");
			error( `format -s $defaultBrush $fmt`);
		}
	}
	copyNode $brush $defaultBrush;

	// transform brushscale to template brush space	
	string $bscale = $defaultBrush + ".globalScale";
	float $val = getAttr( $bscale );
	int $sW = getAttr($defaultBrush + ".screenspaceWidth");
	float $scalefac;
	if( $sW )
	{
		$scalefac = getAttr( "strokeGlobals.canvasScale" );	
	}
	else
	{
		$scalefac = getAttr( "strokeGlobals.sceneScale" );	
	}
	if( $scalefac < 0.00001 )
	{
		$scalefac = .00001;
	}
	setAttr( $bscale, $val / $scalefac );

	return $brush;
}
