// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

displayString -replace -value "Assign Paint Effects Brush to Toon Lines" m_buildCartoonMenu.kAssignBrush;
displayString -replace -value "Assign a Paint Effects brush to selected pfxToon nodes" m_buildCartoonMenu.kAssignBrushAnnot;
displayString -replace -value "Assign Fill Shader" m_buildCartoonMenu.kAssignFill;
displayString -replace -value "Assign a cartoon fill shader to selected surfaces" m_buildCartoonMenu.kAssignFillAnnot;
displayString -replace -value "Assign Outline" m_buildCartoonMenu.kAssignOutline;
displayString -replace -value "Assign a Paint Effects outline to selected surfaces" m_buildCartoonMenu.kAssignOutlineAnnot;
displayString -replace -value "Assign ^1s to selected items" m_buildCartoonMenu.kAssignToon;
displayString -replace -value "Border Color" m_buildCartoonMenu.kBorderColor;
displayString -replace -value "Paint a border line color map for the selected toon node" m_buildCartoonMenu.kBorderColorAnnot;
displayString -replace -value "Shaded Brightness Three Tone" m_buildCartoonMenu.kBrightThreeTone;
displayString -replace -value "Index three colors based on the diffuse shaded brightness" m_buildCartoonMenu.kBrightThreeToneAnnot;
displayString -replace -value "Shaded Brightness Two Tone" m_buildCartoonMenu.kBrightTwoTone;
displayString -replace -value "Index a ramp color based on the diffuse shaded brightness" m_buildCartoonMenu.kBrightTwoToneAnnot;
displayString -replace -value "Circle Highlight" m_buildCartoonMenu.kCircle;
displayString -replace -value "A light angle shader with a round hard edged specular highlight" m_buildCartoonMenu.kCircleAnnot;
displayString -replace -value "Crease Color" m_buildCartoonMenu.kCreateColor;
displayString -replace -value "Paint a crease line color map for the selected toon node" m_buildCartoonMenu.kCreateColorAnnot;
displayString -replace -value "Create Modifier" m_buildCartoonMenu.kCreateMod;
displayString -replace -value "Create a line modifier object and attach to selected toon lines" m_buildCartoonMenu.kCreateModAnnot;
displayString -replace -value "Dark Profile" m_buildCartoonMenu.kDark;
displayString -replace -value "Threshold the color based on the view angle with the edges" m_buildCartoonMenu.kDarkAnnot;
displayString -replace -value "Edit ^1s background color" m_buildCartoonMenu.kEditCameraBG;
displayString -replace -value "Get Toon Example..." m_buildCartoonMenu.kGetToon;
displayString -replace -value "Light Angle Two Tone" m_buildCartoonMenu.kLightTwoTone;
displayString -replace -value "Line Offset" m_buildCartoonMenu.kLineOffset;
displayString -replace -value "Paint a line offset map for the selected toon node" m_buildCartoonMenu.kLineOffsetAnnot;
displayString -replace -value "Line Opacity" m_buildCartoonMenu.kLineOpacity;
displayString -replace -value "Paint a line opacity map for the selected toon node" m_buildCartoonMenu.kLineOpacityAnnot;
displayString -replace -value "Line Width" m_buildCartoonMenu.kLineWidth;
displayString -replace -value "Paint a line width map for the selected toon node" m_buildCartoonMenu.kLineWidthAnnot;
displayString -replace -value "Add New Toon Outline" m_buildCartoonMenu.kNewOutline;
displayString -replace -value "Assign a new Paint Effects toon outline to selected items" m_buildCartoonMenu.kNewOutlineAnnot;
displayString -replace -value "Paint Line Attributes" m_buildCartoonMenu.kPaintLineAttr;
displayString -replace -value "Convert Paint Effects to polyons options" m_buildCartoonMenu.kPaintToPolyOptions;
displayString -replace -value "Profile Color" m_buildCartoonMenu.kProfileColor;
displayString -replace -value "Paint a profile line color map for the selected toon node" m_buildCartoonMenu.kProfileColorAnnot;
displayString -replace -value "Remove Current Toon Outlines" m_buildCartoonMenu.kRemoveOutline;
displayString -replace -value "Remove any toon outlines for selected items" m_buildCartoonMenu.kRemoveOutlineAnnot;
displayString -replace -value "Reverse Surfaces" m_buildCartoonMenu.kReverseSurf;
displayString -replace -value "Reverse selected surfaces" m_buildCartoonMenu.kReverseSurfAnnot;
displayString -replace -value "Rim Light" m_buildCartoonMenu.kRim;
displayString -replace -value "Edges have a white highlight" m_buildCartoonMenu.kRimAnnot;
displayString -replace -value "Set Camera Background Color" m_buildCartoonMenu.kSetCameraBG;
displayString -replace -value "Set the background color for a particular camera" m_buildCartoonMenu.kSetCameraBGAnnot;
displayString -replace -value "Solid Color" m_buildCartoonMenu.kSolid;
displayString -replace -value "Fill the surface with a constant, non-shaded color" m_buildCartoonMenu.kSolidAnnot;
displayString -replace -value "Geometry" m_buildCartoonMenu.kToonGeometry;
displayString -replace -value "Library" m_buildCartoonMenu.kToonLibrary;
displayString -replace -value "Painting" m_buildCartoonMenu.kToonPainting;
displayString -replace -value "Shading" m_buildCartoonMenu.kToonShading;
displayString -replace -value "Convert Toon To Polygons" m_buildCartoonMenu.kToonToPoly;
displayString -replace -value "Convert Paint Effects to polygons" m_buildCartoonMenu.kToonToPolyAnnot;
displayString -replace -value "Index a ramp color based on the light angle, brightness based on light brightness" m_buildCartoonMenu.kTwoToneAnnot;
