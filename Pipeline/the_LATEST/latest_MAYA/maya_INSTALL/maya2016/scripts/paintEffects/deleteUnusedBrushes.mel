// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date: 2001 
//
//
//<doc>
//<name deleteUnusedBrushes>
//
//<synopsis>
//		deleteUnusedBrushes
//
//<returns>
//		None.	
//
//<description>
//		This deletes all brushes that are not attached to any strokes
//		This can be used to clean up default brush nodes that may accumulate
//		when doing a large number of import operations.
//
//<flags>
//	None.
//
//<examples>
// deleteUnusedBrushes;
//
//</doc>

global proc int deleteUnusedBrushes()
{
	//	Are we being called during an Optimize Scene Size operation?
	// 	If so, we need to display progress information.  This was done
	//	as a global variable to avoid having to change the signature of
	//	the proc, as that could break many scripts, both internal and
	//	customer-written.
	//
	int $showProgress = cleanUp_ShouldReportProgress();

	int $i;

	string	$brushes[] = `ls -type brush`;
	string  $defaultBrush = getDefaultBrush();

	if( $showProgress )
	{
		cleanUp_StartProgress( size($brushes), "Deleting unused brushes", 1 );
	}

	int $numDeleted = 0;

	for( $i = 0; $i < size( $brushes ); $i++ )
	{
		if( $showProgress )
		{
			if( cleanUp_SetProgress($i) ) break;
		}

		if( $brushes[$i] != $defaultBrush ){
			string $con[] = `listConnections ($brushes[$i]+".outBrush")`;
			if( size( $con ) == 0 ){
				if ( `reference -q -isNodeReferenced $brushes[$i]`) {
					warning( (uiRes("m_deleteUnusedBrushes.kCantDeleteUnusedBrush")));
				}
				else {
					string $cmd = "delete " + $brushes[$i];
					evalEcho($cmd);
					$numDeleted++;
				}
			}
		}
	}
	
	if( $showProgress )
	{
		cleanUp_EndProgress();
	}

	return $numDeleted;	
}
