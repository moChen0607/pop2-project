// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//	Creation Date:	Jan 31, 2007
//
//	Procedure Name:
//	AEreplaceFilename
//
//  Description:
//      This is part of a set of methods for changing
//		a property sheet to point to a new node.
//		(A way of efficiently re-using existing controls)
//		This method re-connects a filename control.
//
//  Input Arguments:
//      The name of the existing control
//		The name of the new plug
//		
//  Return Value:
//      None
//


//
//  Procedure Name:
//	AEassignFilenameCB
//

global proc int AEassignFilenameCB( string $fileAttribute,
                                 string $filename,
                                 string $fileType )
{
	//
	// Description:
	//	This procedure is called when the user changes the file texture name in
	//	the edit box in the file texture attribute editor (whether by manually
	//	typing it in, or by using the file browser to choose a new file).
	//
	//	This procedure updates the file name attribute 

	setAttr $fileAttribute -type "string" $filename;

	string $currentDir = `workspace -q -dir`;
    retainWorkingDirectory ($currentDir);

	return true;
}

//
//  Procedure Name:
//	AEfilenameBrowser
//

global proc AEfilenameBrowser( string $cmd )
{
    string  $workspace = `workspace -q -fn`;
    string $startDir = `setWorkingDirectory $workspace "image" "sourceImages"`;

	string $filter = buildImageFileFilterList();
	string $caption = (uiRes("m_AEreplaceFilename.kOpenImage"));

	string $fileCmd = ("fileDialog2 -caption \"" + $caption + "\" -fileMode 1");
	$fileCmd += (" -fileFilter \"" + $filter + "\"");
	$fileCmd += (" -startingDirectory \"" + $startDir + "\"");

	string $file[] = `eval $fileCmd`;
	if (0 < size($file) && "" != $file[0])
	{
		string $path = fromNativePath($file[0]);
		$cmd += (" \"" + $path + "\" \"\"");
		eval $cmd;
	}
}


//
//  Procedure Name:
//	AEreplaceFilename
//

global proc AEreplaceFilename(	string $controlName,
								string $plugName,
								string $changedCommand )
{
	string $curParent = `setParent -query`;
	
	setParent $controlName;
	connectControl -fileName textureNameField $plugName;

	string $command = "AEassignFilenameCB " + " "+$plugName;

    button -e -c
		("AEfilenameBrowser \"" + $command + "\"" ) browser;
		
	setParent $curParent;

	if ( $changedCommand != "" ) {
		string $buffer[];
		tokenize($plugName,".",$buffer);
		string $cmd = $changedCommand+" \""+$buffer[0]+"\"";
		scriptJob -p $controlName -rp -ac $plugName $cmd;
	}

}

