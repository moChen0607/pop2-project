// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//	Procedure Name:
//	AEextendSurfaceTemplate
//
//	Description Name;
//	Creates the attribute editor controls for the extendSurface node
//
//	Input Value:
//	nodeName
//
//	Output Value:
//	None
//

global proc extendSurfaceMethodControls( string $nodeName )
{
	string $attr = $nodeName + ".extendMethod";
	int $value = `getAttr $attr`;

	if ($value == 0) {
		editorTemplate -dimControl $nodeName "extensionType" false;
		editorTemplate -dimControl $nodeName "distance" false;
		editorTemplate -dimControl $nodeName "inputPoint" true;
	} else if ($value == 1) {
		editorTemplate -dimControl $nodeName "extensionType" false;
		editorTemplate -dimControl $nodeName "distance" true;
		editorTemplate -dimControl $nodeName "inputPoint" true;
	} else {
		editorTemplate -dimControl $nodeName "extensionType" true;
		editorTemplate -dimControl $nodeName "distance" true;
		editorTemplate -dimControl $nodeName "inputPoint" false;
	}
}

global proc extendSurfaceJoinControls( string $nodeName )
{
	string $attr = $nodeName + ".join";
	int $value = `getAttr $attr`;

	if ($value == 0) {
		editorTemplate -dimControl $nodeName "removeMultipleKnots" true;
	} else {
		editorTemplate -dimControl $nodeName "removeMultipleKnots" false;
	}
}

global proc AEextendSurfaceTemplate( string $nodeName )
{
	string $inputSurface = (uiRes("m_AEextendSurfaceTemplate.kInputSurface"));
	editorTemplate -beginScrollLayout;
	
	editorTemplate -beginLayout (uiRes("m_AEextendSurfaceTemplate.kExtendSurfaceHistory")) -collapse false;
		editorTemplate -callCustom ("AEinputNew \""+$inputSurface+"\"")
					("AEinputReplace \""+$inputSurface+"\"")
					"inputSurface";
		editorTemplate -addControl "extensionType";
		editorTemplate -addControl "distance";
		editorTemplate -addControl "inputPoint";
		editorTemplate -addControl "extendSide";
		editorTemplate -addControl "extendDirection";
		editorTemplate -addControl "removeMultipleKnots";

	editorTemplate -endLayout;

	// include/call base class/node attributes
	AEabstractBaseCreateTemplate $nodeName;

	editorTemplate -addExtraControls;

	editorTemplate -endScrollLayout;
	
	editorTemplate -suppress "extendMethod" "extendSurfaceMethodControls";
	editorTemplate -suppress "join" "extendSurfaceJoinControls";
	editorTemplate -suppress "targetObject";
	editorTemplate -suppress "outputSurface";
}

