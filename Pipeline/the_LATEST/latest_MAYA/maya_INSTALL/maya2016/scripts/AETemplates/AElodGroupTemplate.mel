// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:	1999
//
//  Procedure Name:
//	AElodGroupTemplate
//
//  Description:
//	Creates the attribute editor controls for the joint Node
//
//  Input Value:
//	nodeName
//
//  Output Value:
//	None
//

//  Procedure Name:
//	AElodGroupTemplate
//
//

global proc updateMinMaxDistances( string $nodeName ) 
{
	string $nodeAttr = $nodeName + ".minMaxDistance";
	int $value = `getAttr $nodeAttr`;

	if ( $value ) {
		editorTemplate -dimControl $nodeName "minDistance" false;
		editorTemplate -dimControl $nodeName "maxDistance" false;
	} else {
		editorTemplate -dimControl $nodeName "minDistance" true;
		editorTemplate -dimControl $nodeName "maxDistance" true;
	}	
}

global proc validateMinDistance( string $nodeName ) 
{
	float $thresh[] = `getAttr ($nodeName + ".threshold")`;
	if ( 0 == size($thresh) ) {
		// Threshold array can be empty.
		return;
	}

	string	$minDistAttr = $nodeName + ".minDistance";
	float 	$minDist 	 = `getAttr $minDistAttr`;

	if ( $thresh[0] < $minDist ) {
		// The minimum distance cannot be bigger
		// then the smallest threshold.
		setAttr $minDistAttr $thresh[0];
	}
}

global proc validateMaxDistance( string $nodeName ) 
{
	float 	$thresh[] = `getAttr ($nodeName + ".threshold")`;
	int	  	$nbThresh = size($thresh);
	if ( 0 == $nbThresh ) {
		// Threshold array can be empty.
		return;
	}

	string	$maxDistAttr = $nodeName + ".maxDistance";
	float 	$maxDist     = `getAttr $maxDistAttr`;

	if ( $thresh[$nbThresh-1] > $maxDist ) {
		// The maximum distance cannot be smaller 
		// then the biggest treshhold.
		setAttr $maxDistAttr $thresh[$nbThresh-1];
	} 
}

global proc AElodGroupTemplate ( string $nodeName ) 
{
editorTemplate -beginScrollLayout;
	// include/call base class/node attributes
	AEtransformMain $nodeName;

editorTemplate -beginLayout (uiRes("m_AElodGroupTemplate.kLodAttributes"))  -collapse 0;

	editorTemplate -beginNoOptimize;
	editorTemplate -collapse false -addControl "worldSpace" ;
	editorTemplate -collapse false -addControl "minMaxDistance" 
			"updateMinMaxDistances";
	editorTemplate -endNoOptimize;
	editorTemplate -collapse false -addControl "minDistance"
			"validateMinDistance";
	editorTemplate -collapse false -addControl "maxDistance"
			"validateMaxDistance";
	editorTemplate -collapse false -addControl "threshold";
	editorTemplate -collapse false -addControl "displayLevel";

editorTemplate -endLayout;

	//suppressed attributes
	editorTemplate -suppress "activeLevel";	
	editorTemplate -suppress "distance";	
	editorTemplate -suppress "cameraMatrix";
	editorTemplate -suppress "output";

	// include/call base class/node attributes
	AEtransformNoScroll $nodeName;

editorTemplate -addExtraControls;
editorTemplate -endScrollLayout;

}
