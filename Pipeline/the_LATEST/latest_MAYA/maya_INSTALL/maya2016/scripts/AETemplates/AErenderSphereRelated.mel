// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

// FILE: AErenderSphereRelated.mel
// INPUT: string (node name)
// RETURN:	string[] (list of related nodes, with the node whose
//			tab you want to be opened duplicated at the
//			end of the array)
//

global proc string[] AErenderSphereRelated (string $node)
{
	string $retval[];
	string $shadingNode;

    // Make sure that the shape is first in the list

    $retval[0] = $node;

    // Get the default tabs for this node

    string $relNodes[] = `defaultNavigation -ren -d $node`;
    string $preferredNode = `defaultNavigation -dwn -d $node`;

    for ($relNode in $relNodes) {
        $retval[size($retval)] = $relNode;
    }

    // Get the connections to the nurbsSurface node

    string $plugs[] = `listConnections -s false -d true $node`;

    // Look for a connected shading engine - this is
    // the jumping off point to get to the rendering nodes
    // from a selected surface

    for( $plug in $plugs ) {
        if ( `nodeType $plug` == "shadingEngine" ) {

            // Get the shading engine that's connected to this
            // nurbsSurface node

            string $tmp[] = `listConnections ( $plug + ".volumeShader" )`;

            // If the connection is null, then there is no
            // shading group attached to this node - simply
            // return the node itself.

            if( $tmp[0] == "" ) {
                $shadingNode = $plug;
            } else {
                $shadingNode = $tmp[0];
            }

            $retval[size($retval)] = $shadingNode;
            break;
        }
    }
	if ( $preferredNode != "" ) {
        $retval[size($retval)] = $preferredNode;
    }
    if( size( $retval ) == 0 ) {
        $retval[0] = $node;
    }
	
	return $retval;
}

