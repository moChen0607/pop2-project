// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//	AEmaterialInfoTemplate 
//
//  Description Name;
//	Creates the attribute editor controls for the materialInfo  Node
//
//  Input Value:
//	nodeName 
//
//  Output Value:
//	None
// 

global proc AEgoToMIConnected ( string $connected )
{
	select $connected;
	editSelected;
}

global proc AEshowMIConnectionsReplace ( string $shadingGroup, 
					string $material,
					string $texture )
{

	string $conShadGrp[] = `listConnections $shadingGroup`;
		textField -e -tx $conShadGrp[0] shadingGroupConnected;
		if ($conShadGrp[0] == ""){
			symbolButton -e -en 0 goToConnectedShadingGroup;
		} else {
			symbolButton -e -c ("AEgoToMIConnected " + $conShadGrp[0] )
				goToConnectedShadingGroup;
		}
	
	string $conMat[] = `listConnections $material`;
		textField -e -tx $conMat[0] materialConnected;
		if ($conMat[0] == ""){
			symbolButton -e -en 0 goToConnectedMaterial;
		} else {
			symbolButton -e -c ("AEgoToMIConnected " + $conMat[0] )
				goToConnectedMaterial;
		}

	string $conTxt[] = `listConnections $texture`;
		textField -e -tx $conTxt[0] textureConnected;
		if ($conTxt[0] == ""){
			symbolButton -e -en 0 goToConnectedTexture;
		} else {
			symbolButton -e -c ("AEgoToMIConnected " + $conTxt[0] )
				goToConnectedTexture;
		}

}


global proc AEshowMIConnectionsNew ( string $shadingGroup, 
					string $material,
					string $texture )
{
	setUITemplate -pst attributeEditorTemplate;

	string $conShadGrp[] = `listConnections $shadingGroup`;
	rowLayout -nc 3;
		text -label (uiRes("m_AEmaterialInfoTemplate.kShadingGroup")) shadingGroupName;
		textField -ed 0 -tx $conShadGrp[0] shadingGroupConnected;
		if ($conShadGrp[0] == ""){
			symbolButton -i "inArrow.png" -en 0 
				goToConnectedShadingGroup;
		} else {
			symbolButton -i "inArrow.png" 
				-c ("AEgoToMIConnected " + $conShadGrp[0] )
				goToConnectedShadingGroup;
		}
		setParent ..;
	
	string $conMat[] = `listConnections $material`;
	rowLayout -nc 3;
		text -label (uiRes("m_AEmaterialInfoTemplate.kMaterial")) materialName;
		textField -ed 0 -tx $conMat[0] materialConnected;
		if ($conMat[0] == ""){
			symbolButton -i "inArrow.png" -en 0 
				goToConnectedMaterial;
		} else {
			symbolButton -i "inArrow.png" 
				-c ("AEgoToMIConnected " + $conMat[0] )
				goToConnectedMaterial;
		}
		setParent ..;

	string $conTxt[] = `listConnections $texture`;
	rowLayout -nc 3;
		text -label (uiRes("m_AEmaterialInfoTemplate.kTexture")) textureName;
		textField -ed 0 -tx $conTxt[0] textureConnected;
		if ($conTxt[0] == ""){
			symbolButton -i "inArrow.png" -en 0 
				goToConnectedTexture;
		} else {
			symbolButton -i "inArrow.png" 
				-c ("AEgoToMIConnected " + $conTxt[0] )
				goToConnectedTexture;
		}
		setParent ..;

	setUITemplate -ppt;
}


global proc AEmaterialInfoTemplate ( string $nodeName )
{
	AEswatchDisplay $nodeName;
	editorTemplate -beginScrollLayout;
		editorTemplate -callCustom "AEshowMIConnectionsNew" 
					"AEshowMIConnectionsReplace"
					"shadingGroup"
					"material"
					"texture";
        editorTemplate -addControl "texturePlug";
		editorTemplate -suppress "textureChannel";

		// include/call base class/node attributes
		AEdependNodeTemplate $nodeName;

	editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;
}
