// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

// FILE: AElatticeRelated.mel
// INPUT: string (node name)
// RETURN:	string[] (list of related nodes, with the node whose
//			tab you want to be opened duplicated at the
//			end of the array)
//

global proc string[] AElatticeRelated (string $node)
{
	string $preferredNode = "";
	string $retval[];

	int $ii, $jj;

	string $siblings[] = `listRelatives $node`;
	
	string $origNode = "";
	string $flexorNode = "";
	
	// get the siblings which will include a flexor shape if
	// it is a flexor and a non history lattice if it has history
	//
	
	int $len = size($siblings);
	for ($ii = 0; $ii < $len; $ii++) {

		string $currSib = $siblings[$ii];

		if ("flexorShape" == nodeType($currSib)) {
			$flexorNode = $currSib;
		}
		if ("lattice" == nodeType($currSib)) {
			string $hist[] = `listHistory $currSib`;
			if (size($hist) == 0) {
				$origNode = $currSib;
			}
		}
	}		

	if ($origNode != "") {
		$retval[size($retval)] = $origNode;
	}
	if ($flexorNode != "") {
		$retval[size($retval)] = $flexorNode;
	}
	
	// look for a connected ffd node
	//
	string $conns[2] = `listConnections -s false ($node+".latticeOutput")`;	
	$len = size($conns);
	for ($ii = 0; $ii < $len; $ii++) {
		if ("ffd" == nodeType($conns[$ii])
		||  "jointFfd" == nodeType($conns[$ii])) {
			$retval[size($retval)] = $conns[$ii];

			// see if there is a locator on the sculpt
			//
			$conns = `listHistory ($conns[$ii]+".baseLatticeMatrix")`;
			int $len = size($conns);
			for ($ii = 0; $ii < $len; $ii++) {
				if ("baseLattice" == nodeType($conns[$ii])) {
					string $parents[] = `listRelatives -p ($conns[$ii])`;
					if (size($parents)) {
						$retval[size($retval)] = $parents[0];
					}
					break;
				}
			}
			break;
		}
	}

	// we duplicate this node in the list so that it will be selected
	//
	if ($flexorNode != "") {
		$retval[size($retval)] = $flexorNode;
	}
	else if ($origNode != "") {
		$retval[size($retval)] = $origNode;
	}
	
	if (0 == size($retval)) {
		$retval[0] = $node;
	}

	return $retval;
}

