// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//	AEplace3dTextureTemplate
//
//  Description Name;
//	Creates the attribute editor controls for the place3dTexture Node
//
//  Input Value:
//	nodeName 
//
//  Output Value:
//	None
// 


global proc AEplace3dTextureTemplate ( string $nodeName )
{
	AEswatchDisplay $nodeName;
	editorTemplate -beginScrollLayout;

			// include/call base class/node attributes
			AEtransformMain $nodeName;
		editorTemplate -beginLayout (uiRes("m_AEplace3dTextureTemplate.kThreeDTexturePlacementAttr")) -collapse 0;
			editorTemplate -callCustom "PSmakePlacement" "PSreplacePlacement" "";
		
		editorTemplate -endLayout;
			AEtransformNoScroll $nodeName;

	editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;
}

global proc PSmakePlacement (string $pName)
{
    string $realName[];
    tokenize ($pName, ".", $realName);

	setUITemplate -pst attributeEditorTemplate;

    rowLayout -nc 2;
    text -label "";
    button -label (uiRes("m_AEplace3dTextureTemplate.kInteractivePlacement"))
           -c ("PSinvokePlacement "+ $realName[0]) placButton;
    setParent ..;

	rowLayout -nc 2;
	text -label "";
    button -label (uiRes("m_AEplace3dTextureTemplate.kFitToGroupBBox"))
           -c ("PSfitPlacementToGroup "+ $realName[0]) fitButton;
    setParent ..;

	setUITemplate -ppt;
}

global proc PSreplacePlacement (string $pName)
{
    string $realName[];
    tokenize ($pName, ".", $realName);
    button -e -c ("PSinvokePlacement "+ $realName[0]) placButton;
    button -e -c ("PSfitPlacementToGroup "+ $realName[0]) fitButton;
}

//
//  Procedure Name:
//	PSInvokePlacement
//
global proc PSinvokePlacement (string $pName)
{
	AEmakePlacementActive( $pName );
    setToolTo shadingProjectionContext;
}

//
//	Procedure Name:
//	PSfitPlacementToGroup
//
global proc PSfitPlacementToGroup (string $pName)
{
	string	$ctx = `currentCtx`;

	if( $ctx != "shadingProjectionContext" )
		PSinvokePlacement( $pName );
	else
		AEmakePlacementActive( $pName );

    projectionManip -fb;
}

//
//	Procedure Name:
//	 AEmakePlacementActive
//
global proc AEmakePlacementActive( string $pName )
{
	//	Select it in the scene graph.
	//
	select -r $pName;
}

