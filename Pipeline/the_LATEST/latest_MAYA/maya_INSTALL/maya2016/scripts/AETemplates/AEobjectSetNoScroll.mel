// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//	AEobjectSetNoScroll
//
//  Description Name;
//	Creates the attribute editor controls for the objectSet Node
//
//  Input Value:
//	nodeName 
//
//  Output Value:
//	None
// 

//
//  Procedure Name:
//	changeSetColor
//

global proc changeSetColor ( string $memberWireframeColor )
{
	int $setColorSliderValue = `colorIndexSliderGrp -q -v setIndexColorSlider`;
	int $setColorValue = $setColorSliderValue - 25;
	setAttr $memberWireframeColor $setColorValue;
}

global proc updateSetWireframeColor (string $memberWireframeColor)
{
	// check to set the correct initial settings
	int $setColorValue = `getAttr $memberWireframeColor`;
	int $setColorSliderValue = $setColorValue + 25;

	if ( $setColorSliderValue < 25 || $setColorSliderValue > 32 )
	{
		$setColorSliderValue = 25;
	}
	
	if ($setColorValue == -1)
	{
		colorIndexSliderGrp -e -en 0 setIndexColorSlider;
		checkBoxGrp -e -v1 off setColorCheckBox;
	} else {
		colorIndexSliderGrp -e -en 1
			-v $setColorSliderValue setIndexColorSlider;
		checkBoxGrp -e -v1 on setColorCheckBox;
	}

}

//
//  Procedure Name:
//	AEsetColorReplace
//
//

global proc AEsetColorReplace (string $memberWireframeColor)
{
	int $setColorValue = `getAttr $memberWireframeColor`;
	int $setColorSliderValue = $setColorValue + 25;

	if ( $setColorSliderValue < 25 || $setColorSliderValue > 32 )
	{
		$setColorSliderValue = 25;
	}
	
	checkBoxGrp -e -cc ("checkSetCheckBox " + $memberWireframeColor)
			 setColorCheckBox;
	colorIndexSliderGrp -e //-v $setColorSliderValue 
			-cc ("changeSetColor " + $memberWireframeColor )
			setIndexColorSlider;
	scriptJob -p setIndexColorSlider -rp 
		-attributeChange $memberWireframeColor 
		("updateSetWireframeColor "+$memberWireframeColor);
	updateSetWireframeColor $memberWireframeColor;
}

//
//  Procedure Name:
//	AEsetColorNew
//

global proc AEsetColorNew ( string $memberWireframeColor )
{
	setUITemplate -pst attributeEditorTemplate;
	checkBoxGrp -ncb 1 -l "" -label1 (uiRes("m_AEobjectSetNoScroll.kOverrideDefaultComponentColor")) 
		setColorCheckBox;
	colorIndexSliderGrp  -label (uiRes("m_AEobjectSetNoScroll.kComponentColor"))  
		-v 25
		-min 25		// 25 to 32 is the userDefinedColor
		-max 32		// index range
		setIndexColorSlider;

	setUITemplate -ppt;

	scriptJob -p setIndexColorSlider -rp 
		-attributeChange $memberWireframeColor 
		("updateSetWireframeColor "+$memberWireframeColor);
	 AEsetColorReplace  $memberWireframeColor;
}


global proc checkSetCheckBox (string $memberWireframeColor)
{
	int $setColor = `getAttr $memberWireframeColor`;

	if (`checkBoxGrp -q -v1 setColorCheckBox`)
	{
		if ($setColor == -1)
		{
			colorIndexSliderGrp -e -en 1 setIndexColorSlider;
			if (`colorIndexSliderGrp -q -v setIndexColorSlider` == -1)
			{
				setAttr $memberWireframeColor 0;
				updateSetWireframeColor $memberWireframeColor;
			} else {
				setAttr $memberWireframeColor 
					((`colorIndexSliderGrp -q -v setIndexColorSlider`) - 25);
				updateSetWireframeColor $memberWireframeColor;;
			}
		} else {
			colorIndexSliderGrp -e -en 1 setIndexColorSlider;
			setAttr $memberWireframeColor $setColor;
			updateSetWireframeColor $memberWireframeColor;
		}
	} else {
		colorIndexSliderGrp -e -en 0 setIndexColorSlider;
		setAttr $memberWireframeColor -1;
		updateSetWireframeColor $memberWireframeColor;
	}		
}

//
//  Procedure Name:
//	AEobjectSetTemplate
//

global proc AEobjectSetNoScroll ( string $nodeName )
{
	editorTemplate -beginLayout (uiRes("m_AEobjectSetNoScroll.kSetOptions")) ;
		editorTemplate -callCustom "AEsetColorNew" 
					"AEsetColorReplace"
					"memberWireframeColor";
	editorTemplate -endLayout;

	// include/call base class/node attributes
	AEentityTemplate $nodeName;

	// suppresses attributes
	editorTemplate -suppress "annotation";
	editorTemplate -suppress "partition";
	editorTemplate -suppress "isLayer";
	editorTemplate -suppress "verticesOnlySet";
	editorTemplate -suppress "edgesOnlySet";
	editorTemplate -suppress "facetsOnlySet";
	editorTemplate -suppress "editPointsOnlySet";
	editorTemplate -suppress "renderableOnlySet";
	editorTemplate -suppress "dagSetMembers";
	editorTemplate -suppress "dnSetMembers";
	editorTemplate -suppress "groupNodes";
	editorTemplate -suppress "usedBy";

	AEcontainerNodeSuppress $nodeName;
}
