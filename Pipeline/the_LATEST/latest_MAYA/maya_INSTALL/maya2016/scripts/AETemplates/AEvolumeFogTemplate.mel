// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date: 2000	
//
//  Procedure Name:
//	AEvolumeShaderTemplate
//
//  Description Name;
//	Creates the attribute editor controls for the volumeShader Node
//
//  Input Value:
//	nodeName 
//
//  Output Value:
//	None
// 

global proc AEvolumeFogDropoff( string $node )
{
	int $shape = `getAttr ($node+".dropoffShape")`;
	int $dropoffMethod = `getAttr ($node+".dropoffMethod")`;
	int $noShape = ($shape == 0);
	editorTemplate -dimControl $node "edgeDropoff" $noShape;
	editorTemplate -dimControl $node "axialDropoff" ($shape < 3);
	editorTemplate -dimControl $node "dropoffMethod" $noShape;
	editorTemplate -dimControl $node "dropoffSubtract" 
									($noShape || $dropoffMethod != 1);
}

global proc AEvolumeFogMatteOpacity( string $nodeName ) 
{
	string $nodeAttr = $nodeName + ".matteOpacityMode";
	int $value = `getAttr $nodeAttr`;
	editorTemplate -dimControl $nodeName "matteOpacity" ($value == 0);
}

global proc AEvolumeFogTemplate ( string $nodeName )
{
	AEswatchDisplay $nodeName;
	editorTemplate -beginScrollLayout;

		editorTemplate -beginLayout (uiRes("m_AEvolumeFogTemplate.kVolumeFogAttributes")) -collapse 0;
			editorTemplate -addControl "color";
			AEaddRampControl ($nodeName+".colorRamp");
			editorTemplate -addControl "transparency";
			editorTemplate -addControl "incandescence";
			editorTemplate -addControl "glowIntensity";
			editorTemplate -addControl "density";
			editorTemplate -addControl "densityMode";
			editorTemplate -addControl "illuminated";
			editorTemplate -addControl "lightScatter";
		editorTemplate -endLayout;
		editorTemplate -beginLayout (uiRes("m_AEvolumeFogTemplate.kDropoff")) -collapse 1;
			editorTemplate -addControl "dropoffShape" "AEvolumeFogDropoff";
			editorTemplate -addControl "edgeDropoff";
			editorTemplate -addControl "axialDropoff";
			editorTemplate -addControl "dropoffMethod" "AEvolumeFogDropoff";
			editorTemplate -addControl "dropoffSubtract";
		editorTemplate -endLayout;
		editorTemplate -beginLayout (uiRes("m_AEvolumeFogTemplate.kMatteOpacity")) -collapse 1;
			editorTemplate -addControl "matteOpacityMode" "AEvolumeFogMatteOpacity";
			editorTemplate -addControl "matteOpacity";
		editorTemplate -endLayout;

		editorTemplate -suppress "matrixWorldToEye"; 
	
		// include/call base class/node attributes
		AEdependNodeTemplate $nodeName;

	editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;
}
