// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:	June 2, 1997
//
//  Procedure Name:
//	AEcameraViewTemplate
//
//  Description Name;
//	Creates the attribute editor controls for the cameraView Node
//
//  Input Value:
//	nodeName 
//
//  Output Value:
//	None
// 

global proc cameraViewCheckOrthographic ( string $nodeName ) 
{
	string $nodeAttr = $nodeName + ".orthographic";
	int $value = `getAttr $nodeAttr`;
	
	if ( $value == 1 ) {
		editorTemplate -dimControl $nodeName "orthographicWidth" false;
	} else {
		editorTemplate -dimControl $nodeName "orthographicWidth" true;
	}
}

global proc checkViewType( string $nodeName )
{
    string $nodeAttr= $nodeName + ".viewType";
    int $value = `getAttr $nodeAttr`;

    if ( $value == 0 ) {        // normal 3D view
        editorTemplate -dimControl $nodeName "eye" false;
        editorTemplate -dimControl $nodeName "centerOfInterest" false;
        editorTemplate -dimControl $nodeName "up" false;
        editorTemplate -dimControl $nodeName "tumblePivot" false;
        editorTemplate -dimControl $nodeName "usePivotAsLocalSpace" false;
        editorTemplate -dimControl $nodeName "horizontalAperture" false;
        editorTemplate -dimControl $nodeName "verticalAperture" false;
        editorTemplate -dimControl $nodeName "focalLength" false;
        editorTemplate -dimControl $nodeName "orthographic" false;

        cameraViewCheckOrthographic( $nodeName );

        editorTemplate -dimControl $nodeName "panZoomEnabled" true;
        editorTemplate -dimControl $nodeName "renderPanZoom" true;
        editorTemplate -dimControl $nodeName "horizontalPan" true;
        editorTemplate -dimControl $nodeName "verticalPan" true;
        editorTemplate -dimControl $nodeName "zoom" true;
    } else if ( $value == 1 ){      // 2D pan/zoom view
        editorTemplate -dimControl $nodeName "eye" true;
        editorTemplate -dimControl $nodeName "centerOfInterest" true;
        editorTemplate -dimControl $nodeName "up" true;
        editorTemplate -dimControl $nodeName "tumblePivot" true;
        editorTemplate -dimControl $nodeName "usePivotAsLocalSpace" true;
        editorTemplate -dimControl $nodeName "horizontalAperture" true;
        editorTemplate -dimControl $nodeName "verticalAperture" true;
        editorTemplate -dimControl $nodeName "focalLength" true;
        editorTemplate -dimControl $nodeName "orthographic" true;
        editorTemplate -dimControl $nodeName "orthographicWidth" true;
        editorTemplate -dimControl $nodeName "panZoomEnabled" false;

        cameraViewCheckPanZoom( $nodeName );
    }
}

global proc cameraViewCheckPanZoom ( string $nodeName )
{
    string $nodeAttr= $nodeName + ".panZoomEnabled";
    int $panZoomEnabled = `getAttr $nodeAttr`;
    if ($panZoomEnabled == 0) {
        editorTemplate -dimControl $nodeName "renderPanZoom" true;
        editorTemplate -dimControl $nodeName "horizontalPan" true;
        editorTemplate -dimControl $nodeName "verticalPan" true;
        editorTemplate -dimControl $nodeName "zoom" true;
    } else {
        editorTemplate -dimControl $nodeName "renderPanZoom" false;
        editorTemplate -dimControl $nodeName "horizontalPan" false;
        editorTemplate -dimControl $nodeName "verticalPan" false;
        editorTemplate -dimControl $nodeName "zoom" false;
    }
}

global proc AEcameraViewTemplate ( string $nodeName )
{
	AEswatchDisplay $nodeName;
	editorTemplate -beginScrollLayout;
	
		editorTemplate -addControl "description";
        editorTemplate -addControl "viewType" "checkViewType";
		editorTemplate -addControl "eye";
		editorTemplate -addControl "centerOfInterest";
		editorTemplate -addControl "up";
		editorTemplate -addControl "tumblePivot";
		editorTemplate -addControl "usePivotAsLocalSpace";
		editorTemplate -addControl "horizontalAperture";
		editorTemplate -addControl "verticalAperture";
		editorTemplate -addControl "focalLength";
		editorTemplate -addControl "orthographic" "cameraViewCheckOrthographic";
		editorTemplate -addControl "orthographicWidth";

        editorTemplate -addSeparator;

        editorTemplate -addControl "panZoomEnabled" "cameraViewCheckPanZoom";
        editorTemplate -addControl "renderPanZoom";
        editorTemplate -addControl "horizontalPan";
        editorTemplate -addControl "verticalPan";
        editorTemplate -addControl "zoom";


		// suppressed attributes
		editorTemplate -suppress "description";
	

		// include/call base class/node attributes
		AEdependNodeTemplate $nodeName;

	editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;
}
