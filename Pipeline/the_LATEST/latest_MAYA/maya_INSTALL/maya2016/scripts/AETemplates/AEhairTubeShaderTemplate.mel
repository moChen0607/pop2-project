// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//	AEhairTubeShaderTemplate
//
//  Description Name;
//	Creates the attribute editor controls for the hairTubeShader Node
//
//  Input Value:
//	nodeName 
//
//  Output Value:
//	None
// 


global proc AEhairTubeBumpNew (string $attrName)
{
	setUITemplate -pst attributeEditorTemplate;

	attrNavigationControlGrp 
		-label (uiRes("m_AEhairTubeShaderTemplate.kBumpMapping"))
		-at $attrName
		bumpControl;

	setUITemplate -ppt;
}


global proc AEhairTubeBumpReplace (string $attrName)
{
	attrNavigationControlGrp -edit
		-at $attrName
		bumpControl;
}



global proc AEhairTubeShaderTemplate ( string $nodeName )
{
	AEswatchDisplay $nodeName;
	editorTemplate -beginScrollLayout;

	editorTemplate -callCustom AEshaderTypeNew AEshaderTypeReplace "message";
	editorTemplate -addControl "tubeDirection";

	editorTemplate -beginLayout (uiRes("m_AEhairTubeShaderTemplate.kCommonMaterialAttributes")) -collapse 0;
		editorTemplate -addControl "color";
		AEaddRampControl ($nodeName+".colorScale");
		editorTemplate -addControl "transparency";
		editorTemplate -addControl "ambientColor";
		editorTemplate -addControl "incandescence";
		editorTemplate -callCustom "AEhairTubeBumpNew" "AEhairTubeBumpReplace"
			 		"normalCamera";
		editorTemplate -addControl "diffuse";
		editorTemplate -addControl "translucence";
		editorTemplate -addControl "translucenceDepth";
		editorTemplate -addControl "translucenceFocus";
	editorTemplate -endLayout;

	editorTemplate -beginLayout (uiRes("m_AEhairTubeShaderTemplate.kSpecularShading")) -collapse 0;
		editorTemplate -addControl "specularPower";
		editorTemplate -addControl "specularShift";
		editorTemplate -addControl "scatter";
		editorTemplate -addControl "scatterPower";

		// include/call base class/node attributes
		AEreflectCommonSpecularShading $nodeName;

	editorTemplate -endLayout;

	// include/call base class/node attributes
	AEreflectCommon $nodeName;

    editorTemplate -beginLayout (uiRes("m_AEhairTubeShaderTemplate.kHardwareTexturing")) -collapse true;
        AEhardwareTextureTemplate $nodeName
            ("color transparency ambientColor incandescence "+
             "normalCamera diffuse translucence");
    editorTemplate -endLayout;

	editorTemplate -suppress "tangentUCamera";
	editorTemplate -suppress "tangentVCamera";

	editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;
}
