// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//==================================================================
// hardwareRenderingGlobals node template
//==================================================================

// We source the createMayaHardware2GolbalsTab file so we can re-use the code
// which builds the UI that controls hardware instancing in VP2.0.
source createMayaHardware2GlobalsTab.mel;

//	Description:
//	Customize the render override menu.
global proc activateRenderOverride()
{
    // Check existance
    if ( !`optionMenuGrp -q -exists renderOverrideMenu`)
    {
        return;
    }

    string $selectedOverride = `optionMenuGrp -q -value renderOverrideMenu`;
    if( $selectedOverride ==  (uiRes("m_AEhardwareRenderingGlobalsTemplate.kNoRenderOverride")) )
    {
        $selectedOverride = "";
    }
    ogsRender -e -activeRenderOverride $selectedOverride;
}

global proc AEUpdateBakedTexturesNew(string $messagePlug)
{
	rowLayout -nc 2;
		text -label "";
		button -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kUpdateBaked"))
			-annotation (uiRes("m_AEhardwareRenderingGlobalsTemplate.kUpdateBakedAnn"))
			UpdateBakedTexturesButtonAE;
	setParent ..;
	AEUpdateBakedTexturesReplace $messagePlug;
}

global proc AEUpdateBakedTexturesReplace(string $messagePlug)
{
	button -edit -command "ogs -rebakeTextures" UpdateBakedTexturesButtonAE;
}

global proc AERenderOverrideNew( string $messagePlug )
{
    setUITemplate -pushTemplate attributeEditorTemplate;

    optionMenuGrp  -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kRenderOverrideName")) renderOverrideMenu;
    // Build the menu
    // Make first menu item as "no render item"
    menuItem -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kNoRenderOverride"));

    // Create menu items with valuse queried from the ogsRender
    string $override;
    string $overrides[] = `ogsRender -q -availableRenderOverrides`;
    for( $override in $overrides )
    {
        menuItem -label $override;
    }

    AERenderOverrideReplace($messagePlug);
    setUITemplate -popTemplate;
}

global proc AERenderOverrideReplace( string $messagePlug )
{
    // Select the menu item with the active render override
    string $activeOverride = `ogsRender -q -activeRenderOverride`;
    if( $activeOverride != "" )
    {
        // If there is valid render override, select it
        optionMenuGrp -edit -value $activeOverride renderOverrideMenu;
    }
    else
    {
        // Select  "no render item"
        optionMenuGrp -edit -select 1 renderOverrideMenu;
    }

    // Register selection command
    optionMenuGrp -edit -changeCommand "activateRenderOverride" renderOverrideMenu;
}


// MSAA Handlers
global proc AEchangeMSAA()
{
	int $msaa = `optionMenuGrp -q -value VP20multisampleMenu`;
	setAttr hardwareRenderingGlobals.multiSampleCount $msaa;
}

global proc AEMSAAchanged()
{
	int $msaa = `getAttr hardwareRenderingGlobals.multiSampleCount`;
	optionMenuGrp -edit -value $msaa VP20multisampleMenu;
}

global proc AEupdateMSAA()
{
    // Check existence
    if (!`optionMenuGrp -q -exists VP20multisampleMenu`)
    {
        return;
    }

	// Enable
	int $msaaEnabled = `getAttr hardwareRenderingGlobals.multiSampleEnable`;
	optionMenuGrp -edit -enable $msaaEnabled VP20multisampleMenu;

	// Rebuild menu based on ogsRender command
	string $menuItems[] = `optionMenuGrp -q -ils VP20multisampleMenu`;
	for ($item in $menuItems)
	{
		deleteUI -menuItem $item;
	}
	int $maxMSAA = 1;
	string $multisampleType;
	string $multisampleTypes[] = `ogsRender -q -availableMultisampleType`;
	if (size($multisampleTypes) > 0)
	{
		string $oldParent = `setParent -m -q`;

		string $menuAbs = `optionMenuGrp -q -fpn VP20multisampleMenu`;
		string $optionMenu = $menuAbs + "|OptionMenu";
		setParent -m $optionMenu;

		for ($multisampleType in $multisampleTypes)
		{
			menuItem -collection "VP20multisampleMenu" -label $multisampleType;
			int $multisampleCount = int($multisampleType);
			if ($maxMSAA < $multisampleCount)
			{
				$maxMSAA = $multisampleCount;
			}
		}
		setParent -m $oldParent;

		// Change the active MSAA type if necessary
		int $msaa = `getAttr "hardwareRenderingGlobals.multiSampleCount"`;
		if ($msaa > $maxMSAA)
		{
			setAttr hardwareRenderingGlobals.multiSampleCount $maxMSAA;
		}

		// Set current selction
		AEMSAAchanged();
	}
}

global proc AEMultisampleTypeNew(string $attribute)
{
    setUITemplate -pushTemplate attributeEditorTemplate;
	string $oldParent = `setParent -query`;

	string $AEchangeMSAACmd = "setParent " + $oldParent + "; AEchangeMSAA";
	string $AEMSAAchangedCmd = "setParent " + $oldParent + "; AEMSAAchanged";
	string $AEupdateMSAACmd = "setParent " + $oldParent + "; AEupdateMSAA";

	optionMenuGrp  -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kMsaaSampleCount")) -changeCommand $AEchangeMSAACmd VP20multisampleMenu;
	scriptJob -rp -p VP20multisampleMenu -attributeChange hardwareRenderingGlobals.multiSampleCount $AEMSAAchangedCmd;
	scriptJob -p VP20multisampleMenu -attributeChange hardwareRenderingGlobals.floatingPointRTEnable $AEupdateMSAACmd;
	scriptJob -p VP20multisampleMenu -attributeChange hardwareRenderingGlobals.floatingPointRTFormat $AEupdateMSAACmd;

	AEMultisampleTypeReplace($attribute);

	setParent $oldParent;
    setUITemplate -popTemplate;
}

global proc AEMultisampleTypeReplace(string $attribute)
{
	AEupdateMSAA();
}


// FP Render Target Handlers
global proc AEchangeFloatingPointRenderTargetFormat()
{
    string $fp = `optionMenuGrp -q -value VP20floatingPointRenderTargetMenu`;
	int $enum = 1;
	if($fp == (uiRes("m_AEhardwareRenderingGlobalsTemplate.kRGBA32")) ) { $enum = 1; }
	else if($fp == (uiRes("m_AEhardwareRenderingGlobalsTemplate.kRGB32"))) { $enum = 2; }
	else if($fp == (uiRes("m_AEhardwareRenderingGlobalsTemplate.kRGBA16"))) { $enum = 3; }

	setAttr hardwareRenderingGlobals.floatingPointRTFormat $enum;
}

global proc AEfloatingPointRenderTargetFormatChanged()
{
	string $fmt = `getAttr -asString hardwareRenderingGlobals.floatingPointRTFormat`;
    optionMenuGrp -edit -value $fmt VP20floatingPointRenderTargetMenu;
}

global proc AEupdateFloatingPointRenderTarget()
{
    // Check existence
    if (!`optionMenuGrp -q -exists VP20floatingPointRenderTargetMenu`)
    {
        return;
    }

	// Enable
    int $fpEnabled = `getAttr hardwareRenderingGlobals.floatingPointRTEnable`;
	optionMenuGrp -edit -enable $fpEnabled VP20floatingPointRenderTargetMenu;

	// Rebuild menu based on ogsRender command
	string $menuItems[] = `optionMenuGrp -q -ils VP20floatingPointRenderTargetMenu`;
	for ($item in $menuItems)
	{
		deleteUI -menuItem $item;
	}
	string $fpFormat;
	string $fpFormats[] = `ogsRender -q -availableFloatingPointTargetFormat`;
	if (size($fpFormats) > 0)
	{
		string $oldParent = `setParent -m -q`;

		string $menuAbs = `optionMenuGrp -q -fpn VP20floatingPointRenderTargetMenu`;
		string $optionMenu = $menuAbs + "|OptionMenu";
		setParent -m $optionMenu;

		for ($fpFormat in $fpFormats)
		{
			menuItem -collection "VP20floatingPointRenderTargetMenu" -label $fpFormat;
		}

		setParent -m $oldParent;

		// Set current selection
		AEfloatingPointRenderTargetFormatChanged();
	}
}

global proc AEFloatingPointRenderTargetNew(string $attribute)
{
    setUITemplate -pushTemplate attributeEditorTemplate;
	string $oldParent = `setParent -query`;

	string $AEchangeFloatingPointRenderTargetFormatCmd = "setParent " + $oldParent + "; AEchangeFloatingPointRenderTargetFormat";
	string $AEfloatingPointRenderTargetFormatChangedCmd = "setParent " + $oldParent + "; AEfloatingPointRenderTargetFormatChanged";

	optionMenuGrp  -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kFloatingPointRTFormat")) -changeCommand $AEchangeFloatingPointRenderTargetFormatCmd VP20floatingPointRenderTargetMenu;
	scriptJob -rp -p VP20floatingPointRenderTargetMenu -attributeChange hardwareRenderingGlobals.floatingPointRTFormat $AEfloatingPointRenderTargetFormatChangedCmd;

	AEFloatingPointRenderTargetReplace($attribute);

	setParent $oldParent;
    setUITemplate -popTemplate;
}

global proc AEFloatingPointRenderTargetReplace(string $attribute)
{
	AEupdateFloatingPointRenderTarget();
}


//	Description:
//	Customize the objectTypeFilterValueArray & NameArray
global proc AEobjectTypeFilterNew(string $valueArrayName, string $nameArrayName)
{
	// declare global parameters
	global string $gEditorCheckBoxPaths[];

	frameLayout -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kObjTypeFilter")) -collapsable true -collapse true;
		columnLayout -adjustableColumn true;

		$gEditorCheckBoxPaths = createObjTypeFilterCheckBoxes($valueArrayName, $nameArrayName);

		setParent ..;
	setParent ..;
}

//	Description:
//	No use currently, leave empty.
global proc AEobjectTypeFilterReplace(string $valueArrayName, string $nameArrayName)
{
	// leave empty
}

//	Callback on change to use SSAO
global proc AEuseSSAO(string $nodeName)
{
	int $useSSAO = `getAttr ($nodeName + ".ssaoEnable")`;
	int $dimControls = !$useSSAO;
	editorTemplate -dimControl $nodeName "ssaoAmount" $dimControls;
	editorTemplate -dimControl $nodeName "ssaoRadius" $dimControls;
	//editorTemplate -dimControl $nodeName "ssaoFilter" $dimControls;
	editorTemplate -dimControl $nodeName "ssaoFilterRadius" $dimControls;
	editorTemplate -dimControl $nodeName "ssaoSamples" $dimControls;
}

//	Callback on change to use Hardware Fog
global proc AEuseHwFog(string $nodeName)
{
	int $hwFogFalloff = `getAttr ($nodeName + ".hwFogFalloff")`;
	if ($hwFogFalloff == 0)
	{
		editorTemplate -dimControl $nodeName "hwFogDensity" 1;
		editorTemplate -dimControl $nodeName "hwFogStart" 0;
		editorTemplate -dimControl $nodeName "hwFogEnd" 0;
		
	}
	else
	{
		editorTemplate -dimControl $nodeName "hwFogDensity" 0;
		editorTemplate -dimControl $nodeName "hwFogStart" 1;
		editorTemplate -dimControl $nodeName "hwFogEnd" 1;
	}			
}


global proc AEfogCustomColorNew(string $color)
{
	string $colorLabel = (uiRes("m_AEhardwareRenderingGlobalsTemplate.kHwFogColor"));
	attrColorSliderGrp -label $colorLabel -showButton 0 -attribute $color fogColorControl;
}

global proc AEfogCustomColorReplace(string $color)
{
	attrColorSliderGrp -edit -attribute $color fogColorControl;
}

//	Callback on change to use gamma correction
global proc AEuseGamma(string $nodeName)
{
	int $useGamma = `getAttr ($nodeName + ".gammaCorrectionEnable")`;
	int $dimControls = !$useGamma;
	editorTemplate -dimControl $nodeName "gammaValue" $dimControls;
}

//	Callback on change to use transparent quality slider
global proc AEuseTransparentQuality(string $nodeName)
{
	int $transpAlgo = `getAttr ($nodeName + ".transparencyAlgorithm")`;
	int $dimControls = ($transpAlgo < 3);
	editorTemplate -dimControl $nodeName "transparencyQuality" $dimControls;
}

global proc AEenableTextureMaxRes(string $nodeName)
{
	int $enableTMR = `getAttr ($nodeName + ".enableTextureMaxRes")`;
	int $disableTMRSlider = 1 - $enableTMR;
	editorTemplate -dimControl $nodeName "textureMaxResolution" $disableTMRSlider;
}

global proc AEUpdateMaxTextureResNew(string $attrName)
{
	rowLayout -nc 2;
		text -label "";
		button -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kApplyTextureLimits"))
			-annotation (uiRes("m_AEhardwareRenderingGlobalsTemplate.kApplyTextureLimitsAnn"))
			UpdateMaxTextureResButtonAE;
	setParent ..;
	source "generateUvTilePreview.mel";
	rowLayout -nc 2;
		text -label "";
		button -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kRebakeUvTilePreviews"))
			-annotation (uiRes("m_AEhardwareRenderingGlobalsTemplate.kRebakeUvTilePreviewsAnn"))
			-command "generateAllUvTilePreviews"
			UpdateUvTilePreviewsButtonAE;
	setParent ..;
	AEUpdateMaxTextureResReplace $attrName;
}

global proc AEUpdateMaxTextureResReplace(string $attrName)
{
	button -edit -command "AEReloadAllTextures" UpdateMaxTextureResButtonAE;
}

global proc AEReloadAllTextures()
{
	ogs -reloadTextures;
}


//	Callback on change to use MB
global proc AEuseMB(string $nodeName)
{
	int $useMB = `getAttr ($nodeName + ".motionBlurEnable")`;
	int $dimControls = !$useMB;

	//editorTemplate -dimControl $nodeName "motionBlurCurved" $dimControls;
	editorTemplate -dimControl $nodeName "motionBlurType" $dimControls;
	editorTemplate -dimControl $nodeName "motionBlurShutterOpenFraction" $dimControls;
	editorTemplate -dimControl $nodeName "motionBlurSampleCount" $dimControls;

	//editorTemplate -dimControl $nodeName "motionBlurFadeFilter" $dimControls;
	//editorTemplate -dimControl $nodeName "motionBlurFadeAmount" $dimControls;
	//editorTemplate -dimControl $nodeName "motionBlurFadeTint" $dimControls;
	//editorTemplate -dimControl $nodeName "motionBlurFadeTintA" $dimControls;
	//editorTemplate -dimControl $nodeName "motionBlurFadeEmphasis" $dimControls;

	//editorTemplate -dimControl $nodeName "motionBlurMultiframeEnable" $dimControls;
	//int $useMulti = `getAttr ($nodeName + ".motionBlurMultiframeEnable")`;
	//$dimControls = ($dimControls || !$useMulti);
	//editorTemplate -dimControl $nodeName "motionBlurMultiframeChartSize" $dimControls;
	//editorTemplate -dimControl $nodeName "motionBlurAtlasSize" $dimControls;
}
/*
//	Callback on change to use Bloom
global proc AEuseBloom(string $nodeName)
{
	int $useBloom = `getAttr ($nodeName + ".bloomEnable")`;
	int $dimControls = !$useBloom;
	editorTemplate -dimControl $nodeName "bloomThreshold" $dimControls;
	editorTemplate -dimControl $nodeName "bloomFilter" $dimControls;
	editorTemplate -dimControl $nodeName "bloomFilterRadius" $dimControls;
	editorTemplate -dimControl $nodeName "bloomFilterAux" $dimControls;
	editorTemplate -dimControl $nodeName "bloomAmount" $dimControls;
}

*/

global proc AEhwInstancingChangedCallback()
{
	// Note that there is a similar method in createMayaHardware2GlobalsTab.mel
	// which should stay in sync with this method
	int $value = `getAttr hardwareRenderingGlobals.hwInstancing`;
	checkBoxGrp -edit -value1 $value AEhwInstancingCheckBoxGrp;
}

global proc AEcreateHWInstancing()
{
	checkBoxGrp -label1 (uiRes("m_AEhardwareRenderingGlobalsTemplate.kHWInstancing")) AEhwInstancingCheckBoxGrp;
}

global proc AEreplaceHWInstancing()
{
	// nothing to do because there is only one global settings node
}

//	Description:
//	Creates the attribute editor controls for the hardwareRenderingGlobals node
global proc AEhardwareRenderingGlobalsTemplate(string $name)
{
    global string $gBatchRenderOverrideMenu;

	string $parent = `setParent -q`;

	// create object type filters
	createObjectTypeFilters(0);

	editorTemplate -beginScrollLayout;

		editorTemplate -beginNoOptimize;

			editorTemplate -beginLayout (uiRes("m_AEhardwareRenderingGlobalsTemplate.kPerfOptions")) -collapse false;
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kConsolidateWorld")) -addControl "consolidateWorld";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kVertexAnimCache")) -addControl "vertexAnimationCache";
				editorTemplate -callCustom AEcreateHWInstancing AEreplaceHWInstancing;
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kThreadDG")) -addControl "threadDGEvaluation";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kLightLimit")) -addControl "maxHardwareLights";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kTransAlgo")) -addControl "transparencyAlgorithm" "AEuseTransparentQuality";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kTransQual")) -addControl "transparencyQuality" ;
				editorTemplate -beginLayout (uiRes("m_AEhardwareRenderingGlobalsTemplate.kMaxTexResClamping")) -collapse false;
					editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kEnableTextureMaxRes")) -addControl "enableTextureMaxRes" "AEenableTextureMaxRes";
					editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kTextureMaxRes")) -addControl "textureMaxResolution";
					editorTemplate -callCustom AEUpdateMaxTextureResNew AEUpdateMaxTextureResReplace "applyTextureMaxRes";
				editorTemplate -endLayout;
				editorTemplate -beginLayout (uiRes("m_AEhardwareRenderingGlobalsTemplate.kBakeResParameters")) -collapse true;
					editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kColorTex")) -addControl "colorBakeResolution";
					editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kBumpTex")) -addControl "bumpBakeResolution";
					editorTemplate -callCustom AEUpdateBakedTexturesNew AEUpdateBakedTexturesReplace "message";
				editorTemplate -endLayout;
			editorTemplate -endLayout;
			editorTemplate -beginLayout (uiRes("m_AEhardwareRenderingGlobalsTemplate.kSsaoOptons")) -collapse true;
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kSsaoEnable")) -addControl "ssaoEnable" "AEuseSSAO";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kSsaoAmount")) -addControl "ssaoAmount";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kSsaoRadius")) -addControl "ssaoRadius";
				editorTemplate -suppress "ssaoFilter";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kSsaoFilterRadius")) -addControl "ssaoFilterRadius";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kSsaoSamples")) -addControl "ssaoSamples";
			editorTemplate -endLayout;
			
			// UnCollapse Hardware Fog Tab for "Shading->Hardware Fog Option Box".
			editorTemplate -beginLayout (uiRes("m_AEhardwareRenderingGlobalsTemplate.kHwFogOptons")) -collapse false;
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kHwFogFalloff")) -addControl "hwFogFalloff" "AEuseHwFog";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kHwFogDensity")) -addControl "hwFogDensity";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kHwFogStart")) -addControl "hwFogStart";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kHwFogEnd")) -addControl "hwFogEnd";
				editorTemplate -callCustom "AEfogCustomColorNew" "AEfogCustomColorReplace" "hwFogColor";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kHwFogAlpha")) -addControl "hwFogAlpha";
			editorTemplate -endLayout;

			editorTemplate -beginLayout (uiRes("m_AEhardwareRenderingGlobalsTemplate.kMbOptions")) -collapse true;
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kMbEnable")) -addControl "motionBlurEnable" "AEuseMB";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kMbType")) -addControl "motionBlurType";
				//editorTemplate -label _L10N(kMbCurved, "Curved Motion Blur") -addControl "motionBlurCurved";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kMbShutterFracton")) -addControl "motionBlurShutterOpenFraction";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kMbSamples")) -addControl "motionBlurSampleCount";
			editorTemplate -endLayout;
/*
				editorTemplate -beginLayout (uiRes("m_AEhardwareRenderingGlobalsTemplate.kMbFadeOptions")) -collapse false;
					//editorTemplate -label _L10N(kMbFadeFilter, "Filter") -addControl "motionBlurFadeFilter";
					editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kMbFadeAmount")) -addControl "motionBlurFadeAmount";
					editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kMbFadeTint")) -addControl "motionBlurFadeTint";
					//editorTemplate -label _L10N(kMbFadeTintA, "Tint Transparency") -addControl "motionBlurFadeTintA";
					editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kMbFadeEmp")) -addControl "motionBlurFadeEmphasis";
				editorTemplate -endLayout;
				editorTemplate -beginLayout (uiRes("m_AEhardwareRenderingGlobalsTemplate.kMbMultiOptions")) -collapse false;
					editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kMbMultiEnable")) -addControl "motionBlurMultiframeEnable" "AEuseMB";
					editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kMbMultiChart")) -addControl "motionBlurMultiframeChartSize";
					editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kMbMultiAtlas")) -addControl "motionBlurAtlasSize";
				editorTemplate -endLayout;
			editorTemplate -endLayout;
			editorTemplate -beginLayout (uiRes("m_AEhardwareRenderingGlobalsTemplate.kBloomOptons")) -collapse true;
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kBloomEnable")) -addControl "bloomEnable" "AEuseBloom";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kBloomThreshold")) -addControl "bloomThreshold";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kBloomFilter")) -addControl "bloomFilter";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kBloomFilterRadius")) -addControl "bloomFilterRadius";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kBloomFilterAux")) -addControl "bloomFilterAux";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kBloomAmount")) -addControl "bloomAmount";
			editorTemplate -endLayout;
*/
			editorTemplate -beginLayout (uiRes("m_AEhardwareRenderingGlobalsTemplate.kAAOptions")) -collapse true;
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kSmoothWireframe")) -addControl "lineAAEnable";
				string $AEMultisampleTypeReplaceCmd = "AEMultisampleTypeReplace";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kMsaaEnable")) -addControl "multiSampleEnable" $AEMultisampleTypeReplaceCmd;
				editorTemplate -callCustom AEMultisampleTypeNew AEMultisampleTypeReplace "multiSampleCount";
			editorTemplate -endLayout;

			editorTemplate -beginLayout (uiRes("m_AEhardwareRenderingGlobalsTemplate.kFloatingPointRTOptions")) -collapse true;
				string $AEFloatingPointRenderTargetReplaceCmd = "AEFloatingPointRenderTargetReplace";
				editorTemplate -label (uiRes("m_AEhardwareRenderingGlobalsTemplate.kFloatingPointRTEnabled")) -addControl "floatingPointRTEnable" $AEFloatingPointRenderTargetReplaceCmd;
				editorTemplate -callCustom AEFloatingPointRenderTargetNew AEFloatingPointRenderTargetReplace "floatingPointRTFormat";
			editorTemplate -endLayout;
		editorTemplate -endLayout;

		editorTemplate -endNoOptimize;

		// suppress batch attr parent
		editorTemplate -suppress "batchRenderControls";
		editorTemplate -suppress "multiSampleQuality";
		editorTemplate -suppress "compressSharedVertexData";
		
		//suppress render options attr
		editorTemplate -suppress "holdOutMode";
		editorTemplate -suppress "holdOutDetailMode";
		editorTemplate -suppress "xrayMode";
		editorTemplate -suppress "xrayJointDisplay";
		editorTemplate -suppress "lightingMode";
		editorTemplate -suppress "singleSidedLighting";
		editorTemplate -suppress "renderMode";
		editorTemplate -suppress "hwInstancing";
		
// TEMP, TO BE REMOVED WHEN ABOVE REENABLED
		editorTemplate -suppress "motionBlurCurved";
		editorTemplate -suppress "motionBlurFadeFilter";
		editorTemplate -suppress "motionBlurFadeAmount";
		editorTemplate -suppress "motionBlurFadeTint";
		editorTemplate -suppress "motionBlurFadeTintA";
		editorTemplate -suppress "motionBlurFadeEmphasis";
		editorTemplate -suppress "motionBlurMultiframeEnable";
		editorTemplate -suppress "motionBlurMultiframeChartSize";
		editorTemplate -suppress "motionBlurAtlasSize";
		editorTemplate -suppress "bloomEnable";
		editorTemplate -suppress "bloomThreshold";
		editorTemplate -suppress "bloomFilter";
		editorTemplate -suppress "bloomFilterRadius";
		editorTemplate -suppress "bloomFilterAux";
		editorTemplate -suppress "bloomAmount";
// END TEMP
        editorTemplate -suppress "gammaCorrectionEnable";
        editorTemplate -suppress "gammaValue";

	editorTemplate -addExtraControls;

	// include/call base class/node attributes
	AEabstractBaseCreateTemplate $name;

	editorTemplate -endScrollLayout;

	AEuseSSAO($name);
	AEuseHwFog($name);
	AEuseMB($name);
	AEuseTransparentQuality($name);
	AEenableTextureMaxRes($name);

	// At this point, the method hasn't finished executing, so technically the controls have yet to be created.
	// The -dimControl flag only works after a control has been created.  By using evalDeferred, the dimControl
	// will get called after the control has been created and dim out the control as desired.
	evalDeferred("updateHWInstancing(\"AEhwInstancingCheckBoxGrp\", \"AEhwInstancingChangedCallback\")");

/*
	AEuseBloom($name);
*/
	AEupdateMSAA();

	AEupdateFloatingPointRenderTarget();
}
