// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//	Procedure Name:
//	AErebuildCurveTemplate
//
//	Description Name;
//	Creates the attribute editor controls for the rebuildCurve node
//
//	Input Value:
//	nodeName
//
//	Output Value:
//	None
//

global proc AErebuildCurveTemplate( string $nodeName )
{
	string $inputCurve = (uiRes("m_AErebuildCurveTemplate.kInputCurve"));
	string $matchCurve = (uiRes("m_AErebuildCurveTemplate.kMatchCurve"));
	editorTemplate -beginScrollLayout;
	
	editorTemplate -beginLayout (uiRes("m_AErebuildCurveTemplate.kRebuildCurveHistory")) -collapse false;
		editorTemplate -callCustom ("AEinputNew \""+$inputCurve+"\"")
					("AEinputReplace \""+$inputCurve+"\"")
					"inputCurve";
		editorTemplate -callCustom ("AEinputNew \""+$matchCurve+"\"")
					("AEinputReplace \""+$matchCurve+"\"")
					"matchCurve";
		editorTemplate -addControl "rebuildType" "rebuildCurveTypeControls";
		editorTemplate -addControl "spans";
		editorTemplate -addControl "degree";
		editorTemplate -addControl "tolerance";
		editorTemplate -addControl "endKnots";
		editorTemplate -addControl "keepRange";
		editorTemplate -beginNoOptimize;
		editorTemplate -addControl "keepControlPoints" "rebuildCurveKeepCVControls";
		editorTemplate -addControl "keepEndPoints";
		editorTemplate -addControl "keepTangents";
		editorTemplate -endNoOptimize;
	editorTemplate -endLayout;

	// include/call base class/node attributes
	// AEabstractBaseCreateTemplate $nodeName;
    editorTemplate -beginLayout (uiRes("m_AErebuildCurveTemplate.kNodeBehavior"));
        editorTemplate -addControl "caching";
        editorTemplate -addControl "frozen";
        editorTemplate -addControl "nodeState";
		editorTemplate -addControl "fitRebuild";
    editorTemplate -endLayout;


	editorTemplate -addExtraControls;

	editorTemplate -endScrollLayout;
}

global proc rebuildCurveTypeControls( string $nodeName )
{
	string	$rebuildTypeAttrName = $nodeName + ".rebuildType";
	int	$rebuildTypeValue = `getAttr $rebuildTypeAttrName`;

	if ( $rebuildTypeValue == 0 )
	{
		// uniform type
		editorTemplate -dimControl $nodeName "degree" false;
		editorTemplate -dimControl $nodeName "tolerance" true;
		editorTemplate -dimControl $nodeName "endKnots" false;
		editorTemplate -dimControl $nodeName "keepControlPoints" false;
		editorTemplate -dimControl $nodeName "keepEndPoints" false;
		editorTemplate -dimControl $nodeName "keepTangents" false;

		rebuildCurveKeepCVControls( $nodeName );
	}
	else if ( $rebuildTypeValue == 1 )
	{
		// reduce spans type
		editorTemplate -dimControl $nodeName "spans" true;
		editorTemplate -dimControl $nodeName "degree" true;
		editorTemplate -dimControl $nodeName "tolerance" false;
		editorTemplate -dimControl $nodeName "endKnots" false;
		editorTemplate -dimControl $nodeName "keepControlPoints" true;
		editorTemplate -dimControl $nodeName "keepEndPoints" true;
		editorTemplate -dimControl $nodeName "keepTangents" true;
	}
	else if ( $rebuildTypeValue == 2 )
	{
		// match knots type
		editorTemplate -dimControl $nodeName "spans" true;
		editorTemplate -dimControl $nodeName "degree" true;
		editorTemplate -dimControl $nodeName "tolerance" true;
		editorTemplate -dimControl $nodeName "endKnots" false;
		editorTemplate -dimControl $nodeName "keepControlPoints" false;
		editorTemplate -dimControl $nodeName "keepEndPoints" false;
		editorTemplate -dimControl $nodeName "keepTangents" false;
	}
	else if ( $rebuildTypeValue == 3 )
	{
		// no multiple knots type
		editorTemplate -dimControl $nodeName "spans" true;
		editorTemplate -dimControl $nodeName "degree" true;
		editorTemplate -dimControl $nodeName "tolerance" true;
		editorTemplate -dimControl $nodeName "endKnots" false;
		editorTemplate -dimControl $nodeName "keepControlPoints" true;
		editorTemplate -dimControl $nodeName "keepEndPoints" true;
		editorTemplate -dimControl $nodeName "keepTangents" true;
	}
	else if ( $rebuildTypeValue == 4 )
	{
		// curvature type
		editorTemplate -dimControl $nodeName "spans" true;
		editorTemplate -dimControl $nodeName "degree" true;
		editorTemplate -dimControl $nodeName "tolerance" false;
		editorTemplate -dimControl $nodeName "endKnots" false;
		editorTemplate -dimControl $nodeName "keepControlPoints" true;
		editorTemplate -dimControl $nodeName "keepEndPoints" true;
		editorTemplate -dimControl $nodeName "keepTangents" true;
	}
	else if ( $rebuildTypeValue == 5 )
	{
		// curvature type
		editorTemplate -dimControl $nodeName "spans" true;
		editorTemplate -dimControl $nodeName "degree" true;
		editorTemplate -dimControl $nodeName "tolerance" true;
		editorTemplate -dimControl $nodeName "endKnots" false;
		editorTemplate -dimControl $nodeName "keepControlPoints" true;
		editorTemplate -dimControl $nodeName "keepEndPoints" true;
		editorTemplate -dimControl $nodeName "keepTangents" true;
	}
}

global proc rebuildCurveKeepCVControls( string $nodeName )
{
	string	$rebuildTypeAttrName = $nodeName + ".rebuildType";
	int	$rebuildTypeValue = `getAttr $rebuildTypeAttrName`;
	string	$keepCVAttrName = $nodeName + ".keepControlPoints";
	int	$keepCVValue = `getAttr $keepCVAttrName`;

	// only need to do this for uniform type
	if ( $rebuildTypeValue == 0 )
	{
		if ( $keepCVValue == 0 )
		{
			editorTemplate -dimControl $nodeName "spans" false;
		}
		else
		{
			editorTemplate -dimControl $nodeName "spans" true;
		}
	}
}
