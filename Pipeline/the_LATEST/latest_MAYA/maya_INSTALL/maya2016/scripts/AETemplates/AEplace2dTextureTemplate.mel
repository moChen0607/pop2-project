// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//	AEplace2dTextureTemplate
//
//  Description Name;
//	Creates the attribute editor controls for the place2dTexture Node
//
//  Input Value:
//	nodeName 
//
//  Output Value:
//	None
// 


global proc AEplace2dTextureTemplate ( string $nodeName )
{
	AEswatchDisplay $nodeName;
	editorTemplate -beginScrollLayout;

        editorTemplate -beginLayout (uiRes("m_AEplace2dTextureTemplate.kTwoDTexturePlacementAttr")) -collapse 0;
			editorTemplate -callCustom
                "AEnewPlace2dTxContext" "AEreplacePlace2dTxContext" "";
			editorTemplate -addControl "coverage";
			editorTemplate -addControl "translateFrame";
			editorTemplate -addControl "rotateFrame";
			editorTemplate -addControl "mirrorU";
			editorTemplate -addControl "mirrorV";
			editorTemplate -addControl "wrapU";
			editorTemplate -addControl "wrapV";
			editorTemplate -addControl "stagger";
			editorTemplate -addControl "repeatUV";
			editorTemplate -addControl "offset";
			editorTemplate -addControl "rotateUV";
			editorTemplate -addControl "noiseUV";
			editorTemplate -addControl "fast";

		editorTemplate -endLayout;
			// include/call base class/node attributes
			AEdependNodeTemplate $nodeName;

	editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;
}


global proc AEnewPlace2dTxContext(string $attrNodeName)
{
	setUITemplate -pst attributeEditorTemplate;
    rowLayout -nc 2;
        text -label "";
        button -label (uiRes("m_AEplace2dTextureTemplate.kInteractivePlacement")) contextButton;
    setParent ..;
	setUITemplate -ppt;

    AEreplacePlace2dTxContext($attrNodeName);
}

global proc AEreplacePlace2dTxContext(string $attrNodeName)
{
    string $nodeName[];
    tokenize($attrNodeName, ".", $nodeName);

    button -e
        -c ("select -r "+$nodeName[0]+
            "; setToolTo defaultTexturePlacementContext;")
        contextButton;
}

global proc PPmirrorU(string $plug, string $attr, string $label)
{
	string $checkBox = `checkBoxGrp -numberOfCheckBoxes 2 -labelArray2 $attr "" mirrorCheckBoxGrp`;
	connectControl -index 2 $checkBox $plug;
}

global proc PPmirrorV(string $plug, string $attr, string $label)
{
	checkBoxGrp -e -label2 $attr mirrorCheckBoxGrp;
	connectControl -index 3 mirrorCheckBoxGrp $plug;
}

global proc PPwrapU(string $plug, string $attr, string $label)
{
	string $checkBox = `checkBoxGrp -numberOfCheckBoxes 2 -labelArray2 $attr "" wrapCheckBoxGrp`;
	connectControl -index 2 $checkBox $plug;
}

global proc PPwrapV(string $plug, string $attr, string $label)
{
	checkBoxGrp -e -label2 $attr wrapCheckBoxGrp;
	connectControl -index 3 wrapCheckBoxGrp $plug;
}

global proc PPstagger(string $plug, string $attr, string $label)
{
	string $checkBox = `checkBoxGrp -numberOfCheckBoxes 1 -label1 $attr staggerCheckBoxGrp`;
	connectControl -index 2 $checkBox $plug;
}
