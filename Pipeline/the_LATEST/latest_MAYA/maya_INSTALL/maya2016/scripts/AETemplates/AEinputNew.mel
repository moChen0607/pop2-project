// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:	June 11, 1997
//
//  Procedure Name:
//	AEinputNew
//
//  Description Name;
//	Creates a custom attribute editor control for a typed attribute type
//	In most of the cases it will be an input curve/surface/geometry
//	This procedure only allows single attributes.
//
//  Input Value:
//	attribute UI name 
//	nodeName.attributeName
//
//  Output Value:
//	None
// 


global proc AEinputReplace ( string $attributeUIName, string $input )
{
	string $connections[] = `listConnections -p true $input`;
	string $conInput[];
	tokenize($connections[0], ".", $conInput);

	text -e -l $attributeUIName inputName;
	textField -e  -tx $conInput[0] 
		//-cc ("setAttr -type \"string\" " + $input + " #1")
		inputConnected;
	if ($conInput[0] == ""){
		symbolButton -e -en 0 goToConnectedInput;
	} else {
		symbolButton -e -en 1 
			-c ("showEditor " + $conInput[0] )
			goToConnectedInput;
		menuItem -e
			-l $connections[0]
			-c ("showEditor "+$conInput[0])
			goToConnectedMenuItem;
	}

}


global proc AEinputNew ( string $attributeUIName, string $input )
{
	setUITemplate -pst attributeEditorTemplate;

	string $connections[] = `listConnections -p true $input`;
	string $conInput[];
	tokenize($connections[0], ".", $conInput);

	rowLayout -nc 3;// -cat 3 both 0 -cal 3 center;
		text -l $attributeUIName inputName;
		textField  -ed 0
			-tx $conInput[0] 
			//-cc ("setAttr -type \"string\" " + $input + " #1")
			inputConnected;
		if ($conInput[0] == ""){
			symbolButton -i "inArrow.png" -en 0 
				goToConnectedInput;
		} else {
			symbolButton -i "inArrow.png" 
				-c ("showEditor " + $conInput[0] )
				goToConnectedInput;
			popupMenu -b 3 goToConnectedMenu;
				menuItem
					-l $connections[0]
					-c ("showEditor "+$conInput[0])
					goToConnectedMenuItem;
			setParent -m ..;
		}
		setParent ..;

	setUITemplate -ppt;
}

