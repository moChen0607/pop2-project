// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:      Nov 19, 1998
//
//  Procedure Name:
//      AEwrapTemplate
//
//  Description:
//      Creates  attribute editor controls the wrap node
//
//  Input Value:
//      nodeName
//
//  Output Value:
//      None
//
global
proc checkObeyExclusiveBind(string $nodeName)
{
	int $value = `getAttr ($nodeName + ".exclusiveBind")`;

	if ($value) {
		editorTemplate -dimControl $nodeName "weightThreshold" 1;
		editorTemplate -dimControl $nodeName "autoWeightThreshold" 1;
	} else {
		editorTemplate -dimControl $nodeName "weightThreshold" 0;
		editorTemplate -dimControl $nodeName "autoWeightThreshold" 0;
	}
}

global
proc checkObeyAutoWeightThreshold(string $nodeName)
{
	int $value = `getAttr ($nodeName + ".autoWeightThreshold")`;

	if ($value) {
		editorTemplate -dimControl $nodeName "weightThreshold" 1;
		editorTemplate -dimControl $nodeName "maxDistance" 1;
	} else {
		editorTemplate -dimControl $nodeName "weightThreshold" 0;
		editorTemplate -dimControl $nodeName "maxDistance" 0;
	}
}

global
proc checkAutoWeightThresholdValue(string $nodeName)
{
	int $value = `getAttr ($nodeName + ".autoWeightThreshold")`;


	if ($value) {
		editorTemplate -dimControl $nodeName "autoWeightThresholdValue" 0;
		editorTemplate -dimControl $nodeName "weightThreshold" 1;
		editorTemplate -dimControl $nodeName "maxDistance" 1;
	} else {
		editorTemplate -dimControl $nodeName "autoWeightThresholdValue" 1;
		editorTemplate -dimControl $nodeName "weightThreshold" 0;
		editorTemplate -dimControl $nodeName "maxDistance" 0;
	}
}

global proc AEwrapTemplate ( string $nodeName )
{
        editorTemplate -beginScrollLayout;
		    editorTemplate -beginLayout (uiRes("m_AEwrapTemplate.kWrapAttributes"))  -collapse false;
				editorTemplate -beginNoOptimize;
				editorTemplate -addControl "falloffMode";
				editorTemplate -addControl "exclusiveBind" "checkObeyExclusiveBind";
				editorTemplate -addControl "autoWeightThreshold" "checkAutoWeightThresholdValue";
				editorTemplate -addControl "autoWeightThresholdValue" "checkAutoWeightThresholdValue";
				editorTemplate -endNoOptimize;				

				editorTemplate -addSeparator;

				editorTemplate -addControl "weightThreshold";
				editorTemplate -addControl "maxDistance";

				editorTemplate -suppress "geomMatrix";
				editorTemplate -suppress "driverPoints";
				editorTemplate -suppress "basePoints";
				editorTemplate -suppress "dropoff";
				editorTemplate -suppress "smoothness";
				editorTemplate -suppress "inflType";
				editorTemplate -suppress "nurbsSamples";
				editorTemplate -suppress "weightThreshold";
				editorTemplate -suppress "wtDrty";
				editorTemplate -suppress "baseDrt";
			editorTemplate -endLayout;

		AEweightGeometryFilterTemplate $nodeName;

        editorTemplate -addExtraControls;
        editorTemplate -endScrollLayout;
}
