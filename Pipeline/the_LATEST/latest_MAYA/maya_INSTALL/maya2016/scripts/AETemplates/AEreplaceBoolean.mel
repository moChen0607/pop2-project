// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Creation Date:  28 June 1996
//
//  Description:
//      This is part of a set of methods for changing
//		a property sheet to point to a new node.
//		(A way of efficiently re-using existing controls)
//		This method re-connects a boolean control.
//
//  Input Arguments:
//      The name of the existing control
//		The name of the new plug
//		The index in the control associated with the plug
//		
//  Return Value:
//      None
//

global proc AEreplaceBoolean ( string $controlName, string $plugName, string $changedCommand, int $index )
{
	setParent $controlName;

	string $buffer[];
	tokenize($plugName,".",$buffer);

	// -queryLabel can fail for non-unique node names
	//
	string $label = "";
	catch( $label = `editorTemplate -queryLabel $buffer[0] $buffer[size($buffer) - 1]` );
	if( size( $label ) && `checkBoxGrp -exists valueFld` ) {
		eval( "checkBoxGrp -e -label" + $index + " \"" + $label + "\" valueFld" );
	}

	// The indices of the control which are connected to plugs start at
	// 2 for this type of control.
	//
	int $adjustedIndex = $index + 1;
	connectControl -in $adjustedIndex "valueFld" $plugName;
	
	// get the list of sub-components of the checkBoxGrp,
	// so that we can replace the scriptJob attached to
	// the appropriate one.
	//
	string $subC[] = `layout -q -ca valueFld`;

	if ($changedCommand != "") {
		// create a new scriptJob for this attribute
		string $cmd = $changedCommand + " \"" + $buffer[0] + "\"";
		scriptJob -p $subC[$index-1] -rp -ac $plugName $cmd;
	}
}


