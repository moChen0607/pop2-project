// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//	AEspringTemplate
//
//  Description Name;
//	Creates the attribute editor controls for spring Node
//
//  Input Value:
//	nodeName 
//
//  Output Value:
//	None
// 

global proc AEperSpringNew ( string $nodeAttr)
{ 	
	setUITemplate -pst attributeEditorTemplate;

    rowLayout -nc 1;
        button -label (uiRes("m_AEspringTemplate.kComponentEditor"))  dynSpringCompEd;
    setParent ..;

	setUITemplate -ppt;

	AEperSpringReplace($nodeAttr);
}

global proc AEperSpringReplace ( string $nodeAttr )
{ 	
	// $nodeAttr = nodeName.attrName.
	//
	string $names[];
	tokenize($nodeAttr, ".", $names);

    // Set the per spring  button callbacks.
    //
    button -e 
		-c "componentEditorWindow"
		dynSpringCompEd;
}

//
//  Procedure Name:
//	AEspringTemplate
//

global proc AEspringTemplate ( string $nodeName )
{
	editorTemplate -beginScrollLayout;
		editorTemplate -beginLayout (uiRes("m_AEspringTemplate.kAttributes"))  -collapse 0;
			editorTemplate -beginNoOptimize;
			editorTemplate -label (uiRes("m_AEspringTemplate.kStiffness"))  -addControl "useStiffnessPS";
			editorTemplate -label (uiRes("m_AEspringTemplate.kDamping"))  -addControl "useDampingPS";
			editorTemplate -label (uiRes("m_AEspringTemplate.kRestLength"))  -addControl "useRestLengthPS";
			editorTemplate -endNoOptimize;

			editorTemplate -addControl "stiffness";
			editorTemplate -addControl "damping";
			editorTemplate -addControl "restLength";
			editorTemplate -addControl "end1Weight";
			editorTemplate -addControl "end2Weight";
			editorTemplate -addControl "count";
			editorTemplate -addControl "manageParticleDeath";

			editorTemplate -suppress "objectPositions";
			editorTemplate -suppress "objectVelocities";
			editorTemplate -suppress "objectMass";
			editorTemplate -suppress "deltaTime";
		editorTemplate -endLayout;

	editorTemplate -beginLayout (uiRes("m_AEspringTemplate.kPPAttributes"))  -collapse false;
            editorTemplate -callCustom
                "AEperSpringNew" 
				"AEperSpringReplace"
                "stiffnessPS";

            editorTemplate -suppress "dampingPS";
            editorTemplate -suppress "restLengthPS";

	editorTemplate -endLayout;

		// include/call base class/node attributes
		//
		AEshapeTemplate $nodeName;

	editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;

}

