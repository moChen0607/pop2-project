// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//	Procedure Name:
//	    AEclipSchedulerTemplate
//
//	Description Name;
//	    Creates the attribute editor controls for the clipLibrary node
//
//	Input Value:
//	    nodeName
//
//	Output Value:
//	    None
//

global proc AEclipSchedulerNew (string $attr)
{
	string $buffer[];
	tokenize($attr,".",$buffer);
	string $nodeName = $buffer[0];

	string $retval = `columnLayout
		-adjustableColumn true
		TanimCurveLyt`;

		frameLayout
			-label (uiRes("m_AEclipSchedulerTemplate.kClips")) 
			-height 234
			-labelVisible true
			-borderVisible true
			-collapsable false
			-collapse false
			keyframeLyt;
		
		clipSchedulerOutliner clipOutliner;

		setParent ..;

	setParent ..;

	clipSchedulerOutliner -edit -clipScheduler $nodeName clipOutliner;
}


global proc AEclipSchedulerReplace (string $attr)
{
	string $buffer[];
	tokenize($attr,".",$buffer);
	string $nodeName = $buffer[0];

	clipSchedulerOutliner -edit -clipScheduler $nodeName clipOutliner;
}

global proc AEclipSchedulerTemplate( string $nodeName )
{
	// Put our attributes into a scrolled layout field

	editorTemplate -beginScrollLayout;
		editorTemplate -beginLayout (uiRes("m_AEclipSchedulerTemplate.kClipSchedulerAttributes"))  -collapse 0;
			editorTemplate -callCustom "AEclipSchedulerNew" 
				"AEclipSchedulerReplace"
				"enable";
		editorTemplate -endLayout;

	// include/call base class/node attributes
	AEdependNodeTemplate $nodeName;

    // Tell the attribute editor not to display the attributes
	// that are not appropriate for user-interaction
	//
	editorTemplate -suppress "blendList";
	editorTemplate -suppress "clipFunction";
	editorTemplate -suppress "preInfinity";
	editorTemplate -suppress "postInfinity";
	editorTemplate -suppress "clipBlendArray";
	editorTemplate -suppress "numTracks";
	editorTemplate -suppress "start";
	editorTemplate -suppress "scale";
	editorTemplate -suppress "preCycle";
	editorTemplate -suppress "postCycle";
	editorTemplate -suppress "weight";
	editorTemplate -suppress "weightStyle";	
	editorTemplate -suppress "absolute";
	editorTemplate -suppress "absoluteRotations";
	editorTemplate -suppress "sourceStart";
	editorTemplate -suppress "sourceEnd";
	editorTemplate -suppress "track";						

	editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;

}
