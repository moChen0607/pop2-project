// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
// Common attributes to TextureBakeSet and VertexBakeSet
//

global proc colorModeChanged (string $nodeName)
{
	string $nodeAttr = $nodeName + ".colorMode";
	int $value = `getAttr $nodeAttr`;
	if( $value == 3 )
	{
		editorTemplate -dimControl $nodeName "occlusionRays" false;
		editorTemplate -dimControl $nodeName "occlusionFalloff" false;
		editorTemplate -dimControl $nodeName "customShader" true;
	}
	else if( $value == 4 )
	{
		editorTemplate -dimControl $nodeName "occlusionRays" true;
		editorTemplate -dimControl $nodeName "occlusionFalloff" true;
		editorTemplate -dimControl $nodeName "customShader" false;
	}
	else
	{
		editorTemplate -dimControl $nodeName "occlusionRays" true;
		editorTemplate -dimControl $nodeName "occlusionFalloff" true;
		editorTemplate -dimControl $nodeName "customShader" true;
	}
}

global proc AEbakeSetCustomShaderNew(string $messagePlug)
{
	attrNavigationControlGrp
		-label (uiRes("m_AEbakeSetTemplate.kCustomShader"))
		BakeCustomShaderCtrl;

	AEbakeSetCustomShaderReplace($messagePlug);
}

global proc AEbakeSetCustomShaderReplace(string $messagePlug)
{
	attrNavigationControlGrp
		-edit -attribute  $messagePlug 
		BakeCustomShaderCtrl;

}

global proc AEbakeSetTemplate( string $nodeName )
{
	editorTemplate -addControl "colorMode"	"colorModeChanged";
	editorTemplate -addControl "occlusionRays";
	editorTemplate -addControl "occlusionFalloff";		
	editorTemplate -callCustom
			"AEbakeSetCustomShaderNew"
			"AEbakeSetCustomShaderReplace"
			"customShader";
	editorTemplate -addControl "normalDirection";
	editorTemplate -addControl "orthogonalReflection";
	editorTemplate -suppress "separation";
}
