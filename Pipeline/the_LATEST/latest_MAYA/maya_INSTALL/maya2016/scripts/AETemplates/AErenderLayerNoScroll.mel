// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//	AErenderLayerNoScroll
//
//  Description Name;
//	Creates the attribute editor controls for the renderLayer Node
//
//  Input Value:
//	nodeName 
//
//  Output Value:
//	None
// 

global string $AErenderLayerOverrideAttrs[] = {
	"castsShadows",
	"receiveShadows",
	"motionBlur",
	"primaryVisibility",
	"smoothShading",
	"visibleInRefractions",
	"visibleInReflections",
	"doubleSided",
	"opposite",
	"depthJitter",
	"ignoreSelfShadowing"
};

global string $AErenderLayerOverrideLabels[];


//
//  Global Procedure:
//      AErenderLayerPreset
//
//  Description:
//      Procedure to klobber the attrPreset menu with a customized menu
//      for applying built-in presets or managing user presets with the
//      "nodePreset" command.
//
//  Note:
//      See also AEshowPresetMenu() for how the menu is configured.
//
global proc AErenderLayerPreset(
    string $messagePlug )
{
    string $nodeName = plugNode($messagePlug);
    string $headerParent = `setParent AEnodeNameHeaderLayout`;
    string $presetMenu = $headerParent+"|AEpresetButton|menu";

    // Update the preset button to indicate whether a users preset have
    // been created or not. The width is specified so the control will
    // maintain its with as the label changes size.
    // 
    string $presets[] = `nodePreset -list $nodeName`;
	if( size($presets) > 0 ){
		button -e -label (uiRes("m_AErenderLayerNoScroll.kPresets")) -w 70 -h 20 AEpresetButton;
	} else {
		button -e -label (uiRes("m_AErenderLayerNoScroll.kPresets2")) -w 70 -h 20 AEpresetButton;
	}

    popupMenu -e
        -postMenuCommand
            ("commitAENotes($gAECurrentTab);"+
             "renderLayerPresetMenu \""+$presetMenu+"\" \""+$nodeName+"\"")
        $presetMenu;
}

//
//  Local Procedure:
//      hasIntOverride
//
//  Description:
//      Return true if the script has a named expression.
//
proc int hasIntOverride( string $overrideScript,
                         string $name )
{
    return match($name+"=[0-9]+", $overrideScript) != "";
}

//
//  Local Procedure:
//      intOverrideValue
//
//  Description:
//      Return the value assigned to the named expression. If the
//      expression does not yet exist, the default is returned.
//
proc int intOverrideValue( string $overrideScript,
                           string $name,
                           int $default )
{
    int $value = $default;
    string $override = match($name+"=[0-9]+", $overrideScript);
    if ($override != "") {
        $value = substitute($name+"=", $override, "");
    }
    return $value;
}

//
//  Local Procedure:
//      addIntToScript
//
//  Description:
//      Add the expression "name=value" to the specified script. The
//      expression will be replaced if one already exists.
//
proc string addIntToScript( string $overrideScript,
                            string $name,
                            int $value )
{
    // Does the override already exist ?
    if (!hasIntOverride($overrideScript, $name)) {
        // No, append a new override
        if ($overrideScript != "") {
            $overrideScript += " ";
        }
        $overrideScript += $name + "=" + $value;
    }
    else {
        // Yes, replace the existing value
        $overrideScript = substitute($name+"=[0-9]+", $overrideScript, $name+"="+$value);
    }

    return $overrideScript;
}

//
//  Local Procedure:
//      removeIntFromScript
//
//  Description:
//      Remove the named expression from the specified script. 
//
proc string removeIntFromScript( string $overrideScript,
                                 string $name )
{
    // Is this the first override ?
    if (match("^"+$name+"=[0-9]+", $overrideScript) != "") {
        // Yes, remove all trailing spaces too
        $overrideScript = substitute($name+"=[0-9]+[ ]*", $overrideScript, "");
    }
    else {
        // No, remove all leading spaces too
        $overrideScript = substitute("[ ]*"+$name+"=[0-9]+", $overrideScript, "");
    }

    return $overrideScript;
}

//
//  Global Procedure:
//      AErenderLayerOverrideChanged
//
//  Description:
//      The user has modified an override control in the AE, update the
//      layer's attributeOverrideScript to reflect the active overrides and
//      values.
//
global proc AErenderLayerOverrideChanged(
    string $control,
    string $attributeOverrideScriptPlug )
{
    string $script = `getAttr $attributeOverrideScriptPlug`;

	global string $AErenderLayerOverrideAttrs[];
    if (stringArrayContains($control, $AErenderLayerOverrideAttrs))
    {
        // Handle radio button groups No override / force off / force on.
        //
		int $value = `radioButtonGrp -query -select ("Radio"+$control)`;
		switch ($value) {
			case 1:							// No override
            $script = removeIntFromScript($script, $control);
			break;

			case 2:							// Force off
            $script = addIntToScript($script, $control, 0);
			break;

			case 3:							// Force on
            $script = addIntToScript($script, $control, 1);
			break;
		}
    }
    else if ($control == "geometryAntiAliasingOverride" ||
        $control == "geometryAntiAliasing")
    {
        // Handle check box and int slider. The check box toggles the
        // override, the slider holds the value.
        //
        int $isEnabled = `checkBoxGrp -q -value1 geometryAntiAliasingOverride`;
        if ($isEnabled) {
            intSliderGrp -e -enable true geometryAntiAliasing;
            int $value = `intSliderGrp -q -value geometryAntiAliasing`;
            $script = addIntToScript($script, "geometryAntialiasingOverride", 1);
            $script = addIntToScript($script, "antialiasingLevel", $value);
        }
        else {
            intSliderGrp -e -enable false geometryAntiAliasing;
            $script = removeIntFromScript($script, "geometryAntialiasingOverride");
            $script = removeIntFromScript($script, "antialiasingLevel");
        }
    }
    else if ($control == "shadingSamplesOverride" ||
        $control == "shadingSamples" ||
        $control == "maxShadingSamples")
    {
        // Handle check box and two int sliders. The check box toggles the
        // override, the sliders hold values.
        //
        int $isEnabled = `checkBoxGrp -q -value1 shadingSamplesOverride`;
        if ($isEnabled) {
            intSliderGrp -e -enable true shadingSamples;
            intSliderGrp -e -enable true maxShadingSamples;
            int $value1 = `intSliderGrp -q -value shadingSamples`;
            int $value2 = `intSliderGrp -q -value maxShadingSamples`;
            $script = addIntToScript($script, "shadingSamplesOverride", 1);
            $script = addIntToScript($script, "shadingSamples", $value1);
            $script = addIntToScript($script, "maxShadingSamples", $value2);
        }
        else {
            intSliderGrp -e -enable false shadingSamples;
            intSliderGrp -e -enable false maxShadingSamples;
            $script = removeIntFromScript($script, "shadingSamplesOverride");
            $script = removeIntFromScript($script, "shadingSamples");
            $script = removeIntFromScript($script, "maxShadingSamples");
        }
    }
    else if ($control == "visibilitySamplesOverride" ||
        $control == "maxVisibilitySamples")
    {
        // Handle check box and int slider. The check box toggles the
        // override, the slider holds the value.
        //
        int $isEnabled = `checkBoxGrp -q -value1 visibilitySamplesOverride`;
        if ($isEnabled) {
            intSliderGrp -e -enable true maxVisibilitySamples;
            int $value = `intSliderGrp -q -value maxVisibilitySamples`;
            $script = addIntToScript($script, "maxVisibilitySamplesOverride", 1);
            $script = addIntToScript($script, "maxVisibilitySamples", $value);
        }
        else {
            intSliderGrp -e -enable false maxVisibilitySamples;
            $script = removeIntFromScript($script, "maxVisibilitySamplesOverride");
            $script = removeIntFromScript($script, "maxVisibilitySamples");
        }
    }
    else if ($control == "volumeSamplesOverride" ||
        $control == "volumeSamples")
    {
        // Handle check box and int slider. The check box toggles the
        // override, the slider holds the value.
        //
        int $isEnabled = `checkBoxGrp -q -value1 volumeSamplesOverride`;
        if ($isEnabled) {
            intSliderGrp -e -enable true volumeSamples;
            int $value = `intSliderGrp -q -value volumeSamples`;
            $script = addIntToScript($script, "volumeSamplesOverride", 1);
            $script = addIntToScript($script, "volumeSamples", $value);
        }
        else {
            intSliderGrp -e -enable false volumeSamples;
            $script = removeIntFromScript($script, "volumeSamplesOverride");
            $script = removeIntFromScript($script, "volumeSamples");
        }
    }

    evalEcho (
        "setAttr "+
            $attributeOverrideScriptPlug+
            " -type \"string\" \""+
            $script+
            "\"");
}

//
//  Global Procedure:
//      AErenderLayerNewGroup
//
//  Description:
//      The user has clicked on the "Map" button for the shading group
//      override, create a new shading group and connect it to the
//      render layer node.
//
global proc AErenderLayerNewGroup(
    string $shadingGroupOverridePlug )
{
    createRenderNode -shadersSG
        ("connectAttr %nodeSG.message "+$shadingGroupOverridePlug) "";
}
    
//
//  Global Procedure:
//      AErenderLayerReplaceGroup
//
//  Description:
//      The user has typed the name of a shading group into the text field,
//      connect the specified shading group to the render layer node.
//
global proc AErenderLayerReplaceGroup(
    string $shadingGroupOverridePlug,
    string $dashSource,
    string $node )
{
    connectAttr -f ($node+".message") $shadingGroupOverridePlug;
}

//
//  Global Procedure:
//      AErenderLayerOverrideNew
//
//  Description:
//      Procedure to build the custom controls used to override
//      shading group assignment and render stats for all members
//      of the layer.
//
global proc AErenderLayerOverrideNew(
    string $shadingGroupOverridePlug,
    string $attributeOverrideScriptPlug )
{
    setUITemplate -pst attributeEditorTemplate;

    attrNavigationControlGrp
        -label (uiRes("m_AErenderLayerNoScroll.kShadingGroup")) 
        shadingGroupOverride;

    separator -style "none" -height 10;

	string $labels[];
	$labels[0] = (uiRes("m_AErenderLayerNoScroll.kCastShadows"));
	$labels[1] = (uiRes("m_AErenderLayerNoScroll.kReceiveShadows"));
	$labels[2] = (uiRes("m_AErenderLayerNoScroll.kMotionBlur"));
	$labels[3] = (uiRes("m_AErenderLayerNoScroll.kPrimVisibility"));
	$labels[4] = (uiRes("m_AErenderLayerNoScroll.kSmoothShading"));
	$labels[5] = (uiRes("m_AErenderLayerNoScroll.kVisInRefra"));
	$labels[6] = (uiRes("m_AErenderLayerNoScroll.kVisInRefl"));
	$labels[7] = (uiRes("m_AErenderLayerNoScroll.kDoubleSided"));
	$labels[8] = (uiRes("m_AErenderLayerNoScroll.kOpposite"));
	$labels[9] = (uiRes("m_AErenderLayerNoScroll.kDepthJitter"));
	$labels[10]= (uiRes("m_AErenderLayerNoScroll.kIgnSelfShadow"));
	global string $AErenderLayerOverrideAttrs[];
	
	rowColumnLayout -numberOfColumns 4
        -columnWidth 1 145
        -columnWidth 2 85
        -columnWidth 3 85
        -columnWidth 4 85;
	text -label "";
	text -label (uiRes("m_AErenderLayerNoScroll.kUseScene"));
	text -label (uiRes("m_AErenderLayerNoScroll.kForceOn"));
	text -label (uiRes("m_AErenderLayerNoScroll.kForceOff"));
	
	setParent ..;

	for ($i=0 ; $i<size($AErenderLayerOverrideAttrs) ; $i++) {
		radioButtonGrp -numberOfRadioButtons 3
			-label $labels[$i]
			-labelArray3 "" "" ""
			-columnWidth4 145 85 85 85
			("Radio"+$AErenderLayerOverrideAttrs[$i]);
	}

    separator -style "none" -height 10;

    checkBoxGrp
        -label1 (uiRes("m_AErenderLayerNoScroll.kOverrideGeometryAntialiasing")) 
        geometryAntiAliasingOverride;
    intSliderGrp
        -label (uiRes("m_AErenderLayerNoScroll.kLevel")) 
        -min 1
        -max 5
        geometryAntiAliasing;

    separator -style "none" -height 10;

    checkBoxGrp
        -label1 (uiRes("m_AErenderLayerNoScroll.kOverrideShadingSamples")) 
        shadingSamplesOverride;
    intSliderGrp
        -label (uiRes("m_AErenderLayerNoScroll.kShadingsamples")) 
        -min 1
        -max 32
        shadingSamples;
    intSliderGrp
        -label (uiRes("m_AErenderLayerNoScroll.kMaxShadingSamples")) 
        -min 1
        -max 32
        maxShadingSamples;

    separator -style "none" -height 10;

    checkBoxGrp
        -label1 (uiRes("m_AErenderLayerNoScroll.kOverrideVisibilitySamples")) 
        visibilitySamplesOverride;
    intSliderGrp
        -label (uiRes("m_AErenderLayerNoScroll.kLevel2")) 
        -min 1
        -max 32
        maxVisibilitySamples;

    separator -style "none" -height 10;

    checkBoxGrp
        -label1 (uiRes("m_AErenderLayerNoScroll.kOverrideVolumeSamples")) 
        volumeSamplesOverride;
    intSliderGrp
        -label (uiRes("m_AErenderLayerNoScroll.kLevel3")) 
        -min 1
        -max 20
        -fieldMaxValue 100
        volumeSamples;

    setUITemplate -ppt;

    AErenderLayerOverrideReplace($shadingGroupOverridePlug, $attributeOverrideScriptPlug);
}

//
//  Global Procedure:
//      AErenderLayerOverrideReplace
//
//  Description:
//      Procedure to update the custom controls used to override
//      shading group assignment and render stats for all members
//      of the layer.
//
global proc AErenderLayerOverrideReplace(
    string $shadingGroupOverridePlug,
    string $attributeOverrideScriptPlug )
{
	string $node = substitute("\\..*", $shadingGroupOverridePlug, "");
	int $isNotBaseLayer = 1;
	if (`getAttr ($node+".identification")` == 0)
		$isNotBaseLayer = 0;

    attrNavigationControlGrp -edit
        -attribute $shadingGroupOverridePlug
		-enable $isNotBaseLayer
        -createNew ("AErenderLayerNewGroup "+$shadingGroupOverridePlug)
        -connectToExisting ("AErenderLayerReplaceGroup "+$shadingGroupOverridePlug)
        shadingGroupOverride;

    string $script = `getAttr $attributeOverrideScriptPlug`;

    int $has, $value;

	global string $AErenderLayerOverrideAttrs[];
	for ($i=0 ; $i<size($AErenderLayerOverrideAttrs) ; $i++) {
		string $attr = $AErenderLayerOverrideAttrs[$i];
		int $value = 1;
		if (hasIntOverride($script, $attr)) {
			if (intOverrideValue($script, $attr, 1))	$value = 3;
			else										$value = 2;
		}
		radioButtonGrp -edit -select $value 
			-changeCommand ("AErenderLayerOverrideChanged "+$attr+" "+$attributeOverrideScriptPlug)
			("Radio"+$attr);
	} 

    $has = hasIntOverride($script, "geometryAntialiasingOverride");
    checkBoxGrp -edit
        -enable1 $isNotBaseLayer -value1 $has
        -changeCommand ("AErenderLayerOverrideChanged geometryAntiAliasingOverride "+$attributeOverrideScriptPlug)
        geometryAntiAliasingOverride;
    $has = hasIntOverride($script, "antialiasingLevel");
    $value = intOverrideValue($script, "antialiasingLevel", 1);
    intSliderGrp -edit
        -enable $has -value $value
        -changeCommand ("AErenderLayerOverrideChanged geometryAntiAliasing "+$attributeOverrideScriptPlug)
        geometryAntiAliasing;

    $has = hasIntOverride($script, "shadingSamplesOverride");
    checkBoxGrp -edit
        -enable1 $isNotBaseLayer -value1 $has
        -changeCommand ("AErenderLayerOverrideChanged shadingSamplesOverride "+$attributeOverrideScriptPlug)
        shadingSamplesOverride;
    $has = hasIntOverride($script, "shadingSamples");
    $value = intOverrideValue($script, "shadingSamples", 1);
    intSliderGrp -edit
        -enable $has -value $value
        -changeCommand ("AErenderLayerOverrideChanged shadingSamples "+$attributeOverrideScriptPlug)
        shadingSamples;
    $has = hasIntOverride($script, "maxShadingSamples");
    $value = intOverrideValue($script, "maxShadingSamples", 1);
    intSliderGrp -edit
        -enable $has -value $value
        -changeCommand ("AErenderLayerOverrideChanged maxShadingSamples "+$attributeOverrideScriptPlug)
        maxShadingSamples;

    $has = hasIntOverride($script, "maxVisibilitySamplesOverride");
    checkBoxGrp -edit
        -enable1 $isNotBaseLayer -value1 $has
        -changeCommand ("AErenderLayerOverrideChanged visibilitySamplesOverride "+$attributeOverrideScriptPlug)
        visibilitySamplesOverride;
    $has = hasIntOverride($script, "maxVisibilitySamples");
    $value = intOverrideValue($script, "maxVisibilitySamples", 1);
    intSliderGrp -edit
        -enable $has -value $value
        -changeCommand ("AErenderLayerOverrideChanged maxVisibilitySamples "+$attributeOverrideScriptPlug)
        maxVisibilitySamples;

    $has = hasIntOverride($script, "volumeSamplesOverride");
    checkBoxGrp -edit
        -enable1 $isNotBaseLayer -value1 $has
        -changeCommand ("AErenderLayerOverrideChanged volumeSamplesOverride "+$attributeOverrideScriptPlug)
        volumeSamplesOverride;
    $has = hasIntOverride($script, "volumeSamples");
    $value = intOverrideValue($script, "volumeSamples", 1);
    intSliderGrp -edit
        -enable $has -value $value
        -changeCommand ("AErenderLayerOverrideChanged volumeSamples "+$attributeOverrideScriptPlug)
        volumeSamples;
}

//
//  Global Procedure:
//      AErenderLayerNumberNew
//
//  Description:
//      Create a control to change the identification number by re-directing
//      the edit to the render layer manager.
//
global proc AErenderLayerNumberNew(
    string $identificationPlug )
{
    intFieldGrp -label (uiRes("m_AErenderLayerNoScroll.kNumber")) identificationNumber;

    AErenderLayerNumberReplace( $identificationPlug );
}

//
//  Global Procedure:
//      AErenderLayerNumberReplace
//
//  Description:
//      Update the control to change the identification number by re-directing
//      the edit to the render layer manager.
//
global proc AErenderLayerNumberReplace(
    string $identificationPlug )
{
    string $managerPlug[] = `listConnections -source true -plugs true $identificationPlug`;

    if (size($managerPlug) == 1) {
        $identificationPlug = $managerPlug[0];
    }

    connectControl -preventOverride true -index 2 identificationNumber $identificationPlug;
}

//
//  Procedure Name:
//	AErenderLayerNoScroll
//

global proc AErenderLayerNoScroll ( string $nodeName )
{
    editorTemplate -callCustom "AErenderLayerPreset"
        "AErenderLayerPreset"
        "message";

	editorTemplate -beginLayout (uiRes("m_AErenderLayerNoScroll.kRenderLayerOptions"))  -collapse 0;
		editorTemplate -preventOverride true -addControl "renderable";
	    editorTemplate -preventOverride true -addControl "global";
        editorTemplate
			-preventOverride true
			-callCustom "AErenderLayerNumberNew"
            "AErenderLayerNumberReplace"
            "identification";
	editorTemplate -endLayout;

	editorTemplate -beginLayout (uiRes("m_AErenderLayerNoScroll.kMemberOverrides"))  -collapse 0;
        editorTemplate
			-preventOverride true
			-callCustom "AErenderLayerOverrideNew"
            "AErenderLayerOverrideReplace"
            "shadingGroupOverride"
			"attributeOverrideScript";
	editorTemplate -endLayout;

    editorTemplate -beginLayout (uiRes("m_AErenderLayerNoScroll.kRenderPassOptions"))  -collapse 1;
    editorTemplate -preventOverride true -addControl "beauty";  
	editorTemplate -preventOverride true -addControl "color";  
	editorTemplate -preventOverride true -addControl "shadow";  
	editorTemplate -preventOverride true -suppress   "ambient";  
	editorTemplate -preventOverride true -addControl "diffuse";  
	editorTemplate -preventOverride true -addControl "specular";  
	editorTemplate -endLayout;

	// suppressed attributes

	editorTemplate -suppress "renderPassInfo";
	editorTemplate -suppress "renderInfo";
	editorTemplate -suppress "psdBlendMode";
	editorTemplate -suppress "psdAlphaChannel";
	editorTemplate -suppress "adjustments";
	editorTemplate -suppress "outAdjustments";
	editorTemplate -suppress "displayOrder";
	editorTemplate -suppress "shadingGroupOverride";
	editorTemplate -suppress "attributeOverrideScript";
	editorTemplate -suppress "layerParent";
	editorTemplate -suppress "layerChildren";
	editorTemplate -suppress "mentalRayControls";
    editorTemplate -suppress "precompTemplate";
    editorTemplate -suppress "defaultPrecompTemplate";

	// include/call base class/node attributes

	AEdependNodeTemplate $nodeName;
}
