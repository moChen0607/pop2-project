// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//	Procedure Name:
//	AEextrudeTemplate
//
//	Description Name;
//	Creates the attribute editor controls for the extrude node
//
//	Input Value:
//	nodeName
//
//	Output Value:
//	None
//


global proc extrudeTypeControls( string $nodeName )
{
	string $typeAttrName = $nodeName + ".extrudeType";
	int	$typeValue = `getAttr $typeAttrName`;

	if ( $typeValue == 0 )
	{
		// distance extrude type
		editorTemplate -dimControl $nodeName "useProfileNormal" false;
		editorTemplate -dimControl $nodeName "fixedPath" true;
		editorTemplate -dimControl $nodeName "length" false;
		editorTemplate -dimControl $nodeName "degreeAlongLength" false;

 		// for direction dimming
		useProfileNormalControls( $nodeName );
	}
	else if ( $typeValue == 1 )
	{
		// flat extrude type
		editorTemplate -dimControl $nodeName "useProfileNormal" true;
		editorTemplate -dimControl $nodeName "fixedPath" false;
		editorTemplate -dimControl $nodeName "direction" true;
		editorTemplate -dimControl $nodeName "length" true;
		editorTemplate -dimControl $nodeName "degreeAlongLength" true;
	}
	else
	{
		// tube extrude type
		editorTemplate -dimControl $nodeName "useProfileNormal" false;
		editorTemplate -dimControl $nodeName "fixedPath" false;
		editorTemplate -dimControl $nodeName "direction" true;
		editorTemplate -dimControl $nodeName "length" true;
		editorTemplate -dimControl $nodeName "degreeAlongLength" true;

		// for direction dimming
		useProfileNormalControls( $nodeName );
	}

	// for pivot dimming
	useComponentPivotControls( $nodeName );
}

global proc useProfileNormalControls( string $nodeName )
{
	int	$useNormalValue = 1;

	string $needUseDir = $nodeName + ".extrudeType";
	int $useDir = `getAttr $needUseDir`;

	if( 0 == $useDir ) {
		string $useNormalAttrName = $nodeName + ".useProfileNormal";
		$useNormalValue = `getAttr $useNormalAttrName`;
	}

	if ( $useNormalValue == 0 )
	{
		// need to specify a direction
		editorTemplate -dimControl $nodeName "direction" false;
	}
	else
	{
		// no need to specify a direction since using profile normal
		editorTemplate -dimControl $nodeName "direction" true;
	}
}

global proc useComponentPivotControls( string $nodeName )
{
	string $usePivotAttrName = $nodeName + ".useComponentPivot";
	int	$usePivotValue = `getAttr $usePivotAttrName`;

	if ( $usePivotValue == 1 )
	{
		// can't use specified pivot (uses start of path instead)
		editorTemplate -dimControl $nodeName "pivot" false;
	}
	else
	{
		// can use specified pivot
		editorTemplate -dimControl $nodeName "pivot" true;
	}
}

global proc AEextrudeTemplate( string $nodeName )
{
	int $advMod = `licenseCheck -m edit -typ model`;
	string $profileCurve = (uiRes("m_AEextrudeTemplate.kProfileCurve"));
	string $pathCurve = (uiRes("m_AEextrudeTemplate.kPathCurve"));
	editorTemplate -beginScrollLayout;

		editorTemplate -beginLayout (uiRes("m_AEextrudeTemplate.kExtrudeHistory")) -collapse false;
			editorTemplate -callCustom ("AEinputNew \""+$profileCurve+"\"")
					("AEinputReplace \""+$profileCurve+"\"")
					"profile";
			editorTemplate -callCustom ("AEinputNew \""+$pathCurve+"\"")
					("AEinputReplace \""+$pathCurve+"\"")
					"path";

			editorTemplate -addControl "extrudeType" "extrudeTypeControls";
			editorTemplate -beginNoOptimize;
			editorTemplate -addControl "useComponentPivot" "useComponentPivotControls";
			editorTemplate -addControl "useProfileNormal" "useProfileNormalControls";
			editorTemplate -endNoOptimize;
			editorTemplate -addControl "fixedPath";
			editorTemplate -addControl "direction";
			editorTemplate -addControl "length";
			editorTemplate -addControl "pivot";

			if( $advMod ) {
				editorTemplate -addControl "rotation";
				editorTemplate -addControl "scale";
			}
			editorTemplate -addControl "degreeAlongLength";
		editorTemplate -endLayout;

	// include/call base class/node attributes
	AEabstractBaseCreateTemplate $nodeName;

	editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;

	if( ! $advMod ) {
		editorTemplate -suppress "rotation";
		editorTemplate -suppress "scale";
	}
}
