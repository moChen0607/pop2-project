// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//	Procedure Name:
//	AEcheckEndPoint
//
//	Description Name;
//	Call back to support dimming when the endPoint attr is checked
//  on and off.
//
//	Input Value:
//	nodeName
//
//	Output Value:
//	None
//


global proc AEcheckEndPoint(string $nodeName) 
{
	int $isEndPoint = `getAttr ($nodeName+".endPoint")`;
	
	if ($isEndPoint) 
	{
		editorTemplate -dimControl $nodeName "endPointTolerance" false;
	}
	else 
	{
		editorTemplate -dimControl $nodeName "endPointTolerance" true;
	}
}

//	Procedure Name:
//	AEboundaryTemplate
//
//	Description Name;
//	Creates the attribute editor controls for the boundary node
//
//	Input Value:
//	nodeName
//
//	Output Value:
//	None
//
global proc AEboundaryTemplate( string $nodeName )
{

	editorTemplate -beginScrollLayout;
		string $inputCurve1 = (uiRes("m_AEboundaryTemplate.kInputCurveOne"));
		string $inputCurve2 = (uiRes("m_AEboundaryTemplate.kInputCurveTwo"));
		string $inputCurve3 = (uiRes("m_AEboundaryTemplate.kInputCurveThree"));
		string $inputCurve4 = (uiRes("m_AEboundaryTemplate.kInputCurveFour"));
		
		editorTemplate -beginLayout (uiRes("m_AEboundaryTemplate.kBoundaryHistory")) -collapse false;
			
			editorTemplate -callCustom ("AEinputNew \""+$inputCurve1+"\"")
						("AEinputReplace \""+$inputCurve1+"\"")
						"inputCurve1";
			editorTemplate -callCustom ("AEinputNew \""+$inputCurve2+"\"")
						("AEinputReplace \""+$inputCurve2+"\"")
						"inputCurve2";
			editorTemplate -callCustom ("AEinputNew \""+$inputCurve3+"\"")
						("AEinputReplace \""+$inputCurve3+"\"")
						"inputCurve3";
			editorTemplate -callCustom ("AEinputNew \""+$inputCurve4+"\"")
						("AEinputReplace \""+$inputCurve4+"\"")
						"inputCurve4";

			editorTemplate -addControl "order";
			editorTemplate -addControl "endPoint" "AEcheckEndPoint";
			editorTemplate -addControl "endPointTolerance";

		editorTemplate -endLayout;

	// include/call base class/node attributes
	AEabstractBaseCreateTemplate $nodeName;

	editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;
}
