// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:	2004
//

//  Procedure Name:  AEfollicleRelated
//
//  Description Name;
//		Return a list nodes related to the follicle that we want to
//		display tabs for when the follicle is in the AE.
//		For now the related nodes will be start, rest and output curves
//		as well as the input surface, hairSystem and pfxHair node
//		connected to  it.
//
//  Input Value:
//	   nodeName:  name of the follicle node that is in the editor, that
//				  we are finding related nodes for.
//
//  Output Value:
//		The list of related nodes, with the node whose tab we want to be
//          opened, with the follicle node added at the end of the
//          array.  
//
global proc string[] AEfollicleRelated (string $node)
{
	string $relatedNodes[];

	int $i;

	string $start = sourceNodeNameFromConnection ( 
						$node + ".startPosition" );
	if( "" != $start ){
		if( 0 == getAttr( $start + ".intermediateObject" ) ) {	
			$relatedNodes[size($relatedNodes)] = $start;
		}
	}
	string $rest = sourceNodeNameFromConnection ( 
						$node + ".restPosition" );
	if( "" != $rest ){
		if( 0 == getAttr( $rest + ".intermediateObject" ) ) {	
			$relatedNodes[size($relatedNodes)] = $rest;
		}
	}

	string $hsys = destinationNodeNameFromConnection ( 
						$node + ".outHair" );
	if( "" != $hsys ){
		$relatedNodes[size($relatedNodes)] = $hsys;
	}

	// We need to add the node twice to the end, because the
	// last entry is stripped out.
	int $index = size($relatedNodes);

	$relatedNodes[$index] = $node;
	$relatedNodes[$index+1] = $node;

	return $relatedNodes;
}
