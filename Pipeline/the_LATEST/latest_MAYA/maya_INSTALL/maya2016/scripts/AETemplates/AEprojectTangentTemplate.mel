// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//	Procedure Name:
//	AEprojectTangentTemplate
//
//	Description Name;
//	Creates the attribute editor controls for the projectTangent node
//
//	Input Value:
//	nodeName
//
//	Output Value:
//	None
//

global proc checkProjectTangentCurvature ( string $nodeName )
{
	string $nodeAttr = $nodeName + ".curvature";
	string $value = `getAttr $nodeAttr`;
	
	if ($value == 0) {
		editorTemplate -dimControl $nodeName "curvatureScale" true;
	} else {
		editorTemplate -dimControl $nodeName "curvatureScale" false;
	}
}

global proc checkProjectTangentTangentDirection ( string $nodeName )
{
	string $nodeAttr = $nodeName + ".tangentDirection";
	int $value = `getAttr $nodeAttr`;
	if ($value == 3) {
		editorTemplate -dimControl $nodeName "curvature" true;
		editorTemplate -dimControl $nodeName "curvatureScale" true;
		editorTemplate -dimControl $nodeName "rotate" true;
	} else {
		editorTemplate -dimControl $nodeName "curvature" false;
		editorTemplate -dimControl $nodeName "rotate" false;

		checkProjectTangentCurvature( $nodeName );
	}
}

global proc AEprojectTangentTemplate( string $nodeName )
{
	string $inputCrv = (uiRes("m_AEprojectTangentTemplate.kInputCrvToProject"));
	string $inputCurve1 = (uiRes("m_AEprojectTangentTemplate.kInputCurveOne"));
	string $inputCurve2 = (uiRes("m_AEprojectTangentTemplate.kInputCurveTwo"));
	string $inputSurface = (uiRes("m_AEprojectTangentTemplate.kInputSurface"));
	editorTemplate -beginScrollLayout;
	
		editorTemplate -beginLayout (uiRes("m_AEprojectTangentTemplate.kProjectTangentHistory")) 
			-collapse false;

			editorTemplate -callCustom ("AEinputNew \""+$inputCrv+"\"")
					("AEinputReplace \""+$inputCrv+"\"")
					"inputCurveToProject";
			editorTemplate -callCustom ("AEinputNew \""+$inputCurve1+"\"")
					("AEinputReplace \""+$inputCurve1+"\"")
					"inputCurve1ToProjectTo";
			editorTemplate -callCustom ("AEinputNew \""+$inputCurve2+"\"")
					("AEinputReplace \""+$inputCurve2+"\"")
					"inputCurve2ToProjectTo";
			editorTemplate -callCustom ("AEinputNew \""+$inputSurface+"\"")
					("AEinputReplace \""+$inputSurface+"\"")
					"inputSurfaceToProjectTo";

			editorTemplate -addControl "curvature" "checkProjectTangentCurvature";
			editorTemplate -addControl "curvatureScale";
	
			editorTemplate -addSeparator;

			editorTemplate -addControl "tangentDirection" "checkProjectTangentTangentDirection";
			editorTemplate -addControl "reverseTangent";
			editorTemplate -addControl "tangentScale";
			editorTemplate -addControl "rotate";
			editorTemplate -addControl "ignoreEdges";
		editorTemplate -endLayout;

		// include/call base class/node attributes
		AEdependNodeTemplate $nodeName;

	editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;
}
