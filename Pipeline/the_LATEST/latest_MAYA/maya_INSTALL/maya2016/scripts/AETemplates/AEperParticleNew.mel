// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:	July 7, 1997
//
//  Procedure Name:
//	AEperParticleNew
//
//  Description:
//	Creates  attribute editor controls for perParticle Attributes 
//
//  Input Value:
//	attributeUIName
// 	attributeType (vector, float)
//	perParticleAttr (nodeName + attributeName)
//
//  Output Value:
//	None
//


global proc AEperParticleNew ( string $attributeUIName,
				string $type,
				string $perParticleAttr )
{
	string $nodeName[];
	tokenize($perParticleAttr, ".", $nodeName);
	string $layoutName = ($nodeName[1] + "RowLayout");

	if (`attributeQuery -exists -node $nodeName[0] $nodeName[1]`) {
		setUITemplate -pst attributeEditorPresetsTemplate;

		rowLayout -nc 4 -vis 0
			-cat 1 right 5 
			-cat 2 both 0
			-cat 3 both 0
			-cat 4 both 0 
			$layoutName;
			text -l $attributeUIName ;
			button -label (uiRes("m_AEperParticleNew.kExprEd")) 
				-c ( "particleExpressionEditor " + $perParticleAttr )
				($nodeName[1] + "ExprEditButton");
			button -label (uiRes("m_AEperParticleNew.kCompEd")) 
				-c  "componentEditorWindow" 
				($nodeName[1] + "CompEditButton");
			button -label (uiRes("m_AEperParticleNew.kRamp")) 
				 -c ("ArrayMapperWnd "
					+ $nodeName[0] + " "
					+ $nodeName[1] )
				($nodeName[1] + "RampButton");
			setParent ..;
		rowLayout -e -vis 1 $layoutName;
		setUITemplate -ppt;
	}
}



global proc AEperParticleReplace ( string $attributeUIName,
					string $type,
					string $perParticleAttr )
{
	string $nodeName[];
	tokenize($perParticleAttr, ".", $nodeName);
	string $layoutName = ( $nodeName[1] + "RowLayout" );

	if (`attributeQuery -exists -node $nodeName[0] $nodeName[1]`) {
		if (`rowLayout -exists $layoutName`) {
			button -e -c ( "particleExpressionEditor " 
					+ $perParticleAttr )
					($nodeName[1] + "ExprEditButton");
			button -e -c "componentEditorWindow" 
					($nodeName[1] + "CompEditButton");
			button -e -c ("ArrayMapperWnd " 
					+ $nodeName[0] + " " 
					+ $nodeName[1] )
					($nodeName[1] + "RampButton");
		} else {
			AEperParticleNew $attributeUIName
					$type
					$perParticleAttr;
		}
	} else if (`rowLayout -exists $layoutName`){
		rowLayout -e -vis 0 $layoutName; 
		deleteUI -layout $layoutName;
	}
}


