// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//	Procedure Name:
//	AEcloseSurfaceTemplate
//
//	Description Name;
//	Creates the attribute editor controls for the closeSurface node
//
//	Input Value:
//	nodeName
//
//	Output Value:
//	None
//

global proc closeSurfaceBlendKnotInsertionControls( string $nodeName )
{
    int $m = `getAttr ($nodeName + ".blendKnotInsertion")`;
    if( 0 == $m ) {
        editorTemplate -dimControl $nodeName "parameter" true;
    }
    else {
        editorTemplate -dimControl $nodeName "parameter" false;
    }
}

global proc closeSurfaceMethodControls( string $nodeName )
{
    int $m = `getAttr ($nodeName + ".preserveShape")`;
    if( 2 == $m ) {
        editorTemplate -dimControl $nodeName "blendBias" false;
        editorTemplate -dimControl $nodeName "blendKnotInsertion" false;
        closeSurfaceBlendKnotInsertionControls( $nodeName );
	}
	else {
        editorTemplate -dimControl $nodeName "blendBias" true;
        editorTemplate -dimControl $nodeName "blendKnotInsertion" true;
        editorTemplate -dimControl $nodeName "parameter" true;
    }
}

global proc AEcloseSurfaceTemplate( string $nodeName )
{
	string $inputSurface = (uiRes("m_AEcloseSurfaceTemplate.kInputSurface"));
	editorTemplate -beginScrollLayout;
		editorTemplate -beginLayout (uiRes("m_AEcloseSurfaceTemplate.kCloseSurfaceHistory")) -collapse 0;

			editorTemplate -callCustom ("AEinputNew \""+$inputSurface+"\"")
					("AEinputReplace \""+$inputSurface+"\"")
					"inputSurface";

			editorTemplate -addControl "direction";

			editorTemplate -addControl "preserveShape"
				"closeSurfaceMethodControls";

            editorTemplate -addControl "blendBias";
            editorTemplate -addControl "blendKnotInsertion"
                "closeSurfaceBlendKnotInsertionControls";
            editorTemplate -addControl "parameter";
		editorTemplate -endLayout;

		// include/call base class/node attributes
		AEabstractBaseCreateTemplate $nodeName;

	editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;


}
