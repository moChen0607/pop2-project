// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  June 08, 2006
//
//  Description:
//      This script defines the procedure for getting the
//      localized nice attribute name.
//

//
//  Procedure Name:
//      attributeNiceName
//
//  Description:
//		Returns the localized nice attribute name.
//
//  Input Arguments:
//		The english version of the node name and the long name of the attribute.
//
//  Return Value:
//      The localized version of the nice attribute name.
//
//




global proc string attributeNiceName( string $nodeName, string $longName )
{          
    string $attrNiceName;

	// Tokenize the $longName, since it might refer to an
	// instanced or non-instanced multi parent, a compound, etc.
	// For an attr like quadShadingSwitch1.input.inShape, we'll
	// lookup "input" first, then "inShape", then put them both
	// together in a way appropriate for UI display.
	//
	string $pieces[];
	tokenize $longName ".[" $pieces;
            
	$attrNiceName = "";
	for( $p in $pieces ) {
		// Don't want to attempt to find shortNames of multi-indices.
		// Just add them to what we've got so far and move on.
		//
		if( substring($p, size($p), size($p)) == "]" ) {
			$attrNiceName += ( "[" + $p );
			continue;
		}
			
		// Before appending a child attr, need to separate with "."
		//
		if( size( $attrNiceName ) ) {
			$attrNiceName += ".";
		}
		$attrNiceName += `attributeQuery -node $nodeName -niceName $p`;
	}

	// If the node/attr is valid, we should always return a 
    // non-empty result from this routine

	if( size( $attrNiceName ) == 0 )
    {
		// Hard-coded string OK for obsolete scripts
        string $fmt = "attributeNiceName could not be determined for ^1s.^2s ";
        error `format -stringArg $nodeName -stringArg $longName $fmt`;
    }
    
    return $attrNiceName;
}
