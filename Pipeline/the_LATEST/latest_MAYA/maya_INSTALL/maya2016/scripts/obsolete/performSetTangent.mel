// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Dec. 6/96
//
//  Description:
//      Option box dialog for 'Set Tangent' (setting of global tangent types)
//
//  Input Arguments:
//      0 - Execute the command.
//		1 - Show the option box dialog.
//		2 - Return the command.
//
//  Return Value:
//      None.
//

proc
setOptionVars (int $forceFactorySettings)
{
	if ($forceFactorySettings || !`optionVar -exists setTangentInType`) {
		optionVar -stringValue setTangentInType "spline";
	}

	if ($forceFactorySettings || !`optionVar -exists setTangentOutType`) {
		optionVar -stringValue setTangentOutType "spline";
	}
}

global proc
setTangentSetup (string $parent, int $forceFactorySettings)
{
	// Retrieve the option settings
	//
	setOptionVars ($forceFactorySettings);

	setParent $parent;

	// If the user presses "Reset", we'll query the optionVar settings
	// to get the factory settings to reset to.
	// Otherwise, however, when the option box is opened, we want to show the
	// current global tangent settings (not the "Reset" ones).

	string $result[];
	string $tangentType;

	if ($forceFactorySettings)
	{
		$tangentType = `optionVar -query setTangentInType`;
	}
	else
	{
		$result = `keyTangent -query -global -inTangentType`;
		$tangentType = $result[0];
	}
	if ($tangentType == "spline")
		radioButtonGrp -edit -select 1 itt;
	else if ($tangentType == "linear")
		radioButtonGrp -edit -select 2 itt;
	else if ($tangentType == "clamped")
		radioButtonGrp -edit -select 3 itt;
	else if ($tangentType == "flat")
		radioButtonGrp -edit -select 4 itt;
	else
		error("Error determining current inTangent type");


	if ($forceFactorySettings)
	{
		$tangentType = `optionVar -query setTangentOutType`;
	}
	else
	{
		$result = `keyTangent -query -global -outTangentType`;
		$tangentType = $result[0];
	}
	if ($tangentType == "spline")
		radioButtonGrp -edit -select 1 ott1;
	else if ($tangentType == "linear")
		radioButtonGrp -edit -select 2 ott1;
	else if ($tangentType == "clamped")
		radioButtonGrp -edit -select 3 ott1;
	else if ($tangentType == "flat")
		radioButtonGrp -edit -select 4 ott1;
	else if ($tangentType == "step")
		radioButtonGrp -edit -select 1 ott2;
	else
		error("Error determining current outTangent type");
}

global proc
setTangentCallback (string $parent, int $doIt)
{
    setParent $parent;

	// Set the optionVar's from the control values, and then perform the command
	//

	int $optionValue = `radioButtonGrp -query -select itt`;
	switch($optionValue)
	{
		case 1:
			optionVar -stringValue setTangentInType "spline";
			break;
		case 2:
			optionVar -stringValue setTangentInType "linear";
			break;
		case 3:
			optionVar -stringValue setTangentInType "clamped";
			break;
		case 4:
			optionVar -stringValue setTangentInType "flat";
			break;
		default:
			error("No in tangent type selected");
	}

	$optionValue = `radioButtonGrp -query -select ott1`;
	switch($optionValue)
	{
		// 0 means nothing in ott1 is selected -- but
		// something in its shared radio collection must be.
		// Since there's only one other radio button group
		// (with one radio button!) in the collection we
		// know a 0 value means "stepped".
		//
		case 0:
			optionVar -stringValue setTangentOutType "step";
			break;
		case 1:
			optionVar -stringValue setTangentOutType "spline";
			break;
		case 2:
			optionVar -stringValue setTangentOutType "linear";
			break;
		case 3:
			optionVar -stringValue setTangentOutType "clamped";
			break;
		case 4:
			optionVar -stringValue setTangentOutType "flat";
			break;
		default:
			error("No out tangent type selected.");
	}


	if ($doIt)
	{
		performSetTangent false;
	}
}

proc
setTangentWidgets ()
{
	// Warning! If you change the order of these option menu menu items,
	// remember to change the Setup and Callback methods!

	radioButtonGrp -nrb 4 -label "In Tangent Type"
		-l1 "Spline"
		-l2 "Linear"
		-l3 "Clamped"
		-l4 "Flat"
		itt;

	separator -vis no -h 10 inOutSeparator;

	radioButtonGrp -nrb 4 -label "Out Tangent Type"
		-l1 "Spline"
		-l2 "Linear"
		-l3 "Clamped"
		-l4 "Flat"
		ott1;

	radioButtonGrp -nrb 1 -label ""
		-l1 "Stepped"
		-scl ott1
		ott2;
}

proc
setTangentOptions ()
{
	string $commandName = "setTangent";

	// Build the option box "methods"
	//
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	// Get the option box
	//
	// The value returned is the name of the layout to be used as
	// the parent for the option box UI.
	//
	string $layout = getOptionBox();
	setParent $layout;

	// There actually is no "setTangent" command. We set tangents using
	// the keyTangent command, so set the help menu appropriately.
	//
	setOptionBoxCommandName("keyTangent");

	// Activate the default UI template so that the layout of this
	//  option box is consistent with the layout of the rest of the
	//  application.
	//
	setUITemplate -pushTemplate DefaultTemplate;

	// Turn on the wait cursor.
	//
	waitCursor -state 1;

	// Place the widgets in a scroll layout that displays a scroll bar
	// if the entire contents of the window are not visible.
	//
	tabLayout -tv false -scr true;

	string $parent = `columnLayout -adjustableColumn true`;
	setTangentWidgets;

	// Turn off the wait cursor
	//
	waitCursor -state 0;

	// Deactivate the default UI template
	//
	setUITemplate -popTemplate;

	// Add the default buttons
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-label "Set Tangent Type"
		-command ($callback + " " + $parent + " " + 1)
		$applyBtn;

	// Note: When this window opens, it always shows the current state
	// of the global tangent type.  There is no concept of using option vars
	// to save the current state.  (They're more for a reset to factory settings.)
	// Modify the standard behaviour of the save button to do the same as 
	// "Apply", but hide it as well.
	// 
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit
		-command ($callback + " " + $parent + " " + 1 + "; hideOptionBox")
		$saveBtn;

	string $resetBtn = getOptionBoxResetBtn();
	button -edit
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;

	// Set the option box title
	//
	setOptionBoxTitle("Tangent Type Options");

	// Set the current values of the option box.
	//
	eval (($setup + " " + $parent + " " + 0));

	// Show the option box.
	//
	showOptionBox();
}

//
//	Procedure Name:
//		assembleCmd
//
//	Description:
//		Construct the command that will apply the option box values.
//
//	Input Arguments:
//		None.
//
//	Return Value:
//		None.
//
proc string assembleCmd()
{
	string $cmd;

	setOptionVars(false);

	$cmd = "keyTangent -global -inTangentType " +
			`optionVar -query setTangentInType` + ";" +
		   "keyTangent -global -outTangentType " +
			`optionVar -query setTangentOutType` + ";";

	return $cmd;
}


//	Procedure Name:
//		performSetTangent
//
//	Description:
//		Perform the keyTangent command for both the in- and out-
//	tangents corresponding to the option values.
//	This procedure will also show the option box window if necessary
//	as well as construct the command string that will invoke the
//	keyTangent commands with the current option box values.
//
//	Input Arguments:
//		0 - Execute the command.
//		1 - Show the option box dialog.
//		2 - Return the command.
//
//	Return Value:
//		None.
//
global proc string
performSetTangent (int $action)
{
	string $cmd = "";

	switch ($action) {

		//	Execute the command.
		//
		case 0:
			//	Retrieve the option settings
			//
			setOptionVars(false);

			//	Get the command.
			//
			$cmd = `assembleCmd`;

			//	Execute the command with the option settings.
			//
			eval($cmd);

			break;

		//	Show the option box.
		//
		case 1:
			setTangentOptions;
			break;

		//	Return the command string.
		//
		case 2:
			//	Retrieve the option settings.
			//
			setOptionVars (false);

			//	Get the command.
			//
			$cmd = `assembleCmd`;
			break;
	}
	return $cmd;
}
