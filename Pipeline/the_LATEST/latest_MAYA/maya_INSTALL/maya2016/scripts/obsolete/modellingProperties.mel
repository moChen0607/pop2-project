// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//
//  Creation Date:  Aug 16, 1996
//
//  Description:
//  Default for the modelling property sheets.
//


proc baseModellingSetCallbacks( string $parent,
								string $ctxCmdName, 
								int $showOutputStyle, 
								int $showKeepOriginals,
								int $showCurveRange,
								int $showRebuild ) 
{
//
//  Description:
//      This is the stuff that really shows it.
//
//
    setParent $parent;

	if( $showOutputStyle ) {
		tabLayout -e -selectTab showOutputGeometryStyle_Tab
			outputGeometryStyle_Tabs;
		radioButtonGrp -e 
			-cc1 ($ctxCmdName + " -e -po false `currentCtx`")
			-cc2 ($ctxCmdName + " -e -po true `currentCtx`")
			baseModellingOutputOptions;
	}
	else {
		tabLayout -e -selectTab dontShowOutputGeometryStyle_Tab
			outputGeometryStyle_Tabs;
	}

	if( $showKeepOriginals ) {
		tabLayout -e -selectTab showReplaceOriginal_Tab replaceOriginal_Tabs;

		checkBoxGrp -e
			-cc1 ($ctxCmdName + " -e -rpo (! #1) `currentCtx`")
			baseModellingReplaceOptions;
	}
	else {
		tabLayout -e -selectTab dontShowReplaceOriginal_Tab
			replaceOriginal_Tabs;
	}

	if( $showCurveRange ) {
		tabLayout -e -selectTab showCurveRangeStyle_Tab curveRangeStyle_Tabs;

		// Needs editing to match curve range attribute name
		radioButtonGrp -e 
			-cc1 ($ctxCmdName + " -e -rn off `currentCtx`")
			-cc2 ($ctxCmdName + " -e -rn on `currentCtx`")
			baseModellingCurveRangeOptions;
	}
	else {
		tabLayout -e -selectTab dontShowCurveRangeStyle_Tab
			curveRangeStyle_Tabs;
	}

	if( $showRebuild ) {
		tabLayout -e -selectTab showRebuildStyle_Tab rebuildStyle_Tabs;

		// Needs editing to match rebuild attribute name
		checkBoxGrp -e 
			-cc1 ($ctxCmdName + " -e -rb #1 `currentCtx`")
			baseModellingRebuildOption;
	}
	else {
		tabLayout -e -selectTab dontShowRebuildStyle_Tab rebuildStyle_Tabs;
	}
}

proc baseModellingProperties( string $parent, string $ctxCmdName,
							  int $showOutputStyle, int $showKeepOriginals,
							  int $showCurveRange, int $showRebuild )
//
//  Description:
//		This procedure builds the property sheet and assigns callbacks to its
//		controls. The state of the controls are set in baseModellingValues().
{
	setUITemplate -pushTemplate DefaultTemplate;
	setParent $parent;

    //
    // Common modelling options
    //
    	frameLayout -collapsable true -collapse false
        	-l "Standard Options" baseModellingFrame;
        	columnLayout baseModellingLayout;

			tabLayout -childResizable true -tabsVisible false
				replaceOriginal_Tabs;

				columnLayout dontShowReplaceOriginal_Tab;
				setParent ..;
				columnLayout showReplaceOriginal_Tab;
					checkBoxGrp -ncb 1 -l ""
						-l1 "Keep Original"
						-value1 false 
						baseModellingReplaceOptions;
				setParent ..;
			setParent ..;

			tabLayout -childResizable true -tabsVisible false
				curveRangeStyle_Tabs;

				columnLayout dontShowCurveRangeStyle_Tab;
				setParent ..;
				columnLayout showCurveRangeStyle_Tab;
					radioButtonGrp -nrb 2 -l "Curve Range"
						-l1 "Complete"
						-l2 "Partial" 
						-select 1
						baseModellingCurveRangeOptions;
				setParent ..;
			setParent ..;

			tabLayout -childResizable true -tabsVisible false
				rebuildStyle_Tabs;

				columnLayout dontShowRebuildStyle_Tab;
				setParent ..;
				columnLayout showRebuildStyle_Tab;
					checkBoxGrp -ncb 1 -l ""
						-l1 "Rebuild"
						-value1 false 
						baseModellingRebuildOption;
				setParent ..;
			setParent ..;

			tabLayout -childResizable true -tabsVisible false
				outputGeometryStyle_Tabs;

				columnLayout dontShowOutputGeometryStyle_Tab;
				setParent ..;
				columnLayout showOutputGeometryStyle_Tab;
					radioButtonGrp -nrb 2 -l "Output Geometry"
						-l1 "Nurbs"
						-l2 "Polygons" 
						-select 1
						baseModellingOutputOptions;
				setParent ..;
			setParent ..;
		setParent ..;
	setParent ..;

	baseModellingSetCallbacks( $parent, $ctxCmdName,
							   $showOutputStyle, $showKeepOriginals,
							   $showCurveRange, $showRebuild );
	setUITemplate -popTemplate;
}

proc int baseModellingNodeProperties( string $ctxCmd, string $resetCmd )
{
	string $curctx = `currentCtx`;
	string $nodes[] = eval ($ctxCmd + "-q -anq " + $curctx);
	int $total = size( $nodes );
	string $parent;

	if( $total > 0 ) {
		columnLayout -adj true history;
			$parent = `setParent -query`;
			separator -st "none";

			string $widget;
			int $cntr;
			for( $cntr=0; $cntr < $total; $cntr ++ ) {
				$widget = "nodeWidget_L" + string($cntr);
				eval ($resetCmd + " " + $parent + " " +
					  $nodes[$cntr] + " " + $widget);
			}
		setParent ..;
	}
	return $total;
}

proc baseModellingNameTabs( string $object, int $hasNodes )
{
	// Name the tabs. I hate this style. I want to name the
	// tabs during creation!
	if( $hasNodes > 0 ) {
		tabLayout -e 
			-tl properties "Tool Defaults"
			-tl history ($object + " History")
			tabs_L;
	}
	else {
		tabLayout -e -tl properties "Tool Defaults" tabs_L;
	}
}

global proc modellingProperties( string $ctxcmd, string $name,
								 string $producing,
								 string $historyReset,
								 string $historyAttributes,
								 string $historyLink,
								 int $showOutputStyle,
								 int $showKeepOriginals,
								 int $showCurveRange,
								 int $showRebuild )
//
//  Description:
//      This procedure builds the property sheet and assigns callbacks to
//      its controls.  The state of the controls are set in $name+Values().
//
//
{
	int $hasNodes = 0;

   	string $parent = `toolPropertyWindow -q -location`;
	string $curctx = `currentCtx`;
	string $node = eval( $ctxcmd + " -q -tnq " + $curctx );

   	setUITemplate -pushTemplate DefaultTemplate;

	setParent $parent;
	columnLayout -adj true $name;
		tabLayout -childResizable true tabs_L;

			$hasNodes = baseModellingNodeProperties( $ctxcmd, $historyReset );

			columnLayout -adj true properties;
				separator -st "none";

				$parent = `setParent -query`;

				eval ($historyAttributes + " " + $parent + " " + $node);
				eval ($historyLink + " " + $parent + " " + $node );

				baseModellingProperties( $parent, $ctxcmd,
										 $showOutputStyle,
										 $showKeepOriginals,
										 $showCurveRange,
										 $showRebuild );

				separator -st "none";
			setParent ..;

		setParent ..; // tabs layout
	setParent ..; // columnLayout
			
	baseModellingNameTabs( $producing, $hasNodes );
	setUITemplate -popTemplate;
}


