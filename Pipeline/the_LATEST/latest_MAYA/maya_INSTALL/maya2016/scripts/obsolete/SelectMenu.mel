// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc updateSelectionUI( )
//
// Updates all selection UI settings
// when toggling between object and component
// settings.
//
{
	menuItem -e -rb `selectMode -q -object` selectObjectsModeItem;
	menuItem -e -rb `selectMode -q -component` selectComponentsModeItem;
	menuItem -e -rb `selectMode -q -root` selectRootModeItem;
	menuItem -e -rb `selectMode -q -leaf` selectLeafModeItem;
	menuItem -e -rb `selectMode -q -template` selectTemplateModeItem;
}
		
global proc objectMaskSave() {}

proc toggleFlag (string $flag, string $widgetID) {
	int $state;
	$state = ! (int) `menuItem -q -cb $widgetID`;
	menuItem -e -cb $state $widgetID;
	selectType $flag $state;
}

proc selObjectMaskUpdate () {
	menuItem -e -cb `selectType -q -rootHandle` selectObjectRootHandleItem;
	menuItem -e -cb `selectType -q -handle` selectObjectHandleItem;
	menuItem -e -cb `selectType -q -ikHandle` selectObjectIkHandleItem;
	menuItem -e -cb `selectType -q -ikEndEffector` selectObjectIkEndEffectorItem;
	menuItem -e -cb `selectType -q -joint` selectObjectJointItem;
	menuItem -e -cb `selectType -q -light` selectObjectLightItem;
	menuItem -e -cb `selectType -q -camera` selectObjectCameraItem;
	menuItem -e -cb `selectType -q -lattice` selectObjectLatticeItem; 
	menuItem -e -cb `selectType -q -cluster` selectObjectClusterItem;
	menuItem -e -cb `selectType -q -sculpt` selectObjectSculptItem;
	menuItem -e -cb `selectType -q -nurbsSurface` selectObjectNurbsSurfaceItem;
	menuItem -e -cb `selectType -q -subdiv` selectObjectSubdivItem;
	menuItem -e -cb `selectType -q -polymesh` selectObjectPolySurfaceItem;
//	menuItem -e -cb `selectType -q -curve` selectObjectCurveItem;
	menuItem -e -cb `selectType -q -nurbsCurve` selectObjectNurbsCurveItem;
	menuItem -e -cb `selectType -q -cos` selectObjectCurvesOnSurfaceItem;
	menuItem -e -cb `selectType -q -plane` selectObjectPlaneItem;
	menuItem -e -cb `selectType -q -locator` selectObjectLocatorItem;
	menuItem -e -cb `selectType -q -dimension` selectObjectDimensionItem;
	if( `licenseCheck -m edit -type complete` == 1 )
	{
		menuItem -e -cb `selectType -q -particleShape` selectObjectParticleItem;
		menuItem -e -cb `selectType -q -emitter` selectObjectEmitterItem;
		menuItem -e -cb `selectType -q -field` selectObjectFieldItem;
	//	menuItem -e -cb `selectType -q -softBody` selectObjectSoftBodyItem;
		menuItem -e -cb `selectType -q -rigidBody` selectObjectRigidBodyItem;
		menuItem -e -cb `selectType -q -rigidConstraint` selectObjectRigidConstraintItem;
	}
//	menuItem -e -cb `selectType -q -slugObject` selectObjectSlugItem;
	menuItem -e -cb `selectType -q -texture` selectObjectTextureItem;
	menuItem -e -cb `selectType -q -sets` selectObjectSetItem;
}

global proc selObjectMasksAllOn (int $state) {
	selectType -allObjects $state;
	menuItem -e -cb $state selectObjectRootHandleItem;
	menuItem -e -cb $state selectObjectHandleItem;
	menuItem -e -cb $state selectObjectIkHandleItem;
	menuItem -e -cb $state selectObjectIkEndEffectorItem;
	menuItem -e -cb $state selectObjectJointItem;
	menuItem -e -cb $state selectObjectLightItem;
	menuItem -e -cb $state selectObjectCameraItem;
	menuItem -e -cb $state selectObjectLatticeItem; 
	menuItem -e -cb $state selectObjectClusterItem;
	menuItem -e -cb $state selectObjectSculptItem;
	menuItem -e -cb $state selectObjectNurbsSurfaceItem;
	menuItem -e -cb $state selectObjectSubdivItem;
	menuItem -e -cb $state selectObjectPolySurfaceItem;
//	menuItem -e -cb $state selectObjectCurveItem;
	menuItem -e -cb $state selectObjectNurbsCurveItem;
	menuItem -e -cb $state selectObjectCurvesOnSurfaceItem;
	menuItem -e -cb $state selectObjectPlaneItem;
	menuItem -e -cb $state selectObjectLocatorItem;
	menuItem -e -cb $state selectObjectDimensionItem;
	if( `licenseCheck -m edit -type complete` == 1 )
	{
		menuItem -e -cb $state selectObjectParticleItem;
		menuItem -e -cb $state selectObjectEmitterItem;
		menuItem -e -cb $state selectObjectFieldItem;
	//	menuItem -e -cb $state selectObjectSoftBodyItem;
		menuItem -e -cb $state selectObjectRigidBodyItem;
		menuItem -e -cb $state selectObjectRigidConstraintItem;
	}
//	menuItem -e -cb $state selectObjectSlugItem;
	menuItem -e -cb $state selectObjectTextureItem;
	menuItem -e -cb $state selectObjectSetItem;
}

global proc selObjectMasksToggleAll () {
	toggleFlag -rootHandle selectObjectRootHandleItem;
	toggleFlag -handle selectObjectHandleItem;
	toggleFlag -ikHandle selectObjectIkHandleItem;
	toggleFlag -ikEndEffector selectObjectIkEndEffectorItem;
	toggleFlag -joint selectObjectJointItem;
	toggleFlag -light selectObjectLightItem;
	toggleFlag -camera selectObjectCameraItem;
	toggleFlag -lattice selectObjectLatticeItem;
	toggleFlag -cluster selectObjectClusterItem;
	toggleFlag -sculpt selectObjectSculptItem;
	toggleFlag -nurbsSurface selectObjectNurbsSurfaceItem;
	toggleFlag -subdiv selectObjectSubdivItem;
	toggleFlag -polymesh selectObjectPolySurfaceItem;
//	toggleFlag -curve selectObjectCurveItem;
	toggleFlag -nurbsCurve selectObjectNurbsCurveItem;
	toggleFlag -cos selectObjectCurvesOnSurfaceItem;
	toggleFlag -plane selectObjectPlaneItem;
	toggleFlag -locator selectObjectLocatorItem;
	toggleFlag -dimension selectObjectDimensionItem;
	if( `licenseCheck -m edit -type complete` == 1 )
	{
		toggleFlag -particleShape selectObjectParticleItem;
		toggleFlag -emitter selectObjectEmitterItem;
		toggleFlag -field selectObjectFieldItem;
	//	toggleFlag -softBody selectObjectSoftBodyItem;
		toggleFlag -rigidBody selectObjectRigidBodyItem;
		toggleFlag -rigidConstraint selectObjectRigidConstraintItem;
	}
//	toggleFlag -slugObject selectObjectSlugItem;
	toggleFlag -texture selectObjectTextureItem;
	toggleFlag -sets selectObjectSetItem;
}

proc selComponentMaskUpdate () {
	menuItem -e -cb `selectType -q -cv` selectCompCVsItem;
	menuItem -e -cb `selectType -q -hull` selectCompHullsItem;
	menuItem -e -cb `selectType -q -editPoint` selectCompEditPointsItem;
	menuItem -e -cb `selectType -q -vertex` selectCompVerticesItem;
	menuItem -e -cb `selectType -q -edge` selectCompEdgesItem;
	menuItem -e -cb `selectType -q -facet` selectCompFacetsItem;
	menuItem -e -cb `selectType -q -polymeshUV` selectCompMeshUVsItem;
	menuItem -e -cb `selectType -q -latticePoint` selectCompLatticePointsItem;
	menuItem -e -cb `selectType -q -subdivMeshPoint`
		selectCompSubdivMeshPointItem;
	menuItem -e -cb `selectType -q -subdivMeshEdge`
		selectCompSubdivMeshEdgeItem;
	menuItem -e -cb `selectType -q -subdivMeshFace`
		selectCompSubdivMeshFaceItem;
	if( `licenseCheck -m edit -type complete` == 1 )
	{
		menuItem -e -cb `selectType -q -particle` selectCompParticlesItem;
	}
//	menuItem -e -cb `selectType -q -slugVertex` selectCompSlugVerticesItem;
	menuItem -e -cb `selectType -q -jointPivot` selectCompJointPivotsItem;
	menuItem -e -cb `selectType -q -curveParameterPoint` selectCompCurveParmPointsItem;
	menuItem -e -cb `selectType -q -surfaceParameterPoint` selectCompSurfaceParmPointsItem;
	menuItem -e -cb `selectType -q -isoparm` selectCompIsoparmsItem;
	menuItem -e -cb `selectType -q -surfaceEdge` selectCompSurfaceEdgesItem;
	menuItem -e -cb `selectType -q -surfaceFace` selectCompSurfaceFacesItem;
	menuItem -e -cb `selectType -q -scalePivot` selectCompScalePivotsItem;
	menuItem -e -cb `selectType -q -rotatePivot` selectCompRotatePivotsItem;
	menuItem -e -cb `selectType -q -selectHandle` selectCompSelectHandleItem;
	menuItem -e -cb `selectType -q -localRotationAxis` selectCompRotateAxisItem;
	menuItem -e -cb `selectType -q -spotlightComponent` selectCompSpotlightComponentItem;
	menuItem -e -cb `selectType -q -imagePlane` selectCompImagePlaneComponentItem;
}

global proc selComponentMasksAllOn (int $state) {
	selectType -allComponents $state;

	menuItem -e -cb $state selectCompCVsItem;
	menuItem -e -cb $state selectCompHullsItem;
	menuItem -e -cb $state selectCompEditPointsItem;
	menuItem -e -cb $state selectCompVerticesItem;
	menuItem -e -cb $state selectCompEdgesItem;
	menuItem -e -cb $state selectCompFacetsItem;
	menuItem -e -cb $state selectCompMeshUVsItem;
	menuItem -e -cb $state selectCompLatticePointsItem;
	menuItem -e -cb $state selectCompSubdivMeshPointItem;
	menuItem -e -cb $state selectCompSubdivMeshEdgeItem;
	menuItem -e -cb $state selectCompSubdivMeshFaceItem;
	if( `licenseCheck -m edit -type complete` == 1 )
		menuItem -e -cb $state selectCompParticlesItem;
//	menuItem -e -cb $state selectCompSlugVerticesItem;
	menuItem -e -cb $state selectCompJointPivotsItem;
	menuItem -e -cb $state selectCompCurveParmPointsItem;
	menuItem -e -cb $state selectCompSurfaceParmPointsItem;
	menuItem -e -cb $state selectCompIsoparmsItem;
	menuItem -e -cb $state selectCompSurfaceEdgesItem;
	menuItem -e -cb $state selectCompSurfaceFacesItem;
	menuItem -e -cb $state selectCompScalePivotsItem;
	menuItem -e -cb $state selectCompRotatePivotsItem;
	menuItem -e -cb $state selectCompSelectHandleItem;
	menuItem -e -cb $state selectCompRotateAxisItem;
	menuItem -e -cb $state selectCompSpotlightComponentItem;
	menuItem -e -cb $state selectCompImagePlaneComponentItem;
}

global proc selComponentMasksToggleAll () {
	toggleFlag -cv selectCompCVsItem;
	toggleFlag -hull selectCompHullsItem;
	toggleFlag -editPoint selectCompEditPointsItem;
	toggleFlag -vertex selectCompVerticesItem;
	toggleFlag -edge selectCompEdgesItem;
	toggleFlag -facet selectCompFacetsItem;
	toggleFlag -polymeshUV selectCompMeshUVsItem;
	toggleFlag -latticePoint selectCompLatticePointsItem;
	toggleFlag -subdivMeshPoint selectCompSubdivMeshPointItem;
	toggleFlag -subdivMeshEdge selectCompSubdivMeshEdgeItem;
	toggleFlag -subdivMeshFace selectCompSubdivMeshFaceItem;
	if( `licenseCheck -m edit -type complete` == 1 )
		toggleFlag -particle selectCompParticlesItem;
//	toggleFlag -slug selectCompSlugVerticesItem;
	toggleFlag -jointPivot selectCompJointPivotsItem;
	toggleFlag -curveParameterPoint selectCompCurveParmPointsItem;
	toggleFlag -surfaceParameterPoint selectCompSurfaceParmPointsItem;
	toggleFlag -isoparm selectCompIsoparmsItem;
	toggleFlag -surfaceEdge selectCompSurfaceEdgesItem;
	toggleFlag -surfaceFace selectCompSurfaceFacesItem;
	toggleFlag -scalePivot selectCompScalePivotsItem;
	toggleFlag -rotatePivot selectCompRotatePivotsItem;
	toggleFlag -selectHandle selectCompSelectHandleItem;
	toggleFlag -localRotationAxis selectCompRotateAxisItem;
	toggleFlag -spotlightComponent selectCompSpotlightComponentItem;
	toggleFlag -imagePlane selectCompImagePlaneComponentItem;
}

global proc compMaskSave() {}

global proc updateSelectMasks () {
	selObjectMaskUpdate;
	selComponentMaskUpdate;
}

global proc updateMenuMappings( )
//
// Checks to see what the selectPref -xformNoSelect flag
// has been set/changed to, and re-attaches popup menus
// to the model views based on this setting.
//
// As the new transformation behaviour requires use of
// all three mouse buttons, no popup menu can be posted
// without qualifiers being used.
//
{
	if( `selectPref -q -xformNoSelect` )
	{
		// No select mode is on.
		//
		string $modelPanels[] = `getPanel -type modelPanel`;

		for( $item in $modelPanels )
		//
		// Remap the qualifiers for the popup menus
		{
			string $mainPopMenuName = ( $item + "MainPop" );
			if( `popupMenu -exists $mainPopMenuName` ) {
				popupMenu -e -b 1 -ctl 1 ( $item + "MainPop" );
			}
		}

		//	Handle all scripted panels 
		//
		string $panels[] = `getPanel -type scriptedPanel`;

		for( $item in $panels ) 
		{
			string $scriptedType = `scriptedPanel -q -type $item`;

			switch( $scriptedType ) {
				case "graphEditor":
					string $graphEd = ( $item + "GraphEd" );
					string $graphEdMenu = ( $graphEd + "graphEditorMenu" );
					if( `popupMenu -exists $graphEdMenu` ) {
						popupMenu -e -b 1 -ctl 1 $graphEdMenu;
					}
					break;
				case "hyperGraphPanel":
					//	Does nothing
					break;
				case "dopeSheetPanel":
					//	Does nothing
					break;
				default:
					//	Does nothing
					break;
			}
		}

		//	Change the hotkeys, to put in an explicit selection
		//	hotkey, and switch around the panepopping hotkey
		//
		hotkey -k "Space" 
			-c "storeLastAction( \"setToolTo \" + `currentCtx` ); setToolTo $gSelect;"
			-r "invokeLastAction";
		hotkey -k "x" -c "panePop";
	}
	else
	{
		string $modelPanels[] = `getPanel -type modelPanel`;

		for( $item in $modelPanels )
		//
		// Remap the qualifiers for the popup menus on the
		// model panel types.
		{
			string $mainPopMenuName = ( $item + "MainPop" );
			if( `popupMenu -exists $mainPopMenuName` ) {
				popupMenu -e -b 3 -ctl 0 ( $item + "MainPop" );
			}
		}

		//	Handle all scripted panels 
		//
		string $panels[] = `getPanel -type scriptedPanel`;

		for( $item in $panels ) 
		{
			string $scriptedType = `scriptedPanel -q -type $item`;

			switch( $scriptedType ) {
				case "graphEditor":
					string $graphEd = ( $item + "GraphEd" );
					string $graphEdMenu = ( $graphEd + "graphEditorMenu" );
					if( `popupMenu -exists $graphEdMenu` ) {
						popupMenu -e -b 3 -ctl 0 $graphEdMenu;
					}
					break;
				case "hyperGraphPanel":
					//	Does nothing
					break;
				case "dopeSheetPanel":
					//	Does nothing
					break;
				default:
					//	Does nothing
					break;
			}
		}
		//	Change the hotkeys, to put in an explicit selecction
		//	hotkey, and switch around the panepopping hotkey
		//
		hotkey -k "Space" -c "panePop";
		hotkey -k "x" -c "";
	}
}

global proc updateSelectMenu () {
//	menuItem -edit -rb `selectMode -q -object`	selectObjectsModeItem;
//	menuItem -edit -rb `selectMode -q -component` selectComponentsModeItem;
}

global proc SelectMenu ( string $parent ) {
menu -p $parent -tearOff true -l "Select" -pmc "updateSelectMenu" selectMenu;
	radioMenuItemCollection selectMenuCluster;
	menuItem -rb 1 -l "Objects"
			 -c "selectMode -object" selectObjectsModeItem;
	menuItem -rb 0 -l "Components"
			 -c "selectMode -component" selectComponentsModeItem;
	menuItem -rb 0 -l "Root"
			 -c "selectMode -root" selectRootModeItem;
	menuItem -rb 0 -l "Leaf"
			 -c "selectMode -leaf" selectLeafModeItem;
	menuItem -rb 0 -l "Template"
			 -c "selectMode -template" selectTemplateModeItem;

	menuItem -divider true;

	menuItem -l "Object Mask" -subMenu true -tearOff true selectObjectMaskItem;
		menuItem -l "All On"	
				 -c "selObjectMasksAllOn true" selectObjectAllOnItem;
		menuItem -l "All Off"
				 -c "selObjectMasksAllOn false" selectObjectAllOffItem;
		menuItem -l "Toggle All"
				 -c "selObjectMasksToggleAll" selectObjectToggleAllItem;
		menuItem -l "Save to Shelf"
				 -c "saveObjectMaskToShelf" selectObjectSaveToShelfItem;

		menuItem -divider true "selObjMaskSeparator-1";

		menuItem -cb 0 -l "Root" -c "selectType -rootHandle #1"
				 selectObjectRootHandleItem;
		menuItem -cb 0 -l "Handle" -c "selectType -handle #1"
				 selectObjectHandleItem;
		menuItem -cb 0 -l "IK Handle" -c "selectType -ikHandle #1"
				 selectObjectIkHandleItem;
		menuItem -cb 0 -l "End Effector" -c "selectType -ikEndEffector #1"
				 selectObjectIkEndEffectorItem;
		menuItem -cb 0 -l "Joint" -c "selectType -joint #1"
				 selectObjectJointItem;
		menuItem -cb 0 -l "Light" -c "selectType -light #1"
				 selectObjectLightItem;
		menuItem -cb 0 -l "Camera" -c "selectType -camera #1"
				 selectObjectCameraItem;
		menuItem -cb 0 -l "Lattice" -c "selectType -lattice #1"
				 selectObjectLatticeItem;
		menuItem -cb 0 -l "Cluster" -c "selectType -cluster #1"
				 selectObjectClusterItem;
		menuItem -cb 0 -l "Sculpt" -c "selectType -sculpt #1"
				 selectObjectSculptItem;
		menuItem -cb 0 -l "NURBS Surface" -c "selectType -nurbsSurface #1"
				 selectObjectNurbsSurfaceItem;
		menuItem -cb 0 -l "Subdivision Surface" -c "selectType -subdiv #1"
				 selectObjectSubdivItem;
		menuItem -cb 0 -l "Poly Surface" -c "selectType -polymesh #1"
				 selectObjectPolySurfaceItem;
//		menuItem -cb 0 -l "Curve" -c "selectType -curve #1"
//				 selectObjectCurveItem;
		menuItem -cb 0 -l "NURBS Curve" -c "selectType -nurbsCurve #1"
				 selectObjectNurbsCurveItem;
		menuItem -cb 0 -l "Curve On Surface" -c "selectType -cos #1"
				 selectObjectCurvesOnSurfaceItem;
		menuItem -cb 0 -l "Plane" -c "selectType -plane #1"
				 selectObjectPlaneItem;
		menuItem -cb 0 -l "Locator" -c "selectType -locator #1"
				 selectObjectLocatorItem;
		menuItem -cb 0 -l "Dimension" -c "selectType -dimension #1"
				 selectObjectDimensionItem;

		if( `licenseCheck -m edit -type complete` == 1 )
		{
			menuItem -cb 0 -l "Particle" -c "selectType -particleShape #1"
				 selectObjectParticleItem;
			menuItem -cb 0 -l "Emitter" -c "selectType -emitter #1"
				 selectObjectEmitterItem;
			menuItem -cb 0 -l "Field" -c "selectType -field #1"
				 selectObjectFieldItem;
	//		menuItem -cb 0 -l "Soft Body" -c "selectType -softBody #1"
//					selectObjectSoftBodyItem;
			menuItem -cb 0 -l "Rigid Body" -c "selectType -rigidBody #1"
				 selectObjectRigidBodyItem;
			menuItem -cb 0 -l "Rigid Constraint" -c "selectType -rigidConstraint #1"
				 selectObjectRigidConstraintItem;
	//		menuItem -cb 0 -l "Slug Object" -c "selectType -slugObject #1"
		//		selectObjectSlugItem;
		}

		menuItem -cb 0 -l "Texture" -c "selectType -texture #1"
				 selectObjectTextureItem;
		menuItem -cb 0 -l "Set" -c "selectType -sets #1"
				 selectObjectSetItem;

		setParent -m ..;

	menuItem -l "Component Mask" -subMenu true -tearOff true selectComponentMaskItem;
		menuItem -l "All On"
			-c "selComponentMasksAllOn true" selectCompAllOnItem;
		menuItem -l "All Off"
			-c "selComponentMasksAllOn false" selectCompAllOffItem;
		menuItem -l "Toggle All"
			-c "selComponentMasksToggleAll" selectCompToggleAllItem;
	 	menuItem -l "Save to Shelf"
			-c "saveComponentMaskToShelf" selectCompSaveToShelfItem;

		menuItem -divider true "selCompMaskSeparator-1";

		menuItem -cb 0 -l "CVs" -c "selectType -cv #1"
				 selectCompCVsItem;
		menuItem -cb 0 -l "Hulls" -c "selectType -hull #1"
				 selectCompHullsItem;
		menuItem -cb 0 -l "Edit Points" -c "selectType -editPoint #1"
				selectCompEditPointsItem;

		menuItem -divider true "selCompMaskSeparator-2";

		menuItem -cb 0 -l "Vertices" -c "selectType -vertex #1"
				selectCompVerticesItem;
		menuItem -cb 0 -l "Edges" -c "selectType -edge #1"
				 selectCompEdgesItem;
		menuItem -cb 0 -l "Faces" -c "selectType -facet #1"
				 selectCompFacetsItem;
		menuItem -cb 0 -l "MeshUVs" -c "selectType -polymeshUV #1"
				 selectCompMeshUVsItem;

		menuItem -divider true "selCompMaskSeparator-3";

		menuItem -cb 0 -l "Lattice Points" -c "selectType -latticePoint #1"
				selectCompLatticePointsItem;

		menuItem -cb 0 -l "Subdiv Mesh Points" -c "selectType -subdivMeshPoint #1"
				selectCompSubdivMeshPointItem;
		menuItem -cb 0 -l "Subdiv Mesh Edges" -c "selectType -subdivMeshEdge #1"
				selectCompSubdivMeshEdgeItem;
		menuItem -cb 0 -l "Subdiv Mesh Faces" -c "selectType -subdivMeshFace #1"
				selectCompSubdivMeshFaceItem;

		if( `licenseCheck -m edit -type complete` == 1 )
		{
			menuItem -cb 0 -l "Particles" -c "selectType -particle #1"
				selectCompParticlesItem;
		}
//		menuItem -cb 0 -l "Slug Vertices" -c "selectType -slugVertex #1"
//				selectCompSlugVerticesItem;
		menuItem -cb 0 -l "Joint Pivots" -c "selectType -jointPivot #1"
				 selectCompJointPivotsItem;

		menuItem -divider true "selCompMaskSeparator-4";

		menuItem -cb 0 -l "Curve Parm Points" -c "selectType -curveParameterPoint #1"
				 selectCompCurveParmPointsItem;

		menuItem -cb 0 -l "Surface Parm Points"
				 -c "selectType -surfaceParameterPoint #1"
				 selectCompSurfaceParmPointsItem;
		menuItem -cb 0 -l "Isoparms" -c "selectType -isoparm #1"
				 selectCompIsoparmsItem;
		menuItem -cb 0 -l "Surface Patches" -c "selectType -surfaceFace #1"
				 selectCompSurfaceFacesItem;
		menuItem -cb 0 -l "Trim Edges" -c "selectType -surfaceEdge #1"
				 selectCompSurfaceEdgesItem;
		menuItem -cb 0 -l "Scale Pivots" -c "selectType -scalePivot #1"
				 selectCompScalePivotsItem;
		menuItem -cb 0 -l "Rotate Pivots" -c "selectType -rotatePivot #1"
				 selectCompRotatePivotsItem;
		menuItem -cb 0 -l "Select Handles" -c "selectType -selectHandle #1"
				 selectCompSelectHandleItem;
		menuItem -cb 0 -l "Local Axis" -c "selectType -localRotationAxis #1"
				 selectCompRotateAxisItem;

		menuItem -cb 0 -l "Spotlight Parts"
				 -c "selectType -spotlightComponent #1"
				 selectCompSpotlightComponentItem;

		menuItem -cb 0 -l "Image Planes"
				 -c "selectType -imagePlane #1"
				 selectCompImagePlaneComponentItem;
		setParent -m ..;

	menuItem -divider true;

	menuItem -l "Selection Weighting" -subMenu true selPriorityHierItem;
		menuItem -l "Animation" -c "selPriority \"animation\"" selPriAnimItem;
		menuItem -l "NURBS Modeling" -c "selPriority \"nurbsModeling\"" selPriNurbItem;
		menuItem -l "Poly Modeling" -c "selPriority \"polyModeling\"" selPriPolyItem;
		menuItem -l "Rendering" -c "selPriority \"rendering\"" selPriRenderItem;
		if( `licenseCheck -m edit -type complete` == 1 )
			menuItem -l "Dynamics" -c "selPriority \"dynamics\"" selPriDynItem;
//		menuItem -divider true;
//		menuItem -l "Custom..." -c "selPriorityUI" selPriorityItem;
	setParent -m ..;

	menuItem -divider true;

	menuItem -l "Select All" -ke "a" -ctl true 
			 -c "select -all" selectAllItem;

	menuItem -l "Select All" -subMenu true selectAllHierItem;
		menuItem -l "Lights" -c "select -r `ls -lights`" selLightsItem;
		menuItem -l "Cameras" -c "select -r `ls -ap -cameras`" selCamerasItem;
		menuItem -l "Geometry" -c "select -r `ls -geometry`" selGeomItem;
		menuItem -l "DAG Items" -c "select -r `ls -dag`" selDAGItem;

		menuItem -divider true;

		menuItem -l "Joints" -c "select -r `ls -type joint`" selJointsItem;
		menuItem -l "IK Handles" -c "select -r `ls -type ikHandle`" selIKHanItem;

		menuItem -divider true;

		menuItem -l "NURBS Geometry" 
			-c "select -r `ls -type nurbsCurve -type nurbsSurface`" 
			selNurbsGeomItem;
		menuItem -l "Poly Geometry" -c "select -r `ls -type mesh`" selPolysItem;

		menuItem -divider true;

		if( `licenseCheck -m edit -type complete` == 1 )
		{
			menuItem -l "Particles" 
				-c "select -r `ls -type particle`" 
				selParticlesItem;
		}
	setParent -m ..;

	updateSelectMasks;

	scriptJob -p selectMenu -e "SelectPreferenceChanged" updateMenuMappings;
	scriptJob -p selectMenu -e "SelectModeChanged" updateSelectionUI;
	scriptJob -p selectMenu -e "SelectTypeChanged" updateSelectMasks;
}
