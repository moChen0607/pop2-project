// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date: Oct 9, 1996
//
//  Description:
//      These procs create the controls for dpBirailSrf tool property sheet.
//      See also dpBirailSrfValues.mel for procs that set the state of the
//      property sheet.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//


proc int dpBirailNodeProperties()
{
    string $curctx = `currentCtx`;
	string $nodes[] = `dpBirailCtx -q -anq $curctx`;
	int $total = size( $nodes );

	if( $total > 0 ) {
		columnLayout -adj true dpBirailHistoryProperties;
			$parent =  `setParent -query`;
			separator -style "none";

			string $widget = "dpBirailNodeWidget_";
			int $cntr;
			for( $cntr=0; $cntr < $total; $cntr ++ ) {
				$widget = $widget + "L";
				dpBirailHistoryReset( $parent, $nodes[$cntr], $widget );
			}
		setParent ..;
	}
	return $total;
}

global proc dpBirailProperties()
//
//  Description:
//      This procedure builds the property sheet and assigns callbacks to
//      its controls.  The state of the controls are set in dpBirailValues().
//
//
{
	int $hasNodes = 0;

	string $parent = `toolPropertyWindow -q -location`;
	string $curctx = `currentCtx`;
	string $node = `dpBirailCtx -q -tnq $curctx`;
	string $ext_defaultToolID = "dpBirailDefaultProperties";

	setUITemplate -pushTemplate DefaultTemplate;

	setParent $parent;
	columnLayout -adj true dpBirail;
		tabLayout -childResizable true dpBirailTabs_L;

			$hasNodes = dpBirailNodeProperties();

			columnLayout -adj true $ext_defaultToolID;
				separator -style "none";

				$parent = `setParent -query`;

				birailHistoryAttributes( $parent, $node, "twoProfiles" ) ;
				birailHistoryLink( $parent, $node, "twoProfiles" ) ;

				birailCommonProperties( $parent, "twoProfiles", "dpBirailCtx" ) ;
				commonModellingProperties( $parent, "dpBirailCtx" ) ;
				optionalCommonModellingSetCallbacks($parent, "dpBirailCtx", 
						"showOutputStyle", 
						"dontShowKeepOriginals",
						"dontShowCurveRange",
						"dontShowRebuild");	


				separator -style "none";
			setParent ..;

		setParent ..; // tabs layout
	setParent ..; // columnLayout

	// Name the tabs. I hate this style. I want to name the
	// tabs during creation!
	if( $hasNodes > 0 ) {
		tabLayout -e
			-tl $ext_defaultToolID "Tool Defaults"
			-tl "dpBirailHistoryProperties" "Surface History"
			dpBirailTabs_L;
	}
	else {
		tabLayout -e
			-tl $ext_defaultToolID "Tool Defaults"
			dpBirailTabs_L;
	}
	
	setUITemplate -popTemplate;
}

