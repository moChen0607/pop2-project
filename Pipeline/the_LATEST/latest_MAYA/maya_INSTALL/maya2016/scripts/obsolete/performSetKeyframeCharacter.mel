// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Oct 20, 1998
//
//  Description:
//      This script is the option box dialog for setting keyframes on characters.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//

proc setOptionVars (int $forceFactorySettings)
{
	if( $forceFactorySettings || !`optionVar -exists setKeyframePrompt` ) {
		optionVar -intValue setKeyframePrompt 0;
	}
}

global proc setKeyframeCharacterSetup (string $parent, int $forceFactorySettings)
{
	// Retrieve the option settings
	//
	setOptionVars( $forceFactorySettings );

	setParent $parent;

	if( `optionVar -query setKeyframePrompt` == 1 ) {
		radioButtonGrp -e -select 2 setKeyframePrompt;
	} else {
		radioButtonGrp -e -select 1 setKeyframePrompt;
	}
}

global proc setKeyframeCharacterCallback (string $parent, int $doIt)
//
// Description:
//	Set the optionVar's from the control values, and then perform
//	the command
//
{
    setParent $parent;

	if (`radioButtonGrp -query -select setKeyframePrompt` == 2) {
		optionVar -intValue setKeyframePrompt 1;
	} else {
		optionVar -intValue setKeyframePrompt 0;
	}

	if ($doIt)
	{
		performSetKeyframeCharacter false;
	}
}



proc string setKeyframeCharacterWidgets( string $parent )
{
	setParent $parent;
	
	string $tabForm = `columnLayout -adjustableColumn true`;

	radioButtonGrp -numberOfRadioButtons 2
		-label  "Set Keys at"
		-label1 "Current Time" 
		-label2 "Prompt"
		setKeyframePrompt;

	return $tabForm;
}

global proc setKeyframeCharacterOptions ()
{
	string $commandName = "setKeyframeCharacter";

	string $applyTitle = "Set Key";
	
	// Build the option box "methods"
	//
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	//	Get the option box.
	//
	//  The value returned is the name of the layout to be used as
	//	the parent for the option box UI.
	//
	string $layout = getOptionBox();
	setParent $layout;

	setOptionBoxCommandName($commandName);

	setUITemplate -pushTemplate DefaultTemplate;
	waitCursor -state 1;
	tabLayout -scr true -tv false;	// To get the scroll bars

	string $parent = `columnLayout -adjustableColumn 1`;

	setKeyframeCharacterWidgets $parent;

	waitCursor -state 0;
	setUITemplate -popTemplate;

	//	'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-label $applyTitle
		-command ($callback + " " + $parent + " " + 1)
		$applyBtn;
	dimWhen -false "SomethingSelected" $applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;

	//	Set the option box title.
	//
	setOptionBoxTitle("Set Character Key Options");

	//	Set the current values of the option box.
	//
	eval (($setup + " " + $parent + " " + 0));	
	
	//	Show the option box.
	//
	showOptionBox();
}


//
//  Procedure Name:
//      assembleCmd
//
//  Description:
//		Construct the command that will apply the option box values.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
proc string assembleCmd()
{
	string $cmd;
	int $breakdown = 0;

	setOptionVars(false);

	// doSetKeyframeCharacterArgList takes a string array 
	//
	string $cmd = "doSetKeyframeCharacterArgList 1 { " +
				"\"" + `optionVar -query setKeyframePrompt` + "\"" +
				",\"" + $breakdown + "\"" +
			" };";

	return $cmd;
}

//
//  Procedure Name:
//      performSetKeyframeCharacter
//
//  Description:
//		Perform the 'setKeyframe' command on the current characters 
//      using the corresponding option values.  This procedure will 
//      also show the option box window if necessary as well as 
//      construct the command string that will invoke the 'setKeyframe' 
//      command with the current option box values.
//
//  Input Arguments:
//      0 - Execute the command.
//      1 - Show the option box dialog.
//      2 - Return the command.
//
//  Return Value:
//      None.
//
global proc string
performSetKeyframeCharacter (int $action)
{
	string $cmd = "";

	switch ($action) {

		//	Execute the command.
		//
		case 0:
			//	Retrieve the option settings
			//
			setOptionVars(false);

			//	Get the command.
			//
			$cmd = `assembleCmd`;

			//	Execute the command with the option settings.
			//
			eval($cmd);

			break;

		//	Show the option box.
		//
		case 1:
			setKeyframeCharacterOptions;
			break;
	}
	return $cmd;
}
