// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:	Jan. 7, 1997
//
//  Description:
//

global proc createDrawPropCallback (string $parent, string $whichCallback)
//
//	Procedure Name:
//		createDrawPropCallback
//
//	Description:
//
//	Input Arguments:
//		parent name, and
//		current callback name.
//
//	Return Value:
//		None.
//
{
	setParent	$parent;
	string		$whichCtx = `currentCtx`;
	string		$axis;

	switch ($whichCallback) {

		case "axisOption":
			$axis = `optionMenu -q -v axisOptionMenu`;
			createDrawCtx -e -a $axis $whichCtx;
			break;

		default:
			break;

	}

	return;
}


global proc createDrawSetCallbacks (string $parent)
//
//	Procedure Name:
//		createDrawSetCallbacks
//
//	Description:
//
//	Input Arguments:
//		parent name.
//
//	Return Value:
//		None.
//
{
	setParent	$parent;
	string		$whichCtx = `currentCtx`;

	optionMenu -e
		-cc `CBG "createDrawProp" $parent "axisOption"`
		axisOptionMenu;

	return;
}


global proc createDrawProperties ()
//
//	Procedure Name:
//		createDrawProperties
//
//	Description:
//
//	Input Arguments:
//		None.
//
//	Return Value:
//		None.
//
{
	string	$parent = `toolPropertyWindow -q -location`;
	string	$curctx = `currentCtx`;

	setUITemplate -pushTemplate DefaultTemplate;

    setParent	$parent;

	columnLayout createDraw;

	tabLayout -childResizable true createDraw_Tabs;
		columnLayout createDraw_Tab;
			frameLayout -collapsable true -collapse false
				-l "Create Draw Options" createDrawFrame;
				columnLayout createDrawOptions;
					$parent = `setParent -query`;

					separator -style "none";

					optionMenu -l "Mirror:" axisOptionMenu;
						menuItem -l "x" axisOption1;
						menuItem -l "y" axisOption2;
						menuItem -l "z" axisOption3;
					setParent ..; // axisOptionMenu

				setParent ..; // createDrawOptions
			setParent ..; // createDrawFrame
		setParent ..; // createDraw_Tab
	setParent ..; // createDraw_Tabs

	setParent ..; // createDraw

	// Name the tabs; -tl does not allow tab labelling upon creation
	tabLayout -e -tl createDraw_Tab "Tool Defaults" createDraw_Tabs;

	setUITemplate -popTemplate;

	createDrawSetCallbacks $parent;

	return;
}
