// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  17 June 1997
//
//
//  Description:
//      This implements the SelectionObject Mask Marking Menu.
//


global proc doSelectObjectMM()
{

	//	Handles
	//
	int $maskResult = ( `selectType -q -handle` +
						`selectType -q -ikHandle` );

	menuItem -rp "N" -label (uiRes("m_buildSelectObjectMM.kHandles"))  -subMenu true;
		menuItem -rp "N" -label (uiRes("m_buildSelectObjectMM.kAllHandles"))  
			-cb $maskResult
			-c "setObjectPickMask \"Marker\" #1";
		menuItem -rp "E" -label (uiRes("m_buildSelectObjectMM.kSelectionHandles"))  
			-cb `selectType -q -handle` 
			-c "selectType -handle #1";
		menuItem -rp "W" -label (uiRes("m_buildSelectObjectMM.kIKHandles"))  
			-cb `selectType -q -ikHandle` 
			-c "selectType -ikHandle #1";
	setParent -m ..;


	// 	Joints
	//
	menuItem -rp "NE" -label (uiRes("m_buildSelectObjectMM.kJoints")) 
			-cb `selectType -q -joint` 
			-c "selectType -joint #1";


	// 	Curves
	//
	menuItem -rp "E" -label (uiRes("m_buildSelectObjectMM.kCurves"))  -subMenu true;
		menuItem -rp "E" -label (uiRes("m_buildSelectObjectMM.kAllCurves"))  
			-cb (`selectType -q -nurbsCurve` +
				`selectType -q -cos` )
			-c "setObjectPickMask \"Curve\" #1";
		menuItem -rp "N" -label (uiRes("m_buildSelectObjectMM.kNURBSCurves"))  
			-cb `selectType -q -nurbsCurve` 
			-c "selectType -nurbsCurve #1";
		menuItem -rp "S" -label (uiRes("m_buildSelectObjectMM.kCurvesOnSurface"))  
			-cb `selectType -q -cos` 
			-c "selectType -cos #1";
	setParent -m ..;


	// 	Surfaces
	//
	menuItem -rp "SE"
    -label (uiRes("m_buildSelectObjectMM.kSurfaces")) 
    -subMenu true;
		menuItem -rp "SE" -label (uiRes("m_buildSelectObjectMM.kAllSurfaces"))  
			-cb (`selectType -q -nurbsSurface` +
				`selectType -q -polymesh` +
				`selectType -q -plane` )
			-c "setObjectPickMask \"Surface\" #1";
		menuItem -rp "SW" -label (uiRes("m_buildSelectObjectMM.kNURBSSurfaces"))  
			-cb `selectType -q -nurbsSurface` 
			-c "selectType -nurbsSurface #1";
		menuItem -rp "NW" -label (uiRes("m_buildSelectObjectMM.kPolySurfaces"))  
			-cb `selectType -q -polymesh` 
			-c "selectType -polymesh #1";
		menuItem -rp "NE" -label (uiRes("m_buildSelectObjectMM.kPlanes"))  
			-cb `selectType -q -plane` 
			-c "selectType -plane #1";
	setParent -m ..;


	// 	Deformations
	//
	menuItem -rp "S" -label (uiRes("m_buildSelectObjectMM.kDeformations"))  -subMenu true;
		menuItem -rp "S" -label (uiRes("m_buildSelectObjectMM.kAllDeformations"))  
			-cb (`selectType -q -lattice` +
				`selectType -q -cluster` +
				`selectType -q -sculpt` +
				`selectType -q -nonlinear` )			
			-c "setObjectPickMask \"Deformer\" #1";
		menuItem -rp "W" -label (uiRes("m_buildSelectObjectMM.kLattices"))  
			-cb `selectType -q -lattice` 
			-c "selectType -lattice #1";
		menuItem -rp "N" -label (uiRes("m_buildSelectObjectMM.kClusters"))  
			-cb `selectType -q -cluster` 
			-c "selectType -cluster #1";
		menuItem -rp "E" -label (uiRes("m_buildSelectObjectMM.kNonlinears")) 
			-cb `selectType -q -nonlinear` 
			-c "selectType -nonlinear #1";
		menuItem -rp "SW" -label (uiRes("m_buildSelectObjectMM.kSculptObjects"))  
			-cb `selectType -q -sculpt` 
			-c "selectType -sculpt #1";
	setParent -m ..;


	// 	Dynamics
	//
	int $allDyn;
	if( fluidEditLicenseFound() ) {
		$allDyn = ( `selectType -q -particleShape` +
					`selectType -q -emitter` +
					`selectType -q -field` +
					`selectType -q -fluid` +
					`selectType -q -spring` +
					`selectType -q -rigidBody` +
					`selectType -q -rigidConstraint` );
	} else {
		$allDyn = ( `selectType -q -particleShape` +
					`selectType -q -emitter` +
					`selectType -q -field` +
					`selectType -q -spring` +
					`selectType -q -rigidBody` +
					`selectType -q -rigidConstraint` );
	}
			 
	menuItem -rp "SW" -label (uiRes("m_buildSelectObjectMM.kDynamics"))  -subMenu true;
		menuItem -rp "SW" -label (uiRes("m_buildSelectObjectMM.kAllDynamics"))  
			-cb $allDyn 
			-c "setObjectPickMask \"Dynamic\" #1";
		menuItem -rp "W" -label (uiRes("m_buildSelectObjectMM.kParticles"))  
			-cb `selectType -q -particleShape` 
			-c "selectType -particleShape #1";
		menuItem -rp "NW" -label (uiRes("m_buildSelectObjectMM.kEmitters"))  
			-cb `selectType -q -emitter` 
			-c "selectType -emitter #1";
		menuItem -rp "N" -label (uiRes("m_buildSelectObjectMM.kFields"))  
			-cb `selectType -q -field` 
			-c "selectType -field #1";
		menuItem -rp "NE" -label (uiRes("m_buildSelectObjectMM.kSprings"))  
			-cb `selectType -q -spring` 
			-c "selectType -spring #1";
		menuItem -rp "E" -label (uiRes("m_buildSelectObjectMM.kRigidBodies")) 
			-cb `selectType -q -rigidBody` 
			-c "selectType -rigidBody #1";
		menuItem -rp "SE" -label (uiRes("m_buildSelectObjectMM.kRigidConstraints"))  
			-cb `selectType -q -rigidConstraint` 
			-c "selectType -rigidConstraint #1";

		int $validFluids = fluidEditLicenseFound();
		int $validHair = $validFluids;	// Same as $validFluids for now
		int $validNCloth = nClothEditLicenseFound();
		// Only post fluids part of MM if have license
		//
		if( $validFluids || $validNCloth ) {
			menuItem -rp "S" -label (uiRes("m_buildSelectObjectMM.kMoreDynamics"))  -subMenu true;
			if( $validNCloth ){
				menuItem -rp "NE" -label (uiRes("m_buildSelectObjectMM.kNCloths"))  
					-cb `selectType -q -nCloth` 
					-c "selectType -nCloth #1";
				menuItem -rp "E" -label (uiRes("m_buildSelectObjectMM.kNRigids"))  
					-cb `selectType -q -nRigid` 
					-c "selectType -nRigid #1";
				menuItem -rp "SE" -label (uiRes("m_buildSelectObjectMM.kDynamicConstraints"))  
					-cb `selectType -q -dynamicConstraint` 
					-c "selectType -dynamicConstraint #1";
			}
			if( $validFluids ){
				menuItem -rp "S" -label (uiRes("m_buildSelectObjectMM.kFluids"))  
					-cb `selectType -q -fluid` 
					-c "selectType -fluid #1";
			}
			if( $validHair ){
				menuItem -rp "SW" -label (uiRes("m_buildSelectObjectMM.kHairSystems"))  
					-cb `selectType -q -hairSystem` 
					-c "selectType -hairSystem #1";
				menuItem -rp "W" -label (uiRes("m_buildSelectObjectMM.kFollicles"))  
					-cb `selectType -q -follicle` 
					-c "selectType -follicle #1";
			}
			setParent -m ..;
		}

	setParent -m ..;


	// 	Rendering
	//
	menuItem -rp "W" -label (uiRes("m_buildSelectObjectMM.kRendering"))  -subMenu true;
		menuItem -rp "W" -label (uiRes("m_buildSelectObjectMM.kAllRendering"))  
			-cb (`selectType -q -light` +
				`selectType -q -camera` +
				`selectType -q -texture` )
			-c "setObjectPickMask \"Rendering\" #1";
		menuItem -rp "N" -label (uiRes("m_buildSelectObjectMM.kLights"))  
			-cb `selectType -q -light` 
			-c "selectType -light #1";
		menuItem -rp "E" -label (uiRes("m_buildSelectObjectMM.kCameras"))  
			-cb `selectType -q -camera` 
			-c "selectType -camera #1";
		menuItem -rp "S" -label (uiRes("m_buildSelectObjectMM.kTextures"))  
			-cb `selectType -q -texture` 
			-c "selectType -texture #1";
	setParent -m ..;


	// 	Misc.
	//
	menuItem -rp "NW" -label (uiRes("m_buildSelectObjectMM.kMisc"))  -subMenu true;
		menuItem -rp "NW" -label (uiRes("m_buildSelectObjectMM.kAllMisc"))  
			-cb (`selectType -q -ikEndEffector` +
				`selectType -q -locator` +
				`selectType -q -dimension` )
			-c "setObjectPickMask \"Other\" #1";
		menuItem -rp "NE" -label (uiRes("m_buildSelectObjectMM.kIKEndEffectors"))  
			-cb `selectType -q -ikEndEffector` 
			-c "selectType -ikEndEffector #1";
		menuItem -rp "SE" -label (uiRes("m_buildSelectObjectMM.kLocators"))  
			-cb `selectType -q -locator` 
			-c "selectType -locator #1";
		menuItem -rp "SW" -label (uiRes("m_buildSelectObjectMM.kDimensions"))  
			-cb `selectType -q -dimension` 
			-c "selectType -dimension #1";
	setParent -m ..;

	//	Overflow
	//

	// prevent multiple copies from getting appended, each
	// time this MM is posted..
	//
	if( !`menuItem -exists buildSelectObjectMM_allOnItem` ) {
		menuItem -label (uiRes("m_buildSelectObjectMM.kAllObjectsOn"))  -c "setObjectPickMask \"All\" 1" 
			buildSelectObjectMM_allOnItem; 
		menuItem -label (uiRes("m_buildSelectObjectMM.kAllObjectsOff"))  -c "setObjectPickMask \"All\" 0";
		menuItem -d true;
		menuItem -label (uiRes("m_buildSelectObjectMM.kSaveToShelf"))  -c "saveObjectMaskToShelf";
		menuItem -d true;
		menuItem -label (uiRes("m_buildSelectObjectMM.kSelectComponents"))  -c "selectMode -component";
		setParent -m ..;
	}
}


global proc buildSelectObjectMM( )
//
// Creates a marking menu that allows the user
// to select Object masks - reuses
// the name tempMM for the name of the menu, to
// ensure that there's only one of these at
// any one time.
{

	if( `popupMenu -exists tempMM` )
	{
		deleteUI tempMM;
	} 

	global string $gSelect;
	setToolTo $gSelect;

	selectMode -object;

    popupMenu -mm 1 -b 1 -aob 1 -p `findPanelPopupParent` -pmc "doSelectObjectMM" tempMM;


}
