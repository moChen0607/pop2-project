// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  18 April 1997
//
//
//
//  Description:
//      This implements the various global proc and variables needed for NURBS
//

	selectType -isoparm 0;
	selectType -curveParameterPoint 0;

	global string $gPropModAnimCurvePrefix = "propModAnimCurve";
	global int $gStartWithAutoComplete = 1;

global proc toggleCreateNurbsPrimitiveAsTool()
{
	int $val = (!`optionVar -q createNurbsPrimitiveAsTool`);
	optionVar -intValue createNurbsPrimitiveAsTool $val;

	if ( `menuItem -ex toggleCreateNurbsPrimitivesAsToolItem` )
		menuItem -e -cb $val toggleCreateNurbsPrimitivesAsToolItem;

	if ( `menuItem -ex toggleNurbsPrimitivesAsToolItemExitOnComplete` )
		menuItem -e -enable $val toggleNurbsPrimitivesAsToolItemExitOnComplete;
}

global proc setCreateNurbsPrimitiveAsTool(int $state)
{
	optionVar -intValue createNurbsPrimitiveAsTool $state;

	if ( `menuItem -ex toggleCreateNurbsPrimitivesAsToolItem` )
		menuItem -e -cb $state toggleCreateNurbsPrimitivesAsToolItem;

	if ( `menuItem -ex toggleNurbsPrimitivesAsToolItemExitOnComplete` )
		menuItem -e -enable $state toggleNurbsPrimitivesAsToolItemExitOnComplete;
}

global proc toggleNurbsPrimitiveAsToolExitOnComplete()
{
	int $val = (!`optionVar -q nurbsPrimitiveAsToolExitOnComplete`);
	optionVar -intValue nurbsPrimitiveAsToolExitOnComplete $val;

	if ( `menuItem -ex toggleNurbsPrimitivesAsToolItemExitOnComplete` )
		menuItem -e -cb $val toggleNurbsPrimitivesAsToolItemExitOnComplete;
}

global proc setNurbsPrimitiveAsToolExitOnComplete(int $state)
{
	optionVar -intValue nurbsPrimitiveAsToolExitOnComplete $state;

	if ( `menuItem -ex toggleNurbsPrimitivesAsToolItemExitOnComplete` )
		menuItem -e -cb $state toggleNurbsPrimitivesAsToolItemExitOnComplete;
}
