// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  13 April 1997
//
//
//  Procedure Name:
//      DynParticlesMenu
//
//  Description:
//		Create the DYNAMICS->nParticles
//
//  Input Arguments:
//      parent to parent the menu to.
//
//  Return Value:
//      None.
//

source spriteWizard.mel;

global proc string styleLabel()
{
	string $styleLabel = (uiRes("m_DynParticlesMenu.kStyle"));
	string $style = `optionVar -query NParticleStyle`;
	$styleLabel = ( $styleLabel + ": " + $style );
	return ( $styleLabel );
}

global proc updateNParticleStyleMenu( string $parent )
{
	if( !`optionVar -exists NParticleStyle` ){
		optionVar -stringValue NParticleStyle "Points";
	}

	string $style = `optionVar -query NParticleStyle`;

	setParent -m $parent;

	if(`menuItem -exists  NParticleStylePointsItem`) {
		menuItem -e -checkBox ($style == "Points") NParticleStylePointsItem;
	}
	if(`menuItem -exists  NParticleStyleBallsItem`) {
		     menuItem -e -checkBox ($style == "Balls") NParticleStyleBallsItem;
	}
	if(`menuItem -exists  NParticleStyleCloudItem`) {
		     menuItem -e -checkBox ($style == "Cloud") NParticleStyleCloudItem;
	}
	if(`menuItem -exists  NParticleStyleTHickCloudItem`) {
		     menuItem -e -checkBox ($style == "ThickCloud") NParticleStyleThickCloudItem;
	}
	if(`menuItem -exists  NParticleStyleWaterItem`) {
		     menuItem -e -checkBox ($style == "Water") NParticleStyleWaterItem;
	}

	setParent -m ..;
}

global proc NParticlesCreateOptions( string $parent )
{
	if( !`optionVar -exists NParticleStyle` ){
		optionVar -stringValue NParticleStyle "Points";
	}

	string $style = `optionVar -query NParticleStyle`;

	menuItem -l (uiRes("m_DynParticlesMenu.kNParticlesCreateOptions")) -sm true -to true -pmc( "updateNParticleStyleMenu " + $parent );

		menuItem -divider true -dividerLabel (uiRes("m_DynParticlesMenu.kCreateOptDefPartType"));
		
		radioMenuItemCollection;
		menuItem -l (uiRes("m_DynParticlesMenu.kNPoint"))
			-radioButton ($style == "Points")
			-image "nPartPoints.png"
			-c "optionVar -stringValue NParticleStyle \"Points\"" 
			NParticleStylePointsItem;

		menuItem -l (uiRes("m_DynParticlesMenu.kNBalls"))
			-radioButton ($style == "Balls")
			-image "nPartBalls.png"
			-c "optionVar -stringValue NParticleStyle \"Balls\"" 
			NParticleStyleBallsItem;

		menuItem -l (uiRes("m_DynParticlesMenu.kNCloud"))
			-radioButton ($style == "Cloud")
			-image "nPartCloud.png"
			-c "optionVar -stringValue NParticleStyle \"Cloud\"" 
			NParticleStyleCloudItem;

		menuItem -l (uiRes("m_DynParticlesMenu.kNThickCloud"))
			-radioButton ($style == "ThickCloud")
			-image "nPartThickCloud.png"
			-c "optionVar -stringValue NParticleStyle \"ThickCloud\"" 
			NParticleStyleThickCloudItem;		

		menuItem -l (uiRes("m_DynParticlesMenu.kNWaterCloud"))
			-radioButton ($style == "Water")
			-image "nPartWater.png"
			-c "optionVar -stringValue NParticleStyle \"Water\"" 
			NParticleStyleWaterItem;
		
		setParent -m ..;
}

proc DynParticleLegacyMenuItems() {
	menuItem -divider true -dividerLabel (uiRes("m_DynParticlesMenu.kLegacyParticles"));
	
	menuItem -label (uiRes("m_DynParticlesMenu.kCreateEmitter"))  
		-annotation (uiRes("m_DynParticlesMenu.kCreateEmitterAnnot")) 
		-command "CreateEmitter" 
		-dragMenuCommand "performDynamics 1 Emitter 2"
		-image "posEmitter.png"
		createEmitterItem;
		menuItem -optionBox true -image "posEmitter.png"
			-annotation (uiRes("m_DynParticlesMenu.kCreateEmitterOptionsAnnot")) 
			-command "CreateEmitterOptions"
			createEmitterDialogItem;

	menuItem -label (uiRes("m_DynParticlesMenu.kCreateSprings"))  
		-annotation (uiRes("m_DynParticlesMenu.kCreateSpringsAnnot")) 
		-command "CreateSpring"
		-dragMenuCommand "performDynamics 2 Spring 2"
		-image "spring.png"
		createLegacySpringItem;
		menuItem -optionBox true -image "spring.png"
			-annotation (uiRes("m_DynParticlesMenu.kCreateSpringsOptionsAnnot")) 
			-command "CreateSpringOptions"
			createLegacySpringDialogItem;

	menuItem -label (uiRes("m_DynParticlesMenu.kEmitFromObject"))  
		 -annotation (uiRes("m_DynParticlesMenu.kEmitFromObjectAnnot")) 
		 -command "EmitFromObject"
		 -dragMenuCommand "performDynamics 0 Emitter 2"
		 -image "emitter.png"
		 addEmitterItem;
		menuItem -optionBox true -image "emitter.png"
			-annotation (uiRes("m_DynParticlesMenu.kEmitFromObjectOptionsAnnot")) 
			-command "EmitFromObjectOptions"
			addEmitterDialogItem;

	menuItem -label (uiRes("m_DynParticlesMenu.kLegacyMakeCollide"))  
		-annotation (uiRes("m_DynParticlesMenu.kLegacyMakeCollideAnnot")) 
		-command "MakeCollide" 
		-dragMenuCommand "performDynamics 0 Collision 2"
		-image "collision.png"
		addCollisionItem;
		menuItem -optionBox true -image "collision.png"
			-annotation (uiRes("m_DynParticlesMenu.kLegacyMakeCollideOptionsAnnot")) 
			-command "MakeCollideOptions"
			addCollisionDialogItem;		

	menuItem -label (uiRes("m_DynParticlesMenu.kLegacyParticleTool"))  
		-annotation (uiRes("m_DynParticlesMenu.kLegacyParticleToolAnnot")) 
		-command "ParticleTool" 
		-image "particle.png"
		particlesCreateItem;
		menuItem -optionBox true -image "particle.png"
			-annotation (uiRes("m_DynParticlesMenu.kLegacyParticleToolOptionsAnnot")) 
			-command "ParticleToolOptions" 
			particlesCreateDialogItem;

	menuItem -label (uiRes("m_DynParticlesMenu.kCreateSoftBody"))  
		-annotation (uiRes("m_DynParticlesMenu.kCreateSoftBodyAnnot")) 
		-command "CreateSoftBody"
		-dragMenuCommand "performDynamics 2 Soft 2"
		-image "soft.png"
		 createSoftBodyItem;
		menuItem -optionBox true -image "soft.png"
			-annotation (uiRes("m_DynParticlesMenu.kCreateSoftBodyOptionsAnnot")) 
			-command "CreateSoftBodyOptions"
			createSoftBodyDialogItem;
}

global proc DynParticlesMenu( string $parent )
{
	setParent -menu $parent;
	if( `menu -query -numberOfItems $parent` != 0 ) {
		//
		//	Menu is built already - just return
		//
		return;
	}
	
	menuItem -divider true -dividerLabel (uiRes("m_DynParticlesMenu.kPartCreate"));
	
	menuItem -label (uiRes("m_DynParticlesMenu.kPartFillObject"))  
		-annotation (getRunTimeCommandAnnotation("ParticleFill"))
		-image "nPartfillObject.png"
		-command "ParticleFill"
		-dmc "performParticleFill 2"
		-ddc "ParticleFillOptions"
		 nParticleFillItem;
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("ParticleFillOptions"))
			-command "ParticleFillOptions";

	menuItem -label (uiRes("m_DynParticlesMenu.kParticleGetExample")) 
		-annotation (getRunTimeCommandAnnotation("nucleusGetnParticleExample"))
		-image "nPartExample.png"
		-command "nucleusGetnParticleExample";
	
	menuItem -label (uiRes("m_DynParticlesMenu.kPartGoal"))  
		-annotation (uiRes("m_DynParticlesMenu.kPartGoalAnnot")) 
		-command "Goal" 
		-dragMenuCommand "performDynamics 0 Goal 2"
		-image "goal.png"
		addGoalItem;
		menuItem -optionBox true -image "goal.png"
			-annotation (uiRes("m_DynParticlesMenu.kPartGoalOptionsAnnot")) 
			-command "GoalOptions"
			addGoalDialogItem;
	
    menuItem -label (uiRes("m_DynParticlesMenu.kPartInstancer")) 
        -annotation (uiRes("m_DynParticlesMenu.kPartInstancerAnnot")) 
        -command "ParticleInstancer"
        -dragMenuCommand "performDynamics 0 ParticleInstancer 2"
		-image "instancer.png"
        nParticleInstancerItem;
        menuItem -optionBox true 
			-image "instancer.png"
            -annotation (uiRes("m_DynParticlesMenu.kPartInstancerOptionsAnnot")) 
            -command "ParticleInstancerOptions"
            nParticleInstancerDialogItem;
	
	menuItem -label (uiRes("m_DynParticlesMenu.kPartTool"))  
		-annotation (uiRes("m_DynParticlesMenu.kPartToolAnnot")) 
		-command "NParticleTool" 
		-image "particle.png"
		nParticlesCreateItem;
		menuItem -optionBox true -image "particle.png"
			-annotation (uiRes("m_DynParticlesMenu.kPartToolOptionsAnnot")) 
			-command "NParticleToolOptions" 
			nParticlesCreateDialogItem;
	
	menuItem -label (uiRes("m_DynParticlesMenu.kPartSoftBody"))
		-version 2016
		-annotation (uiRes("m_DynParticlesMenu.kPartSoftBodyAnnot")) 
		-command "CreateNSoftBody"
		-dragMenuCommand "performDynamics 2 NSoft 2"
		-image "soft.png"
		nParticlesSoftBodyItem;
		menuItem -optionBox true -image "soft.png"
			-annotation (uiRes("m_DynParticlesMenu.kPartSoftBodyOptionsAnnot")) 
			-command "CreateNSoftBodyOptions"
			nParticlesSoftBodyOptionItem;
			
	menuItem -label (uiRes("m_DynParticlesMenu.kPartSprings"))  
		-annotation (uiRes("m_DynParticlesMenu.kPartSpringsAnnot")) 
		-command "CreateSpring"
		-dragMenuCommand "performDynamics 2 Spring 2"
		-image "spring.png"
		createSpringItem;
		menuItem -optionBox true -image "spring.png"
			-annotation (uiRes("m_DynParticlesMenu.kPartSpringsOptionsAnnot")) 
			-command "CreateSpringOptions"
			createSpringDialogItem;
	
	// Create Options submenu
	NParticlesCreateOptions $parent;
		
	menuItem -divider true -dividerLabel (uiRes("m_DynParticlesMenu.kPartEmit"));
	
	menuItem -label (uiRes("m_DynParticlesMenu.kPartCreateEmitter"))  
	-annotation (uiRes("m_DynParticlesMenu.kPartCreateEmitterAnnot")) 
	-command "NCreateEmitter" 
	-dragMenuCommand "performDynamics 1 nEmitter 2"
	-image "posEmitter.png"
	createNEmitterItem;
	menuItem -optionBox true -image "posEmitter.png"
		-annotation (uiRes("m_DynParticlesMenu.kPartCreateEmitterOptionsAnnot")) 
		-command "NCreateEmitterOptions"
		createNEmitterDialogItem;
	
	menuItem -label (uiRes("m_DynParticlesMenu.kPartEmitFromObject"))  
		 -annotation (uiRes("m_DynParticlesMenu.kPartEmitFromObjectAnnot")) 
		 -command "NEmitFromObject"
		 -dragMenuCommand "performDynamics 0 nEmitter 2"
		 -image "emitter.png"
		 addNEmitterItem;
		menuItem -optionBox true -image "emitter.png"
			-annotation (uiRes("m_DynParticlesMenu.kPartEmitFromObjectOptionsAnnot")) 
			-command "NEmitFromObjectOptions"
			addNEmitterDialogItem;

	menuItem -label (uiRes("m_DynParticlesMenu.kNPerPointEmmission"))  
		 -annotation (uiRes("m_DynParticlesMenu.kNPerPointEmmissionAnnot")) 
		 -command "PerPointEmissionRates"
		 -image "emission.png"
		 addNPPItem;

	menuItem -label (uiRes("m_DynParticlesMenu.kNUseSelectedEmitter"))  
		-annotation (uiRes("m_DynParticlesMenu.kNUseSelectedEmitterAnnot")) 
		-command "UseSelectedEmitter"
		-image "connectEmit.png"
		connNEmitItem;

	menuItem -divider true -dividerLabel (uiRes("m_DynParticlesMenu.kPartEditors"));

    menuItem -label (uiRes("m_DynParticlesMenu.kPartCollisions"))  
		-annotation (uiRes("m_DynParticlesMenu.kPartCollisionsAnnot")) 
		-command "ParticleCollisionEvents" 
		-image "collisionEvents.png"
		eventEdWinItem;

    menuItem -label (uiRes("m_DynParticlesMenu.kPartSpriteWizard")) 
        -annotation (uiRes("m_DynParticlesMenu.kPartSpriteWizardAnnot")) 
        -command "spriteWizardMenu"
        nSpriteWizardItem;

	if(`getenv "MAYA_ENABLE_LEGACY_PARTICLES"` !="0") {
		DynParticleLegacyMenuItems;
	}
}
