// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
// global proc initAuxiliary()
{
	global string $gMainWindow;

	// dynamic globals
	global float $dynMaxFloatField = 500000;
	global float $dynMinFloatField = -500000;

    // Create a "global" active list connection, and then hook it up to
    // the default panels
    //
    if (`isTrue "AnimationExists"` && $gMainWindow != "" &&
        `window -exists $gMainWindow`)
    {
        if (`outlinerPanel -exists outliner`) {
            outlinerEditor
                -edit
                -mainListConnection worldList
                -selectionConnection modelList
				-setFilter defaultSetFilter
                `outlinerPanel -query -outlinerEditor outliner`;
        }
    }

	if (`isTrue "PolygonsExists"`)
	{
		if (`exists initPolygonsUI`) 
			eval "source initPolygonsUI";
		else {
			warning  (uiRes("m_initAuxiliary.kCouldNotFindInitPolygonsUIScript"));
		}
	}

	if (`exists initNurbsUI`) {
		eval "source initNurbsUI";
	} else {
		warning  (uiRes("m_initAuxiliary.kCouldNotFindInitNurbsUIScript"));
	}

	if( `isTrue "SubdivUIExists"` && `exists initSubdivUI` ) {
		eval "source initSubdivUI";
	}

}

global proc addToRecentCommandQueue(string $cmd, string $label)
{
	repeatLast -ac $cmd -acl $label;
}
