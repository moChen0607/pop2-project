// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  13 April 1997
//
//
//  Procedure Name:
//      RenRenderMenu
//
//  Description:
//		Create the RENDERING->Render menu
//
//  Input Arguments:
//      parent to parent the menu to.
//
//  Return Value:
//      None.
//

// Description:  This procedure is for update ReRenderMenu.
//
global proc updateReRenderMenu(string $parent)
{
    string $oldParent = `setParent -query`;

    setParent -m $parent;
    string $currentRenderLayer = currentRenderLayerLabel();

    // Show the render layer name if there is more than one render
    // layer.
    //
    string $renderUsingLabel = (uiRes("m_RenRenderMenu.kRenderUsing"));
    if ($currentRenderLayer != "")
    {
        string $formatString = (uiRes("m_RenRenderMenu.kRenderThisLayerUsing"));
        $renderUsingLabel = `format -s $currentRenderLayer $formatString`;
    }
    
	menuItem -edit
		-label $renderUsingLabel 
		("renMenuRenderUsingItemMenuItem");
    
    setParent $oldParent;
}

//
// Description: Called when user opens the main render menu.
//				This procedure calls the render menu building UI specific to the current
//				renderer.
//	Returns:	None
//
global proc RenRenderMenu( string $parent )
{
	setParent -m $parent;

	if( `menu -q -ni $parent` != 0 ) {
        updateMayaRenderMenu($parent);
		return;
	}

	// Render Settings
	menuItem -d true -dividerLabel (uiRes("m_RenRenderMenu.kRenderSettings"));
	
	string $annotation = getRunTimeCommandAnnotation("RenderGlobalsWindow");
	menuItem -label (uiRes("m_RenRenderMenu.kRenderRenderSettings"))
		-annotation $annotation
		-c unifiedRenderGlobalsWindow
		RenRenderSettingsItem;
	
	//....
	// Create submenu to allow for renderer selection
    //
	menuItem
		-annotation (uiRes("m_RenRenderMenu.kRenderUsingAnnotation"))
		-subMenu				true
		("renMenuRenderUsingItemMenuItem");
    updateReRenderMenu($parent);
    scriptJob -event renderLayerManagerChange ("updateReRenderMenu "+$parent);

	menuItem
		-edit
		-postMenuCommand
			("buildRenderMenuRenderUsingSubmenu renMenuRenderUsingItemMenuItem")
		("renMenuRenderUsingItemMenuItem");

    // Build the pulldown render menu.
    //
    mayaRenderMenu($parent);

	setParent -m $parent;


}

// Description:	Builds the "Render Using" submenu that allows the user to select
//				from the available renderers
//	Returns: 	None
//
global proc buildRenderMenuRenderUsingSubmenu(string $subMenuName)
{
	popupMenu -e -deleteAllItems $subMenuName;
	setParent -m $subMenuName;

	string $renderers[] = `renderer -query -namesOfAvailableRenderers`;
	int $isCurrent  = 0;
	string $funcName = "";
	string $rendererUIName = "";

	radioMenuItemCollection	("renderWindowRenderUsingCollection" + $subMenuName);
	
	for ($i = 0; $i < size($renderers); $i += 1)
	{
		if($renderers[$i] == currentRenderer())
		{
			$isCurrent = 1;
		}
		else
		{
			$isCurrent = 0;
		}

		$funcName = "setCurrentRenderer " + $renderers[$i];
		$rendererUIName = `renderer -query -rendererUIName $renderers[$i]`; 

		menuItem -label $rendererUIName  			 
             -radioButton 			$isCurrent
			 -collection			("renderWindowRenderUsingCollection" + $subMenuName)
			 -c  $funcName
			 ("renderUsingItemSubMenu" + $i);
	}
}
