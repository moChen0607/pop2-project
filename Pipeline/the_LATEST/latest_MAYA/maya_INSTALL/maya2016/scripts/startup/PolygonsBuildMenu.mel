// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc createSelectCreaseSetsMenu( string $parent )
{
	setParent -menu $parent;
	menu -edit -deleteAllItems $parent;

	menuItem
		-label (uiRes("m_PolygonsBuildMenu.kCreateCreaseSet"))
		-annotation (getRunTimeCommandAnnotation("CreateCreaseSet"))
		-image "polyCreateCreaseSet.png"
		-command "CreateCreaseSet"
		;

	menuItem
		-optionBox true
		-label (uiRes("m_PolygonsBuildMenu.kCreateCreaseSetOptions"))
		-annotation (getRunTimeCommandAnnotation("CreateCreaseSetOptions"))
		-image "polyCreateCreaseSet.png"
		-command "CreateCreaseSetOptions"
		;

	menuItem -divider true;

	string $sets[];

	if (`objExists defaultCreaseDataSet`)
	{
		$sets = sort(`sets -query defaultCreaseDataSet`);

		for( $set in $sets )
		{
			menuItem -label $set -c ( "select -r " + $set );
		}
	}

	if (0 == `size($sets)`)
	{
		menuItem -label (uiRes("m_PolygonsBuildMenu.kNoSelectCreaseSets")) -enable false;
	}
}

global proc modelingToolkitLoadCallbackProc( string $pluginName ) {
	if($pluginName == "modelingToolkit"){
		MTsetToggleMenuItem;
	}
}

global proc PolygonsBuildMenu(string $parent)
//
// Description:
//		Modeling Edit Mesh menu (which is also the legacy Polygons Edit Mesh menu)
//
{
	if (! `isTrue "PolygonsExists"`) return;

	setParent -m $parent; 

	// If menu is built, run scripts that happen on every menu open
	if (`menu -q -ni $parent` != 0) {

			MTsetToggleMenuItem;

	// Else build all UI
	}
	else
	{
		menuItem -divider true -dividerLabel (uiRes("m_PolygonsBuildMenu.kComponentsDivider1"));
			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kPolyBuildSubdivide"))
				-annotation (getRunTimeCommandAnnotation("SubdividePolygon"))
				-image "polySubdFacet.png"
				-command "SubdividePolygon"
				-dragMenuCommand "performPolySubdivide \"\" 2" 
				-dragDoubleClickCommand "SubdividePolygonOptions"
				;

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("SubdividePolygonOptions"))
				-image "polySubdFacet.png" 
				-command "SubdividePolygonOptions" 
				;

			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kPolyBuildBevel"))
				-annotation (getRunTimeCommandAnnotation("BevelPolygon"))
				-image "polyBevel.png"
				-command "performBevelOrChamfer" 
				-dragMenuCommand "performPolyBevel 2"
				-dragDoubleClickCommand "BevelPolygonOptions"
				;

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("BevelPolygonOptions"))
				-image "polyBevel.png" 
				-command "BevelPolygonOptions"
				;

			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kPolyBuildBridgeEdge"))
				-annotation (getRunTimeCommandAnnotation("BridgeEdge"))
				-image "polyBridge.png"
				-command "BridgeEdge"
				-dragMenuCommand "performPolyBridgeEdge 2" 
				-dragDoubleClickCommand "BridgeEdgeOptions"
				;

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("BridgeEdgeOptions"))
				-image "polyExtrudeEdge.png" 
				-command "BridgeEdgeOptions"
				;

			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kPolyCollpaseEdgeOrFace"))
				-annotation (getRunTimeCommandAnnotation("PolygonCollapse"))
				-image "polyCollapseEdge.png"
				-command "PolygonCollapse"
				-dragMenuCommand "performPolyCollapse 1"
				;
			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kPolyBuildConnectComponents"))
				-annotation (getRunTimeCommandAnnotation("ConnectComponents"))
				-image "polyConnectComponents.png"
				-command "ConnectComponents"
				;

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("ConnectComponentsOptions"))
				-image "polyConnectComponents.png"
				-command "ConnectComponentsOptions"
				;

			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kPolyBuildDetachComponent"))
				-annotation (getRunTimeCommandAnnotation("DetachComponent"))
				-image "polySplitVertex.png"
				-command "DetachComponent"
				;

			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kPolyBuildExtrude"))
				-annotation (getRunTimeCommandAnnotation("PolyExtrude"))
				-image "polyExtrudeFacet.png"
				-command "PolyExtrude"
				-dragMenuCommand "performPolyExtrude 2" 
				-dragDoubleClickCommand "PolyExtrudeOptions"
				;

			menuItem -optionBox true
				-annotation (uiRes("m_PolygonsBuildMenu.kPolyBuildExtrudeOptionsAnnot"))
				-image "polyExtrudeFacet.png" 
				-command "performPolyExtrude 1"
				;

			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kPolyBuildMerge"))
				-annotation (getRunTimeCommandAnnotation("PolyMerge"))
				-image "polyMerge.png"
				-command "PolyMerge"
				-dragMenuCommand "performPolyMerge 2" 
				-dragDoubleClickCommand "PolyMergeOptions"
				;

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("PolyMergeOptions"))
				-image "polyMerge.png" 
				-command "PolyMergeOptions" 
				;

			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kPolyBuildMergeToCenter"))
				-annotation (getRunTimeCommandAnnotation("MergeToCenter"))
				-image "polyMergeToCenter.png"
				-command "MergeToCenter"
				;

			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kPolyBuildTransformComponent"))
				-annotation (getRunTimeCommandAnnotation("MovePolygonComponent"))
				-image "polyMoveVertex.png"
				-command "MovePolygonComponent"
				-dragMenuCommand "performPolyMove \"\" 2"
				-dragDoubleClickCommand "MovePolygonComponentOptions"
				;

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("MovePolygonComponentOptions"))
				-image "polyMoveVertex.png" 
				-command "MovePolygonComponentOptions"
				;

		menuItem -divider true -dividerLabel (uiRes("m_PolygonsBuildMenu.kVertexDivider1"));
			menuItem -label (uiRes("m_PolygonsBuildMenu.kNewPolyAvgVts"))
				-annotation (uiRes("m_PolygonsBuildMenu.kNewPolyAvgVtsAnnot"))
				-command "performPolyAverageVertex 0" -i "polyAverageVertex.png"
				;

			menuItem -optionBox true 
				-annotation (uiRes("m_PolygonsBuildMenu.kNewPolyAvgVtsOptionsAnnot"))
				-command "performPolyAverageVertex 1" 
				-enableCommandRepeat false 
				-image "polyAverageVertex.png"
				;
			
			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kPolyBuildChamferVertex"))
				-annotation (getRunTimeCommandAnnotation("ChamferVertex"))
				-image "polyChamfer.png"
				-command "ChamferVertex" 
				-dragMenuCommand "performPolyChamferVertex 2"
				-dragDoubleClickCommand "ChamferVertexOptions"
				;

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("ChamferVertexOptions"))
				-image "polyChamfer.png" 
				-command "ChamferVertexOptions"
				;

		menuItem -divider true -dividerLabel (uiRes("m_PolygonsBuildMenu.kEdgeDivider1"));
			menuItem
				-version "2014"
				-label (uiRes("m_PolygonsBuildMenu.kPolyBuildDelete"))
				-annotation (uiRes("m_PolygonsBuildMenu.kPolyBuildDeleteAnnot"))
				-image "polyDelEdgeVertex.png"
				-command "DeletePolyElements"
				;

			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kPolyBuildEditEdgeFlow"))
				-annotation (getRunTimeCommandAnnotation("PolyEditEdgeFlow"))
				-image "polyEditEdgeFlow.png"
				-command "PolyEditEdgeFlow"
				-dragMenuCommand "performPolyEditEdgeFlow 2"
				-dragDoubleClickCommand "PolyEditEdgeFlowOptions"
				-version "2014"
				;

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("PolyEditEdgeFlowOptions"))
				-image "polyEditEdgeFlow.png"
				-command "PolyEditEdgeFlowOptions"
				-version "2014"
				;

			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kPolyBuildFlipTriangleEdge"))
				-annotation (getRunTimeCommandAnnotation("FlipTriangleEdge"))
				-image "polyFlipEdge.png"
				-command "FlipTriangleEdge"
				;

			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kPolyBuildSpinPolyEdgeBackward"))
				-annotation (getRunTimeCommandAnnotation("PolySpinEdgeBackward"))
				-image "polySpinEdgeBackward.png"
				-command "PolySpinEdgeBackward"
				;

			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kPolyBuildSpinPolyEdgeForward"))
				-annotation (getRunTimeCommandAnnotation("PolySpinEdgeForward"))
				-image "polySpinEdgeForward.png"
				-command "PolySpinEdgeForward"
				;

		menuItem -divider true -dividerLabel (uiRes("m_PolygonsBuildMenu.kFaceDivider1"));
			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kNewAssignSubdivHole"))
				-annotation (getRunTimeCommandAnnotation("PolyAssignSubdivHole"))
				-image "polyAssignSubdivHole.png"
				-command "PolyAssignSubdivHole"
				;

			menuItem -optionBox 1 -ecr false 
				-annotation (getRunTimeCommandAnnotation("PolyAssignSubdivHoleOptions"))
				-image "polyAssignSubdivHole.png"
				-command "PolyAssignSubdivHoleOptions"
				;

			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kPolyBuildDuplicateFace"))
				-annotation (getRunTimeCommandAnnotation("DuplicateFace"))
				-image "polyDuplicateFacet.png"
				-command "DuplicateFace"
				-dragMenuCommand "performPolyChipOff 2 1" 
				-dragDoubleClickCommand "DuplicateFaceOptions"
				;

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("DuplicateFaceOptions"))
				-image "polyDuplicateFacet.png"
				-command "DuplicateFaceOptions" 
				;

			menuItem -label (uiRes("m_PolygonsBuildMenu.kNewExtract"))
				-annotation (getRunTimeCommandAnnotation("ExtractFace"))
				-image "polyChipOff.png"
				-command "ExtractFace"
				-dragMenuCommand "performPolyChipOff 2 0"
				-dragDoubleClickCommand "ExtractFaceOptions"
				;

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("ExtractFaceOptions"))
				-image "polyChipOff.png" 
				-command "ExtractFaceOptions"
				;

			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kPolyBuildPokeFace"))
				-annotation (getRunTimeCommandAnnotation("PokePolygon"))
				-image "polyPoke.png"
				-command "PokePolygon" 
				-dragDoubleClickCommand "PokePolygonOptions"
				;

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("PokePolygonOptions"))
				-image "polyPoke.png"
				-command "PokePolygonOptions"
				;

			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kPolyBuildWedgeFaces"))
				-annotation (getRunTimeCommandAnnotation("WedgePolygon"))
				-image "polyWedgeFace.png" 
				-command "WedgePolygon" 
				-dragDoubleClickCommand "WedgePolygonOptions"
				;

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("WedgePolygonOptions"))
				-image "polyWedgeFace.png"
				-command "WedgePolygonOptions"
				;

		menuItem -divider true -dividerLabel (uiRes("m_PolygonsBuildMenu.kCurveDivider1"));
			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kProjectCurveOnMesh"))
				-annotation (getRunTimeCommandAnnotation("ProjectCurveOnMesh"))
				-image "projectCurve_Poly.png" 
				-command "ProjectCurveOnMesh" 
				-dragDoubleClickCommand "ProjectCurveOnMeshOptions"
				ProjectCurveOnMeshItem;

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("ProjectCurveOnMeshOptions"))
				-image "projectCurve.png" 
				-command "ProjectCurveOnMeshOptions" 
				ProjectCurveOnMeshOptionsItem;

			menuItem
				-label (uiRes("m_PolygonsBuildMenu.kSplitMeshWithProjectedCurve"))
				-annotation (getRunTimeCommandAnnotation("SplitMeshWithProjectedCurve"))
				-image "projectCurveSplit_Poly.png" 
				-command "SplitMeshWithProjectedCurve" 
				-dragDoubleClickCommand "SplitMeshWithProjectedCurveOptions"
				SplitMeshWithProjectedCurveItem;

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("SplitMeshWithProjectedCurveOptions"))
				-image "projectCurve.png" 
				-command "SplitMeshWithProjectedCurveOptions" 
				SplitMeshWithProjectedCurveItemItem;

		setParent -m ..;
	}
}
