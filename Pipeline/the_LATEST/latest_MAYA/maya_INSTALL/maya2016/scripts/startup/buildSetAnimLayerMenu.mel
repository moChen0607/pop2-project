// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

proc createAnimLayerMenuItem(string $layer, string $currentLayer, string $affectedLayers[])
{
	int $filterActive = `optionVar -exists animLayerFilterActive` ? `optionVar -query animLayerFilterActive` : 0;
	if($filterActive && !isAffectedLayer($layer, $affectedLayers, 1)) {
		return;
	}
	
	$radioState = ( $layer == $currentLayer );
	$cmd = "selectLayer(\"" + $layer + "\");";
	string $layerSetAnnotationFormat = (uiRes("m_buildSetAnimLayerMenu.kLayerSetAnnotFormat"));
	$annotation = `format -stringArg $layer $layerSetAnnotationFormat `;

	string $sublayers[] = `animLayer -query -children $layer`;	
	$submenu = (size($sublayers) > 0);
	menuItem -label $layer -command $cmd -annotation $annotation  -subMenu $submenu
		-radioButton $radioState;
	if ($submenu) {
		menuItem -label $layer -command $cmd -annotation $annotation
			-radioButton $radioState;
		menuItem -divider true;		
		for ($sub in $sublayers) {
			createAnimLayerMenuItem($sub, $currentLayer, $affectedLayers);
		}
		setParent -m ..;
	}
}

global proc buildSetAnimLayerMenu( string $menu )
{
	menu -edit -dai $menu;
	setParent -m $menu;

	// Get the list of top-level animation layers
	//
	string $rootLayer  = `animLayer -query -root`;
	if($rootLayer == "")
		return;
	
	string $layers[] = `animLayer -query -children $rootLayer`;
	global string $gSelectedAnimLayers[];
	string $currentLayers[] = $gSelectedAnimLayers;

	// Determine if there is a single current layer
	//
	string $currentLayer = "";
	if ( size( $currentLayers ) == 1 ) {
		$currentLayer = $currentLayers[0];
	}
	
	string $affectedLayers[] = {};
	int $filterActive = `optionVar -exists animLayerFilterActive` ? `optionVar -query animLayerFilterActive` : 0;
	if($filterActive)
		$affectedLayers = `animLayer -query -afl`;

	// Put in the "None" menu item
	//
	radioMenuItemCollection;
	
	string $cmd = "selectLayer(\"\");";
	menuItem -label (uiRes("m_buildSetAnimLayerMenu.kNone"))
		-command $cmd
		-annotation (uiRes("m_buildSetAnimLayerMenu.kNoneAnnot"))
		-radioButton 0;
	
	menuItem -divider true;
	
	string $layerSetAnnotationFormat = (uiRes("m_buildSetAnimLayerMenu.kLayerSetAnnotationFormat"));
	string $annotation = `format -stringArg $rootLayer $layerSetAnnotationFormat`;
	menuItem -label $rootLayer -command ("selectLayer(\"" + $rootLayer + "\");")
		-annotation $annotation -radioButton ($currentLayer==$rootLayer);

	// Put in the radio buttons for all of the top-level layers
	//
	for ( $layer in $layers ) {
		createAnimLayerMenuItem($layer, $currentLayer, $affectedLayers);
	}
	
	if(size($currentLayers) > 1) {
		menuItem -divider true;
		
		menuItem -label (uiRes("m_buildSetAnimLayerMenu.kMultiple"))
			-command "" -annotation (uiRes("m_buildSetAnimLayerMenu.kMultipleAnimLayersSelected"))
			-radioButton 1;
	}
}

global proc selectLayer(string $selected)
{
	global string $gSelectedAnimLayers[];
	if($selected != "")
		$gSelectedAnimLayers = { $selected };
	else
		$gSelectedAnimLayers = { };
	
	string $layers[] = buildAnimLayerArray();
	for($lLayer in $layers)
	{
		if($lLayer != $selected) {
			animLayerEditorOnSelect($lLayer, 0);
		}
	}
	if($selected != "")
		animLayerEditorOnSelect($selected, 1);
	
	animLayer -forceUIRefresh;
}
