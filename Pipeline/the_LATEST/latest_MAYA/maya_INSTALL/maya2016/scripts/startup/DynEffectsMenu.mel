// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  JUN 2014
//
//
//  Procedure Name:
//      DynEffectsMenu
//
//  Description:
//		Create the DYNAMICS->Effects
//
//  Input Arguments:
//      parent to parent the menu to.
//
//  Return Value:
//      None.
//
global proc DynCreateApplyEffectMenu( string $parent ) 
//
// Build the apply effect submenu
{
	setParent -menu $parent;
	menu -edit -deleteAllItems $parent;
	
	string $effects[] = `getEffectsAssets`;
	for( $effect in $effects ) {
		menuItem -label $effect -command ("applyEffect " + $effect );
	}
	setParent -menu ..;
}

global proc DynCreateCollideEffectMenu( string $parent ) 
//
// Build the collide with effect submenu
{
	setParent -menu $parent;
	menu -edit -deleteAllItems $parent;
	
	string $effects[] = `getEffectsAssets`;
	for( $effect in $effects ) {
		menuItem -label $effect -command ("makeCollideEffect " + $effect );
	}
	setParent -menu ..;
}

global proc DynEffectsMenu( string $parent )
{
	setParent -menu $parent;
	if( `menu -query -numberOfItems $parent` != 0 ) {
		//
		//	Menu is built already - just return
		//
		return;
	}

	menuItem -divider true -dividerLabel (uiRes("m_DynEffectsMenu.kEffectsAssets"));
	
	menuItem -label (uiRes("m_DynEffectsMenu.kGetExample")) 
		-annotation (getRunTimeCommandAnnotation("nucleusGetEffectsAsset"))
		-image "nPartExample.png"
		-command "nucleusGetEffectsAsset";

	// Apply Effect submenu
	//
	string $applyEffectItem = `menuItem -label (uiRes("m_DynEffectsMenu.kApplyEffect")) 
        -annotation (uiRes("m_DynEffectsMenu.kApplyEffectAnnot")) 
		-subMenu true -tearOff true -allowOptionBoxes false nucleusApplyEffectItem`;
	menuItem -edit 
		-postMenuCommand ("DynCreateApplyEffectMenu " + $applyEffectItem)
		nucleusApplyEffectItem;

	setParent -menu ..;
	
	// Collide with Effect submenu
	//
	string $collideEffectItem = `menuItem -label (uiRes("m_DynEffectsMenu.kCollideEffect")) 
        -annotation (uiRes("m_DynEffectsMenu.kCollideEffectAnnot")) 
		-subMenu true -tearOff true -allowOptionBoxes false nucleusCollideEffectItem`;
	menuItem -edit 
		-postMenuCommand ("DynCreateCollideEffectMenu " + $collideEffectItem)
		nucleusCollideEffectItem;
	setParent -menu ..;
	
	menuItem -divider true -dividerLabel (uiRes("m_DynEffectsMenu.kEffectsCreate"));
	
	menuItem -label (uiRes("m_DynEffectsMenu.kCreateFire"))  
		-annotation (uiRes("m_DynEffectsMenu.kCreateFireAnnot")) 
		-command "Fire"
		-dragMenuCommand "performDynamicsClipEffects Fire 2"
		-image "fire.png"
		fireEffectItem;
		menuItem -optionBox true 
			-image "fire.png"
			-annotation (uiRes("m_DynEffectsMenu.kCreateFireOptionsAnnot")) 
			-command "FireOptions"
			createFireDialogItem;
			
	menuItem -label (uiRes("m_DynEffectsMenu.kCreateFireworks"))  
		-annotation (uiRes("m_DynEffectsMenu.kCreateFireworksAnnot")) 
		-command "Fireworks"
		-dragMenuCommand "performDynamicsClipEffects Fireworks 2"
		-image "fireworks.png"
		fireworksEffectItem;
		menuItem -optionBox true //  -image "posEmitter.png"
			-image "fireworks.png"
			-annotation (uiRes("m_DynEffectsMenu.kCreateFireworksOptionsAnnot")) 
			-command "FireworksOptions"
			createFireworksDialogItem;

	menuItem -label (uiRes("m_DynEffectsMenu.kEffectsFlow")) -sm true -to true;
	
		menuItem -label (uiRes("m_DynEffectsMenu.kCreateFlowCurve"))  
			-annotation (uiRes("m_DynEffectsMenu.kCreateFlowCurveAnnot")) 
			-command "CurveFlow"
			-dragMenuCommand "performDynamicsClipEffects Flow 2"
			-image "flow.png"
			curveFlowEffectItem;
			menuItem -optionBox true 
				-image "flow.png"
				-annotation (uiRes("m_DynEffectsMenu.kCreateFlowOptionsAnnot")) 
				-command "CurveFlowOptions"
				createFlowDialogItem;

		menuItem -label (uiRes("m_DynEffectsMenu.kCreateSurfaceFlow"))  
			-annotation (uiRes("m_DynEffectsMenu.kCreateSurfaceFlowAnnot")) 
			-command "SurfaceFlow"
			-dragMenuCommand "performDynamicsClipEffects SurfaceFlow 2"
			-image "flowSurface.png"
			surfaceFlowEffectItem;
			menuItem -optionBox true
				-image "flowSurface.png"
				-annotation (uiRes("m_DynEffectsMenu.kCreateSurfaceFlowOptionsAnnot")) 
				-command "SurfaceFlowOptions"
				createSurfaceFlowDialogItem;
				
		menuItem -label (uiRes("m_DynEffectsMenu.kDeleteSurfaceFlow"))  
			-annotation (uiRes("m_DynEffectsMenu.kDeleteSurfaceFlowAnnot")) 
			-command "DeleteSurfaceFlow"
			-dragMenuCommand "performDynamicsClipEffects DeleteSurfaceFlow 2"
			-image "flowSurfaceDelete.png"
			deleteSurfaceFlowEffectItem;
			menuItem -optionBox true
				-image "flowSurfaceDelete.png"
				-annotation (uiRes("m_DynEffectsMenu.kDeleteSurfaceFlowOptionsAnnot")) 
				-command "DeleteSurfaceFlowOptions"
				deleteSurfaceFlowDialogItem;		
	
		setParent -m ..;	
			
	menuItem -label (uiRes("m_DynEffectsMenu.kCreateLightning"))  
		-annotation (uiRes("m_DynEffectsMenu.kCreateLightningAnnot")) 
		-command "Lightning"
		-dragMenuCommand "performDynamicsClipEffects Lightning 2"
		-image "lightning.png"
		lightningEffectItem;
		menuItem -optionBox true 
			-image "lightning.png"
			-annotation (uiRes("m_DynEffectsMenu.kCreateLightningOptionsAnnot")) 
			-command "LightningOptions"
			createLightningDialogItem;			

	menuItem -label (uiRes("m_DynEffectsMenu.kCreateShatter"))  
		-annotation (uiRes("m_DynEffectsMenu.kCreateShatterAnnot")) 
		-command "Shatter"
		-dragMenuCommand "performDynamicsClipEffects Shatter 2"
		-image "shatter.png"
		shatterEffectItem;
		menuItem -optionBox true 
			-image "shatter.png"
			-annotation (uiRes("m_DynEffectsMenu.kCreateShatterOptionsAnnot")) 
			-command "ShatterOptions"
			createShatterDialogItem;
			
	menuItem -label (uiRes("m_DynEffectsMenu.kCreateSmoke"))  
		-annotation (uiRes("m_DynEffectsMenu.kCreateSmokeAnnot")) 
		-command "Smoke"
		-dragMenuCommand "performDynamicsClipEffects Smoke 2"
		-image "smoke.png"
		smokeEffectItem;
		menuItem -optionBox true 
			-image "smoke.png"
			-annotation (uiRes("m_DynEffectsMenu.kCreateSmokeOptionsAnnot")) 
			-command "SmokeOptions"
			createSmokeDialogItem;

}
