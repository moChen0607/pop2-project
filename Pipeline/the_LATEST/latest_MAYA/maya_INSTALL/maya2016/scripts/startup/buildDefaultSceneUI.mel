// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Description:
//		This script is executed when a file is opened.  It will create panels
//		only if no panels exist.
//
//  Creation Date: 
//

global proc buildDefaultSceneUI() {
	global string  	$gMainPane;

	if (`paneLayout -exists $gMainPane`) {
		string $panels[] = `getPanel -all`;
		if (size($panels) == 0) {
			//  
			//  Currently no panels so use the new file panels configuration.
			//
			buildNewSceneUI;
		} else {
			//
			//  Check that filters exist
			//
			string $filters[] = `ls -type objectFilter`;
			if (size($filters) == 0) {
				initDefaultFilters;
			}

			//
			//  Init any panels that need it.
			//
			string $panels[] = `getPanel -all`;
			string $panel;

			for ($panel in $panels) {
				if (`panel -q -ni $panel`) {
					panel -e -init $panel;
				}
			}

			//
			//  get current state of the UI
			//
			sceneUIReplacement -update $gMainPane;

			int    $menusOkayInPanels = `optionVar -q allowMenusInPanels`;
			//
			//	Initialize the Relationship Editor.
			//
			if (`exists relationshipEditor`) {
				$panelLabel = localizedPanelLabel("Relationship Editor");
				$panelName = 
					`sceneUIReplacement 
							 -getNextScriptedPanel"relationshipPanel" 
							 $panelLabel`;
				if ("" == $panelName) {
					$panelName = `scriptedPanel -mbv $menusOkayInPanels
									-unParent -type "relationshipPanel" 
									-label $panelLabel`;
				} else {
					scriptedPanel -edit -label $panelLabel $panelName;
				}
			}

			string $match, $relationshipEditorPanel = "";

			//	Find the Relationship Editor panel.
			//
			string $allPanels[] = `getPanel -allPanels`;
			for ($panel in $allPanels) {
				$match = match("relationshipPanel", $panel);
				if ("" != $match) {
					$relationshipEditorPanel = $panel;
					break;
				}
			}

			//	Check if Set Editor or Shading Group Editor is one of the visible
			//	panels.  If they are then replace them with the Relationship Editor.
			//
			$allPanels = `getPanel -allPanels`;
			for ($panel in $allPanels) {
				$match = match("setEditor", $panel);
				if ("" != $match) {
					warning (uiRes("m_buildDefaultSceneUI.kSetEditorWarn"));
					if ("" != $relationshipEditorPanel) {
						scriptedPanel -edit -replacePanel $panel $relationshipEditorPanel;
					}
					deleteUI -panel $panel;
				}
				$match = match("shadingGroupEditor", $panel);
				if ("" != $match) {
					warning (uiRes("m_buildDefaultSceneUI.kShadingGroupWarn"));
					if ("" != $relationshipEditorPanel) {
						scriptedPanel -edit -replacePanel $panel $relationshipEditorPanel;
					}
					deleteUI -panel $panel;
				}
			}
			updatePanelLayoutFromCurrent( localizedPanelLabel("Current Layout") );

			//
			// Make sure Hypershade and Visor panels are present.
			//
			$menusOkayInPanels = `optionVar -q allowMenusInPanels`;
			string $panelName, $editorName;

			$panels = `getPanel -scriptType "hyperShadePanel"`;
			if (`size($panels)` == 0) {
				$panelName = 
					`scriptedPanel 
						-menuBarVisible $menusOkayInPanels 
						-unParent 
						-type "hyperShadePanel" 
						-label (localizedPanelLabel("Hypershade"))`;
			}

			$panels = `getPanel -scriptType "visorPanel"`;
			if (`size($panels)` == 0) {
				$panelName = 
					`scriptedPanel 
						-menuBarVisible $menusOkayInPanels 
						-unParent 
						-type "visorPanel" 
						-label (localizedPanelLabel("Visor"))`;
				$editorName = ($panelName+"VisorEd");
				hyperGraph -e 
					-graphType "Visor" 
					-dn defaultShaderList
					$editorName;
			}

            // Make sure the Node Editor panel exists
			$panels = `getPanel -scriptType "nodeEditorPanel"`;
			if (`size($panels)` == 0) {
				$panelName = 
					`scriptedPanel 
						-mbv $menusOkayInPanels 
						-unParent 
						-type "nodeEditorPanel" 
						-label (localizedPanelLabel("Node Editor"))`;
			}

            // Make sure the Create Node panel exists
			$panels = `getPanel -scriptType "createNodePanel"`;
			if (`size($panels)` == 0) {
				$panelName = 
					`scriptedPanel 
						-mbv $menusOkayInPanels 
						-unParent 
						-type "createNodePanel" 
						-label (localizedPanelLabel("Create Node"))`;
			}

			// Make sure the profiler panel exists		
			$panels = `getPanel -scriptType "profilerPanel"`;
			if (`size($panels)` == 0) {
				$panelName = 
					`scriptedPanel 
						-mbv $menusOkayInPanels 
						-unParent 
						-type "profilerPanel" 
						-label (localizedPanelLabel("Profiler Tool"))`;
			}

			if (mayaHasTimeEditorFeature()) {
				// Make sure the CTE editor exists.
				$panels = `getPanel -scriptType "cteEditor"`;
				if (`size($panels)` == 0) {
					$panelName = `scriptedPanel -mbv $menusOkayInPanels 
									-unParent -type "cteEditor" -label (localizedPanelLabel("Time Editor"))`;
				}
			}
			
			// Make sure the clip editor exists.
			$panels = `getPanel -scriptType "clipEditorPanel"`;
			if (`size($panels)` == 0) {
				$panelName = `scriptedPanel -mbv $menusOkayInPanels 
								-unParent -type "clipEditorPanel" -label (localizedPanelLabel("Trax Editor"))`;
			}

			// Make sure the sequence editor exists.
			$panels = `getPanel -scriptType "sequenceEditorPanel"`;
			if (`size($panels)` == 0) {
				$panelName = `scriptedPanel -mbv $menusOkayInPanels 
								-unParent -type "sequenceEditorPanel" -label (localizedPanelLabel("Camera Sequencer"))`;
			}

			// Make sure the Reference Editor panel exists.
			//
			$panels = `getPanel -scriptType "referenceEditorPanel"`;
			if (`size($panels)` == 0) {
				$panelName = `scriptedPanel -mbv $menusOkayInPanels
								-unParent -type "referenceEditorPanel"
								-label (localizedPanelLabel("Reference Editor"))`;
			}

			// Turn off isolate select in all model panels
			$panels = `getPanel -type modelPanel`;
			for ($panel in $panels) {
				modelEditor -edit -viewSelected false $panel;
				editor -edit -lck -mainListConnection "activeList" $panel;
			}

			// Make sure the Script Editor panel exists.
			//
			$panels = `getPanel -scriptType "scriptEditorPanel"`;
			if (`size($panels)` == 0) {
				$panelName = `scriptedPanel -mbv $menusOkayInPanels
								-unParent -type "scriptEditorPanel"
								-l "Script Editor"`;
			}
		}
        filterUIRestoreAllSavedSettings();
	}

	// reset playblast optionVars
	//
	string $filename = `file -q -sn`;
	if ($filename != "") {
		string $tokens[];
		tokenize($filename,"/",$tokens);
		$filename = $tokens[size($tokens)-1];
		clear $tokens;
		tokenize($filename,".",$tokens);
		$filename = $tokens[0];
	} else {
		// no filename, use "playblast" as the default
		// playblast file name
		$filename = "playblast";
	}
	optionVar -stringValue playblastFile $filename;

	if (`isTrue MayaCreatorExists` && `scriptedPanelType -exists dynPaintScriptedPanelType`) {
		//
		//  Make sure that we have a Creator panel.
		//
		string $result[] = `getPanel -scriptType "dynPaintScriptedPanelType"`;
		if ( size( $result ) == 0 ) {
			//  
			//  Need to create a new one.
			//
			string $panelName = `scriptedPanel	-unParent -type "dynPaintScriptedPanelType" -label (localizedPanelLabel("Paint Effects")) dynPaintScriptedPanel`;
			dynPaintPanel $panelName;
		}
	}
}
