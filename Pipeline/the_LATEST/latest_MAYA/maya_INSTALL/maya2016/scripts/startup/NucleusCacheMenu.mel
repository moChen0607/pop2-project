// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  Jun 2014
//
//
//  Procedure Name:
//      DynFluidsMenu
//
//  Description:
//		Create the DYNAMICS->nCache
//
//  Input Arguments:
//      parent to parent the menu to.
//
//  Return Value:
//      None.
//
proc DynNCacheLegacyMenuItems() {
	menuItem -divider true -l (uiRes("m_NucleusCacheMenu.kLegacyCache"));
	
	menuItem -label (uiRes("m_NucleusCacheMenu.kCreateParticleCache")) 
		-annotation (uiRes("m_NucleusCacheMenu.kCreateParticleCacheAnnot")) 
		-command   "CreateParticleDiskCache"
		-dragMenuCommand "performDynamics 0 ParticleRenderCache 2"
		-image   "bakeParticles.png"
		particleRenderCacheItem;
		menuItem -optionBox true 
			-annotation (uiRes("m_NucleusCacheMenu.kCreateParticleCacheOptionsAnnot")) 
			-command "CreateParticleDiskCacheOptions"
			particleRenderCacheDialogItem;

	menuItem -label (uiRes("m_NucleusCacheMenu.kEditOversampling")) 
		-annotation (uiRes("m_NucleusCacheMenu.kEditOversamplingAnnot")) 
		-command "EditOversamplingForCacheSettings"
		editOversampling;

	// Memory Caching sub menu
	//
	menuItem -label (uiRes("m_NucleusCacheMenu.kMemoryCaching")) -subMenu true sceneCaching;
		menuItem -label (uiRes("m_NucleusCacheMenu.kEnable")) 
				-annotation (uiRes("m_NucleusCacheMenu.kEnableAnnot")) 
				-command "EnableMemoryCaching" enableCaching;

		menuItem -label (uiRes("m_NucleusCacheMenu.kDisable")) 
				-annotation (uiRes("m_NucleusCacheMenu.kDisableAnnot")) 
				-command "DisableMemoryCaching" disableCaching;

		menuItem -label (uiRes("m_NucleusCacheMenu.kDelete")) 
				-annotation (uiRes("m_NucleusCacheMenu.kDeleteAnnot")) 
				-command "DeleteMemoryCaching" deleteCache;
		setParent -menu ..;
}

global proc NucleusCacheMenu ( string $parent ) {

	setParent -menu $parent;
	if( `menu -q -ni $parent` != 0 ) {
		//
		//	Menu is built already - just return
		//
		return;
	}
	
	// Cache menu
	//
	menuItem -divider true -dividerLabel (uiRes("m_NucleusCacheMenu.kNCacheCreate"));
	
	// Create New Cache sub-menu
	menuItem -l (uiRes("m_NucleusCacheMenu.kCreateCache")) -sm true -to true;
		menuItem -l (uiRes("m_NucleusCacheMenu.kCacheNObject"))
			-annotation (getRunTimeCommandAnnotation("nClothCache"))
			-image "nClothCacheCreate.png"
			-c "nClothCache"
			-dmc "performCreateNclothCache 2 0"
			nClothCacheItem;
			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("nClothCacheOpt"))
				-image "nClothCacheCreate.png"
				-c "nClothCacheOpt"
				nClothCacheOptItem;

		menuItem -label (uiRes("m_NucleusCacheMenu.kCacheMayaFluid"))
			-annotation (getRunTimeCommandAnnotation("CreateFluidCache"))
			-image "fluidCacheCreate.png"
			-command "CreateFluidCache"
			-dragMenuCommand "performCreateFluidCache 2 0"
			-dragDoubleClickCommand "CreateFluidCacheOptions";
			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("CreateFluidCacheOptions"))
				-command "CreateFluidCacheOptions";	
	setParent -m ..;
	
	menuItem -l (uiRes("m_NucleusCacheMenu.kMergeCache")) -sm true -to true;
		menuItem -l (uiRes("m_NucleusCacheMenu.kMergeCacheNObject"))
			-annotation (getRunTimeCommandAnnotation("nClothMergeCache"))
			-image "nClothCacheMerge.png" 
			-c "nClothMergeCache" 
			-dmc "performCreateNclothCache 2 \"merge\"" 
			-dragDoubleClickCommand "nClothMergeCacheOpt" 
			nClothMergeCacheItem;
			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("nClothMergeCacheOpt"))
				-image "nClothCacheMerge.png" 
				-c "nClothMergeCacheOpt" 
				nClothMergeCacheOptItem;

		menuItem -label (uiRes("m_NucleusCacheMenu.kMergeCacheMayaFluid"))
			-annotation (getRunTimeCommandAnnotation("fluidMergeCache"))
			-image "nClothCacheMerge.png" 
			-command "fluidMergeCache"
			-dragMenuCommand "performCreateFluidCache 2 \"merge\""
			-dragDoubleClickCommand "fluidMergeCacheOpt" 
			fluidMergeCacheItem;
			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("fluidMergeCacheOpt"))
				-command "fluidMergeCacheOpt" 
				fluidMergeCacheOptItem;
	setParent -m ..;

	menuItem -l (uiRes("m_NucleusCacheMenu.kReplaceCache")) -sm true -to true;
		menuItem -l (uiRes("m_NucleusCacheMenu.kReplaceCacheNObject"))
			-annotation (getRunTimeCommandAnnotation("nClothReplaceCache"))
			-image "nClothCacheReplace.png" 
			-c "nClothReplaceCache" 
			-dmc "performCreateNclothCache 2 \"replace\"" 
			-dragDoubleClickCommand "nClothReplaceCacheOpt" 
			nClothReplaceCacheItem;
			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("nClothReplaceCacheOpt"))
				-image "nClothCacheMerge.png" 
				-c "nClothReplaceCacheOpt" 
				nClothReplaceCacheOptItem;

		menuItem -label (uiRes("m_NucleusCacheMenu.kReplaceCacheMayaFluid"))
			-annotation (getRunTimeCommandAnnotation("fluidReplaceCache"))
			-image "fluidCacheReplace.png"
			-command "fluidReplaceCache"
			-dragMenuCommand "performCreateFluidCache 2 \"replace\"" 
			-dragDoubleClickCommand "fluidReplaceCacheOpt" 
			fluidReplaceCacheItem;
			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("fluidReplaceCacheOpt"))
				-command "fluidReplaceCacheOpt" 
				fluidReplaceCacheOptItem;
	setParent -m ..;

	menuItem -l (uiRes("m_NucleusCacheMenu.kEnableAllCache"))
		-annotation (uiRes("m_NucleusCacheMenu.kEnableAllCacheAnnot"))
		-image "nClothCacheEnable.png"
		-c "setCacheEnable 1 0 {}"
		enableAllNclothCacheItem;		
			
	menuItem -l (uiRes("m_NucleusCacheMenu.kDisableAllCache"))
		-annotation (uiRes("m_NucleusCacheMenu.kDisableAllCacheAnnot"))
		-image "nClothCacheDisable.png"
		-c "setCacheEnable 0 0 {}"
		disableAllNclothCacheItem;			
			
	menuItem -divider true -dividerLabel (uiRes("m_NucleusCacheMenu.kCacheEdit"));
			
	menuItem -l (uiRes("m_NucleusCacheMenu.kAppendCache"))
		-annotation (getRunTimeCommandAnnotation("cacheAppend"))
		-image "nClothCacheAppend.png"
		-c "cacheAppend"
		-dmc "performAppendCache 2"
		cacheAppendCacheItem;
        menuItem -optionBox true
            -annotation (getRunTimeCommandAnnotation("cacheAppendOpt"))
			-image "nClothCacheAppend.png"
            -c "cacheAppendOpt"
            cacheAppendOptItem;

	menuItem -l (uiRes("m_NucleusCacheMenu.kAttachCache"))
		-annotation (getRunTimeCommandAnnotation("attachCache"))
		-image "nClothCacheExisting.png"
		-c "attachCache"
		attachCacheItem;
	
	// Here we use fluidDeleteCache, but it actually calls deleteCacheFile 
	// which can delete both nCloth and fluid types.
	menuItem -l (uiRes("m_NucleusCacheMenu.kDeleteCache"))
		-annotation (getRunTimeCommandAnnotation("fluidDeleteCache"))
		-image "nClothCacheDelete.png"
		-c "fluidDeleteCache"
		deleteCacheItem;
        menuItem -optionBox true
            -annotation (getRunTimeCommandAnnotation("fluidDeleteCacheOpt"))
			-image "nClothCacheDelete.png"
            -c "fluidDeleteCacheOpt"
            deleteCacheOptItem;

	menuItem -divider true -dividerLabel (uiRes("m_NucleusCacheMenu.kCacheFrame"));	

	menuItem -l (uiRes("m_NucleusCacheMenu.kReplaceCacheFrames"))
		-annotation (getRunTimeCommandAnnotation("replaceCacheFrames"))
		-image "nClothCacheReplaceFrames.png"
		-c "replaceCacheFrames"
		-dmc "performReplaceCacheFrames 2"
		replaceCacheFramesItem;
        menuItem -optionBox true
            -annotation (getRunTimeCommandAnnotation("replaceCacheFramesOpt"))
			-image "nClothCacheReplaceFrames.png"
            -c "replaceCacheFramesOpt"
            replaceCacheFramesOptItem;
	
	// Here we use fluidDeleteCacheFrames, but it actually calls deleteCacheFile 
	// which can delete both nCloth and fluid types.
	menuItem -l (uiRes("m_NucleusCacheMenu.kDeleteCacheFrames"))
		-annotation (getRunTimeCommandAnnotation("fluidDeleteCacheFrames"))
		-image "nClothCacheDeleteFrame.png"
		-c "fluidDeleteCacheFrames"
		-dmc "performDeleteFluidCacheFrames 2"
		deleteCacheFramesItem;
        menuItem -optionBox true
            -annotation (getRunTimeCommandAnnotation("fluidDeleteCacheFramesOpt"))
            -c "fluidDeleteCacheFramesOpt"
            deleteCacheFramesOptItem;
			
	menuItem -divider true -dividerLabel (uiRes("m_NucleusCacheMenu.kCacheNCloth"));

	menuItem -l (uiRes("m_NucleusCacheMenu.kPaintCache"))
		-annotation (getRunTimeCommandAnnotation("PaintCacheTool"))
		-image "paintCacheWeights.png"
		-c "PaintCacheTool"
		nclothPaintCacheItem;
        menuItem -optionBox true
		-image "paintCacheWeights.png"			
            -annotation (getRunTimeCommandAnnotation("PaintCacheToolOptions"))
            -c "PaintCacheToolOptions"
            nClothPaintCacheOptItem;

	menuItem -l (uiRes("m_NucleusCacheMenu.kTransferCacheToInput"))
		-annotation (uiRes("m_NucleusCacheMenu.kMoveCacheAnnot"))
		-image "nClothCacheTransfer.png"
		-c "moveCacheToInput 0"
		nClothMoveCacheToInputItem;

	// Legacy Cache
	if(`getenv "MAYA_ENABLE_LEGACY_PARTICLES"` !="0") {
		DynNCacheLegacyMenuItems;
	}
}
