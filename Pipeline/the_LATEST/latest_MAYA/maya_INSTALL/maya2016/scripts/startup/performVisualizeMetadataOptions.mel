// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  June 4, 2014
//
//  Description:
//      This script is used to handle visualization options for metadata
//
//  Input Arguments:
//      int showOptionBox		true - show the option box dialog
//								false - just execute the command
//
//  Return Value:
//      None.
//

// Three visual method name of metadata 
global string $visualMethodNames[];

// Stored option setting for each stream
global string 	$savedStreamMembers[];
global int		$savedVisualMethodSettings[];
global int		$savedDataRemappingSettings[];
global float	$savedRangeSettings[];
global int		$savedInterpolationSettings[];
global float	$savedRayScaleSettings[];

global int		$defaultVisualMethod = 1;
global int		$defaultRemapType = 1;
global float	$defaultMinValue = 0.0;
global float	$defaultMaxValue = 1.0;
global int		$defaultInterpolation = 0;
global float	$defaultRayScale = 1.0;

//
//  Procedure Name:
//      buildMemberName
//
//  Description:
//		Join member name with member type together
//		to show them on UI 
//
//  Input Arguments:
//      memberName	- the name of the member
//		memberType	- the type string of the member
//
//  Return Value:
//      A string contains both memberName and memberType
//
global proc string buildMemberName(string $memberName, string $memberType)
{
	string $memberName = $memberName + "." + $memberType;
	return $memberName;
}

//
//  Procedure Name:
//      buildStreamMemberName
//
//  Description:
//		Join stream name with member name
//		to handle visualization through UI
//		and script
//
//  Input Arguments:
//      streamName	- the name of the stream
//		memberName	- the name of the member
//
//  Return Value:
//      The name of the current stream and member
//
global proc string buildStreamMemberName(string $streamName, string $memberName)
{
	string $streamMemberName = $streamName + "." + $memberName;
	return $streamMemberName;
}

//
//  Procedure Name:
//      getCurrentStreamMember
//
//  Description:
//		Query the current stream and member.
//		The current stream&member could be either activated or
//		inactivated by menu directly. 
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      The name of the current stream
//
global proc string getCurrentStreamMember()
{
	string $currentStreamMemberName = "";
	if(`optionVar -exists metadataVisualCurrentStreamMember`) 
	{
		$currentStreamMemberName = `optionVar -query metadataVisualCurrentStreamMember`;
	}
	if(size($currentStreamMemberName) == 0)
	{
		string $defaultStreamMember = "";
		string $allShapes[] = `ls -shapes`;
		if(size($allShapes) > 0)
		{
			string $allStreams[] = `showMetadata -query -listAllStreams $allShapes`;
			if(size($allStreams) > 0)
			{
				string $members[] = `showMetadata -query -stream $allStreams[0] -listMembers $allShapes`;
				if(size($members) > 1)
				{
					// default stream member name is "streamName.memberName.memberType"
					$defaultStreamMember = $allStreams[0] + "." + $members[0] + "." + $members[1];
				}	
			}	
		}
		optionVar -sv metadataVisualCurrentStreamMember $defaultStreamMember;
	}
	return `optionVar -query metadataVisualCurrentStreamMember`;
}

//
//  Procedure Name:
//      activateStreamMember
//
//  Description:
//		Activate the specified stream and member
//
//  Input Arguments:
//      streamName	- the name of the specified stream
//
//  Return Value:
//	None.
//
global proc activateStreamMember(string $streamMemberName)
{
	// Don't activate already activated stream again.
	string $currentStreamMember = getCurrentStreamMember();
	if($currentStreamMember == $streamMemberName)
	{
		string $tokens[] = stringToStringArray($currentStreamMember, ".");
		string $allShapes[] = `ls -shapes`;
		int $isActivated = `showMetadata -query -isActivated -stream $tokens[0] -member $tokens[1] -dataType $tokens[2] $allShapes`;
		if($isActivated)
		{
			return;
		}
	}

	optionVar -sv metadataVisualCurrentStreamMember $streamMemberName;
	performVisualizeMetadataOptions(0);
}

//
//  Procedure Name:
//      updateMetadataOptionBox
//
//  Description:
//	Update all options in the option box
//	to reflects the current setting.
//
//  Input Arguments:
//	None.
//
//  Return Value:
//	None.
//
global proc updateMetadataOptionBox()
{
	global string $streamListWidget;
	global string $memberListWidget;
	if(`optionMenuGrp -query -exists $streamListWidget`)
	{
		string $currentStreamMember = getCurrentStreamMember();
		string $streamMemberTokens[] = stringToStringArray($currentStreamMember, ".");
		string $memberName = buildMemberName($streamMemberTokens[1], $streamMemberTokens[2]);
		int $i;
		int $j;
		string $streamItems[] = `optionMenuGrp -q -itemListLong $streamListWidget`;
		int  $selectedStreamOption = `optionMenuGrp -q -select $streamListWidget`;
		
		for($i = 0; $i < size($streamItems); $i++)
		{
			string $label = `menuItem -q -label $streamItems[$i]`;
			if($label == $streamMemberTokens[0])
			{
				if($selectedStreamOption != $i+1)
				{
					$selectedStreamOption = $i+1;
					optionMenuGrp -e -select $selectedStreamOption $streamListWidget;
					switchStream(0);
				}
				
				string $memberItems[] = `optionMenuGrp -q -itemListLong $memberListWidget`;
				int  $selectedMemberOption = `optionMenuGrp -q -select $memberListWidget`;
				for($j = 0; $j < size($memberItems); $j++)
				{
					string $label = `menuItem -q -label $memberItems[$j]`;
					if($label == $memberName)
					{
						if($selectedMemberOption != $j+1)
						{
							$selectedMemberOption = $j+1;
							optionMenuGrp -e -select $selectedMemberOption $memberListWidget;
							
						}
					}
				}
				switchMember();
			}
		}
	}
}

//
//  Procedure Name:
//      setOptionVars
//
//  Description:
//		Initialize the option values.
//
//  Input Arguments:
//		Whether to set the options to default values.
//
//  Return Value:
//      None.
//
proc setOptionVars(int $forceFactorySettings)
{
	global string $visualMethodNames[];
	$visualMethodNames = {"color", "string", "ray"};
	
	global string 	$savedStreamMembers[];
	global int		$savedVisualMethodSettings[];
	global int		$savedDataRemappingSettings[];
	global float	$savedRangeSettings[];
	global int		$savedInterpolationSettings[];
	global float 	$savedRayScaleSettings[];
	global string 	$visualMethodNames[];
	
	global int		$defaultVisualMethod;
	global int		$defaultRemapType;
	global float	$defaultMinValue;
	global float	$defaultMaxValue;
	global int		$defaultInterpolation;
	global float	$defaultRayScale;
	
	// clean all saved settings
	if($forceFactorySettings)
	{
		$savedStreamMembers = {};
		$savedVisualMethodSettings = {};
		$savedDataRemappingSettings = {};
		$savedRangeSettings = {};
		$savedInterpolationSettings = {};

		optionVar -sv metadataVisualCurrentStreamMember "";
		optionVar -sv metadataVisualMethod $visualMethodNames[$defaultVisualMethod - 1];
		optionVar -fv metadataVisualMin $defaultMinValue;
		optionVar -fv metadataVisualMax $defaultMaxValue;
		optionVar -iv metadataVisualAuto 0;
		optionVar -iv metadataVisualInterpolation $defaultInterpolation;
		optionVar -fv metadataVisualRayScale $defaultRayScale;
		
	}
	else
	{
		string $allShapes[] = `ls -shapes`;
		string $allStreams[] = `showMetadata -query -listAllStreams $allShapes`;
		if(size($allStreams) <= 0)
		{	
			optionVar -sv metadataVisualCurrentStreamMember "";
			return;
		}
		
		string $currentStreamMember = getCurrentStreamMember();
	
		int $i; 
		int $currentStreamIndex = stringArrayFind($currentStreamMember, 0, $savedStreamMembers);
		
		// if UI does not exists, the saved setting or the
		// default settings will be used.
		if($currentStreamIndex >= 0)
		{	
			string $visualMethodName = $visualMethodNames[$savedVisualMethodSettings[$currentStreamIndex]-1];
			optionVar -sv metadataVisualMethod $visualMethodName;
			
			optionVar -fv metadataVisualMin $savedRangeSettings[($currentStreamIndex)*2];
			optionVar -fv metadataVisualMax $savedRangeSettings[($currentStreamIndex)*2+1];

			optionVar -iv metadataVisualAuto ($savedDataRemappingSettings[$currentStreamIndex] == 3);
			optionVar -iv metadataVisualInterpolation $savedInterpolationSettings[$currentStreamIndex];
			
			optionVar -fv metadataVisualRayScale $savedRayScaleSettings[$currentStreamIndex];
		}
		else
		{
			optionVar -sv metadataVisualMethod $visualMethodNames[$defaultVisualMethod - 1];
			optionVar -fv metadataVisualMin $defaultMinValue;
			optionVar -fv metadataVisualMax $defaultMaxValue;
			optionVar -iv metadataVisualAuto 0;
			optionVar -iv metadataVisualInterpolation $defaultInterpolation;
			optionVar -fv metadataVisualRayScale $defaultRayScale;
		}
	}
}

//
//  Procedure Name:
//      visualizeMetadataSetup
//
//  Description:
//		Update the state of the option box UI to reflect the option values.
//
//  Input Arguments:
//      parent              - Top level parent layout of the option box UI.
//                             Required so that UI object names can be 
//                             successfully resolved.
//
//	forceFactorySettings 	- Whether the option values should be set to
//                             default values.
//
//  Return Value:
//      None.
//
global proc visualizeMetadataSetup(int $forceFactorySettings)
{
	setOptionVars($forceFactorySettings);
	string $allShapes[] = `ls -shapes`;

	int $i;
	int $j;
	global string $streamListWidget;
	global string $memberListWidget;

	if(size($allShapes) > 0 && `optionMenuGrp -query -exists $streamListWidget` && `optionMenuGrp -query -exists $memberListWidget`)
	{
		string $currentStreamMemberName = `optionVar -query metadataVisualCurrentStreamMember`;
		string $allStreamList[] = `showMetadata -query -listAllStreams $allShapes`;
	
		// clean old options 
		string $menuItems[] = `optionMenuGrp -q -itemListLong $streamListWidget`;
		if(size($menuItems) > 0)
			deleteUI -menuItem $menuItems;
			
		// clean old options 
		string $menuItems[] = `optionMenuGrp -q -itemListLong $memberListWidget`;
		if(size($menuItems) > 0)
			deleteUI -menuItem $menuItems;	
			
		// reset saved options to its previous setting 
		global string 	$savedStreamMembers[];
		global int		$savedVisualMethodSettings[];
		global int		$savedDataRemappingSettings[];
		global float	$savedRangeSettings[];
		global int		$savedInterpolationSettings[];
		global float	$savedRayScaleSettings[];
		
		string 	$newStreamMembers[];
		int 	$visualMethodSettings[];
		int 	$dataRemappingSettings[];
		float	$rangeSettings[];
		int		$interpolationSettings[];
		float	$rayScaleSettings[];
		
		int		$selectedStreamIndex = 1;
		int		$selectedMemberIndex = 1;
		// add menu item according to the streams
		int $currentStreamActivated = 0;
		
		string $membersInStream[];
		// look for the activated menu
		string $streamMemberTokens[] = stringToStringArray($currentStreamMemberName, ".");
		for($i = 0; $i < size($allStreamList); $i++)
		{
			if($streamMemberTokens[0] == $allStreamList[$i])
			{
				$membersInStream = `showMetadata -query -stream $allStreamList[$i] -listMembers $allShapes`;

				for($j = 0; $j < (size($membersInStream)/2); $j++)
				{
					if(!$currentStreamActivated 
						&& $streamMemberTokens[1] == $membersInStream[$j*2]
						&& $streamMemberTokens[2] == $membersInStream[$j*2+1])
					{
						$selectedStreamIndex = ($i+1);
						$selectedMemberIndex = ($j+1);
						$currentStreamActivated = 1;
						break;
					}
				}	
			}	
			
			if($currentStreamActivated)
				break;
		}
		
		// create menus
		string $streamListWidgetMenu = $streamListWidget + "|OptionMenu";
		for($i = 0; $i < size($allStreamList); $i++)
		{
			menuItem -label $allStreamList[$i] -parent $streamListWidgetMenu;
		}
		
		string $memberListWidgetMenu = $memberListWidget + "|OptionMenu";
		$membersInStream = `showMetadata -query -stream $allStreamList[$selectedStreamIndex - 1] -listMembers $allShapes`;
		for($j = 0; $j < (size($membersInStream)/2); $j++)
		{
			string $memberName = buildMemberName($membersInStream[$j*2], $membersInStream[$j*2+1]);
			menuItem -label $memberName -parent $memberListWidgetMenu;
		}	
		
		// select the first stream if no specified one
		if(`optionMenuGrp -query -numberOfItems $streamListWidget` > 0 && `optionMenuGrp -query -numberOfItems $memberListWidget` > 0 )
		{
			optionMenuGrp -e -select $selectedStreamIndex $streamListWidget;
			optionMenuGrp -e -select $selectedMemberIndex $memberListWidget;
		}
	}
		
	// update UI default setting
	switchMember();
}

//
//  Procedure Name:
//      visualizeMetadataCallback
//
//  Description:
//		Update the option values with the current state of the option box UI.
//
//  Input Arguments:
//      parent - Top level parent layout of the option box UI.  Required so
//               that UI object names can be successfully resolved.
//
//		doIt   - Whether the command should execute.
//
//  Return Value:
//      None.
//
global proc visualizeMetadataCallback(int $doIt)
{
	global string   $streamListWidget;
	global string   $memberListWidget;
	global string 	$savedStreamMembers[];
	global int		$savedVisualMethodSettings[];
	global int		$savedDataRemappingSettings[];
	global float	$savedRangeSettings[];
	global int		$savedInterpolationSettings[];
	global float 	$savedRayScaleSettings[];
		
	int $currentStreamMemberOption = -1;
	// get the index of the selected stream
	if(`optionMenuGrp -query -exists $streamListWidget` && `optionMenuGrp -query -exists $memberListWidget`)
	{
		string $streamItems[] = `optionMenuGrp -q -itemListLong $streamListWidget`;
		int  $selectedStreamOption = `optionMenuGrp -q -select $streamListWidget`;
		
		string $memberItems[] = `optionMenuGrp -q -itemListLong $memberListWidget`;
		int  $selectedMemberOption = `optionMenuGrp -q -select $memberListWidget`;
		
		if(size($streamItems) > 0 && $selectedStreamOption > 0
			&& size($memberItems) > 0 && $selectedMemberOption > 0)
		{
			string $streamName = `menuItem -q -label $streamItems[$selectedStreamOption-1]`;
			string $memberName = `menuItem -q -label $memberItems[$selectedMemberOption-1]`;
			string $streamMemberName = buildStreamMemberName($streamName, $memberName);
			optionVar -sv metadataVisualCurrentStreamMember $streamMemberName;
			
			$currentStreamMemberOption = stringArrayFind($streamMemberName, 0, $savedStreamMembers);
			if($currentStreamMemberOption < 0)
			{
				$currentStreamMemberOption = size($savedStreamMembers);
				$savedStreamMembers[$currentStreamMemberOption] = $streamMemberName;
			}
		}
	}	
	
	global string $visualMethodWidget;
	if(`radioButtonGrp -query -exists $visualMethodWidget`)
	{
		global string $visualMethodNames[];
		if(size($visualMethodNames) > 0)
		{
			int  $visualMethodOption = `radioButtonGrp -q -select $visualMethodWidget`;
			string $visualMethodName = $visualMethodNames[$visualMethodOption-1];
			optionVar -sv metadataVisualMethod $visualMethodName;
			
			if($currentStreamMemberOption >= 0)
			{
				$savedVisualMethodSettings[$currentStreamMemberOption] = $visualMethodOption;
			}
			// set the data Color interpretation according to the
			// selected UI option
			global string $colorRemapRangeWidget;
			if(`radioButtonGrp -query -exists $colorRemapRangeWidget`)
			{
				int  $currentRemapRange = `radioButtonGrp -q -select $colorRemapRangeWidget`;
				float   $visualMin;
				float   $visualMax;
				int		$visualAuto;
				switch($currentRemapRange)
				{
					// 0-1
					case 1:
						$visualAuto = 0;
						$visualMin = 0.0;
						$visualMax= 1.0;
					break;
					
					// 0-255
					case 2:
						$visualAuto = 0;
						$visualMin = 0.0;
						$visualMax= 255.0;
					break;
					
					// auto
					case 3:
						$visualAuto = 1;
						$visualMin = 0.0;
						$visualMax= 1.0;
					break;
					
					// customized range
					case 4:
						$visualAuto = 0;
						$visualMin = 0.0;
						$visualMax= 1.0;
						
						global string $colorRemapLowerRangeWidget;
						if(`floatFieldGrp -q -exists $colorRemapLowerRangeWidget`)
							$visualMin = `floatFieldGrp -q -value1 $colorRemapLowerRangeWidget`;
						
						global string $colorRemapUpperRangeWidget;
						if(`floatFieldGrp -q -exists $colorRemapUpperRangeWidget`)
							$visualMax = `floatFieldGrp -q -value1 $colorRemapUpperRangeWidget`;
					break;
				}
				optionVar -iv metadataVisualAuto $visualAuto;
				optionVar -fv metadataVisualMin $visualMin;
				optionVar -fv metadataVisualMax $visualMax;
				
				if($currentStreamMemberOption >= 0)
				{
					$savedDataRemappingSettings[$currentStreamMemberOption] = $currentRemapRange;
					$savedRangeSettings[($currentStreamMemberOption)*2] = $visualMin;
					$savedRangeSettings[($currentStreamMemberOption)*2+1] = $visualMax;
				}
			}
			
			// set the interpolation option
			global string $colorInterpolationWidget;
			if(`checkBoxGrp -query -exists $colorInterpolationWidget`)
			{
				int $isInterpolation = `checkBoxGrp -query -value1 $colorInterpolationWidget`;
				optionVar -iv metadataVisualInterpolation $isInterpolation;
				if($currentStreamMemberOption >= 0)
				{
					$savedInterpolationSettings[$currentStreamMemberOption] = $isInterpolation;
				}	
			}
			
			
			// set the ray scale option
			global string $metadataRayScaleWidget;
			if(`floatSliderGrp -query -exists $metadataRayScaleWidget`)
			{
				float $rayScale = `floatSliderGrp -query -value $metadataRayScaleWidget`;
				optionVar -fv metadataVisualRayScale $rayScale;
				if($currentStreamMemberOption >= 0)
				{
					$savedRayScaleSettings[$currentStreamMemberOption] = $rayScale;
				}	
			}
			
		}	
	}

	if ($doIt) {
		performVisualizeMetadataOptions 0; 
		addToRecentCommandQueue "performVisualizeMetadataOptions 0" "VisualizeMetadataOptions";
	}
}

//
//  Procedure Name:
//      switchColorRemmapType
//
//  Description:
//		Show or hide the custom range text box according to the
//		selected remapping type for color. Show the text widget
//		only when "custom range" is choosed. Otherwise, hide it.
//		This callback method is called when the state of the radio 
//		button group "Color interpretation" is changed.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
global proc switchColorRemmapType()
{
	global string $colorRemapRangeWidget;
	if(`radioButtonGrp -q -exists $colorRemapRangeWidget`)
	{
		int $colorRemapType = `radioButtonGrp -q -sl $colorRemapRangeWidget`;
		global string $colorRemapRangeLayout;
		if(`frameLayout -q -exists $colorRemapRangeLayout`)
		{
			frameLayout -e -enable ($colorRemapType == 4) $colorRemapRangeLayout;
		}
	}
}

//
//  Procedure Name:
//      switchVisualMethod
//
//  Description:
//		Show or hide the related widgets for different visual methd
//		When the method "color" is choosed, show its remapping options,
//		interpolation option and highlight option.
//		When the method "ray" is choosed, show its remapping options.
//		When the method "string" is choosed, show nothing.
//		This callback method is called when the state of the radio button group 
//		"visualization method" is changed
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
global proc switchVisualMethod()
{	
	global string $visualMethodWidget;
	if(`radioButtonGrp -q -exists $visualMethodWidget`)
	{
		int $visualMethod = `radioButtonGrp -q -sl $visualMethodWidget`;
		global string $colorRemapLayout;
		global string $rayRemapLayout;
		
		// visual method is color, display color remap options
		if($visualMethod == 1)
		{
			if(`frameLayout -query -exists $rayRemapLayout`)
				frameLayout -e -visible false $rayRemapLayout;
				
			if(`frameLayout -query -exists $colorRemapLayout`)
				frameLayout -e -visible true $colorRemapLayout;
		}
		// visual method is ray, display ray remap options
		else if($visualMethod == 3)
		{
			if(`frameLayout -query -exists $colorRemapLayout`)
				frameLayout -e -visible false $colorRemapLayout;
			
			if(`frameLayout -query -exists $rayRemapLayout`)
				frameLayout -e -visible true $rayRemapLayout;
		}	
		// visual method is string, hide both remap options
		else //if($visualMethod == 2)
		{
			if(`frameLayout -query -exists $rayRemapLayout`)
				frameLayout -e -visible false $rayRemapLayout;
				
			if(`frameLayout -query -exists $colorRemapLayout`)
				frameLayout -e -visible false $colorRemapLayout;
		}
	}
}

//
//  Procedure Name:
//      switchStream
//
//  Description:
//		Enable/Disable visual method widget 
//		according to data type of the selected stream
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
global proc switchStream(int $resetOption)
{
	global string $streamListWidget;
	global string $memberListWidget;	
	global string $visualMethodWidget;
	global string $visualMethodNames[];
	global string $colorRemapRangeWidget;
	global string $colorRemapLowerRangeWidget;
	global string $colorRemapUpperRangeWidget;
	global string $colorInterpolationWidget;	
	global string $metadataRayScaleWidget;;
	
	if(`optionMenuGrp -query -exists $streamListWidget` && `optionMenuGrp -query -exists $memberListWidget`)
	{
		string $menuItems[] = `optionMenuGrp -q -itemListLong $streamListWidget`;
		int  $selectedStreamOption = `optionMenuGrp -q -select $streamListWidget`;
		string $streamName = `menuItem -q -label $menuItems[$selectedStreamOption-1]`;
		
		string $allShapes[] = `ls -shapes`;
		string $membersInStream[] = `showMetadata -q -stream $streamName -listMembers $allShapes`;
		
		// clean old options 
		string $menuItems[] = `optionMenuGrp -q -itemListLong $memberListWidget`;
		if(size($menuItems) > 0)
			deleteUI -menuItem $menuItems;
		
		string $memberListWidgetMenu = $memberListWidget + "|OptionMenu";
		for($i = 0; $i < (size($membersInStream) / 2); $i++)
		{
			string $memberNameAndType = buildMemberName( $membersInStream[$i * 2], $membersInStream[$i * 2 + 1] );
			menuItem -label $memberNameAndType -parent $memberListWidgetMenu;
		}
		optionMenuGrp -e -select 1 $memberListWidget;
		
		if($resetOption)
			switchMember();		
	}	
}


//
//  Procedure Name:
//      switchMember
//
//  Description:
//		Enable/Disable visual method widget 
//		according to data type of the selected stream
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
global proc switchMember()
{
	global string $streamListWidget;
	global string $memberListWidget;
	global string $visualMethodWidget;
	global string $visualMethodNames[];
	global string $colorRemapRangeWidget;
	global string $colorRemapLowerRangeWidget;
	global string $colorRemapUpperRangeWidget;
	global string $colorInterpolationWidget;	
	global string $metadataRayScaleWidget;
	
	global string 	$savedStreamMembers[];
	global int		$savedVisualMethodSettings[];
	global int		$savedDataRemappingSettings[];
	global float	$savedRangeSettings[];
	global int		$savedInterpolationSettings[];
	global float	$savedRayScaleSettings[];

	if(`optionMenuGrp -query -exists $streamListWidget` && `optionMenuGrp -query -exists $memberListWidget`)
	{
		global int		$defaultVisualMethod;
		global int		$defaultRemapType;
		global float	$defaultMinValue;
		global float	$defaultMaxValue;
		global int		$defaultInterpolation;
		global float	$defaultRayScale;

		// set UI to default value if no saved
		int		$visualMethod 	= $defaultVisualMethod;
		int		$remapType 		= $defaultRemapType;
		float	$minValue		= $defaultMinValue;
		float	$maxValue 		= $defaultMaxValue;
		int		$interpolation 	= $defaultInterpolation;
		float 	$rayScale 		= $defaultRayScale;

		// use stored settings
		string $streamItems[] = `optionMenuGrp -q -itemListLong $streamListWidget`;
		int  $selectedStreamOption = `optionMenuGrp -q -select $streamListWidget`;
		
		// no stream items
		if(size($streamItems) == 0 || $selectedStreamOption == 0)
			return;

		string $streamName = `menuItem -q -label $streamItems[$selectedStreamOption-1]`;
		
		string $memberItems[] = `optionMenuGrp -q -itemListLong $memberListWidget`;
		int  $selectedMemberOption = `optionMenuGrp -q -select $memberListWidget`;
		
		// no member items
		if(size($memberItems) == 0 || $selectedMemberOption == 0)
			return;
		
		string $memberName = `menuItem -q -label $memberItems[$selectedMemberOption-1]`;

		string $streamMemberName = buildMemberName($streamName, $memberName);
		
		int $streamMemberIndex = stringArrayFind($streamMemberName, 0, $savedStreamMembers);

		if($streamMemberIndex >= 0 && size($savedStreamMembers) >= $streamMemberIndex)
		{
			$visualMethod 	= $savedVisualMethodSettings[$streamMemberIndex];
			$remapType 		= $savedDataRemappingSettings[$streamMemberIndex];
			$minValue 		= $savedRangeSettings[$streamMemberIndex*2];
			$maxValue 		= $savedRangeSettings[$streamMemberIndex*2+1];
			$interpolation 	= $savedInterpolationSettings[$streamMemberIndex];
			$rayScale 		= $savedRayScaleSettings[$streamMemberIndex];
		}

		// update visual method option when the stream is changed
		if(`radioButtonGrp -query -exists $visualMethodWidget`)
			radioButtonGrp -e -select $visualMethod $visualMethodWidget;
		
		// update data remapping type option when the stream is changed
		if(`radioButtonGrp -query -exists $colorRemapRangeWidget` )
		{
			radioButtonGrp -e -select $remapType $colorRemapRangeWidget;

			switchColorRemmapType();
		}	
		
		// update data Color interpretation option when the stream is changed
		if(`floatFieldGrp -q -exists $colorRemapLowerRangeWidget` && `floatFieldGrp -q -exists $colorRemapUpperRangeWidget`)
		{
			floatFieldGrp -e -value1 $minValue $colorRemapLowerRangeWidget;
			floatFieldGrp -e -value1 $maxValue $colorRemapUpperRangeWidget;
		}
		
		// update interpolation option when the stream is changed
		if(`checkBoxGrp -query -exists $colorInterpolationWidget`)
		{
			checkBoxGrp -e -value1 $interpolation $colorInterpolationWidget;
		}
		
		// update interpolation option when the stream is changed
		if(`checkBoxGrp -query -exists $colorInterpolationWidget`)
		{
			checkBoxGrp -e -value1 $interpolation $colorInterpolationWidget;
		}
		
		// update ray scale value when the stream is changed
		if(`floatSliderGrp -q -exists $metadataRayScaleWidget`)
		{
			floatSliderGrp -e -value $rayScale $metadataRayScaleWidget;
		}

		if(`radioButtonGrp -query -exists $visualMethodWidget`)
		{
			int $disableVisualMethodWidget = 0;
			if(size($streamItems) > 0 && $selectedStreamOption > 0
				&& size($memberItems) > 0 && $selectedMemberOption > 0)
			{
				string $selectedMember = `menuItem -q -label $memberItems[$selectedMemberOption-1]`;
				
				string $memberTokens[] = stringToStringArray($selectedMember, ".");
				string $memberTypeName = substring($memberTokens[1], 1, 6);
				
				int $selectedMethodIndex = `radioButtonGrp -q -select $visualMethodWidget`;
				if($memberTypeName == "string")
				{
					$selectedMethodIndex = 2;
					$disableVisualMethodWidget = 1;
				}
					
				radioButtonGrp -e -select $selectedMethodIndex $visualMethodWidget;
			}
			
			if($disableVisualMethodWidget)
			{
				// disable enable all visual method widgets
				radioButtonGrp -e -enable1 0 $visualMethodWidget;
				radioButtonGrp -e -enable3 0 $visualMethodWidget;
			}			
			else
			{
				// enable all visual method widgets
				radioButtonGrp -e -enable1 1 $visualMethodWidget;
				radioButtonGrp -e -enable2 1 $visualMethodWidget;
				radioButtonGrp -e -enable3 1 $visualMethodWidget;
			}		
		}
		
		switchVisualMethod();		
	}	
}

//
//  Procedure Name:
//      visualizeMetadataOptions
//
//  Description:
//		Construct the option box UI.  Involves accessing the standard option
//		box and customizing the UI accordingly.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
proc visualizeMetadataOptions()
{
	//	Name of the command for this option box.
	//
	string $commandName = "visualizeMetadata";

	//	Build the option box actions.
	//
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

 	//	STEP 1:  Get the option box.
	//	============================
	//
	//	The value returned is the name of the layout to be used as
	//	the parent for the option box UI.
	//
	string $layout = getOptionBox();
	setParent $layout;
	
	//	STEP 2:  Pass the command name to the option box.
	//	=================================================
	//
	//	Any default option box behaviour based on the command name is set 
	//	up with this call.  For example, updating the 'Help' menu item with
	//	the name of the command.
	//
	setOptionBoxCommandName($commandName);
	
	//	STEP 3:  Activate the default UI template.
	//	==========================================
	//
	//	Activate the default UI template so that the layout of this 
	//	option box is consistent with the layout of the rest of the 
	//	application.
	//
	setUITemplate -pushTemplate DefaultTemplate;

	//	STEP 4: Create option box contents.
	//	===================================
	//	
	//	This, of course, will vary from option box to option box.	
	
	//	Turn on the wait cursor.
	//
	waitCursor -state 1;

	tabLayout -tabsVisible 0 -scrollable 1 -innerMarginWidth 4;
		columnLayout -adjustableColumn true;
			// pointSpace of texture deformer
			
			string $changeCmd = "switchStream(1);";
			global string $streamListWidget;
			$streamListWidget = `optionMenuGrp -cc $changeCmd -label (uiRes("m_performVisualizeMetadataOptions.kStreamToVisualize")) streamToVisualizeWidget`;

			$changeCmd = "switchMember;";
			global string $memberListWidget;
			$memberListWidget = `optionMenuGrp -cc $changeCmd -label (uiRes("m_performVisualizeMetadataOptions.kMemberToVisualize")) memberListWidget`;
		
			global int		$defaultVisualMethod;
			global int		$defaultRemapType;
			global float	$defaultMinValue;
			global float	$defaultMaxValue;
			global int		$defaultInterpolation;
			global float	$defaultRayScale;
			
			global string $visualMethodWidget;
			$visualMethodWidget = `radioButtonGrp -label (uiRes("m_performVisualizeMetadataOptions.kVisualMethod"))  -nrb 3
									-select $defaultVisualMethod
									-onCommand "switchVisualMethod();"
									-label1 (uiRes("m_performVisualizeMetadataOptions.kVisualColor"))
									-label2 (uiRes("m_performVisualizeMetadataOptions.kVisualString"))
									-label3 (uiRes("m_performVisualizeMetadataOptions.kVisualRay"))
									VisualMethodWidget`;
					
			// make remap option widgets for color
			global string $colorRemapLayout;
			$colorRemapLayout = `frameLayout -marginWidth 1 -marginHeight 5 -labelVisible false 
				-collapse false`;			
				global string $colorRemapRangeWidget;
				$colorRemapRangeWidget = `radioButtonGrp -label (uiRes("m_performVisualizeMetadataOptions.kColorRemapType"))  
												-numberOfRadioButtons  4 
												-select $defaultRemapType
												-vertical
												-onCommand "switchColorRemmapType();"
												-label1 (uiRes("m_performVisualizeMetadataOptions.kFloatColor"))  
												-label2 (uiRes("m_performVisualizeMetadataOptions.kIntColor"))  
												-label3 (uiRes("m_performVisualizeMetadataOptions.kAutoColor"))
												-label4 (uiRes("m_performVisualizeMetadataOptions.kCustomColor")) 												
												ColorRemapWidget`;	
												
				// make remap option widgets for color
				global string $colorRemapRangeLayout;
				$colorRemapRangeLayout = `frameLayout -marginHeight 5 -labelVisible false -enable false 
					-collapse false`;
					columnLayout;
						global string $colorRemapLowerRangeWidget;
						$colorRemapLowerRangeWidget = `floatFieldGrp -numberOfFields 1 
														-label (uiRes("m_performVisualizeMetadataOptions.kColorRemapLowerRange"))  
														-value1 $defaultMinValue`;
								
						global string $colorRemapUpperRangeWidget;
						$colorRemapUpperRangeWidget = `floatFieldGrp -numberOfFields 1 
														-label (uiRes("m_performVisualizeMetadataOptions.kColorRemapUpperRange"))  
														-value1 $defaultMaxValue`;
					setParent ..;				
				setParent ..;									
											
				global string $colorInterpolationWidget;
				$colorInterpolationWidget = `checkBoxGrp -numberOfCheckBoxes 1 -label "" 
														-label1 (uiRes("m_performVisualizeMetadataOptions.kEnableInterpolationCheck")) 
														-value1 $defaultInterpolation
												EnableInterpolationCheckBox`;		
				
				checkBoxGrp -numberOfCheckBoxes 1 -visible false -label "" -label1 (uiRes("m_performVisualizeMetadataOptions.kInvalidDataCheck")) 
					EnableInvalidDataCheckBox;
					
			setParent ..;	

			// make remap option widgets for ray
			global string 	$rayRemapLayout;
			$rayRemapLayout = `frameLayout -labelVisible false -marginHeight 5 -visible false 
				-collapse false`;	
				global string $metadataRayScaleWidget;
				$metadataRayScaleWidget = `floatSliderGrp -label (uiRes("m_performVisualizeMetadataOptions.kMetadataRayScaleLabel")) 
														-field true
														-minValue 0.0001 -maxValue 10.0
														-fieldMinValue 0.0001 -fieldMaxValue 1000000000.0
														-value $defaultRayScale`;
			setParent ..;

		setParent ..;
	setParent ..;
	
	//	Turn off the wait cursor.
	//
	waitCursor -state 0;
	
	//	Step 5: Deactivate the default UI template.
	//	===========================================
	//
	setUITemplate -popTemplate;

	//	Step 6: Customize the buttons.  
	//	==============================
	//
	//	Provide more descriptive labels for the buttons.  This is not 
	//	necessary, but in some cases, for example, a button labelled 
	//	'Create' may be more meaningful to the user than one labelled
	//	'Apply'.
	//
	//	Disable those buttons that are not applicable to the option box.
	//
	//	Attach actions to those buttons that are applicable to the option
	//	box.  Note that the 'Close' button has a default action attached 
	//	to it that will hide the window.  If a a custom action is
	//	attached to the 'Close' button then be sure to call the 'hide the
	//	option box' procedure within the custom action so that the option
	//	box is hidden properly.

	//	'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-command ($callback + " " + 1)
		$applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + 1 + "; hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + 1)
		$resetBtn;

	//	Step 7: Set the option box title.
	//	=================================
	//
	string $optionBoxTitle = (uiRes("m_performVisualizeMetadataOptions.kVisualizeMetadataOptions"));
	setOptionBoxTitle($optionBoxTitle);

	//	Step 8: Customize the 'Help' menu item text.
	//	============================================
	//
	setOptionBoxHelpTag( "VisualizeMetadataOptions" );

	//	Step 9: Set the current values of the option box.
	//	=================================================
	//
	eval (($setup + " " + 0));	
	
	//	Step 10: Show the option box.
	//	=============================
	//
	showOptionBox();
	
	scriptJob -permanent -event "SceneOpened" ("resetMetadataOptionBox;");
}


//
//  Procedure Name:
//      assembleCmd
//
//  Description:
//		Construct the command to show the metadata
//		according to the specified option value
//
//  Input Arguments:
//      None.
//
proc string assembleCmd()
{
	string $cmd;

	setOptionVars(false);
	
	string 	$visualCurrentStreamMember	= `optionVar -query metadataVisualCurrentStreamMember`;
	string $streamMemberTokens[] = stringToStringArray($visualCurrentStreamMember, ".");
	
	// Set the visual method to string if the member type is string
	global string $visualMethodNames[];
	string $memberTypeName = substring($streamMemberTokens[2], 1, 6);
	if($memberTypeName == "string")
		optionVar -sv metadataVisualMethod $visualMethodNames[1];
	
	string 	$visualMethod   		= `optionVar -query metadataVisualMethod`;
	
	float   $visualMin   			= `optionVar -query metadataVisualMin`;
	float   $visualMax   			= `optionVar -query metadataVisualMax`;
	int		$visualAuto   			= `optionVar -query metadataVisualAuto`;
	int		$visualInterpolation	= `optionVar -query metadataVisualInterpolation`;
	float   $visualRayScale			= `optionVar -query metadataVisualRayScale`;
	//TODO
	//int	$visualInvalidData		= `optionVar -query metadataVisualInvalidData`;

	$cmd = "showMetadata"
		+ " -stream \"" + $streamMemberTokens[0] + "\""
		+ " -member \"" + $streamMemberTokens[1] + "\""
		+ " -dataType \"" + $streamMemberTokens[2] + "\""
		+ " -method \"" + $visualMethod + "\""
		+ " -interpolation " + $visualInterpolation;
	
	// "color" method
	if($visualMethodNames[0] == $visualMethod)
	{
		if($visualAuto)
		{
			$cmd = $cmd + " -auto";
		}
		else
		{
			$cmd = $cmd + " -range " + $visualMin + " " + $visualMax;
		}
	}
	// "ray" method
	else if($visualMethodNames[2] == $visualMethod)
	{
		$cmd = $cmd + " -rayScale " + $visualRayScale;
	}

	$cmd = $cmd + " `ls -shapes`";

	return $cmd;
}

//
//  Procedure Name:
//      performVisualizeMetadataOptions
//
//  Description:
//		Display metadata using the corresponding 
//		option values.  This procedure will also show the option box
//		window if necessary as well as construct the command string
//		that will invoke the showMetadata command with the current
//		option box values.
//
//  Input Arguments:
//      0 - Execute the command.
//      1 - Show the option box dialog.
//      2 - Return the command.
//
global proc string performVisualizeMetadataOptions(int $action)
{
	string $cmd = "";

	switch ($action) {

		//	Execute the command.
		//
		case 0:
			//	Get the command.
			//
			$cmd = `assembleCmd`;

			//	Execute the command with the option settings.
			//
			eval($cmd);

			break;

		//	Show the option box.
		//
		case 1:
			visualizeMetadataOptions;
			break;

		//	Return the command string.
		//
		case 2:
			//	Get the command.
			//
			$cmd = `assembleCmd`;
			break;
	}
	return $cmd;
}


//
//  Procedure Name:
//      resetMetadataOptionBox
//
//  Description:
//		Reset all widgets in the option box
//		Clean the stream list as well
//
//  Input Arguments:
//      None.
//
global proc resetMetadataOptionBox()
{
	// set forceFactorySetting to 1 to 
	// reset option variables
	visualizeMetadataSetup(1);
}

