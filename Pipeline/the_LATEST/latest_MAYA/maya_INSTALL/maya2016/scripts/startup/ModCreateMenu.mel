// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//      ModCreateMenu
//
//  Description:
//		Create the 'Create' menu
//
//  Input Arguments:
//      parent to parent the menu to.
//
//  Return Value:
//      None.
//

proc ModNurbsPrimitiveMenuItem( string $parent )
//
//	Proc : To create NURBS primitives.
//
{
	setParent -menu $parent;

	if (`isTrue "NurbsExists"`) {
		menuItem -divider true -dividerLabel (uiRes("m_ModCreateMenu.kCreateObjects"));
		
		menuItem -label (uiRes("m_ModCreateMenu.kCreateNurbsPrimitives")) -subMenu true -tearOff true
			-allowOptionBoxes true;
		if (`isTrue "SurfaceUIExists"`) {

			menuItem -label (uiRes("m_ModCreateMenu.kCreateNurbsSphere"))
				-annotation (getRunTimeCommandAnnotation("CreateNURBSSphere"))
				-image      "sphere.png"
				-command    ("CreateNURBSSphere")
				-dragMenuCommand        ("performNurbsSphere(2)")
				-dragDoubleClickCommand ("CreateNURBSSphereOptions");

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("CreateNURBSSphereOptions"))
				-image      "sphere.png"
				-command    ("CreateNURBSSphereOptions");

			menuItem -label (uiRes("m_ModCreateMenu.kCreateNurbsCube"))
				-annotation (getRunTimeCommandAnnotation("CreateNURBSCube"))
				-image      "cube.png"
				-command    ("CreateNURBSCube")
				-dragMenuCommand        ("performNurbsCube(2)")
				-dragDoubleClickCommand ("CreateNURBSCubeOptions");

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("CreateNURBSCubeOptions"))
				-image      "cube.png"
				-command    ("CreateNURBSCubeOptions");

			 menuItem -label (uiRes("m_ModCreateMenu.kCreateNurbsCylinder"))
				-annotation (getRunTimeCommandAnnotation("CreateNURBSCylinder"))
				-image      "cylinder.png"
				-command    ("CreateNURBSCylinder")
				-dragMenuCommand        ("performNurbsCylinder(2)")
				-dragDoubleClickCommand ("CreateNURBSCylinderOptions");

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("CreateNURBSCylinderOptions"))
				-image      "cylinder.png"
				-command    ("CreateNURBSCylinderOptions");

			menuItem -label (uiRes("m_ModCreateMenu.kCreateNurbsCone"))
				-annotation (getRunTimeCommandAnnotation("CreateNURBSCone"))
				-image      "cone.png"
				-command    ("CreateNURBSCone")
				-dragMenuCommand        ("performNurbsCone(2)")
				-dragDoubleClickCommand ("CreateNURBSConeOptions");

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("CreateNURBSConeOptions"))
				-image      "cone.png"
				-command    ("CreateNURBSConeOptions");

			menuItem -label (uiRes("m_ModCreateMenu.kCreateNurbsPlane"))
				-annotation (getRunTimeCommandAnnotation("CreateNURBSPlane"))
				-image      "plane.png"
				-command    ("CreateNURBSPlane")
				-dragMenuCommand        ("performNurbsPlane(2)")
				-dragDoubleClickCommand ("CreateNURBSPlaneOptions");

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("CreateNURBSPlaneOptions"))
				-image      "plane.png"
				-command    ("CreateNURBSPlaneOptions");

			 menuItem -label (uiRes("m_ModCreateMenu.kCreateNurbsTorus"))
				-annotation (getRunTimeCommandAnnotation("CreateNURBSTorus"))
				-image      "torus.png"
				-command    ("CreateNURBSTorus")
				-dragMenuCommand        ("performNurbsTorus(2)")
				-dragDoubleClickCommand ("CreateNURBSTorusOptions");

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("CreateNURBSTorusOptions"))
				-image      "torus.png"
				-command    ("CreateNURBSTorusOptions");
		}

        menuItem -label (uiRes("m_ModCreateMenu.kCreateNurbsCircle"))
			-annotation (getRunTimeCommandAnnotation("CreateNURBSCircle"))
			-image      "circle.png"
			-command    ("CreateNURBSCircle")
			-dragMenuCommand        ("performNurbsCircle(2)")
			-dragDoubleClickCommand ("CreateNURBSCircleOptions");

		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("CreateNURBSCircleOptions"))
			-image      "circle.png"
			-command    ("CreateNURBSCircleOptions");

        menuItem -label (uiRes("m_ModCreateMenu.kCreateNurbsSquare"))
			-annotation (getRunTimeCommandAnnotation("CreateNURBSSquare"))
			-image      "square.png"
			-command    ("CreateNURBSSquare")
			-dragMenuCommand        ("performNurbsSquare(2)")
			-dragDoubleClickCommand ("CreateNURBSSquareOptions");

		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("CreateNURBSSquareOptions"))
			-image      "square.png"
			-command    ("CreateNURBSSquareOptions");

		menuItem -divider true;

		menuItem -label (uiRes("m_ModCreateMenu.kNurbsPrimitiveInteractiveCreation"))
			-checkBox `optionVar -q createNurbsPrimitiveAsTool`
			-command    ("toggleCreateNurbsPrimitiveAsTool")
			toggleCreateNurbsPrimitivesAsToolItem;

		menuItem -label (uiRes("m_ModCreateMenu.kNurbsPrimitiveInteractiveCreationExitOnComplete"))
			-checkBox `optionVar -q nurbsPrimitiveAsToolExitOnComplete`
			-command    ("toggleNurbsPrimitiveAsToolExitOnComplete")
			toggleNurbsPrimitivesAsToolItemExitOnComplete;

		setParent -menu .. ;
	}
	setParent -menu .. ;
}

proc ModPolyPrimitiveMenuItem( string $parent )
//
// 	Description :
//		To create Poly primitives menu.
//
{
	setParent -menu $parent;
	if( `isTrue "PolygonsExists"` ) {

		menuItem -label (uiRes("m_ModCreateMenu.kCreatePolyPrimitives")) -subMenu true -tearOff true
			-allowOptionBoxes true polyPrimitivesItem;

		menuItem -label (uiRes("m_ModCreateMenu.kCreatePolySphere"))
			-annotation (getRunTimeCommandAnnotation("CreatePolygonSphere"))
			-image      "polySphere.png"
			-command    ("CreatePolygonSphere")
			-dragMenuCommand        ("performPolyPrimitive Sphere 2")
			-dragDoubleClickCommand ("CreatePolygonSphereOptions");

		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("CreatePolygonSphereOptions"))
			-image      "polySphere.png"
			-command    ("CreatePolygonSphereOptions");

		menuItem -label (uiRes("m_ModCreateMenu.kCreatePolyCube"))
			-annotation (getRunTimeCommandAnnotation("CreatePolygonCube"))
			-image      "polyCube.png"
			-command    ("CreatePolygonCube")
			-dragMenuCommand        ("performPolyPrimitive Cube 2")
			-dragDoubleClickCommand ("CreatePolygonCubeOptions");

		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("CreatePolygonCubeOptions"))
			-image      "polyCube.png"
			-command    ("CreatePolygonCubeOptions");

		menuItem -label (uiRes("m_ModCreateMenu.kCreatePolyCylinder"))
			-annotation (getRunTimeCommandAnnotation("CreatePolygonCylinder"))
			-image      "polyCylinder.png"
			-command    ("CreatePolygonCylinder")
			-dragMenuCommand        ("performPolyPrimitive Cylinder 2")
			-dragDoubleClickCommand ("CreatePolygonCylinderOptions");

		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("CreatePolygonCylinderOptions"))
			-image      "polyCylinder.png"
			-command    ("CreatePolygonCylinderOptions");

		menuItem -label (uiRes("m_ModCreateMenu.kCreatePolyCone"))
			-annotation (getRunTimeCommandAnnotation("CreatePolygonCone"))
			-image      "polyCone.png"
			-command    ("CreatePolygonCone")
			-dragMenuCommand        ("performPolyPrimitive Cone 2")
			-dragDoubleClickCommand ("CreatePolygonConeOptions");

		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("CreatePolygonConeOptions"))
			-image      "polyCone.png"
			-command    ("CreatePolygonConeOptions");

		menuItem -label (uiRes("m_ModCreateMenu.kCreatePolyPlane"))
			-annotation (getRunTimeCommandAnnotation("CreatePolygonPlane"))
			-image      "polyMesh.png"
			-command    ("CreatePolygonPlane")
			-dragMenuCommand        ("performPolyPrimitive Plane 2")
			-dragDoubleClickCommand ("CreatePolygonPlaneOptions");

		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("CreatePolygonPlaneOptions"))
			-image      "polyMesh.png"
			-command    ("CreatePolygonPlaneOptions");

		menuItem -label (uiRes("m_ModCreateMenu.kCreatePolyTorus"))
			-annotation (getRunTimeCommandAnnotation("CreatePolygonTorus"))
			-image      "polyTorus.png"
			-command    ("CreatePolygonTorus")
			-dragMenuCommand        ("performPolyPrimitive Torus 2")
			-dragDoubleClickCommand ("CreatePolygonTorusOptions");

		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("CreatePolygonTorusOptions"))
			-image      "polyTorus.png"
			-command    ("CreatePolygonTorusOptions");

		menuItem -label (uiRes("m_ModCreateMenu.kCreatePolyPrism"))
			-annotation (getRunTimeCommandAnnotation("CreatePolygonPrism"))
			-image      "polyPrism.png"
			-command    ("CreatePolygonPrism")
			-dragMenuCommand        ("performPolyPrimitive Prism 2")
			-dragDoubleClickCommand ("CreatePolygonPrismOptions");

		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("CreatePolygonPrismOptions"))
			-image      "polyPrism.png"
			-command    ("CreatePolygonPrismOptions");

		menuItem -label (uiRes("m_ModCreateMenu.kCreatePolyPyramid"))
			-annotation (getRunTimeCommandAnnotation("CreatePolygonPyramid"))
			-image      "polyPyramid.png"
			-command    ("CreatePolygonPyramid")
			-dragMenuCommand        ("performPolyPrimitive Pyramid 2")
			-dragDoubleClickCommand ("CreatePolygonPyramidOptions");

		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("CreatePolygonPyramidOptions"))
			-image      "polyPyramid.png"
			-command    ("CreatePolygonPyramidOptions");
		
		menuItem -label (uiRes("m_ModCreateMenu.kCreatePolyPipe"))
			-annotation (getRunTimeCommandAnnotation("CreatePolygonPipe"))
			-image      "polyPipe.png"
			-command    ("CreatePolygonPipe")
			-dragMenuCommand        ("performPolyPrimitive Pipe 2")
			-dragDoubleClickCommand ("CreatePolygonPipeOptions");

		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("CreatePolygonPipeOptions"))
			-image      "polyPipe.png"
			-command    ("CreatePolygonPipeOptions");
     
		menuItem -label (uiRes("m_ModCreateMenu.kCreatePolyHelix"))
			-annotation (getRunTimeCommandAnnotation("CreatePolygonHelix"))
			-image      "polyHelix.png"
			-command    ("CreatePolygonHelix")
			-dragMenuCommand        ("performPolyPrimitive Helix 2")
			-dragDoubleClickCommand ("CreatePolygonHelixOptions");

		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("CreatePolygonHelixOptions"))
			-image      "polyHelix.png"
			-command    ("CreatePolygonHelixOptions");

		menuItem -label (uiRes("m_ModCreateMenu.kCreatePolySoccerBall"))
			-annotation (getRunTimeCommandAnnotation("CreatePolygonSoccerBall"))
			-image      "polySoccerBall.png"
			-command    ("CreatePolygonSoccerBall")
			-dragMenuCommand        ("performPolyPrimitive Misc 0")
			-dragDoubleClickCommand ("CreatePolygonSoccerBallOptions");

		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("CreatePolygonSoccerBallOptions"))
			-image      "polySoccerBall.png"
			-command    ("CreatePolygonSoccerBallOptions");

        menuItem -label (uiRes("m_ModCreateMenu.kCreatePolyPlatonicSolids"))
			-image      "polyPlatonic.png"
	        -command    ("performPolyPrimitive PlatonicSolid 0")
			-allowOptionBoxes true polyPlatonicSolidItem;

		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("CreatePlatonicSolidOptions"))
			-image      "polyPlatonic.png"
			-command    ("CreatePlatonicSolidOptions");

		menuItem -divider true;

		menuItem -label (uiRes("m_ModCreateMenu.kPolyPrimitiveInteractiveCreation"))
			-checkBox `optionVar -q createPolyPrimitiveAsTool`
			-command    ("toggleCreatePolyPrimitiveAsTool")
			toggleCreatePolyPrimitivesAsToolItem;

		menuItem -label (uiRes("m_ModCreateMenu.kPolyPrimitiveInteractiveCreationExitOnComplete"))
			-checkBox `optionVar -q polyPrimitiveAsToolExitOnComplete`
			-command    ("togglePolyPrimitiveAsToolExitOnComplete")
			togglePolyPrimitivesAsToolItemExitOnComplete;

          setParent -menu ..;
		setParent -menu ..;
	}
	setParent -menu .. ;
}

proc ModSubdPrimitiveMenuItem( string $parent )
//
// 	Description :
//		To create Subd primitives menu.
//		Added by CM
{
	setParent -menu $parent;
	if( `isTrue "SubdivUIExists"` ) {
		
		menuItem -label (uiRes("m_ModCreateMenu.kCreateSubivPrimitives")) -subMenu true -tearOff true
			-allowOptionBoxes true subdPrimitivesItem;

		menuItem -label (uiRes("m_ModCreateMenu.kCreateSudivSphere"))
			-annotation (getRunTimeCommandAnnotation("CreateSubdivSphere"))
			-image      "subdivSphere.png"
			-command    ("CreateSubdivSphere");

		menuItem -label (uiRes("m_ModCreateMenu.kCreateSubdivCube"))
			-annotation (getRunTimeCommandAnnotation("CreateSubdivCube"))
			-image      "subdivCube.png"
			-command    ("CreateSubdivCube");

		menuItem -label (uiRes("m_ModCreateMenu.kCreateSubdivCylinder"))
			-annotation (getRunTimeCommandAnnotation("CreateSubdivCylinder"))
			-image      "subdivCylinder.png"
			-command    ("CreateSubdivCylinder");
		
		menuItem -label (uiRes("m_ModCreateMenu.kCreateSubdivCone"))
			-annotation (getRunTimeCommandAnnotation("CreateSubdivCone"))
			-image      "subdivCone.png"
			-command    ("CreateSubdivCone");

		menuItem -label (uiRes("m_ModCreateMenu.kCreateSubdivPlane"))
			-annotation (getRunTimeCommandAnnotation("CreateSubdivPlane"))
			-image      "subdivPlane.png"
			-command    ("CreateSubdivPlane");

		menuItem -label (uiRes("m_ModCreateMenu.kCreateSubdivTorus"))
			-annotation (getRunTimeCommandAnnotation("CreateSubdivTorus"))
			-image      "subdivTorus.png"
			-command    ("CreateSubdivTorus");

		setParent -menu ..;
	}
	setParent -menu .. ;
}

proc ModVolumePrimitiveMenuItem( string $parent )
//
// 	Description :
//		To create Volume primitives menu.
//
{
	setParent -menu $parent;
	if( `isTrue "PolygonsExists"` ) {

		menuItem -label (uiRes("m_ModCreateMenu.kCreateVolumePrimitives")) -subMenu true -tearOff true
			-allowOptionBoxes true volumePrimitivesItem;

		menuItem -label (uiRes("m_ModCreateMenu.kCreateVolumeSphere"))
			-annotation (getRunTimeCommandAnnotation("CreateVolumeSphere"))
			-image      "volumeSphere.png"
			-command    ("CreateVolumeSphere");

		menuItem -label (uiRes("m_ModCreateMenu.kCreateVolumeCube"))
			-annotation (getRunTimeCommandAnnotation("CreateVolumeCube"))
			-image      "volumeCube.png"
			-command    ("CreateVolumeCube");

		menuItem -label (uiRes("m_ModCreateMenu.kCreateVolumeCone"))
			-annotation (getRunTimeCommandAnnotation("CreateVolumeCone"))
			-image      "volumeCone.png"
			-command    ("CreateVolumeCone");

		setParent -menu ..;
	}
	setParent -menu .. ;
}

global proc refreshLightsItem() {
    // allow third parties to install their own custom light creation UI in this menu
	callbacks -executeCallbacks -hook "addItemToCreateLightMenu";
}

proc ModLightsMenuItem( string $parent )
//
// 	Description :
//		To create Lights menu.
//  Note : Divider added at the end by proc.
//
{
	setParent -menu $parent;

	menuItem -label (uiRes("m_ModCreateMenu.kCreateLights")) -sm true -tearOff true
		-allowOptionBoxes true LightsItem;

	menuItem -label (uiRes("m_ModCreateMenu.kCreateAmbientLight"))
		-annotation (getRunTimeCommandAnnotation("CreateAmbientLight"))
		-image      "ambientlight.png"
		-command    ("CreateAmbientLight")
		-dragMenuCommand        ("performAmbientLight 2")
		-dragDoubleClickCommand ("CreateAmbientLightOptions");

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("CreateAmbientLightOptions"))
		-image      "ambientlight.png"
		-command    ("CreateAmbientLightOptions");

	menuItem -label (uiRes("m_ModCreateMenu.kCreateDirectionalLight"))
		-annotation (getRunTimeCommandAnnotation("CreateDirectionalLight"))
		-image      "directionallight.png"
		-command    ("CreateDirectionalLight")
		-dragMenuCommand        ("performDirectionalLight 2")
		-dragDoubleClickCommand ("CreateDirectionalLightOptions");

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("CreateDirectionalLightOptions"))
		-image      "directionallight.png"
		-command    ("CreateDirectionalLightOptions");

	menuItem -label (uiRes("m_ModCreateMenu.kCreatePointLight"))
		-annotation (getRunTimeCommandAnnotation("CreatePointLight"))
		-image      "pointlight.png"
		-command    ("CreatePointLight")
		-dragMenuCommand        ("performPointLight 2")
		-dragDoubleClickCommand ("CreatePointLightOptions");

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("CreatePointLightOptions"))
		-image      "pointlight.png"
		-command    ("CreatePointLightOptions");

	menuItem -label (uiRes("m_ModCreateMenu.kCreateSpotLight"))
		-annotation (getRunTimeCommandAnnotation("CreateSpotLight"))
		-image      "spotlight.png"
		-command    ("CreateSpotLight")
		-dragMenuCommand        ("performSpotLight 2")
		-dragDoubleClickCommand ("CreateSpotLightOptions");

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("CreateSpotLightOptions"))
		-image      "spotlight.png"
		-command    ("CreateSpotLightOptions");

	menuItem -label (uiRes("m_ModCreateMenu.kCreateAreaLight"))
		-annotation (getRunTimeCommandAnnotation("CreateAreaLight"))
		-image      "arealight.png"
		-command    ("CreateAreaLight")
		-dragMenuCommand        ("performAreaLight(2)")
		-dragDoubleClickCommand ("CreateAreaLightOptions");

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("CreateAreaLightOptions"))
		-image      "arealight.png"
		-command    ("CreateAreaLightOptions");

	menuItem -label (uiRes("m_ModCreateMenu.kCreateVolumeLight"))
		-annotation (getRunTimeCommandAnnotation("CreateVolumeLight"))
		-image      "volumelight.png"
		-command    ("CreateVolumeLight")
		-dragMenuCommand        ("performVolumeLight 2")
		-dragDoubleClickCommand ("CreateVolumeLightOptions");

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("CreateVolumeLightOptions"))
		-image      "volumelight.png"
		-command    ("CreateVolumeLightOptions");

	menuItem -e 
        -postMenuCommand "refreshLightsItem"
        LightsItem;	


    setParent -menu ..;

	setParent -menu .. ;
}

proc ModCurveToolsMenuItem( string $parent )
//
//	Description :
//		To create Curve Tools menu. Arc tools included.
//
{

	setParent -menu $parent ;

	if (`isTrue "NurbsExists"`) {

		menuItem -label (uiRes("m_ModCreateMenu.kCreateCurveTools")) -sm true -tearOff true createCurveTools;
			menuItem -label (uiRes("m_ModCreateMenu.kCreateCVCurveTool"))
				-annotation (getRunTimeCommandAnnotation("CVCurveTool"))
				-image      "curveCV.png"
				-command    ("CVCurveTool")
				-dragDoubleClickCommand ("CVCurveToolOptions");
				menuItem -optionBox true -image "curveCV.png"
					-annotation (getRunTimeCommandAnnotation("CVCurveToolOptions"))
					-command    ("CVCurveToolOptions");

			menuItem -label (uiRes("m_ModCreateMenu.kCreateEPCurveTool"))
				-annotation (getRunTimeCommandAnnotation("EPCurveTool"))
				-image      "curveEP.png"
				-command    ("EPCurveTool")
				-dragDoubleClickCommand ("EPCurveToolOptions");
				menuItem -optionBox true -image "curveEP.png"
					-annotation (getRunTimeCommandAnnotation("EPCurveToolOptions"))
					-command    ("EPCurveToolOptions");

			menuItem -label (uiRes("m_ModCreateMenu.kCreateBezierCurveTool"))
				-annotation (getRunTimeCommandAnnotation("CreateBezierCurveTool"))
				-image		"curveBezier.png"
				-command	("CreateBezierCurveTool")
				-dragDoubleClickCommand ("CreateBezierCurveToolOptions");
				menuItem -optionBox true -image "curveBezier.png"
					-annotation (getRunTimeCommandAnnotation("CreateBezierCurveToolOptions"))
					-command	("CreateBezierCurveToolOptions");

			menuItem -label (uiRes("m_ModCreateMenu.kCreatePencilCurveTool"))
				-annotation (getRunTimeCommandAnnotation("PencilCurveTool"))
				-image      "pencil.png"
				-command    ("PencilCurveTool")
				-dragDoubleClickCommand ("PencilCurveToolOptions");
				menuItem -optionBox true -image "pencil.png"
					-annotation (getRunTimeCommandAnnotation("PencilCurveToolOptions"))
					-command    ("PencilCurveToolOptions");

			menuItem -label (uiRes("m_ModCreateMenu.kCreateThreePointCircularArc"))
				-annotation (getRunTimeCommandAnnotation("ThreePointArcTool"))
	   			-image      "threePointArc.png"
   				-command    ("ThreePointArcTool")
				-dragDoubleClickCommand ("ThreePointArcToolOptions");
				menuItem -optionBox true -image "threePointArc.png"
					-annotation (getRunTimeCommandAnnotation("ThreePointArcToolOptions"))
          			-command    ("ThreePointArcToolOptions");

   			menuItem -label (uiRes("m_ModCreateMenu.kCreateTwoPointCircularArc"))
				-annotation (getRunTimeCommandAnnotation("TwoPointArcTool"))
   				-image      "twoPointArc.png"
   				-command    ("TwoPointArcTool")
				-dragDoubleClickCommand ("TwoPointArcToolOptions");
				menuItem -optionBox true -image "twoPointArc.png"
					-annotation (getRunTimeCommandAnnotation("TwoPointArcToolOptions"))
       				-command    ("TwoPointArcToolOptions");

			setParent -menu ..;

		menuItem -divider true -ld false;
	}
}

proc ModSceneAssemblyMenuItem( string $parent )
//
//	Description : To create Scene Assembly menu.
//
{	
	setParent -menu $parent;
	if(!`menuItem -exists menuCreateSceneAssembly`)
	{
		string $menuCreateSceneAssembly = "menuCreateSceneAssembly";
		menuItem -label (uiRes("m_ModCreateMenu.kSceneAssemblyCreateMenu")) 
				 -subMenu true 
				 -tearOff true
				 -postMenuCommand ("ModSceneAssemblySubMenuItems " + $menuCreateSceneAssembly) 
				  $menuCreateSceneAssembly;
		
		setParent -menu ..;

		if (!`exists assemblyCreate`)
			eval("source \"OutlinerEdRepMenu.mel\"");
	}

	int $hasAssemblyType = (size(`assembly -q -listTypes`) > 0);
	string $noAssemblyPlugin = !$hasAssemblyType ? (uiRes("m_ModCreateMenu.kNoSceneAssemblyPluginLoaded")) : "";
	menuItem -edit -annotation $noAssemblyPlugin -enable $hasAssemblyType menuCreateSceneAssembly;	
	
}

global proc ModSceneAssemblySubMenuItems( string $parent )
{
	setParent -menu $parent;
	menu -edit -deleteAllItems $parent;	

	string $assemblyTypes[] = `assembly -q -listTypes`;		
	if(size($assemblyTypes) > 0){		    
	    string $createLabelStr = (uiRes("m_ModCreateMenu.kCreateSceneAssemblyLabel"));	
	    string $annCreateLabelStr = (uiRes("m_ModCreateMenu.kAnnAssemblyCreateLabel"));
	    int $i;	
	    for ($i; $i < size($assemblyTypes); $i++) {
	        string $assemblyLabel = `assembly -q -type $assemblyTypes[$i] -label`;			
	        string $label = `format -s $assemblyLabel $createLabelStr`;
			string $ann = `format -s $assemblyLabel $annCreateLabelStr`;
	        menuItem -label $label -annotation $ann -command ("assemblyCreate " + $assemblyTypes[$i]);
			string $optionBox = `assembly -q -createOptionBoxProc -type $assemblyTypes[$i]`;
			if (size($optionBox) > 0) {	
				menuItem -optionBox true -command $optionBox;
			}
	    }		
	}
	setParent -menu ..;		
}



proc ModTextMenuItem( string $parent )
//
//	Description : To create Text menu.
//
{
	setParent -menu $parent ;
	if (`isTrue "NurbsExists"`) {

		menuItem
			-label (uiRes("m_ModCreateMenu.kCreateText"))
			-annotation (getRunTimeCommandAnnotation("CreateText"))
			-image      "text.png"
    		-command                ("CreateText")
			-dragMenuCommand        ("performtextCurves 2")
			-dragDoubleClickCommand ("CreateTextOptions");

		menuItem -optionBox true -image "text.png"
			-annotation (getRunTimeCommandAnnotation("CreateTextOptions"))
        	-command    ("CreateTextOptions");

		// menuItem -divider true;
	}
	setParent -menu ..;	
}

proc ModIllustratorCurvesMenuItem( string $parent )
//
//	Description : To create curves/surfaces by reading an Adobe(R) Illustrator(R) file.
//
{
	setParent -menu $parent ;
	
	if (`isTrue "NurbsExists"`) {

		menuItem
			-label (uiRes("m_ModCreateMenu.kCreateAdobeIllustratorObject"))
			-annotation (getRunTimeCommandAnnotation("CreateIllustratorCurves"))
			-image      "ai.png"
    		-command                ("CreateIllustratorCurves")
			-dragDoubleClickCommand ("CreateIllustratorCurvesOptions");

		menuItem -optionBox true 
			-image "ai.png"
			-annotation (getRunTimeCommandAnnotation("CreateIllustratorCurves"))
        	-command    ("CreateIllustratorCurvesOptions");
	}
	setParent -menu ..;	
}

proc ModLocatorAndConstrPlaneMenuItem( string $parent )
//
// Description :
//		To create locator and construction plane
//
{
	setParent -menu $parent ;

	menuItem -label (uiRes("m_ModCreateMenu.kCreateConstructionPlane"))
		-annotation (getRunTimeCommandAnnotation("CreateConstructionPlane"))
        -image      "sketchPlane.png"
        -command                ("CreateConstructionPlane")
        -dragMenuCommand        ("performCreateConstructionPlane 2")
		-dragDoubleClickCommand ("CreateConstructionPlaneOptions");

	menuItem -optionBox true -image "sketchPlane.png"
		-annotation (getRunTimeCommandAnnotation("CreateConstructionPlaneOptions"))
        -command    ("CreateConstructionPlaneOptions");

	menuItem -label (uiRes("m_ModCreateMenu.kFreeImagePlane"))
		-annotation (getRunTimeCommandAnnotation("CreateImagePlane"))
		-command ("CreateImagePlane")
		-dragDoubleClickCommand ("CreateConstructionPlaneOptions");

	menuItem -optionBox true 
		-annotation (getRunTimeCommandAnnotation("CreateImagePlaneOptions"))
        -command    ("CreateImagePlaneOptions");

	menuItem -label (uiRes("m_ModCreateMenu.kCreateLocator"))
		-annotation (getRunTimeCommandAnnotation("CreateLocator"))
        -image      "locator.png"
        -command    ("CreateLocator");

	menuItem -label (uiRes("m_ModCreateMenu.kCreateAnnotation"))
		-annotation (getRunTimeCommandAnnotation("CreateAnnotateNode"))
		-image      "annotation.png"
		-command    ("CreateAnnotateNode");

	setParent -menu ..;	
}

global proc defineCharacter( )
//
//  Procedure Name:
//      defineCharacter
//
//  Description:
//		Creates a set using the selected items,
//		so that users can define all the nodes
//		in the DAG that make up their "characters".
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
{
	string $OK = (uiRes("m_ModCreateMenu.kOk"));
	string $cancel = (uiRes("m_ModCreateMenu.kCancel"));
	string $toShelf = (uiRes("m_ModCreateMenu.kAddToShelf"));

	// Prompt the user for a new character name
	//
	string $result = `promptDialog
		-title (uiRes("m_ModCreateMenu.kCreateQuickSelectSet"))
		-message (uiRes("m_ModCreateMenu.kEnterQuickSelectSetname"))
		-text "Set"
		-button $OK
		-button $cancel
		-button $toShelf
		-defaultButton $OK
		-cancelButton $cancel
		-dismissString $cancel`;

	// If the result was "OK", then proceed
	//
	if ( $result == $OK ) {
		// Also, notice that the `type` is being set
		// to "gCharacterSet" - just trying to pick
		// a name that users probably won't type
		//
		string $characterName = `promptDialog -q`;
		string $newName;
		$newName = `sets -text "gCharacterSet" -name $characterName`;
		string $resultStr = (uiRes("m_ModCreateMenu.kCreatedQuickSet"));
		string $infoStr = `format -stringArg $newName $resultStr`;
		print $infoStr;
	}

	// If the result was "Add toShelf", then proceed
	//
	if ( $result == $toShelf ) {

		// Also, notice that the `type` is being set
		// to "gCharacterSet" - just trying to pick
		// a name that users probably won't type
		//
		string $characterName = `promptDialog -q`;
		sets -text "gCharacterSet" -name $characterName;
		string $cmd = "textToShelf ";
		$cmd += $characterName;
		$cmd += " \"select -replace ";
		$cmd += $characterName;
		$cmd += "\"";
		//textToShelf $characterName ("select -replace " + $characterName);
		evalEcho($cmd);

	}
}

proc ModSetsMenuItem( string $parent )
//
// Description :
//		To create sets and other grouping things
//
{
	setParent -menu $parent ;

	//	Empty Group
	//
	menuItem -label (uiRes("m_ModCreateMenu.kCreateEmptyGroup"))
		-annotation (getRunTimeCommandAnnotation("CreateEmptyGroup"))
		-echoCommand true
		-command     ("CreateEmptyGroup");

	menuItem -label (uiRes("m_ModCreateMenu.kCreateSets")) -subMenu true -tearOff true -allowOptionBoxes true;

	//	Sets
	//
	menuItem -label (uiRes("m_ModCreateMenu.kCreateSet"))
		-annotation (getRunTimeCommandAnnotation("CreateSet"))
		-command    ("CreateSet")
		-dragDoubleClickCommand ("CreateSetOptions");

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("CreateSetOptions"))
		-command    ("CreateSetOptions");

	menuItem -label (uiRes("m_ModCreateMenu.kCreatePartition"))
		-annotation (getRunTimeCommandAnnotation("CreatePartition"))
		-command    ("CreatePartition")
		-dragDoubleClickCommand ("CreatePartitionOptions");

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("CreatePartitionOptions"))
		-command    ("CreatePartitionOptions");

	menuItem -ltVersion 2016 -label (uiRes("m_ModCreateMenu.kCreateQuickSelectionSet"))
		-annotation (getRunTimeCommandAnnotation("CreateQuickSelectSet"))
		-command    ("CreateQuickSelectSet");

	setParent -menu ..;	
}

global proc ModCameraSubMenuItem( string $parent )
{
	loadPlugin -qt "stereoCamera";

	popupMenu -e -deleteAllItems $parent;
	setParent -m $parent;

	menuItem -label (uiRes("m_ModCreateMenu.kCreateCamera"))
		-annotation (getRunTimeCommandAnnotation("CreateCameraOnly"))
        -image      "view.png"
        -command    ("CreateCameraOnly")
        -dragMenuCommand        ("performCameraOnly 2")
		-dragDoubleClickCommand ("CreateCameraOnlyOptions");

	menuItem -optionBox true -image "view.png"
		-annotation (getRunTimeCommandAnnotation("CreateCameraOnlyOptions"))
        -command    ("CreateCameraOnlyOptions");

	menuItem -label (uiRes("m_ModCreateMenu.kCreateCameraAndAim"))
		-annotation (getRunTimeCommandAnnotation("CreateCameraAim"))
        -image      "cameraAim.png"
        -command    ("CreateCameraAim")
        -dragMenuCommand        ("performCameraAim 2")
		-dragDoubleClickCommand ("CreateCameraAimOptions");

	menuItem -optionBox true -image "cameraAim.png"
		-annotation (getRunTimeCommandAnnotation("CreateCameraAimOptions"))
        -command    ("CreateCameraAimOptions");

	menuItem -label (uiRes("m_ModCreateMenu.kCreateCameraAimAndUp"))
		-annotation (getRunTimeCommandAnnotation("CreateCameraAimUp"))
        -image      "cameraAimUp.png"
        -command    ("CreateCameraAimUp")
        -dragMenuCommand        ("performCamera 2")
		-dragDoubleClickCommand ("CreateCameraAimUpOptions");

	menuItem -optionBox true -image "cameraAimUp.png"
		-annotation (getRunTimeCommandAnnotation("CreateCameraAimUpOptions"))
        -command    ("CreateCameraAimUpOptions");

	menuItem -divider true ;

	python("import maya.app.stereo.stereoCameraMenus as stereoCameraMenus");
	python("stereoCameraMenus.buildCreateMenu()");
}

proc ModCameraMenuItem( string $parent )
//
//	Description ; To create a camera.
{
	setParent -menu $parent ;

	string $label = (uiRes("m_ModCreateMenu.kCreateCameras"));
	string $menu = `menuItem -label $label -subMenu true -tearOff true -allowOptionBoxes true`;

	menuItem -edit -postMenuCommand ("ModCameraSubMenuItem "+$menu) $menu;

	setParent -menu $parent ;
}

proc ModAssetMenuItem( string $parent )
{
	menuItem -label (uiRes("m_ModCreateMenu.kAsset")) -subMenu true -tearOff true assetItem;

		menuItem -label (uiRes("m_ModCreateMenu.kCreateAsset"))
				-annotation (getRunTimeCommandAnnotation("CreateContainer"))
				-allowOptionBoxes true
				-dmc "performCreateContainer 2"
				-command CreateContainer;
				menuItem -optionBox true
					-annotation (getRunTimeCommandAnnotation("CreateContainerOptions"))
					-c CreateContainerOptions;

		menuItem -label (uiRes("m_ModCreateMenu.kCreateAssetWithTransform"))
			-annotation (getRunTimeCommandAnnotation("CreateDagContainer"))
			-allowOptionBoxes true
			-dmc "performCreateDagContainer 2"
			-command CreateDagContainer;
			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("CreateDagContainerOptions"))
				-c CreateDagContainerOptions;

		setParent -menu .. ;
}

proc ModMeasureToolsMenuItem( string $parent )
//
// Sets up the measure tools submenu
{
	menuItem -label (uiRes("m_ModCreateMenu.kCreateMeasureTools")) -subMenu true -tearOff true measureItem;

		menuItem -label (uiRes("m_ModCreateMenu.kCreateDistanceTool"))
			-annotation (getRunTimeCommandAnnotation("DistanceTool"))
			-image      "distanceDim.png"
			-command    ("DistanceTool");

		menuItem -label (uiRes("m_ModCreateMenu.kCreateParameterTool"))
			-annotation (getRunTimeCommandAnnotation("ParameterTool"))
			-image      "paramDim.png"
			-command    ("ParameterTool");

		menuItem -label (uiRes("m_ModCreateMenu.kCreateArcLengthTool"))
			-annotation (getRunTimeCommandAnnotation("ArcLengthTool"))
			-image      "arcLengthDim.png"
			-command    ("ArcLengthTool");

		setParent -menu ..;
}

global proc ModCreateMenu( string $parent )
{
	if( `menu -q -ni $parent` != 0 ) {
		
		//	Update Scene Assembly menu
		 ModSceneAssemblyMenuItem( $parent );
		//	Menu is built already - just return
		return;
	}

	
	ModNurbsPrimitiveMenuItem( $parent ) ;
	ModPolyPrimitiveMenuItem( $parent ) ;
	ModSubdPrimitiveMenuItem( $parent ) ;
	ModVolumePrimitiveMenuItem( $parent ) ;
	ModLightsMenuItem( $parent ) ;
	ModCameraMenuItem( $parent ) ;
	ModCurveToolsMenuItem( $parent ) ;
	ModTextMenuItem( $parent ) ;
	ModIllustratorCurvesMenuItem( $parent );
	
	menuItem -divider true -dividerLabel (uiRes("m_ModCreateMenu.kCreateAids"));
	ModLocatorAndConstrPlaneMenuItem( $parent ) ;
	ModMeasureToolsMenuItem( $parent );
	
	menuItem -divider true -dividerLabel (uiRes("m_ModCreateMenu.kCreateSceneMgt"));
	ModSceneAssemblyMenuItem( $parent );	
	ModSetsMenuItem( $parent ) ;
	ModAssetMenuItem( $parent );
}

