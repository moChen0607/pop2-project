// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  26 Feb 1996
//
//  Description:
//      This procedure creates the status line selection type menu.
//
//  Input Arguments:
//      The parent control that the status line will be created in.
//
//  Return Value:
//      The name of the top layout created.
//		Used for embedding the status line within another layout.
//

global proc buildMaskSettingMenu( string $parent ) {
//
//	Build the menu that controls the high level mask
//	settings
//
	setParent -m $parent;
	menu -e -dai $parent;

//	menuItem -l "Hierarchy" -c "setSelectMode hierarchy Hierarchy";
//	menuItem -sm true -l "Hierarchy";
//		menuItem -l "Root" -c "setSelectMode root Hierarchy";
//		menuItem -l "Leaf" -c "setSelectMode leaf Hierarchy";
//		menuItem -l "Template" -c "setSelectMode template Hierarchy";
//	setParent -m ..;
//	menuItem -l "Objects" -sm true;

		menuItem -label (uiRes("m_buildMaskSettingMenu.kAllObjects"))
			-annotation (uiRes("m_buildMaskSettingMenu.kAllObjectsAnnot"))
			-c "setSelectMode allObjects \"All Objects\"";
		menuItem -d true;
		menuItem -label (uiRes("m_buildMaskSettingMenu.kAnimation"))
			-annotation (uiRes("m_buildMaskSettingMenu.kAnimationAnnot"))
			-c "setSelectMode animation Animation";

//	setParent -m ..;
//	menuItem -l "Components" -sm true;
//		menuItem -l "All Components" -c "setSelectMode allComponents \"All Components\"";
//		menuItem -d true;

		menuItem -label (uiRes("m_buildMaskSettingMenu.kPolygons"))
			-annotation (uiRes("m_buildMaskSettingMenu.kPolygonsAnnot"))
			-c "setSelectMode polyModeling Polygons";
//	setParent -m ..;
//	menuItem -l "Mixed" -sm true;

		string $annotation = (uiRes("m_buildMaskSettingMenu.kAnnotMsg"));
		menuItem -label (uiRes("m_buildMaskSettingMenu.kNURBS"))
			-annotation $annotation
			-c "setSelectMode nurbsModeling NURBS";
		menuItem -label (uiRes("m_buildMaskSettingMenu.kDeform"))
			-annotation $annotation
			-c "setSelectMode deformations Deform";	
		menuItem -label (uiRes("m_buildMaskSettingMenu.kDynamics"))
			-annotation $annotation
			-c "setSelectMode dynamics Dynamics";
		menuItem -label (uiRes("m_buildMaskSettingMenu.kRendering"))
			-annotation $annotation
			-c "setSelectMode rendering Rendering";

	setParent -m ..;

	menuItem -d true;

	menuItem -label (uiRes("m_buildMaskSettingMenu.kInitialDefault"))
			-annotation (uiRes("m_buildMaskSettingMenu.kInitialDefaultAnnot"))
			-c "selectionMaskReset";
}
