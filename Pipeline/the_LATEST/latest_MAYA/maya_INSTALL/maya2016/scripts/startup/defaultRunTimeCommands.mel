// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc string getRunTimeCommandAnnotation(string $runTimeCommand)
//
//	Description:
//		A handy proc that will simply return the annotation for the specified
//		run time command.
//
//	Arguments:
//		A runTimeCommand.
//
//	Returns:
//		The annotation string. May be empty string.
//
{
	string $annotation = "";

	if (`runTimeCommand -exists $runTimeCommand`) {
		$annotation = `runTimeCommand -query -annotation $runTimeCommand`;
	}

	return $annotation;
}

// ======================================================================
// ======================================================================
//
//	Common menu set, ie. File, Edit, Modify, Create, Display, Window,
//	and Help.
//
// ======================================================================
// ======================================================================
proc commonMenus() {
//
//	File menu.
//
// ----------------------------------------------------------------------

//	Scene operations: New, Open, Save, Save As...
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNewSceneAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("performNewScene 0;")
	NewScene;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNewSceneOptionsAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("performNewScene 1;")
	NewSceneOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOpenSceneAnnot"))
	-category   ("Menu items.Common.File")
	// ADSK_CLR_MGT_BEGIN
	// Need to check for invalid rendering space, view transform, output
	// transform, and missing color spaces.  checkColorManagementAllSettings()
	// is a no-op if the color management feature is not available.
	-command    ("if (projectViewer(\"Open\")) { checkForUnknownNodes(); checkColorManagementAllSettings(); }")
	// ADSK_CLR_MGT_END
	OpenScene;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOpenSceneOptionsAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("fileOptions \"Open\" \"projectViewer Open\"")
	OpenSceneOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOptimizeSceneAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("cleanUpScene 1")
	OptimizeScene;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOptimizeSceneOptionsAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("cleanUpScene 2")
	OptimizeSceneOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSaveSceneAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("fileCmdCallback; checkForUnknownNodes(); FileMenu_SaveItem; fileCmdRestoreCallback;")
	SaveScene;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSaveSceneOptionsAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("fileOptions \"Save\" \"SaveScene\"")
	SaveSceneOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSaveSceneAsAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("fileCmdCallback; checkForUnknownNodes(); projectViewer SaveAs; fileCmdRestoreCallback;")
	SaveSceneAs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSaveSceneAsOptionsAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("fileOptions \"SaveAs\" \"projectViewer SaveAs\"")
	SaveSceneAsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kIncrementAndSaveAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("fileCmdCallback; checkForUnknownNodes();  incrementAndSaveScene 0; fileCmdRestoreCallback;")
	IncrementAndSave;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kArchiveAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("performArchiveScene 0")
	ArchiveScene;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kArchiveSceneOptionsAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("performArchiveScene 1")
	ArchiveSceneOptions;

//	Save Preferences.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSavePreferencesAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("savePrefs;")
	SavePreferences;

//	Import and Export.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kImportAnnot"))
	-category   ("Menu items.Common.File")
	// ADSK_CLR_MGT_BEGIN
	// Only need to check for missing color spaces.
	// preCheckColorManagement() and checkColorManagementMissingColorSpaces()
	// are no-ops if the color management feature is not available.
	-command    ("preCheckColorManagement(); projectViewer Import; checkForUnknownNodes(); checkColorManagementMissingColorSpaces();")
	// ADSK_CLR_MGT_END
	Import;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kImportOptionsAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("fileOptions \"Import\" \"projectViewer Import\"")
	ImportOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSendAsNewMudboxSceneAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("OneClickMenuExecute (\"Mudbox\", \"SendAsNewScene\")")
	SendAsNewSceneMudbox;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUpdateCurrentMudboxSceneAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("OneClickMenuExecute (\"Mudbox\", \"UpdateCurrentScene\")")
	UpdateCurrentSceneMudbox;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddToCurrentMudboxSceneAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("OneClickMenuExecute (\"Mudbox\", \"AddToScene\")")
	AddToCurrentSceneMudbox;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectPrevObjectsMudboxAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("OneClickMenuExecute (\"Mudbox\", \"SelectPreviousObjects\")")
	SelectPreviousObjectsMudbox;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSendAsNewMotionBuilderSceneAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("OneClickMenuExecute (\"MotionBuilder\", \"SendAsNewScene\")")
	SendAsNewSceneMotionBuilder;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUpdateCurrentMotionBuilderSceneAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("OneClickMenuExecute (\"MotionBuilder\", \"UpdateCurrentScene\")")
	UpdateCurrentSceneMotionBuilder;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddToCurrentMotionBuilderSceneAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("OneClickMenuExecute (\"MotionBuilder\", \"AddToScene\")")
	AddToCurrentSceneMotionBuilder;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectPrevObjectsMotionBuilderAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("OneClickMenuExecute (\"MotionBuilder\", \"SelectPreviousObjects\")")
	SelectPreviousObjectsMotionBuilder;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSendAsNew3dsMaxSceneAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("OneClickMenuExecute (\"3ds Max\", \"SendAsNewScene\")")
	SendAsNewScene3dsMax;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUpdateCurrent3dsMaxSceneAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("OneClickMenuExecute (\"3ds Max\", \"UpdateCurrentScene\")")
	UpdateCurrentScene3dsMax;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddToCurrent3dsMaxSceneAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("OneClickMenuExecute (\"3ds Max\", \"AddToScene\")")
	AddToCurrentScene3dsMax;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectPrevObjects3dsMaxAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("OneClickMenuExecute (\"3ds Max\", \"SelectPreviousObjects\")")
	SelectPreviousObjects3dsMax;
    

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExportAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("checkForUnknownNodes(); projectViewer ExportAll")
	Export;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExportOptionsAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("fileOptions \"ExportAll\" \"projectViewer ExportAll\"")
	ExportOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExportSelectionAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("checkForUnknownNodes(); projectViewer ExportActive")
	ExportSelection;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExportSelectionOptionsAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("fileOptions \"ExportActive\" \"projectViewer ExportActive\"")
	ExportSelectionOptions;
    
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExportOfflineFileAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("projectViewer ExportOfflineFile")
	ExportOfflineFile;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExportOfflineFileObjectsAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("fileOptions \"ExportOfflineFile\" \"projectViewer ExportOfflineFile\"")
	ExportOfflineFileOptions;    

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kApplyOfflineFileAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("projectViewer ApplyOfflineFile")
	AssignOfflineFile;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAssignOfflineFileOptionsAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("fileOptions \"ApplyOfflineFile\" \"projectViewer ApplyOfflineFile\"")
	AssignOfflineFileOptions;

runTimeCommand -default true
	-annotation (getRunTimeCommandAnnotation("ExportOfflineFile"))
	-category   ("Other items.Reference Editor")
	-command    ("projectViewer ExportOfflineFileFromRefEd")
	ExportOfflineFileFromRefEd;

runTimeCommand -default true
	-annotation (getRunTimeCommandAnnotation("ExportOfflineFileOptions"))
	-category   ("Other items.Reference Editor")
	-command    ("fileOptions \"ExportOfflineFileFromRefEd\" \"projectViewer ExportOfflineFileFromRefEd\"")
	ExportOfflineFileFromRefEdOptions;

runTimeCommand -default true
	-annotation (getRunTimeCommandAnnotation("AssignOfflineFile"))
	-category   ("Other items.Reference Editor")
	-command    ("projectViewer ApplyOfflineFileFromRefEd")
	AssignOfflineFileFromRefEd;

runTimeCommand -default true
	-annotation (getRunTimeCommandAnnotation("AssignOfflineFileOptions"))
	-category   ("Other items.Reference Editor")
	-command    ("fileOptions \"ApplyOfflineFileFromRefEd\" \"projectViewer ApplyOfflineFileFromRefEd\"")
	AssignOfflineFileFromRefEdOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExportProxyAssetAnnot"))
	-category   ("Menu items.Common.Modify.Asset;Editors.Asset Editor")
	-command    ("performExportContainerProxy 0")
	ExportProxyContainer;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExportProxyContainerOptionsAnnot"))
	-category   ("Menu items.Common.Modify.Asset;Editors.Asset Editor")
	-command    ("performExportContainerProxy 1")
	ExportProxyContainerOptions;
    
//  View Image and Sequence
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kViewImageAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("launchImageViewer 0;")
	ViewImage;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kViewSequenceAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("launchImageViewer 1;")
	ViewSequence;

//	Reference operations.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateReferenceAnnot"))
	-category   ("Menu items.Common.File")
	// ADSK_CLR_MGT_BEGIN
	// Only need to check for missing color spaces.
	// preCheckColorManagement() and checkColorManagementMissingColorSpaces()
	// are no-ops if the color management feature is not available.
	-command    ("preCheckColorManagement(); projectViewer Reference; checkColorManagementMissingColorSpaces();")
	// ADSK_CLR_MGT_END
	CreateReference;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateReferenceOptionsAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("fileOptions \"Reference\" \"projectViewer Reference\"")
	CreateReferenceOptions;

string $referenceEditorTitle = localizedPanelLabel("Reference Editor");
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReferenceEditorAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("tearOffPanel \"" + $referenceEditorTitle + "\" referenceEditor true")
	ReferenceEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPreloadReferenceEditorAnnot"))
	-category   ("Other items.Reference Editor")
	-command    ("showPreloadReferenceEditor")
	PreloadReferenceEditor;


//	Project operations.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProjectWindowAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("projectWindow")
	ProjectWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetProjectAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("setProject \"\"")
	SetProject;

//	Quit the application.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kQuitAnnot"))
	-category   ("Menu items.Common.File")
	-command    ("evalDeferred(\"quit\")")
	Quit;

//
//	Edit menu.
//
// ----------------------------------------------------------------------

//	Undo and Redo.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUndoAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("undo")
	Undo;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRedoAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("redo")
	Redo;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateCameraFromViewAnnotation"))
	-category   ("Other items.Viewport Menus.View")
	-command    ("MTcreateCameraFromView")
	CreateCameraFromView;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCycleThroughCamerasAnnotation"))
	-category   ("Other items.Viewport Menus.View")
	-command    ("MTcycleCustomCams")
	CycleThroughCameras;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAlignCameraToPolygonAnnotation"))
	-command    ("if(`pluginInfo -q -loaded \"modelingToolkit\"`){ dR_cameraToPoly; }")
	-category   ("Other items.Viewport Menus.View")
	AlignCameraToPolygon;

// Previous/Next/Default View. Modeling panel and hypershade panel specific
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUndoViewChangeAnnotation"))
	-category   ("Other items.Viewport Menus")
	-command    ( "{" +
				"  string $currentPanel = `getPanel -withFocus`; " +
				"  string $hyperGraphEditor = $currentPanel + \"HyperGraphEd\"; " +
				"  if (`hyperGraph -ex $hyperGraphEditor`) { " +
				"     HyperGraphPanelUndoViewChange;" +
				"  } else { " +
				"	  ModelingPanelUndoViewChange; " +
				"  }" +
				"}")
	UndoViewChange;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kModelingPanelUndoViewChangeAnnotation"))
	-category   ("Other items.Viewport items")
	-command    ( "	goToView -1;" )
	ModelingPanelUndoViewChange;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHyperGraphUndoViewChangeAnnotation"))
	-category   ("Editors.HyperGraph Panel")
	-command    ( "{" +
				"  string $currentPanel = `getPanel -withFocus`; " +
				"  string $hyperGraphEditor = $currentPanel + \"HyperGraphEd\"; " +
				"  if (`hyperGraph -ex $hyperGraphEditor`) { " +
				"     hyperGraph -e -previousView $hyperGraphEditor;" +
				"  }" +
				"}")
	-hotkeyCtx  ("hyperGraphPanel")
	HyperGraphPanelUndoViewChange;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRedoViewChangeAnnotation"))
	-category   ("Other items.Viewport Menus")
	-command    ( "{" +
				"  string $currentPanel = `getPanel -withFocus`; " +
				"  string $hyperGraphEditor = $currentPanel + \"HyperGraphEd\"; " +
				"  if (`hyperGraph -ex $hyperGraphEditor`) { " +
				"     HyperGraphPanelRedoViewChange;" +
				"  } else { " +
				"	 ModelingPanelRedoViewChange;" +
				"  }" +
				"}")
	RedoViewChange;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kModelingPanelRedoViewChangeAnnotation"))
	-category   ("Other items.Viewport items")
	-command    ( "	goToView 1;" )
	ModelingPanelRedoViewChange;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHyperGraphRedoViewChangeAnnotation"))
	-category   ("Editors.HyperGraph Panel")
	-command    ( "{" +
				"  string $currentPanel = `getPanel -withFocus`; " +
				"  string $hyperGraphEditor = $currentPanel + \"HyperGraphEd\"; " +
				"  if (`hyperGraph -ex $hyperGraphEditor`) { " +
				"     hyperGraph -e -nextView $hyperGraphEditor;" +
				"  }" +
				"}")
	-hotkeyCtx  ("hyperGraphPanel")
	HyperGraphPanelRedoViewChange;
	
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDefaultViewAnnotation"))
	-category   ("Other items.Viewport items")
	-command ("{ string $panel = `getPanel -withFocus`;"+
				"viewSet -animate `optionVar -query animateRoll` -home `hotkeyCurrentCamera $panel`;}")
	GoToDefaultView;

//	Repeat last.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRepeatLastAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("repeatLast")
	RepeatLast;

//	Recent Commands window.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRecentCommandsWindowAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("recentCmdWin")
	RecentCommandsWindow;

//	Cut, copy, paste, and delete keys.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCutKeysAnnot"))
	-category   ("Menu items.Common.Edit;Menu items.Animation.Key")
	-command    ("performCutKeyArgList 1 {\"0\", \"animationList\", \"0\"}")
	CutKeys;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCutKeysOptionsAnnot"))
	-category   ("Menu items.Common.Edit;Menu items.Animation.Key")
	-command    ("performCutKeyArgList 1 {\"1\", \"animationList\", \"0\"}")
	CutKeysOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCopyKeysAnnot"))
	-category   ("Menu items.Common.Edit;Menu items.Animation.Key")
	-command    ("performCopyKeyArgList 1 {\"0\", \"animationList\", \"0\"}")
	CopyKeys;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCopyKeysOptionsAnnot"))
	-category   ("Menu items.Common.Edit;Menu items.Animation.Key")
	-command    ("performCopyKeyArgList 1 {\"1\", \"animationList\", \"0\"}")
	CopyKeysOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPasteKeysAnnot"))
	-category   ("Menu items.Common.Edit;Menu items.Animation.Key")
	-command    ("performPasteKeyArgList 1 {\"0\", \"animationList\", \"0\"}")
	PasteKeys;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPasteKeysOptionsAnnot"))
	-category   ("Menu items.Common.Edit;Menu items.Animation.Key")
	-command    ("performPasteKeyArgList 1 {\"1\", \"animationList\", \"0\"}")
	PasteKeysOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteKeysAnnot"))
	-category   ("Menu items.Common.Edit;Menu items.Animation.Key")
	-command    ("performClearKeyArgList 1 {\"0\", \"animationList\", \"0\", \"0\"}")
	DeleteKeys;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteKeysOptionsAnnot"))
	-category   ("Menu items.Common.Edit;Menu items.Animation.Key")
	-command    ("performClearKeyArgList 1 {\"1\", \"animationList\", \"0\", \"0\"}")
	DeleteKeysOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllKeysAnnot"))
	-category   ("Other items.Edit")
	-command    ("doClearFBIKKeysArgList \"0\" {\"all\"}")
	-showInHotkeyEditor false
	DeleteFBIKAllKeys;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteBodyPartKeysAnnot"))
	-category   ("Other items.Edit")
	-command    ("doClearFBIKKeysArgList \"0\" {\"bodypart\"}")
	-showInHotkeyEditor false
	DeleteFBIKBodyPartKeys;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteSelectedKeysAnnot"))
	-category   ("Other items.Edit")
	-command    ("doClearFBIKKeysArgList \"0\" {\"selected\"}")
	-showInHotkeyEditor false
	DeleteFBIKSelectedKeys;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kScaleKeysAnnot"))
	-category   ("Menu items.Common.Edit;Menu items.Animation.Key")
	-command    ("performScaleKeyArgList 1 {\"0\", \"animationList\", \"0\"}")
	ScaleKeys;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kScaleKeysOptionsAnnot"))
	-category   ("Menu items.Common.Edit;Menu items.Animation.Key")
	-command    ("performScaleKeyArgList 1 {\"1\", \"animationList\", \"0\"}")
	ScaleKeysOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLatticeDeformAnnot"))
	-category   ("Editors.Graph Editor")
	-command    ("setToolTo latticeDeformKeySuperContext;toolPropertyWindow;")
	-hotkeyCtx  ("graphEditor")
	LatticeDeformKeysTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLatticeDeformOptionsAnnot"))
	-category   ("Editors.Graph Editor")
	-command    ("setToolTo latticeDeformKeySuperContext;toolPropertyWindow;")
	-hotkeyCtx  ("graphEditor")
	LatticeDeformKeysToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRegionKeyAnnot"))
	-category   ("Editors.Graph Editor")
	-command    ("setToolTo regionSelectKeySuperContext;")
	-hotkeyCtx  ("graphEditor")
	RegionKeysTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRetimeKeyAnnot"))
	-category   ("Editors.Graph Editor")
	-command    ("setToolTo retimeKeySuperContext;")
	-hotkeyCtx  ("graphEditor")
	RetimeKeysTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRetimeKeyOptionsAnnot"))
	-category   ("Editors.Graph Editor")
	-command    ("setToolTo retimeKeySuperContext;toolPropertyWindow;")
	-hotkeyCtx  ("graphEditor")
	RetimeKeysToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddKeys"))
	-category   ("Editors.Graph Editor")
	-command    ("setToolTo setKeySuperContext;")
	-hotkeyCtx  ("graphEditor")
	AddKeysTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddKeysOptions"))
	-category   ("Editors.Graph Editor")
	-command    ("setToolTo setKeySuperContext; toolPropertyWindow")
	-hotkeyCtx  ("graphEditor")
	AddKeysToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInsertKeys"))
	-category   ("Editors.Graph Editor")
	-command    ("setToolTo insertKeySuperContext;")
	-hotkeyCtx  ("graphEditor")
	InsertKeysTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInsertKeysOptions"))
	-category   ("Editors.Graph Editor")
	-command    ("setToolTo insertKeySuperContext; toolPropertyWindow")
	-hotkeyCtx  ("graphEditor")
	InsertKeysToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSnapKeysAnnot"))
	-category   ("Menu items.Common.Edit;Menu items.Animation.Key")
	-command    ("performSnapKeyArgList 1 { \"0\",  \"animationList\", \"0\" }")
	SnapKeys;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSnapKeysOptionsAnnot"))
	-category   ("Menu items.Common.Edit;Menu items.Animation.Key")
	-command    ("performSnapKeyArgList 1 { \"1\",  \"animationList\", \"0\" }")
	SnapKeysOptions;

//	Bake simulation.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBakeSimAnnot"))
	-category   ("Menu items.Common.Edit;Menu items.Animation.Key")
	-command    ("performBakeSimulationArgList 1 { \"0\",  \"animationList\"}")
	BakeSimulation;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBakeSimOptionsAnnot"))
	-category   ("Menu items.Common.Edit;Menu items.Animation.Key")
	-command    ("performBakeSimulationArgList 1 {\"1\", \"animationList\"}")
	BakeSimulationOptions;

//  Cut
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCutSelectedAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("cutCopyPaste \"cut\"")
	CutSelected;

//  Copy
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCopySelectedAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("cutCopyPaste \"copy\"")
	CopySelected;

//  Paste
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPasteSelectedAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("cutCopyPaste \"paste\"")
	PasteSelected;

//	Delete.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("doDelete")
	Delete;

//	Delete history.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteHistoryAnnot"))
	-category   ("Menu items.Common.Edit.Delete by Type")
	-command    ("delete -ch")
	DeleteHistory;

//	Delete Channels.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteChannelsAnnot"))
	-category   ("Menu items.Common.Edit.Delete by Type")
	-command    ("performDeleteChannels false")
	DeleteChannels;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteChannelsOptionsAnnot"))
	-category   ("Menu items.Common.Edit.Delete by Type")
	-command    ("performDeleteChannels true")
	DeleteChannelsOptions;

//	Delete Non-Deformer History
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBakeNonDefHistoryAnnot"))
	-category   ("Menu items.Common.Edit.Delete by Type")
	-command    ("performBakeNonDefHistory false")
	BakeNonDefHistory;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBakeNonDefHistoryOptionsAnnot"))
	-category   ("Menu items.Common.Edit.Delete by Type")
	-command    ("performBakeNonDefHistory true")
	BakeNonDefHistoryOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBakeAllNonDefHistoryAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("bakePartialHistory -all")
	BakeAllNonDefHistory;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBakeTopologyToTargetsAnnot"))
	-category   ("Menu items.Modeling.Deform.Blend Shape;Menu items.Animation.Key.Edit Blend Shape;Menu items.Rigging.Deform.Blend Shape")
	-command    ("bakePartialHistory -ppt")
	BakeTopologyToTargets;

//	Delete Static Channels.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteStaticChannelsAnnot"))
	-category   ("Menu items.Common.Edit.Delete by Type")
	-command    ("performDeleteStaticChannels false")
	DeleteStaticChannels;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteStaticChannelsOptionsAnnot"))
	-category   ("Menu items.Common.Edit.Delete by Type")
	-command    ("performDeleteStaticChannels true")
	DeleteStaticChannelsOptions;

//	Delete Motion Paths.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteMotionPathsAnnot"))
	-category   ("Menu items.Common.Edit.Delete by Type")
	-command    ("delete -mp")
	DeleteMotionPaths;

//	Delete Expressions.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteExpressionsAnnot"))
	-category   ("Menu items.Common.Edit.Delete by Type")
	-command    ("performDeleteExpressions false")
	DeleteExpressions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteExpressionsOptionsAnnot"))
	-category   ("Menu items.Common.Edit.Delete by Type")
	-command    ("performDeleteExpressions true")
	DeleteExpressionsOptions;

//	Delete Constraints.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteConstraintsAnnot"))
	-category   ("Menu items.Common.Edit.Delete by Type")
	-command    ("delete -constraints")
	DeleteConstraints;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteSelContainerAnnot"))
	-category   ("Menu items.Common.Edit.Delete by Type")
	-command    ("deleteAllContainers(1)")
	DeleteSelectedContainers;

//	Delete Rigid Bodies.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteRigidBodiesAnnot"))
	-category   ("Menu items.Common.Edit.Delete by Type")
	-command    ("deleteSelectRigidBodies")
	DeleteRigidBodies;

//	Delete all History.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllHistoryAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete -all -constructionHistory")
	DeleteAllHistory;

//	Delete all Channels.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllChannelsAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete -all -channels")
	DeleteAllChannels;

//	Delete all Static Channels.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllStaticChannelsAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete -all -staticChannels")
	DeleteAllStaticChannels;

//	Delete all Clips.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllClipsAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete `clip -q -allClips`")
	DeleteAllClips;
//	Delete all Poses.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllPosesAnnot"))
	-category   ("Other items.Edit")
	-command    ("delete `pose -q -allPoses`")
	-showInHotkeyEditor false
	DeleteAllPoses;

//	Delete all Motion Paths.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllMotionPathsAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete -all -motionPaths")
	DeleteAllMotionPaths;

//	Delete all Expressions.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllExpressionsAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete -all -expressions")
	DeleteAllExpressions;
    
//	Delete all Constraints.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllConstraintsAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete -all -constraints")
	DeleteAllConstraints;

//	Delete all Sounds.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllSoundsAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete `ls -type audio`")
	DeleteAllSounds;

//	Delete all Joints.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllJointsAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete `ls -type joint`")
	DeleteAllJoints;

//	Delete all IK Handles.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllIKHandlesAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete `ls -type ikHandle -type hikEffector`")
	DeleteAllIKHandles;

//	Delete all Lattices.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllLatticesAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete `ls -type ffd`; delete `ls -type lattice`")
	DeleteAllLattices;

//	Delete all Clusters.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllClustersAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete `ls -type cluster`")
	DeleteAllClusters;

//	Delete all Sculpt Objects.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllSculptObjectsAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete `ls -type sculpt`; " +
				 "delete `ls -type implicitSphere`")
	DeleteAllSculptObjects;

//	Delete all Wires.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllWiresAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete `ls -type wire`")
	DeleteAllWires;

//	Delete all Non-linear Deformers.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllNonLinearDeformersAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete `ls -type nonLinear`")
	DeleteAllNonLinearDeformers;

//	Delete all Lights.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllLightsAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete `listTransforms -lights`")
	DeleteAllLights;

//	Delete all Cameras.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllCamerasAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete `listTransforms -cameras`")
	DeleteAllCameras;

//	Delete all Image Planes.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllImagePlanesAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete `ls -type imagePlane`")
	DeleteAllImagePlanes;

//	Delete all Shading Groups and Materials.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllShadingGroupsAndMaterialsAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("deleteShadingGroupsAndMaterials")
	DeleteAllShadingGroupsAndMaterials;

//	Delete all Particles.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllParticlesAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete `listTransforms \"-type particle\"`")
	DeleteAllParticles;

//	Delete all Fluids.
//
	runTimeCommand -default true
    -annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllFluidsAnnot"))
    -category   ("Menu items.Common.Edit.Delete All by Type")
    -command    ("delete `listTransforms \"-type fluidShape\"`")
    DeleteAllFluids;


//	Delete all Fur.
//
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllFursAnnot"))
		-category   ("Menu items.Common.Edit.Delete All by Type")
		-command    ("delete `listTransforms \"-type FurFeedback\"`")
		DeleteAllFurs;

//	Delete all Rigid Bodies.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllRigidBodiesAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete `ls -type rigidBody`")
	DeleteAllRigidBodies;

//	Delete all Rigid Constraints.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllRigidConstraintsAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("delete `ls -type rigidConstraint`")
	DeleteAllRigidConstraints;

//	Delete all Strokes.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllStrokesAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("deleteAllStrokes()")
	DeleteAllStrokes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllAssetsAnnot"))
	-category   ("Menu items.Common.Edit.Delete All by Type")
	-command    ("deleteAllContainers(0)")
	DeleteAllContainers;

//	Select all.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllAnnot"))
	-category   ("Menu items.Common.Select")
	-command    ("select -cl; MTselAll")
	SelectAll;

// Select None
// 
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeselect"))
	-category 	("Menu items.Common.Select")
	-command 	("changeSelectMode -component; changeSelectMode -object; select -cl; autoUpdateAttrEd; statusLineUpdateInputField;")
	SelectNone;

//	Invert Selection.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInvertSelectionAnnot"))
	-category   ("Menu items.Common.Select")
	-command    ("invertSelection")
	InvertSelection;

//	Select Similar.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectSimilarAnnot"))
	-category   ("Menu items.Common.Select")
	-command    ("performSelectSimilar 0")
	SelectSimilar;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectSimilarOptionsAnnot"))
	-category   ("Menu items.Common.Select")
	-command    ("performSelectSimilar 1")
	SelectSimilarOptions;

//	Select all Joints.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllJointsAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `ls -type joint`")
	SelectAllJoints;

//	Select all IK Handles.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllIKHandlesAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `ls -type ikHandle -type hikEffector`")
	SelectAllIKHandles;

//	Select all Lattices.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllLatticesAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `listTransforms \"-type lattice\"`")
	SelectAllLattices;

//	Select all Clusters.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllClustersAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select `listTransforms \"-type clusterHandle\"`")
	SelectAllClusters;

//	Select all Sculpt Objects.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllSculptObjectsAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `listTransforms \" -type implicitSphere -type sculpt\"`")
	SelectAllSculptObjects;

//	Select all Wires.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllWiresAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `ls -type wire`")
	SelectAllWires;

//	Select all Transforms.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllTransformsAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `ls -type transform`")
	SelectAllTransforms;

//	Select all Geometry.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllGeometryAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `listTransforms -geometry`")
	SelectAllGeometry;

//	Select all NURBS Curves.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllNURBSCurvesAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `listTransforms \"-type nurbsCurve\"`")
	SelectAllNURBSCurves;

//	Select all NURBS Surfaces.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllNURBSSurfacesAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `listTransforms \"-type nurbsSurface\"`")
	SelectAllNURBSSurfaces;

//	Select all Polygon Geometry.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllPolygonGeometryAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `listTransforms \"-type mesh\"`")
	SelectAllPolygonGeometry;

//	Select all Subdiv Geometry.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllSubdivGeometryAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `listTransforms \"-type subdiv\"`")
	SelectAllSubdivGeometry;

//	Select all Lights.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllLightsAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `listTransforms -lights`")
	SelectAllLights;

//	Select all Cameras.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllCamerasAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `listTransforms -cameras`")
	SelectAllCameras;

//	Select all Image Planes.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllImagePlanesAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `ls -type imagePlane`")
	SelectAllImagePlanes;

//	Select all Particles.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllParticlesAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `listTransforms \"-type particle\"`")
	SelectAllParticles;

//	Select all Fluids.
//
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllFluidsAnnot"))
		-category   ("Menu items.Common.Select.All by Type")
		-command    ("select -r `listTransforms \"-type fluidShape\"`")
		SelectAllFluids;

//	Select all HairSystems.
//
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllHairSystemAnnot"))
		-category   ("Menu items.Common.Select.All by Type")
		-command    ("select -r `listTransforms \"-type hairSystem\"`")
		SelectAllHairSystem;

//	Select all Follicles.
//
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllFolliclesAnnot"))
		-category   ("Menu items.Common.Select.All by Type")
		-command    ("select -r `listTransforms \"-type follicle\"`")
		SelectAllFollicles;

//	Select all nCloth.
//
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllNClothsAnnot"))
		-category   ("Menu items.Common.Select.All by Type")
		-command    ("select -r `listTransforms \"-type nCloth\"`")
		SelectAllNCloths;

//	Select all nParticle.
//
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllNParticlesAnnot"))
		-category   ("Menu items.Common.Select.All by Type")
		-command    ("select -r `listTransforms \"-type nParticle\"`")
		SelectAllNParticles;

//	Select all nRigid.
//
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllNRigidsAnnot"))
		-category   ("Menu items.Common.Select.All by Type")
		-command    ("select -r `listTransforms \"-type nRigid\"`")
		SelectAllNRigids;

//	Select all dynamicConstraint.
//
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllDynamicConstraintsAnnot"))
		-category   ("Menu items.Common.Select.All by Type")
		-command    ("select -r `listTransforms \"-type dynamicConstraint\"`")
		SelectAllDynamicConstraints;

//	Delete all nCloths.
//
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllNClothsAnnot"))
		-category   ("Menu items.Common.Edit.Delete All by Type")
		-command	("performRemoveNCloth 0 \"allNCloths\"")
		DeleteAllNCloths;

//	Delete all nParticles
//
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllNParticlesAnnot"))
		-category   ("Menu items.Common.Edit.Delete All by Type")
		-command	("delete `ls -typ nParticle`")
		DeleteAllNParticles;

//	Delete all nRigids.
//
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllNRigidsAnnot"))
		-category   ("Menu items.Common.Edit.Delete All by Type")
		-command	("performRemoveNCloth 0 \"allNRigids\"")
		DeleteAllNRigids;

//	Delete all dynamicConstraints.
//
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAllDynamicConstraintsAnnot"))
		-category   ("Menu items.Common.Edit.Delete All by Type")
		-command	("performRemoveDynamicConstraint 0 \"all\"")
		DeleteAllDynamicConstraints;

//	Select all Furs.
//
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllFursAnnot"))
		-category   ("Menu items.Common.Select.All by Type")
		-command    ("select -r `listTransforms \"-type FurFeedback\"`")
		SelectAllFurs;

//	Select all Rigid Bodies.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllRigidBodiesAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `listTransforms \"-type rigidBody\"`")
	SelectAllRigidBodies;

//	Select all Rigid Constraints.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllRigidConstraintsAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `ls -type rigidConstraint`")
	SelectAllRigidConstraints;

//	Select all Strokes.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllStrokesAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `listTransforms \"-type stroke\"`")
	SelectAllStrokes;

//	Select all Brushes.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllBrushesAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `ls -type brush`")
	SelectAllBrushes;

//	Select all containers.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllAssetsAnnot"))
	-category   ("Menu items.Common.Select.All by Type")
	-command    ("select -r `ls -type container -type dagContainer`")
	SelectAllAssets;

//	Paint Selection Tool.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kArtPaintSelectToolAnnot"))
	-category   ("Other items.Tools")
	-command    ("artSelectToolScript 4")
	ArtPaintSelectTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kArtPaintSelectToolOptionsAnnot"))
	-category   ("Other items.Tools")
	-command    ("artSelectToolScript 3")
	ArtPaintSelectToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectHierarchyAnnot"))
	-category   ("Menu items.Common.Select")
	-command    ("select -hierarchy")
	SelectHierarchy;

//	Duplicate.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDuplicateAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("performDuplicate false")
	Duplicate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDuplicateSpecial"))
	-category   ("Menu items.Common.Edit")
	-command    ("performDuplicateSpecial false")
	DuplicateSpecial;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDuplicateSpecialOptions"))
	-category   ("Menu items.Common.Edit")
	-command    ("performDuplicateSpecial true")
	DuplicateSpecialOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDuplicateWithTransformAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("evalEcho(\"duplicate -smartTransform\")")
	DuplicateWithTransform;

//	Group.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGroupAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("performGroup false")
	Group;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGroupOptionsAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("performGroup true")
	GroupOptions;

//	Ungroup.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUngroupAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("performUngroup false")
	Ungroup;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUngroupOptionsAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("performUngroup true")
	UngroupOptions;

//	Create Empty Group.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateEmptyGroupAnnot"))
	-category   ("Menu items.Common.Create")
	-command    ("group -empty")
	CreateEmptyGroup;

//	Level of Detail Group/Ungroup.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLevelOfDetailGroupAnnot"))
	-category   ("Menu items.Common.Edit.Level of Detail")
	-command    ("performSetupLod")
	LevelOfDetailGroup;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLevelOfDetailUngroupAnnot"))
	-category   ("Menu items.Common.Edit.Level of Detail")
	-command    ("performDeleteLod")
	LevelOfDetailUngroup;

//	Parent.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kParentAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("performParent false")
	Parent;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kParentOptionsAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("performParent true")
	ParentOptions;

//	Unparent.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUnparentAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("performUnparent false")
	Unparent;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUnparentOptionsAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("performUnparent true")
	UnparentOptions;

//	Sets and Partitions.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSetAnnot"))
	-category   ("Menu items.Common.Create.Sets")
	-command    ("performCreateSet false")
	CreateSet;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSetOptionsAnnot"))
	-category   ("Menu items.Common.Create.Sets")
	-command    ("performCreateSet true")
	CreateSetOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePartitionAnnot"))
	-category   ("Menu items.Common.Create.Sets")
	-command    ("performCreatePartition false")
	CreatePartition;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePartitionOptionsAnnot"))
	-category   ("Menu items.Common.Create.Sets")
	-command    ("performCreatePartition true")
	CreatePartitionOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleAssetCentricAnnot"))
	-category   ("Other items.Selection")
	-command    ("selectPref -containerCentricSelection (!`selectPref -q -containerCentricSelection`);")
	-showInHotkeyEditor false
	ToggleContainerCentric;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateAssetAnnot"))
	-category   ("Menu items.Common.Create.Asset;Editors.Asset Editor")
	-command    ("performCreateContainer 0;")
	CreateContainer;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateAssetOptAnnot"))
	-category   ("Menu items.Common.Create.Asset;Editors.Asset Editor")
	-command    ("performCreateContainer 1;")
	CreateContainerOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateDagContainerAnnot"))
	-category   ("Menu items.Common.Create.Asset;Editors.Asset Editor")
	-command    ("performCreateDagContainer 0;")
	CreateDagContainer;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateAssetTransformOptAnnot"))
	-category   ("Menu items.Common.Create.Asset;Editors.Asset Editor")
	-command    ("performCreateDagContainer 1;")
	CreateDagContainerOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAssignTemplateAnnot"))
	-category   ("Menu items.Common.Modify.Asset;Editors.Asset Editor")
	-command    ("projectViewer AssignTemplate")
	AssignTemplate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAssignTemplateOptAnnot"))
	-category   ("Menu items.Common.Modify.Asset;Editors.Asset Editor")
	-command    ("fileOptions \"AssignTemplate\" \"projectViewer AssignTemplate\"")
	AssignTemplateOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAutobindAssetAnnot"))
	-category   ("Editors.Asset Editor")
	-command    ("performAutobindContainer 0;")
	AutobindContainer;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAutobindAssetOptAnnot"))
	-category   ("Editors.Asset Editor")
	-command    ("performAutobindContainer 1;")
	AutobindContainerOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateBindingSetAnnot"))
	-category   ("Editors.Asset Editor")
    -command    ("doCreateBindingSet 1 {\"0\", \"0\" };")
	CreateBindingSet;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUpdateBindingSetAnnot"))
	-category   ("Editors.Asset Editor")
	-command    ("performUpdateBindingSet 0;")
	UpdateBindingSet;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateBindingSetOptAnnot"))
	-category   ("Editors.Asset Editor")
	-command    ("performUpdateBindingSet 1;")
	UpdateBindingSetOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveBindingSetAnnot"))
	-category   ("Editors.Asset Editor")
    -command    ("doRemoveBindingSet 1 { };")
	RemoveBindingSet;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddToContainerAnnot"))
	-category   ("Menu items.Common.Modify.Asset")
	-command    ("performAddToContainer 0;")
	AddToContainer;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddToContainerOptAnnot"))
	-category   ("Menu items.Common.Modify.Asset")
	-command    ("performAddToContainer 1;")
	AddToContainerOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveFromAssetAnnot"))
	-category   ("Menu items.Common.Modify.Asset")
	-command    ("performRemoveFromContainer 0;")
	RemoveFromContainer;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveFromAssetOptAnnot"))
	-category   ("Menu items.Common.Modify.Asset")
	-command    ("performRemoveFromContainer 1;")
	RemoveFromContainerOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLockContainerAnnot"))
	-category   ("Menu items.Common.Modify.Asset;Editors.Asset Editor")
	-command    ("lockContainer 1")
	LockContainer;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUnlockContainerAnnot"))
	-category   ("Menu items.Common.Modify.Asset;Editors.Asset Editor")
	-command    ("lockContainer 0")
	UnlockContainer;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPublishSelTransformAnnot"))
	-category   ("Menu items.Common.Modify.Asset.Advanced Assets.Node Publishing")
	-command    ("performPublishRootTransform 0")
	PublishRootTransform;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPublishSelTransformOptAnnot"))
	-category   ("Menu items.Common.Modify.Asset.Advanced Assets.Node Publishing")
	-command    ("performPublishRootTransform 1")
	PublishRootTransformOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUnpublishSelTransformAnnot"))
	-category   ("Menu items.Common.Modify.Asset.Advanced Assets.Node Unpublishing")
	-command    ("doPublishRootTransform 1 {\"0\", \"0\" }")
	UnpublishRootTransform;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPublishAttributesAnnot"))
	-category   ("Menu items.Common.Modify.Asset")
	-command    ("performPublishAttribute 0;")
	PublishAttributes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPublishAttributesOptAnnot"))
	-category   ("Menu items.Common.Modify.Asset")
	-command    ("performPublishAttribute 1;")
	PublishAttributesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUnpublishAttributesAnnot"))
	-category   ("Menu items.Common.Modify.Asset")
	-command    ("channelBoxCommand -unpublishFromContainer")
	UnpublishAttributes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPublishConnectionsAnnot"))
	-category   ("Menu items.Common.Modify.Asset")
	-command    ("performPublishConnections 0;")
	PublishConnections;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPublishConnectionsOptAnnot"))
	-category   ("Menu items.Common.Modify.Asset")
	-command    ("performPublishConnections 1;")
	PublishConnectionsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kClearCurrentContainerAnnot"))
	-category   ("Menu items.Common.Modify.Asset.Advanced Assets.Set Current Asset")
	-command    ("if (size(`container -q -c`) > 0) {container -e -c 0 `container -q -c`;}")
	ClearCurrentContainer;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTransferAttributeValuesOptAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("performTransferContainer 1;")
	TransferAttributeValuesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTransferAttributeValuesAnnot"))
	-category   ("Menu items.Common.Edit")
	-command    ("performTransferContainer 0;")
	TransferAttributeValues;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPublishParentAnchorAnnot"))
	-category   ("Menu items.Common.Modify.Asset.Advanced Assets.Node Publishing")
	-command	("performPublishNode 0 1")
	PublishParentAnchor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPublishParentAnchorOptAnnot"))
	-category   ("Menu items.Common.Modify.Asset.Advanced Assets.Node Publishing")
	-command    ("performPublishNode 1 1;")
	PublishParentAnchorOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPublishChildAnchorAnnot"))
	-category   ("Menu items.Common.Modify.Asset.Advanced Assets.Node Publishing")
	-command	("performPublishNode 0 0")
	PublishChildAnchor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPublishChildAnchorOptAnnot"))
	-category   ("Menu items.Common.Modify.Asset.Advanced Assets.Node Publishing")
	-command    ("performPublishNode 1 0;")
	PublishChildAnchorOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPublishNodeAnnot"))
	-category   ("Menu items.Common.Modify.Asset")
	-command	("doPublishNode 1 {\"1\"}")
	PublishNode;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUnpublishNodeAnnot"))
	-category   ("Menu items.Common.Modify.Asset")
	-command	("doPublishNode 1 {\"0\"}")
	UnpublishNode;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUnpublishParentAnchorAnnot"))
	-category 	("Menu items.Common.Modify.Asset.Advanced Assets.Node Unpublishing")
	-command	("doUnpublishNode 1;")
	UnpublishParentAnchor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUnpublishChildAnchorAnnot"))
	-category 	("Menu items.Common.Modify.Asset.Advanced Assets.Node Unpublishing")
	-command	("doUnpublishNode 0;")
	UnpublishChildAnchor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAssetContentsAnnot"))
	-category 	("Menu items.Common.Modify.Asset;Editors.Asset Editor")
	-command	("selectContainerContents")
	SelectContainerContents;


//
//	Modify menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMoveRotateScaleToggleSnapRelativeModeAnnot"))
	-category   ("Other items.Tools")
	-command    ("manipMoveContext -e -snap (!`manipMoveContext -q -snap Move`) Move;" +
				 "manipMoveContext -e -snapRelative (!`manipMoveContext -q -snapRelative Move `) Move;" +
				 "manipRotateContext -e -snap (!`manipRotateContext -q -snap Rotate`) Rotate;" +
				 "manipRotateContext -e -snapRelative (!`manipRotateContext -q -snapRelative Rotate`) Rotate;" +
				 "manipScaleContext -e -snap (!`manipScaleContext -q -snap Scale`) Scale;" +
				 "manipScaleContext -e -snapRelative (!`manipScaleContext -q -snapRelative Scale`) Scale;"
				 )
	MoveRotateScaleToolToggleSnapRelativeMode;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMoveToolAnnot"))
	-category   ("Menu items.Common.Modify.Transformation Tools")
	-command    ("setToolTo $gMove")
	MoveTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMoveToolOptionsAnnot"))
	-category   ("Menu items.Common.Modify.Transformation Tools")
	-command    ("setToolTo $gMove; toolPropertyWindow")
	MoveToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRotateToolAnnot"))
	-category   ("Menu items.Common.Modify.Transformation Tools")
	-command    ("setToolTo $gRotate")
	RotateTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMoveRotateScaleToggleSnapModeAnnot"))
	-category   ("Other items.Tools")
	-command    ("manipRotateContext -e -snap (!`manipRotateContext -q -snap Rotate`) Rotate;" +
				 "manipMoveContext -e -snap (!`manipMoveContext -q -snap Move`) Move;" +
				 "manipScaleContext -e -snap (!`manipScaleContext -q -snap Scale`) Scale;" +
				 "texRotateContext -e -snap (!`texRotateContext -q -snap texRotateContext`) texRotateContext;" +
				 "texScaleContext -e -snap (!`texScaleContext -q -snap texScaleContext`) texScaleContext;" +
				 "showManipCtx -e -toggleIncSnap showManip3D;")
	MoveRotateScaleToolToggleSnapMode;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSTRSTweakModeOn"))
	-category   ("Other items.Tools")
	-command    ("strsTweakMode(1)")
	STRSTweakModeOn;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSTRSTweakModeOff"))
	-category   ("Other items.Tools")
	-command    ("strsTweakMode(0)")
	STRSTweakModeOff;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSTRSTweakModeToggle"))
	-category   ("Other items.Tools")
	-command    ("strsTweakMode(2)")
	STRSTweakModeToggle;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRotateToolOptionsAnnot"))
	-category   ("Menu items.Common.Modify.Transformation Tools")
	-command    ("setToolTo $gRotate; toolPropertyWindow")
	RotateToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kScaleToolAnnot"))
	-category   ("Menu items.Common.Modify.Transformation Tools")
	-command    ("setToolTo $gScale")
	ScaleTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kScaleToolOptionsAnnot"))
	-category   ("Menu items.Common.Modify.Transformation Tools")
	-command    ("setToolTo $gScale; toolPropertyWindow")
	ScaleToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUniversalManipAnnot"))
	-category   ("Menu items.Common.Modify.Transformation Tools")
	-command    ("setToolTo $gXformManip")
	UniversalManip;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUniversalManipOptionsAnnot"))
	-category   ("Menu items.Common.Modify.Transformation Tools")
	-command    ("setToolTo $gXformManip; toolPropertyWindow")
	UniversalManipOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMoveRotateScaleToolAnnot"))
	-category   ("Menu items.Common.Modify.Transformation Tools")
	-command    ("setToolTo $gTransform")
	MoveRotateScaleTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMoveNormalToolAnnot"))
	-category   ("Menu items.Common.Modify.Transformation Tools")
	-command    ("setToolTo $gMoveNormal")
	MoveNormalTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMoveNormalToolOptionsAnnot"))
	-category   ("Menu items.Common.Modify.Transformation Tools")
	-command    ("setToolTo $gMoveNormal; toolPropertyWindow")
	MoveNormalToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowManipulatorToolAnnot"))
	-category   ("Menu items.Common.Modify.Transformation Tools")
	-command    ("setToolTo $gshowManip")
	ShowManipulatorTool;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProportionalModificationToolAnnot"))
	-category   ("Menu items.Common.Modify.Transformation Tools")
	-command    ("setToolTo $gPropMod")
	ProportionalModificationTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSoftModToolAnnot"))
	-category   ("Menu items.Common.Modify.Transformation Tools;Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("setToolTo ShowManips; performSoftMod 0 0 0 {0.0, 0.0, 0.0}")
	SoftModTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSoftModToolOptionsAnnot"))
	-category   ("Menu items.Common.Modify.Transformation Tools;Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("performSoftMod 1 0 0 {0.0, 0.0, 0.0}")
	SoftModToolOptions;

runTimeCommand -default true
 	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonNormalEditToolAnnot"))
 	-category   ("Menu items.Modeling.Mesh Display")
 	-command    ("setToolTo $gPolyNormEdit")
 	PolygonNormalEditTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kResetTransformationsAnnot"))
	-category   ("Menu items.Common.Modify")
	-command    ("performResetTransformations(0)")
	ResetTransformations;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kResetTransformationsOptionsAnnot"))
	-category   ("Menu items.Common.Modify")
	-command    ("performResetTransformations 1")
	ResetTransformationsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFreezeTransformationsAnnot"))
	-category   ("Menu items.Common.Modify")
	-command    ("performFreezeTransformations(0)")
	FreezeTransformations;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFreezeTransformationsOptionsAnnot"))
	-category   ("Menu items.Common.Modify")
	-command    ("performFreezeTransformations 1")
	FreezeTransformationsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSnapPointToPointAnnot"))
	-category   ("Menu items.Common.Modify.Snap Align Objects")
	-command    ("snapPointToPoint(0)")
	SnapPointToPoint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSnapPointToPointOptionsAnnot"))
	-category   ("Menu items.Common.Modify.Snap Align Objects")
	-command    ("performSnapPtToPt 1")
	SnapPointToPointOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSnap2PointsTo2PointsAnnot"))
	-category   ("Menu items.Common.Modify.Snap Align Objects")
	-command    ("performSnap2PtTo2Pt 0")
	Snap2PointsTo2Points;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSnap2PointsTo2PointsOptionsAnnot"))
	-category   ("Menu items.Common.Modify.Snap Align Objects")
	-command    ("performSnap2PtTo2Pt 1")
	Snap2PointsTo2PointsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSnap3PointsTo3PointsAnnot"))
	-category   ("Menu items.Common.Modify.Snap Align Objects")
	-command    ("performSnap3PtTo3Pt 0")
	Snap3PointsTo3Points;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSnap3PointsTo3PointsOptionsAnnot"))
	-category   ("Menu items.Common.Modify.Snap Align Objects")
	-command    ("performSnap3PtTo3Pt 1")
	Snap3PointsTo3PointsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPositionAlongCurveAnnot"))
	-category   ("Menu items.Common.Modify.Snap Align Objects")
	-command "python \"import maya.app.general.positionAlongCurve\";python \"maya.app.general.positionAlongCurve.positionAlongCurve()\""
	PositionAlongCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnableAllAnnot"))
	-category   ("Menu items.Common.Modify.Evaluate Nodes")
	-command    ("doEnableNodeItems true all")
	EnableAll;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnableIKSolversAnnot"))
	-category   ("Menu items.Common.Modify.Evaluate Nodes")
	-command    ("doEnableNodeItems true iksolver")
	EnableIKSolvers;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnableConstraintsAnnot"))
	-category   ("Menu items.Common.Modify.Evaluate Nodes")
	-command    ("doEnableNodeItems true constraint")
	EnableConstraints;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnableExpressionsAnnot"))
	-category   ("Menu items.Common.Modify.Evaluate Nodes")
	-command    ("doEnableNodeItems true expression")
	EnableExpressions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnableFluidsAnnot"))
	-category   ("Menu items.Common.Modify.Evaluate Nodes")
	-command    ("doEnableNodeItems true fluid")
	EnableFluids;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnableGlobalStitchAnnot"))
	-category   ("Menu items.Common.Modify.Evaluate Nodes")
	-command    ("doEnableNodeItems true globalstitch")
	EnableGlobalStitch;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnableNClothsAnnot"))
	-category   ("Menu items.Common.Modify.Evaluate Nodes")
	-command    ("doEnableNodeItems true nCloth")
	EnableNCloths;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnableNparticlesAnnot"))
	-category   ("Menu items.Common.Modify.Evaluate Nodes")
	-command    ("doEnableNodeItems true nParticle")
	EnableNParticles;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnableNRigidsAnnot"))
	-category   ("Menu items.Common.Modify.Evaluate Nodes")
	-command    ("doEnableNodeItems true nRigid")
	EnableNRigids;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnableDynamicConstraintsAnnot"))
	-category   ("Menu items.Common.Modify.Evaluate Nodes")
	-command    ("doEnableNodeItems true dynamicConstraint")
	EnableDynamicConstraints;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnableNucleusesAnnot"))
	-category   ("Menu items.Common.Modify.Evaluate Nodes")
	-command    ("doEnableNodeItems true nucleus")
	EnableNucleuses;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnableParticlesAnnot"))
	-category   ("Menu items.Common.Modify.Evaluate Nodes")
	-command    ("doEnableNodeItems true particle")
	EnableParticles;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnableRigidBodiesAnnot"))
	-category   ("Menu items.Common.Modify.Evaluate Nodes")
	-command    ("doEnableNodeItems true rigidbody")
	EnableRigidBodies;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnableSnapshotsAnnot"))
	-category   ("Menu items.Common.Modify.Evaluate Nodes")
	-command    ("doEnableNodeItems true snapshot")
	EnableSnapshots;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisableAllAnnot"))
	-category   ("Menu items.Common.Modify.Evaluate Nodes")
	-command    ("doEnableNodeItems false all")
	DisableAll;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisableIKSolversAnnot"))
	-category   ("Other items.Modify")
	-command    ("doEnableNodeItems false iksolver")
	-showInHotkeyEditor false
	DisableIKSolvers;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisableConstraintsAnnot"))
	-category   ("Other items.Modify")
	-command    ("doEnableNodeItems false constraint")
	-showInHotkeyEditor false
	DisableConstraints;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisableExpressionsAnnot"))
	-category   ("Other items.Modify")
	-command    ("doEnableNodeItems false expression")
	-showInHotkeyEditor false
	DisableExpressions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisableFluidsAnnot"))
	-category   ("Other items.Modify")
	-command    ("doEnableNodeItems false fluid")
	-showInHotkeyEditor false
	DisableFluids;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisableGlobalStitchAnnot"))
	-category   ("Other items.Modify")
	-command    ("doEnableNodeItems false globalstitch")
	-showInHotkeyEditor false
	DisableGlobalStitch;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisableParticlesAnnot"))
	-category   ("Other items.Modify")
	-command    ("doEnableNodeItems false particle")
	-showInHotkeyEditor false
	DisableParticles;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisableRigidBodiesAnnot"))
	-category   ("Other items.Modify")
	-command    ("doEnableNodeItems false rigidbody")
	-showInHotkeyEditor false
	DisableRigidBodies;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisableSnapshotsAnnot"))
	-category   ("Other items.Modify")
	-command    ("doEnableNodeItems false snapshot")
	-showInHotkeyEditor false
	DisableSnapshots;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMakeLiveAnnot"))
	-category   ("Menu items.Common.Modify")
	-command    ("makeLive")
	MakeLive;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCenterPivotAnnot"))
	-category   ("Menu items.Common.Modify")
	-command    ("xform -cpc")
	CenterPivot;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBakePivotAnnot"))
	-category   ("Menu items.Common.Modify")
	-command    ("bakeCustomToolPivot")
	BakeCustomPivot;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPrefixHierarchyNamesAnnot"))
	-category   ("Menu items.Common.Modify")
	-command    ("prefixHierarchy")
	PrefixHierarchyNames;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddAttributeAnnot"))
	-category   ("Menu items.Common.Modify")
	-command    ("dynAddAttrWin( {} )")
	AddAttribute;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteAttributeAnnot"))
	-category   ("Menu items.Common.Modify")
	-command    ("dynDeleteAttrWin( {} )")
	DeleteAttribute;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRenameAttributeAnnot"))
	-category   ("Menu items.Common.Modify")
	-command    ("dynRenameAttrWin( {} )")
	RenameAttribute;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConvertInstanceToObjectAnnot"))
	-category   ("Menu items.Common.Modify.Convert")
	-command    ("convertInstanceToObject")
	ConvertInstanceToObject;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReplaceObjectsAnnot"))
	-category   ("Menu items.Common.Modify")
	-command    ("performReplaceObjects 0")
	ReplaceObjects;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReplaceObjectsOptionsAnnot"))
	-category   ("Menu items.Common.Modify")
	-command    ("performReplaceObjects 1")
	ReplaceObjectsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kScriptPaintToolAnnot"))
	-category   ("Menu items.Common.Modify")
	-command    ("artUserPaintToolScript 4")
	ScriptPaintTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kScriptPaintToolOptionsAnnot"))
	-category   ("Menu items.Common.Modify")
	-command    ("artUserPaintToolScript 3")
	ScriptPaintToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNURBSToPolygonsAnnot"))
	-category   ("Menu items.Common.Modify.Convert")
	-command    ("performnurbsToPoly 0")
	NURBSToPolygons;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNURBSToPolygonsOptionsAnnot"))
	-category   ("Menu items.Common.Modify.Convert")
	-command    ("performnurbsToPoly 1")
	NURBSToPolygonsOptions;
	
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAnnGeometryToBoundingBox")) 
	-category   ("Menu items.Common.Modify.Convert")
	-command    ("performGeomToBBox 0")
	GeometryToBoundingBox;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAnnGeometryToBoundingBoxOpt")) 
	-category   ("Menu items.Common.Modify.Convert")
	-command    ("performGeomToBBox 1")
	GeometryToBoundingBoxOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMeshPreviewToPolyAnnot"))
	-category   ("Menu items.Common.Modify.Convert")
	-command    ("performSmoothMeshPreviewToPolygon")
	CreatePolyFromPreview;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMeshToCurveAnnot"))
	-category   ("Menu items.Common.Modify.Convert")
	-command    ("performPolyToCurve 0")
	CreateCurveFromPoly;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMeshToCurveOptionsAnnot"))
	-category   ("Menu items.Common.Modify.Convert")
	-command    ("performPolyToCurve 1")
	CreateCurveFromPolyOptions;


// General Attribute Paint Tool
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kArtPaintAttrToolAnnot"))
	-category   ("Menu items.Common.Modify")
	-command    ("artAttrToolScript 4 \"\"")
	ArtPaintAttrTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kArtPaintAttrToolOptionsAnnot"))
	-category   ("Menu items.Common.Modify")
	-command    ("artAttrToolScript 3 \"\" ")
	ArtPaintAttrToolOptions;


//
//	Create menu.
//
// ----------------------------------------------------------------------

//	Create NURBS primitives.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNurbsSphereAnnot"))
	-category   ("Menu items.Common.Create.NURBS Primitives")
	-command    ("performNurbsSphere 0")
	CreateNURBSSphere;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNurbsSphereOptionsAnnot"))
	-category   ("Menu items.Common.Create.NURBS Primitives")
	-command    ("performNurbsSphere 1")
	CreateNURBSSphereOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNurbsCubeAnnot"))
	-category   ("Menu items.Common.Create.NURBS Primitives")
	-command    ("performNurbsCube 0")
	CreateNURBSCube;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNurbsCubeOptionsAnnot"))
	-category   ("Menu items.Common.Create.NURBS Primitives")
	-command    ("performNurbsCube 1")
	CreateNURBSCubeOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNurbsCylinderAnnot"))
	-category   ("Menu items.Common.Create.NURBS Primitives")
	-command    ("performNurbsCylinder 0")
	CreateNURBSCylinder;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNurbsCylinderOptionsAnnot"))
	-category   ("Menu items.Common.Create.NURBS Primitives")
	-command    ("performNurbsCylinder 1")
	CreateNURBSCylinderOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNurbsConeAnnot"))
	-category   ("Menu items.Common.Create.NURBS Primitives")
	-command    ("performNurbsCone 0")
	CreateNURBSCone;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNurbsConeOptionsAnnot"))
	-category   ("Menu items.Common.Create.NURBS Primitives")
	-command    ("performNurbsCone 1")
	CreateNURBSConeOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNurbsPlaneAnnot"))
	-category   ("Menu items.Common.Create.NURBS Primitives")
	-command    ("performNurbsPlane 0")
	CreateNURBSPlane;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNurbsPlaneOptionsAnnot"))
	-category   ("Menu items.Common.Create.NURBS Primitives")
	-command    ("performNurbsPlane 1")
	CreateNURBSPlaneOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNurbsTorusAnnot"))
	-category   ("Menu items.Common.Create.NURBS Primitives")
	-command    ("performNurbsTorus 0")
	CreateNURBSTorus;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNurbsTorusOptionsAnnot"))
	-category   ("Menu items.Common.Create.NURBS Primitives")
	-command    ("performNurbsTorus 1")
	CreateNURBSTorusOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNurbsCircleAnnot"))
	-category   ("Menu items.Common.Create.NURBS Primitives")
	-command    ("performNurbsCircle 0")
	CreateNURBSCircle;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNurbsCircleOptionsAnnot"))

	-category   ("Menu items.Common.Create.NURBS Primitives")
	-command    ("performNurbsCircle 1")
	CreateNURBSCircleOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNurbsSquareAnnot"))
	-category   ("Menu items.Common.Create.NURBS Primitives")
	-command    ("performNurbsSquare 0")
	CreateNURBSSquare;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNurbsSquareOptionsAnnot"))
	-category   ("Menu items.Common.Create.NURBS Primitives")
	-command    ("performNurbsSquare 1")
	CreateNURBSSquareOptions;

//	Create Polygon primitives.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolySphereAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Sphere 0")
	CreatePolygonSphere;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolySphereOptionsAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Sphere 1")
	CreatePolygonSphereOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyCubeAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Cube 0")
	CreatePolygonCube;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyCubeOptionsAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Cube 1")
	CreatePolygonCubeOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyCylinderAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Cylinder 0")
	CreatePolygonCylinder;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyCylinderOptionsAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Cylinder 1")
	CreatePolygonCylinderOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyConeAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Cone 0")
	CreatePolygonCone;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyConeOptionsAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Cone 1")
	CreatePolygonConeOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyPlaneAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Plane 0")
	CreatePolygonPlane;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyPlaneOptionsAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Plane 1")
	CreatePolygonPlaneOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyTorusAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Torus 0")
	CreatePolygonTorus;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyTorusOptionsAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Torus 1")
	CreatePolygonTorusOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyPrismAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Prism 0")
	CreatePolygonPrism;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyPrismOptionsAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Prism 1")
	CreatePolygonPrismOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyPyramidAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Pyramid 0")
	CreatePolygonPyramid;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyPyramidOptionsAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Pyramid 1")
	CreatePolygonPyramidOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyPipeAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Pipe 0")
	CreatePolygonPipe;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyPipeOptionsAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Pipe 1")
	CreatePolygonPipeOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyHelixAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Helix 0")
	CreatePolygonHelix;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyHelixOptionsAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Helix 1")
	CreatePolygonHelixOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolySoccerBallAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Misc 0")
	CreatePolygonSoccerBall;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolySoccerBallOptionsAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive Misc 1")
	CreatePolygonSoccerBallOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolyPlatonicOptionsAnnot"))
	-category   ("Menu items.Common.Create.Polygon Primitives")
	-command    ("performPolyPrimitive PlatonicSolid 1")
	CreatePlatonicSolidOptions;


//	Create Subdiv primitives.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSubdivSphereAnnot"))
	-category   ("Other items.Create")
	-command    ("createSubdSphere")
	-showInHotkeyEditor false
	CreateSubdivSphere;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSubdivCubeAnnot"))
	-category   ("Other items.Create")
	-command    ("createSubdCube")
	-showInHotkeyEditor false
	CreateSubdivCube;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSubdivCylinderAnnot"))
	-category   ("Other items.Create")
	-command    ("createSubdCylinder")
	-showInHotkeyEditor false
	CreateSubdivCylinder;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSubdivConeAnnot"))
	-category   ("Other items.Create")
	-command    ("createSubdCone")
	-showInHotkeyEditor false
	CreateSubdivCone;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSubdivPlaneAnnot"))
	-category   ("Other items.Create")
	-command    ("createSubdPlane")
	-showInHotkeyEditor false
	CreateSubdivPlane;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSubdivTorusAnnot"))
	-category   ("Other items.Create")
	-command    ("createSubdTorus")
	-showInHotkeyEditor false
	CreateSubdivTorus;

//	Create Volume primitives.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateVolumeSphereAnnot"))
	-category   ("Menu items.Common.Create.Volume Primitives")
	-command    ("createImplicitVolume sphere")
	CreateVolumeSphere;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateVolumeCubeAnnot"))
	-category   ("Menu items.Common.Create.Volume Primitives")
	-command    ("createImplicitVolume cube")
	CreateVolumeCube;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateVolumeConeAnnot"))
	-category   ("Menu items.Common.Create.Volume Primitives")
	-command    ("createImplicitVolume cone")
	CreateVolumeCone;
    

//	Create lights.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateAmbientLightAnnot"))
	-category   ("Menu items.Common.Create.Lights")
	-command    ("performAmbientLight(0)")
	CreateAmbientLight;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateAmbientLightOptionsAnnot"))
	-category   ("Menu items.Common.Create.Lights")
	-command    ("performAmbientLight(1)")
	CreateAmbientLightOptions;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateDirectionalLightAnnot"))
	-category   ("Menu items.Common.Create.Lights")
	-command    ("performDirectionalLight(0)")
	CreateDirectionalLight;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateDirectionalLightOptionsAnnot"))
	-category   ("Menu items.Common.Create.Lights")
	-command    ("performDirectionalLight(1)")
	CreateDirectionalLightOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePointLightAnnot"))
	-category   ("Menu items.Common.Create.Lights")
	-command    ("performPointLight(0)")
	CreatePointLight;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePointLightOptionsAnnot"))
	-category   ("Menu items.Common.Create.Lights")
	-command    ("performPointLight(1)")
	CreatePointLightOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSpotLightAnnot"))
	-category   ("Menu items.Common.Create.Lights")
	-command    ("performSpotLight(0)")
	CreateSpotLight;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSpotLightOptionsAnnot"))
	-category   ("Menu items.Common.Create.Lights")
	-command    ("performSpotLight(1)")
	CreateSpotLightOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateAreaLightAnnot"))
	-category   ("Menu items.Common.Create.Lights")
	-command    ("performAreaLight(0)")
	CreateAreaLight;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateAreaLightOptionsAnnot"))
	-category   ("Menu items.Common.Create.Lights")
	-command    ("performAreaLight(1)")
	CreateAreaLightOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateVolumeLightAnnot"))
	-category   ("Menu items.Common.Create.Lights")
	-command    ("performVolumeLight(0)")
	CreateVolumeLight;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateVolumeLightOptionsAnnot"))
	-category   ("Menu items.Common.Create.Lights")
	-command    ("performVolumeLight(1)")
	CreateVolumeLightOptions;

//	Create NURBS objects.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateCurveCVToolAnnot"))
	-category   ("Menu items.Common.Create.Curve Tools")
	-command    ("curveCVToolScript 4")
	CVCurveTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateCurveCVToolOptionsAnnot"))
	-category   ("Menu items.Common.Create.Curve Tools")
	-command    ("curveCVToolScript 3")
	CVCurveToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateCurveEPToolAnnot"))
	-category   ("Menu items.Common.Create.Curve Tools")
	-command    ("curveEPToolScript 4")
	EPCurveTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateCurveEPToolOptionsAnnot"))
	-category   ("Menu items.Common.Create.Curve Tools")
	-command    ("curveEPToolScript 3")
	EPCurveToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateBezierCurveToolAnnot"))
	-category	("Menu items.Common.Create.Curve Tools")
	-command	("curveBezierToolScript 4")
	CreateBezierCurveTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateBezierCurveToolOptionsAnnot"))
	-category	("Menu items.Common.Create.Curve Tools")
	-command	("curveBezierToolScript 3")
	CreateBezierCurveToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateCurveSketchToolAnnot"))
	-category   ("Menu items.Common.Create.Curve Tools")
	-command    ("curveSketchToolScript 4")
	PencilCurveTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateCurveSketchToolOptionsAnnot"))
	-category   ("Menu items.Common.Create.Curve Tools")
	-command    ("curveSketchToolScript 3")
	PencilCurveToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateTwoPointArcToolAnnot"))
	-category   ("Menu items.Common.Create.Curve Tools")
	-command    ("twoPointArcToolScript 4")
	TwoPointArcTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateTwoPointArcToolOptionsAnnot"))
	-category   ("Menu items.Common.Create.Curve Tools")
	-command    ("twoPointArcToolScript 3")
	TwoPointArcToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateThreePointArcToolAnnot"))
	-category   ("Menu items.Common.Create.Curve Tools")
	-command    ("threePointArcToolScript 4")
	ThreePointArcTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateThreePointArcToolOptionsAnnot"))
	-category   ("Menu items.Common.Create.Curve Tools")
	-command    ("threePointArcToolScript 3")
	ThreePointArcToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateDistanceBetweenTwoPointsAnnot"))
	-category   ("Menu items.Common.Create.Measure Tools")
	-command    ("setToolTo distanceDimContext")
	DistanceTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateDisplayCurveSurfaceParameterPointsAnnot"))
	-category   ("Menu items.Common.Create.Measure Tools")
	-command    ("setToolTo paramDimContext")
	ParameterTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateCurvePointDistanceAnnot"))
	-category   ("Menu items.Common.Create.Measure Tools")
	-command    ("setToolTo arcLenDimContext")
	ArcLengthTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateClosestPointOn"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performClosestPointOn 0")
	ClosestPointOn;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateClosestPointOnOptions"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performClosestPointOn 1")
	ClosestPointOnOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateAnnotationAnnot"))
	-category   ("Menu items.Common.Create")
	-command    ("annotateNode")
	CreateAnnotateNode;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateAdobeCurvesSurfacesAnnot"))
	-category   ("Menu items.Common.Create")
	-command    ("performCreateIllustratorCurves 0")
	CreateIllustratorCurves;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateAdobeCurveSurfaceOptionsAnnot"))
	-category   ("Menu items.Common.Create")
	-command    ("performCreateIllustratorCurves 1")
	CreateIllustratorCurvesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateTextAnnot"))
	-category   ("Menu items.Common.Create")
	-command    ("createPrimitive text")
	CreateText;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateTextOptionsAnnot"))
	-category   ("Menu items.Common.Create")
	-command    ("performtextCurves 1")
	CreateTextOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateConstructionPlaneAnnot"))
	-category   ("Menu items.Common.Create")
	-command    ("performCreateConstructionPlane(0)")
	CreateConstructionPlane;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateConstructionPlaneOptionsAnnot"))
	-category   ("Menu items.Common.Create")
	-command    ("performCreateConstructionPlane 1")
	CreateConstructionPlaneOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateImagePlane"))
	-category   ("Menu items.Common.Create")
	-command    ("performCreateImagePlane 0")
	CreateImagePlane;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateImagePlaneOptionsAnnot"))
	-category   ("Menu items.Common.Create")
	-command    ("performCreateImagePlane 1")
	CreateImagePlaneOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateLocatorAnnot"))
	-category   ("Menu items.Common.Create")
	-command    ("createPrimitive nullObject")
	CreateLocator;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateCameraAnnot"))
	-category   ("Menu items.Common.Create.Cameras")
	-command    ("performCameraOnly false")
	CreateCameraOnly;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateCameraOptionsAnnot"))
	-category   ("Menu items.Common.Create.Cameras")
	-command    ("performCameraOnly true")
	CreateCameraOnlyOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateAimCameraAnnot"))
	-category   ("Menu items.Common.Create.Cameras")
	-command    ("performCameraAim false")
	CreateCameraAim;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateAimCameraOptionsAnnot"))
	-category   ("Menu items.Common.Create.Cameras")
	-command    ("performCameraAim true")
	CreateCameraAimOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateAimUpCameraAnnot"))
	-category   ("Menu items.Common.Create.Cameras")
	-command    ("performCameraAimUp false")
	CreateCameraAimUp;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateAimUpCameraOptionsAnnot"))
	-category   ("Menu items.Common.Create.Cameras")
	-command    ("performCameraAimUp true")
	CreateCameraAimUpOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateQuickSelectSetAnnot"))
	-category   ("Menu items.Common.Create.Sets")
	-command    ("defineCharacter")
	CreateQuickSelectSet;

//
//	Display menu.
//
// ----------------------------------------------------------------------

//	Grid and Heads Up Display options.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleGridAnnot"))
	-category   ("Menu items.Common.Display")
	-command    ("optionVar -intValue showGrid (!`optionVar -query showGrid`); grid -toggle (`optionVar -query showGrid`);")
	ToggleGrid;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGridOptionsAnnot"))
	-category   ("Menu items.Common.Display")
	-command    ("performGridOptions 1")
	GridOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleObjectDetailsAnnot"))
	-category	("Menu items.Common.Display.Heads Up Display")
	-command	("setObjectDetailsVisibility(!`optionVar -q objectDetailsVisibility`);")
	ToggleObjectDetails;

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kTogglePolyCountAnnot"))
	-category	("Menu items.Common.Display.Heads Up Display")
	-command	("setPolyCountVisibility(!`optionVar -q polyCountVisibility`);")
	TogglePolyCount;

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kToggleParticleCountAnnot"))
	-category	("Menu items.Common.Display.Heads Up Display")
	-command	("setParticleCountVisibility(!`optionVar -q particleCountVisibility`);")
	ToggleParticleCount;

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kToggleSubdDetailsAnnot"))
	-category	("Other items.Display")
	-command	("setSubdDetailsVisibility(!`optionVar -q subdDetailsVisibility`);")
	-showInHotkeyEditor false
	ToggleSubdDetails;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleViewportRendererAnnot"))
	-category	("Menu items.Common.Display.Heads Up Display")
	-command	("setViewportRendererVisibility(!`optionVar -q viewportRendererVisibility`);")
	ToggleViewportRenderer;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCapsLockWarnAnnot"))
	-category	("Menu items.Common.Display.Heads Up Display")
	-command	("setCapsLockVisibility(!`optionVar -q capsLockVisibility`);")
	ToggleCapsLockDisplay;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleCameraNamesAnnot"))
	-category	("Menu items.Common.Display.Heads Up Display")
	-command	("setCameraNamesVisibility(!`optionVar -q cameraNamesVisibility`);")
	ToggleCameraNames;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleFocalLengthAnnot"))
	-category	("Menu items.Common.Display.Heads Up Display")
	-command	("setFocalLengthVisibility(!`optionVar -q focalLengthVisibility`);")
	ToggleFocalLength;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleFrameRateAnnot"))
	-category	("Menu items.Common.Display.Heads Up Display")
	-command	("setFrameRateVisibility(!`optionVar -q frameRateVisibility`);")
	ToggleFrameRate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleCurrentFrameAnnot"))
	-category	("Menu items.Common.Display.Heads Up Display")
	-command	("setCurrentFrameVisibility(!`optionVar -q currentFrameVisibility`);")
	ToggleCurrentFrame;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEMModeAnnot"))
	-category	("Menu items.Common.Display.Heads Up Display")
	-command	("ToggleEvaluationManagerHUDVisibility")
	ToggleEvaluationManagerVisibility;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMLModeAnnot"))
	-category	("Menu items.Common.Display.Heads Up Display")
	-command	("ToggleMaterialLoadingDetailsHUDVisibility(!`optionVar -q materialLoadingDetailsVisibility`);")
	ToggleMaterialLoadingDetailsVisibility;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleSceneTimeCodeAnnot"))
	-category	("Menu items.Common.Display.Heads Up Display")
	-command	("setSceneTimecodeVisibility(!`optionVar -q sceneTimecodeVisibility`);")
	ToggleSceneTimecode;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleCurrentAssetAnnot"))
	-category	("Menu items.Common.Display.Heads Up Display")
	-command	("setCurrentContainerVisibility(!`optionVar -q currentContainerVisibility`);")
	ToggleCurrentContainerHud;

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kToggleViewAxisAnnot"))
	-category	("Menu items.Common.Display.Heads Up Display")
	-command	("setViewAxisVisibility(!`optionVar -q viewAxisVisibility`);")
	ToggleViewAxis;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleOriginAxisAnnot"))
	-category   ("Menu items.Common.Display.Heads Up Display")
	-command    ("toggleAxis -o (!`toggleAxis -q -o`);")
	ToggleOriginAxis;

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kToggleToolMessageAnnot"))
	-category	("Other items.Miscellaneous")
	-command	("setToolMessageVisibility(!`optionVar -query toolMessageVisible`);")
	ToggleToolMessage;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleAnimationDetailsAnnot"))
	-category   ("Menu items.Common.Display.Heads Up Display")
	-command    ("setAnimationDetailsVisibility(!`optionVar -q animationDetailsVisibility`);")
	ToggleAnimationDetails;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleHikDetailsAnnot"))
	-category   ("Menu items.Common.Display.Heads Up Display")
	-command    ("setHikDetailsVisibility(!`optionVar -q hikDetailsVisibility`);")
	ToggleHikDetails;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleFbikDetailsAnnot"))
	-category   ("Other items.Display")
	-command    ("setFbikDetailsVisibility(!`optionVar -q fbikDetailsVisibility`);")
	-showInHotkeyEditor false
	ToggleFbikDetails;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleGradientDislpay"))
	-category   ("Other items.Miscellaneous")
	-command	("displayPref -displayGradient (!`displayPref -q -displayGradient `);")
	ToggleDisplayGradient;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCycleBackgroundColorAnnot"))
	-category   ("Other items.Viewport items")
	-command    ("cycleBackgroundColor;")
	CycleBackgroundColor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleSelectDetailsAnnot"))
	-category   ("Menu items.Common.Display.Heads Up Display")
	-command    ("setSelectDetailsVisibility(!`optionVar -q selectDetailsVisibility`);")
	ToggleSelectDetails;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleViewCubeAnnot"))
	-category   ("Menu items.Common.Display.Heads Up Display")
	-command    ("viewManip -v (! `viewManip -q -v`);")
	ToggleViewCube;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kActivatePanZoom"))
	-category   ("Other items.Viewport items")
	-command    ("activatePanZoom;")
	TogglePanZoomPress;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeactivatePanZoom"))
	-category   ("Other items.Viewport items")
	-command    ("deactivatePanZoom;")
	TogglePanZoomRelease;

//	UI Elements.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleStatusLineAnnotationAnnot"))
	-category   ("Menu items.Common.Display.UI Elements")
	-command	("toggleUIComponentVisibility \"Status Line\"; " +
	             "updateMainWindowComponentState()")
	ToggleStatusLine;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleSelfAnnotationAnnot"))
	-category   ("Menu items.Common.Display.UI Elements")
	-command	("toggleUIComponentVisibility \"Shelf\"; changeToolIcon; " +
	             "updateMainWindowComponentState()")
	ToggleShelf;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleTimeSliderAnnotationAnnot"))
	-category   ("Menu items.Common.Display.UI Elements")
	-command	("toggleUIComponentVisibility \"Time Slider\"; " +
	             "updateMainWindowComponentState()")
	ToggleTimeSlider;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleRangeSliderAnnotationAnnot"))
	-category   ("Menu items.Common.Display.UI Elements;Menu items.Animation.Playback")
	-command	("toggleUIComponentVisibility \"Range Slider\"; " +
	             "updateMainWindowComponentState()")
	ToggleRangeSlider;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleCommandLineAnnotationAnnot"))
	-category   ("Menu items.Common.Display.UI Elements")
	-command	("toggleUIComponentVisibility \"Command Line\"; " +
	             "updateMainWindowComponentState()")
	ToggleCommandLine;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleHelpLineAnnotationAnnot"))
	-category   ("Menu items.Common.Display.UI Elements")
	-command	("toggleUIComponentVisibility \"Help Line\"; " +
	             "updateMainWindowComponentState()")
	ToggleHelpLine;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleTooBoxAnnotationAnnot"))
	-category   ("Menu items.Common.Display.UI Elements")
	-command	("toggleUIComponentVisibility \"Tool Box\"; " +
	             "updateMainWindowComponentState()")
	ToggleToolbox;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleModelingToolkitAnnotationAnnot"))
	-category   ("Menu items.Modeling.Mesh Tools")
	-command	("MTtoggleCmd; MTsetToggleMenuItem;")
	ToggleModelingToolkit;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleAttributeEditorAnnotationAnnot"))
	-category   ("Menu items.Common.Display.UI Elements")
	-command	("toggleUIComponentVisibility \"Attribute Editor\"; " +
	             "updateMainWindowComponentState()")
	ToggleAttributeEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleToolSettingsAnnotationAnnot"))
	-category   ("Menu items.Common.Display.UI Elements")
	-command	("if (`isUIComponentVisible(\"Tool Settings\")`) {\r\n\ttoggleUIComponentVisibility(\"Tool Settings\");\r\n} else {\r\n\ttoolPropertyWindow -inMainWindow true;\r\n}\r\n; " +
	             "updateMainWindowComponentState()")
	ToggleToolSettings;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleChannelBoxLayerEditorAnnotationAnnot"))
	-category   ("Menu items.Common.Display.UI Elements")
	-command	("if (`isUIComponentVisible(\"Channel Box / Layer Editor\")`) {\r\n\ttoggleUIComponentVisibility(\"Channel Box / Layer Editor\");\r\n} else {\r\n\tsetChannelsLayersVisible( true );\r\n}\r\n; " +
	             "updateMainWindowComponentState()")
	ToggleChannelsLayers;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleChannelBoxAnnotationAnnot"))
	-category   ("Menu items.Common.Display.UI Elements")
	-command	("if (`isUIComponentVisible(\"Channel Box\")`) {\r\n\ttoggleUIComponentVisibility(\"Channel Box\");\r\n} else {\r\n\tsetChannelsVisible( true );;\r\n}\r\n; " +
	             "updateMainWindowComponentState()")
	ToggleChannelBox;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleLayerEditorAnnotationAnnot"))
	-category   ("Menu items.Common.Display.UI Elements")
	-command	("if (`isUIComponentVisible(\"Layer Editor\")`) {\r\n\ttoggleUIComponentVisibility(\"Layer Editor\");\r\n} else {\r\n\tsetLayersVisible( true );\r\n}\r\n; " +
	             "updateMainWindowComponentState()")
	ToggleLayerBar;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleHideUIElementsAnnotationAnnot"))
	-category   ("Menu items.Common.Display.UI Elements")
	-command    ("setAllMainWindowComponentsVisible 0")
	HideUIElements;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowUIElementsAnnotationAnnot"))
	-category   ("Menu items.Common.Display.UI Elements")
	-command    ("setAllMainWindowComponentsVisible 1")
	ShowUIElements;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleUIElementsAnnotationAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("toggleMainWindowComponents")
	ToggleUIElements;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRestoreUIElementsAnnotationAnnot"))
	-category   ("Menu items.Common.Display.UI Elements")
	-command    ("restoreMainWindowComponents")
	RestoreUIElements;

//	Hide.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideSelectedObjectsAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("doHideObjects true")
	HideSelectedObjects;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideUnselectedObjectsAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("doHideObjects false")
	HideUnselectedObjects;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideUnselectedCVsAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("selectiveCvsDisplay 1")
	HideUnselectedCVs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideAllAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("hideKeepSelection `ls -dag`")
	HideAll;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideGeometryAnnot"))
	-category   ("Menu items.Common.Display.Hide.Hide Geometry")
	-command    ("hideShow -geometry -hide")
	HideGeometry;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideNURBSSurfacesAnnot"))
	-category   ("Menu items.Common.Display.Hide.Hide Geometry")
	-command    ("hideShow -nurbsSurfaces -hide")
	HideNURBSSurfaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideNURBSCurvesAnnot"))
	-category   ("Menu items.Common.Display.Hide.Hide Geometry")
	-command    ("hideShow -nurbsCurves -hide")
	HideNURBSCurves;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHidePolygonSurfacesAnnot"))
	-category   ("Menu items.Common.Display.Hide.Hide Geometry")
	-command    ("hideShow -polySurfaces -hide")
	HidePolygonSurfaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideDeformingGeometryAnnot"))
	-category   ("Menu items.Common.Display.Hide.Hide Geometry")
	-command    ("hideShowDeformingGeom hide")
	HideDeformingGeometry;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideSubdivSurfacesAnnot"))
	-category   ("Other items.Display")
	-command    ("hideShow -subdiv -hide")
	-showInHotkeyEditor false
	HideSubdivSurfaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideStrokesAnnot"))
	-category   ("Menu items.Common.Display.Hide.Hide Geometry")
	-command    ("hideShow -strokes -hide")
	HideStrokes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideStrokePathCurvesAnnot"))
	-category   ("Menu items.Common.Display.Hide.Hide Geometry")
	-command    ("hideShow -strokeCurves -hide")
	HideStrokePathCurves;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideStrokeControlCurvesAnnot"))
	-category   ("Menu items.Common.Display.Hide.Hide Geometry")
	-command    ("hideShow -strokeControlCurves -hide")
	HideStrokeControlCurves;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideKinematicsAnnot"))
	-category   ("Menu items.Common.Display.Hide.Hide Kinematics")
	-command    ("hideShow -kinematics -hide")
	HideKinematics;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideJointsAnnot"))
	-category   ("Menu items.Common.Display.Hide.Hide Kinematics")
	-command    ("hideShow -joints -hide")
	HideJoints;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideIKHandlesAnnot"))
	-category   ("Menu items.Common.Display.Hide.Hide Kinematics")
	-command    ("hideShow -ikHandles -hide")
	HideIKHandles;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideLatticesAnnot"))
	-category   ("Menu items.Common.Display.Hide.Hide Deformers")
	-command    ("hideShow -lattices -hide")
	HideLattices;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideClustersAnnot"))
	-category   ("Menu items.Common.Display.Hide.Hide Deformers")
	-command    ("hideShow -clusters -hide")
	HideClusters;

    
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideWrapInfluencesAnnot"))
	-category   ("Menu items.Common.Display.Hide.Hide Deformers")
	-command    ("hideShow -wraps -hide")
	HideWrapInfluences;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideDeformersAnnot"))
	-category   ("Menu items.Common.Display.Hide.Hide Deformers")
	-command    ("hideShow -deformers -hide")
	HideDeformers;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideSculptObjectsAnnot"))
	-category   ("Menu items.Common.Display.Hide.Hide Deformers")
	-command    ("hideShow -sculptObjects -hide")
	HideSculptObjects;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideSmoothSkinInfluencesAnnot"))
	-category   ("Menu items.Common.Display.Hide.Hide Deformers")
	-command    ("hideShow -skinClusters -hide")
	HideSmoothSkinInfluences;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideNonlinearsAnnot"))
	-category   ("Menu items.Common.Display.Hide.Hide Deformers")
	-command    ("hideShow -nonlinears -hide")
	HideNonlinears;
    
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideFluidsAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("hideShow -fluids -hide")
	HideFluids;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideHairSystemsAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("hideShow -hairSystems -hide")
	HideHairSystems;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideFolliclesAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("hideShow -follicles -hide")
	HideFollicles;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideFurAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("hideShow -fur -hide")
	HideFur;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideNClothsAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("hideShow -nCloth -hide")
	HideNCloths;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideNParticlesAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("hideShow -nParticle -hide")
	HideNParticles;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideNRigidsAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("hideShow -nRigid -hide")
	HideNRigids;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideDynamicConstraintsAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("hideShow -dynamicConstraint -hide")
	HideDynamicConstraints;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideLightsAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("hideShow -lights -hide")
	HideLights;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideCamerasAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("hideShow -cameras -hide")
	HideCameras;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideTexturePlacementsAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("hideShow -place3dTexture -hide")
	HideTexturePlacements;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHidePlanesAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("hideShow -planes -hide")
	HidePlanes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideMarkersAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("hideShow -posMarker -hide")
	HideMarkers;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideLightManipulatorsAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("renderManip -lt false false false; " +
		         "renderManip -slt false false false false false false false")
	HideLightManipulators;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideCameraManipulatorsAnnot"))
	-category   ("Menu items.Common.Display.Hide")
	-command    ("renderManip -camera false false false false false")
	HideCameraManipulators;

//	Show.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowSelectedObjectsAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("evalEcho \"showHidden -a\"")
	ShowSelectedObjects;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowLastHiddenAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("showLastHidden")
	ShowLastHidden;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowSurfaceCVsAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("selectiveCvsDisplay 0")
	ShowSurfaceCVs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowAllAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("evalEcho \"showHidden -all\"")
	ShowAll;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowGeometryAnnot"))
	-category   ("Menu items.Common.Display.Show.Show Geometry")
	-command    ("hideShow -geometry -show")
	ShowGeometry;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowNURBSSurfacesAnnot"))
	-category   ("Menu items.Common.Display.Show.Show Geometry")
	-command    ("hideShow -nurbsSurfaces -show")
	ShowNURBSSurfaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowNURBSCurvesAnnot"))
	-category   ("Menu items.Common.Display.Show.Show Geometry")
	-command    ("hideShow -nurbsCurves -show")
	ShowNURBSCurves;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowPolygonSurfacesAnnot"))
	-category   ("Menu items.Common.Display.Show.Show Geometry")
	-command    ("hideShow -polySurfaces -show")
	ShowPolygonSurfaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowDeformingGeometryAnnot"))
	-category   ("Menu items.Common.Display.Show.Show Geometry")
	-command    ("hideShowDeformingGeom show")
	ShowDeformingGeometry;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowSubdivSurfacesAnnot"))
	-category   ("Other items.Display")
	-command    ("hideShow -subdiv -show")
	-showInHotkeyEditor false
	ShowSubdivSurfaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowStrokesAnnot"))
	-category   ("Menu items.Common.Display.Show.Show Geometry")
	-command    ("hideShow -strokes -show")
	ShowStrokes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowStrokePathCurvesAnnot"))
	-category   ("Menu items.Common.Display.Show.Show Geometry")
	-command    ("hideShow -strokeCurves -show")
	ShowStrokePathCurves;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowStrokeControlCurvesAnnot"))
	-category   ("Menu items.Common.Display.Show.Show Geometry")
	-command    ("hideShow -strokeControlCurves -show")
	ShowStrokeControlCurves;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowKinematicsAnnot"))
	-category   ("Menu items.Common.Display.Show.Show Kinematics")
	-command    ("hideShow -kinematics -show")
	ShowKinematics;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowJointsAnnot"))
	-category   ("Menu items.Common.Display.Show.Show Kinematics")
	-command    ("hideShow -joints -show")
	ShowJoints;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowIKHandlesAnnot"))
	-category   ("Menu items.Common.Display.Show.Show Kinematics")
	-command    ("hideShow -ikHandles -show")
	ShowIKHandles;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowLatticesAnnot"))
	-category   ("Menu items.Common.Display.Show.Show Deformers")
	-command    ("hideShow -lattices -show")
	ShowLattices;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowClustersAnnot"))
	-category   ("Menu items.Common.Display.Show.Show Deformers")
	-command    ("hideShow -clusters -show")
	ShowClusters;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowWrapInfluencesAnnot"))
	-category   ("Menu items.Common.Display.Show.Show Deformers")
	-command    ("hideShow -wraps -show")
	ShowWrapInfluences;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowDeformersAnnot"))
	-category   ("Menu items.Common.Display.Show.Show Deformers")
	-command    ("hideShow -deformers -show")
	ShowDeformers;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowSculptObjectsAnnot"))
	-category   ("Menu items.Common.Display.Show.Show Deformers")
	-command    ("hideShow -sculptObjects -show")
	ShowSculptObjects;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowSmoothSkinInfluencesAnnot"))
	-category   ("Menu items.Common.Display.Show.Show Deformers")
	-command    ("hideShow -skinClusters -show")
	ShowSmoothSkinInfluences;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowNonlinearsAnnot"))
	-category   ("Menu items.Common.Display.Show.Show Deformers")
	-command    ("hideShow -nonlinears -show")
	ShowNonlinears;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowFluidsAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("hideShow -fluids -show")
	ShowFluids;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowHairSystemsAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("hideShow -hairSystems -show")
	ShowHairSystems;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowFolliclesAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("hideShow -follicles -show")
	ShowFollicles;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowFurAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("hideShow -fur -show")
	ShowFur;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowNClothsAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("hideShow -nCloth -show")
	ShowNCloths;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowNParticlesAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("hideShow -nParticle -show")
	ShowNParticles;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowNRigidsAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("hideShow -nRigid -show")
	ShowNRigids;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowDynamicConstraintsAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("hideShow -dynamicConstraint -show")
	ShowDynamicConstraints;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowLightsAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("showHidden -a `ls -lights`")
	ShowLights;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowCamerasAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("showHidden -a `ls -ap -cameras`")
	ShowCameras;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowTexturePlacementsAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("showHidden -a `ls -type place3dTexture`")
	ShowTexturePlacements;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowPlanesAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("showHidden -a `ls -planes`")
	ShowPlanes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowMarkersAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("hideShow -posMarker -show")
	ShowMarkers;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowLightManipulatorsAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("renderManip -lt true true true; renderManip -slt true true true true true true true")
	ShowLightManipulators;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowCameraManipulatorsAnnot"))
	-category   ("Menu items.Common.Display.Show")
	-command    ("renderManip -cam true true true true true")
	ShowCameraManipulators;

//	Object Display.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTemplateObjectAnnot"))
	-category   ("Menu items.Common.Display.Object Display")
	-command    ("toggle -state on -template")
	TemplateObject;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUntemplateObjectAnnot"))
	-category   ("Menu items.Common.Display.Object Display")
	-command    ("toggle -state off -template")
	UntemplateObject;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGhostObjectAnnot"))
	-category   ("Other items.Display")
	-command    ("doGhost 1 {\"1\"}")
	-showInHotkeyEditor false
	GhostObject;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUnghostObjectAnnot"))
	-category   ("Other items.Display")
	-command    ("doGhost 1 {\"0\"}")
	-showInHotkeyEditor false
	UnghostObject;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowBoundingBoxAnnot"))
	-category   ("Menu items.Common.Display.Object Display")
	-command    ("boundingBoxDisplayCtrl 1 \"\"")
	ShowBoundingBox;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideBoundingBoxAnnot"))
	-category   ("Menu items.Common.Display.Object Display")
	-command    ("boundingBoxDisplayCtrl 0 \"\"")
	HideBoundingBox;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowObjectGeometryAnnot"))
	-category   ("Menu items.Common.Display.Object Display")
	-command    ("toggle -state on -geometry")
	ShowObjectGeometry;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideObjectGeometryAnnot"))
	-category   ("Menu items.Common.Display.Object Display")
	-command    ("toggle -state off -geometry")
	HideObjectGeometry;

//	Component Display.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleBackfaceGeometryAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"culling\")")
	ToggleBackfaceGeometry;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleFaceNormalDisplayAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"fNormal\")")
	ToggleFaceNormalDisplay;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleVertexNormalDisplayAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"vNormal\")")
	ToggleVertexNormalDisplay;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kChangeNormalSizeAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"normalSize\")")
	ChangeNormalSize;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleTangentDisplayAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"tangent\")")
	ToggleTangentDisplay;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTogglePolyDisplayEdgesAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"dispEdge\")")
	TogglePolyDisplayEdges;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTogglePolyDisplaySoftEdgesAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"dispSoftEdge\")")
	TogglePolyDisplaySoftEdges;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTogglePolyDisplayHardEdgesAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"dispHardEdge\")")
	TogglePolyDisplayHardEdges;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTogglePolyDisplayHardEdgesColorAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"dispHardEdgeColor\")")
	TogglePolyDisplayHardEdgesColor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleLatticePointsAnnot"))
	-category   ("Menu items.Common.Display.Animation")
	-command    ("toggle -latticePoint")
	ToggleLatticePoints;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleLatticeShapeAnnot"))
	-category   ("Menu items.Common.Display.Animation")
	-command    ("toggle -latticeShape")
	ToggleLatticeShape;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleLocalRotationAxesAnnot"))
	-category   ("Menu items.Common.Display.Transform Display")
	-command    ("toggle -localAxis")
	ToggleLocalRotationAxes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleRotationPivotsAnnot"))
	-category   ("Menu items.Common.Display.Transform Display")
	-command    ("toggle -rotatePivot")
	ToggleRotationPivots;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleScalePivotsAnnot"))
	-category   ("Menu items.Common.Display.Transform Display")
	-command    ("toggle -scalePivot")
	ToggleScalePivots;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleSelectionHandlesAnnot"))
	-category   ("Menu items.Common.Display.Transform Display")
	-command    ("toggle -selectHandle")
	ToggleSelectionHandles;

//	NURBS Components.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleCVsAnnot"))
	-category   ("Menu items.Common.Display.NURBS")
	-command    ("toggle -controlVertex")
	ToggleCVs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleEditPointsAnnot"))
	-category   ("Menu items.Common.Display.NURBS")
	-command    ("toggle -editPoint")
	ToggleEditPoints;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleHullsAnnot"))
	-category   ("Menu items.Common.Display.NURBS")
	-command    ("toggle -hull")
	ToggleHulls;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleNormalsAnnot"))
	-category   ("Menu items.Common.Display.NURBS")
	-command    ("toggle -normal")
	ToggleNormals;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleSurfaceFaceCentersAnnot"))
	-category   ("Menu items.Common.Display.NURBS")
	-command    ("toggle -surfaceFace")
	ToggleSurfaceFaceCenters;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleSurfaceOriginAnnot"))
	-category   ("Menu items.Common.Display.NURBS")
	-command    ("toggle -origin")
	ToggleSurfaceOrigin;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleCustomNURBSComponentsAnnot"))
	-category   ("Menu items.Common.Display.NURBS")
	-command    ("performDisplayControl 0")
	ToggleCustomNURBSComponents;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCustomNURBSComponentsOptionsAnnot"))
	-category   ("Menu items.Common.Display.NURBS")
	-command    ("performDisplayControl 1")
	CustomNURBSComponentsOptions;

//	NURBS Smoothness.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNURBSSmoothnessHullAnnot"))
	-category   ("Menu items.Common.Display.NURBS")
	-command    ("performDisplaySmoothnessHull 0")
	NURBSSmoothnessHull;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNURBSSmoothnessHullOptionsAnnot"))
	-category   ("Menu items.Common.Display.NURBS")
	-command    ("performDisplaySmoothnessHull 1")
	NURBSSmoothnessHullOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNURBSSmoothnessRoughAnnot"))
	-category   ("Menu items.Common.Display.NURBS")
	-command    ("performDisplaySmoothnessRough 0")
	NURBSSmoothnessRough;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNURBSSmoothnessRoughOptionsAnnot"))
	-category   ("Menu items.Common.Display.NURBS")
	-command    ("performDisplaySmoothnessRough 1")
	NURBSSmoothnessRoughOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNURBSSmoothnessMediumAnnot"))
	-category   ("Menu items.Common.Display.NURBS")
	-command    ("performDisplaySmoothnessMedium 0")
	NURBSSmoothnessMedium;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNURBSSmoothnessMediumOptionsAnnot"))
	-category   ("Menu items.Common.Display.NURBS")
	-command    ("performDisplaySmoothnessMedium 1")
	NURBSSmoothnessMediumOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNURBSSmoothnessFineAnnot"))
	-category   ("Menu items.Common.Display.NURBS")
	-command    ("performDisplaySmoothnessFine 0")
	NURBSSmoothnessFine;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNURBSSmoothnessFineOptionsAnnot"))
	-category   ("Menu items.Common.Display.NURBS")
	-command    ("performDisplaySmoothnessFine 1")
	NURBSSmoothnessFineOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCustomNURBSSmoothnessAnnot"))
	-category   ("Menu items.Common.Display.NURBS")
	-command    ("performDisplaySmoothnessCustom 0")
	CustomNURBSSmoothness;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCustomNURBSSmoothnessOptionsAnnot"))
	-category   ("Menu items.Common.Display.NURBS")
	-command    ("performDisplaySmoothnessCustom 1")
	CustomNURBSSmoothnessOptions;

//	Polygon Components.
//

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTogglePolyDisplayLimitToSelected"))
	-category   ("Menu items.Common.Display.Polygons")
	-command	("setPolyDisplayLimitedToSelected;")
	TogglePolyDisplayLimitToSelected;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleVertexBackCulling"))
	-category   ("Menu items.Common.Display.Polygons.Culling Options")
	-command	("setPolygonDisplaySettings(\"vertexCulling\");")
	ToggleCullingVertices;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kChangeVertexSizeAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"vertexSize\")")
	ChangeVertexSize;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleWireBackCulling"))
	-category   ("Menu items.Common.Display.Polygons.Culling Options")
	-command	("setPolygonDisplaySettings(\"keepWire\");")
	ToggleKeepWireCulling;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleHardEdgeBackCulling"))
	-category   ("Menu items.Common.Display.Polygons.Culling Options")
	-command	("setPolygonDisplaySettings(\"keepHardEdge\");")
	ToggleKeepHardEdgeCulling;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyDisplayResetAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"reset\")")
	PolyDisplayReset;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleVerticesAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"verts\")")
	ToggleVertices;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleBorderEdgesAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"borderEdge\")")
	ToggleBorderEdges;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleCreasesAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"creaseEdge\")")
	ToggleCreaseEdges;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleHoleFacesAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"invisibleFaces\")")
	ToggleHoleFaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleCreaseVertexAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"creaseVertex\")")
	ToggleCreaseVertices;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleTextureBorderEdgesAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"textBorderEdge\")")
	ToggleTextureBorderEdges;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kChangeEdgeWidthAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"edgeWidth\")")
	ChangeEdgeWidth;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleSoftEdgesAnnot"))
	-category   ("Other items.Display")
	-command    ("int $cond[1]=`polyOptions -q -ae`; " +
	             "if ($cond[0]) polyOptions -se; else polyOptions -ae;")
	-showInHotkeyEditor false
	ToggleSoftEdges;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTogglePolygonFaceCentersAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"faceCenter\")")
	TogglePolygonFaceCenters;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTogglePolygonFaceTrianglesAnnot"))
	-category   ("Other items.Display")
	-command    ("setPolygonDisplaySettings(\"faceTriangles\")")
	-showInHotkeyEditor false
	TogglePolygonFaceTriangles;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTogglePolyNonPlanarAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"nonPlanar\")")
	TogglePolyNonPlanarFaceDisplay;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleUVsAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"UVs\")")
	ToggleUVs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleUnsharedUVsAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"unsharedUVs\")")
	ToggleUnsharedUVs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kChangeUVSizeAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("setPolygonDisplaySettings(\"uvSize\")")
	ChangeUVSize;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleVertIDsAnnot"))
	-category   ("Menu items.Common.Display.Polygons.Component IDs")
	-command    ("setPolygonDisplaySettings(\"vertIDs\")")
	ToggleVertIDs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleEdgeIDsAnnot"))
	-category   ("Menu items.Common.Display.Polygons.Component IDs")
	-command    ("setPolygonDisplaySettings(\"edgeIDs\")")
	ToggleEdgeIDs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleFaceIDsAnnot"))
	-category   ("Menu items.Common.Display.Polygons.Component IDs")
	-command    ("setPolygonDisplaySettings(\"faceIDs\")")
	ToggleFaceIDs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleCompIDsAnnot"))
	-category   ("Menu items.Common.Display.Polygons.Component IDs")
	-command    ("setPolygonDisplaySettings(\"compIDs\")")
	ToggleCompIDs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleFaceNormalsAnnot"))
	-category   ("Other items.Display")
	-command    ("polyOptions -r -dn true -facet")
	-showInHotkeyEditor false
	ToggleFaceNormals;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleVertMetadataAnnot"))
	-category   ("Other items.Display")
	-command    ("setPolygonDisplaySettings(\"vertMetadata\")")
	-showInHotkeyEditor false
	ToggleVertMetadata;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleEdgeMetadataAnnot"))
	-category   ("Other items.Display")
	-command    ("setPolygonDisplaySettings(\"edgeMetadata\")")
	-showInHotkeyEditor false
	ToggleEdgeMetadata;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleFaceMetadataAnnot"))
	-category   ("Other items.Display")
	-command    ("setPolygonDisplaySettings(\"faceMetadata\")")
	-showInHotkeyEditor false
	ToggleFaceMetadata;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLongPolygonNormalsAnnot"))
	-category   ("Other items.Display")
	-command    ("setNormalsSize 1.0")
	-showInHotkeyEditor false
	LongPolygonNormals;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMediumPolygonNormalsAnnot"))
	-category   ("Other items.Display")
	-command    ("setNormalsSize .4")
	-showInHotkeyEditor false
	MediumPolygonNormals;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShortPolygonNormalsAnnot"))
	-category   ("Other items.Display")
	-command    ("setNormalsSize .16")
	-showInHotkeyEditor false
	ShortPolygonNormals;

//	Visualize metadata option box
//	
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kVisualizeMetadataOptionsAnnot"))
	-category   ("Menu items.Common.Display.Polygons.Metadata")
	-command    ("performVisualizeMetadataOptions 1")
	VisualizeMetadataOptions;	

//	Custom Polygon Display.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCustomPolygonDisplayAnnot"))
	-category   ("Other items.Display")
	-command    ("polysDisplaySetup 0")
	-showInHotkeyEditor false
	CustomPolygonDisplay;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCustomPolygonDisplayOptionsAnnot"))
	-category   ("Menu items.Common.Display.Polygons")
	-command    ("polysDisplaySetup 1")
	CustomPolygonDisplayOptions;

//	Subdiv Surface Components.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleMeshPointsAnnot"))
	-category   ("Other items.Display")
	-command    ("subdivToggle 1")
	-showInHotkeyEditor false
	ToggleMeshPoints;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleMeshEdgesAnnot"))
	-category   ("Other items.Display")
	-command    ("subdivToggle 2")
	-showInHotkeyEditor false
	ToggleMeshEdges;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleMeshFacesAnnot"))
	-category   ("Other items.Display")
	-command    ("subdivToggle 3")
	-showInHotkeyEditor false
	ToggleMeshFaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleMeshMapsAnnot"))
	-category   ("Other items.Display")
	-command    ("subdivToggle 4")
	-showInHotkeyEditor false
	ToggleMeshMaps;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleMeshUVBordersAnnot"))
	-category   ("Other items.Display")
	-command    ("subdivToggle 5")
	-showInHotkeyEditor false
	ToggleMeshUVBorders;

//	Subdiv Surface Smoothness.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdivSmoothnessHullAnnot"))
	-category   ("Other items.Display")
	-command    ("performSubdivDisplaySmoothnessHull 0")
	-showInHotkeyEditor false
	SubdivSmoothnessHull;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdivSmoothnessHullOptionsAnnot"))
	-category   ("Other items.Display")
	-command    ("performSubdivDisplaySmoothnessHull 1")
	-showInHotkeyEditor false
	SubdivSmoothnessHullOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdivSmoothnessRoughAnnot"))
	-category   ("Other items.Display")
	-command    ("performSubdivDisplaySmoothnessRough 0")
	-showInHotkeyEditor false
	SubdivSmoothnessRough;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdivSmoothnessRoughOptionsAnnot"))
	-category   ("Other items.Display")
	-command    ("performSubdivDisplaySmoothnessRough 1")
	-showInHotkeyEditor false
	SubdivSmoothnessRoughOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdivSmoothnessMediumAnnot"))
	-category   ("Other items.Display")
	-command    ("performSubdivDisplaySmoothnessMedium 0")
	-showInHotkeyEditor false
	SubdivSmoothnessMedium;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdivSmoothnessMediumOptionsAnnot"))
	-category   ("Other items.Display")
	-command    ("performSubdivDisplaySmoothnessMedium 1")
	-showInHotkeyEditor false
	SubdivSmoothnessMediumOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdivSmoothnessFineAnnot"))
	-category   ("Other items.Display")
	-command    ("performSubdivDisplaySmoothnessFine 0")
	-showInHotkeyEditor false
	SubdivSmoothnessFine;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdivSmoothnessFineOptionsAnnot"))
	-category   ("Other items.Display")
	-command    ("performSubdivDisplaySmoothnessFine 1")
	-showInHotkeyEditor false
	SubdivSmoothnessFineOptions;

//	Fast Interaction.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleFastInteractionAnnot"))
	-category   ("Other items.Display")
	-command    ("doFastInteractionItem (!`displayLevelOfDetail -q -lod`)")
	-showInHotkeyEditor false
	ToggleFastInteraction;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmoothingDisplayToggleAnnot"))
	-category   ("Menu items.Modeling.Mesh.Smooth Proxy")
	-command    ("smoothingDisplayToggle 1")
	SmoothingDisplayToggle;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmoothingDisplayShowBothAnnot"))
	-category   ("Menu items.Modeling.Mesh.Smooth Proxy")
	-command    ("smoothingDisplayToggle 0")
	SmoothingDisplayShowBoth;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmoothingLevelIncreaseAnnot"))
	-category   ("Other items.Viewport items")
	-command    ("changeSmoothingLevel 1")
	SmoothingLevelIncrease;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmoothingLevelDecreaseAnnot"))
	-category   ("Other items.Viewport items")
	-command    ("changeSmoothingLevel 0")
	SmoothingLevelDecrease;

//
//	Window menu.
//
// ----------------------------------------------------------------------

//	General Editors.
//
string $componentEditorTitle = localizedPanelLabel("Component Editor" );
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kComponentEditorAnnot"))
	-category   ("Menu items.Common.Windows.General Editors")
	-command    ( "tearOffPanel \"" + $componentEditorTitle + "\" \"componentEditorPanel\" true;" )
	ComponentEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSpreadSheetEditorAnnot"))
	-category   ("Menu items.Common.Windows.General Editors")
	-command    ("SpreadSheetWindow")
	SpreadSheetEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAssetEditorAnnot"))
	-category   ("Menu items.Common.Windows.General Editors")
	-command    ("assetWindow 0")
	AssetEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNamespaceEditorAnnot"))
	-category   ("Menu items.Common.Windows.General Editors")
	-command    ("namespaceEditor")
	NamespaceEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFilePathEditorAnnot"))
	-category   ("Menu items.Common.Windows.General Editors")
	-command    ("filePathEditorWin")
	FilePathEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConnectionEditorAnnot"))
	-category   ("Menu items.Common.Windows.General Editors")
	-command    ("optionVar -iv \"connectWindowActive\" 1; connectWindow 0 \"\" \"\"")
	ConnectionEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRenderLayerEditorWindowAnnot"))
	-category   ("Menu items.Common.Windows.Rendering Editors")
	-command    ("if (`optionVar -q channelsLayersSeparate`) {" +
				 "\r\n\tif (!`isUIComponentVisible(\"Layer Editor\")`) {\r\n\t\tsetLayersVisible( true );\r\n\t} else {\r\n\t\traiseLayers();\r\n\t}" +
				 "\r\n} else {" +
				 "\r\n\tif (!`isUIComponentVisible(\"Channel Box / Layer Editor\")`) {\r\n\t\tsetChannelsLayersVisible( true );\r\n\t} else {\r\n\t\traiseChannelsLayers();\r\n\t}" +
				 "\r\n}\r\n; " +
				 "\r\n\t setParent $gCurrentLayerEditor; " +
				 "\r\n\t tabLayout -edit -selectTabIndex 2 DisplayLayerUITabLayout; "+
				 "\r\n\t layerEditorDisplayTypeChange")
	RenderLayerEditorWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisplayLayerEditorWindowAnnot"))
	-category   ("Menu items.Common.Windows.General Editors")
	-command    ("if (`optionVar -q channelsLayersSeparate`) {" +
				 "\r\n\tif (!`isUIComponentVisible(\"Layer Editor\")`) {\r\n\t\tsetLayersVisible( true );\r\n\t} else {\r\n\t\traiseLayers();\r\n\t}" +
				 "\r\n} else {" +
				 "\r\n\tif (!`isUIComponentVisible(\"Channel Box / Layer Editor\")`) {\r\n\t\tsetChannelsLayersVisible( true );\r\n\t} else {\r\n\t\traiseChannelsLayers();\r\n\t}" +
				 "\r\n}\r\n; " +
				 "\r\n\t setParent $gCurrentLayerEditor; " +
				 "\r\n\t tabLayout -edit -selectTabIndex 1 DisplayLayerUITabLayout; "+
				 "\r\n\t layerEditorDisplayTypeChange")
	DisplayLayerEditorWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBlindDataEditorAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("blindDataEditor")
	BlindDataEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToolSettingsWindowAnnot"))
	-category   ("Menu items.Common.Windows.Settings/Preferences")
	-command    ("toolPropertyWindow -inMainWindow false")
	ToolSettingsWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kChannelControlEditorAnnot"))
	-category   ("Menu items.Common.Windows.General Editors")
	-command    ("lockingKeyableWnd")
	ChannelControlEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPerformanceSettingsWindowAnnot"))
	-category   ("Menu items.Common.Windows.Settings/Preferences")
	-command    ("performanceSettingsWin")
	PerformanceSettingsWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCommandWindowAnnot"))
	-category   ("Other items.Miscellaneous")
	-command	("showWindow $gCommandWindow")
	CommandWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kScriptEditorAnnot"))
	-category   ("Menu items.Common.Windows.General Editors")
	-command	("if (`scriptedPanel -q -exists scriptEditorPanel1`) { scriptedPanel -e -to scriptEditorPanel1; showWindow scriptEditorPanel1Window; selectCurrentExecuterControl; }else { CommandWindow; }")
	ScriptEditor;
runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kCommandShellAnnot"))
		-category   ("Menu items.Common.Windows.General Editors")
		-command    ("shellWnd")
		CommandShell;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPluginManagerAnnot"))
	-category   ("Menu items.Common.Windows.Settings/Preferences")
	-command    ("pluginWin")
	PluginManager;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMrShaderManagerAnnot"))
	-category   ("Menu items.Common.Windows.Rendering Editors.mental ray")
	-command    ("mrFactoryWin")
	mrShaderManager;

string $ProfilerTitle = localizedPanelLabel("Profiler Tool" );
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProfilerAnnot"))
	-category   ("Menu items.Common.Windows.General Editors")
	-command    ( "tearOffPanel \"" + $ProfilerTitle + "\" \"ProfilerPanel\" true;" )
	ProfilerTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProfilerToggleRecord"))
	-category	("Editors.Profiler")
	-command	("profiler -sampling (!`profiler -q -sampling`);")
	-hotkeyCtx "profilerPanel"
	ProfilerToolToggleRecording;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProfilerReset"))
	-category	("Editors.Profiler")
	-command	("profiler -reset;")
	-hotkeyCtx "profilerPanel"
	ProfilerToolReset;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProfilerToolCategoryView"))
	-category	("Editors.Profiler")
	-command	("profilerTool -e -categoryView")
	-hotkeyCtx "profilerPanel"
	ProfilerToolCategoryView;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProfilerToolCpuView"))
	-category	("Editors.Profiler")
	-command	("profilerTool -e -cpuView")
	-hotkeyCtx "profilerPanel"
	ProfilerToolCpuView;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProfilerToolThreadView"))
	-category	("Editors.Profiler")
	-command	("profilerTool -e -threadView")
	-hotkeyCtx "profilerPanel"
	ProfilerToolThreadView;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProfilerToolShowSelected"))
	-category	("Editors.Profiler")
	-command	("profilerTool -e -showSelectedEvents true")
	-hotkeyCtx "profilerPanel"
	ProfilerToolShowSelected;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProfilerToolHideSelected"))
	-category	("Editors.Profiler")
	-command	("profilerTool -e -showSelectedEvents false")
	-hotkeyCtx "profilerPanel"
	ProfilerToolHideSelected;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProfilerToolShowSelectedRepetition"))
	-category	("Editors.Profiler")
	-command	("profilerTool -e -showSelectedEventsRepetition true")
	-hotkeyCtx "profilerPanel"
	ProfilerToolShowSelectedRepetition;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProfilerToolHideSelectedRepetition"))
	-category	("Editors.Profiler")
	-command	("profilerTool -e -showSelectedEventsRepetition false")
	-hotkeyCtx "profilerPanel"
	ProfilerToolHideSelectedRepetition;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProfilerToolShowAll"))
	-category	("Editors.Profiler")
	-command	("profilerTool -e -showAllEvent true")
	-hotkeyCtx "profilerPanel"
	ProfilerToolShowAll;

//	Rendering Editors.
//
string $renderView = localizedPanelLabel("Render View");
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRenderViewWindowAnnot"))
	-category   ("Menu items.Common.Windows.Rendering Editors")
	-command    ("tearOffPanel \""+$renderView + "\" \"renderWindowPanel\" true;")
	RenderViewWindow;

// NOTE: RenderViewPrevImage and RenderViewNextImage have reversed
// change by relative values. The Graph Editor Retimer manip is
// piggy backing onto these hotkeys for moving the selected retime
// bar to the left or right.  At some point, the naming below
// should be cleaned up.
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRenderViewPrevImageAnnot"))
	-category   ("Other items.Render View")
	-command    ("renderWindowChangeImage(1);retimeMoveByFrame(1);")
	RenderViewPrevImage;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRenderViewNextImageAnnot"))
	-category   ("Other items.Render View")
	-command    ("renderWindowChangeImage(-1);retimeMoveByFrame(-1);")
	RenderViewNextImage;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHardwareRenderBufferAnnot"))
	-category   ("Menu items.Common.Windows.Rendering Editors")
	-command    ("glRenderWin")
	HardwareRenderBuffer;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRenderFlagsWindowAnnot"))
	-category   ("Menu items.Common.Windows.Rendering Editors")
	-command    ("renderFlagsWindow")
	RenderFlagsWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShadingGroupAttributeEditorAnnot"))
	-category   ("Menu items.Common.Windows.Rendering Editors")
	-command    ("showShadingGroupAttrEditor")
	ShadingGroupAttributeEditor;

//	Animation Editors.
//
string $graphEditorTitle = localizedPanelLabel("Graph Editor");
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGraphEditorAnnot"))
	-category   ("Menu items.Common.Windows.Animation Editors")
	-command    ("tearOffPanel \"" + $graphEditorTitle + "\" \"graphEditor\" true;")
	GraphEditor;

//
//	Time Editor
//
// ----------------------------------------------------------------------

// ADSK_TIME_EDITOR_BEGIN

if (mayaHasTimeEditorFeature()) {
	string $cteEditorTitle = localizedPanelLabel("Time Editor");
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kCTEEditorAnnot"))
		-category   ("Menu items.Common.Windows.Animation Editors")
		-command    ("tearOffPanel \"" + $cteEditorTitle + "\" \"cteEditor\" true;")
		CTEEditor;

	// cteClipEdit Toggle view mode command

	//runTimeCommand -default true
	//	-annotation			_L10N(kTimeEditorViewModeToggleAnnot,"Toggle view mode")
	//	-category			("Editors.Time Editor")
	//	-hotkeyCtx			("cteEditor")
	//	-command			("{\n" +
	//						 "	cteEditor -e -tkv cteEditor1CTEEd;\n" +
	//						 "}\n")
	//	TimeEditorViewModeToggle;

	// cteClipEdit razoring clip command

	runTimeCommand -default true
		-annotation			(uiRes("m_defaultRunTimeCommands.kTimeEditorClipRazorAnnot"))
		-category			("Editors.Time Editor")
		-hotkeyCtx			("cteEditor")
		-command			("{\n" +
							 "	cteClipEdit -e -razorClip;\n" +
							 "}\n")
		TimeEditorClipRazor;

	runTimeCommand -default true
		-annotation			(uiRes("m_defaultRunTimeCommands.kTimeEditorCopyClipsAnnot"))
		-category			("Editors.Time Editor")
		-hotkeyCtx			("cteEditor")
		-command			("{\n" +
							 "	cteClipEdit -e -copyClip;\n" +
							 "}\n")
		TimeEditorCopyClips;

	runTimeCommand -default true
		-annotation			(uiRes("m_defaultRunTimeCommands.kTimeEditorPasteClipsAnnot"))
		-category			("Editors.Time Editor")
		-hotkeyCtx			("cteEditor")
		-command			("{\n" +
							 "	float $time = `currentTime -query`;\n" +
							 "	cteClipEdit -e -pasteClip $time;\n" +
							 "}\n")
		TimeEditorPasteClips;
}

// ADSK_TIME_EDITOR_END


string $dopeSheetTitle = localizedPanelLabel("Dope Sheet");
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDopeSheetEditorAnnot"))
	-category   ("Menu items.Common.Windows.Animation Editors")
	-command    ("tearOffPanel \"" + $dopeSheetTitle + "\" \"dopeSheetPanel\" true;")
	DopeSheetEditor;

string $blendShapeTitle = localizedPanelLabel("Blend Shape");
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBlendShapeEditorAnnot"))
	-category   ("Menu items.Common.Windows.Animation Editors")
	-command    ("tearOffPanel \"" + $blendShapeTitle + "\" \"blendShapePanel\" false;")
	BlendShapeEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExpressionEditorAnnot"))
	-category   ("Menu items.Common.Windows.Animation Editors")
	-command    ("expressionEditor EE \"\" \"\"")
	ExpressionEditor;

string $devicesTitle = localizedPanelLabel("Devices");
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeviceEditorAnnot"))
	-category   ("Other items.Window")
	-command    ("tearOffPanel \"" + $devicesTitle + "\" \"devicePanel\" false;")
	-showInHotkeyEditor false
	DeviceEditor;

//	Relationship Editors.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetEditorAnnot"))
	-category   ("Menu items.Common.Windows.Relationship Editors")
	-command    ("setMembershipEditor")
	SetEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeformerSetEditorAnnot"))
	-category   ("Menu items.Common.Windows.Relationship Editors")
	-command    ("deformerSetEditor")
	DeformerSetEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCharacterSetEditorAnnot"))
	-category   ("Menu items.Common.Windows.Relationship Editors")
	-command    ("characterEditor 0")
	CharacterSetEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPartitionEditorAnnot"))
	-category   ("Menu items.Common.Windows.Relationship Editors")
	-command    ("partitionEditor")
	PartitionEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLayerRelationshipEditorAnnot"))
	-category   ("Menu items.Common.Windows.Relationship Editors")
	-command    ("displayLayerEditor")
	LayerRelationshipEditor;
    
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCameraSetEditorAnnot"))
	-category   ("Menu items.Common.Windows.Relationship Editors")
	-command    ("cameraSetEditor")
	CameraSetEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRenderLayerRelationshipEditorAnnot"))
	-category   ("Menu items.Common.Windows.Relationship Editors")
	-command    ("renderLayerEditor")
	RenderLayerRelationshipEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRenderPassSetEditorAnnot"))
	-category   ("Menu items.Common.Windows.Relationship Editors")
	-command    ("renderPassSetEditor")
	RenderPassSetEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAnimLayerRelationshipEditorAnnot"))
	-category   ("Menu items.Common.Windows.Relationship Editors")
	-command    ("animLayerEditor")
	AnimLayerRelationshipEditor;

string $dynamicRelationshipTitle = localizedPanelLabel("Dynamic Relationships");
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDynamicRelationshipEditorAnnot"))
	-category   ("Menu items.Common.Windows.Relationship Editors")
	-command    ("tearOffPanel \""+ $dynamicRelationshipTitle +"\" \"dynRelEdPanel\" true;")
	DynamicRelationshipEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLightCentricLightLinkingEditorAnnot"))
	-category   ("Menu items.Common.Windows.Relationship Editors.Light Linking;Menu items.Rendering.Lighting/Shading.Light Linking Editor")
	-command    ("lightLinkingEditor")
	LightCentricLightLinkingEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kObjectCentricLightLinkingEditorAnnot"))
	-category   ("Menu items.Common.Windows.Relationship Editors.Light Linking;Menu items.Rendering.Lighting/Shading.Light Linking Editor")
	-command    ("objectLightLinkingEditor")
	ObjectCentricLightLinkingEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTextureCentricUVLinkingEditorAnnot"))
	-category   ("Menu items.Common.Windows.Relationship Editors.UV Linking")
	-command    ("textureCentricUvLinkingEditor")
	TextureCentricUVLinkingEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUVCentricUVLinkingEditorAnnot"))
	-category   ("Menu items.Common.Windows.Relationship Editors.UV Linking")
	-command    ("uvCentricUvLinkingEditor")
	UVCentricUVLinkingEditor;

//	Miscellaneous editors and windows.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAttributeEditorAnnot"))
	-category   ("Menu items.Common.Editors")
	-command    ("openAEWindow")
	AttributeEditor;

string $outlinerTitle = localizedPanelLabel("Outliner");
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerAnnot"))
	-category   ("Menu items.Common.Editors")
	-command    ("tearOffPanel \"" + $outlinerTitle + "\" \"outlinerPanel\" false;")
	OutlinerWindow;

string $hypergraphTitle = localizedPanelLabel("Hypergraph");
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHypergraphAnnot"))
	-category   ("Other items.Window")
	-command    ("tearOffPanel \"" + $hypergraphTitle + "\" \"hyperGraphPanel\" true;")
	-showInHotkeyEditor false
	HypergraphWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHypergraphHierarchyAnnotationAnnot"))
	-category   ("Menu items.Common.Editors")
	-command    ("hyperGraphWindow \"\" \"DAG\"")
	HypergraphHierarchyWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHypergraphDGAnnotationAnnot"))
	-category   ("Menu items.Common.Editors")
	-command    ("hyperGraphWindow \"\" \"DG\"")
	HypergraphDGWindow;

runTimeCommand -default true
    -annotation (uiRes("m_defaultRunTimeCommands.kHypergraphIncreaseDepthAnnot"))
    -category   ("Editors.HyperGraph Panel")
    -command    ("hyperGraphDepthControl 1")
	-hotkeyCtx  ("hyperGraphPanel")
    HypergraphIncreaseDepth;

runTimeCommand -default true
    -annotation (uiRes("m_defaultRunTimeCommands.kHypergraphDecreaseDepthAnnot"))
    -category   ("Editors.HyperGraph Panel")
    -command    ("hyperGraphDepthControl -1")
	-hotkeyCtx  ("hyperGraphPanel")
    HypergraphDecreaseDepth;

if(!`about -evalVersion`) {
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMapVisualizerAnnot"))
		-category   ("Menu items.Common.Windows.Rendering Editors.mental ray")
		-command    ("mrMapVizWin")
		mrMapVisualizer;      
}

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRenderSettingsAnnot"))
	-category   ("Menu items.Common.Windows.Rendering Editors")
	-command    ("unifiedRenderGlobalsWindow")
	RenderGlobalsWindow;

string $hypershadeTitle = localizedPanelLabel("Hypershade");
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHypershadeAnnot"))
	-category   ("Menu items.Common.Windows.Rendering Editors")
	-command    ("tearOffPanel \"" + $hypershadeTitle + "\" \"hyperShadePanel\" true;")
	HypershadeWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorAnnotationAnnot"))
	-category   ("Menu items.Common.Editors")
	-command    ("nodeEditorWindow")
	NodeEditorWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNodeAnnotationAnnot"))
	-category   ("Editors.Node Editor")
	-command    ("createNodeWindow")
	-hotkeyCtx	("nodeEditorPanel")
	CreateNodeWindow;

string $visorTitle = localizedPanelLabel("Visor");
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kVisorAnnot"))
	-category   ("Menu items.Common.Windows.General Editors")
	-command    ("tearOffPanel \""+ $visorTitle +"\" \"VisorPanel\" true;")
	VisorWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintEffectsAnnot"))
	-category   ("Menu items.Common.Editors")
	-command    ("scriptedPanel -e -to dynPaintScriptedPanel")
	PaintEffectsWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPFXUVLinkingAnnot"))
	-category   ("Menu items.Common.Windows.Relationship Editors.UV Linking")
	-command    ("pfxUVLinkingEditor")
	PFXUVSetLinkingEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHairUVLinkingAnnot"))
	-category   ("Menu items.Common.Windows.Relationship Editors.UV Linking")
	-command    ("hairUVLinkingEditor")
	HairUVSetLinkingEditor;

string $textureEditorTitle = localizedPanelLabel("UV Editor" );
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUVTextureEditorAnnot"))
	-category   ("Menu items.Common.Editors;Menu items.Modeling.UV")
	-command    ( "tearOffPanel \"" + $textureEditorTitle + "\" \"polyTexturePlacementPanel\" true;" )
	TextureViewWindow;

string $traxEditorTitle = localizedPanelLabel("Trax Editor");
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTraxEditorAnnot"))
	-category   ("Menu items.Common.Windows.Animation Editors")
	-command    ("tearOffPanel \"" + $traxEditorTitle + "\" \"clipEditorPanel\" true;")
	CharacterAnimationEditor;

string $sequenceEditorTitle = localizedPanelLabel("Camera Sequencer");
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSequenceEditorAnnot"))
	-category   ("Menu items.Common.Windows.Animation Editors")
	-command    ("tearOffPanel \"" + $sequenceEditorTitle + "\" \"sequenceEditorPanel\" true;")
	SequenceEditor;

string $shotPlaylistEditorTitle = localizedPanelLabel("Shot Playlist");
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShotPlaylistAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("tearOffPanel \"" + $shotPlaylistEditorTitle + "\" \"shotPlaylistPanel\" true;")
	ShotPlaylistEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPlayblastAnnot"))
	-category   ("Menu items.Common.Editors;Menu items.Animation.Playback")
	-command    ("performPlayblast false")
	PlayblastWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPlayblastOptionsAnnot"))
	-category   ("Menu items.Common.Editors;Menu items.Animation.Playback")
	-command    ("performPlayblast true")
	PlayblastOptions;

//	View Arrangements.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFourPanesAnnot"))
	-category   ("Menu items.Common.Windows.View Arrangement")
	-command    ("switchPanes quad 0; updateToolbox();")
	FourViewArrangement;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kThreeSplitTopAnnot"))
	-category   ("Menu items.Common.Windows.View Arrangement")
	-command    ("switchPanes top3 0; updateToolbox();")
	ThreeTopSplitViewArrangement;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kThreeSplitLeftAnnot"))
	-category   ("Menu items.Common.Windows.View Arrangement")
	-command    ("switchPanes left3 0; updateToolbox();")
	ThreeLeftSplitViewArrangement;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kThreeSplitRightAnnot"))
	-category   ("Menu items.Common.Windows.View Arrangement")
	-command    ("switchPanes right3 0; updateToolbox();")
	ThreeRightSplitViewArrangement;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kThreeSplitBottomAnnot"))
	-category   ("Menu items.Common.Windows.View Arrangement")
	-command    ("switchPanes bottom3 0; updateToolbox();")
	ThreeBottomSplitViewArrangement;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTwoStackedAnnot"))
	-category   ("Menu items.Common.Windows.View Arrangement")
	-command    ("switchPanes horizontal2 0; updateToolbox();")
	TwoStackedViewArrangement;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTwoSideBySideAnnot"))
	-category   ("Menu items.Common.Windows.View Arrangement")
	-command    ("switchPanes vertical2 0; updateToolbox();")
	TwoSideBySideViewArrangement;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSinglePaneAnnot"))
	-category   ("Menu items.Common.Windows.View Arrangement")
	-command    ("switchPanes single 0; updateToolbox();")
	SingleViewArrangement;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPreviousViewArrangementAnnot"))
	-category   ("Menu items.Common.Windows.View Arrangement")
	-command    ("switchPanes goBack 0; updateToolbox();")
	PreviousViewArrangement;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNextViewArrangementAnnot"))
	-category   ("Menu items.Common.Windows.View Arrangement")
	-command    ("panelHistory -e -f mainPanelHistory; updateToolbox();")
	NextViewArrangement;

//	Panel layouts.
//
string $singlePerspView = localizedPanelLabel("Single Perspective View");
runTimeCommand -default true
	-annotation $singlePerspView
	-category   ("Other items.Window")
	-command    ("setNamedPanelLayout \"" + $singlePerspView + "\"")
	-showInHotkeyEditor false
	SinglePerspectiveViewLayout;

string $fourView = localizedPanelLabel("Four View");
runTimeCommand -default true
	-annotation $fourView
	-category   ("Other items.Window")
	-command    ("setNamedPanelLayout \"" + $fourView + "\"")
	-showInHotkeyEditor false
	FourViewLayout;

string $perspGraphHyperGraph = localizedPanelLabel("Persp/Graph/Hypergraph");
runTimeCommand -default true
	-annotation $perspGraphHyperGraph
	-category   ("Other items.Window")
	-command    ("setNamedPanelLayout \"" + $perspGraphHyperGraph + "\"")
	-showInHotkeyEditor false
	PerspGraphHypergraphLayout;

string $hypershadeRenderPersp = localizedPanelLabel("Hypershade/Render/Persp");
runTimeCommand -default true
	-annotation $hypershadeRenderPersp
	-category   ("Other items.Window")
	-command    ("setNamedPanelLayout \"" + $hypershadeRenderPersp + "\"")
	-showInHotkeyEditor false
	HypershadeRenderPerspLayout;

string $hypershadeOutlinerPersp = localizedPanelLabel("Hypershade/Outliner/Persp");
runTimeCommand -default true
	-annotation $hypershadeOutlinerPersp
	-category   ("Other items.Window")
	-command    ("setNamedPanelLayout \"" + $hypershadeOutlinerPersp + "\"")
	-showInHotkeyEditor false
	HypershadeOutlinerPerspLayout;

string $hypershadePersp = localizedPanelLabel("Hypershade/Persp");
runTimeCommand -default true
	-annotation $hypershadePersp
	-category   ("Other items.Window")
	-command    ("setNamedPanelLayout \"" + $hypershadePersp + "\"")
	-showInHotkeyEditor false
	HypershadePerspLayout;

string $perspOutliner = localizedPanelLabel("Persp/Outliner");
runTimeCommand -default true
	-annotation $perspOutliner
	-category   ("Other items.Window")
	-command    ("setNamedPanelLayout \"" + $perspOutliner + "\"")
	-showInHotkeyEditor false
	PerspOutlinerLayout;

string $perspGraphOutliner = localizedPanelLabel("Persp/Graph/Outliner");
runTimeCommand -default true
	-annotation $perspGraphOutliner
	-category   ("Other items.Window")
	-command    ("setNamedPanelLayout \"" + $perspGraphOutliner + "\"")
	-showInHotkeyEditor false
	PerspGraphOutlinerLayout;

string $perspGraph = localizedPanelLabel("Persp/Graph");
runTimeCommand -default true
	-annotation $perspGraph
	-category   ("Other items.Window")
	-command    ("setNamedPanelLayout \"" + $perspGraph + "\"")
	-showInHotkeyEditor false
	PerspGraphLayout;

string $perspRelationshipEditor = localizedPanelLabel("Persp/Relationship Editor");
runTimeCommand -default true
	-annotation $perspRelationshipEditor
	-category   ("Other items.Window")
	-command    ("setNamedPanelLayout \"" + $perspRelationshipEditor + "\"")
	-showInHotkeyEditor false
	PerspRelationshipEditorLayout;

string $perspUVTextureEditor = localizedPanelLabel("Persp/UV Editor");
runTimeCommand -default true
	-annotation $perspUVTextureEditor
	-category   ("Other items.Window")
	-command    ("setNamedPanelLayout \"" + $perspUVTextureEditor + "\"")
	-showInHotkeyEditor false
	PerspTextureLayout;

//	Save current layout.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSaveCurrentLayoutAnnot"))
	-category   ("Menu items.Common.Editors")
	-command    ("saveCurrentPanelLayout")
	SaveCurrentLayout;

//	Frame in view.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFrameAllInAllViewsAnnot"))
	-category   ("Menu items.Common.Editors")
	-command    ("fitAllPanels -all")
	FrameAllInAllViews;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFrameSelInAllViewsAnnot"))
	-category   ("Menu items.Common.Editors")
	-command    ("fitAllPanels -selected")
	FrameSelectedInAllViews;

//	Preferences and customization windows.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPreferencesAnnot"))
	-category   ("Menu items.Common.Windows.Settings/Preferences;Menu items.Help.What's New")
	-command    ("preferencesWnd \"Interface\";")
	PreferencesWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHotkeyPreferencesAnnot"))
	-category   ("Menu items.Common.Windows.Settings/Preferences")
	-command    ("hotkeyEditorWindow")
	HotkeyPreferencesWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kColorPreferencesAnnot"))
	-category   ("Menu items.Common.Windows.Settings/Preferences")
	-command    ("colorPrefWnd")
	ColorPreferencesWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMarkingMenuEditorAnnot"))
	-category   ("Menu items.Common.Windows.Settings/Preferences")
	-command    ("menuEditorWnd")
	MarkingMenuPreferencesWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShelfEditorAnnot"))
	-category   ("Menu items.Common.Windows.Settings/Preferences")
	-command    ("shelfEditorDialog")
	ShelfPreferencesWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPanelEditorAnnot"))
	-category   ("Menu items.Common.Windows.Settings/Preferences")
	-command    ("panelEditor(uiRes(\"m_panelEditor.kPanels\"))")
	PanelPreferencesWindow;

//	Application window functions.
//
if (!`about -mac`) {
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMinimizeApplicationAnnot"))
		-category   ("Menu items.Common.Editors")
		-command    ("minimizeApp")
		MinimizeApplication;
}

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRaiseAppWindowsAnnot"))
	-category   ("Menu items.Common.Editors")
	-command    ("raiseAllWindows")
	RaiseApplicationWindows;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRaiseMainWindowAnnot"))
	-category   ("Menu items.Common.Editors")
	-command    ("showWindow MayaWindow")
	RaiseMainWindow;

//
//	Help menu.
//
// ----------------------------------------------------------------------

//	Product information.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProductInformationAnnot"))
	-category   ("Menu items.Help.Autodesk Product Information")
	-command    ("about")
	ProductInformation;

//	Open a Help window.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHelpLibraryAnnot"))
	-category   ("Menu items.Help")
	-command    ("checkHelpPrefs")
	Help;
}
commonMenus();

// ======================================================================
// ======================================================================
//
//	Modeling menu set, ie. Edit Curves, NURBS, Edit NURBS,
//	Polygons, Edit Polygons, Polygon UVs and Subdiv Surfaces.
//
// ======================================================================
// ======================================================================
proc modelingMenus() {
//
//	Edit Curves menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDuplicateCurveAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("duplicateCurveToolScript 4")
	DuplicateCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDuplicateCurveOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("duplicateCurveToolScript 3")
	DuplicateCurveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAttachCurveAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("attachCrvToolScript 4")
	AttachCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAttachCurveOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("attachCrvToolScript 3")
	AttachCurveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDetachCurveAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("detachCurveToolScript 4")
	DetachCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDetachCurveOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("detachCurveToolScript 3")
	DetachCurveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAlignCurveAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("alignCurveToolScript 4")
	AlignCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAlignCurveOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("alignCurveToolScript 3")
	AlignCurveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOpenCloseCurveAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("closeCurveToolScript 4")
	OpenCloseCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOpenCloseCurveOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("closeCurveToolScript 3")
	OpenCloseCurveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCutCurveAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("cutCurveToolScript 4")
	CutCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCutCurveOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("cutCurveToolScript 3")
	CutCurveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kIntersectCurveAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("intersectCurveToolScript 4")
	IntersectCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kIntersectCurveOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("intersectCurveToolScript 3")
	IntersectCurveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCurveFilletAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("filletCurveToolScript 4")
	CurveFillet;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCurveFilletOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("filletCurveToolScript 3")
	CurveFilletOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInsertKnotAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("insertCurveToolScript 4")
	InsertKnot;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInsertKnotOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("insertCurveToolScript 3")
	InsertKnotOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExtendCurveAnnot"))
	-category   ("Menu items.Modeling.Curves.Extend")
	-command    ("extendCurveToolScript 4")
	ExtendCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExtendCurveOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves.Extend")
	-command    ("extendCurveToolScript 3")
	ExtendCurveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExtendCurveOnSurfaceAnnot"))
	-category   ("Menu items.Modeling.Curves.Extend")
	-command    ("extendCosCurveToolScript 4")
	ExtendCurveOnSurface;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExtendCurveOnSurfaceOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves.Extend")
	-command    ("extendCosCurveToolScript 3")
	ExtendCurveOnSurfaceOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOffsetCurveAnnot"))
	-category   ("Menu items.Modeling.Curves.Offset")
	-command    ("offsetCurveToolScript 4")
	OffsetCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOffsetCurveOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves.Offset")
	-command    ("offsetCurveToolScript 3")
	OffsetCurveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOffsetCurveOnSurfaceAnnot"))
	-category   ("Menu items.Modeling.Curves.Offset")
	-command    ("offsetCosToolScript 4")
	OffsetCurveOnSurface;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOffsetCurveOnSurfaceOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves.Offset")
	-command    ("offsetCosToolScript 3")
	OffsetCurveOnSurfaceOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReverseCurveAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("reverseCurveToolScript 4")
	ReverseCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReverseCurveOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("reverseCurveToolScript 3")
	ReverseCurveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRebuildCurveAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("rebuildCurveToolScript 4")
	RebuildCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRebuildCurveOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("rebuildCurveToolScript 3")
	RebuildCurveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFitBSplineAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("fitBsplineToolScript 4")
	FitBSpline;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFitBSplineOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("fitBsplineToolScript 3")
	FitBSplineOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmoothCurveAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("smoothCurveToolScript 4")
	SmoothCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmoothCurveOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("smoothCurveToolScript 3")
	SmoothCurveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCVHardnessAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("cvHardnessToolScript 4")
	CVHardness;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCVHardnessOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("cvHardnessToolScript 3")
	CVHardnessOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddPointsToolAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("curveAddPtToolScript 4")
	AddPointsTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCurveEditToolAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("curveEditorToolScript 4")
	CurveEditTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProjectTangentAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("projectTangentToolScript 4")
	ProjectTangent;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProjectTangentOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves")
	-command    ("projectTangentToolScript 3")
	ProjectTangentOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectCurveCVsAllAnnot"))
	-category   ("Menu items.Common.Select")
	-command    ("selectCurveCV all")
	SelectCurveCVsAll;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectCurveCVsFirstAnnot"))
	-category   ("Menu items.Common.Select")
	-command    ("selectCurveCV first")
	SelectCurveCVsFirst;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectCurveCVsLastAnnot"))
	-category   ("Menu items.Common.Select")
	-command    ("selectCurveCV last")
	SelectCurveCVsLast;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kClusterCurveAnnot"))
	-category   ("Menu items.Common.Select")
	-command    ("clusterCurve")
	ClusterCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLockCurveLengthAnnot"))
	-category   ("Menu items.Modeling.Curves;Menu items.Dynamics.nHair.Modify Curves")
	-command    ("setCurveLengthLock 1")
	LockCurveLength;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUnlockCurveLengthAnnot"))
	-category   ("Menu items.Modeling.Curves;Menu items.Dynamics.nHair.Modify Curves")
	-command    ("setCurveLengthLock 0")
	UnlockCurveLength;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kStraightenCurvesAnnot"))
	-category   ("Menu items.Modeling.Curves;Menu items.Dynamics.nHair.Modify Curves")
	-command    ("performStraighten 0 ")
	StraightenCurves;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kStraightenCurvesOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves;Menu items.Dynamics.nHair.Modify Curves")
	-command    ("performStraighten 1")
	StraightenCurvesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmoothHairCurvesAnnot"))
	-category   ("Menu items.Modeling.Curves;Menu items.Dynamics.nHair.Modify Curves")
	-command    ("performSmoothHairCurves 0 ")
	SmoothHairCurves;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmoothHairCurvesOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves;Menu items.Dynamics.nHair.Modify Curves")
	-command    ("performSmoothHairCurves 1")
	SmoothHairCurvesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kScaleCurvatureAnnot"))
	-category   ("Menu items.Modeling.Curves;Menu items.Dynamics.nHair.Modify Curves")
	-command    ("performScaleCurvature 0 ")
	ScaleCurvature;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kScaleCurvatureOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves;Menu items.Dynamics.nHair.Modify Curves")
	-command    ("performScaleCurvature 1")
	ScaleCurvatureOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCurlCurvesAnnot"))
	-category   ("Menu items.Modeling.Curves;Menu items.Dynamics.nHair.Modify Curves")
	-command    ("performCurlCurves 0 ")
	CurlCurves;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCurlCurvesOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves;Menu items.Dynamics.nHair.Modify Curves")
	-command    ("performCurlCurves 1")
	CurlCurvesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBendCurvesAnnot"))
	-category   ("Menu items.Modeling.Curves;Menu items.Dynamics.nHair.Modify Curves")
	-command    ("performBendCurves 0 ")
	BendCurves;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBendCurvesOptionsAnnot"))
	-category   ("Menu items.Modeling.Curves;Menu items.Dynamics.nHair.Modify Curves")
	-command    ("performBendCurves 1")
	BendCurvesOptions;


//
//	Surfaces menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRevolveAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("revolveToolScript 4")
	Revolve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRevolveOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("revolveToolScript 3")
	RevolveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLoftAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("loftToolScript 4")
	Loft;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLoftOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("loftToolScript 3")
	LoftOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPlanarAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("planarToolScript 4")
	Planar;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPlanarOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("planarToolScript 3")
	PlanarOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExtrudeAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("extrudeToolScript 4")
	Extrude;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExtrudeOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("extrudeToolScript 3")
	ExtrudeOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBirail1Annot"))
	-category   ("Menu items.Modeling.Surfaces.Birail")
	-command    ("birailToolScript 4 1")
	Birail1;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBirail1OptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Birail")
	-command    ("birailToolScript 3 1")
	Birail1Options;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBirail2Annot"))
	-category   ("Menu items.Modeling.Surfaces.Birail")
	-command    ("birailToolScript 4 2")
	Birail2;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBirail2OptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Birail")
	-command    ("birailToolScript 3 2")
	Birail2Options;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBirail3Annot"))
	-category   ("Menu items.Modeling.Surfaces.Birail")
	-command    ("birailToolScript 4 3")
	Birail3;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBirail3OptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Birail")
	-command    ("birailToolScript 3 3")
	Birail3Options;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBoundaryAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("boundaryToolScript 4")
	Boundary;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBoundaryOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("boundaryToolScript 3")
	BoundaryOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSquareSurfaceAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("squareSrfToolScript 4")
	SquareSurface;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSquareSurfaceOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("squareSrfToolScript 3")
	SquareSurfaceOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBevelAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("bevelToolScript 4")
	Bevel;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBevelOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("bevelToolScript 3")
	BevelOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBevelPlusAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("bevelPlusToolScript 4")
	BevelPlus;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBevelPlusOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("bevelPlusToolScript 3")
	BevelPlusOptions;

//
//	Edit NURBS menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDuplicateNURBSPatchesAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("duplicateSurfaceToolScript 4")
	DuplicateNURBSPatches;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDuplicateNURBSPatchesOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("duplicateSurfaceToolScript 3")
	DuplicateNURBSPatchesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProjectCurveOnSurfaceAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("projectToolScript 4")
	ProjectCurveOnSurface;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProjectCurveOnSurfaceOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("projectToolScript 3")
	ProjectCurveOnSurfaceOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kIntersectSurfacesAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("intersectToolScript 4")
	IntersectSurfaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kIntersectSurfacesOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("intersectToolScript 3")
	IntersectSurfacesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTrimToolAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("trimToolScript 4")
	TrimTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTrimToolOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("trimToolScript 3")
	TrimToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUntrimSurfacesAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("untrimToolScript 4")
	UntrimSurfaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUntrimSurfacesOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("untrimToolScript 3")
	UntrimSurfacesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSurfaceBooleanUnionToolAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Booleans")
	-command    ("nurbsBooleanToolScript 4 0")
	SurfaceBooleanUnionTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSurfaceBooleanUnionToolOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Booleans")
	-command    ("nurbsBooleanToolScript 3 0")
	SurfaceBooleanUnionToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSurfaceBooleanSubtractToolAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Booleans")
	-command    ("nurbsBooleanToolScript 4 1")
	SurfaceBooleanSubtractTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSurfaceBooleanSubtractToolOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Booleans")
	-command    ("nurbsBooleanToolScript 3 1")
	SurfaceBooleanSubtractToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSurfaceBooleanIntersectToolAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Booleans")
	-command    ("nurbsBooleanToolScript 4 2")
	SurfaceBooleanIntersectTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSurfaceBooleanIntersectToolOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Booleans")
	-command    ("nurbsBooleanToolScript 3 2")
	SurfaceBooleanIntersectToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAttachSurfacesAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("attachSrfToolScript 4")
	AttachSurfaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAttachSurfacesOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("attachSrfToolScript 3")
	AttachSurfacesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDetachSurfacesAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("detachSurfaceToolScript 4")
	DetachSurfaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDetachSurfacesOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("detachSurfaceToolScript 3")
	DetachSurfacesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAlignSurfacesAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("alignSurfaceToolScript 4")
	AlignSurfaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAlignSurfacesOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("alignSurfaceToolScript 3")
	AlignSurfacesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOpenCloseSurfacesAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("closeSurfaceToolScript 4")
	OpenCloseSurfaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOpenCloseSurfacesOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("closeSurfaceToolScript 3")
	OpenCloseSurfacesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInsertIsoparmsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("insertSurfaceToolScript 4")
	InsertIsoparms;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInsertIsoparmsOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("insertSurfaceToolScript 3")
	InsertIsoparmsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExtendSurfacesAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("extendSurfaceToolScript 4")
	ExtendSurfaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExtendSurfacesOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("extendSurfaceToolScript 3")
	ExtendSurfacesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOffsetSurfacesAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("offsetSurfaceToolScript 4")
	OffsetSurfaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOffsetSurfacesOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("offsetSurfaceToolScript 3")
	OffsetSurfacesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReverseSurfaceDirectionAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("reverseSurfaceToolScript 4")
	ReverseSurfaceDirection;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReverseSurfaceDirectionOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("reverseSurfaceToolScript 3")
	ReverseSurfaceDirectionOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRebuildSurfacesAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("rebuildSurfaceToolScript 4")
	RebuildSurfaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRebuildSurfacesOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("rebuildSurfaceToolScript 3")
	RebuildSurfacesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRoundToolAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("roundToolScript 4")
	RoundTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRoundToolOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces")
	-command    ("roundToolScript 3")
	RoundToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCircularFilletAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Surface Fillet")
	-command    ("circFilletToolScript 4")
	CircularFillet;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCircularFilletOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Surface Fillet")
	-command    ("circFilletToolScript 3")
	CircularFilletOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFreeformFilletAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Surface Fillet")
	-command    ("freeFilletToolScript 4")
	FreeformFillet;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFreeformFilletOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Surface Fillet")
	-command    ("freeFilletToolScript 3")
	FreeformFilletOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFilletBlendToolAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Surface Fillet")
	-command    ("blendToolScript 4")
	FilletBlendTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFilletBlendToolOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Surface Fillet")
	-command    ("blendToolScript 3")
	FilletBlendToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kStitchSurfacePointsAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Stitch")
	-command    ("performStitchSurfacePoints(0)")
	StitchSurfacePoints;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kStitchSurfacePointsOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Stitch")
	-command    ("performStitchSurfacePoints(1)")
	StitchSurfacePointsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kStitchEdgesToolAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Stitch")
	-command    ("stitchSrfToolScript 4")
	StitchEdgesTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kStitchEdgesToolOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Stitch")
	-command    ("stitchSrfToolScript 3")
	StitchEdgesToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGlobalStitchAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Stitch")
	-command    ("globalStitchToolScript 4")
	GlobalStitch;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGlobalStitchOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Stitch")
	-command    ("globalStitchToolScript 3")
	GlobalStitchOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSculptGeometryToolAnnot"))
	-category   ("Menu items.Modeling.Mesh Tools;Menu items.Modeling.Surfaces")
	-command    ("artPuttyToolScript 4")
	SculptGeometryTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSculptGeometryToolOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh Tools;Menu items.Modeling.Surfaces")
	-command    ("artPuttyToolScript 3")
	SculptGeometryToolOptions;

// legacy command - replaced by SculptGeometryTool
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSculptSurfacesToolAnnot"))
	-category   ("Other items.Edit NURBS")
	-command    ("artPuttyToolScript 4")
	-showInHotkeyEditor false
	SculptSurfacesTool;

// legacy command - replaced by SculptGeometryToolOptions
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSculptSurfacesToolOptionsAnnot"))
	-category   ("Other items.Edit NURBS")
	-command    ("artPuttyToolScript 3")
	-showInHotkeyEditor false
	SculptSurfacesToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSurfaceEditingToolAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Surface Editing")
	-command    ("surfaceEditorToolScript 4")
	SurfaceEditingTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSurfaceEditingToolOptionsAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Surface Editing")
	-command    ("surfaceEditorToolScript 3")
	SurfaceEditingToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBreakTangentAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Surface Editing")
	-command    ("breakTangentToolScript 4")
	BreakTangent;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmoothTangentAnnot"))
	-category   ("Menu items.Modeling.Surfaces.Surface Editing")
	-command    ("smoothTangentToolScript 4")
	SmoothTangent;

//
//	Mesh menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolygonToolAnnot"))
	-category   ("Menu items.Modeling.Mesh Tools")
	-command    ("setToolTo polyCreateFacetContext ; " +
	             "polyCreateFacetCtx -e -pc `optionVar " +
				 "-q polyKeepFacetsPlanar` polyCreateFacetContext")
	CreatePolygonTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePolygonToolOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh Tools")
	-command    ("setToolTo polyCreateFacetContext ; " +
	             "polyCreateFacetCtx -e -pc `optionVar " +
	             "-q polyKeepFacetsPlanar` polyCreateFacetContext; " +
	             "toolPropertyWindow")
	CreatePolygonToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCombinePolygonsAnnot"))
	-category   ("Menu items.Modeling.Mesh")
	-command    ("polyPerformAction polyUnite o 0")
	CombinePolygons;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCombinePolygonsOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh")
	-command    ("polyPerformAction polyUnite o 1")
	CombinePolygonsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolySeparateAnnot"))
	-category   ("Menu items.Modeling.Mesh")
	-command    ("performPolyShellSeparate")
	SeparatePolygon;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonBooleanUnionAnnot"))
	-category   ("Menu items.Modeling.Mesh.Booleans")
	-command    ("polyPerformBooleanAction 1 o 0")
	PolygonBooleanUnion;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonBooleanUnionOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh.Booleans")
	-command    ("polyPerformBooleanAction 1 o 1")
	PolygonBooleanUnionOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonBooleanDifferenceAnnot"))
	-category   ("Menu items.Modeling.Mesh.Booleans")
	-command    ("polyPerformBooleanAction 2 o 0")
	PolygonBooleanDifference;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonBooleanDifferenceOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh.Booleans")
	-command    ("polyPerformBooleanAction 2 o 1")
	PolygonBooleanDifferenceOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonBooleanIntersectionAnnot"))
	-category   ("Menu items.Modeling.Mesh.Booleans")
	-command    ("polyPerformBooleanAction 3 o 0")
	PolygonBooleanIntersection;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonBooleanIntersectionOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh.Booleans")
	-command    ("polyPerformBooleanAction 3 o 1")
	PolygonBooleanIntersectionOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMirrorPolygonGeometryAnnot"))
	-category   ("Menu items.Modeling.Mesh")
	-command    ("performPolyMirror 0")
	MirrorPolygonGeometry;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMirrorPolygonGeometryOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh")
	-command    ("performPolyMirror 1")
	MirrorPolygonGeometryOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMirrorCutPolygonGeometryAnnot"))
	-category   ("Menu items.Modeling.Mesh")
	-command    ("performPolyMirrorCut 0")
	MirrorCutPolygonGeometry;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMirrorCutPolygonGeometryOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh")
	-command    ("performPolyMirrorCut 1")
	MirrorCutPolygonGeometryOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmoothPolygonAnnot"))
	-category   ("Menu items.Modeling.Mesh")
	-command    ("performPolySmooth 0")
	SmoothPolygon;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAverageVertexAnnot"))
	-category   ("Other items.Mesh")
	-command    ("performPolyAverageVertex 0")
	-showInHotkeyEditor false
	AverageVertex;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmoothPolygonOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh")
	-command    ("performPolySmooth 1")
	SmoothPolygonOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReducePolygonAnnot"))
	-category   ("Menu items.Modeling.Mesh")
	-command    ("performPolyReduce 0")
	ReducePolygon;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReducePolygonOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh")
	-command    ("performPolyReduce 1")
	ReducePolygonOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTriangulateAnnot"))
	-category   ("Menu items.Modeling.Mesh")
	-command    ("polyPerformAction polyTriangulate f 0")
	Triangulate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kQuadrangulateAnnot"))
	-category   ("Menu items.Modeling.Mesh")
	-command    ("performPolyQuadrangulate 0")
	Quadrangulate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kQuadrangulateOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh")
	-command    ("performPolyQuadrangulate 1")
	QuadrangulateOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCleanupPolygonAnnot"))
	-category   ("Menu items.Modeling.Mesh")
	-command    ("performPolyCleanup 0")
	CleanupPolygon;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCleanupPolygonOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh")
	-command    ("performPolyCleanup 1")
	CleanupPolygonOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyReduceWeightsToolAnnot"))
	-category   ("Menu items.Modeling.Mesh Tools")
	-command    ("polyLaunchPaintReduceTool")
	PaintReduceWeightsTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyReduceWeightsToolOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh Tools")
	-command    ("PaintReduceWeightsTool; toolPropertyWindow;")
	PaintReduceWeightsToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyExtrudeOptionsAnnot"))
	-category   ("Other items.Mesh")
	-command    ("performPolyExtrude 1")
	-showInHotkeyEditor false
	PolyExtrudeOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExtractFaceAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyChipOff 0 0")
	ExtractFace;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExtractFaceOptionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyChipOff 1 0")
	ExtractFaceOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMakeHoleToolAnnot"))
	-category   ("Menu items.Modeling.Mesh Tools")
	-command    ("setToolTo polyMergeFacetContext")
	MakeHoleTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMakeHoleToolOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh Tools")
	-command    ("setToolTo polyMergeFacetContext; toolPropertyWindow;")
	MakeHoleToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFillHoleAnnot"))
	-category   ("Menu items.Modeling.Mesh")
	-command    ("polyPerformAction polyCloseBorder e 0")
	FillHole;

// legacy command - replaced by SculptGeometryTool
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSculptPolygonsToolAnnot"))
	-category   ("Other items.Mesh")
	-command    ("artPuttyToolScript 4")
	-showInHotkeyEditor false
	SculptPolygonsTool;

// legacy command - replaced by SculptGeometryToolOptions
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSculptPolygonsToolOptionsAnnot"))
	-category   ("Other items.Mesh")
	-command    ("artPuttyToolScript 3")
	-showInHotkeyEditor false
	SculptPolygonsToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonCopyAnnot"))
	-category   ("Menu items.Modeling.Mesh.Clipboard Actions")
	-command    ("performPolyCopyPaste 0 1")
	PolygonCopy;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonCopyOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh.Clipboard Actions")
	-command    ("performPolyCopyPaste 1 1")
	PolygonCopyOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonPasteAnnot"))
	-category   ("Menu items.Modeling.Mesh.Clipboard Actions")
	-command    ("performPolyCopyPaste 0 2")
	PolygonPaste;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonPasteOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh.Clipboard Actions")
	-command    ("performPolyCopyPaste 1 2")
	PolygonPasteOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonClearClipboardAnnot"))
	-category   ("Menu items.Modeling.Mesh.Clipboard Actions")
	-command    ("performPolyCopyPaste 0 3")
	PolygonClearClipboard;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonClearClipboardOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh.Clipboard Actions")
	-command    ("performPolyCopyPaste 1 3")
	PolygonClearClipboardOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTransferAttributesAnnot"))
	-category   ("Other items.Mesh")
	-command    ("performTransferAttributes 0")
	-showInHotkeyEditor false
	TransferAttributes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCopyMeshAttributesAnnot"))
	-category   ("Other items.Mesh")
	-command    ("performPolyTransfer 0")
	-showInHotkeyEditor false
	CopyMeshAttributes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyUVSelectSharedAnnot"))
	-category   ("Menu items.Modeling.UV.Per Instance Sharing")
	-command    ("polyUVSelectSharedInstances")
	SelectSharedUVInstances;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyUVShareInstancesAnnot"))
	-category   ("Menu items.Modeling.UV.Per Instance Sharing")
	-command    ("polyUVShareInstances")
	ShareUVInstances;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyUVMakeInstanceCurrentAnnot"))
	-category   ("Menu items.Modeling.UV.Per Instance Sharing")
	-command    ("polyUVMakeInstanceCurrent")
	MakeUVInstanceCurrent;

//
//	Edit Mesh menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAppendToPolygonToolAnnot"))
	-category   ("Menu items.Modeling.Mesh Tools")
	-command    ("setToolTo polyAppendFacetContext ; " +
	             "polyAppendFacetCtx -e -pc `optionVar " +
	             "-q polyKeepFacetsPlanar` polyAppendFacetContext")
	AppendToPolygonTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAppendToPolygonToolOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh Tools")
	-command    ("setToolTo polyAppendFacetContext ; " +
	             "polyAppendFacetCtx -e -pc `optionVar " +
	             "-q polyKeepFacetsPlanar` polyAppendFacetContext; " +
	             "toolPropertyWindow")
	AppendToPolygonToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddDivisionsAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("performPolySubdivide \"\" 0")
	AddDivisions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddDivisionsOptionsAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("performPolySubdivide \"\" 1")
	AddDivisionsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddFaceDivisionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolySubdivide \"f\" 0")
	AddFaceDivisions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddFaceDivisionsOptionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolySubdivide \"f\" 1")
	AddFaceDivisionsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddEdgeDivisionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolySubdivide \"e\" 0")
	AddEdgeDivisions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddEdgeDivisionsOptionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolySubdivide \"e\" 1")
	AddEdgeDivisionsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSplitPolygonToolAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("setToolTo polySplitContext")
	SplitPolygonTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSplitPolygonToolOptionsAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("setToolTo polySplitContext ; toolPropertyWindow")
	SplitPolygonToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInteractiveSplitToolAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("setToolTo polySplitContext2")
	InteractiveSplitTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInteractiveSplitToolOptionsAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("setToolTo polySplitContext2 ; toolPropertyWindow")
	InteractiveSplitToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kChamferVertexAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyChamferVertex 0")
	ChamferVertex;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kChamferVertexOptionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyChamferVertex 1")
	ChamferVertexOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBevelPolygonAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyBevel 0")
	BevelPolygon;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBevelPolygonOptionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh;Menu items.Modeling.Edit Mesh")
	-command    ("performPolyBevel 1")
	BevelPolygonOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProjectCurveOnMeshAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performProjectCurveOnMesh 0")
	ProjectCurveOnMesh;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kProjectCurveOnMeshOptions"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performProjectCurveOnMesh 1")
	ProjectCurveOnMeshOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSplitMeshWithProjectedCurveAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performSplitMeshWithProjectedCurve 0")
	SplitMeshWithProjectedCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSplitMeshWithProjectedCurveOptions"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performSplitMeshWithProjectedCurve 1")
	SplitMeshWithProjectedCurveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCutPolygonAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("performPolyCut 0")
	CutPolygon;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCutPolygonOptionsAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("performPolyCut 1")
	CutPolygonOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPokePolygonAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyPoke 0")
	PokePolygon;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPokePolygonOptionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyPoke 1")
	PokePolygonOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWedgePolygonAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyWedgeFace 0")
	WedgePolygon;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWedgePolygonOptionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyWedgeFace 1")
	WedgePolygonOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyMergeAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyMerge 0")
	PolyMerge;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyMergeOptionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyMerge 1")
	PolyMergeOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMergeToCenterAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("polyMergeToCenter")
	MergeToCenter;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOffsetEdgeLoopToolAnnot"))
	-category   ("Other items.Edit Mesh")
	-command    ("performPolyDuplicateEdge 0")
	-showInHotkeyEditor false
	OffsetEdgeLoopTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOffsetEdgeLoopToolOptionsAnnot"))
	-category   ("Other items.Edit Mesh")
	-command    ("performPolyDuplicateEdge 1")
	-showInHotkeyEditor false
	OffsetEdgeLoopToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyConvertToLoopAndDuplicateAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("SelectEdgeLoop;polyDuplicateEdge -ch 1 -offset 0.5 -startVertexOffset 0 -endVertexOffset 0 -deleteEdge 0 -smoothingAngle 180;")
	PolyConvertToLoopAndDuplicate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyConvertToLoopAndDeleteAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("SelectEdgeLoop;DeleteEdge;")
	PolyConvertToLoopAndDelete;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInsertEdgeLoopToolAnnot"))
	-category   ("Other items.Edit Mesh")
	-command    ("polySelectEditCtx -e -mode 1 polySelectEditContext; setToolTo polySelectEditContext")
	-showInHotkeyEditor false
	InsertEdgeLoopTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInsertEdgeLoopToolOptionsAnnot"))
	-category   ("Other items.Edit Mesh")
	-command    ("polySelectEditCtx -e -mode 1 polySelectEditContext; setToolTo polySelectEditContext; toolPropertyWindow")
	-showInHotkeyEditor false
	InsertEdgeLoopToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyConvertToRingAndSplitAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("polyConvertToRingAndSplit")
	PolyConvertToRingAndSplit;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyConvertToRingAndCollapseAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("SelectEdgeRing;polyCollapseEdge;")
	PolyConvertToRingAndCollapse;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMergeVertexToolAnnot"))
	-category   ("Menu items.Modeling.Mesh Tools")
	-command    ("setToolTo polyMergeVertexContext")
	MergeVertexTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMergeVertexToolOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh Tools")
	-command    ("setToolTo polyMergeVertexContext; toolPropertyWindow;")
	MergeVertexToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMergeEdgeToolAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("setToolTo polyMergeEdgeContext")
	MergeEdgeTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMergeEdgeToolOptionsAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("setToolTo polyMergeEdgeContext; toolPropertyWindow;")
	MergeEdgeToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFlipTriangleEdgeAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("polyFlipEdge")
	FlipTriangleEdge;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonCollapseAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyCollapse 0")
	PolygonCollapse;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonCollapseEdgesAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyCollapseComponents 0 e")
	PolygonCollapseEdges;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonCollapseFacesAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyCollapseComponents 0 f")
	PolygonCollapseFaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDetachComponentAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("performDetachComponents")
	DetachComponent;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDetachVertexComponentAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performDetachVertices")
	DetachVertexComponent;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDetachEdgeComponentAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performDetachEdges")
	DetachEdgeComponent;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeletePolyElementsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyDeleteElements")
	DeletePolyElements;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteVertexAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("polyDeleteVertex")
	DeleteVertex;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteEdgeAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("polyPerformAction \"polyDelEdge -cv true\" e 0")
	DeleteEdge;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDuplicateFaceAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyChipOff 0 1")
	DuplicateFace;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDuplicateFaceOptionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyChipOff 1 1")
	DuplicateFaceOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTransformPolygonComponentAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("performPolyMove \"\" 0")
	TransformPolygonComponent;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTransformPolygonComponentOptionsAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("performPolyMove \"\" 1")
	TransformPolygonComponentOptions;

runTimeCommand	-default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSlideEdgeLoopToolAnnot"))
	-category	("Menu items.Modeling.Mesh Tools")
	-command	("setToolTo polySlideEdgeContext;")
	SlideEdgeTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSlideEdgeLoopToolOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh Tools")
	-command    ("setToolTo polySlideEdgeContext; toolPropertyWindow;")
	SlideEdgeToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBridgeEdgeAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh;Menu items.Modeling.Edit Mesh")
	-command    ("performPolyBridgeEdge 0")
	BridgeEdge;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBridgeEdgeOptionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh;Menu items.Modeling.Edit Mesh")
	-command    ("performPolyBridgeEdge 1")
	BridgeEdgeOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyExtrudeAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyExtrude 0")
	PolyExtrude;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolySpinEdgeForwardsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolySpinEdge 0")
	PolySpinEdgeForward;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolySpinEdgeBackwardsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolySpinEdge 1")
	PolySpinEdgeBackward;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyEditEdgeFlowAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyEditEdgeFlow 0")
	PolyEditEdgeFlow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyEditEdgeFlowOptionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyEditEdgeFlow 1")
	PolyEditEdgeFlowOptions;



runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyExtrudeVertsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyExtrude 3")
	PolyExtrudeVertices;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyExtrudeVertsOptionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyExtrude 4")
	PolyExtrudeVerticesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyExtrudeEdgesAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyExtrude 6")
	PolyExtrudeEdges;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyExtrudeEdgesOptionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyExtrude 7")
	PolyExtrudeEdgesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyExtrudeFacesAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyExtrude 9")
	PolyExtrudeFaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyExtrudeFacesOptionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyExtrude 10")
	PolyExtrudeFacesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyMergeVertsAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("performPolyMerge 3")
	PolyMergeVertices;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyMergeVertsOptionsAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("performPolyMerge 4")
	PolyMergeVerticesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyMergeEdgeAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("performPolyMerge 6")
	PolyMergeEdges;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyMergeEdgesOptionsAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("performPolyMerge 7")
	PolyMergeEdgesOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheSculptToolAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("setMeshSculptTool \"Sculpt\"")
		-hotkeyCtx ("sculptMeshCache")
		SetMeshSculptTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheSculptToolOpsAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("SetMeshSculptTool; toolPropertyWindow;")
		ShowMeshSculptToolOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheSmoothToolAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("setMeshSculptTool \"Smooth\"")
		-hotkeyCtx ("sculptMeshCache")
		SetMeshSmoothTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheSmoothToolOpsAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("SetMeshSmoothTool; toolPropertyWindow;")
		ShowMeshSmoothToolOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheRelaxToolAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("setMeshSculptTool \"Relax\"")
		-hotkeyCtx ("sculptMeshCache")
		SetMeshRelaxTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheRelaxToolOpsAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("SetMeshRelaxTool; toolPropertyWindow;")
		ShowMeshRelaxToolOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheGrabToolAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("setMeshSculptTool \"Grab\"")
		-hotkeyCtx ("sculptMeshCache")
		SetMeshGrabTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheGrabToolOpsAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("SetMeshGrabTool; toolPropertyWindow;")
		ShowMeshGrabToolOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCachePinchToolAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("setMeshSculptTool \"Pinch\"")
		-hotkeyCtx ("sculptMeshCache")
		SetMeshPinchTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCachePinchToolOpsAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("SetMeshPinchTool; toolPropertyWindow;")
		ShowMeshPinchToolOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheFlattenToolAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("setMeshSculptTool \"Flatten\"")
		-hotkeyCtx ("sculptMeshCache")
		SetMeshFlattenTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheFlattenToolOpsAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("SetMeshFlattenTool; toolPropertyWindow;")
		ShowMeshFlattenToolOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheFoamyToolAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("setMeshSculptTool \"Foamy\"")
		-hotkeyCtx ("sculptMeshCache")
		SetMeshFoamyTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheFoamyToolOpsAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("SetMeshFoamyTool; toolPropertyWindow;")
		ShowMeshFoamyToolOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheSprayToolAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("setMeshSculptTool \"Spray\"")
		-hotkeyCtx ("sculptMeshCache")
		SetMeshSprayTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheSprayToolOpsAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("SetMeshSprayTool; toolPropertyWindow;")
		ShowMeshSprayToolOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheRepeatToolAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("setMeshSculptTool \"Repeat\"")
		-hotkeyCtx ("sculptMeshCache")
		SetMeshRepeatTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheRepeatToolOpsAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("SetMeshRepeatTool; toolPropertyWindow;")
		ShowMeshRepeatToolOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheImprintToolAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("setMeshSculptTool \"Imprint\"")
		SetMeshImprintTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheImprintToolOpsAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("SetMeshImprintTool; toolPropertyWindow;")
		ShowMeshImprintToolOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheWaxToolAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("setMeshSculptTool \"Wax\"")
		SetMeshWaxTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheWaxToolOpsAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("SetMeshWaxTool; toolPropertyWindow;")
		ShowMeshWaxToolOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheScrapeToolAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("setMeshSculptTool \"Scrape\"")
		SetMeshScrapeTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheScrapeToolOpsAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("SetMeshScrapeTool; toolPropertyWindow;")
		ShowMeshScrapeToolOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheFillToolAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("setMeshSculptTool \"Fill\"")
		SetMeshFillTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheFillToolOpsAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("SetMeshFillTool; toolPropertyWindow;")
		ShowMeshFillToolOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheKnifeToolAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("setMeshSculptTool \"Knife\"")
		SetMeshKnifeTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheKnifeToolOpsAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("SetMeshKnifeTool; toolPropertyWindow;")
		ShowMeshKnifeToolOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheSmearToolAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("setMeshSculptTool \"Smear\"")
		SetMeshSmearTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheSmearToolOpsAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("SetMeshSmearTool; toolPropertyWindow;")
		ShowMeshSmearToolOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheBulgeToolAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("setMeshSculptTool \"Bulge\"")
		SetMeshBulgeTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheBulgeToolOpsAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("SetMeshBulgeTool; toolPropertyWindow;")
		ShowMeshBulgeToolOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheAmplifyToolAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("setMeshSculptTool \"Amplify\"")
		SetMeshAmplifyTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheAmplifyToolOpsAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("SetMeshAmplifyTool; toolPropertyWindow;")
		ShowMeshAmplifyToolOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheFreezeToolAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("setMeshSculptTool \"Freeze\"")
		-hotkeyCtx ("sculptMeshCache")
		SetMeshFreezeTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheFreezeToolOpsAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("SetMeshFreezeTool; toolPropertyWindow;")
		ShowMeshFreezeToolOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheUnfreezeAll"))
		-category   ("Other items.Brush Tools")
		-command    ("if ( `contextInfo -ex sculptMeshCacheContext`) sculptMeshCacheCtx -e -floodFreeze 0.0 sculptMeshCacheContext;")
		-hotkeyCtx ("sculptMeshCache")
		SculptMeshUnfreezeAll;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheInvertFreeze"))
		-category   ("Other items.Brush Tools")
		-command    ("if ( `contextInfo -ex sculptMeshCacheContext`) sculptMeshCacheCtx -e -floodFreeze -1.0 sculptMeshCacheContext;")
		-hotkeyCtx ("sculptMeshCache")
		SculptMeshInvertFreeze;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFrameSculptedAreaAnnot"))
		-category   ("Other items.Brush Tools")
		-command    ("if ( `contextInfo -ex sculptMeshCacheContext`) sculptMeshCacheCtx -e -frame sculptMeshCacheContext;")
		-hotkeyCtx ("sculptMeshCache")
		SculptMeshFrame;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kModifyStrengthPressAnnot"))
		-category   ("Other items.Brush Tools")
		-command    ("if ( `contextInfo -ex sculptMeshCacheContext`) sculptMeshCacheCtx -e -adjustStrength 1 sculptMeshCacheContext;")
		-hotkeyCtx ("sculptMeshCache")
		SculptMeshActivateBrushStrength;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kModifyStrengthReleaseAnnot"))
		-category   ("Other items.Brush Tools")
		-command    ("if ( `contextInfo -ex sculptMeshCacheContext`) sculptMeshCacheCtx -e -adjustStrength 0 sculptMeshCacheContext;")
		-hotkeyCtx ("sculptMeshCache")
		SculptMeshDeactivateBrushStrength;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kModifySizePressAnnot"))
		-category   ("Other items.Brush Tools")
		-command    ("if ( `contextInfo -ex sculptMeshCacheContext`) sculptMeshCacheCtx -e -adjustSize 1 sculptMeshCacheContext;")
		-hotkeyCtx ("sculptMeshCache")
		SculptMeshActivateBrushSize;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kModifySizeReleaseAnnot"))
		-category   ("Other items.Brush Tools")
		-command    ("if ( `contextInfo -ex sculptMeshCacheContext`) sculptMeshCacheCtx -e -adjustSize 0 sculptMeshCacheContext;")
		-hotkeyCtx ("sculptMeshCache")
		SculptMeshDeactivateBrushSize;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kOpenVisorForMeshesAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("{\n" + 
					"VisorWindow;\n" + 
					"string $nameOfTab = \"Sculpting Base Meshes\";\n" + 

					"string $pnl = visorPanelName();\n" + 

					"if( size($pnl) > 0 )\n" + 

					" visorPanelMenuCommand( $pnl, (\"selectTabByLabel \" + $nameOfTab));\n" + 

					"}\n") 
		OpenVisorForMeshes;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kConvertToFrozenAnnot"))
		-category   ("Menu items.Modeling.Mesh Tools.Sculpting Tools")
		-command    ("{\n" + 
					" convertSelectionToFrozen();\n" + 
					"}\n") 
		ConvertToFrozen;


//
//	Polygons menu; obsolete
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmoothProxyAnnot"))
	-category   ("Menu items.Modeling.Mesh.Smooth Proxy")
	-command    ("performSmoothProxy 0")
	SmoothProxy;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmoothProxyOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh.Smooth Proxy")
	-command    ("performSmoothProxy 1")
	SmoothProxyOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyUnMrrSmoothProxyAnnot"))
	-category   ("Menu items.Modeling.Mesh.Smooth Proxy")
	-command    ("performUnmirrorSmoothProxy 0")
	UnmirrorSmoothProxy;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUnmirrorSmoothProxyOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh.Smooth Proxy")
	-command    ("performUnmirrorSmoothProxy 1")
	UnmirrorSmoothProxyOptions;

//
//	Proxy menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdivProxyAnnot"))
	-category   ("Other items.Proxy")
	-command    ("performSmoothProxy 0")
	-showInHotkeyEditor false
	SubdivProxy;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdivProxyOptionsAnnot"))
	-category   ("Other items.Proxy")
	-command    ("performSmoothProxy 1")
	-showInHotkeyEditor false
	SubdivProxyOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveSubdivProxyMirrorAnnot"))
	-category   ("Other items.Proxy")
	-command    ("performUnmirrorSmoothProxy 0")
	-showInHotkeyEditor false
	RemoveSubdivProxyMirror;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveSubdivProxyMirrorOptionsAnnot"))
	-category   ("Other items.Proxy")
	-command    ("performUnmirrorSmoothProxy 1")
	-showInHotkeyEditor false
	RemoveSubdivProxyMirrorOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreaseProxyEdgeToolAnnot"))
	-category   ("Other items.Proxy")
	-command    ("setToolTo polyCreaseContext")
	-showInHotkeyEditor false
	CreaseProxyEdgeTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreaseProxyEdgeToolOptionsAnnot"))
	-category   ("Other items.Proxy")
	-command    ("setToolTo polyCreaseContext; toolPropertyWindow;")
	-showInHotkeyEditor false
	CreaseProxyEdgeToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleProxyDisplayAnnot"))
	-category   ("Other items.Proxy")
	-command    ("smoothingDisplayToggle 1")
	-showInHotkeyEditor false
	ToggleProxyDisplay;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBothProxySubdivDisplayAnnot"))
	-category   ("Other items.Proxy")
	-command    ("smoothingDisplayToggle 0")
	-showInHotkeyEditor false
	BothProxySubdivDisplay;


//
//	Polygon Select menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolySelectToolAnnot"))
	-category   ("Other items.Tools")
	-command    ("setToolTo polySelectContext")
	PolySelectTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolySelectToolOptionsAnnot"))
	-category   ("Other items.Tools")
	-command    ("setToolTo polySelectContext; toolPropertyWindow;")
	PolySelectToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGrowPolygonSelectionRegionAnnot"))
	-category   ("Menu items.Common.Select")
	-command    ("select `ls -sl`;PolySelectTraverse 1;select `ls -sl`;")
	GrowPolygonSelectionRegion;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShrinkPolygonSelectionRegionAnnot"))
	-category   ("Menu items.Common.Select")
	-command    ("select `ls -sl`;PolySelectTraverse 2;select `ls -sl`;")
	ShrinkPolygonSelectionRegion;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectPolygonSelectionBoundaryAnnot"))
	-category   ("Other items.Polygon Select")
	-command    ("PolySelectTraverse 3")
	-showInHotkeyEditor false
	SelectPolygonSelectionBoundary;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectEdgeLoopAnnot"))
	-category   ("Other items.Polygon Select")
	-command    ("polySelectEdges edgeLoopOrBorder;")
	-showInHotkeyEditor false
	SelectEdgeLoop;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectEdgeLoopAnnot2"))
	-category   ("Menu items.Common.Select.Convert Selection")
	-command    ("polySelectSp -loop;")
	SelectEdgeLoopSp;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectEdgeRingAnnot"))
	-category   ("Other items.Polygon Select")
	-command    ("polySelectEdges edgeRing;")
	-showInHotkeyEditor false
	SelectEdgeRing;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectEdgeRingAnnot2"))
	-category   ("Menu items.Common.Select.Convert Selection")
	-command    ("polySelectSp -ring;")
	SelectEdgeRingSp;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectFacePathAnnot"))
	-category   ("Menu items.Common.Select.Convert Selection")
	-command    ("polySelectEdges edgeRing;getFaces;")
	SelectFacePath;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectContiguousEdgesAnnot"))
	-category   ("Menu items.Common.Select")
	-command    ("performSelContiguousEdges 0")
	SelectContiguousEdges;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectContiguousEdgesOptionsAnnot"))
	-category   ("Menu items.Common.Select")
	-command    ("performSelContiguousEdges 1")
	SelectContiguousEdgesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConvertToShellAnnot"))
	-category   ("Other items.Polygon Select")
	-command    ("polyConvertToShell")
	-showInHotkeyEditor false
	ConvertSelectionToShell;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConvertToShellBorderAnnot"))
	-category   ("Other items.Polygon Select")
	-command    ("polyConvertToShellBorder")
	-showInHotkeyEditor false
	ConvertSelectionToShellBorder;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConvertSelectionToFacesAnnot"))
	-category   ("Menu items.Common.Select.Convert Selection")
	-command    ("PolySelectConvert 1;")
	ConvertSelectionToFaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConvertSelectionToContainedFacesAnnot"))
	-category   ("Menu items.Common.Select.Convert Selection")
	-command    ("PolySelectConvert 10")
	ConvertSelectionToContainedFaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConvertSelectionToEdgesAnnot"))
	-category   ("Menu items.Common.Select.Convert Selection")
	-command    ("PolySelectConvert 2")
	ConvertSelectionToEdges;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConvertSelectionToContainedEdgesAnnot"))
	-category   ("Menu items.Common.Select.Convert Selection")
	-command    ("PolySelectConvert 20;")
	ConvertSelectionToContainedEdges;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConvertSelectionToEdgePerimeterAnnot"))
	-category   ("Menu items.Common.Select.Convert Selection")
	-command    ("{string $c[]; string $f[]; convertToSelectionBorder(-1, true, $c, $f);}")
	ConvertSelectionToEdgePerimeter;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConvertSelectionToUVPerimeterAnnot"))
	-category   ("Menu items.Common.Select.Convert Selection")
	-command    ("{string $c[]; string $f[]; convertToSelectionBorder(1, true, $c, $f);}")
	ConvertSelectionToUVPerimeter;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConvertSelectionToVertexPerimeterAnnot"))
	-category   ("Menu items.Common.Select.Convert Selection")
	-command    ("{string $c[]; string $f[]; convertToSelectionBorder(0, true, $c, $f);}")
	ConvertSelectionToVertexPerimeter;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConvertSelectionToVerticesAnnot"))
	-category   ("Menu items.Common.Select.Convert Selection")
	-command    ("PolySelectConvert 3;")
	ConvertSelectionToVertices;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConvertSelectionToUVsAnnot"))
	-category   ("Menu items.Common.Select.Convert Selection")
	-command    ("PolySelectConvert 4")
	ConvertSelectionToUVs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConvertSelectionToUVEdgeLoopAnnot"))
	-category   ("Menu items.Common.Select.Convert Selection")
	-command    ("polySelectEdges edgeUVLoopOrBorder")
	ConvertSelectionToUVEdgeLoop;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConvertSelectionToVertexFacesAnnot"))
	-category   ("Menu items.Common.Select.Convert Selection")
	-command    ("PolySelectConvert 5")
	ConvertSelectionToVertexFaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectBorderEdgeToolAnnot"))
	-category   ("Other items.Polygon Select")
	-command    ("polySelectCtx -e -mode 2 polySelectContext; setToolTo polySelectContext")
	-showInHotkeyEditor false
	SelectBorderEdgeTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectShortestEdgePathToolAnnot"))
	-category   ("Menu items.Common.Select")
	-command    ("setToolTo polyShortestEdgePathContext")
	SelectShortestEdgePathTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConvertSelectionToUVShellAnnot"))
	-category   ("Other items.Polygon Select")
	-command    ("polySelectBorderShell 0")
	-showInHotkeyEditor false
	ConvertSelectionToUVShell;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConvertSelectionToUVBorderAnnot"))
	-category   ("Other items.Polygon Select")
	-command    ("polySelectBorderShell 1")
	-showInHotkeyEditor false
	ConvertSelectionToUVBorder;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateUVShellAlongBorderAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("createUVShellAlongBorder")
	CreateUVShellAlongBorder;

//
//	Edit Polygons menu; obsolete.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExtrudeFaceAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("PolyExtrude")
	ExtrudeFace;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExtrudeFaceOptionsAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("PolyExtrudeOptions")
	ExtrudeFaceOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExtrudeEdgeAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("PolyExtrude")
	ExtrudeEdge;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExtrudeEdgeOptionsAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("PolyExtrudeOptions")
	ExtrudeEdgeOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExtrudeVertexAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("PolyExtrude")
	ExtrudeVertex;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExtrudeVertexOptionsAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("PolyExtrudeOptions")
	ExtrudeVertexOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMergeVerticesAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("PolyMerge")
	MergeVertices;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMergeVerticesOptionsAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("PolyMergeOptions")
	MergeVerticesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMergeMultipleEdgesAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("PolyMerge")
	MergeMultipleEdges;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMergeMultipleEdgesOptionsAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("PolyMergeOptions")
	MergeMultipleEdgesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonSelectionConstraintsAnnot"))
	-category   ("Menu items.Common.Select")
	-command    ("openSelectionConstraintWindow")
	PolygonSelectionConstraints;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonSoftenHardenAnnot"))
	-category   ("Other items.Edit Polygons")
	-command    ("performPolySoftEdge 0")
	-showInHotkeyEditor false
	PolygonSoftenHarden;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonSoftenHardenOptionsAnnot"))
	-category   ("Other items.Edit Polygons")
	-command    ("performPolySoftEdge 1")
	-showInHotkeyEditor false
	PolygonSoftenHardenOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdividePolygonAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolySubdivide \"\" 0")
	SubdividePolygon;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdividePolygonOptionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolySubdivide \"\" 1")
	SubdividePolygonOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyCreaseToolAnnot"))
	-category   ("Menu items.Modeling.Mesh.Smooth Proxy;Menu items.Modeling.Mesh Tools")
	-command    ("setToolTo polyCreaseContext")
	PolyCreaseTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateCreaseSetAnnot"))
	-category   ("Other items.Edit Polygons")
	-command    ("performPolyCreateCreaseSet 0")
	-showInHotkeyEditor false
	CreateCreaseSet;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateCreaseSetOptionsAnnot"))
	-category   ("Other items.Edit Polygons")
	-command    ("performPolyCreateCreaseSet 1")
	-showInHotkeyEditor false
	CreateCreaseSetOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyCreaseToolOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh.Smooth Proxy;Menu items.Modeling.Mesh Tools")
	-command    ("setToolTo polyCreaseContext; toolPropertyWindow;")
	PolyCreaseToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyAssignSubdivHoleAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyHoleFace 0")
	PolyAssignSubdivHole;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyAssignSubdivHoleOptionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyHoleFace 1")
	PolyAssignSubdivHoleOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyRemoveCreaseAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("polyCrease -op 1 -ch `constructionHistory -q -tgl`")
	PolyRemoveCrease;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyRemoveAllCreaseAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("polyCrease -op 2 -ch `constructionHistory -q -tgl`")
	PolyRemoveAllCrease;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDuplicateEdgesAnnot"))
	-category   ("Menu items.Modeling.Mesh Tools")
	-command    ("performPolyDuplicateEdge 0")
	DuplicateEdges;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDuplicateEdgesOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh Tools")
	-command    ("performPolyDuplicateEdge 1")
	DuplicateEdgesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSplitEdgeRingToolAnnot"))
	-category   ("Menu items.Modeling.Mesh Tools")
	-command    ("polySelectEditCtx -e -mode 1 polySelectEditContext; setToolTo polySelectEditContext")
	SplitEdgeRingTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSplitEdgeRingToolOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh Tools")
	-command    ("polySelectEditCtx -e -mode 1 polySelectEditContext; setToolTo polySelectEditContext; toolPropertyWindow")
	SplitEdgeRingToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSplitVertexAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("polySplitVertex")
	SplitVertex;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConnectComponentsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("polyPerformAction polyConnectComponents n 0")
	ConnectComponents;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConnectComponentsOptionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("polyPerformAction polyConnectComponents n 1")
	ConnectComponentsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSplitEdgeAnnot"))
	-category   ("Other items.Polygon Modeling")
	-command    ("polySplitEdge")
	SplitEdge;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMovePolygonComponentAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyMove \"\" 0")
	MovePolygonComponent;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMovePolygonComponentOptionsAnnot"))
	-category   ("Menu items.Modeling.Edit Mesh")
	-command    ("performPolyMove \"\" 1")
	MovePolygonComponentOptions;

//
//	Polygon UVs menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAutoProjectionAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("polyPerformAction polyAutoProjection f 0")
	-showInHotkeyEditor false
	AutoProjection;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetCurrentUVSetAnnot"))
	-category   ("Menu items.Modeling.UV")
	-command    ("performSetCurrentUVSet 1")
	SetCurrentUVSet;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRenameCurrentUVSetAnnot"))
	-category   ("Menu items.Modeling.UV")
	-command    ("performRenameCurrentUVSet 1")
	RenameCurrentUVSet;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteCurrentUVSetAnnot"))
	-category   ("Menu items.Modeling.UV")
	-command    ("performDeleteCurrentUVSet 0")
	DeleteCurrentUVSet;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUVSetEditorAnnot"))
	-category   ("Menu items.Modeling.UV")
	-command    ("uvSetEditor")
	UVSetEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNormalizeUVsAnnot"))
	-category   ("Menu items.Modeling.UV")
	-command    ("performPolyForceUV normalize 0")
	NormalizeUVs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFlipUVsAnnot"))
	-category   ("Menu items.Modeling.UV")
	-command    ("performPolyForceUV flip 0")
	FlipUVs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRotateUVsAnnot"))
	-category   ("Menu items.Modeling.UV")
	-command    ("performPolyRotateUVs 0")
	RotateUVs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBestPlaneTexturingToolAnnot"))
	-category   ("Menu items.Modeling.UV")
	-command    ("setToolTo polyBestPlaneTexturingContext")
	BestPlaneTexturingTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMapUVBorderAnnot"))
	-category   ("Menu items.Modeling.UV")
	-command    ("performPolyUntangleUV map 0")
	MapUVBorder;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRelaxUVShellAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyUntangleUV relax 0")
	-showInHotkeyEditor false
	RelaxUVShell;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOptimizeUVsAnnot"))
	-category   ("Menu items.Modeling.UV")
	-command    ("performPolyOptimizeUV 0")
	OptimzeUVs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOptimizeUVsOptionsAnnot"))
	-category   ("Menu items.Modeling.UV")
	-command    ("performPolyOptimizeUV 1")
	OptimzeUVsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLayoutUVAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("polyPerformAction polyLayoutUV f 0")
	-showInHotkeyEditor false
	LayoutUV;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGridUVAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyGridUV 0")
	-showInHotkeyEditor false
	GridUV;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGridUVOptionsAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyGridUV 1")
	-showInHotkeyEditor false
	GridUVOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCutUVsAnnot"))
	-category   ("Menu items.Modeling.UV")
	-command    ("polyPerformAction polyMapCut e 0")
	CutUVs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLayoutUVRectangleAnnot"))
	-category   ("Menu items.Modeling.UV")
	-command    ("polyPerformAction polyUVRectangle v 0")
	LayoutUVRectangle;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSewUVsAnnot"))
	-category   ("Menu items.Modeling.UV")
	-command    ("polyPerformAction polyMapSew e 0")
	SewUVs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMoveSewUVsAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("polyPerformAction polyMapSewMove e 0")
	-showInHotkeyEditor false
	MoveSewUVs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteUVsAnnot"))
	-category   ("Menu items.Modeling.UV")
	-command    ("polyPerformAction polyMapDel f 0")
	DeleteUVs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kIncreaseCheckerDensityAnnot"))
	-category   ("Menu items.Modeling.UV")
	-command 	("{\n" +
				 "	string $texWinName[] = `getPanel -sty polyTexturePlacementPanel`;\n" +
				 "	int $density = `textureWindow -q -checkerDensity $texWinName[0]`;\n" +
				 "	$density = ($density < 10) ? ($density + 1) : (($density < 100) ? ($density + 10) : ($density + 100));\n" +
				 "	textureWindow -e -checkerDensity $density $texWinName[0];\n" +
				 "}\n")
	IncreaseCheckerDensity;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDecreaseCheckerDensityAnnot"))
	-category   ("Menu items.Modeling.UV")
	-command 	("{\n" +
				 "	string $texWinName[] = `getPanel -sty polyTexturePlacementPanel`;\n" +  
				 "	int $density = `textureWindow -q -checkerDensity $texWinName[0]`;\n" +
				 "	$density = ($density <= 10) ? ($density - 1) : (($density <= 100) ? ($density - 10) : ($density - 100));\n" +
				 "	textureWindow -e -checkerDensity $density $texWinName[0];\n" +
				 "}\n")
	DecreaseCheckerDensity;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheGrabUVToolAnnot"))
		-category   ("Menu items.Modeling.UV")
		-command    ("setMeshSculptTool \"UV\"")
		SetMeshGrabUVTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kMeshCacheGrabUVToolOpsAnnot"))
		-category   ("Menu items.Modeling.UV")
		-command    ("SetMeshGrabUVTool; toolPropertyWindow;")
		ShowMeshGrabUVToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAutoProjectionOptionsAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyAutoProj 1")
	-showInHotkeyEditor false
	AutoProjectionOptions;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPlanarProjectionAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyProjectionArgList \"1\" {\"0\", \"Planar\", \"ls -selection\", \"0\"} \"\"")
	-showInHotkeyEditor false
	PlanarProjection;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPlanarProjectionOptionsAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyProjectionArgList \"1\" {\"1\", \"Planar\", \"ls -selection\", \"0\"} \"\"")
	-showInHotkeyEditor false
	PlanarProjectionOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCylindricalProjectionAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyProjectionArgList \"1\" {\"0\", \"Cylindrical\", \"ls -selection\", \"0\"} \"\"")
	-showInHotkeyEditor false
	CylindricalProjection;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCylindricalProjectionOptionsAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyProjectionArgList \"1\" {\"1\", \"Cylindrical\", \"ls -selection\", \"0\"} \"\"")
	-showInHotkeyEditor false
	CylindricalProjectionOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSphericalProjectionAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyProjectionArgList \"1\" {\"0\", \"Spherical\", \"ls -selection\", \"0\"} \"\"")
	-showInHotkeyEditor false
	SphericalProjection;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSphericalProjectionOptionsAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyProjectionArgList \"1\" {\"1\", \"Spherical\", \"ls -selection\", \"0\"} \"\"")
	-showInHotkeyEditor false
	SphericalProjectionOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kContourProjectionAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyProjectionArgList \"1\" {\"0\", \"Contour\", \"ls -selection\", \"0\"} \"\"")
	-showInHotkeyEditor false
	ContourProjection;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kContourProjectionOptionsAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyProjectionArgList \"1\" {\"1\", \"Contour\", \"ls -selection\", \"0\"} \"\"")
	-showInHotkeyEditor false
	ContourProjectionOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateEmptyUVSetAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performCreateUVSet \"1\" {\"0\", \"ls -selection\", \"0\"} \"\"")
	-showInHotkeyEditor false
	CreateEmptyUVSet;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateEmptyUVSetOptionsAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performCreateUVSet \"1\" {\"1\", \"ls -selection\", \"0\"} \"\"")
	-showInHotkeyEditor false
	CreateEmptyUVSetOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCopyUVsToUVSetAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performCopyCurrentUVSet \"1\" {\"0\", \"ls -selection\", \"0\"} \"\"")
	-showInHotkeyEditor false
	CopyUVsToUVSet;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAlignUVAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performTextureViewAlignUVsOptions false")
	-showInHotkeyEditor false
	AlignUV;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAlignUVOptionsAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performTextureViewAlignUVsOptions true")
	-showInHotkeyEditor false
	AlignUVOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWarpImageAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyWarpImage 1")
	-showInHotkeyEditor false
	WarpImage;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWarpImageOptionsAnnot"))
	-category   ("Menu items.Modeling.UV")
	-command    ("performPolyWarpImage 1")
	-showInHotkeyEditor false
	WarpImageOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kStraightenUVBorderAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyStraightenUV 0")
	-showInHotkeyEditor false
	StraightenUVBorder;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kStraightenUVBorderOptionsAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyStraightenUV 1")
	-showInHotkeyEditor false
	StraightenUVBorderOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSplitUVAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("polySplitTextureUV")
	-showInHotkeyEditor false
	SplitUV;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMergeUVAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyMergeUV 0")
	-showInHotkeyEditor false
	MergeUV;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMergeUVOptionsAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyMergeUV 1")
	-showInHotkeyEditor false
	MergeUVOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUnfoldUVAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performUnfold 0")
	-showInHotkeyEditor false
	UnfoldUV;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUnfoldUVOptionsAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performUnfold 1")
	-showInHotkeyEditor false
	UnfoldUVOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateUVsBasedOnCameraAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyForceUVArgList \"1\" {\"0\", \"camera\", \"ls -selection\", \"0\"} \"\"")
	-showInHotkeyEditor false
	CreateUVsBasedOnCamera;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateUVsBasedOnCameraOptionsAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyForceUVArgList \"1\" {\"1\", \"camera\", \"ls -selection\", \"0\"} \"\"")
	-showInHotkeyEditor false
	CreateUVsBasedOnCameraOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUnitizeUVsAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyForceUVArgList \"1\" {\"0\", \"unitize\", \"ls -sl\", \"0\"} \"\"")
	-showInHotkeyEditor false
	UnitizeUVs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUnitizeUVsOptionsAnnot"))
	-category   ("Other items.Polygon UVs")
	-command    ("performPolyForceUVArgList \"1\" {\"1\", \"unitize\", \"ls -sl\", \"0\"} \"\"")
	-showInHotkeyEditor false
	UnitizeUVsOptions;

//
//	Polygon Color menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetCurrentColorSetAnnot"))
	-category   ("Other items.Polygon Color")
	-command    ("performSetCurrentColorSet 1")
	-showInHotkeyEditor false
	SetCurrentColorSet;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRenameCurrentColorSetAnnot"))
	-category   ("Other items.Polygon Color")
	-command    ("performRenameCurrentColorSet 1")
	-showInHotkeyEditor false
	RenameCurrentColorSet;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteCurrentColorSetAnnot"))
	-category   ("Other items.Polygon Color")
	-command    ("performDeleteCurrentColorSet 1")
	-showInHotkeyEditor false
	DeleteCurrentColorSet;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kApplyColorAnnot"))
	-category   ("Menu items.Modeling.Mesh Display")
	-command    ("performApplyColor 0")
	PolygonApplyColor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kApplyColorOptionAnnot"))
	-category   ("Menu items.Modeling.Mesh Display")
	-command    ("performApplyColor 1")
	PolygonApplyColorOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPrelightPolygonAnnot"))
	-category   ("Other items.Polygon Color")
	-command    ("performPrelight 0")
	-showInHotkeyEditor false
	PrelightPolygon;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPrelightPolygonOptionsAnnot"))
	-category   ("Other items.Polygon Color")
	-command    ("performPrelight 1")
	-showInHotkeyEditor false
	PrelightPolygonOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBatchBakeAnnot"))
	-category   ("Other items.Polygon Color")
	-command    ("mrBakeToVertices 0")
	-showInHotkeyEditor false
	BatchBake;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBatchBakeOptionsAnnot"))
	-category   ("Other items.Polygon Color")
	-command    ("mrBakeToVertices 1")
	-showInHotkeyEditor false
	BatchBakeOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintVertexColorToolAnnot"))
	-category   ("Menu items.Modeling.Mesh Display")
	-command    ("artAttrColorPerVertexToolScript 4")
	PaintVertexColorTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintVertexColorOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh Display")
	-command    ("artAttrColorPerVertexToolScript 3")
	PaintVertexColorToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetKeyVertexColorAnnot"))
	-category   ("Other items.Polygon Color")
	-command    ("setPolyColorKeyframe")
	-showInHotkeyEditor false
	SetKeyVertexColor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyColorSelectSharedAnnot"))
	-category   ("Menu items.Modeling.Mesh Display.Per Instance Sharing")
	-command    ("polyColorSelectSharedInstances")
	SelectSharedColorInstances;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyColorShareInstancesAnnot"))
	-category   ("Menu items.Modeling.Mesh Display.Per Instance Sharing")
	-command    ("polyColorShareInstances")
	ShareColorInstances;

//
//	Polygon Normals menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetVertexNormalAnnot"))
	-category   ("Menu items.Modeling.Mesh Display")
	-command    ("performPolySetNormal 0")
	SetVertexNormal;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetVertexNormalOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh Display")
	-command    ("performPolySetNormal 1")
	SetVertexNormalOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAveragePolygonNormalsAnnot"))
	-category   ("Menu items.Modeling.Mesh Display")
	-command    ("performPolyAverageNormal 0")
	AveragePolygonNormals;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAveragePolygonNormalsOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh Display")
	-command    ("performPolyAverageNormal 1")
	AveragePolygonNormalsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetToFaceNormalsAnnot"))
	-category   ("Menu items.Modeling.Mesh Display")
	-command    ("performPolySetToFaceNormal 0")
	SetToFaceNormals;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetToFaceNormalsOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh Display")
	-command    ("performPolySetToFaceNormal 1")
	SetToFaceNormalsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReversePolygonNormalsAnnot"))
	-category   ("Menu items.Modeling.Mesh Display")
	-command    ("performPolyNormal 0 -1 0")
	ReversePolygonNormals;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReversePolygonNormalsOptionsAnnot"))
	-category   ("Menu items.Modeling.Mesh Display")
	-command    ("performPolyNormal 1 -1 0")
	ReversePolygonNormalsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConformPolygonNormalsAnnot"))
	-category   ("Menu items.Modeling.Mesh Display")
	-command    ("performPolyNormal 0 2 0")
	ConformPolygonNormals;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLockNormalsAnnot"))
	-category   ("Other items.Polygon Normals")
	-command    ("polyNormalPerVertex -fn true")
	-showInHotkeyEditor false
	LockNormals;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUnlockNormalsAnnot"))
	-category   ("Other items.Polygon Normals")
	-command    ("polyNormalPerVertex -ufn true")
	-showInHotkeyEditor false
	UnlockNormals;

runTimeCommand -default true
 	-annotation (uiRes("m_defaultRunTimeCommands.kVertexNormalEditToolAnnot"))
	-category   ("Other items.Polygon Normals")
 	-command    ("setToolTo $gPolyNormEdit")
	-showInHotkeyEditor false
 	VertexNormalEditTool;

runTimeCommand -default true
 	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonSoftenEdgeAnnot"))
	-category   ("Other items.Polygon Normals")
 	-command    ("SoftPolyEdgeElements 1")
	-showInHotkeyEditor false
 	PolygonSoftenEdge;

runTimeCommand -default true
 	-annotation (uiRes("m_defaultRunTimeCommands.kPolygonHardenEdgeAnnot"))
	-category   ("Other items.Polygon Normals")
 	-command    ("SoftPolyEdgeElements 0")
	-showInHotkeyEditor false
 	PolygonHardenEdge;

runTimeCommand -default true
 	-annotation (uiRes("m_defaultRunTimeCommands.kSetNormalAngleAnnot"))
	-category   ("Other items.Polygon Normals")
 	-command    ("polySoftEdgeWin")
	-showInHotkeyEditor false
 	SetNormalAngle;

//
//	Subdiv Surfaces menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSubdivSurfaceAnnot"))
	-category   ("Menu items.Common.Modify.Convert;Menu items.Common.Modify.Convert")
	-command    ("performSubdivCreate 0")
	CreateSubdivSurface;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdivToNURBSAnnot"))
	-category   ("Menu items.Common.Modify.Convert")
	-command    ("performSubdToNurbs 0")
	SubdivToNURBS;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdivToNURBSOptionsAnnot"))
	-category   ("Menu items.Common.Modify.Convert")
	-command    ("performSubdToNurbs true")
	SubdivToNURBSOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSubdivSurfaceOptionsAnnot"))
	-category   ("Menu items.Common.Modify.Convert;Menu items.Common.Modify.Convert")
	-command    ("performSubdivCreate 1")
	CreateSubdivSurfaceOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTesselateSubdivSurfaceAnnot"))
	-category   ("Menu items.Common.Modify.Convert")
	-command    ("performSubdivTessellate  false")
	TesselateSubdivSurface;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTesselateSubdivSurfaceOptionsAnnot"))
	-category   ("Menu items.Common.Modify.Convert")
	-command    ("performSubdivTessellate  true")
	TesselateSubdivSurfaceOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExtractSubdivSurfaceVerticesAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("performSubdivExtract  false")
	-showInHotkeyEditor false
	ExtractSubdivSurfaceVertices;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExtractSubdivSurfaceVerticesOptionsAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("performSubdivExtract  true")
	-showInHotkeyEditor false
	ExtractSubdivSurfaceVerticesOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCollapseSubdivSurfaceHierarchyAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("performSubdivCollapse false")
	-showInHotkeyEditor false
	CollapseSubdivSurfaceHierarchy;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCollapseSubdivSurfaceHierarchyOptionsAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("performSubdivCollapse  true")
	-showInHotkeyEditor false
	CollapseSubdivSurfaceHierarchyOptions;

// legacy command - replaced by SculptGeometryTool
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSculptSubdivsToolAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("artPuttyToolScript 4")
	-showInHotkeyEditor false
	SculptSubdivsTool;

// legacy command - replaced by SculptGeometryToolOptions
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSculptSubdivsToolOptionsAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("artPuttyToolScript 3")
	-showInHotkeyEditor false
	SculptSubdivsToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMirrorSubdivSurfaceAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("performSubdivMirror false")
	-showInHotkeyEditor false
	MirrorSubdivSurface;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMirrorSubdivSurfaceOptionsAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("performSubdivMirror  true")
	-showInHotkeyEditor false
	MirrorSubdivSurfaceOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAttachSubdivSurfaceAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("performSubdivAttach false")
	-showInHotkeyEditor false
	AttachSubdivSurface;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAttachSubdivSurfaceOptionsAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("performSubdivAttach  true")
	-showInHotkeyEditor false
	AttachSubdivSurfaceOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdivSurfaceHierarchyModeAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("subdIntoHierMode")
	-showInHotkeyEditor false
	SubdivSurfaceHierarchyMode;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdivSurfacePolygonProxyModeAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("subdIntoPolyMode 1 0 0")
	-showInHotkeyEditor false
	SubdivSurfacePolygonProxyMode;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdivSurfaceMatchTopologyAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("subdMatchTopology")
	-showInHotkeyEditor false
	SubdivSurfaceMatchTopology;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdivSurfaceCleanTopologyAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("subdCleanTopology")
	-showInHotkeyEditor false
	SubdivSurfaceCleanTopology;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFullCreaseSubdivSurfaceAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("doSubdCrease 1 1")
	-showInHotkeyEditor false
	FullCreaseSubdivSurface;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPartialCreaseSubdivSurfaceAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("doSubdCrease 1 0")
	-showInHotkeyEditor false
	PartialCreaseSubdivSurface;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUncreaseSubdivSurfaceAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("doSubdCrease 0 1")
	-showInHotkeyEditor false
	UncreaseSubdivSurface;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCoarsenSelectedComponentsAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("subdivCoarserLevel; " +
	             "setSubdivDisplayLevelAndFilter `ls -sl -objectsOnly` " +
	             "\"+0\" 0")
	-showInHotkeyEditor false
	CoarsenSelectedComponents;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRefineSelectedComponentsAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("subdivCreateRegion; " +
	             "setSubdivDisplayLevelAndFilter `ls -sl -objectsOnly` " +
	             "\"+0\" 0")
	-showInHotkeyEditor false
	RefineSelectedComponents;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExpandSelectedComponentsAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("createSubdivRegion; changeSubdivRegion -action 2; " +
	             "setSubdivDisplayLevelAndFilter `ls -sl -objectsOnly` " +
	             "\"+0\" 0")
	-showInHotkeyEditor false
	ExpandSelectedComponents;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFineLevelComponentDisplayAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("setSubdivDisplayLevelAndFilter `ls -sl -objectsOnly` \"+1\" 0")
	-showInHotkeyEditor false
	FineLevelComponentDisplay;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCoarseLevelComponentDisplayAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("setSubdivDisplayLevelAndFilter `ls -sl -objectsOnly` \"-1\" 0")
	-showInHotkeyEditor false
	CoarseLevelComponentDisplay;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBaseLevelComponentDisplayAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("setSubdivDisplayLevelAndFilter `ls -sl -objectsOnly` \"0\" 0")
	-showInHotkeyEditor false
	BaseLevelComponentDisplay;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCoarserSubdivLevelAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("subdivCoarserLevel")
	-showInHotkeyEditor false
	CoarserSubdivLevel;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSubdivRegionAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("subdivCreateRegion")
	-showInHotkeyEditor false
	CreateSubdivRegion;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowAllComponentsAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("setSubdivDisplayLevelAndFilter `ls -sl -objectsOnly` \"+0\" 0")
	-showInHotkeyEditor false
	ShowAllComponents;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowAllEditedComponentsAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("setSubdivDisplayLevelAndFilter `ls -sl -objectsOnly` \"+0\" 1")
	-showInHotkeyEditor false
	ShowAllEditedComponents;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubdCutUVsAnnot"))
	-category   ("Other items.Subdiv Surfaces")
	-command    ("subdMapCut")
	-showInHotkeyEditor false
	SubdCutUVs;

}
modelingMenus(); 

// ======================================================================
// ======================================================================
//
//	Animation menu set, ie. Animate, Deform, HumanIK, Skeleton, Skin, Constrain,
//	and Character.
//
// ======================================================================
// ======================================================================
proc animationMenus() {
//
//	Animate menu.
//
// ----------------------------------------------------------------------

//	Set Key.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetKeyAnnot"))
	-category   ("Menu items.Animation.Key")
	-command    ("performSetKeyframeArgList 1 {\"0\", \"animationList\"}")
	SetKey;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetKeyOptionsAnnot"))
	-category   ("Menu items.Animation.Key")
	-command    ("performSetKeyframeArgList 1 {\"1\", \"animationList\"}")
	SetKeyOptions;

//	Set a breakdown key.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetBreakdownKeyAnnot")) 
	-category   ("Menu items.Animation.Key")
	-command    ("performSetBreakdown 0 animationList")
	SetBreakdownKey;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetBreakdownKeyOptionsAnnot"))
	-category   ("Menu items.Animation.Key")
	-command    ("performSetBreakdown 1 animationList")
	SetBreakdownKeyOptions;

//  Set Full Body IK keys
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetFullBodyIKKeysAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("performSetFullBodyIKKeys 0")
	SetFullBodyIKKeys;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetFullBodyIKKeysOptionsAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("performSetFullBodyIKKeys 1")
	SetFullBodyIKKeysOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetFullBodyIKKeysAllAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("doSetFullBodyIKKeysArgList 3 {\"1\", \"4\", \"\"};")
	SetFullBodyIKKeysAll;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetFullBodyIKKeysBodyPartAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("doSetFullBodyIKKeysArgList 3 {\"2\", \"4\", \"\"};")
	SetFullBodyIKKeysBodyPart;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetFullBodyIKKeysKeyToPinAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("doSetFullBodyIKKeysArgList 3 {\"3\", \"4\", \"\"};")
	SetFullBodyIKKeysKeyToPin;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetFullBodyIKKeysSelectedAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("doSetFullBodyIKKeysArgList 3 {\"4\", \"4\", \"\"};")
	SetFullBodyIKKeysSelected;

//  Cycle Full Body IK/FK reach keying mode
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCycleFBIKReachKeyingOptionAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("performSetFullBodyIKKeys 3")
	CycleFBIKReachKeyingOption;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFBIKReachKeyingOptionIKAnnot"))
	-category   ("Other items.Animate")
	-command    ("optionVar -intValue fbikKeyOption 1;headsUpDisplay -refresh HUDFbikKeyType;")
	-showInHotkeyEditor false
	FBIKReachKeyingOptionIK;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFBIKReachKeyingOptionFKAnnot"))
	-category   ("Other items.Animate")
	-command    ("optionVar -intValue fbikKeyOption 2;headsUpDisplay -refresh HUDFbikKeyType;")
	-showInHotkeyEditor false
	FBIKReachKeyingOptionFK;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFBIKReachKeyingOptionSimpleAnnot"))
	-category   ("Other items.Animate")
	-command    ("optionVar -intValue fbikKeyOption 3;headsUpDisplay -refresh HUDFbikKeyType;")
	-showInHotkeyEditor false
	FBIKReachKeyingOptionSimple;

//	Hold Current Keys.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHoldCurrentKeysAnnot")) 
	-category   ("Menu items.Animation.Key")
	-command    ("setKeyframe -insert animationList")
	HoldCurrentKeys;

//	Set Driven Key.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetDrivenKeyAnnot"))
	-category   ("Other items.Animate")
	-command    ("setDrivenKeyframe")
	-showInHotkeyEditor false
	SetDrivenKey;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetDrivenKeyOptionsAnnot"))
	-category   ("Menu items.Animation.Key.Set Driven Key")
	-command    ("setDrivenKeyWindow \"\" {}")
	SetDrivenKeyOptions;

//	Go to Previous Driven Key.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGoToPreviousDrivenKeyAnnot"))
	-category   ("Menu items.Animation.Key.Set Driven Key")
	-command    ("advanceToNextDrivenKey -previous \"\"")
	GoToPreviousDrivenKey;

//	Go to Next Driven Key.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGoToNextDrivenKeyAnnot"))
	-category   ("Menu items.Animation.Key.Set Driven Key")
	-command    ("advanceToNextDrivenKey -next \"\"")
	GoToNextDrivenKey;

//	Set key for translate/rotate/scale.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetKeyAnimatedAnnot"))
	-category   ("Menu items.Animation.Key")
	-command    ("setKeyframe -animated 1")
	SetKeyAnimated;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetKeyTranslateAnnot"))
	-category   ("Menu items.Animation.Key")
	-command    ("setKeyframe -at translate")
	SetKeyTranslate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetKeyRotateAnnot"))
	-category   ("Menu items.Animation.Key")
	-command    ("setKeyframe -at rotate")
	SetKeyRotate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetKeyScaleAnnot"))
	-category   ("Menu items.Animation.Key")
	-command    ("setKeyframe -at scale")
	SetKeyScale;

//	Create Clip.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateClipAnnot"))
	-category   ("Editors.Trax Editor")
	-command    ("performCreateClip 0")
	CreateClip;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateClipOptionsAnnot"))
	-category   ("Editors.Trax Editor")
	-command    ("performCreateClip 1")
	CreateClipOptions;

//      Create Shot.
//
runTimeCommand -default true
        -annotation (uiRes("m_defaultRunTimeCommands.kCreateShotAnnot"))
        -category   ("Editors.Camera Sequencer")
        -command    ("performCreateShot 0")
        CreateShot;

runTimeCommand -default true
        -annotation (uiRes("m_defaultRunTimeCommands.kCreateShotOptionsAnnot"))
        -category   ("Editors.Camera Sequencer")
        -command    ("performCreateShot 1")
        CreateShotOptions;

//	Create Constraint Clip.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateConstraintClipAnnot"))
	-category   ("Editors.Trax Editor")
	-command    ("performCreateConstraintClip 0")
	CreateConstraintClip;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateConstraintClipOptionsAnnot"))
	-category   ("Editors.Trax Editor")
	-command    ("performCreateConstraintClip 1")
	CreateConstraintClipOptions;

//	Create Expression Clip.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateExpressionClipAnnot"))
	-category   ("Editors.Trax Editor")
	-command    ("performCreateExpClip 0")
	CreateExpressionClip;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateExpressionClipOptionsAnnot"))
	-category   ("Editors.Trax Editor")
	-command    ("performCreateExpClip 1")
	CreateExpressionClipOptions;

//	Create Pose
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePoseAnnot")) 
	-category   ("Editors.Trax Editor")
	-command    ("performCreatePose 0")
	CreatePose;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePoseOptionsAnnot"))
	-category   ("Editors.Trax Editor")
	-command    ("performCreatePose 1")
	CreatePoseOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddGeomCacheAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("performCreateGeometryCache 0 \"add\"")
	geometryCache;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAttachGeomCacheAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("doImportCacheArgList(0,{})")
	attachGeometryCache;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReplaceGeomCacheAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("performCreateGeometryCache 0 \"replace\"")
	geometryReplaceCache;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMergeGeomCacheAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("performCreateGeometryCache 0 \"merge\"")
	geometryMergeCache;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExportGeomCacheAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("performCreateGeometryCache 0 \"export\"")
	geometryExportCache;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteGeomCacheAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("performDeleteGeometryCache 0")
	deleteGeometryCache;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddGeomCacheOptAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("performCreateGeometryCache 1 \"add\"")
	geometryCacheOpt;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReplaceGeomCacheOptAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("performCreateGeometryCache 1 \"replace\"")
	geometryReplaceCacheOpt;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMergeGeomCacheOptAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("performCreateGeometryCache 1 \"merge\"")
	geometryMergeCacheOpt;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExportGeomCacheOptAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("performCreateGeometryCache 1 \"export\"")
	geometryExportCacheOpt;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteGeomCacheOptAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("performDeleteGeometryCache 1")
	geometryDeleteCacheOpt;

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kAppendGeomCacheAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("performAppendGeometryCache 0")
	geometryAppendCache;

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kAppendGeomCacheOptAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("performAppendGeometryCache 1")
	geometryAppendCacheOpt;

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kReplaceGeomCacheFramesAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("performReplaceGeometryCacheFrames 0")
	geometryReplaceCacheFrames;

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kReplaceGeomCacheFramesOptAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("performReplaceGeometryCacheFrames 1")
	geometryReplaceCacheFramesOpt;

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kDeleteGeomCacheFramesAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("performDeleteGeometryCacheFrames 0")
	geometryDeleteCacheFrames;

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kDeleteHistoryAheadCacheAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("bakePartialHistory -preCache")
    deleteHistoryAheadOfGeomCache;

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kDeleteGeomCacheFramesOptAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("performDeleteGeometryCacheFrames 1")
	geometryDeleteCacheFramesOpt;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintGeomCacheToolAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("artAttrCacheToolScript 4 ")
	PaintGeomCacheTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintGeomCacheOptAnnot"))
	-category	("Menu items.Cache.Geometry Cache")
	-command	("artAttrCacheToolScript 3 ")
	PaintGeomCacheToolOptions;

// Export Animation
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExportAnimAnnot"))
	-category	("Menu items.Common.File.ATOM")
	-command	("performExportAnim 1")
	ExportAnimOptions;

// Import Animation
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kImportAnimAnnot"))
	-category	("Menu items.Common.File.ATOM")
	-command	("performImportAnim 1")
	ImportAnimOptions;

// Create ATOM template
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateATOMTemplate"))
	-category	("Menu items.Common.File.ATOM")
	-command	("createATOMTemplate 1")
	ATOMTemplateOptions;
//	Create Ghost
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateGhostAnnot"))
	-category   ("Menu items.Animation.Visualize")
	-command    ("performGhost 0")
	CreateGhost;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateGhostOptionsAnnot"))
	-category   ("Menu items.Animation.Visualize")
	-command    ("performGhost 1")
	CreateGhostOptions;

//	Create Ghost
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDoUnghostAnnot"))
	-category   ("Menu items.Animation.Visualize")
	-command    ("performUnghost 0")
	DoUnghost;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDoUnghostOptionsAnnot"))
	-category   ("Menu items.Animation.Visualize")
	-command    ("performUnghost 1")
	DoUnghostOptions;

//	Create Motion Trail
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateMotionTrailAnnot"))
	-category   ("Menu items.Animation.Visualize")
	-command    ("performMotionTrail 0")
	CreateMotionTrail;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateMotionTrailOptionsAnnot")) 
	-category   ("Menu items.Animation.Visualize")
	-command    ("performMotionTrail 1")
	CreateMotionTrailOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAnimationSnapshotAnnot"))
	-category   ("Menu items.Animation.Visualize")
	-command    ("performSnapshot 0")
	AnimationSnapshot;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAnimationSnapshotOptionsAnnot"))
	-category   ("Menu items.Animation.Visualize")
	-command    ("performSnapshot 1")
	AnimationSnapshotOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAnimationSweepAnnot"))
	-category   ("Menu items.Animation.Visualize")
	-command    ("performAnimSweep 0")
	AnimationSweep;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAnimationSweepOptionsAnnot"))
	-category   ("Menu items.Animation.Visualize")
	-command    ("performAnimSweep 1")
	AnimationSweepOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAnimationTurntableAnnot"))
	-category   ("Menu items.Animation.Visualize")
	-command    ("performAnimTurntable 0")
	AnimationTurntable;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAnimationTurntableOptionsAnnot"))
	-category   ("Menu items.Animation.Visualize")
	-command    ("performAnimTurntable 1")
	AnimationTurntableOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAnimationSetTimecodeAnnot"))
	-category   ("Menu items.Animation.Key")
	-command    ("performSetTimecode")
	SetTimecode;

//  IK/FK switching
//
runTimeCommand -default true
    -annotation (uiRes("m_defaultRunTimeCommands.kToggleFkIkAnnot"))
    -category ("Menu items.Animation.Key.IK/FK Keys")
    -command "updateIKFKState"
    ToggleFkIk;

runTimeCommand -default true
    -annotation (uiRes("m_defaultRunTimeCommands.kSetIKFKKeyframeAnnot"))
    -category ("Menu items.Animation.Key.IK/FK Keys")
    -command "ikFK(0, `ls -sl`)"
    SetIKFKKeyframe;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConnectToIKFKAnnot")) 
    -category ("Menu items.Animation.Key.IK/FK Keys")
    -command "connectToIKFK()"
    ConnectNodeToIKFK;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMoveIKtoFKAnnot")) 
    -category ("Menu items.Animation.Key.IK/FK Keys")
    -command "moveIKtoFK()"
    MoveIKtoFK;

//	Set Key Path.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetKeyPathAnnot"))
	-category   ("Menu items.Animation.Constrain.Motion Paths;Menu items.Rigging.Constrain.Motion Paths")
	-command    ("setKeyPath")
	SetKeyPath;

//	Animate object(s) along a path, followed by the path curve.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAttachToPathAnnot"))
	-category   ("Menu items.Animation.Constrain.Motion Paths;Menu items.Rigging.Constrain.Motion Paths")
	-command    ("performPathAnimation 0")
	AttachToPath;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAttachToPathOptionsAnnot"))
	-category   ("Menu items.Animation.Constrain.Motion Paths;Menu items.Rigging.Constrain.Motion Paths")
	-command    ("performPathAnimation 1")
	AttachToPathOptions;

//	Set object(s) to flow along path
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFlowPathObjectAnnot"))
	-category   ("Menu items.Animation.Constrain.Motion Paths;Menu items.Rigging.Constrain.Motion Paths")
	-command    ("performFlow 0")
	FlowPathObject;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFlowPathObjectOptionsAnnot"))
	-category   ("Menu items.Animation.Constrain.Motion Paths;Menu items.Rigging.Constrain.Motion Paths")
	-command    ("performFlow 1")
	FlowPathObjectOptions;

//	Time Warps
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddTimeWarpAnnot"))
	-category   ("Menu items.Animation.Key.Scene Time Warp")
	-command    ("sceneTimeWarp \"add\"")
	AddTimeWarp;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectTimeWarpAnnot"))
	-category   ("Menu items.Animation.Key.Scene Time Warp")
	-command    ("sceneTimeWarp \"select\"")
	SelectTimeWarp;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteTimeWarpAnnot"))
	-category   ("Menu items.Animation.Key.Scene Time Warp")
	-command    ("sceneTimeWarp \"delete\"")
	DeleteTimeWarp;

// Animation offset

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddAnimationOffsetAnnot"))
	-category   ("Menu items.Animation.Key;Menu items.Rigging.Control")
	-command    ("performAddAnimationOffset 0")
	AddAnimationOffset;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddAnimationOffsetOptionsAnnot"))
	-category   ("Menu items.Animation.Key;Menu items.Rigging.Control")
	-command    ("performAddAnimationOffset 1")
	AddAnimationOffsetOptions;

//	Key and Tangent marking menus.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kKeyTangentMenuAnnot"))
	-category   ("Other items.Animate")
	-command    ("buildKeyframeTangentMM")
	-showInHotkeyEditor false
	KeyframeTangentMarkingMenu;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kKeyTangentMMAnnot"))
	-category   ("Other items.Animate")
	-command    ("MarkingMenuPopDown")
	-showInHotkeyEditor false
	KeyframeTangentMarkingMenuPopDown;

// key blendshape targets weight
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kKeyBlendShapeTargetWeightsAnnot")) 
	-category	("Menu items.Animation.Key")
	-command    ("performSetBlendshapeTargetWtKeys")
	KeyBlendShapeTargetsWeight;


//
//	Outliner Editor Menus.
//
// ----------------------------------------------------------------------


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerEditorExpandAllItemsAnnot"))
	-category 	("Editors.Outliner")
	-command 	("{\n" +
				 "	string $panel = `getCurrentOutlinerPanel`;\n" +  
				 "	if (\"\" != $panel) {\n" +
				 "		outlinerEditor -e -eai 1 $panel;\n" +
				 "	}\n" + 
				 "}\n")
	-hotkeyCtx 	("outlinerPanel")
	OutlinerExpandAllItems;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerEditorRetractAllItemsAnnot"))
	-category 	("Editors.Outliner")
	-command 	("{\n" +
				 "	string $panel = `getCurrentOutlinerPanel`;\n" +  
				 "	if (\"\" != $panel) {\n" +
				 "		outlinerEditor -e -eai 0 $panel;\n" +
				 "	}\n" +
				 "}\n")
	-hotkeyCtx 	("outlinerPanel")
	OutlinerCollapseAllItems;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerEditorExpandAllSelectedItemsAnnot"))
	-category 	("Editors.Outliner")
	-command 	("{\n" +
				 "	string $panel = `getCurrentOutlinerPanel`;\n" +  
				 "	if (\"\" != $panel) {\n" +
				 "		outlinerEditor -e -eas 1 $panel;\n" +
				 "	}\n" + 
				 "}\n")
	-hotkeyCtx 	("outlinerPanel")
	OutlinerExpandAllSelectedItems;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerEditorRetractAllSelectedItemsAnnot"))
	-category 	("Editors.Outliner")
	-command 	("{\n" +
				 "	string $panel = `getCurrentOutlinerPanel`;\n" +  
				 "	if (\"\" != $panel) {\n" +
				 "		outlinerEditor -e -eas 0 $panel;\n" +
				 "	}\n" +
				 "}\n")
	-hotkeyCtx 	("outlinerPanel")
	OutlinerCollapseAllSelectedItems;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerEditorDoHideAnnot"))
	-category 	("Editors.Outliner")
	-command 	("doHideInOutliner 1")
	-hotkeyCtx 	("outlinerPanel")
	OutlinerDoHide;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerEditorUnhideAnnot"))
	-category 	("Editors.Outliner")
	-command 	("doHideInOutliner 0")
	-hotkeyCtx 	("outlinerPanel")
	OutlinerUnhide;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerEditorDAGObjectsOnlyAnnot"))
	-category 	("Editors.Outliner")
	-command 	("{\n" +
				 "	string $panel = `getCurrentOutlinerPanel`;\n" +  
				 "	if (\"\" != $panel) {\n" +
				 "		int $bool = `outlinerEditor -q -showDagOnly $panel`;\n" + 
				 "		outlinerEditor -e -showDagOnly (!$bool) $panel;\n" +
				 "	}\n" +
				 "}\n")
	-hotkeyCtx 	("outlinerPanel")
	OutlinerToggleDAGOnly;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerEditorShapesAnnot"))
	-category 	("Editors.Outliner")
	-command 	("{\n" +
				 "	string $panel = `getCurrentOutlinerPanel`;\n" +  
				 "	if (\"\" != $panel) {\n" +
				 "		int $bool = `outlinerEditor -q -showShapes $panel`;\n" + 
				 "		outlinerEditor -e -showShapes (!$bool) $panel;\n" +
				 "	}\n" + 
				 "}\n")
	-hotkeyCtx 	("outlinerPanel")
	OutlinerToggleShapes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerEditorReferenceNodesAnnot"))
	-category 	("Editors.Outliner")
	-command 	("{\n" +
				 "	string $panel = `getCurrentOutlinerPanel`;\n" +  
				 "	if (\"\" != $panel) {\n" +
				 "		int $bool = `outlinerEditor -q -showReferenceNodes $panel`;\n" + 
				 "		outlinerEditor -e -showReferenceNodes (!$bool) $panel;\n" +
				 "	}\n" + 
				 "}\n")
	-hotkeyCtx 	("outlinerPanel")
	OutlinerToggleReferenceNodes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerEditorReferenceMembersAnnot"))
	-category 	("Editors.Outliner")
	-command 	("{\n" +
				 "	string $panel = `getCurrentOutlinerPanel`;\n" +  
				 "	if (\"\" != $panel) {\n" +
				 "		int $bool = `outlinerEditor -q -showReferenceMembers $panel`;\n" + 
				 "		outlinerEditor -e -showReferenceMembers (!$bool) $panel;\n" +
				 "	}\n" + 
				 "}\n")
	-hotkeyCtx 	("outlinerPanel")
	OutlinerToggleReferenceMembers;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerEditorAttributesAnnot"))
	-category 	("Editors.Outliner")
	-command 	("{\n" +
				 "	string $panel = `getCurrentOutlinerPanel`;\n" +  
				 "	if (\"\" != $panel) {\n" +
				 "		int $bool = `outlinerEditor -q -showAttributes $panel`;\n" + 
				 "		outlinerEditor -e -showAttributes (!$bool) $panel;\n" +
				 "	}\n" + 
				 "}\n")
	-hotkeyCtx 	("outlinerPanel")
	OutlinerToggleAttributes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerEditorSetMembersAnnot"))
	-category 	("Editors.Outliner")
	-command 	("{\n" +
				 "	string $panel = `getCurrentOutlinerPanel`;\n" +  
				 "	if (\"\" != $panel) {\n" +
				 "		int $bool = `outlinerEditor -q -showSetMembers $panel`;\n" + 
				 "		outlinerEditor -e -showSetMembers (!$bool) $panel;\n" +
				 "	}\n" +
				 "}\n")
	-hotkeyCtx 	("outlinerPanel")
	OutlinerToggleSetMembers;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerEditorConnectedAnnot"))
	-category 	("Editors.Outliner")
	-command 	("{\n" +
				 "	string $panel = `getCurrentOutlinerPanel`;\n" +  
				 "	if (\"\" != $panel) {\n" +
				 "		int $bool = `outlinerEditor -q -showConnected $panel`;\n" + 
				 "		outlinerEditor -e -showConnected (!$bool) $panel;\n" +
				 "	}\n" +
				 "}\n")
	-hotkeyCtx 	("outlinerPanel")
	OutlinerToggleConnected;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerEditorNamespaceAnnot"))
	-category 	("Editors.Outliner")
	-command 	("{\n" +
				 "	string $panel = `getCurrentOutlinerPanel`;\n" +  
				 "	if (\"\" != $panel) {\n" +
				 "		int $bool = `outlinerEditor -q -showNamespace $panel`;\n" + 
				 "		outlinerEditor -e -showNamespace (!$bool) $panel;\n" +
				 "	}\n" +
				 "}\n")
	-hotkeyCtx 	("outlinerPanel")
	OutlinerToggleNamespace;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerEditorIgnoreHiddenAnnot"))
	-category 	("Editors.Outliner")
	-command 	("{\n" +
				 "	string $panel = `getCurrentOutlinerPanel`;\n" +  
				 "	if (\"\" != $panel) {\n" +
				 "		int $bool = `outlinerEditor -q -ignoreHiddenAttribute $panel`;\n" + 
				 "		outlinerEditor -e -ignoreHiddenAttribute (!$bool) $panel;\n" +
				 "	}\n" +
				 "}\n")
	-hotkeyCtx 	("outlinerPanel")
	OutlinerToggleIgnoreHidden;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerEditorIgnoreUseColorAnnot"))
	-category 	("Editors.Outliner")
	-command 	("{\n" +
				 "	string $panel = `getCurrentOutlinerPanel`;\n" +  
				 "	if (\"\" != $panel) {\n" +
				 "		int $bool = `outlinerEditor -q -ignoreOutlinerColor $panel`;\n" + 
				 "		outlinerEditor -e -ignoreOutlinerColor (!$bool) $panel;\n" +
				 "	}\n" +
				 "}\n")
	-hotkeyCtx 	("outlinerPanel")
	OutlinerToggleIgnoreUseColor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerEditorRevealSelectedAnnot"))
	-category 	("Editors.Outliner")
	-command 	("{\n" +
				 "	string $panel = `getCurrentOutlinerPanel`;\n" +  
				 "	if (\"\" != $panel) {\n" +
				 "		outlinerEditor -e -sc 1 $panel;\n" + 
				 "	}\n" +
				 "}\n")
	-hotkeyCtx 	("outlinerPanel")
	OutlinerRevealSelected;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutlinerEditorRenameSelectedItemAnnot"))
	-category 	("Editors.Outliner")
	-command 	("{\n" +
				 "	string $panel = `getCurrentOutlinerPanel`;\n" +  
				 "	if (\"\" != $panel) {\n" +
				 "		outlinerEditor -e -rsi $panel;\n" + 
				 "	}\n" +
				 "}\n")
	-hotkeyCtx 	("outlinerPanel")
	OutlinerRenameSelectedItem;

//
//	Graph Editor Menus.
//
// ----------------------------------------------------------------------

int $performBase = 3;
string $graphEd = "graphEditor1GraphEd";
string $selectionConnection = "graphEditor1GraphEd";
string $options = "useSmoothness bufferCurve";

//           Graph Editor Edit Menu:
//

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGraphEdCutAnnot"))
	-category   ("Editors.Graph Editor")
	-command    ("performCutKeyArgList 1 {\"" + $performBase + "\", \"" + $selectionConnection + "\", \"1\"}")
	-hotkeyCtx  ("graphEditor")
	GraphCut;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGraphEdCutOptionsAnnot"))
	-category   ("Editors.Graph Editor")
	-command    ("performCutKeyArgList 1 {\"" + ($performBase + 1) + "\", \"" + $selectionConnection + "\", \"1\"}")
	-hotkeyCtx  ("graphEditor")
	GraphCutOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGraphEdCopyAnnot"))
	-category   ("Editors.Graph Editor")
	-command    ("performCopyKeyArgList 1 {\"" + $performBase + "\", \"" + $selectionConnection + "\", \"1\"}")
	-hotkeyCtx  ("graphEditor")
	GraphCopy;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGraphEdCopyOptionsAnnot"))
	-category   ("Editors.Graph Editor")
	-command    ("performCopyKeyArgList 1 {\"" + ($performBase + 1) + "\", \"" + $selectionConnection + "\", \"1\"}")
	-hotkeyCtx  ("graphEditor")
	GraphCopyOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGraphEdPasteAnnot"))
	-category   ("Editors.Graph Editor")
	-command    ("performPasteKeyArgList 1 {\"" + $performBase + "\", \"" + $selectionConnection + "\", \"1\"}")
	-hotkeyCtx  ("graphEditor")
	GraphPaste;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGraphEdPasteOptionsAnnot"))
	-category   ("Editors.Graph Editor")
	-command    ("performPasteKeyArgList 1 {\"" + ($performBase + 1) + "\", \"" + $selectionConnection + "\", \"1\"}")
	-hotkeyCtx  ("graphEditor")
	GraphPasteOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGraphEdDeleteAnnot"))
	-category   ("Editors.Graph Editor")
	-command    ("performClearKeyArgList 1 {\"" + $performBase + "\", \"" + $selectionConnection + "\", \"0\", \"1\"}")
	-hotkeyCtx  ("graphEditor")
	GraphDelete;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGraphEdDeleteOptionsAnnot"))
	-category   ("Editors.Graph Editor")
	-command    ("performClearKeyArgList 1 {\"" + ($performBase + 1) + "\", \"" + $selectionConnection + "\", \"0\", \"1\"}")
	-hotkeyCtx  ("graphEditor")
	GraphDeleteOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGraphSnapAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("performSnapKeyArgList 1 { \"" + $performBase + "\", \"" + $selectionConnection + "\", \"1\" }" )
	-hotkeyCtx  ("graphEditor")
	GraphSnap;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGraphEdSnapOptionsAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("performSnapKeyArgList 1 { \"" + ($performBase + 1) + "\", \"" + $selectionConnection + "\", \"1\" }")
	-hotkeyCtx  ("graphEditor")
	GraphSnapOptions;

//		Graph Editor View Menu
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleBufferAnnot"))
	-category   ("Editors.Graph Editor")
	-command    ("animCurveEditor -edit -showBufferCurves tgl " + $graphEd + ";")
	-hotkeyCtx  ("graphEditor")
	ToggleShowBufferCurves;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleAutoFrameAnnot"))
	-category   ("Editors.Graph Editor")
	-command    ( "optionVar -intValue graphEditorAutoFit (!`optionVar -query graphEditorAutoFit`); animCurveEditor -edit -autoFit tgl " + $graphEd + ";" )
	-hotkeyCtx  ("graphEditor")
	ToggleAutoFrame;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleShowResultsAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("animCurveEditor -edit -showResults tgl " + $graphEd + ";")
	-hotkeyCtx  ("graphEditor")
	ToggleShowResults;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowResultsOptionsAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("performShowResults 1 " + $graphEd)
	-hotkeyCtx  ("graphEditor")
	ShowResultsOptions;


//		Graph Editor Keys Menu
//

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBreakTangentsAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-lock off\" " + $selectionConnection + " noOptions")
	-hotkeyCtx  ("graphEditor")
	BreakTangents;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUnifyTangentsAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-lock on\" " + $selectionConnection + " noOptions")
	-hotkeyCtx  ("graphEditor")
	UnifyTangents;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLockTangentWeightAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-weightLock on\" " + $selectionConnection + " noOptions")
	-hotkeyCtx  ("graphEditor")
	LockTangentWeight;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFreeTangentWeightAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-weightLock off\" " + $selectionConnection + " noOptions")
	-hotkeyCtx  ("graphEditor")
	FreeTangentWeight;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConvertToKeyAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyEdit \"-breakdown false\" " + $selectionConnection + " noOptions")
	-hotkeyCtx  ("graphEditor")
	ConvertToKey;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConvertToBreakdownAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyEdit \"-breakdown true\" " + $selectionConnection + " noOptions")
	-hotkeyCtx  ("graphEditor")
	ConvertToBreakdown;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddInbetweenAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyEdit \"\" " + $graphEd + " \"bufferCurve addInbetween\"")
	-hotkeyCtx  ("graphEditor")
	AddInbetween;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveInbetweenAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyEdit \"\" " + $graphEd + " \"bufferCurve removeInbetween\"")
	-hotkeyCtx  ("graphEditor")
	RemoveInbetween;


// 		Graph Editor Curves Menu:
//

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPreInfCycleAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doSetInfinity \"-pri cycle\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	PreInfinityCycle;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPreInfCycleOffsetAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doSetInfinity \"-pri cycleRelative\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	PreInfinityCycleOffset;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPreInfOscillateAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doSetInfinity \"-pri oscillate\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	PreInfinityOscillate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPreInfLinearAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doSetInfinity \"-pri linear\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	PreInfinityLinear;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPreInfConstantAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doSetInfinity \"-pri constant\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	PreInfinityConstant;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPostInfCycleAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doSetInfinity \"-poi cycle\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	PostInfinityCycle;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPostInfCycleOffsetAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doSetInfinity \"-poi cycleRelative\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	PostInfinityCycleOffset;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPostInfOscillateAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doSetInfinity \"-poi oscillate\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	PostInfinityOscillate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPostInfLinearAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doSetInfinity \"-poi linear\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	PostInfinityLinear;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPostInfConstantAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doSetInfinity \"-poi constant\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	PostInfinityConstant;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCurveSmoothCoarseAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("animCurveEditor -edit -smoothness coarse " + $graphEd)
	-hotkeyCtx  ("graphEditor")
	CurveSmoothnessCoarse;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCurveSmoothRoughAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("animCurveEditor -edit -smoothness rough " + $graphEd)
	-hotkeyCtx  ("graphEditor")
	CurveSmoothnessRough;

runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kCyrveSmoothMedAnnot"))
		-category   ("Editors.Graph Editor")
		-command ("animCurveEditor -edit -smoothness medium " + $graphEd)
		-hotkeyCtx  ("graphEditor")
		CurveSmoothnessMedium;

runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kCurveSmoothFineAnnot"))
		-category   ("Editors.Graph Editor")
		-command ("animCurveEditor -edit -smoothness fine " + $graphEd)
		-hotkeyCtx  ("graphEditor")
		CurveSmoothnessFine;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBakeChannelAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("performBakeResults " + $performBase + " " + $selectionConnection)
	-hotkeyCtx  ("graphEditor")
	BakeChannel;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBakeChannelOptionsAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("performBakeResults " + ($performBase + 1) + " " + $selectionConnection)
	-hotkeyCtx  ("graphEditor")
	BakeChannelOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSimplifyCurveAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("performSimplify " + $performBase + " " + $selectionConnection)
	-hotkeyCtx  ("graphEditor")
	SimplifyCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSimplifyCurveOptionsAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("performSimplify " + ($performBase + 1) + " " + $selectionConnection)
	-hotkeyCtx  ("graphEditor")
	SimplifyCurveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kResampleCurveAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("performResample " + $performBase + " " + $selectionConnection)
	-hotkeyCtx  ("graphEditor")
	ResampleCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kResampleCurveOptionsAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("performResample " + ($performBase + 1) + " " + $selectionConnection)
	-hotkeyCtx  ("graphEditor")
	ResampleCurveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBufferCurveSnapAnnot"))
	-category   ("Editors.Graph Editor")
	-command "bufferCurve -animation \"keys\" -overwrite true"
	-hotkeyCtx  ("graphEditor")
	BufferCurveSnapshot;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSwapBufferAnnot"))
	-category   ("Editors.Graph Editor")
	-command "bufferCurve -animation \"keys\" -swap"
	-hotkeyCtx  ("graphEditor")
	SwapBufferCurve;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNonWeightTangentsAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-edit -weightedTangents false\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	NonWeightedTangents;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWeightedTangentsAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-edit -weightedTangents true\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	WeightedTangents;

//		Graph Editor Tangents Menu:
//

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTangentsSplineAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -itt spline -ott spline\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	TangentsSpline;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTangentsLinearAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -itt linear -ott linear\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	TangentsLinear;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTangentsClampedAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -itt clamped -ott clamped\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	TangentsClamped;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTangentsSteppedAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -ott step\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	TangentsStepped;
runTimeCommand -default true

	-annotation (uiRes("m_defaultRunTimeCommands.kTangentsFlatAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -itt flat -ott flat\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	TangentsFlat;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTangentsFixedAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -itt fixed -ott fixed\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	TangentsFixed;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTangentsPlateauAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -itt plateau -ott plateau\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	TangentsPlateau;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTangentsAutoAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -itt auto -ott auto\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	TangentsAuto;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInTangentSplineAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -itt spline\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	InTangentSpline;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInTangentLinearAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -itt linear\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	InTangentLinear;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInTangentClampedAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -itt clamped\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	InTangentClamped;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInTangentFlatAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -itt flat\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	InTangentFlat;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInTangentFixedAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -itt fixed\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	InTangentFixed;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInTangentPlateauAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -itt plateau\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	InTangentPlateau;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInTangentAutoAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -itt auto\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	InTangentAuto;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutTangentSplineAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -ott spline\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	OutTangentSpline;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutTangentLinearAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -ott linear\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	OutTangentLinear;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutTangentClampedAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -ott clamped\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	OutTangentClamped;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutTangentFlatAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -ott flat\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	OutTangentFlat;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutTangentFixedAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -ott fixed\" " + $selectionConnection + " " + "\"" + $options + "\"")
	OutTangentFixed;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutTangentPlateauAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -ott plateau\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	OutTangentPlateau;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOutTangentAutoAnnot"))
	-category   ("Editors.Graph Editor")
	-command ("doKeyTangent \"-e -ott auto\" " + $selectionConnection + " " + "\"" + $options + "\"")
	-hotkeyCtx  ("graphEditor")
	OutTangentAuto;

//
//	Deform menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEditMembershipAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("setToolTo setEditContext")
	EditMembershipTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPruneClusterAnnot"))
	-category   ("Menu items.Modeling.Deform.Prune Membership;Menu items.Rigging.Deform.Prune Membership")
	-command    ("cluster -e -pr")
	PruneCluster;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPruneLatticeAnnot"))
	-category   ("Menu items.Modeling.Deform.Prune Membership;Menu items.Rigging.Deform.Prune Membership")
	-command    ("lattice -e -pr")
	PruneLattice;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPruneSculptAnnot"))
	-category   ("Menu items.Modeling.Deform.Prune Membership;Menu items.Rigging.Deform.Prune Membership")
	-command    ("sculpt -e -pr")
	PruneSculpt;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPruneWireAnnot"))
	-category   ("Menu items.Modeling.Deform.Prune Membership;Menu items.Rigging.Deform.Prune Membership")
	-command    ("wire -e -pr")
	PruneWire;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBlendShapeAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Animation.Key;Menu items.Rigging.Deform")
	-command    ("performBlendShape 0")
	CreateBlendShape;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBlendShapeOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Animation.Key;Menu items.Rigging.Deform")
	-command    ("performBlendShape 1")
	CreateBlendShapeOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddBlendShapeAnnot"))
	-category   ("Menu items.Modeling.Deform.Blend Shape;Menu items.Animation.Key.Edit Blend Shape;Menu items.Rigging.Deform.Blend Shape")
	-command    ("performBlendShapeAdd 0")
	AddBlendShape;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddBlendShapeOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform.Blend Shape;Menu items.Animation.Key.Edit Blend Shape;Menu items.Rigging.Deform.Blend Shape")
	-command    ("performBlendShapeAdd 1")
	AddBlendShapeOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveBlendShapeAnnot"))
	-category   ("Menu items.Modeling.Deform.Blend Shape;Menu items.Animation.Key.Edit Blend Shape;Menu items.Rigging.Deform.Blend Shape")
	-command    ("performBlendShapeRemove 0")
	RemoveBlendShape;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveBlendShapeOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform.Blend Shape;Menu items.Animation.Key.Edit Blend Shape;Menu items.Rigging.Deform.Blend Shape")
	-command    ("performBlendShapeRemove 1")
	RemoveBlendShapeOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSwapBlendShapeAnnot"))
	-category   ("Menu items.Modeling.Deform.Blend Shape;Menu items.Animation.Key.Edit Blend Shape;Menu items.Rigging.Deform.Blend Shape")
	-command    ("performBlendShapeSwap 0")
	SwapBlendShape;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSwapBlendShapeOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform.Blend Shape;Menu items.Animation.Key.Edit Blend Shape;Menu items.Rigging.Deform.Blend Shape")
	-command    ("performBlendShapeSwap 1")
	SwapBlendShapeOptions;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLatticeAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Animation.Key;Menu items.Rigging.Deform")
	-command    ("performLattice false")
	CreateLattice;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLatticeOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Animation.Key;Menu items.Rigging.Deform")
	-command    ("performLattice true")
	CreateLatticeOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kResetLatticeAnnot"))
	-category   ("Menu items.Modeling.Deform.Lattice;Menu items.Animation.Key.Edit Lattice;Menu items.Rigging.Deform.Lattice")
	-command    ("lattice -edit -latticeReset")
	ResetLattice;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveLatticeTweaksAnnot"))
	-category   ("Menu items.Modeling.Deform.Lattice;Menu items.Animation.Key.Edit Lattice;Menu items.Rigging.Deform.Lattice")
	-command    ("lattice -edit -removeTweaks")
	RemoveLatticeTweaks;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kClusterAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("performCluster false")
	CreateCluster;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kClusterOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("performCluster true")
	CreateClusterOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBendAnnot"))
	-category   ("Menu items.Modeling.Deform.Nonlinear;Menu items.Rigging.Deform.Nonlinear")
	-command    ("performBend 0")
	Bend;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBendOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform.Nonlinear;Menu items.Rigging.Deform.Nonlinear")
	-command    ("performBend 1")
	BendOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeltaMushAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("performDeltaMush 0")
	DeltaMush;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeltaMushOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("performDeltaMush 1")
	DeltaMushOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFlareAnnot"))
	-category   ("Menu items.Modeling.Deform.Nonlinear;Menu items.Rigging.Deform.Nonlinear")
	-command    ("performFlare 0")
	Flare;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFlareOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform.Nonlinear;Menu items.Rigging.Deform.Nonlinear")
	-command    ("performFlare 1")
	FlareOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSineAnnot"))
	-category   ("Menu items.Modeling.Deform.Nonlinear;Menu items.Rigging.Deform.Nonlinear")
	-command    ("performSine 0")
	Sine;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSineOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform.Nonlinear;Menu items.Rigging.Deform.Nonlinear")
	-command    ("performSine 1")
	SineOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSquashAnnot"))
	-category   ("Menu items.Modeling.Deform.Nonlinear;Menu items.Rigging.Deform.Nonlinear")
	-command    ("performSquash 0")
	Squash;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSquashOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform.Nonlinear;Menu items.Rigging.Deform.Nonlinear")
	-command    ("performSquash 1")
	SquashOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTwistAnnot"))
	-category   ("Menu items.Modeling.Deform.Nonlinear;Menu items.Rigging.Deform.Nonlinear")
	-command    ("performTwist 0")
	Twist;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTwistOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform.Nonlinear;Menu items.Rigging.Deform.Nonlinear")
	-command    ("performTwist 1")
	TwistOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWaveAnnot"))
	-category   ("Menu items.Modeling.Deform.Nonlinear;Menu items.Rigging.Deform.Nonlinear")
	-command    ("performWave 0")
	Wave;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWaveOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform.Nonlinear;Menu items.Rigging.Deform.Nonlinear")
	-command    ("performWave 1")
	WaveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSculptAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("performSculpt false")
	CreateSculptDeformer;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSculptOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("performSculpt true")
	CreateSculptDeformerOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTextureDeformerAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("performTextureDeformer 0")
	CreateTextureDeformer;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTextureDeformerOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("performTextureDeformer 1")
	CreateTextureDeformerOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSoftModAnnot"))
	-category   ("Other items.Deform")
	-command    ("setToolTo ShowManips; performSoftMod 0 0 0 {0.0, 0.0, 0.0}")
	-showInHotkeyEditor false
	SoftModDeformer;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSoftModOptionsAnnot"))
	-category   ("Other items.Deform")
	-command    ("performSoftMod 1 0 0 {0.0, 0.0, 0.0}")
	-showInHotkeyEditor false
	SoftModDeformerOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kJiggleAnnot"))
	-category   ("Menu items.Modeling.Deform.Jiggle;Menu items.Rigging.Deform.Jiggle")
	-command    ("performJiggle false")
	CreateJiggleDeformer;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kJiggleOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform.Jiggle;Menu items.Rigging.Deform.Jiggle")
	-command    ("performJiggle true")
	CreateJiggleOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWireAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("setToolTo wireCtx")
	WireTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWireOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("setToolTo wireCtx; toolPropertyWindow")
	WireToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddWireAnnot"))
	-category   ("Menu items.Modeling.Deform.Wire;Menu items.Rigging.Deform.Wire")
	-command    ("performWireAdd 0")
	AddWire;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddWireOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform.Wire;Menu items.Rigging.Deform.Wire")
	-command    ("performWireAdd 1")
	AddWireOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveWireAnnot"))
	-category   ("Menu items.Modeling.Deform.Wire;Menu items.Rigging.Deform.Wire")
	-command    ("performWireRemove 0")
	RemoveWire;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveWireOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform.Wire;Menu items.Rigging.Deform.Wire")
	-command    ("performWireRemove 1")
	RemoveWireOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddHolderAnnot"))
	-category   ("Menu items.Modeling.Deform.Wire;Menu items.Rigging.Deform.Wire")
	-command    ("performWireAddHolder 0")
	AddHolder;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddHolderOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform.Wire;Menu items.Rigging.Deform.Wire")
	-command    ("performWireAddHolder 1")
	AddHolderOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kResetWireAnnot"))
	-category   ("Menu items.Modeling.Deform.Wire;Menu items.Rigging.Deform.Wire")
	-command    ("performWireReset 0")
	ResetWire;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kResetWireOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform.Wire;Menu items.Rigging.Deform.Wire")
	-command    ("performWireReset 1")
	ResetWireOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kParentBaseWireAnnot"))
	-category   ("Menu items.Modeling.Deform.Wire;Menu items.Rigging.Deform.Wire")
	-command    ("performWireParentBase 0")
	ParentBaseWire;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowBaseWireAnnot"))
	-category   ("Menu items.Modeling.Deform.Wire;Menu items.Rigging.Deform.Wire")
	-command    ("doWireEdit 6 0 \"\"")
	ShowBaseWire;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kParentBaseWireOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform.Wire;Menu items.Rigging.Deform.Wire")
	-command    ("performWireParentBase 1")
	ParentBaseWireOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWireDropoffLocAnnot"))
	-category   ("Menu items.Modeling.Deform.Wire;Menu items.Rigging.Deform.Wire")
	-command    ("performDropoffLocator 0")
	WireDropoffLocator;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWireDropoffLocOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform.Wire;Menu items.Rigging.Deform.Wire")
	-command    ("performDropoffLocator 1")
	WireDropoffLocatorOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWrinkleAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("setToolTo wrinkleCtx")
	WrinkleTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWrinkleOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("setToolTo wrinkleCtx; toolPropertyWindow")
	WrinkleToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWrapAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("performCreateWrap false")
	CreateWrap;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWrapOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("performCreateWrap true")
	CreateWrapOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddWrapAnnot"))
	-category   ("Menu items.Modeling.Deform.Wrap;Menu items.Rigging.Deform.Wrap")
	-command    ("performWrap 2")
	AddWrapInfluence;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveWrapAnnot"))
	-category   ("Menu items.Modeling.Deform.Wrap;Menu items.Rigging.Deform.Wrap")
	-command    ("performWrap 3")
	RemoveWrapInfluence;
    
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShrinkWrapAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("performCreateShrinkWrap false")
	CreateShrinkWrap;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShrinkWrapOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("performCreateShrinkWrap true")
	CreateShrinkWrapOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetShrinkwrapTargetAnnot"))
	-category   ("Menu items.Modeling.Deform.ShrinkWrap;Menu items.Rigging.Deform.ShrinkWrap")
	-command    ("doShrinkWrapArgList \"1\" {\"2\"}")
	SetShrinkWrapTarget;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveShrinkwrapTarget"))
	-category   ("Menu items.Modeling.Deform.ShrinkWrap;Menu items.Rigging.Deform.ShrinkWrap")
	-command    ("doShrinkWrapArgList \"1\" {\"3\"}")
	RemoveShrinkWrapTarget;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetShrinkwrapInnerObject"))
	-category   ("Menu items.Modeling.Deform.ShrinkWrap;Menu items.Rigging.Deform.ShrinkWrap")
	-command    ("doShrinkWrapArgList \"1\" {\"4\"}")
	SetShrinkWrapInnerObject;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveShrinkwrapInnerObject"))
	-category   ("Menu items.Modeling.Deform.ShrinkWrap;Menu items.Rigging.Deform.ShrinkWrap")
	-command    ("doShrinkWrapArgList \"1\" {\"5\"}")
	RemoveShrinkWrapInnerObject;
    
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddShrinkwrapSurfaces"))
	-category   ("Menu items.Modeling.Deform.ShrinkWrap;Menu items.Rigging.Deform.ShrinkWrap")
	-command    ("doShrinkWrapArgList \"1\" {\"6\"}")
	AddShrinkWrapSurfaces;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveShrinkwrapSurfaces"))
	-category   ("Menu items.Modeling.Deform.ShrinkWrap;Menu items.Rigging.Deform.ShrinkWrap")
	-command    ("doShrinkWrapArgList \"1\" {\"7\"}")
	RemoveShrinkWrapSurfaces;
    

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintSetMembersAnnot"))
	-category   ("Menu items.Modeling.Deform.Paint Weight Tools;Menu items.Rigging.Deform.Paint Weight Tools")
	-command    ("artSetPaintToolScript 4")
	PaintSetMembershipTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintSetMembersOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform.Paint Weight Tools;Menu items.Rigging.Deform.Paint Weight Tools")
	-command    ("artSetPaintToolScript 3")
	PaintSetMembershipToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExportDeformerWeightsAnnot"))
	-category   ("Other items.Deform")
	-command    ("performExportDeformerWeights false")
	-showInHotkeyEditor false
	ExportDeformerWeights;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExportDeformerWeightsOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform;Menu items.Bonus Tools.Animation")
	-command    ("performExportDeformerWeights true")
	ExportDeformerWeightsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kImportDeformerWeightsAnnot"))
	-category   ("Other items.Deform")
	-command    ("performImportDeformerWeights false")
	-showInHotkeyEditor false
	ImportDeformerWeights;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kImportDeformerWeightsOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform;Menu items.Bonus Tools.Animation")
	-command    ("performImportDeformerWeights true")
	ImportDeformerWeightsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisplayIntermedAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("displayInterObjects 0")
	DisplayIntermediateObjects;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideIntermedAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("displayInterObjects 1")
	HideIntermediateObjects;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPointOnCurveAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("performPointCurveConstraint 0")
	PointOnCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPointOnCurveOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("performPointCurveConstraint(1)")
	PointOnCurveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMirrorDeformerWeightsAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("performMirrorDeformerWeights false")
	MirrorDeformerWeights;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMirrorDeformerWeightsOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform;Menu items.Rigging.Deform")
	-command    ("performMirrorDeformerWeights true")
	MirrorDeformerWeightsOptions;

//
//	HumanIK menu.
//
// ----------------------------------------------------------------------

string $loadHIKPluginCmd      = "if (!`pluginInfo -q -l \"mayaHIK\"`)              { loadPlugin \"mayaHIK\"; } ";
string $loadCharPluginCmd     = "if (!`pluginInfo -q -l \"mayaCharacterization\"`) { loadPlugin \"mayaCharacterization\"; } ";
string $loadOneClickPluginCmd = "if (!`pluginInfo -q -l \"OneClick\"`)             { loadPlugin \"OneClick\"; } ";
string $loadPlugins = $loadHIKPluginCmd + $loadCharPluginCmd + $loadOneClickPluginCmd;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCharacterControlsAnnot"))
	-category   ("Menu items.Common.Windows.Animation Editors;Menu items.Rigging.Skeleton")
	-command    ($loadPlugins+"hikCreateCharacterControlsDockableWindow")
	HIKCharacterControlsTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLiveConnectionToolAnnot"))
	-category   ("Other items.Animate HIK")
	-command    ($loadPlugins+"hikShowLiveConnectionTool")
	-showInHotkeyEditor false
	HIKLiveConnectionTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHikPinRotateAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("doPinHikEffectors 1 {\"2\",\"\", \"1\", \"1\" };")
	HIKPinRotate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHikPinTranslateAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("doPinHikEffectors 1 {\"1\",\"\", \"1\", \"1\" };")
	HIKPinTranslate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHikFullBodyModeAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("optionVar -intValue keyFullBody 1; hikSetKeyingMode();")
	HIKFullBodyMode;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHikBodyPartModeAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("optionVar -intValue keyFullBody 2; hikSetKeyingMode();")
	HIKBodyPartMode;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHikSelectedModeAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("optionVar -intValue keyFullBody 3; hikSetKeyingMode();")
	HIKSelectedMode;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHikCycleModeAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("optionVar -intValue keyFullBody (`optionVar -q keyFullBody` < 3 ? (`optionVar -q keyFullBody`+1) : 1); hikSetKeyingMode();")
	HIKCycleMode;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHikFullBodyKeyAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("hikSetModalKey \"FullBody\"")
    HIKSetFullBodyKey;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHikBodyPartKeyAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("hikSetModalKey \"BodyPart\"")
    HIKSetBodyPartKey;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHikSelectionKeyAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("hikSetModalKey \"Selection\"")
    HIKSetSelectionKey;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHikToggleReleasePinningAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("hikToggleCharacterControlsReleaseAllPinning( )")
    HIKToggleReleasePinning;


//
//	Skeleton menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kJointToolAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("setToolTo jointContext")
	JointTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kJointOptionsAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("setToolTo jointContext; toolPropertyWindow")
	JointToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInsertJointAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("setToolTo insertJointContext")
	InsertJointTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kIKHandleAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("setToolTo ikHandleContext")
	IKHandleTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kIKHandleOptionsAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("setToolTo ikHandleContext; toolPropertyWindow")
	IKHandleToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kIKSplineHandleAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("setToolTo ikSplineHandleContext")
	IKSplineHandleTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kIKSplineHandleOptionsAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("setToolTo ikSplineHandleContext; toolPropertyWindow")
	IKSplineHandleToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRerootSkeletonAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("reroot")
	RerootSkeleton;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveJointAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("doRemoveJoint")
	RemoveJoint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisconnectJointAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("doDisconnectJoint")
	DisconnectJoint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConnectJointAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("performConnectJoint 0")
	ConnectJoint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConnectJointOptionsAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("performConnectJoint 1")
	ConnectJointOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMirrorJointAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("performMirrorJoint 0")
	MirrorJoint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMirrorJointOptionsAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("performMirrorJoint 1")
	MirrorJointOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOrientJointAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("performJointOrient 0")
	OrientJoint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOrientJointOptionsAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("performJointOrient 1")
	OrientJointOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddFBIKAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("performAddFullBodyIk 0")
	CreateFBIK;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddFBIKOptionsAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("performAddFullBodyIk 1")
	CreateFBIKOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowFBIKFKSkeletonAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("displayHikFKskeleton 1")
	ShowFkSkeleton;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideFBIKFKSkeletonAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("displayHikFKskeleton 0")
	HideFkSkeleton;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleFBIKFKSkeletonAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("toggleHikFKskeleton")
	ToggleFkSkeletonVisibility;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddFloorContactAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("characterize -e -afp")
	AddFloorContactPlane;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddAuxEffectorAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("characterize -e -addAuxEffector;doAddFBIKAuxEffectorToBodyPart;")
	AddAuxEffector;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPlacePivotAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("characterize -e -placeNewPivot")
	PlaceFullBodyPivot;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kActivatePivotAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("doActivateFBIKPivot")
	ActivateFullBodyPivot;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kChangePivotPlacementAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("characterize -e -changePivotPlacement")
	ChangeFullBodyPivotPlacement;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGoToStanceAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("gotoHikStancePose")
	GoToFBIKStancePose;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddMissingEffectorsAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("performAddMissingEffectors 0")
	AddMissingFBIKEffectors;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddMissingEffectorsOptionsAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("performAddMissingEffectors 1")
	AddMissingFBIKEffectorsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleTranslatePinnedAnnot"))
	-category	("Other items.HumanIK")
	-command	("doTogglePinFBIKEffectors 1 {\"0\"};")
	ToggleFBIKEffectorsTranslatePinState;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleRotatePinnedAnnot"))
	-category	("Other items.HumanIK")
	-command	("doTogglePinFBIKEffectors 1 {\"1\"};")
	ToggleFBIKEffectorsRotatePinState;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleRotateTransPinnedAnnot"))
	-category	("Other items.HumanIK")
	-command	("doTogglePinFBIKEffectors 1 {\"2\"};")
	ToggleFBIKEffectorsPinState;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleAutoActivateBodyPartsAnnot"))
	-category   ("Other items.HumanIK")
	-command    ("characterize -e -autoActivateBodyPart (!`characterize -q -autoActivateBodyPart`); doToggleAutoActivateBodyPart")
	ToggleAutoActivateBodyPart;

runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kBrowseFBIKExamplesAnnot"))
		-category   ("Other items.HumanIK")
		-command    ("{VisorWindow;string $pnl=visorPanelName();if(size($pnl)>0) visorPanelMenuCommand( $pnl, \"selectOrCreateTabByLabel FBIK Examples\");}")
		GetFBIKExample;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleIKSolversAnnot"))
	-category   ("Other items.Skeleton")
	-command    ("ikSystem -e -sol (!`ikSystem -q -sol`)")
	-showInHotkeyEditor false
	ToggleIKSolvers;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetPreferredAngleAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("performSetPrefAngle 0")
	SetPreferredAngle;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetPreferredAngleOptionsAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("performSetPrefAngle 1")
	SetPreferredAngleOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAssumePreferredAngleAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("performAssumePrefAngle 0")
	AssumePreferredAngle;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAssumePreferredAngleOptionsAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("performAssumePrefAngle 1")
	AssumePreferredAngleOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleIKSnapeAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("ikSystem -e -sn (!`ikSystem -q -sn`)")
	ToggleIKHandleSnap;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleIKFKControlAnnot"))
	-category	("Menu items.Rigging.Skeleton")
	-command	("ikSystem -e -allowRotation (!`ikSystem -q -allowRotation`); menuItem -e -enable (!`ikSystem -q -allowRotation`) globalSnapEnableItem")
	ToggleIKAllowRotation;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnableIKHandlesAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("ikHandle -e -eh")
	EnableSelectedIKHandles;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisableIKHandlesAnnot"))
	-category   ("Menu items.Rigging.Skeleton")
	-command    ("ikHandle -e -dh")
	DisableSelectedIKHandles;

//
//	Skin menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmoothBindSkinAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performSkinCluster false")
	SmoothBindSkin;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmoothBindOptionsAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performSkinCluster true")
	SmoothBindSkinOptions;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInteractiveBindSkinAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performVolumeBind false")
	InteractiveBindSkin;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInteractiveBindSkinOptionAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performVolumeBind true")
	InteractiveBindSkinOptions;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRigidBindAnnot"))
	-category   ("Other items.Skin")
	-command    ("performBindSkin false")
	-showInHotkeyEditor false
	RigidBindSkin;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRigidBindSkinOptionsAnnot"))
	-category   ("Other items.Skin")
	-command    ("performBindSkin true")
	-showInHotkeyEditor false
	RigidBindSkinOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDetachSkinAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performDetachSkin false")
	DetachSkin;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDetachSkinOptionsAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performDetachSkin true")
	DetachSkinOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGoToBindPoseAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("evalEcho(\"gotoBindPose\")")
	GoToBindPose;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddInfluenceAnnot"))
	-category   ("Menu items.Rigging.Skin.Edit Influences")
	-command    ("performAddInfluence false")
	AddInfluence;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddInfluenceOptionsAnnot"))
	-category   ("Menu items.Rigging.Skin.Edit Influences")
	-command    ("performAddInfluence true")
	AddInfluenceOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveInfluenceAnnot"))
	-category   ("Menu items.Rigging.Skin.Edit Influences")
	-command    ("skinClusterInfluence(2,\"\")")
	RemoveInfluence;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMoveInfluenceAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("doMoveSkinInfluencesFromSelection")
	MoveInfluence;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetMaxInfluencesAnnot"))
	-category   ("Menu items.Rigging.Skin.Edit Influences")
	-command    ("performMaxInfluences true")
	SetMaxInfluences;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kResetWeightsToDefaultAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performResetToDefault")
	ResetWeightsToDefault;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMirrorSkinWeightsAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performMirrorSkinWeights false")
	MirrorSkinWeights;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMirrorSkinWeightsOptionsAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performMirrorSkinWeights true")
	MirrorSkinWeightsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCopySkinWeightsAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performCopySkinWeights false")
	CopySkinWeights;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCopySkinWeightsOptionsAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performCopySkinWeights true")
	CopySkinWeightsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmoothSkinWeightsAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performSmoothSkinWeights false")
	SmoothSkinWeights;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmoothSkinWeightsOptionsAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performSmoothSkinWeights true")
	SmoothSkinWeightsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPruneSmallWeightsAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performPruneWeights false")
	PruneSmallWeights;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPruneSmallWeightsOptionsAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performPruneWeights true")
	PruneSmallWeightsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExportSkinWeightMapsAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performExportSkinMap 0")
	ExportSkinWeightMaps;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kExportSkinWeightMapsOptionsAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performExportSkinMap 1")
	ExportSkinWeightMapsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kImportSkinWeightMapsAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("importSkinMap 1 {}")
	ImportSkinWeightMaps;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubstituteGeometryAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performSubstituteGeometry 0")
	SubstituteGeometry;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSubstituteGeometryOptionsAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("performSubstituteGeometry 1")
	SubstituteGeometryOptions;

runTimeCommand -default true
 	-annotation (uiRes("m_defaultRunTimeCommands.kArtPaintBlendShapeWeightsToolAnnot"))
 	-category   ("Menu items.Modeling.Deform.Paint Weight Tools;Menu items.Rigging.Deform.Paint Weight Tools")
 	-command    ("artAttrBlendShapeToolScript 4 ")
 	ArtPaintBlendShapeWeightsTool;

runTimeCommand -default true
 	-annotation (uiRes("m_defaultRunTimeCommands.kArtPaintBlendShapeWeightsToolOptionsAnnot"))
 	-category   ("Menu items.Modeling.Deform.Paint Weight Tools;Menu items.Rigging.Deform.Paint Weight Tools")
 	-command    ("artAttrBlendShapeToolScript 3 ")
 	ArtPaintBlendShapeWeightsToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kArtMoveSkinJointsToolAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("moveJointsToolScript 0")
	MoveSkinJointsTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kArtMoveSkinJointsToolOptionsAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("moveJointsToolScript 1")
	MoveSkinJointsToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kArtPaintSkinWeightsToolAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("artAttrSkinToolScript 4 ")
	ArtPaintSkinWeightsTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kArtPaintSkinWeightsToolOptionsAnnot"))
	-category   ("Menu items.Rigging.Skin")
	-command    ("artAttrSkinToolScript 3 ")
	ArtPaintSkinWeightsToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateFlexorWindowAnnot"))
	-category   ("Other items.Window")
	-command    ("createFlexorWin")
	-showInHotkeyEditor false
	CreateFlexorWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCopyFlexorAnnot"))
	-category   ("Other items.Skin")
	-command    ("copyFlexor")
	-showInHotkeyEditor false
	CopyFlexor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReassignBoneLatticeJointAnnot"))
	-category   ("Other items.Skin")
	-command    ("setNewBoneFlexorJoint")
	-showInHotkeyEditor false
	ReassignBoneLatticeJoint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDetachSkeletonAnnot"))
	-category   ("Other items.Skin")
	-command    ("bindSkin -enable 0")
	-showInHotkeyEditor false
	DetachSkeleton;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDetachSkeletonJointsAnnot"))
	-category   ("Other items.Skin")
	-command    ("bindSkin -enable 0 -tsb")
	-showInHotkeyEditor false
	DetachSkeletonJoints;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReattachSkeletonAnnot"))
	-category   ("Other items.Skin")
	-command    ("bindSkin -enable 1")
	-showInHotkeyEditor false
	ReattachSkeleton;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReattachSkeletonJointsAnnot"))
	-category   ("Other items.Skin")
	-command    ("bindSkin -enable 1 -tsb")
	-showInHotkeyEditor false
	ReattachSkeletonJoints;
//
//	Constrain menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPointConstraintAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performPointConstraint 0")
	PointConstraint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPointConstraintOptionsAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performPointConstraint 1")
	PointConstraintOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAimConstraintAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performAimConstraint 0")
	AimConstraint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAimConstraintOptionsAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performAimConstraint 1")
	AimConstraintOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOrientConstraintAnnot"))
	-category   ("Other items.Constrain")
	-command    ("performOrientConstraint 0")
	-showInHotkeyEditor false
	OrientConstraint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kOrientConstraintOptionsAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performOrientConstraint 1")
	OrientConstraintOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kScaleConstraintAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performScaleConstraint 0")
	ScaleConstraint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kScaleConstraintOptionsAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performScaleConstraint 1")
	ScaleConstraintOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGeometryConstraintAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performGeometryConstraint 0")
	GeometryConstraint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGeometryConstraintOptionsAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performGeometryConstraint 1")
	GeometryConstraintOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNormalConstraintAnnot"))
	-category   ("Other items.Constrain")
	-command    ("performNormalConstraint 0")
	-showInHotkeyEditor false
	NormalConstraint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNormalConstraintOptionsAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performNormalConstraint 1")
	NormalConstraintOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTangetConstraintAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performTangentConstraint 0")
	TangetConstraint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTangetConstraintOptionsAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performTangentConstraint 1")
	TangetConstraintOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPoleVectorConstraintAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performPoleVectorConstraint 0")
	PoleVectorConstraint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPoleVectorConstraintOptionsAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performPoleVectorConstraint 1")
	PoleVectorConstraintOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPointOnPolyConstraintAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performPointOnPolyConstraint 0")
	PointOnPolyConstraint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPointOnPolyConstraintOptionsAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performPointOnPolyConstraint 1")
	PointOnPolyConstraintOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kParentConstraintAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performParentConstraint 0")
	ParentConstraint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kParentConstraintOptionsAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performParentConstraint 1")
	ParentConstraintOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveConstraintTargetAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performRemoveConstraintTarget 0")
	RemoveConstraintTarget;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveConstraintTargetOptionsAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performRemoveConstraintTarget 1")
	RemoveConstraintTargetOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kModifyConstraintAxisAnnot"))
	-category   ("Other items.Constrain")
	-command    ("performModifyConstraintAxes 0")
	-showInHotkeyEditor false
	ModifyConstraintAxis;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kModifyConstraintAxisOptionsAnnot"))
	-category   ("Menu items.Animation.Constrain;Menu items.Rigging.Constrain")
	-command    ("performModifyConstraintAxes 1")
	ModifyConstraintAxisOptions;

//
//	Character menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateCharacterAnnot"))
	-category   ("Menu items.Animation.Key;Menu items.Rigging.Control")
	-command    ("performCreateCharacter 0")
	CreateCharacter;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateCharacterOptionsAnnot"))
	-category   ("Menu items.Animation.Key;Menu items.Rigging.Control")
	-command    ("performCreateCharacter 1")
	CreateCharacterOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSubCharacterAnnot"))
	-category 	("Menu items.Animation.Key;Menu items.Rigging.Control")
	-command 	("performCreateSubcharacter 0")
	CreateSubCharacter;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSubCharacterOptionsAnnot"))
	-category   ("Menu items.Animation.Key;Menu items.Rigging.Control")
	-command    ("performCreateSubcharacter 1")
	CreateSubCharacterOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCharacterMapperAnnot"))
	-category   ("Menu items.Animation.Key;Menu items.Rigging.Control")
	-command    ("optionVar -intValue MClabels 0; mapcharWindow")
	CharacterMapper;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddToCharacterSetAnnot"))
	-category 	("Menu items.Animation.Key;Menu items.Rigging.Control")
	-command 	("doEditCharacterArgList 1 { \"1\" }")
	AddToCharacterSet;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveFromCharacterSetAnnot"))
	-category 	("Menu items.Animation.Key;Menu items.Rigging.Control")
	-command 	("doEditCharacterArgList 1 { \"0\" }")
	RemoveFromCharacterSet;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMergeCharacterSetAnnot"))
	-category 	("Menu items.Animation.Key;Menu items.Rigging.Control")
	-command 	("mergeCharacters")
	MergeCharacterSet;	

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEditCharacterAttributesAnnot"))
	-category   ("Menu items.Rigging.Control")
	-command    ("editCurrentCharAttrs()")
	EditCharacterAttributes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kClearCurrentCharacterListAnnot"))
	-category   ("Menu items.Animation.Key.Set Current Character Set;Menu items.Rigging.Control.Set Current Character Set")
	-command    ("setCurrentCharacters( {} )")
	ClearCurrentCharacterList;
}

animationMenus();

// ======================================================================
// ======================================================================
//
//	Dynamics menu set, ie. Particles, Fields, Soft/Rigid Bodies,
//	Effects, Solvers, and nCloth.
//
// ======================================================================
// ======================================================================
proc particleMenus() {

//
//	Particles menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kParticleToolAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("setToolTo dynParticleContext;dynParticleCtx -e -nc 0 dynParticleContext;")
	ParticleTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kParticleToolOptionsAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("setToolTo dynParticleContext; dynParticleCtx -e -nc 0 dynParticleContext; toolPropertyWindow")
	ParticleToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateEmitterAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("performDynamics 1 Emitter 0")
	CreateEmitter;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateEmitterOptionsAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("dynParticleCtx -e -nc 0 dynParticleContext; performDynamics 1 Emitter 1")
	CreateEmitterOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEmitFromObjectAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("performDynamics 0 Emitter 0")
	EmitFromObject;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEmitFromObjectOptionsAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("dynParticleCtx -e -nc 0 dynParticleContext;performDynamics 0 Emitter 1")
	EmitFromObjectOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUseSelectedEmitterAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("performDynamicsConnect 2")
	UseSelectedEmitter;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPerPointEmissionRatesAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("addPP -atr rate")
	PerPointEmissionRates;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMakeCollideAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("performDynamics 0 Collision 0")
	MakeCollide;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMakeCollideOptionsAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("performDynamics 0 Collision 1")
	MakeCollideOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kParticleCollisionEventsAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("eventEdWin")
	ParticleCollisionEvents;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGoalAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("performDynamics 0 Goal 0")
	Goal;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGoalOptionsAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("performDynamics 0 Goal 1")
	GoalOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kParticleInstancerAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("performDynamics 0 ParticleInstancer 0")
	ParticleInstancer;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kParticleInstancerOptionsAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("performDynamics 1 ParticleInstancer 1")
	ParticleInstancerOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kConnectToTimeAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("dynConnectToTime")
	ConnectToTime;

//
// Fluids menu
//
// ----------------------------------------------------------------------

// These commands are not available in Maya Complete, and
// while their appearance (without being available) in the
// Hotkey Editor Categories can be viewed as a "teaser" on
// other platforms, Maya Unlimited isn't even available on
// the Mac, so therefore we hide them.
//

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFlu3DContainerAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("performFluids 1 Create3DFluid 0")
		Create3DContainer;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFlu3DContOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("performFluids 1 Create3DFluid 3")
		Create3DContainerOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFlu2DContainerAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("performFluids 1 Create2DFluid 0")
		Create2DContainer;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFlu2DContOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("performFluids 1 Create2DFluid 3")
		Create2DContainerOptions;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFlu3DWithEmitAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("performFluids 1 3DFluidAndEmitter 0")
		Create3DContainerEmitter;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFlu3DWithEmitOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("performFluids 1 3DFluidAndEmitter 3")
		Create3DContainerEmitterOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFlu2DWithEmitAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("performFluids 1 2DFluidAndEmitter 0")
		Create2DContainerEmitter;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFlu2DWithEmitOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("performFluids 1 2DFluidAndEmitter 3")
		Create2DContainerEmitterOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluEmitObjectAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Add/Edit Contents")
		-command    ("performFluids 0 FluidEmitFromObject 0")
		EmitFluidFromObject;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluEmitObjectOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Add/Edit Contents")
		-command    ("performFluids 0 FluidEmitFromObject 3")
		EmitFluidFromObjectOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluGetExampleAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("{VisorWindow;string $pnl=visorPanelName();if(size($pnl)>0) visorPanelMenuCommand( $pnl, \"selectOrCreateTabByLabel Fluid Examples\");}")
		GetFluidExample;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluOceanExampleAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("{VisorWindow;string $pnl=visorPanelName();if(size($pnl)>0) visorPanelMenuCommand( $pnl, \"selectOrCreateTabByLabel Ocean Examples\");}")
		GetOceanPondExample;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluExtendAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("performFluids 1 ExtendFluid 0")
		ExtendFluid;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluExtendOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("performFluids 1 ExtendFluid 3")
		ExtendFluidOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluEditResAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("performFluids 1 ResampleFluid 0")
		EditFluidResolution;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluEditResOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("performFluids 1 ResampleFluid 3")
		EditFluidResolutionOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluCollideAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("performFluids 2 MakeCollideFluid 0")
		MakeFluidCollide;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluCollideOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("performFluids 2 MakeCollideFluid 3")
		MakeFluidCollideOptions;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluMotionFldAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("createMotionField")
		MakeMotionField;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluSubVolDecrAnnot"))
		-category   ("Other items.Fluids")
		-command    ("fluidSetSubVolumeLocation -1")
		DecrementFluidCenter;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluSubVolIncrAnnot"))
		-category   ("Other items.Fluids")
		-command    ("fluidSetSubVolumeLocation 1")
		IncrementFluidCenter;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluInitStateAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("performSetFluidState 0")
		SetInitialState;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluInitStateOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("performSetFluidState 1")
		SetInitialStateOptions;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluInitClearAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("performDeleteFluidsIC 0")
		ClearInitialState;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluSaveStateAnnot"))
		-category   ("Menu items.Dynamics.Fluids")
		-command    ("fluidSaveStateAs")
		SaveFluidStateAs;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluCreateCacheAnnot"))
		-category   ("Menu items.Dynamics.nCache")
		-command    ("performCreateFluidCache 0 \"add\"")
		CreateFluidCache;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluCreateCacheOptAnnot"))
		-category   ("Menu items.Dynamics.nCache")
		-command    ("performCreateFluidCache 1 \"add\"")
		CreateFluidCacheOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluAttachCacheAnnot"))
		-category	("Menu items.Dynamics.nCache")
		-command	("doImportFluidCacheArgList(0,{})")
		attachFluidCache;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluReplaceCacheAnnot"))
		-category	("Menu items.Dynamics.nCache")
		-command	("performCreateFluidCache 0 \"replace\"")
		fluidReplaceCache;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluMergeCacheAnnot"))
		-category	("Menu items.Dynamics.nCache")
		-command	("performCreateFluidCache 0 \"merge\"")
		fluidMergeCache;

	// fluidDeleteCache actually can delete both types of cache, therefore it's used as a generic delete cache method.
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluDeleteCacheAnnot"))
		-category	("Menu items.Dynamics.nCache")
		-command	("performDeleteFluidCache 0")
		fluidDeleteCache;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluReplaceCacheOptAnnot"))
		-category	("Menu items.Dynamics.nCache")
		-command	("performCreateFluidCache 1 \"replace\"")
		fluidReplaceCacheOpt;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluMergeCacheOptAnnot"))
		-category	("Menu items.Dynamics.nCache")
		-command	("performCreateFluidCache 1 \"merge\"")
		fluidMergeCacheOpt;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluDeleteCacheOptAnnot"))
		-category	("Menu items.Dynamics.nCache")
		-command	("performDeleteFluidCache 1")
		fluidDeleteCacheOpt;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluAppendCacheAnnot"))
		-category   ("Menu items.Dynamics.nCache")
		-command    "performAppendFluidCache 0"
		fluidAppend;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluAppendCacheOptionsAnnot"))
		-category   ("Menu items.Dynamics.nCache")
		-command    "performAppendFluidCache 1"
		fluidAppendOpt;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluReplaceCacheFramesAnnot"))
		-category   ("Menu items.Dynamics.nCache")
		-command    "performReplaceFluidCacheFrames 0"
		fluidReplaceFrames;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluReplaceCacheFramesOptionsAnnot"))
		-category   ("Menu items.Dynamics.nCache")
		-command    "performReplaceFluidCacheFrames 1"
		fluidReplaceFramesOpt;

	// fluidDeleteCacheFrames can actually delete both types of cache, therefore we use 
	// it as a generic method to delete cache frames.
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluDeleteCacheFramesAnnot"))
		-category   ("Menu items.Dynamics.nCache")
		-command    "performDeleteFluidCacheFrames 0"
		fluidDeleteCacheFrames;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluDeleteCacheFramesOptionsAnnot"))
		-category   ("Menu items.Dynamics.nCache")
		-command    "performDeleteFluidCacheFrames 1"
		fluidDeleteCacheFramesOpt;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluEmitterAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Add/Edit Contents")
		-command    ("performFluids 2 FluidEmitter 0")
		FluidEmitter;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluEmitterOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Add/Edit Contents")
		-command    ("performFluids 2 FluidEmitter 3")
		FluidEmitterOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluGradientsAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Add/Edit Contents")
		-command    ("performFluidGradients 0")
		FluidGradients;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluGradientsOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Add/Edit Contents")
		-command    ("performFluidGradients 1")
		FluidGradientsOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluPaintToolAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Add/Edit Contents")
		-command    ("artFluidAttrToolScript 4")
		PaintFluidsTool;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluPaintToolOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Add/Edit Contents")
		-command    ("artFluidAttrToolScript 3")
		PaintFluidsToolOptions;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluWithCurveAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Add/Edit Contents")
		-command    ("performSetFluidAttrFromCurve 0")
		SetFluidAttrFromCurve;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluWithCurveOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Add/Edit Contents")
		-command    ("performSetFluidAttrFromCurve 1")
		SetFluidAttrFromCurveOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluInitialStatesAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Add/Edit Contents")
		-command    ("performInitialStates 0")
		InitialFluidStates;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluInitialStatesOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Add/Edit Contents")
		-command    ("performInitialStates 1")
		InitialFluidStatesOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluCreateOceanAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Ocean")
		-command    ("performCreateOcean 0")
		CreateOcean;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluCreateOceanOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Ocean")
		-command    ("performCreateOcean 1")
		CreateOceanOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluPreviewPlaneAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Ocean")
		-command    ("fluidOceanAddPreviewPlane")
		AddOceanPreviewPlane;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluOceanSurfLocAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Ocean")
		-command    ("performOceanLocator 0 0")
		AddOceanSurfaceLocator;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluCreateWakeAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Ocean")
		-command    ("performCreateOceanWake 0")
		CreateOceanWake;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluCreateWakeOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Ocean")
		-command    ("performCreateOceanWake 1")
		CreateOceanWakeOptions;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluOceanDynLocAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Ocean")
		-command    ("performOceanLocator 0 1")
		AddOceanDynamicLocator;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluOceanDynLocOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Ocean")
		-command    ("performOceanLocator 1 1")
		AddOceanDynamicLocatorOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluBoatLocAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Ocean")
		-command    ("performOceanLocator 0 3")
		AddBoatLocator;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluBoatLocOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Ocean")
		-command    ("performOceanLocator 1 3")
		AddBoatLocatorOptions;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluDynBouyAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Ocean")
		-command    ("performOceanLocator 0 2")
		AddDynamicBuoy;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluDynBouyOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Ocean")
		-command    ("performOceanLocator 1 2")
		AddDynamicBuoyOptions;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluFloatSelObjAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Ocean")
		-command    ("performOceanLocator 0 4")
		FloatSelectedObjects;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluFloatSelObjOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Ocean")
		-command    ("performOceanLocator 1 4")
		FloatSelectedObjectsOptions;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluMakeBoatsAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Ocean")
		-command    ("performOceanLocator 0 5")
		MakeBoats;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluMakeBoatsOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Ocean")
		-command    ("performOceanLocator 1 5")
		MakeBoatsOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluMakeMotorBoatsAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Ocean")
		-command    ("performOceanLocator 0 6")
		MakeMotorBoats;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluMakeMotorBoatsOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Ocean")
		-command    ("performOceanLocator 1 6")
		MakeMotorBoatsOptions;

	// Pond Commands
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluCreatePondAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Pond")
		-command    ("performCreatePond 0")
		CreatePond;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluCreatePondOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Pond")
		-command    ("performCreatePond 1")
		CreatePondOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluCreatePondWakeAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Pond")
		-command    ("performCreateWake 0")
		CreateWake;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluCreatePondWakeOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Pond")
		-command    ("performCreateWake 1")
		CreateWakeOptions;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluPondSurfLocAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Pond")
		-command    ("performPondLocator 0 0")
		AddPondSurfaceLocator;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kPondDynLocAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Pond")
		-command    ("performPondLocator 0 1")
		AddPondDynamicLocator;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kPondDynLocOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Pond")
		-command    ("performPondLocator 1 1")
		AddPondDynamicLocatorOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluPondBoatLocAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Pond")
		-command    ("performPondLocator 0 3")
		AddPondBoatLocator;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluPondBoatLocOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Pond")
		-command    ("performPondLocator 1 3")
		AddPondBoatLocatorOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluPondDynBouyAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Pond")
		-command    ("performPondLocator 0 2")
		AddPondDynamicBuoy;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluPondDynBouyOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Pond")
		-command    ("performPondLocator 1 2")
		AddPondDynamicBuoyOptions;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluPondFloatSelObjAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Pond")
		-command    ("performPondLocator 0 4")
		FloatSelectedPondObjects;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluPondFloatSelObjOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Pond")
		-command    ("performPondLocator 1 4")
		FloatSelectedPondObjectsOptions;

	runTimeCommand -default true
		-annotation   (uiRes("m_defaultRunTimeCommands.kFluPondMakeBoatsAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Pond")
		-command    ("performPondLocator 0 5")
		MakePondBoats;

	runTimeCommand -default true
		-annotation  (uiRes("m_defaultRunTimeCommands.kFluPondMakeBoatsOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Pond")
		-command    ("performPondLocator 1 5")
		MakePondBoatsOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluPondMakeMotorBoatsAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Pond")
		-command    ("performPondLocator 0 6")
		MakePondMotorBoats;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFluPondMakeMotorBoatsOptAnnot"))
		-category   ("Menu items.Dynamics.Fluids.Pond")
		-command    ("performPondLocator 1 6")
		MakePondMotorBoatsOptions;

//  Hair menu
//
// ----------------------------------------------------------------------

// These commands are not available in Maya Complete, and
// while their appearance (without being available) in the
// Hotkey Editor Categories can be viewed as a "teaser" on
// other platforms, Maya Unlimited isn't even available on
// the Mac, so therefore we hide them.
//

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kCreateHairAnnot"))
		-category   "Menu items.Dynamics.nHair"
		-command    "performCreateHair 0 "
		CreateHair;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kCreateHairOptionsAnnot"))
		-category   "Menu items.Dynamics.nHair"
		-command    "performCreateHair 1"
		CreateHairOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kTransplantHairAnnot"))
		-category   "Menu items.Dynamics.nHair"
		-command    "performTransplantHair 0 "
		TransplantHair;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kTransplantHairOptionsAnnot"))
		-category   "Menu items.Dynamics.nHair"
		-command    "performTransplantHair 1"
		TransplantHairOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kRandomizeFolliclesAnnot"))
		-category   "Menu items.Dynamics.nHair"
		-command    "performRandomizeFollicles 0 "
		RandomizeFollicles;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kRandomizeFolliclesOptionsAnnot"))
		-category   "Menu items.Dynamics.nHair"
		-command    "performRandomizeFollicles 1"
		RandomizeFolliclesOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kHairCollideAnnot"))
		-category   "Menu items.Dynamics.nHair.Classic Hair"
		-command    "makeCollideHair"
		MakeCollideHair;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kDynamicHairAnnot"))
		-category   "Menu items.Dynamics.nHair"
		-command    "performMakeCurvesDynamic 0 "
		MakeCurvesDynamic;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kDynamicHairOptionsAnnot"))
		-category   "Menu items.Dynamics.nHair"
		-command    "performMakeCurvesDynamic 1"
		MakeCurvesDynamicOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kHairConstraintAnnot"))
		-category   "Menu items.Dynamics.nHair.Classic Hair"
		-command    "performAssignHairConstraint 0 "
		AssignHairConstraint;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kHairConstraintOptionsAnnot"))
		-category   "Menu items.Dynamics.nHair.Classic Hair"
		-command    "performAssignHairConstraint 1"
		AssignHairConstraintOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kBrushHairAnnot"))
		-category   "Menu items.Dynamics.nHair"
		-command    "evalEcho(\"assignBrushToHairSystem\")"
		AssignBrushToHairSystem;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kPfxHairAnnot"))
		-category   "Menu items.Dynamics.nHair"
		-command    "evalEcho(\"addPfxToHairSystem\")"
		AddPfxToHairSystem;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kCurvesHairAnnot"))
		-category   "Menu items.Dynamics.nHair"
		-command    "evalEcho(\"addCurvesToHairSystem\")"
		AddCurvesToHairSystem;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kGetHairAnnot"))
		-category   "Menu items.Dynamics.nHair"
		-command    "{VisorWindow;string $pnl=visorPanelName();if(size($pnl)>0) visorPanelMenuCommand( $pnl, \"selectOrCreateTabByLabel Hair Examples\" );}"
		GetHairExample;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kCacheHairAnnot"))
		-category   "Menu items.Dynamics.nHair.Classic Hair"
		-command    "performHairDiskCache 0"
		CreateHairCache;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kCacheHairOptionsAnnot"))
		-category   "Menu items.Dynamics.nHair.Classic Hair"
		-command    "performHairDiskCache 1"
		CreateHairCacheOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kAppendHairCacheAnnot"))
		-category   "Menu items.Dynamics.nHair.Classic Hair"
		-command    "performAppendHairCache 0"
		AppendToHairCache;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kAppendHairCacheOptionsAnnot"))
		-category   "Menu items.Dynamics.nHair.Classic Hair"
		-command    "performAppendHairCache 1"
		AppendToHairCacheOptions;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kTruncateHairCacheAnnot"))
		-category   "Menu items.Dynamics.nHair.Classic Hair"
		-command    "doTruncateHairCache"
		TruncateHairCache;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kDeleteHairCacheAnnot"))
		-category   "Menu items.Dynamics.nHair.Classic Hair"
		-command    "performDeleteHairPB 0"
		DeleteHairCache;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kDeleteHairSystemAnnot"))
		-category   "Menu items.Dynamics.nHair"
		-command    "evalEcho(\"deleteEntireHairSystem\")"
		DeleteEntireHairSystem;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kDeleteHairAnnot"))
		-category   "Menu items.Dynamics.nHair"
		-command    "evalEcho(\"deleteHair\")"
		DeleteHair;
        
//
//	Toon menu.
//
// ----------------------------------------------------------------------

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kGetToonAnnot"))
		-category   "Menu items.Rendering.Toon"
		-command    "{VisorWindow;string $pnl=visorPanelName();if(size($pnl)>0) visorPanelMenuCommand( $pnl, \"selectOrCreateTabByLabel Toon Examples\");}"
		GetToonExample;

//
//	Fields menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAirAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 1 Air 0")
	Air;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAirOptionsAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 1 Air 1")
	AirOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDragAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 1 Drag 0")
	Drag;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDragOptionsAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 1 Drag 1")
	DragOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGravityAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 1 Gravity 0")
	Gravity;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGravityOptionsAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 1 Gravity 1")
	GravityOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNewtonAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 1 Newton 0")
	Newton;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNewtonOptionsAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 1 Newton 1")
	NewtonOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRadialAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 1 Radial 0")
	Radial;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRadialOptionsAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 1 Radial 1")
	RadialOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTurbulenceAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 1 Turbulence 0")
	Turbulence;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTurbulenceOptionsAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 1 Turbulence 1")
	TurbulenceOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUniformAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 1 Uniform 0")
	Uniform;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUniformOptionsAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 1 Uniform 1")
	UniformOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kVortexAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 1 Vortex 0")
	Vortex;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kVortexOptionsAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 1 Vortex 1")
	VortexOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kVolumeAxisAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 1 VolumeAxis 0")
	VolumeAxis;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kVolumeAxisOptionsAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 1 VolumeAxis 1")
	VolumeAxisOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAttachSelectedAsSourceFieldAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("addDynamic")
	AttachSelectedAsSourceField;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAffectSelectedObjectAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamicsConnect 1")
	AffectSelectedObject;

//
//	Soft/Rigid Bodies menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateActiveRigidBodyAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 2 ActiveRigid 0")
	CreateActiveRigidBody;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateActiveRigidBodyOptionsAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 2 ActiveRigid 1")
	CreateActiveRigidBodyOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePassiveRigidBodyAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 2 PassiveRigid 0")
	CreatePassiveRigidBody;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreatePassiveRigidBodyOptionsAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 2 PassiveRigid 1")
	CreatePassiveRigidBodyOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateConstraintAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 2 Constrain 0")
	CreateConstraint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateConstraintOptionsAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("performDynamics 2 Constrain 1")
	CreateConstraintOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetActiveKeyAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("setRigidKeyframe(1)")
	SetActiveKey;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetPassiveKeyAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("setRigidKeyframe(0)")
	SetPassiveKey;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBreakRigidBodyConnectionAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("breakRigidBodyConnections")
	BreakRigidBodyConnection;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSoftBodyAnnot"))
	-category   ("Other items.Soft and Rigid Bodies")
	-command    ("performDynamics 2 Soft 0")
	-showInHotkeyEditor false
	CreateSoftBody;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSoftBodyOptionsAnnot"))
	-category   ("Other items.Soft and Rigid Bodies")
	-command    ("performDynamics 2 Soft 1")
	-showInHotkeyEditor false
	CreateSoftBodyOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNSoftBodyAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("performDynamics 2 NSoft 0")
	CreateNSoftBody;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNSoftBodyOptionsAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("performDynamics 2 NSoft 1")
	CreateNSoftBodyOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSpringAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("performDynamics 2 Spring 0")
	CreateSpring;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateSpringOptionsAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("performDynamics 2 Spring 1")
	CreateSpringOptions;

//
//	Effects menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFireAnnot"))
	-category   ("Menu items.Dynamics.Effects")
	-command    ("performDynamicsClipEffects Fire 0")
	Fire;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFireOptionsAnnot"))
	-category   ("Menu items.Dynamics.Effects")
	-command    ("performDynamicsClipEffects  Fire 1")
	FireOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmokeAnnot"))
	-category   ("Menu items.Dynamics.Effects")
	-command    ("performDynamicsClipEffects Smoke 0")
	Smoke;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSmokeOptionsAnnot"))
	-category   ("Menu items.Dynamics.Effects")
	-command    ("performDynamicsClipEffects  Smoke 1")
	SmokeOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFireworksAnnot"))
	-category   ("Menu items.Dynamics.Effects")
	-command    ("performDynamicsClipEffects Fireworks 0")
	Fireworks;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFireworksOptionsAnnot"))
	-category   ("Menu items.Dynamics.Effects")
	-command    ("performDynamicsClipEffects  Fireworks 1")
	FireworksOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLightningAnnot"))
	-category   ("Menu items.Dynamics.Effects")
	-command    ("performDynamicsClipEffects Lightning 0")
	Lightning;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLightningOptionsAnnot"))
	-category   ("Menu items.Dynamics.Effects")
	-command    ("performDynamicsClipEffects Lightning 1")
	LightningOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShatterAnnot"))
	-category   ("Menu items.Dynamics.Effects")
	-command    ("performDynamicsClipEffects Shatter 0")
	Shatter;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShatterOptionsAnnot"))
	-category   ("Menu items.Dynamics.Effects")
	-command    ("performDynamicsClipEffects Shatter 1")
	ShatterOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCurveFlowAnnot"))
	-category   ("Menu items.Dynamics.Effects")
	-command    ("performDynamicsClipEffects Flow 0")
	CurveFlow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCurveFlowOptionsAnnot"))
	-category   ("Menu items.Dynamics.Effects")
	-command    ("performDynamicsClipEffects  Flow 1")
	CurveFlowOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSurfaceFlowAnnot"))
	-category   ("Menu items.Dynamics.Effects")
	-command    ("performDynamicsClipEffects SurfaceFlow 0")
	SurfaceFlow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSurfaceFlowOptionsAnnot"))
	-category   ("Menu items.Dynamics.Effects")
	-command    ("performDynamicsClipEffects SurfaceFlow 1")
	SurfaceFlowOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteSurfaceFlowAnnot"))
	-category   ("Menu items.Dynamics.Effects")
	-command    ("performDynamicsClipEffects DeleteSurfaceFlow 0")
	DeleteSurfaceFlow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteSurfaceFlowOptionsAnnot"))
	-category   ("Menu items.Dynamics.Effects")
	-command    ("performDynamicsClipEffects DeleteSurfaceFlow 1")
	DeleteSurfaceFlowOptions;

//
//	Solvers menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRigidBodySolverAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("invokeRigidSolverEditor")
	RigidBodySolver;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateRigidBodySolverAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("evalEcho rigidSolver -create")
	CreateRigidBodySolver;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetRigidBodyInterpenetrationAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("rigidBodyInterpenetrate 1")
	SetRigidBodyInterpenetration;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetRigidBodyCollisionAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("rigidBodyInterpenetrate 0")
	SetRigidBodyCollision;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnableMemoryCachingAnnot"))
	-category   ("Menu items.Dynamics.nCache.Memory Caching")
	-command    ("cacheControl 1")
	EnableMemoryCaching;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisableMemoryCachingAnnot"))
	-category   ("Menu items.Dynamics.nCache.Memory Caching")
	-command    ("cacheControl 0")
	DisableMemoryCaching;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteMemoryCachingAnnot"))
	-category   ("Menu items.Dynamics.nCache.Memory Caching")
	-command    ("cacheDelete")
	DeleteMemoryCaching;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateParticleDiskCacheAnnot"))
	-category   ("Menu items.Dynamics.nCache")
	-command    ("performDynamics 0 ParticleRenderCache 0")
	CreateParticleDiskCache;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateParticleDiskCacheOptionsAnnot"))
	-category   ("Menu items.Dynamics.nCache")
	-command    ("performDynamics 2 ParticleRenderCache 1")
	CreateParticleDiskCacheOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEditOversamplingForCacheSettingsAnnot"))
	-category   ("Menu items.Dynamics.nCache")
	-command    ("invokeDynGlobalsEditor")
	EditOversamplingForCacheSettings;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInteractivePlaybackAnnot"))
	-category   ("Menu items.Dynamics.Fields/Solvers")
	-command    ("play -record")
	InteractivePlayback;

//
//	nParticle menus.
//
// ----------------------------------------------------------------------
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNParticleToolAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("setToolTo dynParticleContext; dynParticleCtx -e -nc 1 dynParticleContext;")
	NParticleTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNParticleToolOptionsAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("setToolTo dynParticleContext; dynParticleCtx -e -nc 1 dynParticleContext; toolPropertyWindow")
	NParticleToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNCreateEmitterAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("performDynamics 1 nEmitter 0")
	NCreateEmitter;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNCreateEmitterOptionsAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("dynParticleCtx -e -nc 1 dynParticleContext; performDynamics 1 nEmitter 1")
	NCreateEmitterOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNEmitFromObjectAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("performDynamics 0 nEmitter 0")
	NEmitFromObject;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNEmitFromObjectOptionsAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    ("dynParticleCtx -e -nc 1 dynParticleContext; performDynamics 0 nEmitter 1")
	NEmitFromObjectOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kParticleFillAnnot"))
	-category	("Menu items.Dynamics.nParticles")
	-command	("performParticleFill 0")
	ParticleFill;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kParticleFillOptionsAnnot"))
	-category	("Menu items.Dynamics.nParticles")
	-command	("performParticleFill 1")
	ParticleFillOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGetnParticleEGAnnot"))
	-category   ("Menu items.Dynamics.nParticles")
	-command    "{VisorWindow;string $pnl=visorPanelName();if(size($pnl)>0) visorPanelMenuCommand( $pnl, \"selectOrCreateTabByLabel nParticle Examples\");}"
	nucleusGetnParticleExample;


//
//	Effects Assets menu.
//
// ----------------------------------------------------------------------
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGetEffectsAssetsAnnot"))
	-category   ("Menu items.Dynamics.Effects")
	-command    "{VisorWindow;string $pnl=visorPanelName();if(size($pnl)>0) visorPanelMenuCommand( $pnl, \"selectOrCreateTabByLabel Effects Assets\");}"
	nucleusGetEffectsAsset;

//
//	nCache menus.
//
// ----------------------------------------------------------------------
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAttachCacheAnnot"))
	-category	("Menu items.Dynamics.nCache")
	-command	("doAttachCacheArgList(0,{})")
	attachCache;

runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kAppendCacheAnnot"))
		-category   ("Menu items.Dynamics.nCache")
		-command    "performAppendCache 0"
		cacheAppend;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kAppendCacheOptionsAnnot"))
		-category   ("Menu items.Dynamics.nCache")
		-command    "performAppendCache 1"
		cacheAppendOpt;

runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kReplaceCacheFramesAnnot"))
		-category   ("Menu items.Dynamics.nCache")
		-command    "performReplaceCacheFrames 0"
		replaceCacheFrames;

	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kReplaceCacheFramesOptionsAnnot"))
		-category   ("Menu items.Dynamics.nCache")
		-command    "performReplaceCacheFrames 1"
		replaceCacheFramesOpt;
//
//	nCloth menus.
//
// ----------------------------------------------------------------------
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetNClothInitialState"))
	-category	("Menu items.Dynamics.Solvers.Initial State")
	-command	("performSetNClothStartState 1")
	setNClothStartState;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kClearNClothInitialState"))
	-category	("Menu items.Dynamics.Solvers.Initial State")
	-command	("performSetNClothStartState 0")
	clearNClothStartState;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetDynInitialState"))
	-category	("Menu items.Dynamics.Solvers.Initial State")
	-command	("performSetDynStartState 1")
	setDynStartState;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kClearDynInitialState"))
	-category	("Menu items.Dynamics.Solvers.Initial State")
	-command	("performSetDynStartState 0")
	clearDynStartState;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNclothAnnot"))
	-category	("Menu items.Dynamics.nCloth")
	-command	("performCreateNCloth 0")
	nClothCreate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateNclothOptionsAnnot"))
	-category	("Menu items.Dynamics.nCloth")
	-command	("performCreateNCloth 1")
	nClothCreateOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetNClothStartFromMeshAnnot"))
	-category	("Menu items.Dynamics.Fields/Solvers.Initial State")
	-command	("setNClothStartFromMesh")
	SetNClothStartFromMesh;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRelaxInitialStateAnnot"))
	-category	("Menu items.Dynamics.Fields/Solvers.Initial State")
	-command	("performRelaxInitialState 0")
	RelaxInitialState;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRelaxInitialStateOptionsAnnot"))
	-category	("Menu items.Dynamics.Fields/Solvers.Initial State")
	-command	("performRelaxInitialState 1")
	RelaxInitialStateOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kResolveInterpenetrationAnnot"))
	-category	("Menu items.Dynamics.Fields/Solvers.Initial State")
	-command	("performResolveInterpenetration 0")
	ResolveInterpenetration;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kResolveInterpenetrationOptionsAnnot"))
	-category	("Menu items.Dynamics.Fields/Solvers.Initial State")
	-command	("performResolveInterpenetration 1")
	ResolveInterpenetrationOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMakeNclothCollideAnnot"))
	-category	("Menu items.Dynamics.nCloth")
	-command	("performMakeCollideNCloth 0")
	nClothMakeCollide;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMakeCollideNclothOptionsAnnot"))
	-category	("Menu items.Dynamics.nCloth")
	-command	("performMakeCollideNCloth 1")
	nClothMakeCollideOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveNclothAnnot"))
	-category	("Menu items.Dynamics.nCloth")
	-command	("performRemoveNCloth 0 \"selected\"")
	nClothRemove;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveDynamicConstraintAnnot"))
	-category	("Menu items.Dynamics.nConstraint")
	-command	("performRemoveDynamicConstraint 0 \"selected\"")
	dynamicConstraintRemove;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteNclothHistoryAnnot"))
	-category	("Menu items.Dynamics.nCloth")
	-command	("performDeleteNClothHistory 0")
	nClothDeleteHistory;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteNclothHistoryOptAnnot"))
	-category	("Menu items.Dynamics.nCloth")
	-command	("performDeleteNClothHistory 1")
	nClothDeleteHistoryOpt;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddNclothCacheAnnot"))
	-category	("Menu items.Dynamics.nCloth")
	-command	("performCreateNclothCache 0 \"add\"")
	nClothCache;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAttachNclothCacheAnnot"))
	-category	("Menu items.Dynamics.nCache")
	-command	("doImportCacheArgList(0,{})")
	attachNclothCache;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReplaceNclothCacheAnnot"))
	-category	("Menu items.Dynamics.nCache")
	-command	("performCreateNclothCache 0 \"replace\"")
	nClothReplaceCache;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMergeNclothCacheAnnot"))
	-category	("Menu items.Dynamics.nCache")
	-command	("performCreateNclothCache 0 \"merge\"")
	nClothMergeCache;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteNclothCacheAnnot"))
	-category	("Menu items.Dynamics.nCache")
	-command	("performDeleteNclothCache 0")
	deleteNclothCache;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddNclothCacheOptAnnot"))
	-category	("Menu items.Dynamics.nCache")
	-command	("performCreateNclothCache 1 \"add\"")
	nClothCacheOpt;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReplaceNclothCacheOptAnnot"))
	-category	("Menu items.Dynamics.nCache")
	-command	("performCreateNclothCache 1 \"replace\"")
	nClothReplaceCacheOpt;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMergeNclothCacheOptAnnot"))
	-category	("Menu items.Dynamics.nCache")
	-command	("performCreateNclothCache 1 \"merge\"")
	nClothMergeCacheOpt;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteNclothCacheOptAnnot"))
	-category	("Menu items.Dynamics.nCache")
	-command	("performDeleteNclothCache 1")
	nClothDeleteCacheOpt;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAppendNclothCacheAnnot"))
	-category   "Menu items.Dynamics.nCache"
	-command    "performAppendNclothCache 0"
	nClothAppend;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAppendNclothCacheOptionsAnnot"))
	-category   "Menu items.Dynamics.nCache"
	-command    "performAppendNclothCache 1"
	nClothAppendOpt;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReplaceNclothCacheFramesAnnot"))
	-category   "Menu items.Dynamics.nCache"
	-command    "performReplaceNclothCacheFrames 0"
	nClothReplaceFrames;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kReplaceNclothCacheFramesOptionsAnnot"))
	-category   "Menu items.Dynamics.nCache"
	-command    "performReplaceNclothCacheFrames 1"
	nClothReplaceFramesOpt;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteNclothCacheFramesAnnot"))
	-category   "Menu items.Dynamics.nCache"
	-command    "performDeleteNclothCacheFrames 0"
	nClothDeleteCacheFrames;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteNclothCacheFramesOptionsAnnot"))
	-category   "Menu items.Dynamics.nCache"
	-command    "performDeleteNclothCacheFrames 1"
	nClothDeleteCacheFramesOpt;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintCacheToolAnnot"))
	-category	("Menu items.Dynamics.nCache")
	-command	("artAttrCacheToolScript 4 ")
	PaintCacheTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintCacheOptAnnot"))
	-category	("Menu items.Dynamics.nCache")
	-command	("artAttrCacheToolScript 3 ")
	PaintCacheToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNucleusDisplayNComponentNodes"))
	-category	("Menu items.Dynamics.Solvers.AE Display")
	-command    ("performNucleusDisplayNComponentNodes")
	nucleusDisplayNComponentNodes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNucleusDisplayDynamicConstraintNodes"))
	-category	("Menu items.Dynamics.Solvers.AE Display")
	-command    ("performNucleusDisplayDynamicConstraintNodes")
	nucleusDisplayDynamicConstraintNodes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNucleusDisplayMaterialNodes"))
	-category	("Menu items.Dynamics.Solvers.AE Display")
	-command    ("performNucleusDisplayMaterialNodes")
	nucleusDisplayMaterialNodes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNucleusDisplayTextureNodes"))
	-category	("Menu items.Dynamics.Solvers.AE Display")
	-command    ("performNucleusDisplayTextureNodes")
	nucleusDisplayTextureNodes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNucleusDisplayTransformNodes"))
	-category	("Menu items.Dynamics.Solvers.AE Display")
	-command    ("performNucleusDisplayTransformNodes")
	nucleusDisplayTransformNodes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNucleusDisplayOtherNodes"))
	-category	("Menu items.Dynamics.Solvers.AE Display")
	-command    ("performNucleusDisplayOtherNodes")
	nucleusDisplayOtherNodes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGetnClothEGAnnot"))
	-category   ("Menu items.Dynamics.nCloth")
	-command    "{VisorWindow;string $pnl=visorPanelName();if(size($pnl)>0) visorPanelMenuCommand( $pnl, \"selectOrCreateTabByLabel nCloth Examples\");}"
	nucleusGetnClothExample;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDistributedSimulationSubmission"))
	-category   ("Other items.nCloth")
	-command    ("buildSendToBackburnerDialogInternal")
	-showInHotkeyEditor false
	buildSendToBackburnerDialog;

}
particleMenus(); 

// ======================================================================
// ======================================================================
//
//	Rendering menu set, ie. Lighting/Shading, Render, and Paint Effects.
//
// ======================================================================
// ======================================================================
proc renderingMenus() {
//
//	Lighting/Shading menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAssignNewMaterialAnnot"))
	-category   ("Other items.Lights and Shading")
	-command    ("doCreateAssignNewMaterialTreeLister \"\"")
	-showInHotkeyEditor false
	AssignNewMaterial;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMakeLightLinksAnnot"))
	-category   ("Menu items.Rendering.Lighting/Shading")
	-command    ("lightlink -make -useActiveLights -useActiveObjects")
	MakeLightLinks;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBreakLightLinksAnnot"))
	-category   ("Menu items.Rendering.Lighting/Shading")
	-command    ("lightlink -break -useActiveLights -useActiveObjects")
	BreakLightLinks;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectObjectsIlluminatedByLightAnnot"))
	-category   ("Menu items.Rendering.Lighting/Shading")
	-command    ("RenLightingSelectObjects")
	SelectObjectsIlluminatedByLight;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectLightsIlluminatingObjectAnnot"))
	-category   ("Menu items.Rendering.Lighting/Shading")
	-command    ("RenLightingSelectLights")
	SelectLightsIlluminatingObject;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMakeShadowLinksAnnot"))
	-category   ("Menu items.Rendering.Lighting/Shading")
	-command    ("lightlink -make -shadow -useActiveLights -useActiveObjects")
	MakeShadowLinks;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBreakShadowLinksAnnot"))
	-category   ("Menu items.Rendering.Lighting/Shading")
	-command    ("lightlink -break -shadow -useActiveLights -useActiveObjects")
	BreakShadowLinks;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectObjectsShadowedByLightAnnot"))
	-category   ("Menu items.Rendering.Lighting/Shading")
	-command    ("RenShadowingSelectObjects")
	SelectObjectsShadowedByLight;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectLightsShadowingObjectAnnot"))
	-category   ("Menu items.Rendering.Lighting/Shading")
	-command    ("RenShadowingSelectLights")
	SelectLightsShadowingObject;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowShadingGroupAttributeEditorAnnot"))
	-category   ("Menu items.Rendering.Lighting/Shading")
	-command    ("showShadingGroupAttrEditor")
	ShowShadingGroupAttributeEditor;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisplacementToPolygonAnnot"))
	-category   ("Menu items.Common.Modify.Convert")
	-command    ("performDisplacementToPoly")
	DisplacementToPolygon;


// 3d Paint Tool.
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kArt3dPaintToolAnnot"))
	-category   ("Menu items.Rendering.Texturing")
	-command    ("art3dPaintToolScript 4")
	Art3dPaintTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kArt3dPaintToolOptionsAnnot"))
	-category   ("Menu items.Rendering.Texturing")
	-command    ("art3dPaintToolScript 3")
	Art3dPaintToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateTextureReferenceObjectAnnot"))
	-category   ("Menu items.Rendering.Texturing")
	-command    ("makeReferenceObject")
	CreateTextureReferenceObject;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeleteTextureReferenceObjectAnnot"))
	-category   ("Menu items.Rendering.Texturing")
	-command    ("deleteReferenceObject")
	DeleteTextureReferenceObject;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectTextureReferenceObjectAnnot"))
	-category   ("Menu items.Rendering.Texturing")
	-command    ("selectReferenceObject")
	SelectTextureReferenceObject;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNURBSTexturePlacementToolAnnot"))
	-category   ("Menu items.Rendering.Texturing")
	-command    ("setToolTo defaultTexturePlacementContext")
	NURBSTexturePlacementTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNURBSTexturePlacementToolOptionsAnnot"))
	-category   ("Menu items.Rendering.Texturing")
	-command    ("setToolTo defaultTexturePlacementContext; toolPropertyWindow")
	NURBSTexturePlacementToolOptions;
//
//	Render menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRenderIntoNewWindowAnnot"))
	-category   ("Menu items.Animation.Playback;Menu items.Rendering.Render")
	-command    ("renderIntoNewWindow render")
	RenderIntoNewWindow;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRedoPreviousRenderAnnot"))
	-category   ("Menu items.Rendering.Render")
	-command    ("redoPreviousRender render")
	RedoPreviousRender;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRenderOptionsAnnot"))
	-category   ("Menu items.Rendering.Render")
	-command    ("renderOptions")
	RenderOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMayaPreviewRenderIntoNewWindowAnnot"))
	-category   ("Other items.Render")
	-command    ("renderIntoNewWindow mayaPreviewRender")
	-showInHotkeyEditor false
	mayaPreviewRenderIntoNewWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kIPRRenderIntoNewWindowAnnot"))
	-category   ("Menu items.Rendering.Render")
	-command    ("renderIntoNewWindow iprRender")
	IPRRenderIntoNewWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRedoPreviousIPRRenderAnnot"))
	-category   ("Menu items.Rendering.Render")
	-command    ("redoPreviousRender iprRender")
	RedoPreviousIPRRender;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kIPROptionsAnnot"))
	-category   ("Menu items.Rendering.Render")
	-command    ("iprOptions")
	IPROptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRenderDiagnosticsAnnot"))
	-category   ("Menu items.Rendering.Render")
	-command    ("mayaRenderDiagnostics")
	RenderDiagnostics;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBatchRenderAnnot"))
	-category   ("Menu items.Rendering.Render")
	-command    ("mayaBatchRender")
	BatchRender;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBatchRenderOptionsAnnot"))
	-category   ("Menu items.Rendering.Render")
	-command    ("batchRenderOptions")
	BatchRenderOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCancelBatchRenderAnnot"))
	-category   ("Menu items.Rendering.Render")
	-command    ("cancelBatchRender")
	CancelBatchRender;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowBatchRenderAnnot"))
	-category   ("Menu items.Rendering.Render")
	-command    ("showBatchRender")
	ShowBatchRender;

if (!`about -nt` && !`about -mac`) {
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kDistributeRenderAnnot"))
		-category   ("Other items.Render")
		-command    ("distributedRenderSession")
		DistributeRender;
}

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEditTextureAnnot"))
	-category   ("Other items.Render")
	-showInHotkeyEditor false
	EditTexture;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTestTextureAnnot"))
	-category   ("Other items.Render")
	-command    ("performCompositeTest 0")
	-showInHotkeyEditor false
	TestTexture;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTestTextureOptionsAnnot"))
	-category   ("Other items.Render")
	-command    ("performCompositeTest 1")
	-showInHotkeyEditor false
	TestTextureOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRenderTextureRangeAnnot"))
	-category   ("Other items.Render")
	-command    ("performComposite 0")
	-showInHotkeyEditor false
	RenderTextureRange;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRenderTextureRangeOptionsAnnot"))
	-category   ("Other items.Render")
	-command    ("performComposite 1")
	-showInHotkeyEditor false
	RenderTextureRangeOptions;


//
//	Color Management menu.
//
// ----------------------------------------------------------------------
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kColorManagementIncExposureFine"))
	-category   ("Other items.Color Management")
	-command    ("incrementDynamicPropertyField renderView exposure exposureRenderViewFieldItem 0.1; resetRVExposureTogleState; updateRenderViewExposureSlider")
	IncreaseExposureFine;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kColorManagementIncExposureCoarse"))
	-category   ("Other items.Color Management")
	-command    ("incrementDynamicPropertyField renderView exposure exposureRenderViewFieldItem 0.5; resetRVExposureTogleState; updateRenderViewExposureSlider")
	IncreaseExposureCoarse;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kColorManagementDecExposureFine"))
	-category   ("Other items.Color Management")
	-command    ("incrementDynamicPropertyField renderView exposure exposureRenderViewFieldItem -0.1; resetRVExposureTogleState; updateRenderViewExposureSlider")
	DecreaseExposureFine;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kColorManagementDecExposureCoarse"))
	-category   ("Other items.Color Management")
	-command    ("incrementDynamicPropertyField renderView exposure exposureRenderViewFieldItem -0.5; resetRVExposureTogleState; updateRenderViewExposureSlider")
	DecreaseExposureCoarse;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kColorManagementIncGammaFine"))
	-category   ("Other items.Color Management")
	-command    ("incrementDynamicPropertyField renderView gamma gammaRenderViewFieldItem 0.05; resetRVGammaTogleState; updateRenderViewGammaSlider")
	IncreaseGammaFine;
    
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kColorManagementIncGammaCoarse"))
	-category   ("Other items.Color Management")
	-command    ("incrementDynamicPropertyField renderView gamma gammaRenderViewFieldItem 0.1; resetRVGammaTogleState; updateRenderViewGammaSlider")
	IncreaseGammaCoarse;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kColorManagementDecGammaFine"))
	-category   ("Other items.Color Management")
	-command    ("incrementDynamicPropertyField renderView gamma gammaRenderViewFieldItem -0.05; resetRVGammaTogleState; updateRenderViewGammaSlider")
	DecreaseGammaFine;
    
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kColorManagementDecGammaCoarse"))
	-category   ("Other items.Color Management")
	-command    ("incrementDynamicPropertyField renderView gamma gammaRenderViewFieldItem -0.1; resetRVGammaTogleState; updateRenderViewGammaSlider")
	DecreaseGammaCoarse;

//
//	Paint Effects menu.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintEffectsPanelAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("creatorOpenPaintEffectsPanel_NamedCmd")
	PaintEffectsPanel;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintEffectsToolAnnot"))
	-category   ("Menu items.Modeling.Generate")
	-command    ("creatorSetPaintEffectCtx_NamedCmd")
	PaintEffectsTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintEffectsToolOptionsAnnot"))
	-category   ("Menu items.Modeling.Generate")
	-command    ("setToolTo $gCreatorWireCtx; toolPropertyWindow;")
	PaintEffectsToolOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMakePaintableAnnot"))
	-category   ("Menu items.Modeling.Generate")
	-command    ("creatorMakePaintable_NamedCmd")
	MakePaintable;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTemplateBrushSettingsAnnot"))
	-category   ("Menu items.Modeling.Generate")
	-command    ("brushToolSettings")
	TemplateBrushSettings;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kResetTemplateBrushAnnot"))
	-category   ("Menu items.Modeling.Generate")
	-command    ("resetBrush")
	ResetTemplateBrush;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintOnPaintableObjectsAnnot"))
	-category   ("Menu items.Modeling.Generate")
	-command    ("dynWireCtx -e -dp 1 $gCreatorWireCtx")
	PaintOnPaintableObjects;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTogglePaintOnPaintableObjectsAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("creatorTogglePaintOnPaintable_NamedCmd")
	TogglePaintOnPaintableObjects;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintOnViewPlaneAnnot"))
	-category   ("Menu items.Modeling.Generate")
	-command    ("dynWireCtx -e -dp 0 $gCreatorWireCtx")
	PaintOnViewPlane;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kApplySettingsToLastStrokeAnnot"))
	-category   ("Menu items.Modeling.Generate")
	-command    ("copyTemplateBrushToSelected")
	ApplySettingsToLastStroke;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGetSettingsFromSelectedStrokeAnnot"))
	-category   ("Menu items.Modeling.Generate")
	-command    ("setTemplateToCurrentBrush")
	GetSettingsFromSelectedStroke;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kApplySettingsToSelectedStrokeAnnot"))
	-category   ("Menu items.Modeling.Generate")
	-command    ("copyTemplateBrushToSelected")
	ApplySettingsToSelectedStroke;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShareOneBrushAnnot"))
	-category   ("Menu items.Modeling.Generate")
	-command    ("useSameBrush")
	ShareOneBrush;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRemoveBrushSharingAnnot"))
	-category   ("Menu items.Modeling.Generate")
	-command    ("unShareBrush")
	RemoveBrushSharing;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectBrushNamesAnnot"))
	-category   ("Menu items.Modeling.Generate")
	-command    ("selectBrushesWhoseNameContains")
	SelectBrushNames;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLoopBrushAnimationAnnot"))
	-category   ("Menu items.Modeling.Generate.Brush Animation")
	-command    ("performLoopBrushAnim false")
	LoopBrushAnimation;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLoopBrushAnimationOptionsAnnot"))
	-category   ("Menu items.Modeling.Generate.Brush Animation")
	-command    ("performLoopBrushAnim true")
	LoopBrushAnimationOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMakeBrushSpringAnnot"))
	-category   ("Menu items.Modeling.Generate.Brush Animation")
	-command    ("performMakeBrushSpring false")
	MakeBrushSpring;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMakeBrushSpringOptionsAnnot"))
	-category   ("Menu items.Modeling.Generate.Brush Animation")
	-command    ("performMakeBrushSpring true")
	MakeBrushSpringOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBakeSpringAnimationAnnot"))
	-category   ("Menu items.Modeling.Generate.Brush Animation")
	-command    ("performBakeBrushSpringAnim false")
	BakeSpringAnimation;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBakeSpringAnimationOptionsAnnot"))
	-category   ("Menu items.Modeling.Generate.Brush Animation")
	-command    ("performBakeBrushSpringAnim true")
	BakeSpringAnimationOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSimplifyStrokePathCurvesAnnot"))
	-category   ("Menu items.Modeling.Generate.Curve Utilities")
	-command    ("simplifyStrokes 4")
	SimplifyStrokePathCurves;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetStrokeControlCurvesAnnot"))
	-category   ("Menu items.Modeling.Generate.Curve Utilities")
	-command    ("bindCurvesToStrokes")
	SetStrokeControlCurves;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAttachBrushToCurvesAnnot"))
	-category   ("Menu items.Modeling.Generate.Curve Utilities")
	-command    ("convertCurvesToStrokes")
	AttachBrushToCurves;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMakePressureCurveAnnot"))
	-category   ("Menu items.Modeling.Generate.Curve Utilities")
	-command    ("performMakePressureCurve false")
	MakePressureCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMakePressureCurveOptionsAnnot"))
	-category   ("Menu items.Modeling.Generate.Curve Utilities")
	-command    ("performMakePressureCurve true")
	MakePressureCurveOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintGridAnnot"))
	-category   ("Menu items.Modeling.Generate.Auto Paint")
	-command    ("performPaintGrid false")
	PaintGrid;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintGridOptionsAnnot"))
	-category   ("Menu items.Modeling.Generate.Auto Paint")
	-command    ("performPaintGrid true")
	PaintGridOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintRandomAnnot"))
	-category   ("Menu items.Modeling.Generate.Auto Paint")
	-command    ("performPaintRandom false")
	PaintRandom;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintRandomOptionsAnnot"))
	-category   ("Menu items.Modeling.Generate.Auto Paint")
	-command    ("performPaintRandom true")
	PaintRandomOptions;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintEffectsGlobalSettingsAnnot"))
	-category   ("Menu items.Modeling.Generate")
	-command    ("creatorGlobalSettings")
	PaintEffectsGlobalSettings;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintEffectsMeshQualityAnnot"))
	-category   ("Menu items.Modeling.Generate")
	-command    ("paintEffectsMeshQuality")
	PaintEffectsMeshQuality;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPresetBlendingWindowAnnot"))
	-category   ("Menu items.Modeling.Generate")
	-command    ("brushPresetBlendWin")
	PresetBlendingWindow;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSaveBrushPresetAnnot"))
	-category   ("Menu items.Modeling.Generate")
	-command    ("saveBrushToShelf")
	SaveBrushPreset;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kClearPaintEffectsViewAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("{if (`optionVar -q dynPaint23dToggle` == 2) " +
	             "{global string $gDynPaintEditorName; " +
				 "float $cc[] = `optionVar -q dynPaintPanelClearColour`; " +
				 "dynPaintEditor -e -cl $cc[0] $cc[1] $cc[2] " +
				 "$gDynPaintEditorName;}}")
	ClearPaintEffectsView;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUndoCanvasAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("dynPaintEditor -e -cu $gDynPaintEditorName;")
	UndoCanvas;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFlipTubeDirectionAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("setAttr (getDefaultBrush() + \".tubeDirection\")"
				+"(!( `getAttr( getDefaultBrush() + \".tubeDirection\" )`));")
	FlipTubeDirection;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTogglePaintAtDepthAnnot"))
	-category   ("Other items.Paint Effects")
	-command (
			"if (`dynWireCtx -q -pd dynWireCtx1`) {\n"
   			+"	dynWireCtx -e -pd false dynWireCtx1;\n"
			+"	print \"" + (uiRes("m_defaultRunTimeCommands.kPaintAtDepthNowOFF")) + "\";\n"
			+"} else {\n"
     		+"	dynWireCtx -e -pd true dynWireCtx1;\n"
			+"	print \"" + (uiRes("m_defaultRunTimeCommands.kPaintAtDepthNowON")) + "\";\n"
			+"}")
	TogglePaintAtDepth;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBrushPresetBlendAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("setPresetBlend(0.2, 0.2)")
	BrushPresetBlend;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBrushPresetBlendOffAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("restorePresetBlend()")
	BrushPresetBlendOff;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBrushPresetBlendShadingAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("setPresetBlend(0.0, 0.3)")
	BrushPresetBlendShading;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBrushPresetBlendShadingOffAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("restorePresetBlend()")
	BrushPresetBlendShadingOff;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBrushPresetBlendShapeAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("setPresetBlend(0.3, 0.0)")
	BrushPresetBlendShape;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBrushPresetBlendShapeOffAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("restorePresetBlend()")
	BrushPresetBlendShapeOff;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBrushPresetReplaceShadingAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("setPresetBlend(0.0, 1.0)")
	BrushPresetReplaceShading;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBrushPresetReplaceShadingOffAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("restorePresetBlend()")
	BrushPresetReplaceShadingOff;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleOppositeFlagOfSelectedShapesAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("string $selectionList[] = `ls -sl -l -dag -leaf`;\n" +
	             "string $selection;\nfor ($selection in $selectionList) {\n" +
	             "    if (`nodeType $selection` == \"nurbsSurface\") {\n" +
	             "        int $op = `getAttr ($selection + \".opposite\")`;\n" +
	             "        $op = !$op;\n" +
	             "        setAttr ($selection + \".opposite\") $op;\n" +
	             "    }\n" +
	             "}")
	ToggleOppositeFlagOfSelectedShapes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBrushAnimationMarkingMenuAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("creatorBrushAnimationMM")
	BrushAnimationMarkingMenu;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kBrushAnimationMarkingMenuPopDownAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("creatorDeletePopupMM")
	BrushAnimationMarkingMenuPopDown;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCurveUtilitiesMarkingMenuAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("creatorCurveUtilityMM")
	CurveUtilitiesMarkingMenu;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCurveUtilitiesMarkingMenuPopDownAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("creatorDeletePopupMM")
	CurveUtilitiesMarkingMenuPopDown;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAutoPaintMarkingMenuAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("creatorAutoPaintMM")
	AutoPaintMarkingMenu;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAutoPaintMarkingMenuPopDownAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("creatorDeletePopupMM")
	AutoPaintMarkingMenuPopDown;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintEffectPanelActivateAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("dynPaintSwapPanelPress")
	PaintEffectPanelActivate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintEffectPanelDeactivateAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("dynPaintSwapPanelRelease")
	PaintEffectPanelDeactivate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintEffectsToPolyAnnot"))
	-category   ("Menu items.Common.Modify.Convert;Menu items.Rendering.Toon")
	-command    ("performPaintEffectsToPoly  false")
	PaintEffectsToPoly;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintEffectsToPolyOptionsAnnot"))
	-category   ("Menu items.Common.Modify.Convert;Menu items.Rendering.Toon")
	-command    ("performPaintEffectsToPoly  true")
	PaintEffectsToPolyOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintEffectsToNurbsAnnot"))
	-category   ("Other items.Paint Effects")
	-command    ("performPaintEffectsToNurbs  false")
	PaintEffectsToNurbs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintEffectsToNurbsOptionsAnnot"))
	-category   ("Menu items.Common.Modify.Convert")
	-command    ("performPaintEffectsToNurbs  true")
	PaintEffectsToNurbsOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintEffectsToCurveAnnot"))
	-category   ("Menu items.Common.Modify.Convert")
	-command    ("performPaintEffectsToCurve  false")
	PaintEffectsToCurve;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintEffectsToCurveOptionsAnnot"))
	-category   ("Menu items.Common.Modify.Convert")
	-command    ("performPaintEffectsToCurve  true")
	PaintEffectsToCurveOptions;
}

renderingMenus();

// ======================================================================
// ======================================================================
//
//	Some other category of commands.
//
// ======================================================================
// ======================================================================

global proc scriptedPanelRunTimeCmdBackfaceCulling( string $currentPanel )
{
	string $scriptedType = `scriptedPanel -q -type $currentPanel`;


	global string $gScriptedModelEditorTypes[];
	global string $gScriptedModelEditorList[];
	int $typeCount = size( $gScriptedModelEditorTypes );
	int $editorCount = size( $gScriptedModelEditorList );
	for ( $i = 0; $i < $typeCount; $i ++ ) {
		if ( $scriptedType == $gScriptedModelEditorTypes[$i] && $i < $editorCount )
		{
			int $culling = `modelEditor -query -backfaceCulling $gScriptedModelEditorList[$i]`;
			modelEditor -edit -backfaceCulling (1 - $culling) $gScriptedModelEditorList[$i];
			break;
		}
	}
}

global proc scriptedPanelRunTimeCmd( string $rootCmd, string $currentPanel )
{
	string $scriptedType = `scriptedPanel -q -type $currentPanel`;

	global string $gScriptedModelEditorTypes[];
	global string $gScriptedModelEditorList[];
	int $typeCount = size( $gScriptedModelEditorTypes );
	int $editorCount = size( $gScriptedModelEditorList );
	for ( $i = 0; $i < $typeCount; $i ++ ) {
		if ( $scriptedType == $gScriptedModelEditorTypes[$i] && $i < $editorCount )
		{
			string $theCmd = $rootCmd + " " + $gScriptedModelEditorList[$i];
			evalEcho( $theCmd );
			break;
		}
	}
}

proc miscCommands() {
//
//	Modeling Panel commands.
//
// ----------------------------------------------------------------------

//	Bug #185605
//	On Mac, the 'getPanel -underPointer', returns the panel on which the
//	cursor currently is. Hence, when Shading menu is torn off and moved onto the
//  orthographic panels, the panel is returned and not a NULL. Use getPanel
//	-withFocus on Mac, instead of -underPointer flag.

string $wireframeDisplay = (uiRes("m_defaultRunTimeCommands.kDisplayWireframeAnnot"));
string $wireframeDisplayIvm = ("inViewMessage -smg \"" + (uiRes("m_defaultRunTimeCommands.kIvmWireframe")) + "\" -fade -pos topCenter;\n");
string $shadedDisplayIvm = ("inViewMessage -smg \"" + (uiRes("m_defaultRunTimeCommands.kIvmShaded")) + "\" -fade -pos topCenter;\n");
string $shadedTextureDisplayIvm = ("inViewMessage -smg \"" + (uiRes("m_defaultRunTimeCommands.kIvmShadedTexture")) + "\" -fade -pos topCenter;\n");
string $lightDisplayIvm = ("inViewMessage -smg \"" + (uiRes("m_defaultRunTimeCommands.kIvmLight")) + "\" -fade -pos topCenter;\n");
if(`about -mac`)
{
	//	Display Wireframe for current panel.
	//
	runTimeCommand -default true
		-annotation $wireframeDisplay
		-category   ("Other items.Viewport items")
		-command	("displaySmoothness -full;\n" +
					 "{\n" +
	 				 "    string $currentPanel = `getPanel -withFocus`;\n" +
					 "    if (\"\" != $currentPanel) {\n" +
					 "        string $panelType = `getPanel -typeOf $currentPanel`;\n" +
					 "        if ($panelType ==  \"modelPanel\") {\n" +
					 "            modelEditor -edit -displayAppearance \"wireframe\" \n" +
					 "                -displayLights \"default\" $currentPanel;\n" +
								  $wireframeDisplayIvm +
					 "        } else if (`isTrue \"MayaCreatorExists\"` && `scriptedPanel -exists $currentPanel` \n" +
					 "            && `scriptedPanel -query -type $currentPanel` == \"dynPaintScriptedPanelType\") {\n" +
					 "            dynPaintEditor -edit -displayAppearance \"wireframe\" \n" +
					 "                -displayLights \"default\" $gDynPaintEditorName;\n" +
								  $wireframeDisplayIvm +
					 "        } else if ($panelType ==  \"scriptedPanel\" ) {\n " +
					 "			string $scriptedPanelType = `scriptedPanel -query -type $currentPanel`; \n " +
					 "			if($scriptedPanelType != \"nodeEditorPanel\" && $scriptedPanelType != \"hyperShadePanel\"){ \n " +
					 "			  string $cmd = \"modelEditor -edit -displayAppearance \\\"wireframe\\\" -displayLights \\\"default\\\" \";\n " +
					 "			  scriptedPanelRunTimeCmd( $cmd, $currentPanel );\n" +
								  $wireframeDisplayIvm +
					 "            }\n" +
					 "        }\n" +
					 "    }\n" +
					 "}\n"
					 )
		DisplayWireframe;
}
else
{
//	Display Wireframe for current panel.
//
runTimeCommand -default true
	-annotation $wireframeDisplay
	-category   ("Other items.Viewport items")
	-command	("displaySmoothness -full;\n" +
				 "{\n" +
				 "    string $currentPanel = `getPanel -underPointer`;\n" +
				 "    if (\"\" == $currentPanel) {\n" +
				 "        $currentPanel = `getPanel -withFocus`;\n" +
				 "    }\n" +
				 "    if (\"\" != $currentPanel) {\n" +
				 "        string $panelType = `getPanel -typeOf $currentPanel`;\n" +
				 "        if ($panelType ==  \"modelPanel\") {\n" +
				 "            modelEditor -edit -displayAppearance \"wireframe\" \n" +
				 "                -displayLights \"default\" $currentPanel;\n" +
							  $wireframeDisplayIvm +
				 "        } else if (`isTrue \"MayaCreatorExists\"` && `scriptedPanel -exists $currentPanel` \n" +
				 "            && `scriptedPanel -query -type $currentPanel` == \"dynPaintScriptedPanelType\") { \n" +
				 "            dynPaintEditor -edit -displayAppearance \"wireframe\" \n" +
				 "                -displayLights \"default\" $gDynPaintEditorName;\n" +
							  $wireframeDisplayIvm +
				 "        } else if ($panelType ==  \"scriptedPanel\" ) {\n " +
				 "			string $scriptedPanelType = `scriptedPanel -query -type $currentPanel`; \n " +
				 "			if($scriptedPanelType != \"nodeEditorPanel\" && $scriptedPanelType != \"hyperShadePanel\"){ \n " +
				 "			  string $cmd = \"modelEditor -edit -displayAppearance \\\"wireframe\\\" -displayLights \\\"default\\\" \"; \n" +
				 "			  scriptedPanelRunTimeCmd( $cmd, $currentPanel );\n" +
							  $wireframeDisplayIvm +
				 "            }\n" +
				 "        }\n" +
				 "    }\n" +
				 "}\n"
				 )
	DisplayWireframe;
}

//	Display Shaded for current panel.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisplayShadedAnnot"))
	-category   ("Other items.Viewport items")
	-command	("{\n" +
				 "    string $currentPanel = `getPanel -underPointer`;\n" +
				 "    if (\"\" == $currentPanel) {\n" +
				 "        $currentPanel = `getPanel -withFocus`;\n" +
				 "    }\n" +
				 "    if (\"\" != $currentPanel) {\n" +
				 "        string $panelType = `getPanel -typeOf $currentPanel`;\n" +
				 "        if ($panelType ==  \"modelPanel\") {\n" +
				 "            modelEditor -edit -displayAppearance \"smoothShaded\" -displayTextures off \n" +
				 "                -displayLights \"default\" $currentPanel;\n" +
							  $shadedDisplayIvm +
				 "        } else if (`isTrue \"MayaCreatorExists\"` && `scriptedPanel -exists $currentPanel` \n" +
				 "            && `scriptedPanel -query -type $currentPanel` == \"dynPaintScriptedPanelType\") {\n" +
				 "            dynPaintEditor -edit -displayTextures 0 -displayAppearance \"smoothShaded\"\n" +
				 "                -displayLights \"default\" $gDynPaintEditorName;\n" +
							  $shadedDisplayIvm +
				 "        } else if ($panelType ==  \"scriptedPanel\" ) {\n " +
				 "			string $scriptedPanelType = `scriptedPanel -query -type $currentPanel`; \n " +
				 "			if($scriptedPanelType != \"nodeEditorPanel\" && $scriptedPanelType != \"hyperShadePanel\"){ \n " +
				 "			  string $cmd = \"modelEditor -edit -displayAppearance \\\"smoothShaded\\\" -displayTextures off -displayLights \\\"default\\\" \"; \n" +
				 "			  scriptedPanelRunTimeCmd( $cmd, $currentPanel ); \n" +
							  $shadedDisplayIvm +
				 "            }\n" +
				 "        }\n" +
				 "    }\n" +
				 "}\n"

				 )
	DisplayShaded;

//	Display Smooth Shaded without changing other parameters for current panel.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisplaySmoothShadedAnnot"))
	-category   ("Other items.Viewport items")
	-command	("{\n" +
				 "    string $currentPanel = `getPanel -underPointer`;\n" +
				 "    if (\"\" == $currentPanel) {\n" +
				 "        $currentPanel = `getPanel -withFocus`;\n" +
				 "    }\n" +
				 "    if (\"\" != $currentPanel) {\n" +
				 "        string $panelType = `getPanel -typeOf $currentPanel`;\n" +
				 "        if ($panelType ==  \"modelPanel\") {\n" +
				 "            modelEditor -edit -displayAppearance \"smoothShaded\" \n" +
				 "                $currentPanel;\n" +
				 "        } else if (`isTrue \"MayaCreatorExists\"` && `scriptedPanel -exists $currentPanel` \n" +
				 "            && `scriptedPanel -query -type $currentPanel` == \"dynPaintScriptedPanelType\") {\n" +
				 "            dynPaintEditor -edit -displayAppearance \"smoothShaded\"\n" +
				 "                $gDynPaintEditorName;\n" +
				 "        } else if ($panelType ==  \"scriptedPanel\") { \n" +
				 "			  string $cmd = \"modelEditor -edit -displayAppearance \\\"smoothShaded\\\"  \"; \n" +
				 "			  scriptedPanelRunTimeCmd( $cmd, $currentPanel ); \n" +
				 "        }\n" +
				 "    }\n" +
				 "}\n")
	DisplaySmoothShaded;

//	Display Shaded and Textured for current panel.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisplayShadedAndTexturedAnnot"))
	-category   ("Other items.Viewport items")
	-command    ( "{" +
				   "  string $currentPanel = `getPanel -withFocus`; " +
				   "  string $panelType = `getPanel -to $currentPanel`;" +
				   "  if ($panelType ==  \"modelPanel\") { " +
				   "   modelEditor -edit -da \"smoothShaded\" -displayTextures on " +
				   "       -dl \"default\" $currentPanel;" +
						$shadedTextureDisplayIvm +
				   "  } else if (`isTrue \"MayaCreatorExists\"` && `scriptedPanel -ex $currentPanel` && `scriptedPanel -q -type $currentPanel` == \"dynPaintScriptedPanelType\") {" +
				   "     dynPaintEditor -e -dtx 1 -dsa \"smoothShaded\" -dsl \"default\" $gDynPaintEditorName;" +
						$shadedTextureDisplayIvm +
				   "  } else if ($panelType ==  \"scriptedPanel\" ) {\n " +
  				   "	 string $scriptedPanelType = `scriptedPanel -query -type $currentPanel`; \n " +
				   "	 if($scriptedPanelType != \"nodeEditorPanel\" && $scriptedPanelType != \"hyperShadePanel\"){ \n " +
				   "	   string $cmd = \"modelEditor -edit -displayAppearance \\\"smoothShaded\\\" -displayTextures on -displayLights \\\"default\\\" \"; \n" +
				   "	   scriptedPanelRunTimeCmd( $cmd, $currentPanel ); \n" +
						$shadedTextureDisplayIvm +
				   "      }\n" +
				   "   }" +
				   "}"
				   )
	DisplayShadedAndTextured;

//	Toggle Use Default Material without changing other parameters for current panel.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleUseDefaultMaterialAnnot"))
	-category   ("Other items.Viewport items")
	-command	("{\n" +
				 "    string $currentPanel = `getPanel -underPointer`;\n" +
				 "    if (\"\" == $currentPanel) {\n" +
				 "        $currentPanel = `getPanel -withFocus`;\n" +
				 "    }\n" +
				 "    if (\"\" != $currentPanel) {\n" +
				 "        string $panelType = `getPanel -typeOf $currentPanel`;\n" +
				 "        if ($panelType ==  \"modelPanel\") {\n" +
				 "			  int $usingDefaultMaterial = `modelEditor -query -useDefaultMaterial $currentPanel`;\n" +
				 "            modelEditor -edit -useDefaultMaterial (1 - $usingDefaultMaterial) $currentPanel;\n" +
				 "        } \n" +
				 "    }\n" +
				 "}\n")
	ToggleUseDefaultMaterial;

//	Display Light for current panel.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisplayLightAnnot"))
	-category   ("Other items.Viewport items")
	-command    ( "{" +
				   "  string $currentPanel = `getPanel -withFocus`; " +
				   "  string $panelType = `getPanel -to $currentPanel`;" +
				   "  if ($panelType ==  \"modelPanel\") { " +
				   "   modelEditor -edit -dl \"all\" $currentPanel;" +
						$lightDisplayIvm +
				   "  } else if (`isTrue \"MayaCreatorExists\"` && `scriptedPanel -ex $currentPanel` && `scriptedPanel -q -type $currentPanel` == \"dynPaintScriptedPanelType\") {" +
				   "     dynPaintEditor -e -dtx 1 -dsl \"all\" $gDynPaintEditorName;" +
						$lightDisplayIvm +
				   "  } else if ($panelType ==  \"scriptedPanel\" ) {\n " +
  				   "	 string $scriptedPanelType = `scriptedPanel -query -type $currentPanel`; \n " +
				   "	 if($scriptedPanelType != \"nodeEditorPanel\" && $scriptedPanelType != \"hyperShadePanel\"){ \n " +
				   "	   string $cmd = \"modelEditor -edit -displayLights \\\"all\\\" \"; \n" +
				   "	   scriptedPanelRunTimeCmd( $cmd, $currentPanel ); \n" +
						$lightDisplayIvm +
				   "    }\n" +
				   "  }" +
				   "}"
				   )
	DisplayLight;

//	Toggle Backface Culling for current panel
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleBackfaceCullingAnnot"))
	-category   ("Other items.Viewport items")
	-command    ( "{" +
				   "  string $currentPanel = `getPanel -withFocus`; " +
				   "  string $panelType = `getPanel -to $currentPanel`;" +
				   "  if ($panelType ==  \"modelPanel\") { " +
				   "    int $culling = `modelEditor -query -backfaceCulling $currentPanel`;" +
				   "    modelEditor -edit -backfaceCulling (1 - $culling) $currentPanel;" +
				   "  } else if ($panelType ==  \"scriptedPanel\") { " +
				   "	scriptedPanelRunTimeCmdBackfaceCulling( $currentPanel ); \n" +
				   "  }" +
				   "}")
	ToggleBackfaceCulling;

//	Shading Marking Menu.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisplayShadingMarkingMenuAnnot"))
	-category   ("Other items.Viewport items")
	-command    ("buildShadingMM")
	DisplayShadingMarkingMenu;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDisplayShadingMarkingMenuPopDownAnnot"))
	-category   ("Other items.Viewport items")
	-command    ("MarkingMenuPopDown")
	DisplayShadingMarkingMenuPopDown;

//	Frame selection in current panel view.
//
runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFrameSelectedAnnot"))
	-category   ("Other items.Viewport items")
	-command    ("fitPanel -selected")
	FrameSelected;

//	Frame all in current panel view.
//
runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kFrameAllAnnot"))
	-category   ("Other items.Viewport items")
	-command    ("fitPanel -all")
	FrameAll;

//	Activate Viewport 2.0
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kActivateViewport20Annot"))
	-category   ("Other items.Viewport items")
	-command    ( "{" +
				   "  string $currentPanel = `getPanel -withFocus`; " +
				   "  string $panelType = `getPanel -to $currentPanel`;" +
				   "  if ($panelType ==  \"modelPanel\") { " +
				   "     setRendererInModelPanel \"vp2Renderer\" $currentPanel;" +
				   "  } else if ($panelType ==  \"scriptedPanel\") { " +
				   "	string $cmd = \"setRendererInModelPanel \\\"vp2Renderer\\\" \"; \n" +
				   "	scriptedPanelRunTimeCmd( $cmd, $currentPanel ); \n" +
				   "  }" +
				   "}")
	ActivateViewport20;

//	Show select all Marking Menu.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllMarkingMenuAnnot"))
	-category   ("Other items.Viewport items")
	-command    ("buildSelectAllMM")
	SelectAllMarkingMenu;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllMarkingMenuPopDownAnnot"))
	-category   ("Other items.Viewport items")
	-command    ("buildSelectAllMM_release")
	SelectAllMarkingMenuPopDown;

// Toggle isolate select
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleIsolateSelectAnnot"))
	-category   ("Other items.Viewport items")
	-command    ( "{" +
				   "  string $currentPanel = `getPanel -withFocus`; " +
				   "  string $state = `isolateSelect -q -state $currentPanel`;" +
				   "  if ($state)" +
				   "    enableIsolateSelect $currentPanel false;" +
				   "  else" +
				   "    enableIsolateSelect $currentPanel true;" +
				   "}" )
	ToggleIsolateSelect;

//
//	Status Line.
//
// ----------------------------------------------------------------------

//	Snap to curve.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSnapToCurveAnnot"))
	-category   ("Other items.Status Line")
	-command    ("snapMode -curve (!`snapMode -q -curve`)")
	SnapToCurve;

//	Snap to grid.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSnapToGridAnnot"))
	-category   ("Other items.Status Line")
	-command    ("snapMode -grid (!`snapMode -q -grid`)")
	SnapToGrid;


//	Snap to pixel.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSnapToPixelAnnot"))
	-category   ("Other items.Status Line")
	-command    ("snapMode -pixelSnap (!`snapMode -q -pixelSnap`)")
	SnapToPixel;

//	Snap to point.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSnapToPointAnnot"))
	-category   ("Other items.Status Line")
	-command    ("snapMode -point (!`snapMode -q -point`)")
	SnapToPoint;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSnapToMeshCenterAnnot"))
	-category   ("Other items.Status Line")
	-command    ("snapMode -mc (!`snapMode -q -mc`)")
	SnapToMeshCenter;

//	Toggle selection mode.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectToggleModeAnnot"))
	-category   ("Menu items.Common.Select")
	-command    ("toggleSelMode")
	SelectToggleMode;

//	Selection masks.
//
string $selectVertexIvm = ("\ninViewMessage -smg \"" + (uiRes("m_defaultRunTimeCommands.kIvmSelectVertex")) + "\" -fade -pos topCenter;\n");
string $selectEdgeIvm = ("\ninViewMessage -smg \"" + (uiRes("m_defaultRunTimeCommands.kIvmSelectEdge")) + "\" -fade -pos topCenter;\n");
string $selectFaceIvm = ("\ninViewMessage -smg \"" + (uiRes("m_defaultRunTimeCommands.kIvmSelectface")) + "\" -fade -pos topCenter;\n");
string $selectMultiCompIvm = ("\ninViewMessage -smg \"" + (uiRes("m_defaultRunTimeCommands.kIvmSelectMultiComp")) + "\" -fade -pos topCenter;\n");
string $selectUVIvm = ("\ninViewMessage -smg \"" + (uiRes("m_defaultRunTimeCommands.kIvmSelectUV")) + "\" -fade -pos topCenter;\n");
string $selectVertexFaceIvm = ("\ninViewMessage -smg \"" + (uiRes("m_defaultRunTimeCommands.kIvmSelectVertexFace")) + "\" -fade -pos topCenter;\n");
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectVertexMaskAnnot"))
	-category   ("Menu items.Common.Select.Components")
	-command    ("setSelectMode components Components; " +
	             "selectType -smp 1 -sme 0 -smf 0 -smu 0 -pv 1 -pe 0 " +
				 "-pf 0 -puv 0;"
				 +$selectVertexIvm
				 )
	SelectVertexMask;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectEdgeMaskAnnot"))
	-category   ("Menu items.Common.Select.Components")
	-command    ("setSelectMode components Components; " +
	             "selectType -smp 0 -sme 1 -smf 0 -smu 0 -pv 0 -pe 1 " +
				 "-pf 0 -puv 0;"
				 +$selectEdgeIvm
				 )
	SelectEdgeMask;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectFacetMaskAnnot"))
	-category   ("Menu items.Common.Select.Components")
	-command    ("setSelectMode components Components; " +
	             "selectType -smp 0 -sme 0 -smf 1 -smu 0 -pv 0 -pe 0 " +
				 "-pf 1 -puv 0;"
				 +$selectFaceIvm
				 )
	SelectFacetMask;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectMultiCompMaskAnnot"))
	-category   ("Menu items.Common.Select.Components")
	-command    ("setSelectMode components Components; " +
	             "selectType -smp 0 -sme 0 -smf 0 -smu 0 -pv 0 -pe 0 " +
				 "-pf 0 -puv 0 -meshComponents 1; " +
				 $selectMultiCompIvm)
	SelectMultiComponentMask;	

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectUVMaskAnnot"))
	-category   ("Menu items.Common.Select.Components")
	-command    ("setSelectMode components Components; " +
	             "selectType -pv 0 -pe 0 -pf 0 -puv 1 -smp 0 -sme 0 -smf 0 -smu 1;"
				 +$selectUVIvm
				 )
	SelectUVMask;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectVertexFaceMaskAnnot"))
	-category   ("Menu items.Common.Select.Components")
	-command    ("setSelectMode components Components; "
		+ "selectType -pvf 1 -pe 0 -pf 0 -puv 0;"
				+$selectVertexFaceIvm
				)
	SelectVertexFaceMask;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectUVShellAMaskAnnot"))
	-category	("Menu items.Common.Select.Components")
	-command	("string $obj[] = `ls -sl -tail 1 -typ transform -typ shape`; " +
				 "if(size($obj) == 0) { $obj = `ls -hl -tail 1 -typ transform -typ shape`; } " +
				 "source \"dagMenuProc.mel\"; " + 
				 "doMenuComponentSelection( $obj[0], \"meshUVShell\" );")
	SelectMeshUVShell;


// Nurbs surface/curve components
//

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectCVsAnnot"))
	-category   ("Menu items.Common.Select.Components")
	-command    ("setSelectMode vertices Components;")
	SelectCVsMask;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectPointsAnnot"))
	-category   ("Menu items.Common.Select.Components")
	-command    ("setSelectMode points Components;")
	SelectPointsMask;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectSurfacePointsAnnot"))
	-category   ("Menu items.Common.Select.Components")
	-command    ("setSelectMode surfacePoints Components;")
	SelectSurfacePointsMask;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectLinesAnnot"))
	-category   ("Menu items.Common.Select.Components")
	-command    ("setSelectMode lines Components;")
	SelectLinesMask;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectHullsAnnot"))
	-category   ("Menu items.Common.Select.Components")
	-command    ("setSelectMode hulls Components;")
	SelectHullsMask;



//	Select all input/output.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllInputAnnot"))
	-category   ("Other items.Status Line")
	-command    ("selectAllInputOutput false")
	SelectAllInput;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectAllOutputAnnot"))
	-category   ("Other items.Status Line")
	-command    ("selectAllInputOutput true")
	SelectAllOutput;

//
//	Tools.
//
// ----------------------------------------------------------------------

//	Enter edit mode.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnterEditModeAnnot"))
	-category   ("Other items.Tools")
	-command    ("ctxEditMode")
	EnterEditMode;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnterEditModeAnnotPress"))
	-category   ("Other items.Tools")
	-command    ("ctxEditMode -buttonDown")
	EnterEditModePress;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kEnterEditModeAnnotRelease"))
	-category   ("Other items.Tools")
	-command    ("ctxEditMode -buttonUp")
	EnterEditModeRelease;

//	Show manipulators.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowManipulatorsAnnot"))
	-category   ("Other items.Tools")
	-command    ("setToolTo ShowManips")
	ShowManipulators;

//	Select tool.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectToolAnnot"))
	-category   ("Other items.Tools")
	-command    ("global string $gSelect; setToolTo $gSelect;")
	SelectTool;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLassoToolAnnot"))
	-category   ("Other items.Tools")
	-command    ("global string $gLasso; setToolTo $gLasso;")
	LassoTool;

//	Select the non sacred tool.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNonSacredToolAnnot"))
	-category   ("Other items.Tools")
	-command    ("if ($gNonSacredTool != \"\") {ctxCompletion;  " +
	             "setToolTo $gNonSacredTool;}")
	NonSacredTool;

//	Show translate Marking Menu.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTranslateToolMarkingMenuAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("buildXYZTransMM")
	TranslateToolMarkingMenu;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTranslateToolMarkingMenuPopDownAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("MarkingMenuPopDown")
	TranslateToolMarkingMenuPopDown;

//	Show rotate Marking Menu.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRotateToolMarkingMenuAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("buildXYZRotMM")
	RotateToolMarkingMenu;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRotateToolMarkingMenuPopDownAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("MarkingMenuPopDown")
	RotateToolMarkingMenuPopDown;

//	Show scale Marking Menu.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kScaleToolMarkingMenuAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("buildXYZScaleMM")
	ScaleToolMarkingMenu;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kScaleToolMarkingMenuPopDownAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("MarkingMenuPopDown")
	ScaleToolMarkingMenuPopDown;

//	Translate with snap Marking Menu
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTranslateToolWithSnapMarkingMenuAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("buildTranslateMM")
	TranslateToolWithSnapMarkingMenu;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTranslateToolWithSnapMarkingMenuPopDownAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("destroySTRSMarkingMenu MoveTool")
	TranslateToolWithSnapMarkingMenuPopDown;

//	Rotate with snap Marking Menu
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRotateToolWithSnapMarkingMenuAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("buildRotateMM")
	RotateToolWithSnapMarkingMenu;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRotateToolWithSnapMarkingMenuPopDownAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("destroySTRSMarkingMenu RotateTool")
	RotateToolWithSnapMarkingMenuPopDown;

//	Scale with snap Marking Menu
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kScaleToolWithSnapMarkingMenuAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("buildScaleMM")
	ScaleToolWithSnapMarkingMenu;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kScaleToolWithSnapMarkingMenuPopDownAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("destroySTRSMarkingMenu ScaleTool")
	ScaleToolWithSnapMarkingMenuPopDown;

//	Show select object Marking Menu.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectToolMarkingMenuAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("buildSelectObjectMM")
	SelectToolMarkingMenu;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectToolMarkingMenuPopDownAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("MarkingMenuPopDown")
	SelectToolMarkingMenuPopDown;

//	Show select component Marking Menu.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectComponentToolMarkingMenuAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("buildSelectComponentMM")
	SelectComponentToolMarkingMenu;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectComponentToolMarkingMenuPopDownAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("MarkingMenuPopDown")
	SelectComponentToolMarkingMenuPopDown;

//	Show select polygon Marking Menu.
//
runTimeCommand  -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectPolygonToolMarkingMenuAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("buildPolyMM")
	SelectPolygonToolMarkingMenu;

runTimeCommand  -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectPolygonToolMarkingMenuPopDownAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("MarkingMenuPopDown")
	SelectPolygonToolMarkingMenuPopDown;

//	Show select mask Marking Menu.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectMaskToolMarkingMenuAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("buildSelectMaskMM")
	SelectMaskToolMarkingMenu;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectMaskToolMarkingMenuPopDownAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("MarkingMenuPopDown")
	SelectMaskToolMarkingMenuPopDown;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectToolOptionsMarkingMenuAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("buildSelectMM")
	SelectToolOptionsMarkingMenu;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectToolOptionsMarkingMenuPopDownAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("MarkingMenuPopDown")
	SelectToolOptionsMarkingMenuPopDown;

//	Time Dragger Tool (aka Virtual Time Slider).
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTimeDraggerToolActivateAnnot"))
	-category   ("Other items.Tools")
	-command    ("storeLastAction( \"restoreLastContext \" + `currentCtx` );" +
	             "setToolTo TimeDragger")
	TimeDraggerToolActivate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTimeDraggerToolDeactivateAnnot"))
	-category   ("Other items.Tools")
	-command    ("invokeLastAction")
	TimeDraggerToolDeactivate;

//	Move Nearest Picked Key tool.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMoveNearestPickedKeyToolActivateAnnot"))
	-category   ("Other items.Tools")
	-command    ("storeLastAction( \"restoreLastContext \" + `currentCtx` );" +
	             "setToolTo directKeySuperContext")
	MoveNearestPickedKeyToolActivate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMoveNearestPickedKeyToolDeactivateAnnot"))
	-category   ("Other items.Tools")
	-command    ("invokeLastAction")
	MoveNearestPickedKeyToolDeactivate;

//	Add Key tool.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddKeyToolActivateAnnot"))
	-category   ("Other items.Tools")
	-command    ("storeLastAction( \"restoreLastContext \" + `currentCtx` );" +
	             "setToolTo setKeySuperContext")
	AddKeyToolActivate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAddKeyToolDeactivateAnnot"))
	-category   ("Other items.Tools")
	-command    ("invokeLastAction")
	AddKeyToolDeactivate;

//	Insert Key tool.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInsertKeyToolActivateAnnot"))
	-category   ("Other items.Tools")
	-command    ("storeLastAction( \"restoreLastContext \" + `currentCtx` );" +
	             "setToolTo insertKeySuperContext")
	InsertKeyToolActivate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kInsertKeyToolDeactivateAnnot"))
	-category   ("Other items.Tools")
	-command    ("invokeLastAction")
	InsertKeyToolDeactivate;

//	Invoke last action.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLastActionToolAnnot"))
	-category   ("Other items.Tools")
	-command    ("invokeLastAction")
	LastActionTool;

//	Complete current tool.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCompleteCurrentToolAnnot"))
	-category   ("Other items.Tools")
	-command    ("ctxCompletion")
	CompleteCurrentTool;

//	Abort current tool.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kAbortCurrentToolAnnot"))
	-category   ("Other items.Tools")
	-command    ("ctxAbort")
	AbortCurrentTool;

// Unfold3D brush tool
// 

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kActivateUnfold3DBrushSizeAnnot"))
	-category	("Other items.Brush Tools")
	-command ( "{" + 
				" string $ctx = `currentCtx`; " +
				" string $ctxType = `contextInfo -c $ctx`; " +
				" if ($ctxType == \"Unfold3DBrush\") { " + 
				"	Unfold3DContext -e -ron $ctx;" +
				" } " +
				"} "
				)
	-hotkeyCtx ("Unfold3DBrush")	
	U3DBrushSizeOn;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeactivateUnfold3DBrushSizeAnnot"))
	-category	("Other items.Brush Tools")
	-command ( "{" + 
				" string $ctx = `currentCtx`; " +
				" string $ctxType = `contextInfo -c $ctx`; " +
				" if ($ctxType == \"Unfold3DBrush\") { " + 
				"	Unfold3DContext -e -rof $ctx;" +
				" } " +
				"} "
				)	
	-hotkeyCtx ("Unfold3DBrush")	
	U3DBrushSizeOff;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kActivateUnfold3DBrushPressureAnnot"))
	-category	("Other items.Brush Tools")
	-command ( "{" + 
				" string $ctx = `currentCtx`; " +
				" string $ctxType = `contextInfo -c $ctx`; " +
				" if ($ctxType == \"Unfold3DBrush\") { " + 
				"	Unfold3DContext -e -pon $ctx;" +
				" } " +
				"} "
				)	
	-hotkeyCtx ("Unfold3DBrush")	
	U3DBrushPressureOn;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeactivateUnfold3DBrushPressureAnnot"))
	-category	("Other items.Brush Tools")
	-command ( "{" + 
				" string $ctx = `currentCtx`; " +
				" string $ctxType = `contextInfo -c $ctx`; " +
				" if ($ctxType == \"Unfold3DBrush\") { " + 
				"	Unfold3DContext -e -pof $ctx;" +
				" } " +
				"} "
				)
	-hotkeyCtx ("Unfold3DBrush")	
	U3DBrushPressureOff;


// UV brush tool
// 

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kActivateTexSculptBrushSizeAnnot"))
	-category	("Other items.Brush Tools")
	-command ( "{" + 
				" string $ctx = `currentCtx`; " +
				" string $ctxType = `contextInfo -c $ctx`; " +
				" if ($ctxType == \"texSculptCacheContext\") { " + 
				"	texSculptCacheContext -e -adjustSize 1 $ctx;" +
				" } " +
				"} "
				)
	-hotkeyCtx ("texSculptCacheContext")
	TexSculptActivateBrushSize;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeactivateTexSculptBrushSizeAnnot"))
	-category	("Other items.Brush Tools")
	-command ( "{" + 
				" source texSculptCacheContextProperties;" +
				" string $ctx = `currentCtx`; " +
				" string $ctxType = `contextInfo -c $ctx`; " +
				" if ($ctxType == \"texSculptCacheContext\") { " + 
				"	texSculptCacheContext -e -adjustSize 0 $ctx;" +
				"	$size = `texSculptCacheContext -q -size $ctx`;" +
				"	texSculptCacheContextSetUnfoldBrushSize( $size );" +
				" } " +
				"} "
				)	
	-hotkeyCtx ("texSculptCacheContext")
	TexSculptDeactivateBrushSize;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kActivateTexSculptBrushStrengthAnnot"))
	-category	("Other items.Brush Tools")
	-command ( "{" + 
				" string $ctx = `currentCtx`; " +
				" string $ctxType = `contextInfo -c $ctx`; " +
				" if ($ctxType == \"texSculptCacheContext\") { " + 
				"	texSculptCacheContext -e -adjustStrength 1 $ctx;" +
				" } " +
				"} "
				)
	-hotkeyCtx ("texSculptCacheContext")					
	TexSculptActivateBrushStrength;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeactivateTexSculptBrushStrengthAnnot"))
	-category	("Other items.Brush Tools")
	-command ( "{" + 
				" string $ctx = `currentCtx`; " +
				" string $ctxType = `contextInfo -c $ctx`; " +
				" if ($ctxType == \"texSculptCacheContext\") { " + 
				"	texSculptCacheContext -e -adjustStrength 0 $ctx;" +
				" } " +
				"} "
				)
	-hotkeyCtx ("texSculptCacheContext")
	TexSculptDeactivateBrushStrength;

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kActivateTexSewBrushSizeAnnot"))
	-category	("Other items.Brush Tools")
	-command ( "{" + 
				" string $ctx = `currentCtx`; " +
				" string $ctxType = `contextInfo -c $ctx`; " +
				" if ($ctxType == \"texCutContext\") { " + 
				"	texCutContext -e -adjustSize 1 $ctx;" +
				" } " +
				"} "
				)
	-hotkeyCtx ("texCutContext")
	TexSewActivateBrushSize;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeactivateTexSewBrushSizeAnnot"))
	-category	("Other items.Brush Tools")
	-command ( "{" +  
				" string $ctx = `currentCtx`; " +
				" string $ctxType = `contextInfo -c $ctx`; " +
				" if ($ctxType == \"texCutContext\") { " + 
				"	texCutContext -e -adjustSize 0 $ctx;" +
				" } " +
				"} "
				)	
	-hotkeyCtx ("texCutContext")
	TexSewDeactivateBrushSize;

runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kTexSculptCacheUnPinAll"))
		-category   ("Other items.Brush Tools")
		-command    ( "{" + 
				" string $ctx = `currentCtx`; " +
				" string $ctxType = `contextInfo -c $ctx`; " +
				" if ($ctxType == \"texSculptCacheContext\") { " + 
				" texSculptCacheContext -e -floodPin 0.0 $ctx;" +
				" } " +
				"} "
				)
		-hotkeyCtx ("texSculptCacheContext")
		TexSculptUnpinAll;

runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kTexSculptCacheInvertPin"))
		-category   ("Other items.Brush Tools")
		-command    ( "{" + 
				" string $ctx = `currentCtx`; " +
				" string $ctxType = `contextInfo -c $ctx`; " +
				" if ($ctxType == \"texSculptCacheContext\") { " + 
				" texSculptCacheContext -e -floodPin -1.0 $ctx;" +
				" } " +
				"} "
				)
		-hotkeyCtx ("texSculptCacheContext")
		TexSculptInvertPin;


//
//	Playback Controls.
//
// ----------------------------------------------------------------------

//	Move to next key.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNextKeyAnnot"))
	-category   ("Menu items.Animation.Playback")
	-command    ("currentTime -edit `findKeyframe -timeSlider -which next`")
	NextKey;

//	Move to previous key.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPreviousKeyAnnot"))
	-category   ("Menu items.Animation.Playback")
	-command    ("currentTime -edit `findKeyframe -timeSlider  " +
	             "-which previous`")
	PreviousKey;

//	Move to next frame.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNextFrameAnnot"))
	-category   ("Menu items.Animation.Playback")
	-command    ("nextOrPreviousFrame \"next\"")
	NextFrame;

//	Move to previous frame.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPreviousFrameAnnot"))
	-category   ("Menu items.Animation.Playback")
	-command    ("nextOrPreviousFrame \"previous\"")	
	PreviousFrame;

//	Move to next grease pencil frame.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNextGreasePencilFrameAnnot"))
	-category   ("Other items.Grease Pencil Tool")
	-command    ("TimeSliderNextGreaseFrame")
	NextGreasePencilFrame;

//	Move to previous grease pencil frame.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPreviousGreasePencilFrameAnnot"))
	-category   ("Other items.Grease Pencil Tool")
	-command    ("TimeSliderPrevGreaseFrame")	
	PreviousGreasePencilFrame;

//	Start playback forwards.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPlaybackForwardAnnot"))
	-category   ("Menu items.Animation.Playback")
	-command    ("evalEcho(\"play -forward true\")")
	-showInHotkeyEditor false
	PlaybackForward;

//	Start playback backwards.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPlaybackBackwardAnnot"))
	-category   ("Menu items.Animation.Playback")
	-command    ("evalEcho(\"play -forward false\")")
	PlaybackBackward;

//	Stop playback.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPlaybackStopAnnot"))
	-category   ("Menu items.Animation.Playback")
	-command    ("evalEcho(\"play -state off\")")
	PlaybackStop;

//	Toggle playback.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPlaybackToggleAnnot"))
	-category   ("Menu items.Animation.Playback")
	-command    ("togglePlayback")
	PlaybackToggle;

//
//	Navigation commands.
//
// ----------------------------------------------------------------------

//	Turn off Transform no Selection mode.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTransformNoSelectOffToolAnnot"))
	-category   ("Other items.Navigation")
	-command    ("selectPref -xformNoSelect false")
	TransformNoSelectOffTool;

//	Turn on Transform no Selection mode.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTransformNoSelectOnToolAnnot"))
	-category   ("Other items.Navigation")
	-command    ("selectPref -xformNoSelect true")
	TransformNoSelectOnTool;

//	Tumble Tool.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTumbleToolAnnot"))
	-category   ("Other items.Navigation")
	-command    ("setToolTo tumbleContext")
	TumbleTool;

//	Track Tool.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTrackToolAnnot"))
	-category   ("Other items.Navigation")
	-command    ("setToolTo trackSuperContext")
	TrackTool;

//	Dolly Tool.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDollyToolAnnot"))
	-category   ("Other items.Navigation")
	-command    ("setToolTo dollySuperContext")
	DollyTool;

//	Zoom Tool.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kZoomToolAnnot"))
	-category   ("Other items.Navigation")
	-command    ("setToolTo boxZoomSuperContext")
	ZoomTool;

//  2D Pan/Zoom Tool.
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPanZoomToolAnnot"))
	-category   ("Other items.Navigation")
	-command    ("global string $gPanZoomCtx;\nsetToolTo $gPanZoomCtx")
	PanZoomTool;

//  Walk Tool.
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWalkToolAnnot"))
	-category   ("Other items.Navigation")
	-command    ("setToolTo walkContext")
	WalkTool;

//	SteeringWheel
//
if (exists("steeringWheel"))
{
	runTimeCommand -default true
		-annotation (uiRes("m_defaultRunTimeCommands.kToggleSteeringWheel"))
		-category	("Other items.Navigation")
		-command	("toggleSteeringWheel")
		ToggleSteeringWheel;
}

//
//	Application commands.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowModelingUIAnnot"))
	-category   ("Other items.Menu Sets")
	// find the mode, and set (this should really be a seperate function?)
	-command    ( "if (`menuSet -q -exists modelingMenuSet`) { workingMode modelingMenuSet; } else { warning \"" + (uiRes("m_defaultRunTimeCommands.kModelingWarning")) + "\"; }" )
	ShowModelingUI;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowRiggingUIAnnot"))
	-category   ("Other items.Menu Sets")
	// find the mode, and set (this should really be a seperate function?)
	-command    ( "if (`menuSet -q -exists riggingMenuSet`) { workingMode riggingMenuSet; } else { warning \"" + (uiRes("m_defaultRunTimeCommands.kRiggingWarning")) + "\"; }" )
	ShowRiggingUI;

//	Show Animation UI.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowAnimationUIAnnot"))
	-category   ("Other items.Menu Sets")
	// find the mode, and set (this should really be a seperate function?)
	-command    ( "if (`menuSet -q -exists animationMenuSet`) { workingMode animationMenuSet; } else { warning \"" + (uiRes("m_defaultRunTimeCommands.kAnimationWarning")) + "\"; }" )
	ShowAnimationUI;

//	Show Dynamics UI.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowDynamicsUIAnnot"))
	-category   ("Other items.Menu Sets")
	// find the mode, and set (this should really be a seperate function?)
	-command    ( "if (`menuSet -q -exists dynamicsMenuSet`) { workingMode dynamicsMenuSet; } else { warning \"" + (uiRes("m_defaultRunTimeCommands.kDynamicsWarning")) + "\"; }" )
	ShowDynamicsUI;

//	Show Rendering UI.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowRenderingUIAnnot"))
	-category   ("Other items.Menu Sets")
	// find the mode, and set (this should really be a seperate function?)
	-command    ( "if (`menuSet -q -exists renderingMenuSet`) { workingMode renderingMenuSet; } else { warning \"" + (uiRes("m_defaultRunTimeCommands.kRenderingWarning")) + "\"; }" )
	ShowRenderingUI;

//	Show All UI.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowAllUIAnnot"))
	-category   ("Other items.Menu Sets")
	-command    ("workingMode \"all\"")
	ShowAllUI;

//
//	Miscellaneous.
//
// ----------------------------------------------------------------------

//	Pop down the Marking Menu.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMarkingMenuPopDownAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("if (`popupMenu -exists tempMM`) { deleteUI tempMM; }" +
				 "if (`popupMenu -exists tempMM2`) { deleteUI tempMM2; }")
	-showInHotkeyEditor false
	MarkingMenuPopDown;

//	Go to working frame.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGoToWorkingFrameAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("currentWorkingFrame \"goto\"")
	GoToWorkingFrame;

//	Set current frame to be the working frame.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetWorkingFrameAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("currentWorkingFrame \"store\"")
	SetWorkingFrame;

//	Pop current pane.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPanePopAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("panePop")
	-showInHotkeyEditor false
	PanePop;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCloseFrontWindowAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("closeFrontWindow")
	CloseFrontWindow;

//	Set keyboard focus to Command Line.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetFocusToCommandLineAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("global string $gCommandLine; setFocus $gCommandLine;")
	SetFocusToCommandLine;

//	Set keyboard focus to Numeric Input Line.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSetFocusToNumericInputLineAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("global string $gNumericalInputXField; " +
	             "setFocus $gNumericalInputXField;")
	SetFocusToNumericInputLine;

//	Show the Attribute Editor or swap with Channel Box.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowAttributeEditorOrChannelBoxAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("if(`isAttributeEditorRaised`){if(!`isChannelBoxVisible`){setChannelBoxVisible(1);} else {raiseChannelBox;}" +
	             "}else{openAEWindow;}")
	ShowAttributeEditorOrChannelBox;

if(!`about -mac`) {
//	DO-NOT Hide Main Menu Bar on Mac OS X
//	Toggle visibility of main menubar.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleMainMenubarAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("if (`optionVar -q mainWindowMenubarVis`) " +
	             "{setMainMenubarVisible 0;} else {setMainMenubarVisible 1;}")
	ToggleMainMenubar;
}
//	Toggle visibility of panel menubars.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kTogglePanelMenubarAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("if (`optionVar -q allowMenusInPanels`) " +
	             "{toggleMenuBarsInAllPanels 0;} else {toggleMenuBarsInAllPanels 1;}")
	TogglePanelMenubar;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleModelEditorIconbarAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("if (`optionVar -q collapseIconBarsInPanels`) " +
	             "{toggleModelEditorBarsInAllPanels 0;} else {toggleModelEditorBarsInAllPanels 1;}")
	ToggleModelEditorBars;

//	Hotbox display style
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFullHotboxDisplayAnnot"))
	-category   ("Other items.Hotbox")
	-command    ("hotBox -dh")
	FullHotboxDisplay;

//	Pixel move.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPixelMoveUpAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("pixelMove 0 1")
	PixelMoveUp;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPixelMoveDownAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("pixelMove 0 -1")
	PixelMoveDown;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPixelMoveLeftAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("pixelMove -1 0")
	PixelMoveLeft;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPixelMoveRightAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("pixelMove 1 0")
	PixelMoveRight;

// View dependant move
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMoveUpAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("editorDependentMove \"up\"")
	MoveUp;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMoveDownAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("editorDependentMove \"down\"")
	MoveDown;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMoveLeftAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("editorDependentMove \"left\"")
	MoveLeft;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMoveRightAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("editorDependentMove \"right\"")
	MoveRight;

//	Pick walking.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPickWalkUpAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("pickWalkUp")
	PickWalkUp;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPickWalkDownAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("pickWalkDown")
	PickWalkDown;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPickWalkLeftAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("pickWalkLeft")
	PickWalkLeft;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPickWalkRightAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("pickWalkRight")
	PickWalkRight;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPickWalkInAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("pickWalkIn")
	PickWalkIn;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPickWalkOutAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("pickWalkOut")
	PickWalkOut;

//	Repeat last action at mouse position.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kRepeatLastActionAtMousePositionAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("{float $pos[] = `autoPlace -um`;repeatLast;"
		+ "move $pos[0] $pos[1] $pos[2];}")
	RepeatLastActionAtMousePosition;

//	Go to min frame.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGoToMinFrameAnnot"))
	-category   ("Menu items.Animation.Playback")
	-command    ("currentTime -e `playbackOptions -query -min`")
	GoToMinFrame;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGoToMaxFrameAnnot"))
	-category   ("Menu items.Animation.Playback")
	-command    ("currentTime -e `playbackOptions -query -max`")
	GoToMaxFrame;
	
//	Marking menu for switching menubar mode.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUIModeMarkingMenuAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("menubarHotkeyMM")
	UIModeMarkingMenu;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUIModeMarkingMenuPopDownAnnot"))
	-category   ("Other items.Marking menus")
	-command    ("MarkingMenuPopDown")
	UIModeMarkingMenuPopDown;

//	Cycle IK handle sticky state.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCycleIKHandleStickyStateAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("ikHandleCycleSticky")
	CycleIKHandleStickyState;

//	The following commands change the display smoothness of active (i.e.
//	selected) objects.  They are similar in function to the menu items
//	under "Display->NURBS Smoothness->...", however the menu items can be
//	made to operate on all objects, not just selected ones.  Also, the
//	menu items have option boxes for setting various parameters, whereas
//	the commands below have fixed parameters.
//
//	So, in short, do not remove the below commands thinking that their
//	functionality is already available in the
//	"Display->NURBS Smoothness->..." menu.  The commands are supposed
//	to be there, in addition to the menu items.
//

//	Default Display (for polygon objects)
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDefaultQualityDisplayAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("setDisplaySmoothness 0")
	DefaultQualityDisplay;

//	Low Quality Display.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kLowQualityDisplayAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("setDisplaySmoothness 1")
	LowQualityDisplay;

//	Medium Quality Display.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kMediumQualityDisplayAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("setDisplaySmoothness 2")
	MediumQualityDisplay;

//	High Quality Display.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHighQualityDisplayAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("setDisplaySmoothness 3")
	HighQualityDisplay;

//	Quality Display Marking Menu.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kQualityDisplayMarkingMenuAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("buildQualityDisplayMM")
	QualityDisplayMarkingMenu;
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kQualityDisplayMarkingMenuPopDownAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("buildQualityDisplayMM_release")
	QualityDisplayMarkingMenuPopDown;

//	Select Next Intermediate Object
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectNextIntermediatObjectAnnot"))
	-category   ("Other items.Miscellaneous")
	-command    ("cycleIntermediateObjectSibling 1")
	SelectNextIntermediatObject;

//	Enable isolate select.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectIsolateAnnot"))
	-category   ("Other items.Viewport items")
	-command    ( "{" +
			"  string $currentPanel = `getPanel -withFocus`; " +
			"  string $panelType = `getPanel -to $currentPanel`;" +
			"  if ($panelType ==  \"modelPanel\") { " +
			"  if (size(`ls -sl`) > 0) { " +
			"		enableIsolateSelect $currentPanel true;" +
			"	} else { " +
			"		enableIsolateSelect $currentPanel false; " +
			"	}" +
			"  }" +
			"}")
	SelectIsolate;

//
//	Manipulator commands.
//
// ----------------------------------------------------------------------

//	Next manipulator handle.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNextManipulatorHandleAnnot"))
	-category   ("Other items.Tool Manipulators")
	-command    ("shuffleManipHandleIndex -next")
	NextManipulatorHandle;

//	Previous manipulator handle.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPreviousManipulatorHandleAnnot"))
	-category   ("Other items.Tool Manipulators")
	-command    ("shuffleManipHandleIndex -previous")
	PreviousManipulatorHandle;

//	Increase manipulator size.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kIncreaseManipulatorSizeAnnot"))
	-category   ("Other items.Tool Manipulators")
	-command    ("manipOptions -r -s 2.0")
	IncreaseManipulatorSize;

//	Increase manipulator size.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDecreaseManipulatorSizeAnnot"))
	-category   ("Other items.Tool Manipulators")
	-command    ("manipOptions -r -s 0.5")
	DecreaseManipulatorSize;

//
//	Hotbox commands.
//
// ----------------------------------------------------------------------

//	Show the Hotbox.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kShowHotboxAnnot"))
	-category   ("Other items.Hotbox")
	-command    ("hotBox")
	ShowHotbox;

//	Hide the Hotbox.
//
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kHideHotboxAnnot"))
	-category   ("Other items.Hotbox")
	-command    ("hotBox -release")
	HideHotbox;

//
//	Artisan commands.
//
// ----------------------------------------------------------------------

//	Opacity virtual slider.
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kModifyOpacityPressAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artActivateScreenSlider \"opacity\"")
	ModifyOpacityPress;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kModifyOpacityReleaseAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artDeactivateScreenSlider")
	ModifyOpacityRelease;

//	Value virtual slider.
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kModifyPaintValuePressAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artActivateScreenSlider \"value\"")
	ModifyPaintValuePress;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kModifyPaintValueReleaseAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artDeactivateScreenSlider")
	ModifyPaintValueRelease;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kModifyStampDepthPressAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artActivateScreenSlider \"stamp_depth\"")
	ModifyStampDepthPress;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kModifyStampDepthReleaseAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artDeactivateScreenSlider")
	ModifyStampDepthRelease;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kModifyUVVectorPressAnnot"))
	-category   ("Other items.Artisan")
	-command ("artActivateScreenSlider \"uv_vector\"")
	ModifyUVVectorPress ;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kModifyUVVectorReleaseAnnot"))
	-category   ("Other items.Artisan")
	-command ("artDeactivateScreenSlider")
	ModifyUVVectorRelease ;

//	Paint Operation popup menu.
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintOperationMarkingMenuPressAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artPaintOperationMenu")
	PaintOperationMarkingMenuPress;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPaintOperationMarkingMenuReleaseAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artDeletePopMenu")
	PaintOperationMarkingMenuRelease;

//	Flood.
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kFloodSurfacesAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artFloodSurfaces")
	FloodSurfaces;

//	Show Wireframe on/off.
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleWireframeInArtisanAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artToggleWireframeDisplay")
	ToggleWireframeInArtisan;

//	Turn colour feedback on/off.
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleColorFeedbackAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artToggleColorFeedback")
	ToggleColorFeedback;

//	Turn multi color feedback on/off.
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleMultiColorFeedbackAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artToggleMultiColorFeedback")
	ToggleMultiColorFeedback;

//	Copy vertex skin weights
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCopyVertexSkinWeightsAnnot"))
	-category   ("Other items.Artisan")
	-command    ("source artAttrSkinCallback;artAttrSkinWeightCopy;")
	CopyVertexSkinWeights;

//	Paste vertex skin weights
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPasteVertexSkinWeightsAnnot"))
	-category   ("Other items.Artisan")
	-command    ("source artAttrSkinCallback;artAttrSkinWeightPaste;")
	PasteVertexSkinWeights;

//	Prev paint mode
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPrevSkinPaintModeAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artAttrSkinPrevPaintMode")
	PrevSkinPaintMode;

//	Next paint mode
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNextSkinPaintModeAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artAttrSkinNextPaintMode")
	NextSkinPaintMode;


//	Pick colour mode.
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPickColorActivateAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artActivatePickColorMode")
	PickColorActivate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPickColorDeactivateAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artDeactivatePickColorMode")
	PickColorDeactivate;

//	PolyBrush commands
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyBrushMarkingMenuAnnot"))
	-category   ("Other items.Artisan")
	-command    ("polyBrushControl -1 0")
	PolyBrushMarkingMenu;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kPolyBrushMarkingMenuPopDownAnnot"))
	-category   ("Other items.Artisan")
	-command    ("deletePopupMenu")
	PolyBrushMarkingMenuPopDown;

//	Reflection.
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleReflectionAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artisanToggleReflection")
	ToggleReflection;

//	Toggle Autosmooth.
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleAutoSmoothAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artPuttyToggleAutosmooth")
	ToggleAutoSmooth;

//	Update Reference Surface.
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUpdateReferenceSurfaceAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artPuttyUpdateReferenceSurface")
	UpdateReferenceSurface;

//	Update Erase Surface.
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUpdateEraseSurfaceAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artPuttyUpdateEraseSurface")
	UpdateEraseSurface;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSculptReferenceVectorMarkingMenuPressAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artPuttyReferenceVectorMarkingMenu")
	SculptReferenceVectorMarkingMenuPress;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSculptReferenceVectorMarkingMenuReleaseAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artDeletePuttyReferenceVectorPopMenu")
	SculptReferenceVectorMarkingMenuRelease;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kActivateGlobalScreenSliderAnnot"))
	-category   ("Other items.Artisan")
	-command ("artActivateGlobalScreenSlider")
	ActivateGlobalScreenSlider ;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeactivateGlobalScreenSliderAnnot"))
	-category   ("Other items.Artisan")
	-command ("artDeactivateGlobalScreenSlider")
	DeactivateGlobalScreenSlider ;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kActivateGlobalScreenSliderModeMarkingMenuAnnot"))
	-category   ("Other items.Artisan")
	-command ("artActivateGlobalScreenSliderModeMarkingMenu")
	ActivateGlobalScreenSliderModeMarkingMenu ;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kDeactivateGlobalScreenSliderModeMarkingMenuAnnot"))
	-category   ("Other items.Artisan")
	-command ("artDeactivateGlobalScreenSliderModeMarkingMenu")
	DeactivateGlobalScreenSliderModeMarkingMenu ;

//
//	Brush Tools.
//
// ----------------------------------------------------------------------

//	Commands for activating/deactivating screen sliders.
//
// New Artisan Tools.
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kModifyUpperRadiusPressAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artActivateScreenSlider \"upper_radius\"")
	ModifyUpperRadiusPress;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kModifyUpperRadiusReleaseAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artDeactivateScreenSlider")
	ModifyUpperRadiusRelease;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kModifyLowerRadiusPressAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artActivateScreenSlider \"lower_radius\"")
	ModifyLowerRadiusPress;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kModifyLowerRadiusReleaseAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artDeactivateScreenSlider")
	ModifyLowerRadiusRelease;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kModifyDisplacementPressAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artActivateScreenSlider \"displacement\"")
	ModifyDisplacementPress;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kModifyDisplacementReleaseAnnot"))
	-category   ("Other items.Artisan")
	-command    ("artDeactivateScreenSlider")
	ModifyDisplacementRelease;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGreasePencilAnnot"))
	-category   ("Other items.Viewport items")
	-command    ("setToolTo greasePencilSuperContext;")
	GreasePencilTool;

//
//	Global disk cache commands.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateDiskCacheAnnot"))
	-category   ("Menu items.Modeling.Deform.Jiggle;Menu items.Rigging.Deform.Jiggle")
	-command    ("performDiskCache true false mcj")
	CreateDiskCache;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kCreateDiskCacheOptionsAnnot"))
	-category   ("Menu items.Modeling.Deform.Jiggle;Menu items.Rigging.Deform.Jiggle")
	-command    ("performDiskCache true true mcj")
	CreateDiskCacheOptions;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kGlobalDiskCacheControlAnnot"))
	-category   ("Menu items.Modeling.Deform.Jiggle;Menu items.Rigging.Deform.Jiggle")
	-command    ("globalDiskCacheControl")
	GlobalDiskCacheControl;

//
//	UV Texture Editor commands.
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectUVShellAnnot"))
	-category   ("Editors.UV Editor")
	-command    ("polySelectBorderShell 0")
	-hotkeyCtx  ("polyTexturePlacementPanel")
	SelectUVShell;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSelectUVBorderAnnot"))
	-category   ("Editors.UV Editor")
	-command    ("polySelectBorderShell 1")
	-hotkeyCtx  ("polyTexturePlacementPanel")
	SelectUVBorder;


//
// Soft Select and Reflection
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kResetSoftSelectOptions"))
	-category   ("Other items.Polygon Modeling")
	-command    ("softSelect -softSelectReset")
	ResetSoftSelectOptions;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kResetReflectionOptions"))
	-category   ("Other items.Polygon Modeling")
	-command    ("symmetricModelling -reset")
	ResetReflectionOptions;


//
//	Node Editor commands
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorPickWalkUpAnnot"))
	-category   ("Editors.Node Editor")
	-command    ("pickWalkUp")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorPickWalkUp;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorPickWalkDownAnnot"))
	-category   ("Editors.Node Editor")
	-command    ("pickWalkDown")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorPickWalkDown;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorPickWalkLeftAnnot"))
	-category   ("Editors.Node Editor")
	-command    ("pickWalkLeft")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorPickWalkLeft;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorPickWalkRightAnnot"))
	-category   ("Editors.Node Editor")
	-command    ("pickWalkRight")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorPickWalkRight;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorAllShapesAnnot"))
	-category   ("Editors.Node Editor")
	-command   	("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -showShapes on -showSGShapes on $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorGraphAllShapes;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorAllShapesExceptShading"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -showShapes on -showSGShapes off $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorGraphAllShapesExceptShading;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorNoShapesAnnot"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -showShapes off -showSGShapes off $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorGraphNoShapes;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorClearGraph"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -rootNode \"\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorGraphClearGraph;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorGraphAddSelected"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEdGraphControl($ned, \"nodeEditor -e -gsl -agm 1 \");\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorGraphAddSelected;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorRemoveSelected"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -rem \"\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorGraphRemoveSelected;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorRearrange"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -frameAll -layout $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorGraphRearrange;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorToggleCreateNodePane"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditorPanel`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditorToggleCreateNode($ned);" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorToggleCreateNodePane;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorToggleSyncedSelection"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "  	nodeEditor -edit -syncedSelection \n" +
				 "   		(!`nodeEditor -query -syncedSelection $ned`) $ned;\n" +
				 "			iconTextButton -e -i1 `nodeEdSyncImage($ned)` ($ned + \"SNEI\") ;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorToggleSyncedSelection;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorGraphUpstream"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEdGraphControl($ned, \"nodeEditor -e -rfs -ups \");\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorGraphUpstream;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorGraphUpdownstream"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEdGraphControl($ned, \"nodeEditor -e -rfs -ups -ds \");\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorGraphUpDownstream;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorGraphDownstream"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEdGraphControl($ned, \"nodeEditor -e -rfs -ds \");\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorGraphDownstream;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorRemoveUnselected"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -removeUnselected $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorGraphRemoveUnselected;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorRemoveUpstream"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -removeUpstream $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorGraphRemoveUpstream;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorRemoveDownstream"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -removeDownstream $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorGraphRemoveDownstream;


// Traversal Depth controls
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorSetTraversalDepthZero"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -fa -rfs -tdl 0 $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorSetTraversalDepthZero;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorReduceTraversalDepth"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		int $dep = `nodeEditor -q -tdl $ned`;\n" +
				 "			if ($dep >= 0) {\n" +
				 "				nodeEditor -e -fa -rfs -tdl ($dep - 1) $ned;}\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorReduceTraversalDepth;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorIncreaseTraversalDepth"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "			int $dep = `nodeEditor -q -tdl $ned`;\n" +
				 "			nodeEditor -e -fa -rfs -tdl ($dep + 1) $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorIncreaseTraversalDepth;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorSetTraversalDepthUnlim"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -fa -rfs -tdl -1 $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorSetTraversalDepthUnlim;
	
	
// LOD & Pin Controls
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorHideAttributes"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -nodeViewMode \"simple\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorHideAttributes;
	
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorShowConnectedAttrs"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -nodeViewMode \"connected\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorShowConnectedAttrs;
	
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorShowAllAttrs"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -nodeViewMode \"all\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorShowAllAttrs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorShowAllCustomAttrs"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -nodeViewMode \"custom:all\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorShowAllCustomAttrs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorShowCustomAttrs"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -nodeViewMode \"custom\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorShowCustomAttrs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorToggleNodeTitleMode"))
	-category 	("Editors.Node Editor")
	-command 	("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		string $mode = `nodeEditor -q -nodeTitleMode $ned`;\n" +
				 "		if ($mode == \"name\"){\n" +
				 "			$mode = \"type\";\n" +
				 "		}\n" +
				 "		else if ($mode == \"type\") {\n" +
				 "			$mode = \"none\";\n" +
				 "		}\n" +
				 "		else if ($mode == \"none\") {\n" +
				 "			$mode = \"name\";\n" +
				 "		}\n" +
				 "		nodeEditor -e -nodeTitleMode ($mode) $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorToggleNodeTitleMode;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorToggleSelectedPins"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -edit -toggleSelectedPins $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorToggleNodeSelectedPins;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorToggleAttrFilter"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -edit -toggleAttrFilter $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorToggleAttrFilter;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorToggleSwatchSize"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -edit -toggleSwatchSize \"\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorToggleNodeSwatchSize;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorSetLargeSwatchSize"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -nodeSwatchSize \"large\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorSetLargeNodeSwatchSize;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorSetSmallSwatchSize"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -nodeSwatchSize \"small\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorSetSmallNodeSwatchSize;
	
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorPinSelected"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -pinSelectedNodes on $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorPinSelected;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorUnpinSelected"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -pinSelectedNodes off $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorUnpinSelected;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorDeleteNode"))
	-category 	("Editors.Node Editor")
	-command 	("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -del $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx 	("nodeEditorPanel")
	NodeEditorDeleteNodes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorCreateNodePopup"))
	-category 	("Editors.Node Editor")
	-command 	("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -bcn $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx 	("nodeEditorPanel")
	NodeEditorCreateNodePopup;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorSelectConnected"))
	-category 	("Editors.Node Editor")
	-command 	("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -selectUpstream -selectDownstream $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx 	("nodeEditorPanel")
	NodeEditorSelectConnected;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorSelectUpStream"))
	-category 	("Editors.Node Editor")
	-command 	("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -selectUpstream $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx 	("nodeEditorPanel")
	NodeEditorSelectUpStream;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorSelectDownStream"))
	-category 	("Editors.Node Editor")
	-command 	("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -selectDownstream $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx 	("nodeEditorPanel")
	NodeEditorSelectDownStream;


// Lock current view
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorToggleLockUnlock"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -edit -addNewNodes \n" +
				 "			(!`nodeEditor -query -addNewNodes $ned`) $ned;\n" +
				 "			iconTextButton -e -i1 `nodeEdLockImage($ned)` ($ned + \"LCB\") ;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorToggleLockUnlock;

// View menu
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorZoomIn"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -scaleView 1.25 $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorToggleZoomIn;
	
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorZoomOut"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -scaleView 0.8 $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorToggleZoomOut;

// Tabs menu
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorCreateTabAnnot"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -createTab -1 \"\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorCreateTab;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorRenameActiveTabAnnot"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -renameTab \n" +
				 "			(`nodeEditor -query -activeTab $ned`) \"\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorRenameActiveTab;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorCloseActiveTabAnnot"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -closeTab \n" +
				 "			(`nodeEditor -query -activeTab $ned`) $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorCloseActiveTab;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorCloseAllTabs"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -closeAllTabs $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorCloseAllTabs;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorRestoreLastClosedTab"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -restoreLastClosedTab $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorRestoreLastClosedTab;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorRedockThisTab"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -redockTab $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorRedockTornOffTab;

// Compound menu
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorCreateCompoundAnnot"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
                 "	    string $selectionArray[];\n" +
                 "	    string $quote = \"\\\"\";\n" +
                 "	    $selectionArray = `nodeEditor -q -sln $ned`;\n" +
                 "	    string $cmd = \"vnnCompound -create compound \";\n" +
                 "	    for ( $sel in $selectionArray )\n" +
                 "	        $cmd += \"-moveNodeIn \" + $quote + $sel + $quote + \" \";\n" +
                 "	    $cmd += $quote + `nodeEditor -q -vd $ned` + $quote + \" \" +  $quote + `nodeEditor -q -vc $ned` +  $quote;\n" +
                 "	    evalEcho($cmd);\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorCreateCompound;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorCreateDoWhileCompoundAnnot"))
	-category   ("Editors.Node Editor")
	-command    ("nodeEdCreateDoWhileCompound")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorCreateDoWhileCompound;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorAddIterationStatePortsAnnot"))
	-category   ("Editors.Node Editor")
	-command    ("nodeEdAddIterationStatePorts")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorAddIterationStatePorts;


runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorExportCompoundAnnot"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "	    string $dir = getenv(\"HOME\");\n" +
				 "	    string $filename[] = `fileDialog2 -startingDirectory $dir  -fileFilter \"JSON (*.json);;All Files (*.*)\"`; \n" +
				 "      if ( size($filename) == 1 ) { \n" +
                 "	        string $quote = \"\\\"\";\n" +
                 "	        string $cmd = \"vnnCompound -saveAs \" + $quote + $filename[0] + $quote + \" \";\n" +
                 "	        $cmd += $quote + `nodeEditor -q -vd $ned` + $quote + \" \" + $quote + `nodeEditor -q -vc $ned` + $quote;\n" +
                 "	        evalEcho($cmd);\n" +
				 "      }\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorExportCompound;


// Options menu
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorRenderSwatches"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		string $item = ( $ned + \"RSI\");\n" +
				 "			renderThumbnailUpdate \n" +
				 "			`menuItem -query -cb $item`;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorRenderSwatches;
	
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorAddOnNodeCreate"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		string $buttonitem = ( $ned + \"LCB\" );\n" +
				 "		string $item = ( $ned + \"ATGI\");\n" +
				 "		nodeEditor -edit -addNewNodes \n" +
				 "			`menuItem -query -cb $item` $ned;\n" +
				 "			iconTextButton -e -i1 `nodeEdLockImage($ned)` $buttonitem ;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorAddOnNodeCreate;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorAutoSizeNodes"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		string $item = ( $ned + \"ASNI\");\n" +
				 "		nodeEditor -edit -autoSizeNodes \n" +
				 "			`menuItem -query -cb $item` $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorAutoSizeNodes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorAdditiveGraphingMode"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		string $item = ( $ned + \"AGMI\");\n" +
				 "		nodeEditor -edit -additiveGraphingMode \n" +
				 "			`menuItem -query -cb $item ` $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorAdditiveGraphingMode;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorPinByDefault"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		string $item = ( $ned + \"PBDI\");\n" +
				 "		nodeEditor -edit -defaultPinnedState \n" +
				 "			`menuItem -query -cb $item ` $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorPinByDefault;
	
//Display menu
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorShapeMenuStateAll"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -showShapes on -showSGShapes on $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorShapeMenuStateAll;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorShapeMenuStateAllExceptShadingGroupMembers"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -showShapes on -showSGShapes off $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorShapeMenuStateAllExceptShadingGroupMembers;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorShapeMenuStateNoShapes"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -showShapes off -showSGShapes off $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorShapeMenuStateNoShapes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorTransforms"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		string $item = ( $ned + \"STI\" );\n" +
				 "		nodeEditor -e -showTransforms \n" + 
				 "			`menuItem -q -cb $item` $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorTransforms;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorExtendToShapes"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		string $item = ( $ned + \"ETSI\" );\n" +
				 "		nodeEditor -e -extendToShapes \n" + 
				 "			`menuItem -query -cb $item ` $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorExtendToShapes;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorShowNamespace"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "  	nodeEditor -edit -showNamespace \n" +
				 "   		(!`nodeEditor -query -showNamespace $ned`) $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorToggleShowNamespace;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorConsistentNodeNameSize"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "  	nodeEditor -edit -consistentNameSize \n" +
				 "   		(!`nodeEditor -query -consistentNameSize $ned`) $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorToggleConsistentNodeNameSize;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kNodeEditorUseAssetsAndPublishedAttributes"))
	-category   ("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "  	nodeEditor -edit -useAssets \n" +
				 "   		(!`nodeEditor -query -useAssets $ned`) $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorToggleUseAssetsAndPublishedAttributes;	

// Grid controls

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kNodeEditorToggleGridVisibility"))
	-category	("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "  	nodeEditor -edit -gridVisibility \n" +
				 "   		(!`nodeEditor -query -gridVisibility $ned`) $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorGridToggleVisibility;

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kNodeEditorToggleGridSnap"))
	-category	("Editors.Node Editor")
	-command    ("{\n" +
				 "	string $ned = ( `getCurrentNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "  	nodeEditor -edit -gridSnap \n" +
				 "   		(!`nodeEditor -query -gridSnap $ned`) $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	("nodeEditorPanel")
	NodeEditorGridToggleSnap;

//
//	What's New Highlighting
//
// ----------------------------------------------------------------------

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWhatsNewHighlightingOnAnnot"))
	-category   ("Other items.What's New Highlighting")
	-command    ("whatsNewHighlight -highlightOn true")
	-showInHotkeyEditor false
	WhatsNewHighlightingOn;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWhatsNewHighlightingOffAnnot"))
	-category   ("Other items.What's New Highlighting")
	-command    ("whatsNewHighlight -highlightOn false")
	-showInHotkeyEditor false
	WhatsNewHighlightingOff;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWhatsNewStartupDialogOnAnnot"))
	-category   ("Other items.What's New Highlighting")
	-command    ("whatsNewHighlight -showStartupDialog true")
	-showInHotkeyEditor false
	WhatsNewStartupDialogOn;
	
runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kWhatsNewStartupDialogOffAnnot"))
	-category   ("Other items.What's New Highlighting")
	-command    ("whatsNewHighlight -showStartupDialog false")
	-showInHotkeyEditor false
	WhatsNewStartupDialogOff;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleVisibilityAndKeepSelection"))
	-category   ("Menu items.Display")
	-command    ("evalEcho(\"toggleVisibilityAndKeepSelection `optionVar -query toggleVisibilityAndKeepSelectionBehaviour`\")")
	ToggleVisibilityAndKeepSelection;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kToggleVisibilityAndKeepSelectionOptions"))
	-category   ("Menu items.Display")
	-command    ("toggleVisibilityAndKeepSelectionOptions")
	ToggleVisibilityAndKeepSelectionOptions;


//
//	Aliases
//
// ----------------------------------------------------------------------

eval("alias evalString eval");

}
miscCommands();



//
//	Hypershade commands
//
// ----------------------------------------------------------------------
global proc string getFocusedHypershade()
{
    // if we no not find a node editor panel active we look for an active hypershade.
	string $currentPanel = `getPanel -withFocus`;
	if ("" != $currentPanel) {
		string $panelType = `getPanel -typeOf $currentPanel`;
		if ($panelType ==  "scriptedPanel" && `scriptedPanel -query -type $currentPanel` == "hyperShadePanel") {
			return $currentPanel;
		}
	}
	return "";				
}

global proc string getHypershadeNodeEditor()
{
    // if we an active hypershade we get its node eiditor.
	if ("" != `getFocusedHypershade`) {
		global string $gHypershadeNodeEditor;
        if (`nodeEditor -exists $gHypershadeNodeEditor`)
            return $gHypershadeNodeEditor;
	}
	return "";				
}

proc hypershadeMenus()
{
    string $context = "hyperShadePanel";
    string $editorType = "Hypershade";


// Material Soloing controls
// -----------------------------------------------

string $category = "Editors.Hypershade.Soloing";

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSoloMaterial"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $nodes[] = `ls -selection`;\n" +
				 "	if(size($nodes) > 0) {\n" +
				 "		soloMaterial -node $nodes[0];\n" +
				 "	}\n" +
				 "}\n")
	-hotkeyCtx	($context)
	SoloMaterial;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kUnSoloMaterial"))
	-category   ($category)
	-command    ("soloMaterial -unsolo")
	-hotkeyCtx	($context)
	RemoveMaterialSoloing;

runTimeCommand -default true
	-annotation (uiRes("m_defaultRunTimeCommands.kSoloLastOutput"))
	-category   ($category)
	-command    ("soloMaterial -last")
	-hotkeyCtx	($context)
	SoloLastOutput;

    // Browser category
    // -------------------------------------------------------------
    
$category = "Editors.Hypershade.Browser";

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kRefreshSelectedSwatchesAnnot"))
	-category	($category)
	-command 	("{\n" +
				 "	string $materials[] = `ls -selection -materials`;\n" +
				 "	for ($material in $materials) {\n" +
				 "		updateFileNodeSwatch($material);\n" +
				 "	}\n" +
				 "	string $textures[] = `ls -selection -textures`;\n" +
				 "	for ($texture in $textures) {\n" +
				 "		updateFileNodeSwatch($texture);\n" +
				 "	}\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "RefreshSelectedSwatches");

    // Graph category
    // -------------------------------------------------------------

$category = "Editors.Hypershade.Graph";

runTimeCommand -default true
	-annotation	((uiRes("m_defaultRunTimeCommands.kGraphMaterialsOnSelectedObjects")))
	-category	($category)
	-command    ("hyperShadePanelGraphCommand("
					+ "`getFocusedHypershade`"
					+ ", \"graphMaterials\")")
	-hotkeyCtx	($context)
	($editorType + "GraphMaterialsOnSelectedObjects");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorGraphClearGraph"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -rootNode \"\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "GraphClearGraph");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorGraphAddSelected"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEdGraphControl($ned, \"nodeEditor -e -gsl -agm 1 \");\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "GraphAddSelected");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorGraphRemoveSelected"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -rem \"\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "GraphRemoveSelected");


runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorGraphRearrange"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -frameAll -layout $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "GraphRearrange");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorGraphUpstream"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEdGraphControl($ned, \"nodeEditor -e -rfs -ups \");\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "GraphUpstream");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorGraphUpDownstream"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEdGraphControl($ned, \"nodeEditor -e -rfs -ups -ds \");\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "GraphUpDownstream");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorGraphDownstream"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEdGraphControl($ned, \"nodeEditor -e -rfs -ds \");\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "GraphDownstream");

// Traversal Depth controls
runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorSetTraversalDepthZero"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -fa -rfs -tdl 0 $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "SetTraversalDepthZero");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorReduceTraversalDepth"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		int $dep = `nodeEditor -q -tdl $ned`;\n" +
				 "			if ($dep >= 0) {\n" +
				 "				nodeEditor -e -fa -rfs -tdl ($dep - 1) $ned;}\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "ReduceTraversalDepth");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorIncreaseTraversalDepth"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "			int $dep = `nodeEditor -q -tdl $ned`;\n" +
				 "			nodeEditor -e -fa -rfs -tdl ($dep + 1) $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "IncreaseTraversalDepth");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorSetTraversalDepthUnlim"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -fa -rfs -tdl -1 $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "SetTraversalDepthUnlim");
	
// LOD & Pin Controls
runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorHideAttributes"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -nodeViewMode \"simple\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "HideAttributes");
	
runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorShowConnectedAttrs"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -nodeViewMode \"connected\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "ShowConnectedAttrs");
	
runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorShowAllAttrs"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -nodeViewMode \"all\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "ShowAllAttrs");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorShowCustomAttrs"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -nodeViewMode \"custom\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "ShowCustomAttrs");

runTimeCommand -default true
	-annotation (getRunTimeCommandAnnotation("NodeEditorToggleNodeTitleMode"))
	-category 	($category)
	-command 	("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		string $mode = `nodeEditor -q -nodeTitleMode $ned`;\n" +
				 "		if ($mode == \"name\"){\n" +
				 "			$mode = \"type\";\n" +
				 "		}\n" +
				 "		else if ($mode == \"type\") {\n" +
				 "			$mode = \"none\";\n" +
				 "		}\n" +
				 "		else if ($mode == \"none\") {\n" +
				 "			$mode = \"name\";\n" +
				 "		}\n" +
				 "		nodeEditor -e -nodeTitleMode ($mode) $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "ToggleNodeTitleMode");

runTimeCommand -default true
	-annotation (getRunTimeCommandAnnotation("NodeEditorDeleteNodes"))
	-category 	($category)
	-command 	("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -del $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "DeleteNodes");

runTimeCommand -default true
	-annotation (getRunTimeCommandAnnotation("NodeEditorGraphRemoveUnselected"))
	-category 	($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -removeUnselected $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "GraphRemoveUnselected");

runTimeCommand -default true
	-annotation (getRunTimeCommandAnnotation("NodeEditorGraphRemoveUpstream"))
	-category 	($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -removeUpstream $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "GraphRemoveUpstream");

runTimeCommand -default true
	-annotation (getRunTimeCommandAnnotation("NodeEditorGraphRemoveDownstream"))
	-category 	($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -removeDownstream $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "GraphRemoveDownstream");

runTimeCommand -default true
	-annotation (getRunTimeCommandAnnotation("PickWalkUp"))
	-category 	($category)
	-command    ("pickWalkUp")
	-hotkeyCtx	($context)
	($editorType + "PickWalkUp");

runTimeCommand -default true
	-annotation (getRunTimeCommandAnnotation("PickWalkDown"))
	-category 	($category)
	-command    ("pickWalkDown")
	-hotkeyCtx	($context)
	($editorType + "PickWalkDown");

runTimeCommand -default true
	-annotation (getRunTimeCommandAnnotation("PickWalkLeft"))
	-category 	($category)
	-command    ("pickWalkLeft")
	-hotkeyCtx	($context)
	($editorType + "PickWalkLeft");

runTimeCommand -default true
	-annotation (getRunTimeCommandAnnotation("PickWalkRight"))
	-category 	($category)
	-command    ("pickWalkRight")
	-hotkeyCtx	($context)
	($editorType + "PickWalkRight");

runTimeCommand -default true
	-annotation (getRunTimeCommandAnnotation("NodeEditorToggleAttrFilter"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -edit -toggleAttrFilter $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "ToggleAttrFilter");

runTimeCommand -default true
	-annotation (getRunTimeCommandAnnotation("NodeEditorToggleNodeSwatchSize"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -edit -toggleSwatchSize \"\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "ToggleNodeSwatchSize");

runTimeCommand -default true
	-annotation (getRunTimeCommandAnnotation("NodeEditorSetLargeNodeSwatchSize"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -nodeSwatchSize \"large\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "SetLargeNodeSwatchSize");

runTimeCommand -default true
	-annotation (getRunTimeCommandAnnotation("NodeEditorSetSmallNodeSwatchSize"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -nodeSwatchSize \"small\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "SetSmallNodeSwatchSize");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorPinSelected"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -pinSelectedNodes on $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "PinSelected");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorUnpinSelected"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -pinSelectedNodes off $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "UnpinSelected");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorSelectConnected"))
	-category   ($category)
	-command 	("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -selectUpstream -selectDownstream $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "SelectConnected");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorSelectUpStream"))
	-category   ($category)
	-command 	("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -selectUpstream $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "SelectUpStream");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorSelectDownStream"))
	-category   ($category)
	-command 	("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -selectDownstream $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "SelectDownStream");

// View menu
runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorToggleZoomIn"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -scaleView 1.25 $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "ToggleZoomIn");
	
runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorToggleZoomOut"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -scaleView 0.8 $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "ToggleZoomOut");

// Tabs menu
runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorCreateTab"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -createTab -1 \"\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "CreateTab");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorRenameActiveTab"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -renameTab \n" +
				 "			(`nodeEditor -query -activeTab $ned`) \"\" $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "RenameActiveTab");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorCloseActiveTab"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -closeTab \n" +
				 "			(`nodeEditor -query -activeTab $ned`) $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "CloseActiveTab");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorCloseAllTabs"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -closeAllTabs $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "CloseAllTabs");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorRestoreLastClosedTab"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -restoreLastClosedTab $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "RestoreLastClosedTab");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorAddOnNodeCreate"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		int $val = `nodeEditor -q -addNewNodes $ned`;\n" +
				 "		nodeEditor -edit -addNewNodes $val $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "AddOnNodeCreate");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorAutoSizeNodes"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +

				 "	if (\"\" != $ned) {\n" +
				 "		int $val = `nodeEditor -q -autoSizeNodes $ned`;\n" +
				 "		nodeEditor -edit -autoSizeNodes $val $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "AutoSizeNodes");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorAdditiveGraphingMode"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		int $val = `nodeEditor -q -additiveGraphingMode $ned`;\n" +
				 "		nodeEditor -edit -additiveGraphingMode $val $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "AdditiveGraphingMode");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorPinByDefault"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		int $val = `nodeEditor -q -defaultPinnedState $ned`;\n" +
				 "		nodeEditor -edit -defaultPinnedState $val $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "PinByDefault");
	
//Display menu
runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorShapeMenuStateAll"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -showShapes on -showSGShapes on $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "ShapeMenuStateAll");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorShapeMenuStateAllExceptShadingGroupMembers"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -showShapes on -showSGShapes off $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "ShapeMenuStateAllExceptShadingGroupMembers");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorShapeMenuStateNoShapes"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "		nodeEditor -e -showShapes off -showSGShapes off $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "ShapeMenuStateNoShapes");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorToggleShowNamespace"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "  	nodeEditor -edit -showNamespace \n" +
				 "   		(!`nodeEditor -query -showNamespace $ned`) $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "ToggleShowNamespace");	

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorToggleUseAssetsAndPublishedAttributes"))
	-category   ($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "  	nodeEditor -edit -useAssets \n" +
				 "   		(!`nodeEditor -query -useAssets $ned`) $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "ToggleUseAssetsAndPublishedAttributes");	

// Grid controls

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorGridToggleVisibility"))
	-category	($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "  	nodeEditor -edit -gridVisibility \n" +
				 "   		(!`nodeEditor -query -gridVisibility $ned`) $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "GridToggleVisibility");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("NodeEditorGridToggleSnap"))
	-category	($category)
	-command    ("{\n" +
				 "	string $ned = ( `getHypershadeNodeEditor`);\n" +
				 "	if (\"\" != $ned) {\n" +
				 "  	nodeEditor -edit -gridSnap \n" +
				 "   		(!`nodeEditor -query -gridSnap $ned`) $ned;\n" +
				 "  }\n" +
				 "}\n")
	-hotkeyCtx	($context)
	($editorType + "GridToggleSnap");

    // Tabs category
    // -------------------------------------------------------------

    $category = "Editors.Hypershade.Tabs";

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeCreateNewTabAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"createNewTab\")")
	-hotkeyCtx	($context)
	($editorType + "CreateNewTab");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeMoveTabUpAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"moveTabUp\")")
	-hotkeyCtx	($context)
	($editorType + "MoveTabUp");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeMoveTabDownAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"moveTabDown\")")
	-hotkeyCtx	($context)
	($editorType + "MoveTabDown");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeMoveTabLeftAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"moveTabLeft\")")
	-hotkeyCtx	($context)
	($editorType + "MoveTabLeft");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeMoveTabRightAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"moveTabRight\")")
	-hotkeyCtx	($context)
	($editorType + "MoveTabRight");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeRenameTabAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"renameTab\")")
	-hotkeyCtx	($context)
	($editorType + "RenameTab");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeRemoveTabAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"removeTab\")")
	-hotkeyCtx	($context)
	($editorType + "RemoveTab");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeRevertToDefaultTabsAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"revertToDefaultTabs\")")
	-hotkeyCtx	($context)
	($editorType + "RevertToDefaultTabs");

    // Disk Tab Options category
    // -------------------------------------------------------------

    $category = "Editors.Hypershade.Tabs.Disk Tab Options";

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeShowDirectoriesOnlyAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"showDirectoriesOnly\")")
	-hotkeyCtx	($context)
	($editorType + "ShowDirectoriesOnly");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeShowDirectoriesAndFilesAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"showDirectoriesAndFiles\")")
	-hotkeyCtx	($context)
	($editorType + "ShowDirectoriesAndFiles");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeRefreshFileListingAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"refreshFileListing\")")
	-hotkeyCtx	($context)
	($editorType + "RefreshFileListing");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeRefreshSelectedSwatchesOnDiskAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"refreshSelectedSwatches\")")
	-hotkeyCtx	($context)
	($editorType + "RefreshSelectedSwatchesOnDisk");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeRefreshAllSwatchesOnDiskAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"refreshAllSwatches\")")
	-hotkeyCtx	($context)
	($editorType + "RefreshAllSwatchesOnDisk");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeGenerateSwatchFilesForImagesAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"saveSwatchesToDisk\")")
	-hotkeyCtx	($context)
	($editorType + "SaveSwatchesToDisk");


    $category = "Editors.Hypershade.Options.Display";

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeNoShapesAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"displayNoShapes\")")
	-hotkeyCtx	($context)
	($editorType + "DisplayNoShapes");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeAllShapesExceptShadingGroupMembersAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"displayInterestingShapes\")")
	-hotkeyCtx	($context)
	($editorType + "DisplayInterestingShapes");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeAllShapesAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"displayAllShapes\")")
	-hotkeyCtx	($context)
	($editorType + "DisplayAllShapes");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeDisplayTransformToggleAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"toggleTransformDisplay\")")
	-hotkeyCtx	($context)
	($editorType + "ToggleTransformDisplay");



$category = "Editors.Hypershade.File";


runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeImportShadingNetwork"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"import\")")
	-hotkeyCtx	($context)
	($editorType + "Import");


runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeExportSelectedNetworkAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"exportSelectedNetwork\")")
	-hotkeyCtx	($context)
	($editorType + "ExportSelectedNetwork");


$category = "Editors.Hypershade.Edit";


runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeDeleteAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"delete\")")
	-hotkeyCtx	($context)
	($editorType + "DeleteSelected");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeDeleteUnusedNodesAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"deleteUnusedNodes\")")
	-hotkeyCtx	($context)
	($editorType + "DeleteUnusedNodes");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeDeleteDuplicateShadingNetworkAnnot"))
	-category	($category)
	-command    ("removeDuplicateShadingNetworks( 1 )")
	-hotkeyCtx	($context)
	($editorType + "DeleteDuplicateShadingNetworks");

   

$category = "Editors.Hypershade.Edit.DeleteByType";

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeShadingGroupsAndMaterialsAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"deleteShadingGroupsAndMaterials\")")
	-hotkeyCtx	($context)
	($editorType + "DeleteAllShadingGroupsAndMaterials");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeDeleteAllTextures"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"DeleteTextures\")")
	-hotkeyCtx	($context)
	($editorType + "DeleteAllTextures");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeDeleteallLights"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"deleteLights\")")
	-hotkeyCtx	($context)
	($editorType + "DeleteAllLights");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeDeleteallUtilityNodes"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"deleteUtilities\")")
	-hotkeyCtx	($context)
	($editorType + "DeleteAllUtilities");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeCamerasandImagePlanesAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"deleteCamerasAndImagePlanes\")")
	-hotkeyCtx	($context)
	($editorType + "DeleteAllCamerasAndImagePlanes");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeDeleteallBakeSets"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"deleteBakeSets\")")
	-hotkeyCtx	($context)
	($editorType + "DeleteAllBakeSets");


$category = "Editors.Hypershade.Edit";

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeRevertSelectedSwatchesAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"revertSelectedSwatches\")")
	-hotkeyCtx	($context)
	($editorType + "RevertSelectedSwatches");



$category = "Editors.Hypershade.Edit.Select All by Type";


runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeSelectShadingGroupsAndMaterialsAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"selectShadingGroupsAndMaterials\")")
	-hotkeyCtx	($context)
	($editorType + "SelectShadingGroupsAndMaterials");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeSelectAllTexturesAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"selectTextures\")")
	-hotkeyCtx	($context)
	($editorType + "SelectTextures");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeSelectAllLightsAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"selectLights\")")
	-hotkeyCtx	($context)
	($editorType + "SelectLights");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeSelectAllUtilityNodesAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"selectUtilities\")")
	-hotkeyCtx	($context)
	($editorType + "SelectUtilities");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeSelectAllCamerasandImagePlaneAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"selectCamerasAndImagePlanes\")")
	-hotkeyCtx	($context)
	($editorType + "SelectCamerasAndImagePlanes");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeSelectAllBakeSetsAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"selectBakeSets\")")
	-hotkeyCtx	($context)
	($editorType + "SelectBakeSets");


$category = "Editors.Hypershade.Edit";


runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeSelectObjectsWithMaterials"))
	-category	($category)
	-command    ("hyperShade -objects \"\"")
	-hotkeyCtx	($context)
	($editorType + "SelectObjectsWithMaterials");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeSelectMaterialsFromObjects"))
	-category	($category)
	-command    ("hyperShade -smn \"\"")
	-hotkeyCtx	($context)
	($editorType + "SelectMaterialsFromObjects");


$category = "Editors.Hypershade.Edit.Duplicate";

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeShadingNetworkAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"duplicateShadingNetwork\")")
	-hotkeyCtx	($context)
	($editorType + "DuplicateShadingNetwork");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeWithoutNetworkAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"duplicateWithoutNetwork\")")
	-hotkeyCtx	($context)
	($editorType + "DuplicateWithoutNetwork");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeWithConnectionsToNetworkAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"duplicateWithConnections\")")
	-hotkeyCtx	($context)
	($editorType + "DuplicateWithConnections");


$category = "Editors.Hypershade.Edit";


runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeConvertToFileTextureAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"convertToFileTexture\")")
	-hotkeyCtx	($context)
	($editorType + "ConvertToFileTexture");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeConvertToFileTextureDlgAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"convertToFileTextureOptionBox\")")
	-hotkeyCtx	($context)
	($editorType + "ConvertToFileTextureOptionBox");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeConvertPSDToLayeredTextureAnnot"))
	-category	($category)
	-command    ("hypergraphConvertSelectedPsdNodesToLT")
	-hotkeyCtx	($context)
	($editorType + "ConvertPSDToLayeredTexture");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeConvertPSDToFileTextureAnnot"))
	-category	($category)
	-command    ("hypergraphConvertSelectedPsdNodesToFile")
	-hotkeyCtx	($context)
	($editorType + "ConvertPSDToFileTexture");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeCreatePSDNetworkAnnot"))
	-category	($category)
	-command    ("photoShopPaintTex")
	-hotkeyCtx	($context)
	($editorType + "CreatePSDFile");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeEditPSDNetworkAnnot"))
	-category	($category)
	-command    ("photoshopEditTexture")
	-hotkeyCtx	($context)
	($editorType + "EditPSDFile");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeUpdatePSDNetworksAnnot"))
	-category	($category)
	-command    ("psdUpdateTextures")
	-hotkeyCtx	($context)
	($editorType + "UpdatePSDNetworks");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("CreateContainer"))
	-category	($category)
	-command    ("hyperShadePanelGraphCommand("
					+ "`getFocusedHypershade`"
					+ ", \"createContainer\")")
	-hotkeyCtx	($context)
	($editorType + "CreateAsset");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("CreateContainerOptions"))
	-category	($category)
	-command    ("CreateContainerOptions")
	-hotkeyCtx	($context)
	($editorType + "CreateContainerOptions");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("TransferAttributeValues"))
	-category	($category)
	-command    ("TransferAttributeValues")
	-hotkeyCtx	($context)
	($editorType + "TransferAttributeValues");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("TransferAttributeValuesOptions"))
	-category	($category)
	-command    ("TransferAttributeValuesOptions")
	-hotkeyCtx	($context)
	($editorType + "TransferAttributeValuesOptions");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation("PublishConnections"))
	-category	($category)
	-command    ("PublishConnections")
	-hotkeyCtx	($context)
	($editorType + "PublishConnections");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeRemoveAssetAnnot"))
	-category	($category)
	-command    ("hyperShadePanelGraphCommand("
					+ "`getFocusedHypershade`"
					+ ", \"removeContainer\")")
	-hotkeyCtx	($context)
	($editorType + "RemoveAsset");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeCollapseAssetAnnot"))
	-category	($category)
	-command    ("hyperShadePanelGraphCommand("
					+ "`getFocusedHypershade`"
					+ ", \"collapseContainer\")")
	-hotkeyCtx	($context)
	($editorType + "CollapseAsset");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeExpandAssetAnnot"))
	-category	($category)
	-command    ("hyperShadePanelGraphCommand("
					+ "`getFocusedHypershade`"
					+ ", \"expandContainer\")")
	-hotkeyCtx	($context)
	($editorType + "ExpandAsset");


runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation ("EditTexture"))
	-category	($category)
	-command    ("EditTexture")
	-hotkeyCtx	($context)
	($editorType + "EditTexture");



runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation ("TestTexture"))
	-category	($category)
	-command    ("TestTexture")
	-hotkeyCtx	($context)
	($editorType + "TestTexture");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation ("TestTextureOptions"))
	-category	($category)
	-command    ("TestTextureOptions")
	-hotkeyCtx	($context)
	($editorType + "TestTextureOptions");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation ("RenderTextureRange"))
	-category	($category)
	-command    ("RenderTextureRange")
	-hotkeyCtx	($context)
	($editorType + "RenderTextureRange");

runTimeCommand -default true
	-annotation	(getRunTimeCommandAnnotation ("RenderTextureRangeOptions"))
	-category	($category)
	-command    ("RenderTextureRangeOptions")
	-hotkeyCtx	($context)
	($editorType + "RenderTextureRangeOptions");



$category = "Editors.Hypershade.View";

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeFrameAllAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"frameAll\")")
	-hotkeyCtx	($context)
	($editorType + "FrameAll");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeFrameSelectedAnnot"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"frameSelected\")")
	-hotkeyCtx	($context)
	($editorType + "FrameSelected");


runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeAsIcons"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"asIcons\")")
	-hotkeyCtx	($context)
	($editorType + "DisplayAsIcons");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeAsList"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"asList\")")
	-hotkeyCtx	($context)
	($editorType + "DisplayAsList");


runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeAsSmallSwatches"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"smallIcons\")")
	-hotkeyCtx	($context)
	($editorType + "DisplayAsSmallSwatches");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeAsMediumSwatches"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"mediumIcons\")")
	-hotkeyCtx	($context)
	($editorType + "DisplayAsMediumSwatches");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeAsLargeSwatches"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"largeIcons\")")
	-hotkeyCtx	($context)
	($editorType + "DisplayAsLargeSwatches");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeAsExtraLargeSwatches"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"superIcons\")")
	-hotkeyCtx	($context)
	($editorType + "DisplayAsExtraLargeSwatches");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeSortByName"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"byName\")")
	-hotkeyCtx	($context)
	($editorType + "SortByName");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeSortByType"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"byType\")")
	-hotkeyCtx	($context)
	($editorType + "SortByType");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeSortByTime"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"byTime\")")
	-hotkeyCtx	($context)
	($editorType + "SortByTime");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeSortReverse"))
	-category	($category)
	-command    ("hyperShadePanelMenuCommand("
					+ "`getFocusedHypershade`"
					+ ", \"reverseOrder\")")
	-hotkeyCtx	($context)
	($editorType + "SortReverseOrder");

$category = "Editors.Hypershade.Window";

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeBrowserWindowAnnot"))
	-category	($category)
	-command    ("hypershadeOpenBrowserWindow("
					+ "`getFocusedHypershade`"
					+ ", true)")
	-hotkeyCtx	($context)
	($editorType + "OpenBrowserWindow");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadePropertyEditorWindowAnnot"))
	-category	($category)
	-command    ("hypershadeOpenPropertyEditorWindow("
					+ "`getFocusedHypershade`"
					+ ", true)")
	-hotkeyCtx	($context)
	($editorType + "OpenPropertyEditorWindow");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeMaterialViewerWindowAnnot"))
	-category	($category)
	-command    ("hypershadeOpenMaterialViewerWindow("
					+ "`getFocusedHypershade`"
					+ ", true)")
	-hotkeyCtx	($context)
	($editorType + "OpenMaterialViewerWindow");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeCreateWindowAnnot"))
	-category	($category)
	-command    ("hypershadeOpenCreateWindow("
					+ "`getFocusedHypershade`"
					+ ", true)")
	-hotkeyCtx	($context)
	($editorType + "OpenCreateWindow");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeBinsWindowAnnot"))
	-category	($category)
	-command    ("hypershadeOpenBinsWindow("
					+ "`getFocusedHypershade`"
					+ ", true)")
	-hotkeyCtx	($context)
	($editorType + "OpenBinsWindow");
		
runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeModelEditorWindowAnnot"))
	-category	($category)
	-command    ("hypershadeOpenModelEditorWindow("
					+ "`getFocusedHypershade`"
					+ ", true)")
	-hotkeyCtx	($context)
	($editorType + "OpenModelEditorWindow");
	
runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeRenderViewWindowAnnot"))
	-category	($category)
	-command    ("hypershadeOpenRenderViewWindow("
					+ "`getFocusedHypershade`"
					+ ", true)")
	-hotkeyCtx	($context)
	($editorType + "OpenRenderViewWindow");
	
runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeOutlinerWindowAnnot"))
	-category	($category)
	-command    ("hypershadeOpenOutlinerWindow("
					+ "`getFocusedHypershade`"
					+ ", true)")
	-hotkeyCtx	($context)
	($editorType + "OpenOutlinerWindow");
	
runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeUVEditorWindowAnnot"))
	-category	($category)
	-command    ("hypershadeOpenUVEditorWindow("
					+ "`getFocusedHypershade`"
					+ ", true)")
	-hotkeyCtx	($context)
	($editorType + "OpenUVEditorWindow");
	
runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeGraphEditorWindowAnnot"))
	-category	($category)
	-command    ("hypershadeOpenGraphEditorWindow("
					+ "`getFocusedHypershade`"
					+ ", true)")
	-hotkeyCtx	($context)
	($editorType + "OpenGraphEditorWindow");


runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeAttributeSpreadSheetAnnot"))
	-category	($category)
	-command    ("hypershadeOpenSpreadSheetWindow("
					+ "`getFocusedHypershade`"
					+ ", true)")
	-hotkeyCtx	($context)
	($editorType + "OpenSpreadSheetWindow");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadekConnectionEditorAnnot"))
	-category	($category)
	-command    ("connectWindow 0 \"\" \"\"")
	-hotkeyCtx	($context)
	($editorType + "OpenConnectWindow");

runTimeCommand -default true
	-annotation	(uiRes("m_defaultRunTimeCommands.kHypershadeConnectSelectedAnnot"))
	-category	($category)
	-command    ("string $sel[] = `ls -sl`; connectWindowWith $sel[0] $sel[1]")
	-hotkeyCtx	($context)
	($editorType + "ConnectSelected");


}


// Hypershade commands
//
// ----------------------------------------------------------------------

hypershadeMenus();

