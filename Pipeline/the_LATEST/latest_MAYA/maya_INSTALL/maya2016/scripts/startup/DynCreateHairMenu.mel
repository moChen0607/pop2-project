// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  2003 
//
//
//  Procedure Name:
//      DynCreateHairMenu
//
//  Description:
//		Create the DYNAMICS->Hair menu
//
//  Input Arguments:
//      parent to parent the menu to.
//
//  Return Value:
//      None.
//

global proc assignNewHairSystem()
{
	assignHairSystem "";
}

global proc HairAssignHairSystemMenu( string $parent )
//
// Build the Submenu
{
	setParent -menu $parent;
    menu -edit -deleteAllItems $parent;

	menuItem -label (uiRes("m_DynCreateHairMenu.kAssignNewHair")) 
		-image "hairAssignHairSystem.png"
		-command "assignNewHairSystem"
       	-annotation (uiRes("m_DynCreateHairMenu.kNewHairAnnot")) ;
	string $hsystems[] = `ls -type hairSystem`;
	string $fmt = (uiRes("m_DynCreateHairMenu.kHairAssignFmt"));

	int $i;
	for( $i = 0; $i < size( $hsystems ); $i++ ){
		string $hsys = $hsystems[$i];
		string $annot = `format -s $hsys $fmt`;
		menuItem -label $hsys
 			-image "hairAssignHairSystem.png"
			-command ("assignHairSystem "+$hsys) 
        	-annotation $annot;
	}
	
}

global proc HairDisplayMenu( string $parent )
//
// Build the Submenu
{
	setParent -menu $parent;

	menuItem -label (uiRes("m_DynCreateHairMenu.kAllCurves")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kAllCurvesAnnot")) 
		-image "hairDisplayAll.png"
		-command "displayHairCurves \"all\" 1";

	menuItem -label (uiRes("m_DynCreateHairMenu.kDisplayCurrPos")) 
		-image "hairDisplayCurrent.png"
       	-annotation (uiRes("m_DynCreateHairMenu.kDisplayCurrPosAnnot")) 
		-command "displayHairCurves \"current\" 1";
	
	menuItem -label (uiRes("m_DynCreateHairMenu.kStart")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kStartAnnot")) 
		-image "hairDisplayStart.png"
		-command "displayHairCurves \"start\" 1";
	
	menuItem -label (uiRes("m_DynCreateHairMenu.kRest")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kRestAnnot")) 
		-image "hairDisplayRest.png"
		-command "displayHairCurves \"rest\" 1";
	
	menuItem -label (uiRes("m_DynCreateHairMenu.kCurrAndStart")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kCurrAndStartAnnot")) 
		-image "hairDisplayCurrentStart.png"
		-command "displayHairCurves \"currentAndStart\" 1";
		
	menuItem -label (uiRes("m_DynCreateHairMenu.kCurrAndRest")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kCurrAndRestAnnot")) 
		-image "hairDisplayCurrentRest.png"
		-command "displayHairCurves \"currentAndRest\" 1";

	setParent -menu ..;
}

global proc HairStartPositionMenu( string $parent )
//
// Build the Submenu
{
	setParent -menu $parent;
	menuItem -label (uiRes("m_DynCreateHairMenu.kStartFromCurrent")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kStartFromCurrentAnnot")) 
		-image "hairStartFromCurrent.png"
		-command "setSelectedHairCurves \"current\" \"start\"";
	menuItem -label (uiRes("m_DynCreateHairMenu.kStartFromRest")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kStartFromRestAnnot")) 
		-image "hairStartFromRest.png"
		-command "setSelectedHairCurves \"rest\" \"start\"";

	setParent -menu ..;
}

global proc HairRestPositionMenu( string $parent )
//
// Build the Submenu
{
	setParent -menu $parent;
	menuItem -label (uiRes("m_DynCreateHairMenu.kRestFromStart")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kRestFromStartAnnot")) 
		-image "hairRestFromStart.png"
		-command "setSelectedHairCurves \"start\" \"rest\"";
	menuItem -label (uiRes("m_DynCreateHairMenu.kRestFromCurrent")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kRestFromCurrentAnnot")) 
		-image "hairRestFromCurrent.png"
		-command "setSelectedHairCurves \"current\" \"rest\"";

	setParent -menu ..;
}

global proc HairCreateConstraintMenu( string $parent )
//
// Build the Submenu
{
	setParent -menu $parent;

	menuItem -label (uiRes("m_DynCreateHairMenu.kRubberBand")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kRubberBandAnnot")) 
		-image "hairRubberBand.png"
		-command "createHairConstraint 0";
		
	menuItem -label (uiRes("m_DynCreateHairMenu.kTransform")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kTransformAnnot")) 
		-image "hairTransform.png"
		-command "createHairConstraint 1";
		
	menuItem -label (uiRes("m_DynCreateHairMenu.kStick")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kStickAnnot")) 
		-image "hairStick.png"
		-command "createHairConstraint 2";
		
	menuItem -label (uiRes("m_DynCreateHairMenu.kHair")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kHairAnnot")) 
		-image "hairToHair.png"
		-command "createHairConstraint 3";
		
	menuItem -label (uiRes("m_DynCreateHairMenu.kBunch")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kBunchAnnot")) 
		-image "hairBunch.png"
		-command "createHairConstraint 4";

	menuItem -divider true;
	
	menuItem -label (uiRes("m_DynCreateHairMenu.kCollide")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kCollideAnnot")) 
		-image "hairCollideSphere.png"
		-command "createHairConstraint 5";

	menuItem -label (uiRes("m_DynCreateHairMenu.kCube")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kCubeAnnot")) 
		-image "hairCollideCube.png"
		-command "createHairConstraint 6";

	setParent -menu ..;
}

global proc HairConvertSelectionMenu( string $parent )
//
// Build the Submenu
{
	setParent -menu $parent;

	menuItem -label (uiRes("m_DynCreateHairMenu.kFollicles")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kFolliclesAnnot")) 
		-image "hairConvertFollicles.png"
		-command "convertHairSelection \"follicles\"";
		
	menuItem -divider true;
	
	menuItem -label (uiRes("m_DynCreateHairMenu.kStartCurves")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kStartCurvesAnnot")) 
		-image "hairConvertStart.png"
		-command "convertHairSelection \"startCurves\"";
	menuItem -label (uiRes("m_DynCreateHairMenu.kRestCurves")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kRestCurvesAnnot")) 
		-image "hairConvertRest.png"
		-command "convertHairSelection \"restCurves\"";
	menuItem -label (uiRes("m_DynCreateHairMenu.kConvertCurrPos")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kConvertCurrPosAnnot")) 
		-image "hairConvertCurrent.png"
		-command "convertHairSelection \"current\"";
	
	menuItem -divider true;
	
	menuItem -label (uiRes("m_DynCreateHairMenu.kHairSystems")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kHairSystemsAnnot")) 
		-image "hairConvertHairSystem.png"
		-command "convertHairSelection \"hairSystems\"";
	menuItem -label (uiRes("m_DynCreateHairMenu.kHairConstraints")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kHairConstraintsAnnot")) 
		-image "hairConvertConstraint.png"
		-command "convertHairSelection \"constraints\"";
		
	menuItem -divider true;
	
	menuItem -label (uiRes("m_DynCreateHairMenu.kStartCurveEnd")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kStartCurveEndAnnot")) 
		-image "hairConvertStartEndCVs.png"
		-command "convertHairSelection \"startCurveEndCvs\"";
	menuItem -label (uiRes("m_DynCreateHairMenu.kRestCurveEnd")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kRestCurveEndAnnot")) 
		-image "hairConvertRestEndCVs.png"
		-command "convertHairSelection \"restCurveEndCvs\"";
	menuItem -label (uiRes("m_DynCreateHairMenu.kStartRestEnd")) 
       	-annotation (uiRes("m_DynCreateHairMenu.kStartRestEndAnnot")) 
		-image "hairConvertStartRestEndCVs.png"
		-command "convertHairSelection \"startAndRestEndCvs\"";

	setParent -menu ..;
}

global proc HairClassicMenu( string $parent )
//
// Build the Submenu
{
	setParent -menu $parent;

	menuItem -label (uiRes("m_DynCreateHairMenu.kMakeCollide")) 
		-annotation (uiRes("m_DynCreateHairMenu.kMakeCollideAnnot"))  
		-image "hairCollide.png"
		-command "MakeCollideHair";

	menuItem -divider true;

	menuItem -label (uiRes("m_DynCreateHairMenu.kAssignConstraint")) 
        -annotation (uiRes("m_DynCreateHairMenu.kAssignConstraintAnnot")) 
		// -image "hairAssignHairConstraint.xpm"
		-command "AssignHairConstraint"
		-dragMenuCommand "performAssignHairConstraint 2"
		-dragDoubleClickCommand "AssignHairConstraintOptions";
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("AssignHairConstraintOptions"))
			-command "AssignHairConstraintOptions";

	// Create Constraint sub menu
	//
	string $createConstraintItem = `menuItem -label (uiRes("m_DynCreateHairMenu.kCreateConstraint"))  
        -annotation (uiRes("m_DynCreateHairMenu.kCreateConstraintAnnot")) 
		-subMenu true -tearOff true -allowOptionBoxes true hairCreateConstraintItem`;
	HairCreateConstraintMenu $createConstraintItem;

	menuItem -divider true;
	
	menuItem -label (uiRes("m_DynCreateHairMenu.kCreateCache")) 
		-annotation (getRunTimeCommandAnnotation("CreateHairCache"))
		-image "hairCacheCreate.png"
		-command "CreateHairCache"
		-dragMenuCommand "performHairDiskCache 2"
		-dragDoubleClickCommand "CreateHairCacheOptions";
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("CreateHairCacheOptions"))
			-image "hairCacheCreate.png"
			-command "CreateHairCacheOptions";	

	menuItem -label (uiRes("m_DynCreateHairMenu.kAppendCache")) 
		-annotation (getRunTimeCommandAnnotation("AppendToHairCache"))
		-image "hairCacheAppend.png"
		-command "AppendToHairCache"
		-dragMenuCommand "performAppendHairCache 2"
		-dragDoubleClickCommand "AppendToHairCacheOptions";
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("AppendToHairCacheOptions"))
			-image "hairCacheAppend.png"
			-command "AppendToHairCacheOptions";	

	menuItem -label (uiRes("m_DynCreateHairMenu.kTruncateCache")) 
		-annotation (getRunTimeCommandAnnotation("TruncateHairCache"))
		-image "hairCacheTruncate.png"
		-command "TruncateHairCache";

	menuItem -label (uiRes("m_DynCreateHairMenu.kDeleteCache")) 
		-annotation (getRunTimeCommandAnnotation("DeleteHairCache"))
		-image "hairCacheDelete.png"
		-command "DeleteHairCache";

	setParent -menu ..;
}

global proc DynCreateHairMenu( string $parent )
{
	setParent -menu $parent;
	if( `menu -query -numberOfItems $parent` != 0 ) {
		//
		//	Menu is built already - just return
		//
		return;
	}
	
	menuItem -d true -dividerLabel (uiRes("m_DynCreateHairMenu.kHairCreate"));
	
	menuItem -label (uiRes("m_DynCreateHairMenu.kCreateHair")) 
		-annotation (getRunTimeCommandAnnotation("CreateHair"))
		-image "hairCreate.png"
		-command "CreateHair"
		-dragMenuCommand "performCreateHair 2"
		-dragDoubleClickCommand "CreateHairOptions";
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("CreateHairOptions"))
			-command "CreateHairOptions";

	menuItem -label (uiRes("m_DynCreateHairMenu.kGetHairExample")) 
        -image "hairGetExamples.png"
		-annotation (getRunTimeCommandAnnotation("GetHairExample"))
		-command "GetHairExample";		
			
    // create a user paint context for painting hair attributes
    //
    menuItem -label (uiRes("m_DynCreateHairMenu.kPaintFollicles")) 
        -annotation (uiRes("m_DynCreateHairMenu.kPaintFolliclesAnnot")) 
        -image "hairPaint.png"
        -c "paintHairTool 0"
        paintHairCurveItem;
        menuItem -optionBox true
            -annotation (uiRes("m_DynCreateHairMenu.kPaintHairOptions")) 
            -image "hairPaint.png"
            -c "paintHairTool 1"
            paintHairCurveDialogItem;

    menuItem -label (uiRes("m_DynCreateHairMenu.kPaintTextures")) -subMenu true -tearOff true
        paintHairTexturesItem;

		// specify the attribute name to be displayed in 3dPaint as second parameter to 
		// paintHairTexture
		menuItem -label (uiRes("m_DynCreateHairMenu.kBaldness")) 
            -image "hairPaintBaldness.png"
	       	-annotation (uiRes("m_DynCreateHairMenu.kBaldnessAnnot")) 
			-command "paintHairTexture \"baldnessMap\" \"Baldness\" ";
		// specify the attribute name to be displayed in 3dPaint as second parameter to 
		// paintHairTexture
		menuItem -label (uiRes("m_DynCreateHairMenu.kColor")) 
            -image "hairPaintColor.png"
	       	-annotation (uiRes("m_DynCreateHairMenu.kColorAnnot")) 
			-command "paintHairTexture \"hairColor\" \"Hair Color\" ";
		// specify the attribute name to be displayed in 3dPaint as second parameter to 
		// paintHairTexture
		menuItem -label (uiRes("m_DynCreateHairMenu.kSpecular")) 
            -image "hairPaintSpecular.png"
	       	-annotation (uiRes("m_DynCreateHairMenu.kSpecularAnnot")) 
			-command "paintHairTexture \"specularColor\" \"Specular Color\" ";

		setParent -menu ..;

	menuItem -divider true -dividerLabel (uiRes("m_DynCreateHairMenu.kHairEdit"));

	// Assign Hair System sub menu
	//
	string $assignHairSystemItem = `menuItem -label (uiRes("m_DynCreateHairMenu.kAssignHair"))  
        -annotation (uiRes("m_DynCreateHairMenu.kAssignHairAnnot")) 
		-subMenu true -tearOff false -allowOptionBoxes true hairAssignHairSystemItem`;

	menuItem -edit -postMenuCommand ("HairAssignHairSystemMenu " + $assignHairSystemItem )
		hairAssignHairSystemItem;
	setParent -menu ..;

	// Convert Selection sub menu
	//
	string $convertSelectionItem = `menuItem -label (uiRes("m_DynCreateHairMenu.kConvertSelection"))  
        -annotation (uiRes("m_DynCreateHairMenu.kConvertSelectionAnnot")) 
		-subMenu true -tearOff true -allowOptionBoxes true hairConvertSelectionItem`;
	HairConvertSelectionMenu $convertSelectionItem;
	setParent -menu ..;
	
	// Display sub menu
	//
	string $displayItem = `menuItem -label (uiRes("m_DynCreateHairMenu.kDisplayHair"))  
        -annotation (uiRes("m_DynCreateHairMenu.kDisplayHairAnnot")) 
		-subMenu true -tearOff true -allowOptionBoxes true hairDisplayItem`;
	HairDisplayMenu $displayItem;
	setParent -menu ..;

	menuItem -label (uiRes("m_DynCreateHairMenu.kMakeDynamic")) 
        -annotation (uiRes("m_DynCreateHairMenu.kMakeDynamicAnnot")) 
		-image "hairDynamicCurves.png"
		-command "MakeCurvesDynamic"
		-dragMenuCommand "performMakeCurvesDynamic 2"
		-dragDoubleClickCommand "MakeCurvesDynamicOptions";
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("MakeCurvesDynamicOptions"))
			-command "MakeCurvesDynamicOptions";
	
	// Modify Curves sub menu
	//
	string $curveModsItem = `menuItem -label (uiRes("m_DynCreateHairMenu.kModifyCurves"))  -subMenu true
        -annotation (uiRes("m_DynCreateHairMenu.kModifyCurvesAnnot")) 
		-tearOff true -allowOptionBoxes true modifyCurvesItem`;
	ModifyCurvesSubMenu $curveModsItem;
	setParent -menu ..;
	
	// Set Rest Position sub menu
	//
	string $setRestPositionItem = `menuItem -label (uiRes("m_DynCreateHairMenu.kSetRest"))  -subMenu true
        -annotation (uiRes("m_DynCreateHairMenu.kSetRestAnnot")) 
		-tearOff true -allowOptionBoxes true setRestPositionItem`;
	HairRestPositionMenu $setRestPositionItem;
	
	// Set Start Position sub menu
	//
	string $setStartPositionItem = `menuItem -label (uiRes("m_DynCreateHairMenu.kSetStart"))  -subMenu true
        -annotation (uiRes("m_DynCreateHairMenu.kSetStartAnnot")) 
		-tearOff true -allowOptionBoxes true setStartPositionItem`;
	HairStartPositionMenu $setStartPositionItem;

	// Tools
	//
	menuItem -divider true -dividerLabel (uiRes("m_DynCreateHairMenu.kHairTools"));

	menuItem -label (uiRes("m_DynCreateHairMenu.kCurvesToHair")) 
		-annotation (getRunTimeCommandAnnotation("AddCurvesToHairSystem"))
		-command "AddCurvesToHairSystem";

	menuItem -label (uiRes("m_DynCreateHairMenu.kBrushToHair")) 
		-annotation (getRunTimeCommandAnnotation("AssignBrushToHairSystem"))
		-image "hairAssignPFXbrush.png"
		-command "AssignBrushToHairSystem";

	menuItem -label (uiRes("m_DynCreateHairMenu.kPfxToHair")) 
		-annotation (getRunTimeCommandAnnotation("AddPfxToHairSystem"))
		-command "AddPfxToHairSystem";

	menuItem -label (uiRes("m_DynCreateHairMenu.kRandomize")) 
		-annotation (getRunTimeCommandAnnotation("RandomizeFollicles"))
		-command "RandomizeFollicles"
		-dragMenuCommand "performRandomizeFollicles"
		-dragDoubleClickCommand "RandomizeFolliclesOptions";
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("RandomizeFolliclesOptions"))
			-command "RandomizeFolliclesOptions";

	menuItem -label (uiRes("m_DynCreateHairMenu.kScaleHair")) 
		-annotation (uiRes("m_DynCreateHairMenu.kScaleHairAnnot"))  
		-image "hairScaleTool.png"
		-command "scaleHairCtx";

	menuItem -label (uiRes("m_DynCreateHairMenu.kTransplant")) 
		-annotation (getRunTimeCommandAnnotation("TransplantHair"))
		-image "hairTransplant.png"
		-command "TransplantHair"
		-dragMenuCommand "performTransplantHair 2"
		-dragDoubleClickCommand "TransplantHairOptions";
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("TransplantHairOptions"))
			-command "TransplantHairOptions";

	if(`getenv "MAYA_ENABLE_CLASSIC_HAIR"` != "" ) {
		// Classic Hair sub menu
		//
		string $classicHairItem = `menuItem -label (uiRes("m_DynCreateHairMenu.kClassicHair"))  
			-annotation (uiRes("m_DynCreateHairMenu.kClassicHairAnnot")) 
			-subMenu true -tearOff true -allowOptionBoxes true hairClassicItem`;
		HairClassicMenu $classicHairItem;
		setParent -menu ..;
	}

	menuItem -divider true -dividerLabel (uiRes("m_DynCreateHairMenu.kHairDelete"));

	menuItem -label (uiRes("m_DynCreateHairMenu.kDeleteHair"))
		-annotation (getRunTimeCommandAnnotation("DeleteHair"))
		-version "2014"
		-image "hairDelete.png"
		-command "DeleteHair";

	menuItem -label (uiRes("m_DynCreateHairMenu.kDeleteHairSystem")) 
		-annotation (getRunTimeCommandAnnotation("DeleteEntireHairSystem"))
		-image "hairDeleteEntire.png"
		-command "DeleteEntireHairSystem";
}

