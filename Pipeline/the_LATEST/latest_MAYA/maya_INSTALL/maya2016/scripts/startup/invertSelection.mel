// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//  Description:
//      Invert the selection of dag nodes and dag components.
//
//  Return Value:
//      None.
//
global proc invertSelection(){
	
	// determine if anything is selected
	string $selection[] = `ls -selection`;
	if (`size($selection)` != 0){
		// something is selected
		// now determine if any objects are selected
		string $objects[] = `ls -dagObjects -visible -selection`;

		//note that this gives preference to objects if both objects and
		//components are selected
		//there is no user case where the user wants to invert a mixed
		//selection of objects and components
		if (`size($objects)` != 0){
			select -toggle -allDagObjects -visible;
			//check if selection is in a hierarchy
			string $parents[] = `listRelatives -parent -path $selection`;
			if (`size ($parents)` > 0){
				//object is in a hierarchy

				//deselect all parents
				select -deselect $parents;
				//iterate through parents
				for ($parent in $parents){
					//find the children with the full path
					string $children[] = `listRelatives -children -path $parent`;
					//select the children
					select -add $children;
				}
				//make sure the original objects are not selected
				select -deselect $selection;
			}

		} else {
			// must be a component selected
			
			string $newComponents[], $componentID[];

			for ($component in $selection) {
				if (`tokenize $component "[]" $componentID` > 1) {
					int $newCompSize = `size $newComponents`;
					$newComponents[$newCompSize] = $componentID[0] + "[*] ";
				}
			}
			
			select -replace $newComponents;
			select -deselect $selection;
			
		}
	} else {
		// nothing is selected
		error( (uiRes("m_invertSelection.kNoSelection")) );
	}
	
}
