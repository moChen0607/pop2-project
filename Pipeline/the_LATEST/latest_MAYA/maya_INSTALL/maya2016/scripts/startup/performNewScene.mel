// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//  Procedure Name:
//      performNewScene
//
//  Description:
//        
//         
//  Input Arguments:
//        $option : Whether to set the options to default values.
//  Return Value:
//        None
//

global proc setDefaultUnits(string $whichUnits) 
{	
	if ("linear" == $whichUnits) {
        if(!`exists linearUnits_uiToMel`){
			source createPrefWndUI.mel; 
		}
        string $defaultLinearUnit = linearUnits_uiToMel(`optionMenuGrp -q -v linearOpts`);
		optionVar -sv workingUnitLinearDefault $defaultLinearUnit; 
	} else if ("angular" == $whichUnits) {
		if (`optionMenuGrp -q -sl angularOpts` == 1) {
			optionVar -sv workingUnitAngularDefault degree;
		} else {
			optionVar -sv workingUnitAngularDefault radian;
		}
	} else { 
		int $which = `optionMenuGrp -q -sl timeOpts`;
		switch ($which) {
			case 1: optionVar -sv workingUnitTimeDefault game; break;
			case 2: optionVar -sv workingUnitTimeDefault film; break;
			case 3: optionVar -sv workingUnitTimeDefault pal; break;
			case 4: optionVar -sv workingUnitTimeDefault ntsc; break;
			case 5: optionVar -sv workingUnitTimeDefault show; break;
			case 6: optionVar -sv workingUnitTimeDefault palf; break;
			case 7: optionVar -sv workingUnitTimeDefault ntscf; break;
			case 8: optionVar -sv workingUnitTimeDefault millisec; break;
			case 9: optionVar -sv workingUnitTimeDefault sec; break;
			case 10: optionVar -sv workingUnitTimeDefault min; break;
			case 11: optionVar -sv workingUnitTimeDefault hour; break;
			case 12: optionVar -sv workingUnitTimeDefault 2fps; break;
			case 13: optionVar -sv workingUnitTimeDefault 3fps; break;
			case 14: optionVar -sv workingUnitTimeDefault 4fps; break;
			case 15: optionVar -sv workingUnitTimeDefault 5fps; break;
			case 16: optionVar -sv workingUnitTimeDefault 6fps; break;
			case 17: optionVar -sv workingUnitTimeDefault 8fps; break;
			case 18: optionVar -sv workingUnitTimeDefault 10fps; break;
			case 19: optionVar -sv workingUnitTimeDefault 12fps; break;
			case 20: optionVar -sv workingUnitTimeDefault 16fps; break;
			case 21: optionVar -sv workingUnitTimeDefault 20fps; break;
			case 22: optionVar -sv workingUnitTimeDefault 40fps; break;
			case 23: optionVar -sv workingUnitTimeDefault 75fps; break;
			case 24: optionVar -sv workingUnitTimeDefault 80fps; break;
			case 25: optionVar -sv workingUnitTimeDefault 100fps; break;
			case 26: optionVar -sv workingUnitTimeDefault 120fps; break;
			case 27: optionVar -sv workingUnitTimeDefault 125fps; break;
			case 28: optionVar -sv workingUnitTimeDefault 150fps; break;
			case 29: optionVar -sv workingUnitTimeDefault 200fps; break;
			case 30: optionVar -sv workingUnitTimeDefault 240fps; break;
			case 31: optionVar -sv workingUnitTimeDefault 250fps; break;
			case 32: optionVar -sv workingUnitTimeDefault 300fps; break;
			case 33: optionVar -sv workingUnitTimeDefault 375fps; break;
			case 34: optionVar -sv workingUnitTimeDefault 400fps; break;
			case 35: optionVar -sv workingUnitTimeDefault 500fps; break;
			case 36: optionVar -sv workingUnitTimeDefault 600fps; break;
			case 37: optionVar -sv workingUnitTimeDefault 750fps; break;
			case 38: optionVar -sv workingUnitTimeDefault 1200fps; break;
			case 39: optionVar -sv workingUnitTimeDefault 1500fps; break;
			case 40: optionVar -sv workingUnitTimeDefault 2000fps; break;
			case 41: optionVar -sv workingUnitTimeDefault 3000fps; break;
			case 42: optionVar -sv workingUnitTimeDefault 6000fps; break;
		}
	}
}

proc setOptionVars (int	$forceFactorySettings)
{
	if ($forceFactorySettings || !`optionVar -exists "newFileEnabled"`)
		optionVar -intValue "newFileEnabled" 0;
	
	if ($forceFactorySettings || !`optionVar -exists "keepCurrentWorkingUnits"`)
		optionVar -intValue "keepCurrentWorkingUnits" 0;		

	if ($forceFactorySettings || !`optionVar -exists "newFileName"`)
		optionVar -stringValue "newFileName" "";

	// Force factory settings on the following vars is different from the case when vars do not exist
	if ($forceFactorySettings) {		
		optionVar -stringValue "workingUnitLinearDefault" "cm";
		optionVar -stringValue "workingUnitAngularDefault" "deg";
		optionVar -stringValue "workingUnitTimeDefault" "film";
		optionVar -intValue "viewCubeShowCompassDefault" 0;
		optionVar -floatValue "viewCubeCompassAngleDefault" 0.0;
		optionVar -floatValue "playbackMinDefault" 1.0;
		optionVar -floatValue "playbackMaxDefault" 24.0;
		optionVar -floatValue "playbackMinRangeDefault" 1.0;
		optionVar -floatValue "playbackMaxRangeDefault" 48.0;
		optionMenuGrp -edit -enable 1 linearOpts;
		optionMenuGrp -edit -enable 1 angularOpts;
		optionMenuGrp -edit -enable 1 timeOpts;
		text -edit -enable 0 newFileText;
		textField -edit -enable 0 newFileName;
		symbolButton -edit -enable 0 newFileSymbolButton;
		frameLayout -edit -enable 1 workingUnitsLayout; 
		frameLayout -edit -enable 1 timelineSettingsLayout;
	} else {			
		if(!`optionVar -exists "workingUnitLinearDefault"`) 
			optionVar -stringValue "workingUnitLinearDefault" `currentUnit -q -l`;
		if(!`optionVar -exists "workingUnitAngularDefault"`)
			optionVar -stringValue "workingUnitAngularDefault" `currentUnit -q -a`;
		if(!`optionVar -exists "workingUnitTimeDefault"`)
			optionVar -stringValue "workingUnitTimeDefault" `currentUnit -q -t`;	
		if(!`optionVar -exists "viewCubeShowCompassDefault"`)
			optionVar -intValue "viewCubeShowCompassDefault" `viewManip -q -dc`;
		if(!`optionVar -exists "viewCubeCompassAngleDefault"`)
			optionVar -floatValue "viewCubeCompassAngleDefault" `viewManip -q -ca`;
		if(!`optionVar -exists "playbackMinDefault"`)
			optionVar -floatValue "playbackMinDefault" `playbackOptions -q -min`;
		if(!`optionVar -exists "playbackMaxDefault"`)
			optionVar -floatValue "playbackMaxDefault" `playbackOptions -q -max`;
		if(!`optionVar -exists "playbackMinRangeDefault"`)
			optionVar -floatValue "playbackMinRangeDefault" `playbackOptions -q -animationStartTime`;
		if(!`optionVar -exists "playbackMaxRangeDefault"`)
			optionVar -floatValue "playbackMaxRangeDefault" `playbackOptions -q -animationEndTime`;
	}
}

global proc newFileSetup (string $parent, int $forceFactorySettings)
{
	setOptionVars($forceFactorySettings);
	setParent $parent;

	checkBoxGrp
		-edit
		-value1 `optionVar -query newFileEnabled`
		newFileEnabled;
	
	checkBoxGrp
		-edit
		-value1 `optionVar -query keepCurrentWorkingUnits`
		keepCurrentWorkingUnits;		

	textField
		-edit
		-text `optionVar -query newFileName`
		newFileName;
		
	string $type;
	int $which;

	//  linear units
	//	
	$type = `optionVar -q workingUnitLinearDefault`;	
	if ("mm" == $type || "millimeter" == $type) {
		$which = 1;
	} else if ("cm" == $type || "centimeter" == $type) {
		$which = 2;
	} else if ("m" == $type || "meter" == $type) {
		$which = 3;
	} else if ("in" == $type || "inch" == $type) {
		$which = 4;
	} else if ("ft" == $type || "foot" == $type) {
		$which = 5;
	} else if ("yd" == $type || "yard" == $type) {
		$which = 6;
	} else {
		$which = 1;
	}
	optionMenuGrp -e -sl $which linearOpts;

	//  angular
	//
	$type = `optionVar -q workingUnitAngularDefault`;
	if ("deg" == $type || "degree" == $type) {
		$which = 1;
	} else if ("rad" == $type || "radian" == $type) {
		$which = 2;
	} else {
		$which = 1;
	}
	optionMenuGrp -e -sl $which angularOpts;

	//  time
	//
	$type = `optionVar -q workingUnitTimeDefault`;
	if ("game" == $type) {
		$which = 1;
	} else if ("film" == $type) {
		$which = 2;
	} else if ("pal" == $type) {
		$which = 3;
	} else if ("ntsc" == $type) {
		$which = 4;
	} else if ("show" == $type) {
		$which = 5;
	} else if ("palf" == $type) {
		$which = 6;
	} else if ("ntscf" == $type) {
		$which = 7;
	} else if ("millisec" == $type) {
		$which = 8;
	} else if ("sec" == $type) {
		$which = 9;
	} else if ("min" == $type) {
		$which = 10;
	} else if ("hour" == $type) {
		$which = 11;
	} else if ("2fps" == $type) {
		$which = 12;
	} else if ("3fps" == $type) {
		$which = 13;
	} else if ("4fps" == $type) {
		$which = 14;
	} else if ("5fps" == $type) {
		$which = 15;
	} else if ("6fps" == $type) {
		$which = 16;
	} else if ("8fps" == $type) {
		$which = 17;
	} else if ("10fps" == $type) {
		$which = 18;
	} else if ("12fps" == $type) {
		$which = 19;
	} else if ("16fps" == $type) {
		$which = 20;
	} else if ("20fps" == $type) {
		$which = 21;
	} else if ("40fps" == $type) {
		$which = 22;
	} else if ("75fps" == $type) {
		$which = 23;
	} else if ("80fps" == $type) {
		$which = 24;
	} else if ("100fps" == $type) {
		$which = 25;
	} else if ("120fps" == $type) {
		$which = 26;
	} else if ("125fps" == $type) {
		$which = 27;
	} else if ("150fps" == $type) {
		$which = 28;
	} else if ("200fps" == $type) {
		$which = 29;
	} else if ("240fps" == $type) {
		$which = 30;
	} else if ("250fps" == $type) {
		$which = 31;
	} else if ("300fps" == $type) {
		$which = 32;
	} else if ("375fps" == $type) {
		$which = 33;
	} else if ("400fps" == $type) {
		$which = 34;
	} else if ("500fps" == $type) {
		$which = 35;
	} else if ("600fps" == $type) {
		$which = 36;
	} else if ("750fps" == $type) {
		$which = 37;
	} else if ("1200fps" == $type) {
		$which = 38;
	} else if ("1500fps" == $type) {
		$which = 39;
	} else if ("2000fps" == $type) {
		$which = 40;
	} else if ("3000fps" == $type) {
		$which = 41;
	} else if ("6000fps" == $type) {
		$which = 42;
	} else {
		$which = 1;
	}
	optionMenuGrp -e -sl $which timeOpts;
	
	// Display Compass
	//
	int	$showCompass = `optionVar -q viewCubeShowCompassDefault`;
	checkBoxGrp -e -v1 $showCompass viewCubeShowCompassDefault;

	// Compass Angle
	//
	floatSliderGrp -e -enable $showCompass
		-value `optionVar -q viewCubeCompassAngleDefault`
		viewCubeCompassAngleDefault;

	// Playback Start/End 
	//
	floatFieldGrp -e
		-value1 `optionVar -query playbackMinDefault`
		-value2 `optionVar -query playbackMaxDefault`
		timeSliderBounds;

	// Animation Start/End
	// 
	floatFieldGrp -e
		-value1 `optionVar -query playbackMinRangeDefault`
		-value2 `optionVar -query playbackMaxRangeDefault`
		rangeSliderBounds;

}

global proc newFileCallback (string $parent, int $doIt)
{	
	setParent $parent;

	optionVar -intValue "newFileEnabled"
		`checkBoxGrp -query -value1 newFileEnabled`;
		
	optionVar -stringValue "newFileName"
		`textField -query -text newFileName`;

	if ($doIt) 
	{
		performNewScene 0;
		string $tmpCmd = "performNewScene 0 ";
		addToRecentCommandQueue $tmpCmd "New Scene";
	}
}

proc newFileOptions ()
{
	string $commandName = "newFile";
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");
	//	STEP 1:  Get the option box.
	//	============================
	//
	string $layout = getOptionBox();
	setParent $layout;
	//	STEP 2:  Pass the command name to the option box.
	//	=================================================
	//
	setOptionBoxCommandName("New Scene Options");
	//	STEP 3:  Activate the default UI template.
	//	==========================================
	//
	setUITemplate -pushTemplate DefaultTemplate;
	//	STEP 4: Create option box contents.
	//	===================================
	//
	waitCursor -state 1;
	
	tabLayout -scrollable true -tabsVisible false;
	
	string $parent = `columnLayout -adjustableColumn 1 -columnAttach "both" 5`;
		
	columnLayout;
	
	//checkbox for default on/off
	checkBoxGrp
		-label ""
		-label1 (uiRes("m_performNewScene.kEnableDefaultScene")) 
		-numberOfCheckBoxes 1
		-offCommand ("text -edit -enable 0 newFileText;"+
			"textField -edit -enable 0 newFileName;" +
			"symbolButton -edit -enable 0 newFileSymbolButton;" +
			"frameLayout -edit -enable 1 workingUnitsLayout;" + 
			"frameLayout -edit -enable 1 timelineSettingsLayout")
		-onCommand ("text -edit -enable 1 newFileText;"+
			"textField -edit -enable 1 newFileName;" +
			"symbolButton -edit -enable 1 newFileSymbolButton;" +
			"frameLayout -edit -enable 0 workingUnitsLayout;" +
			"frameLayout -edit -enable 0 timelineSettingsLayout")
	newFileEnabled;
				
	rowLayout -numberOfColumns 3
		-columnWidth 2 212 
		-columnWidth 3 25
		defaultSceneLayout;
		text -label (uiRes("m_performNewScene.kDefaultScene"))  
			-enable `optionVar -query "newFileEnabled"`
			newFileText;
		textField 
			-enable `optionVar -query "newFileEnabled"`
			newFileName;
		symbolButton 
			-image "navButtonBrowse.png"
			-enable `optionVar -query "newFileEnabled"`
			-command "string $newFileName = `fileDialog`; textField -edit -text $newFileName newFileName"
			newFileSymbolButton;
		
	setParent $parent;	
	
	separator -style "none";

	frameLayout -label (uiRes("m_performNewScene.kDefaultWorkingUnits")) 
			-labelVisible true 
			-labelIndent 5 
			-collapsable false
			-marginWidth 5 -marginHeight 5
			workingUnitsLayout;

		columnLayout -adj true;
			
			//checkbox to reset working units on/off
			checkBoxGrp
				-label ""
				-label1 (uiRes("m_performNewScene.kResetWorkingUnits")) 
				-numberOfCheckBoxes 1				
				-offCommand ("optionVar -iv keepCurrentWorkingUnits off;" +
							 "optionMenuGrp -edit -enable 1 linearOpts;"+
							 "optionMenuGrp -edit -enable 1 angularOpts;" +
							 "optionMenuGrp -edit -enable 1 timeOpts")
							
				-onCommand ("optionVar -iv keepCurrentWorkingUnits on;" +
							"optionMenuGrp -edit -enable 0 linearOpts;"+
							"optionMenuGrp -edit -enable 0 angularOpts;" +
							"optionMenuGrp -edit -enable 0 timeOpts")
							
			keepCurrentWorkingUnits;
			
			separator -style "none" -h 10;
			
			optionMenuGrp -label (uiRes("m_performNewScene.kLinear"))  
				-cc ("setDefaultUnits \"linear\" ")
				linearOpts;

			    menuItem -label (uiRes("m_performNewScene.kMillimeter"));	// menu 1
			    menuItem -label (uiRes("m_performNewScene.kCentimeter"));	// menu 2
			    menuItem -label (uiRes("m_performNewScene.kMeter"));				// menu 3
			    menuItem -label (uiRes("m_performNewScene.kInch"));				// menu 4
			    menuItem -label (uiRes("m_performNewScene.kFoot"));				// menu 5
			    menuItem -label (uiRes("m_performNewScene.kYard"));				// menu 6

			separator -style "none" -h 10;			

			optionMenuGrp -label (uiRes("m_performNewScene.kAngular")) 
				-cc ("setDefaultUnits \"angular\" ")
				angularOpts;

			    menuItem -label (uiRes("m_performNewScene.kDegrees"));
			    menuItem -label (uiRes("m_performNewScene.kRadians"));

			separator -style "none" -h 10;			

			optionMenuGrp -label (uiRes("m_performNewScene.kTime")) 
				-cc ("setDefaultUnits \"time\" ")
				timeOpts;

			    menuItem -label (uiRes("m_performNewScene.kFps"));
			    menuItem -label (uiRes("m_performNewScene.kFilm"));
			    menuItem -label (uiRes("m_performNewScene.kPAL"));
			    menuItem -label (uiRes("m_performNewScene.kNTSC"));
			    menuItem -label (uiRes("m_performNewScene.kShow"));
			    menuItem -label (uiRes("m_performNewScene.kPALField"));
			    menuItem -label (uiRes("m_performNewScene.kNTSCField"));
			    menuItem -label (uiRes("m_performNewScene.kMilliseconds"));
			    menuItem -label (uiRes("m_performNewScene.kSeconds"));
			    menuItem -label (uiRes("m_performNewScene.kMinutes"));
			    menuItem -label (uiRes("m_performNewScene.kHours"));
				menuItem -label (uiRes("m_performNewScene.kTwoFps"));
				menuItem -label (uiRes("m_performNewScene.kThreeFps"));
				menuItem -label (uiRes("m_performNewScene.kFourFps"));
				menuItem -label (uiRes("m_performNewScene.kFiveFps"));
				menuItem -label (uiRes("m_performNewScene.kSixFps"));
				menuItem -label (uiRes("m_performNewScene.kEightFps"));
				menuItem -label (uiRes("m_performNewScene.kTenFps"));
				menuItem -label (uiRes("m_performNewScene.kTwelveFps"));
				menuItem -label (uiRes("m_performNewScene.kSixteenFps"));
				menuItem -label (uiRes("m_performNewScene.kTwentyFps"));
				menuItem -label (uiRes("m_performNewScene.kFortyFps"));
				menuItem -label (uiRes("m_performNewScene.kSeventyfiveFps"));
				menuItem -label (uiRes("m_performNewScene.kEightyFps"));
				menuItem -label (uiRes("m_performNewScene.kHundredFps"));
				menuItem -label (uiRes("m_performNewScene.kOneTwentyFps"));
				menuItem -label (uiRes("m_performNewScene.kOneTwentyFiveFps"));
				menuItem -label (uiRes("m_performNewScene.kOneFiftyFps"));
				menuItem -label (uiRes("m_performNewScene.kTwoHundredFps"));
				menuItem -label (uiRes("m_performNewScene.kTwoFortyFps"));
				menuItem -label (uiRes("m_performNewScene.kTwoFiftyFps"));
				menuItem -label (uiRes("m_performNewScene.kThreeHundredFps"));
				menuItem -label (uiRes("m_performNewScene.kThreeSeventyFiveFps"));
				menuItem -label (uiRes("m_performNewScene.kFourHundredFps"));
				menuItem -label (uiRes("m_performNewScene.kFiveHundredFps"));
				menuItem -label (uiRes("m_performNewScene.kSixHundredFps"));
				menuItem -label (uiRes("m_performNewScene.kSevenFiftyFps"));
				menuItem -label (uiRes("m_performNewScene.kTwelveHundredFps"));
				menuItem -label (uiRes("m_performNewScene.kFifteenHundredFps"));
				menuItem -label (uiRes("m_performNewScene.kTwoThousandFps"));
				menuItem -label (uiRes("m_performNewScene.kThreeThousandFps"));
				menuItem -label (uiRes("m_performNewScene.kSixThousandFps"));			
			
	setParent $parent;	
	
	frameLayout -label (uiRes("m_performNewScene.kDefaultViewCubeSettings")) 
			-labelVisible true 
			-labelIndent 5 
			-collapsable false
			-marginWidth 5 -marginHeight 5
			viewCubeDefaultsLayout;

	    columnLayout -adj true;

			checkBoxGrp -label ""
				-label1 (uiRes("m_performNewScene.kShowCompass"))
				-on1 ("optionVar -iv viewCubeShowCompassDefault on; floatSliderGrp -e -enable on viewCubeCompassAngleDefault")
				-of1 ("optionVar -iv viewCubeShowCompassDefault off; floatSliderGrp -e -enable off viewCubeCompassAngleDefault")
				viewCubeShowCompassDefault;

			floatSliderGrp -field true
				-label (uiRes("m_performNewScene.kCompassAngle")) 
				-extraLabel (uiRes("m_performNewScene.kCompassAngleUnits"))
				-cc ("optionVar -fv viewCubeCompassAngleDefault #1")
				-min 0 -max 360
				-cw 1 118
				-cw 4 64
				viewCubeCompassAngleDefault;

	setParent $parent;	

	frameLayout -label (uiRes("m_performNewScene.kDefaultTimeSliderSettings")) 
			-labelVisible true 
			-labelIndent 5 
			-collapsable false
			-marginWidth 5 -marginHeight 5
			timelineSettingsLayout;

	    columnLayout -adj true;

			// Changing the playback range can sometimes affect the start/end
			// range.  Update it in the callback.
			//
		    floatFieldGrp
				-label (uiRes("m_performNewScene.kPlaybackStart"))  
				-cal 1 "right"
				-nf 2 
				-pre 2
				-cc ( "optionVar -fv playbackMinDefault #1; " +
					  "optionVar -fv playbackMaxDefault #2; ")
				timeSliderBounds;
	
			// Changing the start/end range can sometimes affect the playback
			// range.  Update it in the callback.
			//
			floatFieldGrp
				-label (uiRes("m_performNewScene.kAnimationStart"))  
				-cal 1 "right"
				-nf 2 
				-pre 2
				-cc ( "optionVar -fv playbackMinRangeDefault #1; " +
					  "optionVar -fv playbackMaxRangeDefault #2; ")
				rangeSliderBounds;	
	
	setParent ..;
		
	setParent -menu ..;

	waitCursor -state 0;
	//	Step 5: Deactivate the default UI template.
	//	===========================================
	//
	setUITemplate -popTemplate;

	//	Step 6: Customize the buttons.  
	//	==============================
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit 
		-label (uiRes("m_performNewScene.kApply")) 
		-command ($callback + " " + $parent + " " + 1) 
		$applyBtn;
	
	string $applyAndCloseBtn = getOptionBoxApplyAndCloseBtn();
	button -edit 
		-label (uiRes("m_performNewScene.kNew")) 
		$applyAndCloseBtn;

	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + " " +"; hideOptionBox")
		$saveBtn;

	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;

	//	Step 7: Set the option box title.
	//	=================================
	//
	string $title = (uiRes("m_performNewScene.kNewSceneOptions"));
	setOptionBoxTitle( $title );
	//	Step 8: Customize the 'Help' menu item text.
	//	============================================
	//
	setOptionBoxHelpTag("NewSceneOptions");
	//	Step 9: Set the current values of the option box.
	//	=================================================
	//
	eval (($setup + " " + $parent + " " + 0));
	//	Step 10: Show the option box.
	//	=============================
	//
	string $cmds="";
	if(`optionVar -query "newFileEnabled"` == 1)
	{
		$cmds+="text -edit -enable 1 newFileText;"+
			"textField -edit -enable 1 newFileName;" +
			"symbolButton -edit -enable 1 newFileSymbolButton;" +
			"frameLayout -edit -enable 0 workingUnitsLayout;" +
			"frameLayout -edit -enable 0 timelineSettingsLayout";
	}else
	{
		$cmds+="text -edit -enable 0 newFileText;"+
			"textField -edit -enable 0 newFileName;" +
			"symbolButton -edit -enable 0 newFileSymbolButton;" +
			"frameLayout -edit -enable 1 workingUnitsLayout;" + 
			"frameLayout -edit -enable 1 timelineSettingsLayout";
	}
	eval($cmds);
	
	string $cmds="";
	if(`optionVar -query "keepCurrentWorkingUnits"` == 1)
	{
		$cmds+="optionMenuGrp -edit -enable 0 linearOpts;"+
			   "optionMenuGrp -edit -enable 0 angularOpts;" +
			   "optionMenuGrp -edit -enable 0 timeOpts";
	}else
	{
		$cmds+="optionMenuGrp -edit -enable 1 linearOpts;"+
			   "optionMenuGrp -edit -enable 1 angularOpts;" +
			   "optionMenuGrp -edit -enable 1 timeOpts";
	}
	eval($cmds);	

	showOptionBox();
}


proc string assembleCmd()
{
	setOptionVars (false);

	//int $doHistory = `constructionHistory -q -toggle`;

	string $cmd = "checkForUnknownNodes(); int $result = `saveChanges(\"file -f -new\")`;";
	
	if ((`optionVar -query "newFileEnabled"` == 1) && (`optionVar -query "newFileName"` != "")){
		$cmd += "if($result) ";
		$cmd += "file -import \"";
		$cmd += `optionVar -query "newFileName"`;
		$cmd += " \";";
	}

	return $cmd;	
}


global proc string performNewScene (int $option)
{
	string $cmd="";

	switch ($option) 
	{
		case 0:
			$cmd = `assembleCmd`;
			eval($cmd);
			break;
		case 1:
			newFileOptions;
			break;
		case 2:
			$cmd = `assembleCmd`;
			break;
	}
	return $cmd;
}
