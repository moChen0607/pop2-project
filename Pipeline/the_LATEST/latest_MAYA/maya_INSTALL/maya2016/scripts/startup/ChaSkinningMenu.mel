// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//      ChaSkinningMenu
//
//  Description:
//      Create the RIGGING->Skinning menu
//
//  Input Arguments:
//      parent to parent the menu to
//
//  Return Value:
//      None
//

global proc ChaSkinningMenu( string $parent )
{
	setParent -menu $parent;

	// If menu is already build return
	if( `menu -q -ni $parent` != 0 ) {
		return;
	}

/*
	menuItem -divider true -dividerLabel  (uiRes("m_ChaSkinningMenu.kSkinningTools"));
*/

	menuItem -divider      true -dividerLabel (uiRes("m_ChaSkinningMenu.kSkinningCreate"));

		menuItem
			-label      (uiRes("m_ChaSkinningMenu.kBindSkinSmooth"))
			-i         "smoothSkin.png"
			-annotation (uiRes("m_ChaSkinningMenu.kBindSkinSmoothAnnot"))
			-c          "SmoothBindSkin"
			skinClusterAttachItem;
		menuItem
			-optionBox  true 
			-annotation (uiRes("m_ChaSkinningMenu.kBindSkinSmoothOptAnnot"))
			-i          "smoothSkin.png"
			-c          "SmoothBindSkinOptions"
			skinClusterDialog;

		menuItem
			-label      (uiRes("m_ChaSkinningMenu.kInteractiveBind")) 
			-i          "interactiveBindTool.png"
			-annotation (uiRes("m_ChaSkinningMenu.kBindSkinInteractiveAnnot"))
			-c          "InteractiveBindSkin"
			skinInteractiveItem;
		menuItem
			-optionBox  true 
			-annotation (uiRes("m_ChaSkinningMenu.kBindSkinInteractiveOptAnnot"))
			-i          "interactiveBindTool.png"
			-c          "InteractiveBindSkinOptions" 
			skinInteractiveDialog;

		menuItem
			-label      (uiRes("m_ChaSkinningMenu.kDetachSkin"))
			-annotation (uiRes("m_ChaSkinningMenu.kDetachSkinAnnot"))
			-image      "detachSkin.png" 
			-c          "DetachSkin"
			unbindSkinItem;
		menuItem
			-optionBox  true 
			-annotation (uiRes("m_ChaSkinningMenu.kDetachSkinOptAnnot"))
			-image      "detachSkin.png" 
			-c          "DetachSkinOptions"
			unbindSkinDialog;

		menuItem -label (uiRes("m_ChaSkinningMenu.kBindPose"))
			-annotation (uiRes("m_ChaSkinningMenu.kBindPoseAnnot"))
			-image "goToBindPose.png" 
			-c "GoToBindPose" bindPoseMenu;


	menuItem -divider true -dividerLabel  (uiRes("m_ChaSkinningMenu.kSkinningMaps"));

		menuItem
			-label      (uiRes("m_ChaSkinningMenu.kPaintSkinWeights")) 
			-image      "paintSkinWeights.png" 
			-annotation (uiRes("m_ChaSkinningMenu.kPaintSkinWeightsAnnot")) 
			-c          "ArtPaintSkinWeightsTool"
			skinWeightPaintItem;
		menuItem
			-optionBox  true
			-image      "paintSkinWeights.png" 
			-annotation (uiRes("m_ChaSkinningMenu.kPaintSkinWeightsOptAnnot")) 
			-c          "ArtPaintSkinWeightsToolOptions" 
			skinWeightPaintDialogItem;

		menuItem
			-label      (uiRes("m_ChaSkinningMenu.kMirrorSkinWeights")) 
			-annotation (uiRes("m_ChaSkinningMenu.kMirrorSkinWeightsAnnot")) 
			-i          "mirrorSkinWeight.png"
			-c          "MirrorSkinWeights"
			mirrorSkinWeightsItem;
		menuItem
			-optionBox  true
			-annotation (uiRes("m_ChaSkinningMenu.kMirrorSkinWeightsOptAnnot")) 
			-i          "mirrorSkinWeight.png"
			-c          "MirrorSkinWeightsOptions"
			mirrorSkinWeightsDialog;

		menuItem
			-label      (uiRes("m_ChaSkinningMenu.kCopySkinWeights")) 
			-i          "copySkinWeight.png"
			-annotation (uiRes("m_ChaSkinningMenu.kCopySkinWeightsAnnot")) 
			-c          "CopySkinWeights"
			copySkinWeightsItem;
		menuItem
			-optionBox  true 
			-annotation (uiRes("m_ChaSkinningMenu.kCopySkinWeightsOptAnnot")) 
			-i          "copySkinWeight.png"
			-c          "CopySkinWeightsOptions"
			copySkinWeightsDialog;

		menuItem
			-label      (uiRes("m_ChaSkinningMenu.kSmoothSkinWeights")) 
			-i          "smoothSkinWeights.png"
			-annotation (uiRes("m_ChaSkinningMenu.kSmoothSkinWeightsAnnot")) 
			-c          "SmoothSkinWeights"
			smoothSkinWeightsItem;
		menuItem
			-optionBox  true 
			-annotation (uiRes("m_ChaSkinningMenu.kSmoothSkinWeightsOptAnnot")) 
			-i          "smoothSkinWeights.png"
			-c          "SmoothSkinWeightsOptions"
			smoothSkinWeightsDialog;

		menuItem
			-label      (uiRes("m_ChaSkinningMenu.kHammerSkinWeights"))
			-annotation (uiRes("m_ChaSkinningMenu.kHammerSkinWeightsAnnot"))
			-c          "weightHammerVerts"
			weightHammerItem;

		menuItem -d true -ld false;

		menuItem -label (uiRes("m_ChaSkinningMenu.kCopySkinVertWeights"))
			-annotation (uiRes("m_ChaSkinningMenu.kCopySkinVertWeightsAnnot"))
			-c          "artAttrSkinWeightCopy"
			copyVertexItem;

		menuItem -label (uiRes("m_ChaSkinningMenu.kPasteSkinVertWeights"))
			-annotation (uiRes("m_ChaSkinningMenu.kPasteSkinVertWeightsAnnot"))
			-c          "artAttrSkinWeightPaste"
			pasteVertexItem;

		menuItem -d true -ld false;

		menuItem
			-label      (uiRes("m_ChaSkinningMenu.kPruneWeights")) 
			-annotation (uiRes("m_ChaSkinningMenu.kPruneWeightsAnnot"))
			-c          "PruneSmallWeights"
			pruneSmallWeightsItem; 
		menuItem
			-optionBox  true
			-annotation (uiRes("m_ChaSkinningMenu.kPruneWeightsOptAnnot"))
			-c          "PruneSmallWeightsOptions"
			pruneSkinWeightsDialog;

		menuItem
			-label      (uiRes("m_ChaSkinningMenu.kResetWeights")) 
			-annotation (uiRes("m_ChaSkinningMenu.kResetWeightsAnnot"))
			-c          "ResetWeightsToDefault"
			resetToDefaultItem;

			menuItem -label (uiRes("m_ChaSkinningMenu.kNormalization"))  -sm true -to true;

				menuItem -label (uiRes("m_ChaSkinningMenu.kDisableNormalization"))
					-annotation (uiRes("m_ChaSkinningMenu.kDisableNormalizationAnnot"))
					-c          "doNormalizeWeightsArgList 1 {\"1\"}"
					disableWeightNrmItem;

				menuItem
					-label      (uiRes("m_ChaSkinningMenu.kEnablePostNormalization")) 
					-annotation (uiRes("m_ChaSkinningMenu.kEnablePostNormalizationAnnot")) 
					-c          "doNormalizeWeightsArgList 1 {\"3\"}"
					enableWeightPostNrmItem;

				menuItem
					-label      (uiRes("m_ChaSkinningMenu.kEnableRenormalization"))
					-annotation (uiRes("m_ChaSkinningMenu.kEnableRenormalizationAnnot"))
					-c          "doNormalizeWeightsArgList 1 {\"2\"}"
					enableWeightNrmItem;

				menuItem
					-label      (uiRes("m_ChaSkinningMenu.kNormalizeWeights")) 
					-annotation (uiRes("m_ChaSkinningMenu.kNormalizeWeightsAnnot")) 
					-c          "doNormalizeWeightsArgList 1 {\"4\"}"
					normalizeWeightsItem;

			setParent -menu ..;

		menuItem -divider true -longDivider false;

		menuItem
			-label      (uiRes("m_ChaSkinningMenu.kExportSkinWeights")) 
			-i          "exportSmoothSkin.png"
			-annotation (uiRes("m_ChaSkinningMenu.kExportSkinMapsAnnot")) 
			-c          "ExportSkinWeightMaps"
			exportSkinWeightMaptem;
		menuItem
			-optionBox  true
			-annotation (uiRes("m_ChaSkinningMenu.kExportSkinMapsOptAnnot")) 
			-i          "exportSmoothSkin.png"
			-c          "ExportSkinWeightMapsOptions" 
			exportSkinWeightMapDialogItem;

		menuItem
			-label      (uiRes("m_ChaSkinningMenu.kImportSkinWeights")) 
			-i          "importSmoothSkin.png"
			-annotation (uiRes("m_ChaSkinningMenu.kImportSkinMapsAnnot")) 
			-c          "ImportSkinWeightMaps"
			importSkinWeightMaptem;

	menuItem -divider true -dividerLabel (uiRes("m_ChaSkinningMenu.kOther"));

		menuItem -label (uiRes("m_ChaSkinningMenu.kInteractiveVolume")) 
			-image "interactiveBindTool.png"  
			-annotation (uiRes("m_ChaSkinningMenu.kInteractiveVolumeAnnot")) 
			-c "setToolTo skinBindingContext;" 
			volumBindingItem;
		menuItem -optionBox true
			-image "interactiveBindTool.png" 
			-annotation (uiRes("m_ChaSkinningMenu.kInteractiveWeightsOptAnnot")) 
			-c "setToolTo skinBindingContext; toolPropertyWindow;" 
			volumeBindingOptDialogItem;

		menuItem -label (uiRes("m_ChaSkinningMenu.kMoveSkinJoints"))
			-annotation (uiRes("m_ChaSkinningMenu.kMoveSkinJointsAnnot"))
			-image "moveSkinnedJoint.png"
			-c "MoveSkinJointsTool" moveSkinJointsItem;
		menuItem -optionBox true
			-annotation (uiRes("m_ChaSkinningMenu.kMoveSkinJointsOptAnnot"))
			-image "moveSkinnedJoint.png"
			-c "MoveSkinJointsToolOptions"
			moveSkinJointsDialogItem;

		menuItem -label (uiRes("m_ChaSkinningMenu.kMoveInfluence")) 
			-annotation (uiRes("m_ChaSkinningMenu.kMoveInfluenceAnnot"))
			-c          "MoveInfluence"
			moveInfluenceItem;

		menuItem -label (uiRes("m_ChaSkinningMenu.kEditInfluences"))  -sm true -to true;

			menuItem
				-label      (uiRes("m_ChaSkinningMenu.kAddInfluence")) 
				-annotation (uiRes("m_ChaSkinningMenu.kAddInfluenceAnnot"))
				-image      "addWrapInfluence.png" 
				-c          "AddInfluence"
				addInfluenceItem;
			menuItem
				-optionBox  true
				-annotation (uiRes("m_ChaSkinningMenu.kAddInfluenceOptAnnot"))
				-image      "addWrapInfluence.png"
				-c          "AddInfluenceOptions"
				addInfluenceDialog;

			menuItem
				-label      (uiRes("m_ChaSkinningMenu.kRemoveInfluence")) 
				-annotation (uiRes("m_ChaSkinningMenu.kRemoveInfluenceAnnot")) 
				-image      "removeWrapInfluence.png" 
				-c          "RemoveInfluence"
				removeInfluenceItem;

			menuItem
				-label      (uiRes("m_ChaSkinningMenu.kSetMaxInfluence")) 
				-annotation (uiRes("m_ChaSkinningMenu.kSetMaxInfluenceAnnot")) 
				-image      "setMaxInfluence.png" 
				-c          "SetMaxInfluences"
				maxInfluencesItem;

			menuItem
				-label      (uiRes("m_ChaSkinningMenu.kRemoveUnusedInf")) 
				-annotation (uiRes("m_ChaSkinningMenu.kRemoveUnusedInfAnnot")) 
				-c          "removeUnusedInfluences"
				removeUnusedInfluencesItem; 

			setParent -menu ..;


		menuItem
			-label      (uiRes("m_ChaSkinningMenu.kSubstituteGeometry"))
			-ecr        true 
			-i          "substGeometry.png"
			-annotation (uiRes("m_ChaSkinningMenu.kSubstituteGeometryAnnot")) 
			-ddc        "performSubstituteGeometry 1"
			-dmc        "performSubstituteGeometry 2"
			-c          "SubstituteGeometry";
		menuItem
			-optionBox  1 
			-i          "substGeometry.png" 
			-annotation (uiRes("m_ChaSkinningMenu.kSubstituteGeometryOptAnnot"))
			-ecr        false
			-c          "SubstituteGeometryOptions"
			;

	setParent -menu ..;
}
