// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc createImplicitVolumeProc( string $type )
{
	string $shaderName, $shadGroup, $shape;
	if( $type == "sphere"){
		if( objExists( "sphereFogSG" )){
			$shadGroup = "sphereFogSG";
			int $hasShader = `connectionInfo -isDestination ($shadGroup + ".volumeShader")`;
			if( !$hasShader )
			{
				$shaderName = `shadingNode -asShader volumeFog -name "sphereFog"`;
				connectAttr -f ($shaderName + ".outColor") ($shadGroup + ".volumeShader");
				setAttr ($shaderName + ".dropoffShape") 1;
			}
		} else {
			$shaderName = `shadingNode -asShader volumeFog -name "sphereFog"`;
			$shadGroup =  `sets -renderable true -noSurfaceShader true -empty -name ($shaderName + "SG")`;
			connectAttr -f ($shaderName + ".outColor") ($shadGroup + ".volumeShader");
			setAttr ($shaderName + ".dropoffShape") 1;
		}
		$shape = `createNode renderSphere`;
	} else if( $type == "cube") {
		if( objExists( "cubeFogSG" )){
			$shadGroup = "cubeFogSG";
			int $hasShader = `connectionInfo -isDestination ($shadGroup + ".volumeShader")`;
			if( !$hasShader )
			{
				$shaderName = `shadingNode -asShader volumeFog -name "cubeFog"`;
				connectAttr -f ($shaderName + ".outColor") ($shadGroup + ".volumeShader");
				setAttr ($shaderName + ".dropoffShape") 2;
			}
		} else {
			$shaderName = `shadingNode -asShader volumeFog -name "cubeFog"`;
			$shadGroup =  `sets -renderable true -noSurfaceShader true -empty -name ($shaderName + "SG")`;
			connectAttr -f ($shaderName + ".outColor") ($shadGroup + ".volumeShader");
			setAttr ($shaderName + ".dropoffShape") 2;
		}
		$shape = `createNode renderBox`;
	} else if( $type == "cone") {
		if( objExists( "coneFogSG" )){
			$shadGroup = "coneFogSG";
			int $hasShader = `connectionInfo -isDestination ($shadGroup + ".volumeShader")`;
			if( !$hasShader )
			{
				$shaderName = `shadingNode -asShader volumeFog -name "coneFog"`;
				connectAttr -f ($shaderName + ".outColor") ($shadGroup + ".volumeShader");
				setAttr ($shaderName + ".dropoffShape") 3;
			}
		} else {
			$shaderName = `shadingNode -asShader volumeFog -name "coneFog"`;
			$shadGroup =  `sets -renderable true -noSurfaceShader true -empty -name ($shaderName + "SG")`;
			connectAttr -f ($shaderName + ".outColor") ($shadGroup + ".volumeShader");
			setAttr ($shaderName + ".dropoffShape") 3;
		}
		$shape = `createNode renderCone`;
		setAttr ($shape + ".coneAngle") 45;
		setAttr ($shape + ".coneCap") 1;
		string $dag[] = `listRelatives -p $shape`;
		setAttr ($dag[0] + ".rotateX") -90;
		setAttr ($dag[0] + ".translateY") 2;
		setAttr ($dag[0] + ".scale") 2.5 2.5 2;
	}else {
		error  (uiRes("m_createImplicitVolume.kCreateImplicitVolumeUnknownVolumeType")) ;
		return;	
	}
	sets -e -forceElement $shadGroup $shape;
}

global proc createImplicitVolume( string $type ){
	string $cmd;
	
	$cmd = "createImplicitVolumeProc(\"" + $type + "\")";
	
	if(`optionVar -q createPrimitiveAsTool`) {
		string $icon = "vacantCell.png";
		switch($type) {
			case "sphere": $icon = "volumeSphere.png"; break;
			case "cube":  $icon = "volumeCube.png"; break;
			case "cone": $icon = "volumeCone.png"; break;
		}
		$cmd = "createPrimitiveToolWithIcon(\"" + `encodeString($cmd)` + "\", \"" + $icon + "\"); setToolTo createPrimitiveContext";
	}
	
	evalEcho($cmd);
}
