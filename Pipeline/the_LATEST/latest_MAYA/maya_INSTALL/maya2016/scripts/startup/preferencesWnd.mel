// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Jan 2000
//
//  Description:
//
//	Window to set and see the user preferences.
//
//	To add a new preference you need to change these files:
//
//		createPreferencesOptVars.mel
//			- Initialize all optionVars
//		createPrefWndUI.mel
//			- Create the ui controls for your preference
//		updatePrefWndUI.mel
//			- Set the values for your controls from the optionVars
//		syncPreferencesOptVars.mel
//			- Copy information from optionVars to the system
//		prefsHoldCurrentState.mel
//			- Save and restore your optionVar state
//
//

// ADSK_CLR_MGT_BEGIN
  source "colorManagementUtilities.mel";
// ADSK_CLR_MGT_END


global proc revertToSavedPrefs ()
{
	// Put the option vars back to what they were when 
	// the window was opened.
	prefsHoldCurrentState("restore"); 
	
	// Change any internal states to match the option vars
	syncPreferencesOptVars("syncCurrentToOpt"); 
	
	// Update the UI in the Preferences window
	prefsUpdate(); 
}

global proc revertToFactoryPrefs ()
//
//	Restore the preferences back to the shipped settings
//
{
    source createPreferencesOptVars.mel;

    // Change any internal states to match the option vars
    syncPreferencesOptVars("syncCurrentToOpt"); 

    // ADSK_CLR_MGT_BEGIN
    revertToColorManagementDefaults();
    // ADSK_CLR_MGT_END
	
    // Update the UI in the Preferences window
    prefsUpdate(); 
}

global proc int canSavePrefsChanges()
{
    int $canSave = 1;

    // ADSK_CLR_MGT_BEGIN
    if (colorManagementPolicyLocked() || policyMismatch() == 0) // No mismatch happens.
    {
        $canSave = 1;
    }
    else
    {
        $canSave = colorManagementPolicyMismatchAction();
    }
     if ($canSave == 0)
    {
        // There can be any other module need do such "can save" test,
        // now this module's (color management) $canSave value is 0, there 
        // is no need to do further test, return 0 directly here.
        // Notice that any other module should return 0 directly if its $canSave
        // value is 0.
        return 0;
    }
    // ADSK_CLR_MGT_END

    // Put other modules' test here.
    // 

    return $canSave;
}

global proc savePrefsChanges ()
{
	if (canSavePrefsChanges() == 0)
	{
		return;
	}

	global string $gPreferenceWindow;
	global int $prefWndScriptJob;

	// Cleanup the temp variables before saving
	prefsHoldCurrentState("remove");

	// Save optionVars to disk
	savePrefs();
	
	// Close the window, unless this is being called
	// because the window has already closed.
	//
	if (`window -exists $gPreferenceWindow`) {
		// Kill the script job that saves the preferences when
		// the window closes so we don't get recursive.
    scriptJob -force -kill $prefWndScriptJob;
    window -e -vis false $gPreferenceWindow;
    evalDeferred ("deleteUI "+$gPreferenceWindow);
	}
}

global proc cancelPrefsChanges ()
{
	global string $gPreferenceWindow;
	global int $prefWndScriptJob;

	// Put the option vars back to what they were when 
	// the window was opened.
	prefsHoldCurrentState("restore"); 
	
	// Change any internal states to match the option vars
	syncPreferencesOptVars("syncCurrentToOpt"); 

	// Cleanup
	prefsHoldCurrentState("remove"); 

  // Kill the script job that saves the preferences when
  // the window closes.
  scriptJob -force -kill $prefWndScriptJob;
	
  // Close the window
  evalDeferred ("deleteUI "+$gPreferenceWindow);
}

proc prefsSetTabLayout(int $index, string $label)
{
    tabLayout -e -selectTabIndex $index prefTabs;
	frameLayout -e -label $label prefTitleFrame;
}
 

global proc switchPrefTabs(int $whichTab)
//
//	Input:	If $whichTab is set to '0' then use the selected index
//			in the textScrollList.  If it is set above zero then
//			set the tab to that value.
//
{
    global string $gPreferenceWindow;
    setParent $gPreferenceWindow;
        
    int $index = $whichTab;
    if ($whichTab == 0) {
        int $indexLst[] = `textScrollList -q -selectIndexedItem prefIndex`;
		if(size($indexLst) == 0) return;
        $index = $indexLst[0];
    } else {
        textScrollList -e -selectIndexedItem $index prefIndex;
    }
        
    string $uniqueTagLst[] = `textScrollList -q -selectUniqueTagItem prefIndex`;
	if(size($uniqueTagLst) == 0) return;
    string $uniqueTag = tolower($uniqueTagLst[0]);
	

    switch ($uniqueTag) 
    {
        case "interface":
            prefsCreateAppearance();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kInterface")));
            break;

        case "uielements":
            prefsCreateElements();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kUIElements")));
            break;
        case "viewcube":
            prefsCreateViewCube();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kViewCubePreferences")));
            break;
        case "dynamics":
            prefsCreateDyn();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kDynamics")));
            break;
        case "filereferences":
            prefsCreateFileReferences();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kFileReferences")));
            break;
        case "rendering":
            prefsCreateRendering();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kRendering")));
            break;
        case "modules":
            if(!`about -mac`)
            {
                prefsCreateModules();
                prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kModules")));
            }
            break;
        case "openmaya":
            if (!`about -win` && !`about -mac`) {
                prefsCreateOpenMaya();
                prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kOpenMaya")));
            }
            break;  
        case "assets":
            prefsCreateAssets();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kAssetsContainers")));
            break;
         case "steeringwheel":
            if (exists("steeringWheel"))
            {
                prefsCreateSteeringWheel();
                prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kSteeringWheelPreferences")));
            }
            break;
        case "help":
            prefsCreateWindows();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kHelp")));
            break;
        case "display":
            prefsCreateDisplay();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kDisplay")));
            break;
        case "kinematics":
            prefsCreateKin();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kKinematics")));
            break;
        case "animationdisplay":
            prefsCreateAnimDisplay();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kAnimationOption")));
            break;
        case "manipulators":
            prefsCreateManips();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kManipulators")));
            break;
        case "nurbs":
            prefsCreateNURBS();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kNURBS")));
            break;
        case "polygons":
            prefsCreatePolys();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kPolygons")));
            break;
        case "subdivs":
            prefsCreateSubdivs();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kSubdivs")));
            break;
        case "font":
            prefsCreateFonts();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kFonts")));
            break;
        case "settings":
            prefsCreateSettings();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kSettings")));
            break;
        case "animation":
            prefsCreateKeys();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kAnimation")));
            break;       
        case "cameras":
            prefsCreateCamera();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kCamera")));
            break;  
        // ADSK_CLR_MGT_BEGIN
        case "colormanagement":
            prefsCreateColorManagement();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kColorManagement")));
            break;    
        // ADSK_CLR_MGT_END
        case "filesprojects":
            prefsCreateFileIO();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kFiles")));
            break;      
        case "modeling":
            prefsCreateModeling();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kModeling")));
            break;
        case "nodeeditor":
            prefsCreateNodeEditor();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kNodeEditorPrefs")));
            break;
        case "selection":
            prefsCreateSelect();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kSelection")));
            break;
        case "snapping":
            prefsCreateSnap();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kSnapping")));
            break;
        case "sound":
            prefsCreateSound();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kSound")));
            break;
        case "timeslider":
            prefsCreateAnim();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kTimeSliderPref")));
            break;
        case "undo":
            prefsCreateAdvanced();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kUndo")));
            break;
        case "saveactions":       
            prefsCreateSaveActions();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kSaveActions")));
            break;
        case "applications":
            prefsExternalApplications();
            prefsSetTabLayout($index,(uiRes("m_preferencesWnd.kExternalApplications")));
            break;
        default:  
            // For all other custom tabs. 
			// Custom Tab are added using addCustomPrefsTab.mel
			// When creating the preference window we add a unique "CustomTab" tag with a number
			// representing the creation order.   
            if (match( "customtab", $uniqueTag ) != "") {
                int $customTabIndex = (int)`substitute "customtab" $uniqueTag ""`;
                global string $gPrefsCustomTabCreate[];
                global string $gPrefsCustomTabTitles[];
                eval $gPrefsCustomTabCreate[$customTabIndex];
                prefsSetTabLayout($index,$gPrefsCustomTabTitles[$customTabIndex]);
            }
            break;  
    }

}

proc switchPrefTabsString (string $whichTab)
{
    global string $gPreferenceWindow;
    setParent $gPreferenceWindow;
    
    // Select the item corresponding to the unique tab provided.
    if (catch(`textScrollList -edit -selectUniqueTagItem $whichTab prefIndex`)) {
        textScrollList -edit -selectUniqueTagItem "Interface" prefIndex;
    }
    
    // selectUniqueTabItem can select multi items in the same process.
    // We do not use multi in the preference setting list but the selection signal
    // using selectUniqueTabItem is blocked during the selections so we call the 
    // switchPrefTabs ourself.
    // index 0 provided mean that we want to use what's currently selected in the list.
    switchPrefTabs 0;
}

// Creates the preferences windows and select the item 
// corresponding to a unique tag that match the variable provided.
global proc preferencesWnd (string $whichTab)
{
	global string $gPreferenceWindow = "PreferencesWindow";
	 
	// If the window exists already, just show it
	//
	if (`window -exists $gPreferenceWindow`) {
		switchPrefTabsString ($whichTab);
		showWindow $gPreferenceWindow;
		return;
	}	
	
	source createPrefWndUI.mel;
	source updatePrefWndUI.mel;

	global int $gStandardFrameLayoutMarginWidth; // defined in setDefaultTemplates.mel

	//
	// Create a UI template for this window.  
	//
    if (!`uiTemplate -exists prefsTemplate`) {
		uiTemplate prefsTemplate;

		frameLayout -defineTemplate prefsTemplate 
			-labelVisible true 
			-labelIndent 5 
			-backgroundShade true 
			-mw $gStandardFrameLayoutMarginWidth
			;

		separator -defineTemplate prefsTemplate 
			-height     2 
			-style      "none";

		columnLayout -defineTemplate prefsTemplate
			-adj true 
			-columnAttach "left" 0;
	}
	
	// Create the window
	//
	string $winowTitle = (uiRes("m_preferencesWnd.kPreferencesTitle"));
	// The default is a bit big on NT.
	if (`about -win`) {
		window -tlc 210 390 -wh 653 450
		   -title $winowTitle  
		   -iconName $winowTitle 
		   -menuBar true
		   $gPreferenceWindow;
	} else {
		window -tlc 210 390 -wh 665 500
		   -title $winowTitle  
		   -iconName $winowTitle 
		   -menuBar true
		   $gPreferenceWindow;
	}

	// 
	// Create the menus in the menubar
	//
	menu -label (uiRes("m_preferencesWnd.kEdit")) ;
        menuItem -label (uiRes("m_preferencesWnd.kRevertToSaved")) 
			-c "revertToSavedPrefs";
        menuItem -label (uiRes("m_preferencesWnd.kRestoreDefaultSetting")) 
            -c "revertToFactoryPrefs";

	menu -label (uiRes("m_preferencesWnd.kHelpMenu"))  -helpMenu true;
		menuItem -label (uiRes("m_preferencesWnd.kHelpOnPreferences")) 
			-enableCommandRepeat false
			-command "showHelp PreferencesWindow";
	
	setUITemplate -pushTemplate NONE;

	// Create the top level form layout
	//
	string $prefForm = `formLayout`;

		//
		// The left column is the list of pref titles
		//
		frameLayout -label (uiRes("m_preferencesWnd.kCategories"))  -bv false categoryFrame;
		formLayout categoryLayout;
		
		textScrollList 
			-allowMultiSelection false
			-selectCommand "switchPrefTabs 0"
			prefIndex;

		string $animationTab = (uiRes("m_preferencesWnd.kAnimationTab"));
		
		textScrollList -e -a (uiRes("m_preferencesWnd.kInterfaceTab")) -uniqueTag "Interface" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kUIElementsTab")) -uniqueTag "UIElements" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kViewCubeTab")) -uniqueTag "ViewCube" prefIndex;
		if (exists("steeringWheel"))
		{
			textScrollList -e -a (uiRes("m_preferencesWnd.kSteeringWheelTab")) -uniqueTag "SteeringWheel" prefIndex;
		}
		textScrollList -e -a (uiRes("m_preferencesWnd.kHelpTab")) -uniqueTag "Help" prefIndex;

		textScrollList -e -a (uiRes("m_preferencesWnd.kDisplayTab")) -uniqueTag "Display" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kKinematicsTab")) -uniqueTag "Kinematics" prefIndex;
		
		textScrollList -e -a  $animationTab -uniqueTag "AnimationDisplay" prefIndex;
			
		textScrollList -e -a (uiRes("m_preferencesWnd.kManipulatorsTab")) -uniqueTag "Manipulators" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kNURBSTab")) -uniqueTag "NURBS" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kPolygonsTab")) -uniqueTag "Polygons" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kSubdivsTab")) -uniqueTag "Subdivs" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kFontsTab")) -uniqueTag "Font" prefIndex;

		textScrollList -e -a (uiRes("m_preferencesWnd.kSettingsTab")) -uniqueTag "Settings" prefIndex;
		textScrollList -e -a  $animationTab -uniqueTag "Animation" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kAssetsTab")) -uniqueTag "Assets" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kCamerasTab")) -uniqueTag "Cameras" prefIndex;

		// ADSK_CLR_MGT_BEGIN
		textScrollList  -e -a (uiRes("m_preferencesWnd.kColorManagementTab")) -uniqueTag "ColorManagement" prefIndex;
		// ADSK_CLR_MGT_END

		textScrollList -e -a (uiRes("m_preferencesWnd.kDynamicsTab")) -uniqueTag "Dynamics" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kFilesTab")) -uniqueTag "FilesProjects" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kFileReferencesTab")) -uniqueTag "FileReferences" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kModelingTab")) -uniqueTag "Modeling" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kNodeEditorTab")) -uniqueTag "NodeEditor" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kRenderingTab")) -uniqueTag "Rendering" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kSelectionTab")) -uniqueTag "Selection" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kSnappingTab")) -uniqueTag "Snapping" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kSoundTab")) -uniqueTag "Sound" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kTimesliderTab")) -uniqueTag "TimeSlider" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kUndoTab")) -uniqueTag "Undo" prefIndex;
		
		global string $gPrefsCustomTabNames[];
		string $tabName;
        int $customTabIndex = 0;
		for ($tabName in $gPrefsCustomTabNames) {
			textScrollList -e -a $tabName -uniqueTag ("customtab"+$customTabIndex) prefIndex;
            $customTabIndex++;
		}

		textScrollList -e -a (uiRes("m_preferencesWnd.kSaveActionsTab")) -uniqueTag "SaveActions" prefIndex;
		if (!`about -mac`) {
			textScrollList -e -a (uiRes("m_preferencesWnd.kModulesTab")) -uniqueTag "Modules" prefIndex;
		}

		if (!`about -win` && !`about -mac`) {
			textScrollList -e -a (uiRes("m_preferencesWnd.kOpenMayaTab")) -uniqueTag "OpenMaya" prefIndex;
		}
		textScrollList -e -a (uiRes("m_preferencesWnd.kApplicationsTab")) -uniqueTag "Applications" prefIndex;

		formLayout -edit
			-af prefIndex "top" 0 
			-af prefIndex "left" 0
			-af prefIndex "right" 0 
			-af prefIndex "bottom" 0 
			categoryLayout;

		if (`about -uiLanguageIsLocalized`) {
			formLayout -e -width 195 categoryLayout;
		} else {
			formLayout -e -width 130 categoryLayout;
		}

		setParent $prefForm;
		
		//
		// The right column is the preference layout
		// Create the tabs for each pref section.
		//
		frameLayout -label (uiRes("m_preferencesWnd.kInterfaceItem")) 
			-bv false prefTitleFrame; 
			
		string $parentTab = `tabLayout 
			-scrollable true
			-tabsVisible false
			-childResizable true
			prefTabs`;

			// General Appearance
			frameLayout -lv false -mw 10 -mh 10 -bv false;
			    columnLayout -adj true prefAppearCol;
			setParent $parentTab;


			// Panel Appearance
			frameLayout -lv false -mw 10 -mh 10 -bv false;
			    columnLayout -adj true prefElementsCol;
			setParent $parentTab;

			// ViewCube
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefViewCubeCol;
			setParent $parentTab;

			// SteeringWheel
			if (exists("steeringWheel"))
			{
				frameLayout -lv false -bv false -mw 10 -mh 10;
				    columnLayout -adj true prefSteeringWheelCol;
				setParent $parentTab;
			}

			// Window Appearance
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefWindowsCol;
			setParent $parentTab;

			// General Display
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefDisplayCol;
			setParent $parentTab;

			// Kinematics
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefKinCol;
			setParent $parentTab;

			// Anim Display
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefAnimDispCol;
			setParent $parentTab;

			// Manipulator Display
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefManipsCol;
			setParent $parentTab;

			// NURBS Display
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefNURBSCol;
			setParent $parentTab;

			// Polygon Display
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefPolysCol;
			setParent $parentTab;

			// Subdiv Display
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefSubdivsCol;
			setParent $parentTab;

			// Fonts Display
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefFontsCol;
			setParent $parentTab;

			// General Application Settings
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefSettingsCol;
			setParent $parentTab;

			// Keys
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefKeysCol;
			setParent $parentTab;
			// Assets
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefAssetsCol;
			setParent $parentTab;
			// Cameras
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefCameraCol;
			setParent $parentTab;
            
			// ADSK_CLR_MGT_BEGIN
			// Color Management
		    	frameLayout -lv false -bv false -mw 10 -mh 10;
			        columnLayout -adj true prefColorManagementCol;
			setParent $parentTab;
			// ADSK_CLR_MGT_END

			// Dynamics
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefDynCol;
			setParent $parentTab;
			// File I/O
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefFileIOCol;
			setParent $parentTab;
			// File References
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefFileReferencesCol;
			setParent $parentTab;
			// Modeling
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefModelingCol;
			setParent $parentTab;

			// Node Editor
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefNodeEditorCol;
			setParent $parentTab;
			// Rendering
			frameLayout -labelVisible false -borderVisible false -marginWidth 10 -marginHeight 10;
			columnLayout -adjustableColumn true prefRenderingCol;
			setParent $parentTab;
			// Selection
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefSelectCol;
			setParent $parentTab;

			// Snapping
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefSnapCol;
			setParent $parentTab;

			// Sound
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefSoundCol;
			setParent $parentTab;

			// Timeline
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefAnimCol;
			setParent $parentTab;

			// Undo
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefAdvancedCol;
			setParent $parentTab;

			// Custom
			global string $gPrefsCustomTabFrameCreate[];
			string $prefsCreateCustomTabFrame;
			for ($frameCreate in $gPrefsCustomTabFrameCreate) {
				eval $frameCreate;
				setParent $parentTab;
			}

			// Save Actions
			frameLayout -lv false -bv false -mw 10 -mh 10;
			    columnLayout -adj true prefSaveActionsCol;
			setParent $parentTab;
			// Modules (not supported on Macintosh)
			if (!`about -mac`) {
				frameLayout -lv false -bv false -mw 10 -mh 10;
				    columnLayout -adj true prefModulesCol;
				setParent $parentTab;
			}

			// Open Maya (not available on NT or Macintosh)
			if (!`about -win` && !`about -mac`) {
				frameLayout -lv false -bv false -mw 10 -mh 10;
				    columnLayout -adj true prefOpenMayaCol;
				setParent $parentTab;
			}
			//External Applications.
			frameLayout -labelVisible false -borderVisible false -marginWidth 10 -marginHeight 10;
			columnLayout -adjustableColumn true prefExternalAppCol;

		//
		// Buttons on the bottom
		//
		setParent $prefForm;
		
		// On save/cancel, remove focus from any UI elements to trigger their change command scripts
		button -label (uiRes("m_preferencesWnd.kSave")) 
			-c ("setFocus prefsSaveBtn; savePrefsChanges")
			prefsSaveBtn;

		button -label (uiRes("m_preferencesWnd.kCancel"))  
			-c ("setFocus prefsCloseBtn; cancelPrefsChanges") 
			prefsCloseBtn;

	setParent $gPreferenceWindow;

	// Fix the layout
	//
	formLayout -e
		-af categoryFrame "top" 5 
		-af categoryFrame "left" 5 
		-an categoryFrame "right"
		-ac categoryFrame "bottom" 5 prefsCloseBtn

		-af prefTitleFrame "top" 5 
		-ac prefTitleFrame "left" 5 categoryFrame
		-af prefTitleFrame "right" 5 
		-ac prefTitleFrame "bottom" 5 prefsCloseBtn

        -af prefsSaveBtn "bottom" 5
		-af prefsSaveBtn "left" 5
		-ap prefsSaveBtn "right" 1 50

		-af prefsCloseBtn "bottom" 5
		-ap prefsCloseBtn "left" 1 50
		-af prefsCloseBtn "right" 5
			
		$prefForm;

	// 
	// Make sure the optionVars are in sync with the real state
	//
	syncPreferencesOptVars("syncOptToCurrent");

	// Save the optionVar state for a restore/cancel
	//
	prefsHoldCurrentState("save");

	// Create the UI in the visible section.
	// If more sections are needed later, they will have to be
	// added in.
	//
	switchPrefTabsString ($whichTab);

	// Add a callback to save the preference changes if the
	// user closes the window through the window manager.
	//
	global int $prefWndScriptJob;
	$prefWndScriptJob = `scriptJob -protected
							-runOnce true 
							-uiDeleted $gPreferenceWindow 
							savePrefsChanges`;


	setUITemplate -popTemplate;

	showWindow $gPreferenceWindow;
}
