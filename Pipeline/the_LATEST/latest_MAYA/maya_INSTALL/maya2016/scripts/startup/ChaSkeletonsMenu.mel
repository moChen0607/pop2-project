// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  13 April 1997
//
//
//  Procedure Name:
//      ChaSkeletonsMenu
//
//  Description:
//      Create the RIGGING->Skeletons menu
//
//  Input Arguments:
//      parent to parent the menu to.
//
//  Return Value:
//      None.
//

global proc
int MCmatch(string $name, string $match1, string $match2)
{
	string $match = match($match1,$name);
	if (size($match)) return 1;
	$match = match($match2,$name);
	if (size($match)) return 1;
	return 0;
}


global proc string jointLabel_uiToMel( string $ui ) 
{
	string $result = $ui;

	string $left = (uiRes( "n_joint.a_sd_enum_kPuppetLeft" ));
	string $right = (uiRes( "n_joint.a_sd_enum_kPuppetRight" ));
	string $center = (uiRes( "n_joint.a_sd_enum_kPuppetCenter" ));
	string $noside = (uiRes( "n_joint.a_sd_enum_kPuppetNoSide" ));

	string $root = (uiRes( "n_joint.a_typ_enum_kPuppetPartPelvis" ));
	string $hip = (uiRes( "n_joint.a_typ_enum_kPuppetPartHip" ));
	string $knee = (uiRes( "n_joint.a_typ_enum_kPuppetPartKnee" ));
	string $foot = (uiRes( "n_joint.a_typ_enum_kPuppetPartFoot" ));
	string $toe = (uiRes( "n_joint.a_typ_enum_kPuppetPartToe" ));
	string $spine = (uiRes( "n_joint.a_typ_enum_kPuppetPartBack" ));
	string $neck = (uiRes( "n_joint.a_typ_enum_kPuppetPartNeck" ));
	string $head = (uiRes( "n_joint.a_typ_enum_kPuppetPartHead" ));
	string $collar = (uiRes( "n_joint.a_typ_enum_kPuppetPartCollar" ));
	string $shoulder = (uiRes( "n_joint.a_typ_enum_kPuppetPartShoulder" ));
	string $elbow = (uiRes( "n_joint.a_typ_enum_kPuppetPartElbow" ));
	string $hand = (uiRes( "n_joint.a_typ_enum_kPuppetPartHand" ));
	string $finger = (uiRes( "n_joint.a_typ_enum_kPuppetPartFinger" ));
	string $thumb = (uiRes( "n_joint.a_typ_enum_kPuppetPartThumb" ));
	string $none = (uiRes( "n_joint.a_typ_enum_kPuppetPartNone" ));
	string $index = (uiRes( "n_joint.a_typ_enum_kPuppetPartIndex" ));
	string $middle = (uiRes( "n_joint.a_typ_enum_kPuppetPartMiddle" ));
	string $ring = (uiRes( "n_joint.a_typ_enum_kPuppetPartRing" ));
	string $pinky = (uiRes( "n_joint.a_typ_enum_kPuppetPartPinky" ));
	string $extrafinger = (uiRes( "n_joint.a_typ_enum_kPuppetPartExtraFinger" ));
	string $bigtoe = (uiRes( "n_joint.a_typ_enum_kPuppetPartBigToe" ));
	string $indextoe = (uiRes( "n_joint.a_typ_enum_kPuppetPartIndexToe" ));
	string $middletoe = (uiRes( "n_joint.a_typ_enum_kPuppetPartMiddleToe" ));
	string $ringtoe = (uiRes( "n_joint.a_typ_enum_kPuppetPartRingToe" ));
	string $pinkytoe = (uiRes( "n_joint.a_typ_enum_kPuppetPartPinkyToe" ));
	string $extratoe = (uiRes( "n_joint.a_typ_enum_kPuppetPartExtraToe" ));
	string $other = (uiRes( "n_joint.a_typ_enum_kPuppetPartOther" ));
	string $propA = (uiRes( "n_joint.a_typ_enum_kPuppetPartPropA" ));
	string $propB = (uiRes( "n_joint.a_typ_enum_kPuppetPartPropB" ));
	string $propC = (uiRes( "n_joint.a_typ_enum_kPuppetPartPropC" ));

	if( $ui == $left ) {
		$result = "Left";
	} else if( $ui == $right ) {
		$result = "Right";
	} else if( $ui == $center ) {
		$result = "Center";
	} else if( $ui == $noside ) {
		$result = "None";
	} else if( $ui == $root ) {
		$result = "Root";
	} else if( $ui == $hip ) {
		$result = "Hip";
	} else if( $ui == $knee ) {
		$result = "Knee";
	} else if( $ui == $foot ) {
		$result = "Foot";
	} else if( $ui == $toe ) {
		$result = "Toe";
	} else if( $ui == $spine ) {
		$result = "Spine";
	} else if( $ui == $neck ) {
		$result = "Neck";
	} else if( $ui == $head ) {
		$result = "Head";
	} else if( $ui == $collar ) {
		$result = "Collar";
	} else if( $ui == $shoulder ) {
		$result = "Shoulder";
	} else if( $ui == $elbow ) {
		$result = "Elbow";
	} else if( $ui == $hand ) {
		$result = "Hand";
	} else if( $ui == $finger ) {
		$result = "Finger";
	} else if( $ui == $thumb ) {
		$result = "Thumb";
	} else if( $ui == $none ) {
		$result = "None";
	} else if( $ui == $index ) {
		$result = "IndexFinger";
	} else if( $ui == $middle ) {
		$result = "MiddleFinger";
	} else if( $ui == $ring ) {
		$result = "RingFinger";
	} else if( $ui == $pinky ) {
		$result = "PinkyFinger";
	} else if( $ui == $extrafinger ) {
		$result = "ExtraFinger";
	} else if( $ui == $bigtoe ) {
		$result = "BigToe";
	} else if( $ui == $indextoe ) {
		$result = "IndexToe";
	} else if( $ui == $middletoe ) {
		$result = "MiddleToe";
	} else if( $ui == $ringtoe ) {
		$result = "RingToe";
	} else if( $ui == $pinkytoe ) {
		$result = "PinkyToe";
	} else if( $ui == $extratoe ) {
		$result = "FootThumb";
	} else if( $ui == $other ) {
		$result = "Other";
	} else if( $ui == $propA ) {
		$result = "PropA";
	} else if( $ui == $propB ) {
		$result = "PropB";
	} else if( $ui == $propC ) {
		$result = "PropC";
	} else {
		uiToMelMsg( "jointLabel_uiToMel", $ui, 1 );
	}
	
	return $result;
}

proc labelListBasedOnNames(string $list[])
{
	for ($listItem in $list) {

		string $buffer[];
		tokenize($listItem,"|",$buffer);
		string $item = $buffer[size($buffer)-1];

		int $labelInfo[] = jointLabelInfoForString($item);
		int $type = $labelInfo[0];
		int $side = $labelInfo[1];
		if ($type != -1) {
			string $typeCmd = ("setAttr "+$listItem+".type "+$type);
			evalEcho $typeCmd;
		}
		if ($side != -1) {
			string $sideCmd = ("setAttr "+$listItem+".side "+$side);
			evalEcho $sideCmd;
		}
	}
}

global proc labelJointsBasedOnNames()
{
	string $jnts[]  = `ls -sl -dag -type joint`;
	if (size($jnts) == 0) {
		error (uiRes("m_ChaSkeletonsMenu.kSelectJointsToLabel"));
	}
	labelListBasedOnNames($jnts);
}

global proc renameJointsBasedOnTypes()
{
	string $jnts[]  = `ls -sl -dag -type joint`;
	if (size($jnts) == 0) {
		error (uiRes("m_ChaSkeletonsMenu.kSelectJointsToRename"));
	}

	int $ii;
	string $jnt;
	int $jntCount = size($jnts);
	for ($ii = $jntCount-1; $ii >= 0; $ii--) {
		$jnt = $jnts[$ii];
		string $side = `getAttr -asString ($jnt+".side")`;
		string $part = `getAttr -asString ($jnt+".type")`;

		string $newName = jointLabel_uiToMel($side)+jointLabel_uiToMel($part);

		if( ($side != (uiRes("n_joint.a_sd_enum_kPuppetNoSide"))) 
		&&  ($part != (uiRes("n_joint.a_typ_enum_kPuppetPartNone"))) )
		{
			$newName = `rename $jnt $newName`;
		}
	}
}

global proc
retargetingSideLabel(string $side)
//
// Description:
//  Set the "Side" attribute on the selected objects.	
//
{
	int $setSomething = 0;
	if ($side == "Center") {
		string $sel[] = `ls -sl -type joint`;
		for ($obj in $sel) {
			setAttr ($obj+".side") 0;
			$setSomething = 1;
		}
	} else {
		int $sideNum;
		if ($side == "Left") {
			$sideNum = 1;
		}
		else if ($side == "Right") {
			$sideNum = 2;
		}
		else {
			$sideNum = 3; /* "None" */
		}
		string $sel[] = `ls -sl -dag -type joint`;
		for ($obj in $sel) {
			setAttr ($obj+".side") $sideNum;
			$setSomething = 1;			
		}
	}
	if (0 == $setSomething) {
		error (uiRes("m_ChaSkeletonsMenu.kMustSelectJointsToLabel"));
	}
}

global proc
retargetLabelType(string $type, int $dag)
{
	int $label;
	int $labelCenter = false;
	if ($type == "Root") {
		$labelCenter = true;
		$label = 1;
	} else if ($type == "Hip") {
		$label = 2;
	} else if ($type == "Knee") {
		$label = 3;
	} else if ($type == "Foot") {
		$label = 4;
	} else if ($type == "Toe") {
		$label = 5;
	} else if ($type == "Spine") {
		$labelCenter = true;
		$label = 6;
	} else if ($type == "Neck") {
		$labelCenter = true;		
		$label = 7;
	} else if ($type == "Head") {
		$labelCenter = true;		
		$label = 8;
	} else if ($type == "Collar") {
		$label = 9;
	} else if ($type == "Shoulder") {
		$label = 10;
	} else if ($type == "Elbow") {
		$label = 11;
	} else if ($type == "Hand") {
		$label = 12;
	} else if ($type == "Finger") {
		$label = 13;
	} else if ($type == "Thumb") {
		$label = 14;
	} else if ($type == "None") {
		$label = 0;
		$labelCenter = true;
	} else if ($type == "Index") {
		$label = 19;
	} else if ($type == "Middle") {
		$label = 20;
	} else if ($type == "Ring") {
		$label = 21;
	} else if ($type == "Pinky") {
		$label = 22;
	} else if ($type == "ExtraFinger") {
		$label = 23;
	} else if ($type == "BigToe") {
		$label = 24;
	} else if ($type == "IndexToe") {
		$label = 25;
	} else if ($type == "MiddleToe") {
		$label = 26;
	} else if ($type == "RingToe") {
		$label = 27;
	} else if ($type == "PinkyToe") {
		$label = 28;
	} else if ($type == "ExtraToe" || $type == "FootThumb") {
		$label = 29;
	} else {
		error (uiRes("m_ChaSkeletonsMenu.kRetargetInvType"));
	}

	if ($labelCenter) {
		retargetingSideLabel("Center");
	}

	string $cmd = "ls -sl -type joint";
	if ($dag) {
		$cmd += " -dag";
	}
	string $sel[] = eval($cmd);
	for ($obj in $sel) {
		setAttr ($obj+".type") $label;
	}
}

global proc
labelLimb(string $selObj, string $limb)
{
	int $topLabel, $midLabel, $endLabel, $digitLabel;
	if ($limb == "Leg") {
		$topLabel = 2; /* "Hip" */
		$midLabel = 3; /* "Knee" */
		$endLabel = 4; /* "Foot" */
		$digitLabel = 5; /* "Toe" */
	} else	if ($limb == "Arm") {
		$topLabel = 10; /* "Shoulder" */
		$midLabel = 11; /* "Elbow" */
		$endLabel = 12; /* "Hand" */
		$digitLabel = 13; /* "Finger" */
	} else {
		string $errorStr = (uiRes("m_ChaSkeletonsMenu.kInvalidLimb"));
		error `format -s $limb $errorStr`;
	}

	// Shoulder or Hip
	//
	setAttr ($selObj+".type") $topLabel;

	string $jntsBelow[] = `ls -sl -dag -type joint $selObj`;
	if ($limb == "Leg") {
		int $currLabel = $topLabel;
		for ($jj = 1; $jj < size($jntsBelow); $jj++) {
			string $buffer[];
			tokenize($jntsBelow[$jj],"|",$buffer);
			string $currJnt = $buffer[size($buffer)-1];
			if (! MCmatch($currJnt,"Roll","roll")) {
				if ($currLabel != $digitLabel) {
					$currLabel++;
				}
			}
			setAttr ($jntsBelow[$jj]+".type") $currLabel;
		}
	} else {
		int $onElbow = 1;
		int $onHands = 0;
		int $currLabel = $topLabel;
		int $numJntsBelow = size($jntsBelow);
		for ($jj = 1; $jj < $numJntsBelow; $jj++) {
			string $buffer[];
			tokenize($jntsBelow[$jj],"|",$buffer);
			string $currJnt = $buffer[size($buffer)-1];
			if (MCmatch($currJnt,"Roll","roll")) {
				setAttr ($jntsBelow[$jj]+".type") $currLabel;
				continue;
			}
			
			string $rels[] = `listRelatives -type joint $jntsBelow[$jj]`;
			if ($currLabel == $midLabel) {
				if ((size($rels) > 1) ||
					MCmatch($currJnt,"Hand","hand") ||
					MCmatch($currJnt,"Wrist","wrist")) {
					$currLabel++;
				}
			} else if ($currLabel != $digitLabel) {
					$currLabel++;
			}
			setAttr ($jntsBelow[$jj]+".type") $currLabel;
		}
		// If we are still on the elbow, it means there was never a
		// branch (i.e. no fingers)
		//
		if ($onElbow) {
			if ($numJntsBelow == 3) {
				setAttr ($jntsBelow[2]+".type") $endLabel;
			 } else if ($numJntsBelow > 3) {
				 for ($jj = 2; $jj < $numJntsBelow; $jj++) {
					 if ($onElbow) {
						 string $testForElbow = match("lbow",$jntsBelow[$jj]);
						 if (0 == size($testForElbow)) {
							 $onElbow = 0;
							 setAttr ($jntsBelow[$jj]+".type") $endLabel;
						 }
					 } else {
						 setAttr ($jntsBelow[$jj]+".type") $digitLabel;
					 }
				 }
			 }
		}
	}
}

global proc retargetingLimbLabel(string $limb)
//
// Description:
//  Set the "Type" attributes on the selected limb.
//
{
	string $sel[] = `ls -sl -type joint`;
	if (size($sel) == 0) {
		if ($limb == "Leg") {
			error (uiRes("m_ChaSkeletonsMenu.kMustSelectHip"));
		} else if ($limb == "Arm") {
			error (uiRes("m_ChaSkeletonsMenu.kMustSelectShoulder"));
		} else {
			error (uiRes("m_ChaSkeletonsMenu.kNoSelJoints"));
		}
	}

	int $dag = 0;
	if ($limb == "Leg" || $limb == "Arm") {
		for ($selObj in $sel) {
			labelLimb($selObj,$limb);
		}
	} else {
		if ($limb == "Thumb" ||
			$limb == "Index" ||
			$limb == "Middle" ||
			$limb == "Ring" ||
			$limb == "Pinky" ||
			$limb == "ExtraFinger" ||
			$limb == "BigToe" ||
			$limb == "IndexToe" ||
			$limb == "MiddleToe" ||
			$limb == "RingToe" ||
			$limb == "PinkyToe" ||
			$limb == "FootThumb" ||			
			$limb == "ExtraToe") {
			$dag = 1;
		}
		retargetLabelType($limb, $dag);
	}
}

global proc ChaSkeletonsMenu( string $parent )
{
	setParent -menu $parent;
	if( `menu -q -ni $parent` != 0 ) {
		//
		//	Menu is built already - just update check boxes and return
		//
		// check to validate Enable and Snap Solver checkbox
		menuItem -e -cb `ikSystem -q -sn` globalSnapEnableItem;
		menuItem -e -enable (!`ikSystem -q -allowRotation`) globalSnapEnableItem;
		return;
	}

	if (`isTrue "KinematicsUIExists"`)
	{
		menuItem -divider true -dividerLabel (uiRes("m_ChaSkeletonsMenu.kToolsDivider"));

			menuItem -label (uiRes("m_ChaSkeletonsMenu.kJointTool")) 
				-annotation (uiRes("m_ChaSkeletonsMenu.kJointToolAnnot")) 
				-i "kinJoint.png"
				-c "JointTool" createSkeletonItem;
			menuItem -optionBox true -i "kinJoint.png"
				-annotation (uiRes("m_ChaSkeletonsMenu.kJointToolOptionAnnot")) 
				-c "JointToolOptions" 
				skeletonDialogItem;

			menuItem -label (uiRes("m_ChaSkeletonsMenu.kInsertJointTool")) 
				-annotation (uiRes("m_ChaSkeletonsMenu.kInsertJointToolAnnot")) 
				-i "kinInsert.png"
				-c "InsertJointTool" insertJointItem;

			menuItem -label (uiRes("m_ChaSkeletonsMenu.kMirrorJoint")) 
				-annotation (uiRes("m_ChaSkeletonsMenu.kMirrorJointAnnot")) 
				-i "kinMirrorJoint_S.png"
				-dmc "performMirrorJoint 2"
				-c "MirrorJoint"
				mirrorJointItem;
			menuItem -optionBox true -i "kinMirrorJoint_S.png"
				-annotation (uiRes("m_ChaSkeletonsMenu.kMirrorJointOptionAnnot")) 
				-c "MirrorJointOptions"
				mirrorJointOptionItem;

			menuItem -label (uiRes("m_ChaSkeletonsMenu.kOrientJoint")) 
				-annotation (uiRes("m_ChaSkeletonsMenu.kOrientJointAnnot")) 
				-dmc "performJointOrient 2"
				-image "orientJoint.png"
				-c "OrientJoint"
				orientJointItem;
			menuItem -optionBox true
				-annotation (uiRes("m_ChaSkeletonsMenu.kOrientJointOptionAnnot")) 
				-image "orientJoint.png"
				-c "OrientJointOptions"
				orientJointOptionItem;

		menuItem -ltVersion 2016 -label (uiRes("m_ChaSkeletonsMenu.kRemoveJoint")) 
			-annotation (uiRes("m_ChaSkeletonsMenu.kRemoveJointAnnot")) 
			-echoCommand true
			-i "kinRemove.png"
			-c "RemoveJoint"
			removeJointItem;

		menuItem -label (uiRes("m_ChaSkeletonsMenu.kConnectJoint")) 
			-annotation (uiRes("m_ChaSkeletonsMenu.kConnectJointAnnot")) 
			-i "kinConnect.png"
			-dmc "performConnectJoint 2"
			-c "ConnectJoint"
			connectJointItem;
		menuItem -optionBox true -i "kinConnect.png"
			-annotation (uiRes("m_ChaSkeletonsMenu.kConnectJointOptionAnnot")) 
			-c "ConnectJointOptions"
			connectJointOptionItem;
			
		menuItem -label (uiRes("m_ChaSkeletonsMenu.kDisconnectJoint")) 
			-annotation (uiRes("m_ChaSkeletonsMenu.kDisconnectJointAnnot")) 
			-echoCommand true
			-i "kinDisconnect.png"
			-c "DisconnectJoint"
			disconnectJointItem;

		menuItem -label (uiRes("m_ChaSkeletonsMenu.kRerootSkeleton")) 
			-annotation (uiRes("m_ChaSkeletonsMenu.kRerootSkeletonAnnot")) 
			-echoCommand true
			-i "kinReroot.png"
			-c "RerootSkeleton"
			rerootSkeleton;

		menuItem -label (uiRes("m_ChaSkeletonsMenu.kJointLabelling"))  -aob true -sm true -to true;

			menuItem -label (uiRes("m_ChaSkeletonsMenu.kAddFBIKLabels"))  -sm true -to true fbikLabelItem;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelLeft")) 
					-echoCommand true
					-c "retargetingSideLabel \"Left\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelLeftAnnot")) ;
					
				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelRight")) 
					-echoCommand true
					-c "retargetingSideLabel \"Right\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelRightAnnot")) ;
					
				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelCenter")) 
					-echoCommand true
					-c "retargetingSideLabel \"Center\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelCenterAnnot")) ;
					
				menuItem -d true;
				
				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelNone")) 
					-echoCommand true
					-c "retargetingLimbLabel \"None\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabeNoneAnnot")) ;
				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelArm")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Arm\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelArmAnnot")) ;
					
				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelLeg")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Leg\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelLegAnnot")) ;

				menuItem -d true;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelCollar")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Collar\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelCollarAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelElbow")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Elbow\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelElbowAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelFoot")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Foot\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelFootAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelHand")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Hand\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelHandAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelHead")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Head\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelHeadAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelHip")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Hip\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelHipAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelKnee")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Knee\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelKneeAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelNeck")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Neck\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelNeckAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelRoot")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Root\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelRootAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelShoulder")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Shoulder\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelShoulderAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelSpine")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Spine\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelSpineAnnot")) ;

				menuItem -d true;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelThumb")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Thumb\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelThumbAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelIndex")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Index\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelIndexAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelMiddleFinger")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Middle\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelMiddleFingerAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelRingFinger")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Ring\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelRingFingerAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelPinky")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Pinky\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelPinkyAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelExtraFinger")) 
					-echoCommand true
					-c "retargetingLimbLabel \"ExtraFinger\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelExtraFingerAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelFingerBase")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Finger\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelFingerBaseAnnot")) ;

				menuItem -d true;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelBigToe"))
					-echoCommand true
					-c "retargetingLimbLabel \"BigToe\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelBigToeAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelIndexToe")) 
					-echoCommand true
					-c "retargetingLimbLabel \"IndexToe\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelIndexToeAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelMiddleToe")) 
					-echoCommand true
					-c "retargetingLimbLabel \"MiddleToe\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelMiddleToeAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelRingToe")) 
					-echoCommand true
					-c "retargetingLimbLabel \"RingToe\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelRingToeAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelPinkyToe")) 
					-echoCommand true
					-c "retargetingLimbLabel \"PinkyToe\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelPinkyToeAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelFootThumb")) 
					-echoCommand true
					-c "retargetingLimbLabel \"FootThumb\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelFootThumbAnnot")) ;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kFBIKLabelToeBase")) 
					-echoCommand true
					-c "retargetingLimbLabel \"Toe\""
					-annotation (uiRes("m_ChaSkeletonsMenu.kFBIKLabelToeBaseAnnot")) ;

				setParent -menu ..;

			menuItem -label (uiRes("m_ChaSkeletonsMenu.kToggleSelectedLabels"))
				-annotation (uiRes("m_ChaSkeletonsMenu.kToggleSelectedLabelsAnnot"))
				-c "displayJointLabels 2";

			menuItem -label (uiRes("m_ChaSkeletonsMenu.kShowAllLabels"))
				-annotation (uiRes("m_ChaSkeletonsMenu.kShowAllLabelsAnnot"))
				-c "displayJointLabels 4";

			menuItem -label (uiRes("m_ChaSkeletonsMenu.kHideAllLabels"))
				-annotation (uiRes("m_ChaSkeletonsMenu.kHideAllLabelsAnnot"))
				-c "displayJointLabels 3";

			menuItem -label (uiRes("m_ChaSkeletonsMenu.kRenameJointsFromLabels")) 
				-annotation (uiRes("m_ChaSkeletonsMenu.kRenameJointsFromLabelsAnnot"))
				-c "renameJointsBasedOnTypes"
				renameJointsMenu;

			menuItem -label (uiRes("m_ChaSkeletonsMenu.kLabelBasedOnJointNames")) 
				-c "labelJointsBasedOnNames"
				-annotation (uiRes("m_ChaSkeletonsMenu.kLabelBasedOnJointNamesAnnot"))
				labelJointsMenu;

			setParent -menu ..;


	int $showFbik = 0;
	if (`optionVar -exists showFbikMenuItem` && `optionVar -q showFbikMenuItem`) 
	{
		$showFbik = 1;

			menuItem -label (uiRes("m_ChaSkeletonsMenu.kFullBodyIK"))  -aob true -sm true -to true;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kAddFullBodyIK")) 
					-annotation (uiRes("m_ChaSkeletonsMenu.kAddFullBodyIKAnnot")) 
					-dmc "performAddFullBodyIk 2"
					-c "CreateFBIK"
					characterizeItem;
				menuItem -optionBox true
					-annotation (uiRes("m_ChaSkeletonsMenu.kAddFullBodyIKOptionAnnot")) 
					-c "CreateFBIKOptions"
					characterizeOptionItem;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kSetFullBodyIKKeys"))
					-annotation (getRunTimeCommandAnnotation("SetFullBodyIKKeys"))
					-command "SetFullBodyIKKeys";
				menuItem -optionBox true 
					-annotation (getRunTimeCommandAnnotation("SetFullBodyIKKeysOptions"))
					-command "SetFullBodyIKKeysOptions" setFullBodyIKKeysDialog;
				
				menuItem -label (uiRes("m_ChaSkeletonsMenu.kAddAuxEffector")) 
					-annotation (uiRes("m_ChaSkeletonsMenu.kAddAuxEffectorAnnot")) 
					-c "AddAuxEffector"
					addFBIKAuxEffectorItem;
				
				menuItem -label (uiRes("m_ChaSkeletonsMenu.kAddAuxPivot")) 
					-annotation (uiRes("m_ChaSkeletonsMenu.kAddAuxPivotAnnot")) 
					-c "PlaceFullBodyPivot"
					placeFBIKpivotItem;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kActivateAuxPivot")) 
					-annotation (uiRes("m_ChaSkeletonsMenu.kActivateAuxPivotAnnot")) 
					-c "ActivateFullBodyPivot"
					activateFBIKpivotItem;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kChangeAuxPivotPlacement")) 
					-annotation (uiRes("m_ChaSkeletonsMenu.kChangeAuxPivotPlacementAnnot")) 
					-c "ChangeFullBodyPivotPlacement"
					changeFBIKpivotPlacementItem;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kShowFBIKFKSkeleton")) 
					-annotation (uiRes("m_ChaSkeletonsMenu.kShowFBIKFKSkeletonAnnot")) 
					-c "ShowFkSkeleton"
					showFkSkelItem;
				
				menuItem -label (uiRes("m_ChaSkeletonsMenu.kHideFBIKFKSkeleton")) 
					-annotation (uiRes("m_ChaSkeletonsMenu.kHideFBIKFKSkeletonAnnot")) 
					-c "HideFkSkeleton"
					hideFkSkelItem;
				
				menuItem -label (uiRes("m_ChaSkeletonsMenu.kAddFloorContactPlane")) 
					-annotation (uiRes("m_ChaSkeletonsMenu.kAddFloorContactPlaneAnnot")) 
					-c "AddFloorContactPlane"
					addFloorContactPlaneItem;
				
				menuItem -label (uiRes("m_ChaSkeletonsMenu.kGoToStancePose")) 
					-annotation (uiRes("m_ChaSkeletonsMenu.kGoToStancePoseAnnot")) 
					-c "GoToFBIKStancePose"
					goToStancePoseItem;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kDeleteFBIKKeys"))
					-subMenu true -aob true -to true deleteFBIKKeysItem;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kDeleteAllKeys"))
					-annotation (uiRes("m_ChaSkeletonsMenu.kDeleteAllKeysAnnot"))
					-command ("DeleteFBIKAllKeys")
					-dragMenuCommand "doClearFBIKKeysArgList \"0\" {\"all\"}" deleteAllFBIKKeyItem;

				menuItem -label (uiRes("m_ChaSkeletonsMenu.kDeleteBodyPartKeys"))
					-annotation (uiRes("m_ChaSkeletonsMenu.kDeleteBodyPartKeysAnnot"))
					-command ("DeleteFBIKBodyPartKeys")
					-dragMenuCommand "doClearFBIKKeysArgList \"0\" {\"bodypart\"}" deleteBodyPartFBIKKeyItem;
				
				menuItem -label (uiRes("m_ChaSkeletonsMenu.kDeleteSelectedKeys"))
					-annotation (uiRes("m_ChaSkeletonsMenu.kDeleteSelectedKeysAnnot"))
					-command ("DeleteFBIKSelectedKeys")
					-dragMenuCommand "doClearFBIKKeysArgList \"0\" {\"selected\"}" deleteSelectedFBIKKeyItem;

				setParent -menu ..;

			menuItem -label (uiRes("m_ChaSkeletonsMenu.kAddMissingEffectors")) 
				-annotation (uiRes("m_ChaSkeletonsMenu.kAddMissingEffectorsAnnot")) 
				-c "AddMissingFBIKEffectors";
			menuItem -optionBox true
				-annotation (uiRes("m_ChaSkeletonsMenu.kAddMissingEffectorsOptionAnnot")) 
				-c "AddMissingFBIKEffectorsOptions";

			menuItem -label (uiRes("m_ChaSkeletonsMenu.kBodyPartAutoload")) 
				-cb `characterize -q -autoActivateBodyPart`
				-annotation (uiRes("m_ChaSkeletonsMenu.kBodyPartAutoloadAnnot"))
				-echoCommand true
				-c "ToggleAutoActivateBodyPart"
				autoActivateBodyPartEnableItem;

			menuItem -checkBox `optionVar -query fbikDetailsVisibility`
				-label (uiRes("m_ChaSkeletonsMenu.kFbikDetails"))
				-command "ToggleFbikDetails"
				-annotation (getRunTimeCommandAnnotation("ToggleFbikDetails"))
				fbikDetailsItem;

			menuItem -d true;
			
			menuItem -label (uiRes("m_ChaSkeletonsMenu.kGetFBIKExample")) 
				-annotation (getRunTimeCommandAnnotation("GetFBIKExample"))
				-command "GetFBIKExample";

			setParent -menu ..;
	}

		menuItem -divider true -dividerLabel (uiRes("m_ChaSkeletonsMenu.kIKDivider"));

		menuItem -ltVersion "2015" -label (uiRes("m_ChaSkeletonsMenu.kIKHandleTool")) 
			-annotation (uiRes("m_ChaSkeletonsMenu.kIKHandleToolAnnot")) 
			-i "kinHandle.png"
			-c "IKHandleTool" createHandleItem;
		menuItem -optionBox true -i "kinHandle.png"
			-annotation (uiRes("m_ChaSkeletonsMenu.kIKHandleToolOptionAnnot")) 
			-c "IKHandleToolOptions" 
			handleDialogItem;

	if( `licenseCheck -mode "edit" -type "complete"` ) {
		menuItem -label (uiRes("m_ChaSkeletonsMenu.kIKSplineHandleTool")) 
			-annotation (uiRes("m_ChaSkeletonsMenu.kIKSplineHandleToolAnnot")) 
			-ltVersion 2016
			-i "kinSplineHandle.png"
			-c "IKSplineHandleTool" 
			createSplineHandleItem;
		menuItem -optionBox true -i "kinSplineHandle.png"
			-annotation (uiRes("m_ChaSkeletonsMenu.kIKSplineHandleToolOptionAnnot")) 
			-c "IKSplineHandleToolOptions" 
			handleSplineDialogItem;
	}

		menuItem -ltVersion "2015" -label (uiRes("m_ChaSkeletonsMenu.kSetPreferredAngle")) 
			-annotation (uiRes("m_ChaSkeletonsMenu.kSetPreferredAngleAnnot")) 
			-dmc "performSetPrefAngle 2"
			-c "SetPreferredAngle"
			-i "kinSetPreferredAngle.png"
			setPrefAngleItem;
		menuItem -optionBox true
			-annotation (uiRes("m_ChaSkeletonsMenu.kSetPreferredAngleOptionAnnot")) 
			-c "SetPreferredAngleOptions"
			setPrefAngleOptionItem;

		menuItem -ltVersion "2015" -label (uiRes("m_ChaSkeletonsMenu.kAssumePreferredAngle")) 
			-annotation (uiRes("m_ChaSkeletonsMenu.kAssumePreferredAngleAnnot")) 
			-dmc "performAssumePrefAngle 2"
			-c "AssumePreferredAngle"
			-i "kinAssumeAngle.png"
			assumePrefAngleItem;
		menuItem -optionBox true
			-annotation (uiRes("m_ChaSkeletonsMenu.kAssumePreferredAngleOptionAnnot")) 
			-c "AssumePreferredAngleOptions"
			assumePrefAngleOptionItem;

		menuItem -d true -ld false;

		menuItem -ltVersion "2015" -label (uiRes("m_ChaSkeletonsMenu.kEnableIKHandleSnap")) 
			-cb `ikSystem -q -sn`
			-annotation (uiRes("m_ChaSkeletonsMenu.kEnableIKHandleSnapAnnot")) 
			-enable (! `ikSystem -q -allowRotation`)
			-echoCommand true
			-c "ToggleIKHandleSnap"
			globalSnapEnableItem;

		menuItem -ltVersion "2015" -label (uiRes("m_ChaSkeletonsMenu.kEnableIKFKControl")) 
			-cb `ikSystem -q -allowRotation`
			-annotation (uiRes("m_ChaSkeletonsMenu.kEnableIKFKControlAnnot")) 
			-echoCommand true
			-c "ToggleIKAllowRotation";

		menuItem -ltVersion "2015" -label (uiRes("m_ChaSkeletonsMenu.kEnableSelectedIKHandles")) 
			-annotation (uiRes("m_ChaSkeletonsMenu.kEnableSelectedIKHandlesAnnot")) 
			-echoCommand true
			-c "EnableSelectedIKHandles"
			enableIKHandlesItem;

		menuItem -ltVersion "2015" -label (uiRes("m_ChaSkeletonsMenu.kDisableSelectedIKHandles")) 
			-annotation (uiRes("m_ChaSkeletonsMenu.kDisableSelectedIKHandlesAnnot")) 
			-echoCommand true
			-c "DisableSelectedIKHandles"
			disableIKHandlesItem;

		menuItem -d true -longDivider false;

		menuItem -label (uiRes("m_ChaSkeletonsMenu.kHIKRetargeting"))
			-to true
			-image "humanIK_CharCtrl.png"
			-annotation (uiRes("m_ChaSkeletonsMenu.kCharacterControlsAnnot"))
			-c "HIKCharacterControlsTool"
			hikWindowItem;

	setParent -m ..;
  }
}
