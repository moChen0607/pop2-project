// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


//
// Description:
//		Polygon UV creation menu
//
global proc PolygonsCreateUVsMenu(string $parent)
{
	if (! `isTrue "PolygonsExists"`) return;
	
	PolygonsCreateTextureMenu $parent 0 "ls -selection";
}

global proc PolygonsCreateTextureMenu(string $parent, int $creator, string $selectCmd)
//
// Description:
//		Polygon Create UVs menu
//
{

	setParent -menu $parent; 

	if (`menu -query -numberOfItems $parent` == 0) {

		string $planarLabel = (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsPlanar"));
		string $createPlanarMapping = (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsCreatePlanar"));
		string $prefix = ($creator == 0 ? "" : ("PolyRequestUVSetName \""+$createPlanarMapping+"\" ") );
		string $cmd = $prefix + "performPolyProjectionArgList";
		string $version = "\"1\"";
		string $args0 = ("{\"0\", \"Planar\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args1 = ("{\"1\", \"Planar\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args2 = ("{\"2\", \"Planar\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $suffix = ($creator == 0 ? " \"\"" : "");
		string $dmc = "performPolyProjectionArgList \"1\" {\"2\", \"Planar\", \"ls -selection\", \"0\"} \"\";";
		string $c = ($cmd + " " + $version + " " + $args0 + $suffix);

		menuItem
			-label $planarLabel
			-enableCommandRepeat true 
			-image "polyPlanProj.png"
			-dragMenuCommand $dmc 
			-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsPlanarAnnot")) 
			-command $c 
			planarMappingItem
			;
			
		string $c = ($cmd + " " + $version + " " + $args1 + $suffix);
		
		menuItem -optionBox 1  
			-image "polyPlanProj.png"
			-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsPlanarOptionAnnot"))  
			-enableCommandRepeat false 
			-command $c 
			planarMappingOptionItem
			;	

		string $cylindricalLabel = (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsCylindrical"));
		string $createCylindricalMapping = (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsCreateCylindrical"));
		string $prefix = ($creator == 0 ? "" : ("PolyRequestUVSetName \""+$createCylindricalMapping+"\" ") );
		string $cmd = $prefix + "performPolyProjectionArgList";
		string $version = "\"1\"";
		string $args0 = ("{\"0\", \"Cylindrical\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args1 = ("{\"1\", \"Cylindrical\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args2 = ("{\"2\", \"Cylindrical\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $suffix = ($creator == 0 ? " \"\"" : "");
		string $dmc = "performPolyProjectionArgList \"1\" {\"2\", \"Cylindrical\", \"ls -selection\", \"0\"} \"\";";
		string $c = ($cmd + " " + $version + " " + $args0 + $suffix);

		menuItem
			-label $cylindricalLabel
			-enableCommandRepeat true 
			-image "polyCylProj.png"
			-dragMenuCommand $dmc 
			-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsCylindricalAnnot")) 
			-command $c cylindricMappingItem
			;
		
		string $c = ($cmd + " " + $version + " " + $args1 + $suffix);
		
		menuItem -optionBox 1 
			-image "polyCylProj.png"
			-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsCylindricalOptAnnot"))  
			-enableCommandRepeat false 
			-command $c 
			cylindricMappingOptionItem
			;

// Spherical mapping

		string $sphericalLabel = (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsSpherical"));
		string $createSphericalMapping = (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsSphericalMapping"));
		string $prefix = ($creator == 0 ? "" : ("PolyRequestUVSetName \""+$createSphericalMapping+"\" ") );
		string $cmd = $prefix + "performPolyProjectionArgList";
		string $version = "\"1\"";
		string $args0 = ("{\"0\", \"Spherical\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args1 = ("{\"1\", \"Spherical\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args2 = ("{\"2\", \"Spherical\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $suffix = ($creator == 0 ? " \"\"" : "");
		string $c = ($cmd + " " + $version + " " + $args0 + $suffix);
		string $dmc = "performPolyProjectionArgList \"1\" {\"2\", \"Spherical\", \"ls -selection\", \"0\"} \"\";";

		menuItem
			-label $sphericalLabel
			-enableCommandRepeat true 
			-image "polySphereProj.png"
			-dragMenuCommand $dmc
			-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsSphericalAnnot")) 
			-command $c sphericMappingItem
			;
			
		string $c = ($cmd + " " + $version + " " + $args1 + $suffix);
		
		menuItem -optionBox 1 
			-image "polySphereProj.png"
			-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsSphericalOptAnnot"))  
			-enableCommandRepeat false 
			-command $c 
			sphericMappingOptionItem
			;

// Automatic mapping

		menuItem 
			-label (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsAutomatic")) 
			-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsAutomaticAnnot")) 
			-command "performPolyAutoProj 0" 
			-image "polyAutoProj.png" 
			;
			
		menuItem -optionBox 1
			-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsAutomaticOptionAnnot")) 
			-command "performPolyAutoProj 1" 
			-enableCommandRepeat false 
			-image "polyAutoProj.png"
			;


// Camera Based mapping

		string $createUVsBasedOnCamera = (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsCameraBasedUVsCreate"));
		string $prefix = ($creator == 0 ? "" : ( "PolyRequestUVSetName \""+$createUVsBasedOnCamera+ "\" ") );
		string $cmd = $prefix + "performPolyForceUVArgList";
		string $version = "\"1\"";
		string $args0 = ("{\"0\", \"camera\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args1 = ("{\"1\", \"camera\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args2 = ("{\"2\", \"camera\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $suffix = ($creator == 0 ? " \"\"" : "");
		string $dmc = "performPolyForceUVArgList \"1\" {\"2\", \"camera\", \"ls -selection\", \"0\"} \"\";";
		string $c = ($cmd + " " + $version + " " + $args0 + $suffix);
		
		menuItem
			-label $createUVsBasedOnCamera
			-enableCommandRepeat true 
			-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsCameraAnnot")) 
			-image "polyCameraUVs.png"
			-dragMenuCommand $dmc
			-command $c 
			cameraProjectionItem
			;
			
		string $c = ($cmd + " " + $version + " " + $args1 + $suffix);
		
		menuItem -optionBox 1
			-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsCameraOptionAnnot"))  
			-image "polyCameraUVs.png"
			-enableCommandRepeat false 
			-command $c 
			cameraProjectionOptionItem
			;

// Contour stretch mapping

		string $contourLabel = (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsContour"));
		string $createContourMapping = (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsContourMapping"));
		string $prefix = ($creator == 0 ? "" : ("PolyRequestUVSetName \""+$createContourMapping+"\" ") );
		string $cmd = $prefix + "performPolyProjectionArgList";
		string $version = "\"1\"";
		string $args0 = ("{\"0\", \"Contour\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args1 = ("{\"1\", \"Contour\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args2 = ("{\"2\", \"Contour\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $suffix = ($creator == 0 ? " \"\"" : "");
		string $c = ($cmd + " " + $version + " " + $args0 + $suffix);
		string $dmc = "performPolyProjectionArgList \"1\" {\"2\", \"Contour\", \"ls -selection\", \"0\"} \"\";";

		menuItem
			-version "2016"
			-label $contourLabel
			-enableCommandRepeat true 
			-image "polyContourProj.png"
			-dragMenuCommand $dmc
			-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsContourAnnot")) 
			-command $c contourMappingItem
			;
			
		string $c = ($cmd + " " + $version + " " + $args1 + $suffix);
		
		menuItem -optionBox 1 
			-image "polyContourProj.png"
			-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsContourOptAnnot"))  
			-enableCommandRepeat false 
			-command $c 
			contourMappingOptionItem
			;

// Best Plane

			menuItem 
				-label (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsBestPlane"))   
				-enableCommandRepeat true
				-image "bestPlaneTxt.png"
				-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsBestPlaneAnnot")) 
				-dragMenuCommand "polygonsMenuItemToShelf \"setToolTo polyBestPlaneTexturingContext\""
				-command "BestPlaneTexturingTool" 
				polyBestPlaneTexturingItem
				;

			menuItem -divider true;

			if ($creator != 1) {
				menuItem 
					-enableCommandRepeat false 
					-checkBox false 
					-label (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsAssignShaderToProjection"))  
					-image "polyCheck.png"
					-dragMenuCommand "polygonUVsItemToShelf \"togglePolyCreateShaderWithMapping\""
					-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsAssignShaderToProjectionAnnot")) 
					-command "togglePolyCreateShaderWithMapping"
					toggleCreateShaderItem
					;
			}

			menuItem -divider true;

// Create empty UV set

		string $createUVSetLabel = (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsUVSetLabel"));
		string $createEmptyUVSet = (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsCreateEmptyUVSet"));
		string $prefix = ($creator == 0 ? "" : ("PolyRequestUVSetName \""+$createEmptyUVSet+"\" ") );
		string $cmd = $prefix + "performCreateUVSet";
		string $version = "\"1\"";
		string $args0 = ("{\"0\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args1 = ("{\"1\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args2 = ("{\"2\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $suffix = ($creator == 0 ? " \"\"" : "");
		string $dmc = "performCreateUVSet \"1\" {\"2\", \"ls -selection\", \"0\"} \"\";";
		string $c = ($cmd + " " + $version + " " + $args0 + $suffix);
		
		menuItem
			-label $createUVSetLabel
			-enableCommandRepeat true 
			-image "polyCreateUVSet.png"
			-dragMenuCommand $dmc
			-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsCreateUVSetAnnot")) 
			-command $c 
			createUVSetItem
			;
			
		if ($creator != 1) {
			string $c = ($cmd + " " + $version + " " + $args1 + $suffix);
			
			menuItem -optionBox 1  
				-image "polyCreateUVSet.png"
				-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsCreateUVSetOptAnnot"))  
				-enableCommandRepeat false 
				-command $c 
				createUVSetOptionItem
				;	
		}

// Copy, Set Current, Rename and Delete

		// Copy UVs to UV set
		string $prefix = "M";	// M is just to ensure a unique name for the menu item
		string $selectUVSetMenu = `menuItem 
			-label (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsCopyUVsToUVSet"))  
			-subMenu true 
			-allowOptionBoxes true 
			($prefix+"CopyUVSets")`;

		string $cmd = "string $menuNames[];" +
					  "buildUVSetMenuNames( $menuNames ); " +
					  "buildUVSetMenu " + $selectUVSetMenu + " $menuNames \"" + $prefix + " \" 1;" +
					  "buildUVSetMenuWithCopyUVsCmd " + $selectUVSetMenu + " $menuNames ;";
					  
		menuItem -e -pmc $cmd $selectUVSetMenu;

		string $copyCurrentUVSet = (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsCopyCurrentUVSet"));
		string $prefix = ($creator == 0 ? "" : ("PolyRequestUVSetName \""+$copyCurrentUVSet+"\" ") );
		string $cmd = $prefix + "performCopyCurrentUVSet";
		string $version = "\"1\"";
		string $args0 = ("{\"0\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args1 = ("{\"1\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args2 = ("{\"2\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $suffix = ($creator == 0 ? " \"\"" : "");
		string $dmc = "performCopyCurrentUVSet \"1\" {\"2\", \"ls -selection\", \"0\"} \"\";";
		string $c = ($cmd + " " + $version + " " + $args0 + $suffix);
		
		menuItem -label (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsCopyIntoNewUVSet"))  -ecr true
			-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsCopyIntoNewUVSetAnnot")) 
			-image "polyCopyUVSet.png"
			-dragMenuCommand $dmc
			-command $c copyCurrentUVSet
			;
			
		if ($creator != 1) {
			string $c = ($cmd + " " + $version + " " + $args1 + $suffix);
			
			menuItem -optionBox 1
				-image "polyCopyUVSet.png"
				-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsCopyNewUVSetOptionAnnot")) 
				-enableCommandRepeat false 
				-command $c 
				copyCurrentUVSetOB
				;
		}

		setParent -menu ..;

		if ($creator != 1) {

			menuItem 
				-label (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsSetCurrentUVSet"))  
				-enableCommandRepeat true
				-image "polySetCurrentUVSet.png"
				-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsSetCurrentUVSetAnnot")) 
				-command "SetCurrentUVSet" setCurrentUVSet;

			menuItem 
				-label (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsRenameCurrentUVSet"))  
				-enableCommandRepeat true
				-image "polyRenameUVSet.png"
				-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsRenameCurrentUVSetAnnot")) 
				-command "RenameCurrentUVSet" renameCurrentUVSet;

			menuItem -label (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsDeleteCurrentUVSet"))  
				-enableCommandRepeat true
				-image "polyDeleteUVSet.png"
				-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsDeleteCurrentUVSetAnnot")) 
				-dragMenuCommand "performDeleteCurrentUVSet 2"
				-command "DeleteCurrentUVSet" deleteCurrentUVSet;

			menuItem 
				-label (uiRes("m_PolygonsCreateUVsMenu.kPolyUVSetEditor")) 
				-enableCommandRepeat true
				-enable true
				-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVSetEditorAnnot"))
				-image "polyUVSetEditor.png"
				-command "UVSetEditor"
				;

			menuItem 
				-label (uiRes("m_PolygonsCreateUVsMenu.kPolyUVsPerInstance"))
				-subMenu true -to true
				-allowOptionBoxes true;

			menuItem
				-label (uiRes("m_PolygonsCreateUVsMenu.kPolyUVSelectShared"))
				-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVSelectSharedAnnot"))
				-image "polyShareInstancesSelect.png"
				-command "SelectSharedUVInstances";

			menuItem
				-label (uiRes("m_PolygonsCreateUVsMenu.kPolyUVShareInstances"))
				-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyUVShareInstancesAnnot"))
				-image "polyShareInstances.png"
				-command "ShareUVInstances";

			menuItem
				-label (uiRes("m_PolygonsCreateUVsMenu.kPolyUVMakeInstanceCurrent"))
				-annotation (uiRes("m_PolygonsCreateUVsMenu.kPolyMakeInstancecurrentAnnot"))
				-image "polyShareInstancesCurrent.png"
				-command "MakeUVInstanceCurrent";
			
			setParent -menu ..;		
			
		}

		setParent -menu ..;



	}

}
