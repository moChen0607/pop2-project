// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  Sep 2014
//
//
//  Procedure Name:
//      DynFieldsSolverMenu
//
//  Description:
//		Create the DYNAMICS->Fields/Solvers
//
//  Input Arguments:
//      parent to parent the menu to.
//
//  Return Value:
//      None.
//
global proc string createRigidSolverList( string $parent )
//
{
    setParent -menu $parent;
    menu -edit -deleteAllItems $parent;

	int    $i;
	string $solverList[] = `ls -type rigidSolver`;
	int    $solverCount  = size($solverList);


	radioMenuItemCollection;
	if ( $solverCount > 0 )
	{
		for ($i = 0; $i < $solverCount; $i++)
		{
			string $cmdString = "getAttr " + $solverList[$i] + ".current";

			int $current = eval( $cmdString );

			$cmdString = "setAttr " + $solverList[$i] + ".current 1";

			string $menu = "menu" + $solverList[$i];

   			menuItem -label $solverList [$i] -radioButton $current -command $cmdString $menu;
		}
	}
	else
	{
      	menuItem -label (uiRes("m_DynFieldsSolverMenu.kNoSolvers")) ;
	}

	return 1;
}

proc DynLegacyRigidBodyItems()
{
	menuItem -divider true -label (uiRes("m_DynFieldsSolverMenu.kLegacyRigidBodies"));

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kCreateActiveRigidBody"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kCreateActiveRigidBodyAnnot")) 
		-command "CreateActiveRigidBody" 
		-dragMenuCommand "performDynamics 2 ActiveRigid 2"
		-image "rigid.png"
		createActiveRigidBodyItem;
		menuItem -optionBox true -image "rigid.png"
			-annotation (uiRes("m_DynFieldsSolverMenu.kCreateActiveRigidBodyOptionsAnnot")) 
			-command "CreateActiveRigidBodyOptions"
			createActiveRigidBodyDialogItem;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kCreatePassiveRigidBody"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kCreatePassiveRigidBodyAnnot")) 
		-command "CreatePassiveRigidBody" 
		-dragMenuCommand "performDynamics 2 PassiveRigid 2"
		-image "rigidPassive.png"
		createPassiveRigidBodyItem;
		menuItem -optionBox true -image "rigidPassive.png"
			-annotation (uiRes("m_DynFieldsSolverMenu.kCreatePassiveRigidBodyOptionsAnnot")) 
			-command "CreatePassiveRigidBodyOptions"
			createPassiveRigidBodyDialogItem;

	menuItem -divider true -longDivider false;

		menuItem -label (uiRes("m_DynFieldsSolverMenu.kCreateNailConstraint"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kCreateNailConstraintAnnot")) 
		-command "optionVar -iv constrainTypesOM 1;CreateConstraint" 
		-dragMenuCommand "optionVar -iv constrainTypesOM 1;performDynamics 2 Constrain 2"
		-image "constraint.png"
		createNailConstraintItem;
		menuItem -optionBox true -image "constraint.png"
			-annotation (uiRes("m_DynFieldsSolverMenu.kCreateNailConstraintOptionsAnnot")) 
			-command "optionVar -iv constrainTypesOM 1;CreateConstraintOptions"
			createNailConstraintDialogItem;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kCreatePinConstraint"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kCreatePinConstraintAnnot")) 
		-command "optionVar -iv constrainTypesOM 2;CreateConstraint" 
		-dragMenuCommand "optionVar -iv constrainTypesOM 2;performDynamics 2 Constrain 2"
		-image "constraint.png"
		createPinConstraintItem;
		menuItem -optionBox true -image "constraint.png"
			-annotation (uiRes("m_DynFieldsSolverMenu.kCreatePinConstraintOptionsAnnot")) 
			-command "optionVar -iv constrainTypesOM 2;CreateConstraintOptions"
			createPinConstraintDialogItem;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kCreateHingeConstraint"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kCreateHingeConstraintAnnot")) 
		-command "optionVar -iv constrainTypesOM 3;CreateConstraint" 
		-dragMenuCommand "optionVar -iv constrainTypesOM 3;performDynamics 2 Constrain 2"
		-image "constraint.png"
		createHingeConstraintItem;
		menuItem -optionBox true -image "constraint.png"
			-annotation (uiRes("m_DynFieldsSolverMenu.kCreateHingeConstraintOptionsAnnot")) 
			-command "optionVar -iv constrainTypesOM 3;CreateConstraintOptions"
			createHingeConstraintDialogItem;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kCreateSpringConstraint"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kCreateSpringConstraintAnnot")) 
		-command "optionVar -iv constrainTypesOM 4;CreateConstraint" 
		-dragMenuCommand "optionVar -iv constrainTypesOM 4;performDynamics 2 Constrain 2"
		-image "constraint.png"
		createSpringConstraintItem;
		menuItem -optionBox true -image "constraint.png"
			-annotation (uiRes("m_DynFieldsSolverMenu.kCreateSpringConstraintOptionsAnnot")) 
			-command "optionVar -iv constrainTypesOM 4;CreateConstraintOptions"
			createSpringConstraintDialogItem;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kCreateBarrierConstraint"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kCreateBarrierConstraintAnnot")) 
		-command "optionVar -iv constrainTypesOM 5;CreateConstraint" 
		-dragMenuCommand "optionVar -iv constrainTypesOM 5;performDynamics 2 Constrain 2"
		-image "constraint.png"
		createBarrierConstraintItem;
		menuItem -optionBox true -image "constraint.png"
			-annotation (uiRes("m_DynFieldsSolverMenu.kCreateBarrierConstraintOptionsAnnot")) 
			-command "optionVar -iv constrainTypesOM 5;CreateConstraintOptions"
			createBarrierConstraintDialogItem;
	
	menuItem -divider true -longDivider false;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kSetActiveKey")) 
		-annotation (uiRes("m_DynFieldsSolverMenu.kSetActiveKeyAnnot")) 
		-command "SetActiveKey" 
		setActiveKey;
	menuItem -label (uiRes("m_DynFieldsSolverMenu.kSetPassiveKey")) 
		-annotation (uiRes("m_DynFieldsSolverMenu.kSetPassiveKeyAnnot")) 
		-command "SetPassiveKey" 
		setPassiveKey;

	menuItem -divider true;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kBreakConnections")) 
		-annotation (uiRes("m_DynFieldsSolverMenu.kBreakConnectionsAnnot")) 
		-command "BreakRigidBodyConnection" 
		breakConnections;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kSetRigidBodyInterp"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kSetRigidBodyInterpAnnot")) 
		-command "SetRigidBodyInterpenetration"
		rigidBodyInterpenetration;

    menuItem -label (uiRes("m_DynFieldsSolverMenu.kSetRigidBodyCollision"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kSetRigidBodyCollisionAnnot")) 
		-command "SetRigidBodyCollision"
		rigidBodyCollison;

	menuItem -divider true -longDivider false;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kRigidBodySolver"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kRigidBodySolverAnnot")) 
		-command RigidBodySolver
		editRigidSolver;

	// Current Rigid Body Solver menu
	string $menu = `menuItem -label (uiRes("m_DynFieldsSolverMenu.kCurrentRigidSolver"))
							 -annotation (uiRes("m_DynFieldsSolverMenu.kCurrentRigidSolverAnnot"))
							 -subMenu true -tearOff false`;
	menuItem -edit -postMenuCommand ( "createRigidSolverList " + $menu ) $menu;
	setParent -menu ..;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kCreateRigidBodySolver"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kCreateRigidBodySolverAnnot")) 
		-command "CreateRigidBodySolver"
		createRigidSolver;
}

global proc DynCreateAssignNSolverMenu( string $parent ) 
//
// Build the move to solver submenu
{
	setParent -menu $parent;
	menu -edit -deleteAllItems $parent;
	
	menuItem -label (uiRes("m_DynFieldsSolverMenu.kAssignNewSolver"))
		-command "assignNSolver \"\""
		-annotation (uiRes("m_DynFieldsSolverMenu.kNewSolver"));

	string $solvers[] = `ls -type "nucleus"`;
	for( $solver in $solvers ) {
		menuItem -label $solver -command ("assignNSolver " + $solver );
	}
	setParent -menu ..;
}

global proc DynCreateStartStateMenu( string $parent )
//
// Build the Submenu
{
	setParent -menu $parent;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kSetForSelected"))  
			-annotation (getRunTimeCommandAnnotation("setDynStartState"))
			-c "setDynStartState"
			setDynStartStateItem;

	
	menuItem -label (uiRes("m_DynFieldsSolverMenu.kSetForAllDynamic"))  
			-annotation (uiRes("m_DynFieldsSolverMenu.kSetForAllDynamicAnnot")) 
			-command "evalEcho saveInitialState -all" saveStateAll;
	
	menuItem -l (uiRes("m_DynFieldsSolverMenu.kClearDynStartState"))
		-annotation (getRunTimeCommandAnnotation("clearDynStartState"))
		-c "clearDynStartState"
		clearDynStartStateItem;

	menuItem -divider true -dividerLabel (uiRes("m_DynFieldsSolverMenu.kSolverInitialNucleus"));

	menuItem -l (uiRes("m_DynFieldsSolverMenu.kSetStartFromMesh"))
		-annotation (getRunTimeCommandAnnotation("SetNClothStartFromMesh"))
		-c "SetNClothStartFromMesh"
		setNClothStartFromMeshItem;
		
	menuItem -l (uiRes("m_DynFieldsSolverMenu.kRelaxInitialState"))
		-annotation (getRunTimeCommandAnnotation("RelaxInitialState"))
		-c "RelaxInitialState"
		relaxInitialStateItem;
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("RelaxInitialStateOptions"))
			-enable true
			-c RelaxInitialStateOptions
			relaxInitialStateOptionItem;

	menuItem -l (uiRes("m_DynFieldsSolverMenu.kResolveInterpenetration"))
		-annotation (getRunTimeCommandAnnotation("ResolveInterpenetration"))
		-c "ResolveInterpenetration"
		resolveInterpenetrationItem;
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("ResolveInterpenetrationOptions"))
			-enable true
			-c ResolveInterpenetrationOptions
			resolveInterpenetrationOptionItem;

	menuItem -divider true -dividerLabel (uiRes("m_DynFieldsSolverMenu.kSolverInitialFluids"));

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kFluInitState"))
		-annotation (getRunTimeCommandAnnotation("SetInitialState"))
		-image "fluidInitialStateSet.png"
		-command "SetInitialState"
		-dragMenuCommand "performSetFluidState 2"
 		-dragDoubleClickCommand "SetInitialStateOptions";

	menuItem -optionBox true
 		-annotation (getRunTimeCommandAnnotation("SetInitialStateOptions"))
		-command "SetInitialStateOptions";
	
	menuItem -label (uiRes("m_DynFieldsSolverMenu.kFluSaveState"))
		-annotation (getRunTimeCommandAnnotation("SaveFluidStateAs"))
		-command "SaveFluidStateAs";
		
	setParent -menu ..;
}

global proc DynFieldsSolverMenu ( string $parent ) 
{
	setParent -menu $parent;

	if( `menu -q -ni $parent` != 0 ) {
		//
		//	Menu is built already - just return
		//
		return;
	}

	menuItem -divider true -label (uiRes("m_DynFieldsSolverMenu.kCreate"));

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kAir"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kAirAnnot")) 
		-command "Air" 
		-dragMenuCommand "performDynamics 1 Air 2"
		-image "posAir.png"
		createAirItem;
		menuItem -optionBox true -image "posAir.png"
			-annotation (uiRes("m_DynFieldsSolverMenu.kAirOptionsAnnot")) 
			-command "AirOptions" 
			createAirDialogItem;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kDrag"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kDragAnnot")) 
		-command "Drag" 
		-dragMenuCommand "performDynamics 1 Drag 2"
		-image "posDrag.png"
		createDragItem;
		menuItem -optionBox true -image "posDrag.png"
			-annotation (uiRes("m_DynFieldsSolverMenu.kDragOptionsAnnot")) 
			-command "DragOptions" 
			createDragDialogItem;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kGravity"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kGravityAnnot")) 
		-command "Gravity" 
		-dragMenuCommand "performDynamics 1 Gravity 2"
		-image "posGravity.png"
		createGravityItem;
		menuItem -optionBox true -image "posGravity.png"
			-annotation (uiRes("m_DynFieldsSolverMenu.kGravityOptionsAnnot")) 
			-command "GravityOptions" 
			createGravityDialogItem;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kNewton")) 
		-annotation (uiRes("m_DynFieldsSolverMenu.kNewtonAnnot")) 
		-command "Newton" 
		-dragMenuCommand "performDynamics 1 Newton 2"
		-image "posNewton.png"
		createNewtonItem;
		menuItem -optionBox true -image "posNewton.png"
			-annotation (uiRes("m_DynFieldsSolverMenu.kNewtonOptionsAnnot")) 
			-command "NewtonOptions" 
			createNewtonDialogItem;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kRadial"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kRadialAnnot")) 
		-command "Radial" 
		-dragMenuCommand "performDynamics 1 Radial 2"
		-image "posRadial.png"
		createRadialItem;
		menuItem -optionBox true -image "posRadial.png"
			-annotation (uiRes("m_DynFieldsSolverMenu.kRadialOptionsAnnot")) 
			-command "RadialOptions" 
			createRadialDialogItem;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kTurbulence"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kTurbulenceAnnot")) 
		-command "Turbulence" 
		-dragMenuCommand "performDynamics 1 Turbulence 2"
		-image "posTurbulence.png"
		createTurbulenceItem;
		menuItem -optionBox true -image "posTurbulence.png"
			-annotation (uiRes("m_DynFieldsSolverMenu.kTurbulenceOptionsAnnot")) 
			-command "TurbulenceOptions" 
			createTurbulenceDialogItem;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kUniform"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kUniformAnnot")) 
		-command "Uniform" 
		-dragMenuCommand "performDynamics 1 Uniform 2"
		-image "posUniform.png"
		createUniformItem;
		menuItem -optionBox true -image "posUniform.png"
			-annotation (uiRes("m_DynFieldsSolverMenu.kUniformOptionsAnnot")) 
			-command "UniformOptions" 
			createUniformDialogItem;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kVortex")) 
		-annotation (uiRes("m_DynFieldsSolverMenu.kVortexAnnot")) 
		-command "Vortex" 
		-dragMenuCommand "performDynamics 1 Vortex 2"
		-image "posVortex.png"
		createVortexItem;
		menuItem -optionBox true -image "posVortex.png"
			-annotation (uiRes("m_DynFieldsSolverMenu.kVortexOptionsAnnot")) 
			-command "VortexOptions" 
			createVortexDialogItem;

	menuItem -divider true -dividerLabel (uiRes("m_DynFieldsSolverMenu.kFieldsVolume"));
	
	menuItem -label (uiRes("m_DynFieldsSolverMenu.kVolumeAxis")) 
		-annotation (uiRes("m_DynFieldsSolverMenu.kVolumeAxisAnnot")) 
		-command "VolumeAxis" 
		-dragMenuCommand "performDynamics 1 VolumeAxis 2"
		-image "posVolumeAxis.png"
		createVolumeAxisItem;
		menuItem -optionBox true 
			-image "posVolumeAxis.png"
			-annotation (uiRes("m_DynFieldsSolverMenu.kVolumeAxisOptionsAnnot")) 
			-command "VolumeAxisOptions" 
			createVolumeAxisDialogItem;
			
	menuItem -label (uiRes("m_DynFieldsSolverMenu.kVolumeCurve")) 
		-annotation (uiRes("m_DynFieldsSolverMenu.kVolumeCurveAnnot")) 
		-command "createCurveField" 
		-dragMenuCommand "performDynamics 1 VolumeCurve 2"
		createVolumeCurveItem;

	menuItem -divider true -dividerLabel (uiRes("m_DynFieldsSolverMenu.kFieldsConnect"));

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kUseSelected")) 
		-annotation (uiRes("m_DynFieldsSolverMenu.kUseSelectedAnnot")) 
		-command "AttachSelectedAsSourceField"
		-image "selectedFields.png"
		addDynamicItem;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kAssignToSelected"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kAffectSelectedAnnot")) 
		-command "AffectSelectedObject"
		-image "connectField.png"
		connFieldItem;

	menuItem -divider true -dividerLabel (uiRes("m_DynFieldsSolverMenu.kSolvers"));
	
	menuItem -label (uiRes("m_DynFieldsSolverMenu.kConnectToTime"))  
		-annotation (uiRes("m_DynFieldsSolverMenu.kConnectToTimeAnnot")) 
		-command "ConnectToTime"
		connectToTimeItem;

	// Initial State submenu
	string $startStateItem = `menuItem -label (uiRes("m_DynFieldsSolverMenu.kInitialState"))  
        -annotation (uiRes("m_DynFieldsSolverMenu.kInitialStateAnnot")) 
		-subMenu true -tearOff true -allowOptionBoxes true nucleusStartStateItem`;
	DynCreateStartStateMenu $startStateItem;

	menuItem -label (uiRes("m_DynFieldsSolverMenu.kInteractivePlayback")) 
		-annotation (getRunTimeCommandAnnotation("InteractivePlayback"))
		-image "interactivePlayback.png"
		-command "InteractivePlayback"
		interactivePlaybackItem;

	menuItem -divider true -dividerLabel (uiRes("m_DynFieldsSolverMenu.kSolverNucleus"));
	
	// Assign Solver submenu
	//
	string $assignSolverItem = `menuItem -label (uiRes("m_DynFieldsSolverMenu.kAssignSolver")) 
        -annotation (uiRes("m_DynFieldsSolverMenu.kAssignSolverAnnot")) 
		-subMenu true -tearOff true -allowOptionBoxes false nucleusAssignSolverItem`;
	menuItem -edit 
		-postMenuCommand ("DynCreateAssignNSolverMenu " + $assignSolverItem)
		nucleusAssignSolverItem;
	setParent -menu ..;

	// Legacy RBD menu items
	if(`getenv "MAYA_ENABLE_LEGACY_RIGID"` !="0") {
		DynLegacyRigidBodyItems;
	}
}
