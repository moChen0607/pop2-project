// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  13 April 1997
//
//
//  Procedure Name:
//      ModCurveSurfacesMenu
//
//  Description:
//		Create the MODELLING->CurveSurfaces menu
//
//  Input Arguments:
//      parent to parent the menu to.
//
//  Return Value:
//      None.
//

proc modCreateSurfacesMenuLabels()
{
	if( `optionVar -q modelWithToolRevolve` ) {
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kRevolveTool")) 
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kRevolveToolAnnot"))
		  surfRevolveItem;
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kRevolveToolOptions"))
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kRevolveToolOptionsAnnot"))
		  revolveDialogItem;
	}
	else {
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kRevolve")) 
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kRevolveAnnot"))
		  surfRevolveItem;
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kRevolveOptions"))
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kRevolveOptionsAnnot"))
		  revolveDialogItem;
	}

	if( `optionVar -q modelWithToolLoft` ) {
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kLoftTool")) 
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kLoftToolAnnot"))
		  surfLoftItem;
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kLoftToolOptions"))
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kLoftToolOptionsAnnot"))
		  loftDialogItem;
	}
	else {
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kLoft")) 
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kLoftAnnot"))
		  surfLoftItem;
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kLoftOptions"))
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kLoftOptionsAnnot"))
		  loftDialogItem;
	}

	if( `optionVar -q modelWithToolExtrude` ) {
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kExtrudeTool")) 
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kExtrudeToolAnnot"))
		  surfExtrudeItem;
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kExtrudeToolOptions"))
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kExtrudeToolOptionsAnnot"))
		  extrudeDialogItem;
	}
	else {
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kExtrude")) 
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kExtrudeAnnot"))
		  surfExtrudeItem;
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kExtrudeOptions"))
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kExtrudeOptionsAnnot"))
		  extrudeDialogItem;
	}

	if( `optionVar -q modelWithToolBoundary` ) {
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kBoundaryTool")) 
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kBoundaryToolAnnot"))
		  surfBoundaryItem;
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kBoundaryToolOptions"))
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kBoundaryToolOptionsAnnot"))
		  boundaryDialogItem;
	}
	else {
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kBoundary")) 
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kBoundaryAnnot"))
		  surfBoundaryItem;
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kBoundaryOptions"))
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kBoundaryOptionsAnnot"))
		  boundaryDialogItem;
	}

	if( `licenseCheck -m edit -type model` ) {
		if( `optionVar -q modelWithToolSquareSrf` ) {
			menuItem -e
			  -label (uiRes("m_ModCreateSurfacesMenu.kSquareTool")) 
			  -annotation (uiRes("m_ModCreateSurfacesMenu.kSquareToolAnnot"))
			  surfSquareItem;
			menuItem -e
			  -label (uiRes("m_ModCreateSurfacesMenu.kSquareToolOptions"))
			  -annotation (uiRes("m_ModCreateSurfacesMenu.kSquareToolOptionsAnnot"))
			  squareDialogItem;
		}
		else {
			menuItem -e
			  -label (uiRes("m_ModCreateSurfacesMenu.kSquare")) 
			  -annotation (uiRes("m_ModCreateSurfacesMenu.kSquareAnnot"))
			  surfSquareItem;
			menuItem -e
			  -label (uiRes("m_ModCreateSurfacesMenu.kSquareOptions"))
			  -annotation (uiRes("m_ModCreateSurfacesMenu.kSquareOptionsAnnot"))
			  squareDialogItem;
		}
	}

	if( `optionVar -q modelWithToolBevel` ) {
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kBevelTool"))  
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kBevelToolAnnot"))
		  surfBevelItem;
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kBevelToolOptions")) 
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kBevelToolOptionsAnnot")) 
		  bevelDialogItem;
	}
	else {
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kBevel"))  
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kBevelAnnot"))
		  surfBevelItem;
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kBevelOptions")) 
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kBevelOptionsAnnot")) 
		  bevelDialogItem;
	}

	if( `optionVar -q modelWithToolBevelPlus` ) {
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kBevelPlusTool"))  
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kBevelPlusToolAnnot"))
		  surfBevelPlusItem;
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kBevelPlusToolOptions")) 
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kBevelPlusToolOptionsAnnot")) 
		  bevelPlusDialogItem;
	}
	else {
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kBevelPlus"))  
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kBevelPlusAnnot"))
		  surfBevelPlusItem;
		menuItem -e
		  -label (uiRes("m_ModCreateSurfacesMenu.kBevelPlusOptions")) 
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kBevelPlusOptionsAnnot")) 
		  bevelPlusDialogItem;
	}

	if( `optionVar -q modelWithToolPlanar` ) {
		menuItem -e
			-label (uiRes("m_ModCreateSurfacesMenu.kPlanarTool")) 
			-annotation (uiRes("m_ModCreateSurfacesMenu.kPlanarToolAnnot"))
			planarTrimItem;
		menuItem -e
			-label (uiRes("m_ModCreateSurfacesMenu.kPlanarToolOptions")) 
			-annotation (uiRes("m_ModCreateSurfacesMenu.kPlanarToolOptionsAnnot")) 
			planerTrimDialogItem;
	}
	else {
		menuItem -e
			-label (uiRes("m_ModCreateSurfacesMenu.kPlanar")) 
			-annotation (uiRes("m_ModCreateSurfacesMenu.kPlanarAnnot"))
			planarTrimItem;
		menuItem -e
			-label (uiRes("m_ModCreateSurfacesMenu.kPlanarOptions")) 
			-annotation (uiRes("m_ModCreateSurfacesMenu.kPlanarOptionsAnnot")) 
			planerTrimDialogItem;
	}
}

global proc ModCreateSurfacesMenu( string $parent )
{
	// If this ever changes to true, we have to make sure
	// we don't dim the tools.  So, don't just change the
	// value.  Milan S.
	int $dimWhenNoSelect = 0;

	setParent -m $parent;
	if( `menu -q -ni $parent` != 0 ) {
		//
		//	Menu is built already - relabel and return
		//
		modCreateSurfacesMenuLabels();
		return;
	}

	// revolve + loft + planar.
	//
	menuItem
	  -c "Revolve"
	  -dmc "revolveToolScript 2"
	  -i "revolve.png"
	  surfRevolveItem;
	menuItem -optionBox true
	  -c "RevolveOptions"
	  -i "revolve.png"
	  revolveDialogItem;
	if( $dimWhenNoSelect )
		dimWhen -f "SomethingSelected" ($parent+"|surfRevolveItem") ;

	menuItem
	  -c "Loft"
	  -dmc "loftToolScript 2"
	  -i "skin.png"
	  surfLoftItem;
	menuItem -optionBox true 
	  -c "LoftOptions"
	  -i "skin.png"
	  loftDialogItem;
	if( $dimWhenNoSelect )
		dimWhen -f "SomethingSelected" ($parent+"|surfLoftItem") ;

	menuItem 
		-c "Planar"
		-dmc "planarToolScript 2"
		-i "planarTrim.png"
		planarTrimItem;
	menuItem -optionBox true -i "planarTrim.png"
		-c "PlanarOptions"
		planerTrimDialogItem;

	menuItem -d true ;

	// extrude and Birail
	//
	menuItem
	  -c "Extrude"
	  -dmc "extrudeToolScript 2"
	  -i "extrude.png"
	  surfExtrudeItem;
	menuItem -optionBox true 
	  -c "ExtrudeOptions"
	  -i "extrude.png"
	  extrudeDialogItem;
	if( $dimWhenNoSelect )
		dimWhen -f "SomethingSelected" ($parent+"|surfExtrudeItem") ;

	menuItem -label (uiRes("m_ModCreateSurfacesMenu.kBirail"))  -sm 1 -to 1 -aob true;

		menuItem -label (uiRes("m_ModCreateSurfacesMenu.kBirail1Tool")) 
		  -c "Birail1"
		  -dmc "birailToolScript 2 1"
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kBirail1ToolAnnot"))
		  -image "birail1Gen.png"
		  spBirailItem;
		menuItem -optionBox true -image "birail1Gen.png"
			-annotation (uiRes("m_ModCreateSurfacesMenu.kBirail1ToolOptionsAnnot")) 
			-c "Birail1Options"
			birail1ToolDialog;

		menuItem -label (uiRes("m_ModCreateSurfacesMenu.kBirail2Tool"))
		  -c "Birail2"
		  -dmc "birailToolScript 2 2"
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kBirail2ToolAnnot"))
		  -image "birail2Gen.png"
		  dpBirailItem;
		menuItem -optionBox true -image "birail2Gen.png"
			-annotation (uiRes("m_ModCreateSurfacesMenu.kBirail2ToolOptionsAnnot")) 
            -c "Birail2Options"
			birail2ToolDialog;

		menuItem -label (uiRes("m_ModCreateSurfacesMenu.kBirail3Tool"))
		  -c "Birail3"
		  -dmc "birailToolScript 2 3"
		  -annotation (uiRes("m_ModCreateSurfacesMenu.kBirail3ToolAnnot"))
		  -image "birail3Gen.png"
		  mpBirailItem;
		menuItem -optionBox true -image "birail3Gen.png"
			-annotation (uiRes("m_ModCreateSurfacesMenu.kBirail3ToolOptionsAnnot")) 
            -c "Birail3Options"
			birail3ToolDialog;
    setParent -m .. ;
	menuItem -d true ;

	// boundary + Square.
	//	
	menuItem
		-c "Boundary"
		-dmc "boundaryToolScript 2"
		-i "boundary.png"
		surfBoundaryItem;
	menuItem -optionBox true
		-c "BoundaryOptions"
		-i "boundary.png"
		boundaryDialogItem;
	if( $dimWhenNoSelect )
		dimWhen -f "SomethingSelected" ($parent+"|surfBoundaryItem") ;

	if( `licenseCheck -m edit -type model` ) {
		menuItem
			-c "SquareSurface"
			-dmc "squareSrfToolScript 2"
			-i "squareSrf.png"
			surfSquareItem;
		menuItem -optionBox true
			-c "SquareSurfaceOptions"
			-i "squareSrf.png"
			squareDialogItem;
		if( $dimWhenNoSelect )
			dimWhen -f "SomethingSelected" ($parent+"|surfSquareItem") ;

		menuItem -d true ;
	}

	// bevel.
	//
	menuItem -l "Bevel" 
	  -c "Bevel"
	  -dmc "bevelToolScript 2"
	  -i "bevel.png"
	  surfBevelItem;
	menuItem -optionBox true 
	  -c "BevelOptions"
	  -i "bevel.png"
	  bevelDialogItem;
	if( $dimWhenNoSelect )
		dimWhen -f "SomethingSelected" ($parent+"|surfBevelItem") ;

	// bevel.
	//
	menuItem -l "Bevel Plus" 
	  -c "BevelPlus"
	  -dmc "bevelPlusToolScript 2"
	  -i "bevelPlus.png"
	  surfBevelPlusItem;
	menuItem -optionBox true 
	  -c "BevelPlusOptions"
	  -i "bevelPlus.png"
	  bevelPlusDialogItem;
	if( $dimWhenNoSelect )
		dimWhen -f "SomethingSelected" ($parent+"|surfBevelPlusItem") ;

	modCreateSurfacesMenuLabels();
}
