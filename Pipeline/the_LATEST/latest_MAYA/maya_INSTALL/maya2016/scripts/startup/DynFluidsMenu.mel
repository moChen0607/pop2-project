// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  Jun 2014
//
//
//  Procedure Name:
//      DynFluidsMenu
//
//  Description:
//		Create the DYNAMICS->Fluids
//
//  Input Arguments:
//      parent to parent the menu to.
//
//  Return Value:
//      None.
//
global proc FluidContentsMenu( string $parent )
//
// Build the Add Contents Submenu
{
	setParent -menu $parent;

	menuItem -label (uiRes("m_DynFluidsMenu.kFluEmitter"))
		-annotation (getRunTimeCommandAnnotation("FluidEmitter"))
		-image "fluidEmitterAdd.png"
		-command "FluidEmitter"
		-dragMenuCommand "performFluids 2 FluidEmitter 2"
		-dragDoubleClickCommand "FluidEmitterOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("FluidEmitterOptions"))
		-command "FluidEmitterOptions";

	menuItem -label (uiRes("m_DynFluidsMenu.kFluEmitObject"))
		-annotation (getRunTimeCommandAnnotation("EmitFluidFromObject"))
		-image "fluidObjectEmit.png"
		-command "EmitFluidFromObject"
		-dragMenuCommand "performFluids 0 FluidEmitFromObject 2"
		-dragDoubleClickCommand "EmitFluidFromObjectOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("EmitFluidFromObjectOptions"))
		-command "EmitFluidFromObjectOptions";

	menuItem -label (uiRes("m_DynFluidsMenu.kFluGradients"))
		-annotation (getRunTimeCommandAnnotation("FluidGradients"))
		-command "FluidGradients"
		-dragMenuCommand "performFluidGradients 2"
		-dragDoubleClickCommand "FluidGradientsOptions";		

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("FluidGradientsOptions"))
		-command "FluidGradientsOptions";

	menuItem -label (uiRes("m_DynFluidsMenu.kFluPaintTool"))
		-annotation (getRunTimeCommandAnnotation("PaintFluidsTool"))
		-image "fluidPaint.png"
        -command "PaintFluidsTool"
		-dragDoubleClickCommand "PaintFluidsToolOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("PaintFluidsToolOptions"))
		-command "PaintFluidsToolOptions";

	menuItem -label (uiRes("m_DynFluidsMenu.kFluWithCurve"))
		-annotation (getRunTimeCommandAnnotation("SetFluidAttrFromCurve"))
//		-image ""
        -command "SetFluidAttrFromCurve"
		-dragDoubleClickCommand "SetFluidAttrFromCurveOptions";

	menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation("SetFluidAttrFromCurveOptions"))
		-command "SetFluidAttrFromCurveOptions";

    menuItem -label (uiRes("m_DynFluidsMenu.kFluInitialStates"))
		-image "fluidGetInitialStatePresets.png"
		-annotation (getRunTimeCommandAnnotation( "InitialFluidStates"))
		-command "InitialFluidStates";

    menuItem -optionBox true
		-annotation (getRunTimeCommandAnnotation( "InitialFluidStatesOptions"))
		-command "InitialFluidStatesOptions";

	setParent -menu ..;
}

global proc DynFluidsMenu( string $parent )
{
	setParent -menu $parent;
	if( `menu -query -numberOfItems $parent` != 0 ) {
		//
		//	Menu is built already - just return
		//
		return;
	}
	
	menuItem -divider true -dividerLabel (uiRes("m_DynFluidsMenu.kFluidsCreate"));
	
	menuItem -label (uiRes("m_DynFluidsMenu.kFlu3DContainer"))
		-annotation (getRunTimeCommandAnnotation("Create3DContainerEmitter"))
		-image "fluidCreate3D.png"
		-command "Create3DContainerEmitter"
		-dragMenuCommand "performFluids 1 3DFluidAndEmitter 2"
		-dragDoubleClickCommand "Create3DContainerEmitterOptions";
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("Create3DContainerEmitterOptions"))
			-command "Create3DContainerEmitterOptions";
	
	menuItem -label (uiRes("m_DynFluidsMenu.kFlu2DContainer"))
		-annotation (getRunTimeCommandAnnotation("Create2DContainerEmitter"))
		-image "fluidCreate2D.png"
		-command "Create2DContainerEmitter"
		-dragMenuCommand "performFluids 1 2DFluidAndEmitter 2"
		-dragDoubleClickCommand "Create2DContainerEmitterOptions";
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("Create2DContainerEmitterOptions"))
			-command "Create2DContainerEmitterOptions";
	
	// Contents
	string $contentsItem = `menuItem -label (uiRes("m_DynFluidsMenu.kFluidsAddEdit")) -subMenu true
		-tearOff true -allowOptionBoxes true fluidsAddContentsItem`;
	FluidContentsMenu $contentsItem;
	setParent -menu ..;
	
	// Get Example... sub-menu
	menuItem -label (uiRes("m_DynFluidsMenu.kFluidsGetExample")) -sm true -to true;
		menuItem -label (uiRes("m_DynFluidsMenu.kFluidsExampleFluid"))
			-annotation (getRunTimeCommandAnnotation("GetFluidExample"))
			-image "fluidGetExamples.png"
			-command "GetFluidExample";

		menuItem -label (uiRes("m_DynFluidsMenu.kFluidsExampleOcean"))
			-annotation (getRunTimeCommandAnnotation("GetOceanPondExample"))
			-image "fluidOceanPresets.png"
			-command "GetOceanPondExample";

		setParent -menu ..;
	
	menuItem -label (uiRes("m_DynFluidsMenu.kFluidsCreateOcean"))
		-annotation (getRunTimeCommandAnnotation("CreateOcean"))
		-image "fluidCreateOcean.png"
		-command "CreateOcean"
		-dragMenuCommand "performCreateOcean 2"
		-dragDoubleClickCommand "CreateOceanOptions";
		menuItem -optionBox true -image "fluidCreateOcean.png"
			-annotation (uiRes("m_DynFluidsMenu.kFuildsCreateOceanOptionsAnnot")) 
			-command "CreateOceanOptions";
	
	menuItem -label (uiRes("m_DynFluidsMenu.kFluidsCreatePond"))
		-annotation (getRunTimeCommandAnnotation("CreatePond"))
		-command "CreatePond"
		-dragMenuCommand "performCreatePond 2"
		-dragDoubleClickCommand "CreatePondOptions";
		menuItem -optionBox true
			-annotation (uiRes("m_DynFluidsMenu.kFuildsCreatePondOptionsAnnot")) 
			-command "CreatePondOptions";
			
	menuItem -divider true -dividerLabel (uiRes("m_DynFluidsMenu.kFluidsEdit"));
	
	menuItem -label (uiRes("m_DynFluidsMenu.kFluidsExtend"))
		-annotation (getRunTimeCommandAnnotation("ExtendFluid"))
		-image "fluidExtend.png"
		-command "ExtendFluid"
		-dragMenuCommand "performFluids 1 ExtendFluid 2"
		-dragDoubleClickCommand "ExtendFluidOptions";
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("ExtendFluidOptions"))
			-command "ExtendFluidOptions";

	menuItem -label (uiRes("m_DynFluidsMenu.kFluidsEditRes"))
		-annotation (getRunTimeCommandAnnotation("EditFluidResolution"))
		-image "fluidEditRes.png"
		-command "EditFluidResolution"
		-dragMenuCommand "performFluids 1 ResampleFluid 2"
		-dragDoubleClickCommand "EditFluidResolutionOptions";
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("EditFluidResolutionOptions"))
			-command "EditFluidResolutionOptions";
			
	menuItem -label (uiRes("m_DynFluidsMenu.kFluidsCollide"))
		-annotation (getRunTimeCommandAnnotation("MakeFluidCollide"))
		-image "fluidCollide.png"
		-command "MakeFluidCollide" 
		-dragMenuCommand "performFluids 2 MakeCollideFluid 2"
		-dragDoubleClickCommand "MakeFluidCollideOptions";
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("MakeFluidCollideOptions"))
			-command "MakeFluidCollideOptions";

	menuItem -label (uiRes("m_DynFluidsMenu.kFluidsMotionFld"))
		-annotation (getRunTimeCommandAnnotation("MakeMotionField"))
		-command "MakeMotionField" ;

	menuItem -divider true -dividerLabel (uiRes("m_DynFluidsMenu.kFluidsOceanPond"));
	
	menuItem -label (uiRes("m_DynFluidsMenu.kFluidsAddDynamicLocator")) -sm true -to true;
		FluidOceanDynamicLocator;
		setParent -m ..;
		
	menuItem -label (uiRes("m_DynFluidsMenu.kFluidsPreviewPlane"))
		-annotation (getRunTimeCommandAnnotation("AddOceanPreviewPlane"))
		-image "fluidaddOceanPreviewPlane.png"
		-command "AddOceanPreviewPlane";
		
	menuItem -label (uiRes("m_DynFluidsMenu.kFluidsCreateBoat")) -sm true -to true;
		FluidsOceanCreateBoat;
		setParent -m ..;
		
	menuItem -label (uiRes("m_DynFluidsMenu.kFluidsCreateWake"))
		-annotation (getRunTimeCommandAnnotation("CreateOceanWake"))
		-image "fluidaddOceanPreviewPlane.png"
		-command "CreateOceanWake"
		-dragMenuCommand "performCreateOceanWake 2"
		-dragDoubleClickCommand "CreateOceanWakeOptions";
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("CreateOceanWakeOptions"))
			-command "CreateOceanWakeOptions";
}

global proc FluidOceanDynamicLocator()
{
	menuItem -label (uiRes("m_DynFluidsMenu.kFluidsOceanSurfLoc"))
		-annotation (getRunTimeCommandAnnotation("AddOceanSurfaceLocator"))
		-image "fluidaddOceanLocator.png"
		-command "AddOceanSurfaceLocator";

		menuItem -label (uiRes("m_DynFluidsMenu.kFluidsDynamicBoat"))
		-annotation (getRunTimeCommandAnnotation("AddBoatLocator"))
		-command "AddBoatLocator"
		-dragMenuCommand "performOceanLocator 2 3"
		-dragDoubleClickCommand "AddBoatLocatorOptions"
		DynLocatorBoat;
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("AddBoatLocatorOptions"))
			-command "AddBoatLocatorOptions"
			DynLocatorBoatOption;

	menuItem -label (uiRes("m_DynFluidsMenu.kFluidsDynamicSimple"))
		-annotation (getRunTimeCommandAnnotation("AddOceanDynamicLocator"))
		-command "AddOceanDynamicLocator"
		-dragMenuCommand "performOceanLocator 2 1"
		-dragDoubleClickCommand "AddOceanDynamicLocatorOptions"
		DynLocatorSimple;
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("AddOceanDynamicLocatorOptions"))
			-command "AddOceanDynamicLocatorOptions"
			DynLocatorSimpleOPtion;

	menuItem -label (uiRes("m_DynFluidsMenu.kFluidsDynamicSurface"))
		-annotation (getRunTimeCommandAnnotation("AddDynamicBuoy"))
		-command "AddDynamicBuoy"
		-dragMenuCommand "performOceanLocator 2 2"
		-dragDoubleClickCommand "AddDynamicBuoyOptions"
		DynLocatorDynSurface;
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("AddDynamicBuoyOptions"))
			-command "AddDynamicBuoyOptions"
			DynLocatorDynSurfaceOption;
}

global proc FluidsOceanCreateBoat()
{
	menuItem -label (uiRes("m_DynFluidsMenu.kFluidsFloatSelObj"))
		-annotation (getRunTimeCommandAnnotation("FloatSelectedObjects"))
		-command "FloatSelectedObjects"
		-dragMenuCommand "performOceanLocator 2 4"
		-dragDoubleClickCommand "FloatSelectedObjectsOptions";
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("FloatSelectedObjectsOptions"))
			-command "FloatSelectedObjectsOptions";
			
	menuItem -label (uiRes("m_DynFluidsMenu.kFluMakeBoats"))
		-annotation (getRunTimeCommandAnnotation("MakeBoats"))
		-command "MakeBoats"
		-dragMenuCommand "performOceanLocator 2 5"
		-dragDoubleClickCommand "MakeBoatsOptions";
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("MakeBoatsOptions"))
			-command "MakeBoatsOptions";

	menuItem -label (uiRes("m_DynFluidsMenu.kFluMakeMotorBoats"))
		-annotation (getRunTimeCommandAnnotation("MakeMotorBoats"))
		-image "fluidOceanMotorBoats.png"
		-command "MakeMotorBoats"
		-dragMenuCommand "performOceanLocator 2 6"
		-dragDoubleClickCommand "MakeMotorBoatsOptions";
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("MakeMotorBoatsOptions"))
			-command "MakeMotorBoatsOptions";
}