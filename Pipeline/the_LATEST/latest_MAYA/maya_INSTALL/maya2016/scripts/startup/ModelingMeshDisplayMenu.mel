// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  17 June 2014
//
//
//  Procedure Name:
//      ModelingMeshDisplayMenu
//
//  Description:
//		Create the MODELING->Mesh Display menu
//
//  Input Arguments:
//      Parent window that menu will be a part of.
//
//  Return Value:
//      None.
//

global proc ModelingMeshDisplayMenu (string $parent)
//
// Description:
//		Modeling Mesh Display menu
//
{
	if (! `isTrue "PolygonsExists"`) return;
	
	setParent -m $parent; 


	if (`menu -q -ni $parent` != 0) {
		//
		//	Menu is built already, just refresh it. 
		//
        refreshPolygonsColorMenu($parent);
		return;
	}
	else{
		source "PolygonsColorMenu.mel"; // There are some useful procdures which will be used here. 
		menuItem -divider true -dividerLabel (uiRes("m_ModelingMeshDisplayMenu.kNormalsDivider"));
			menuItem
				-label (uiRes("m_ModelingMeshDisplayMenu.kNewAverageNormals"))
				-annotation (getRunTimeCommandAnnotation("AveragePolygonNormals"))
				-image "polyNormalAverage.png"
				-command "AveragePolygonNormals"
				-dragMenuCommand "performPolyAverageNormal 2"
				-dragDoubleClickCommand "AveragePolygonNormalsOptions"
				;

			menuItem -optionBox true
				-image "polyNormalAverage.png"
				-annotation (getRunTimeCommandAnnotation("AveragePolygonNormalsOptions"))
				-command "AveragePolygonNormalsOptions"
				;

			menuItem
				-label (uiRes("m_ModelingMeshDisplayMenu.kNewConform"))
				-annotation (getRunTimeCommandAnnotation("ConformPolygonNormals"))
				-image "polyNormalsConform.png"
				-command "ConformPolygonNormals"
				;

			menuItem
				-label (uiRes("m_ModelingMeshDisplayMenu.kNewReverse"))
				-annotation (getRunTimeCommandAnnotation("ReversePolygonNormals"))
				-image "polyNormal.png" 
				-command "ReversePolygonNormals"
				-dragDoubleClickCommand "ReversePolygonNormalsOptions"
				;

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("ReversePolygonNormalsOptions"))
				-image "polyNormal.png"
				-command "ReversePolygonNormalsOptions"
				;

			menuItem
				-label (uiRes("m_ModelingMeshDisplayMenu.kNewSetNormalAngle"))
				-annotation (getRunTimeCommandAnnotation("PolygonSoftenHarden"))
				-image "polyNormalSetAngle.png"
				-command "polySoftEdgeWin" 
				;

			menuItem
				-label (uiRes("m_ModelingMeshDisplayMenu.kNewSetToFace"))
				-annotation (getRunTimeCommandAnnotation("SetToFaceNormals"))
				-image "polyNormalSetToFace.png"
				-command "SetToFaceNormals"
				-dragMenuCommand "performPolySetToFaceNormal 2"
				-dragDoubleClickCommand "SetToFaceNormalsOptions"
				;

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("SetToFaceNormalsOptions"))
				-image "polyNormalSetToFace.png"
				-command "SetToFaceNormalsOptions"
				;

			menuItem
					-label (uiRes("m_ModelingMeshDisplayMenu.kSetVertexNormal"))
					-annotation (getRunTimeCommandAnnotation("SetVertexNormal"))
					-image "polySetVertexNormal.png"
					-command "SetVertexNormal" 
					-dragMenuCommand "performPolySetNormal 2"
					-dragDoubleClickCommand "SetVertexNormalOptions"
					;

			menuItem -optionBox true 
					-annotation (getRunTimeCommandAnnotation("SetVertexNormalOptions"))
					-image "polySetVertexNormal.png"
					-command "SetVertexNormalOptions"
					;			

			menuItem -divider true -longDivider false;

			menuItem
				-label (uiRes("m_ModelingMeshDisplayMenu.kNewHardenEdge"))
				-annotation (getRunTimeCommandAnnotation("PolygonSoftenHarden"))
				-image "polyHardEdge.png"
				-command "SoftPolyEdgeElements 0"
				;

			menuItem
				-label (uiRes("m_ModelingMeshDisplayMenu.kNewSoftenEdge"))
				-annotation (getRunTimeCommandAnnotation("PolygonSoftenHarden"))
				-image "polySoftEdge.png"
				-command "SoftPolyEdgeElements 1" 
				;

			menuItem -divider true -longDivider false;
			
			menuItem 
					-label (uiRes("m_ModelingMeshDisplayMenu.kNewLockNormal"))
					-annotation (uiRes("m_ModelingMeshDisplayMenu.kNewLockNormalAnnot"))
					-image "polyNormalLock.png"
					-command "polyNormalPerVertex -fn true"
					;

			menuItem 
					-label (uiRes("m_ModelingMeshDisplayMenu.kNewUnlockNormal"))
					-annotation (uiRes("m_ModelingMeshDisplayMenu.kNewUnlockNormalAnnot"))
					-image "polyNormalUnlock.png"
					-command "polyNormalPerVertex -ufn true"
					;

			menuItem -divider true -longDivider false;

			menuItem 
					-label (uiRes("m_ModelingMeshDisplayMenu.kNewVertexNormalEditTool"))
					-annotation (uiRes("m_ModelingMeshDisplayMenu.kNewVertexNormalEditToolAnnot"))
					-image "vertexNormalEdit.png"
					-command "PolygonNormalEditTool"
					;

			menuItem -optionBox true
					-label (uiRes("m_ModelingMeshDisplayMenu.kNewVertexNormalEditBoxOptions"))
					-annotation (uiRes("m_ModelingMeshDisplayMenu.kNewVertexNormalEditOptionsAnnot"))
					-image "vertexNormalEdit.png" 
					-command "PolygonNormalEditTool; toolPropertyWindow"
					;
					
		menuItem -divider true -dividerLabel (uiRes("m_ModelingMeshDisplayMenu.kVertexColorsDivider"));	
			
			menuItem
				-label (uiRes("m_ModelingMeshDisplayMenu.kPolyColorApply"))
				-annotation (getRunTimeCommandAnnotation("PolygonApplyColor"))
				-image "polyApplyColor.png"
				-command "PolygonApplyColor"
				-dragMenuCommand "performApplyColor 2"
				-dragDoubleClickCommand "PolygonApplyColorOptions"
				;

			menuItem -optionBox true 
				-annotation (getRunTimeCommandAnnotation("PolygonApplyColorOptions"))
				-image "polyApplyColor.png"
				-command "PolygonApplyColorOptions"
				;

			menuItem
				-label (uiRes("m_ModelingMeshDisplayMenu.kPolyColorPtVtxTool"))
				-annotation (getRunTimeCommandAnnotation("PaintVertexColorTool"))
				-image "paintVertexColour.png"
				-command "PaintVertexColorTool"
				-dragDoubleClickCommand "PaintVertexColorToolOptions"
				;

			menuItem -optionBox true
				-annotation (getRunTimeCommandAnnotation("PaintVertexColorToolOptions"))
				-image "paintVertexColour.png"
				-command "PaintVertexColorToolOptions"
				;

		menuItem -divider true -dividerLabel (uiRes("m_ModelingMeshDisplayMenu.kVertexColorSetsDivider"));	
			
			menuItem 
				-label (uiRes("m_ModelingMeshDisplayMenu.kPolyColorCreateEmptySet")) 
				-enableCommandRepeat true
				-annotation (uiRes("m_ModelingMeshDisplayMenu.kPolyColorCreateEmptySetAnnot"))
				-image "polyColorSetCreateEmpty.png"
				-command "createEmptyColorSet 0"
				-dragMenuCommand "createEmptyColorSet 0"
				-dragDoubleClickCommand "createEmptyColorSet 1"
				;

			menuItem -optionBox true
				-label (uiRes("m_ModelingMeshDisplayMenu.kPolyColorCreateEmptySetOption"))
				-image "polyColorSetCreateEmpty.png"
				-command "createEmptyColorSet 1";

			menuItem 
				-label (uiRes("m_ModelingMeshDisplayMenu.kPolyColorDeleteCurSet")) 
				-enableCommandRepeat true
				-enable true
				-annotation (uiRes("m_ModelingMeshDisplayMenu.kPolyColorDeleteCurSetAnnot"))
				-image "polyColorSetDelete.png"
				-command "colorSetEditCmd delete none"
				;

			menuItem 
				-label (uiRes("m_ModelingMeshDisplayMenu.kPolyColorRenameCurSet")) 
				-enableCommandRepeat true
				-enable true
				-annotation (uiRes("m_ModelingMeshDisplayMenu.kPolyColorRenameCurSetAnnot"))
				-image "polyColorSetRename.png"
				-command  "colorSetEditCmd rename none"
				;

			menuItem 
				-label (uiRes("m_ModelingMeshDisplayMenu.kPolyColorModifyCurSet")) 
				-enableCommandRepeat true
				-enable true
				-annotation (uiRes("m_ModelingMeshDisplayMenu.kPolyColorModifyCurSetAnnot"))
				-image "polyColorSetModify.png"
				-command  "colorSetEditCmd modify none"
				;

			menuItem -divider true -longDivider false;

			menuItem
				-label (uiRes("m_ModelingMeshDisplayMenu.kPolyColorSetKeyframeForVertexColor"))
				-annotation (uiRes("m_ModelingMeshDisplayMenu.kPolyColorSetVtxKeyAnnot"))
				-image "polyColorSetKeyframe.png"
				-command "setPolyColorKeyframe"
				;

			menuItem -divider true -longDivider false;

			menuItem 
				-label (uiRes("m_ModelingMeshDisplayMenu.kPolyColorSetEditor")) 
				-enableCommandRepeat true
				-enable true
				-annotation (uiRes("m_ModelingMeshDisplayMenu.kPolyColorSetEditorAnnot"))
				-image "polyColorSetEditor.png"
				-command "colorSetEditor"
				;

		menuItem -divider true -dividerLabel (uiRes("m_ModelingMeshDisplayMenu.kVertexBakeSetsDivider"));	
			
			menuItem
				-label (uiRes("m_ModelingMeshDisplayMenu.kPolyColorPrelight"))
				-annotation (uiRes("m_ModelingMeshDisplayMenu.kPolyColorPrelightAnnot"))
				-image "polyPrelight.png"
				-command ("performPrelight " + 0)
				-dragMenuCommand ("performPrelight " + 2)
				-dragDoubleClickCommand ("performPrelight " + 1)
				PolygonBakingMenuItemsAnchorPoint
				;

			menuItem -optionBox true 
				-annotation (uiRes("m_ModelingMeshDisplayMenu.kPolyColorPrelightOptAnnot"))
				-image "polyPrelight.png"
				-command ("performPrelight " + 1)
				PolyColorPrelightOpt
				;

			string $type = "vertexBakeSet";
			string $item = "";

			$type = "vertexBakeSet";
			menuItem 
				-label (uiRes("m_ModelingMeshDisplayMenu.kPolyNewVertexBakeSet")) 
				-annotation 
					(uiRes("m_ModelingMeshDisplayMenu.kPolyNewCreateANew2"))
				-image "polyBakeSetNew.png"
				-command 
					("createAndAssignBakeSet "
						+ $type 
						+ " \""
						+ $item
						+ "\"")
				vertexBakeSetItem;


			// Second menu assigns from existing bake sets. 
			//
			string $menuAssign = 
				`menuItem -label (uiRes("m_ModelingMeshDisplayMenu.kPolyNewExistingBakeSet"))  
					-subMenu true 
					-image "polyBakeSetAssign.png"
					-allowOptionBoxes true 
					assignExistingVertexBakeSetItem`;
			menuItem 
				-edit 
				-postMenuCommand 
					("polyBuildAssignBakingMenu "
						+ $menuAssign 
						+ " \""
						+ $item 
						+ "\"")
				assignExistingVertexBakeSetItem;


			setParent -menu ..;

			menuItem -label (uiRes("m_ModelingMeshDisplayMenu.kPolyEditExistingBakeSet"))
				-annotation (uiRes("m_ModelingMeshDisplayMenu.kPolyEditExistingBakeSetAnnot"))
				-image "polyBakeSetEdit.png"
				-command "polyOpenBakeSetAE";

		menuItem -divider true -dividerLabel (uiRes("m_ModelingMeshDisplayMenu.kDisplayAttributesDivider"));	

			menuItem 
				-label (uiRes("m_ModelingMeshDisplayMenu.kPolyToggleDisplayColorsAttribute"))
				-annotation (uiRes("m_ModelingMeshDisplayMenu.kPolyToggleDisplayColorsAttributeModeAnnot"))
				-image "polyToggleDisplayColor.png"
				-command "toggleShadeMode"
				dispColorShadeMode
				;

			menuItem 
				-label (uiRes("m_ModelingMeshDisplayMenu.kNewPolyColorMaterial"))  
				-subMenu 1 
				-tearOff 1
				;
			{

				menuItem -label (uiRes("m_ModelingMeshDisplayMenu.kPolyNone")) 
										-image "polyColorMaterialNone.png"
										-command ("polyChangeColorMatChannel " + 0) materialNoneMenuItem;
				menuItem -label (uiRes("m_ModelingMeshDisplayMenu.kPolyAmbient")) 
										-image "polyColorMaterialAmbient.png"
										-command ("polyChangeColorMatChannel " + 1) materialAmbientMenuItem;
				menuItem -label (uiRes("m_ModelingMeshDisplayMenu.kPolyAmbientDiffuse")) 
										-image "polyColorMaterialAmbientDiffuse.png"
										-command ("polyChangeColorMatChannel " + 2) materialAmbDiffMenuItem;
				menuItem -label (uiRes("m_ModelingMeshDisplayMenu.kPolyDiffuse")) 
										-image "polyColorMaterialDiffuse.png"
										-command ("polyChangeColorMatChannel " + 3) materialDiffuseMenuItem;
				menuItem -label (uiRes("m_ModelingMeshDisplayMenu.kPolySpecular"))  
										-image "polyColorMaterialSpecular.png"
										-command ("polyChangeColorMatChannel " + 4) materialSpecularMenuItem;
				menuItem -label (uiRes("m_ModelingMeshDisplayMenu.kPolyEmission"))  
										-image "polyColorMaterialEmission.png"
										-command ("polyChangeColorMatChannel " + 5) materialEmissionMenuItem;

				setParent -menu ..;
			}


			menuItem 
				-label (uiRes("m_ModelingMeshDisplayMenu.kNewPolyMaterialBlend")) 
				-subMenu 1 
				-tearOff 1
				;
			{
				menuItem -label (uiRes("m_ModelingMeshDisplayMenu.kPolyOverwrite")) 
										-image "polyMaterialBlendOverwrite.png"
										-command ("polyChangeMaterialBlend " + 0) blendOverwriteItem;
				menuItem -label (uiRes("m_ModelingMeshDisplayMenu.kPolyAdd"))
										-image "polyMaterialBlendAdd.png"
										-command ("polyChangeMaterialBlend " + 1) blendAddMenuItem;
				menuItem -label (uiRes("m_ModelingMeshDisplayMenu.kPolySubtract"))
										-image "polyMaterialBlendSubtract.png"
										-command ("polyChangeMaterialBlend " + 2) blendSubractItem;
				menuItem -label (uiRes("m_ModelingMeshDisplayMenu.kPolyMultiply"))
										-image "polyMaterialBlendMultiply.png"
										-command ("polyChangeMaterialBlend " + 3) blendMultiplyItem;
				menuItem -label (uiRes("m_ModelingMeshDisplayMenu.kPolyDivide"))
										-image "polyMaterialBlendDivide.png"
										-command ("polyChangeMaterialBlend " + 4) blendDivideItem;
				menuItem -label (uiRes("m_ModelingMeshDisplayMenu.kPolyAverage")) 
										-image "polyMaterialBlendAverage.png"
										-command ("polyChangeMaterialBlend " + 5) blendAverageItem;
				menuItem -label (uiRes("m_ModelingMeshDisplayMenu.kPolyModulate2x"))
										-image "polyMaterialBlendModx2.png"
										-command ("polyChangeMaterialBlend " + 6) blendModulateItem;

				setParent -menu ..;
			}

			menuItem 
				-label (uiRes("m_ModelingMeshDisplayMenu.kPolyColorsPerInstance"))
				-subMenu true -to true
				-allowOptionBoxes true;
	
				menuItem
					-label (uiRes("m_ModelingMeshDisplayMenu.kPolyColorSelectShared"))
					-annotation (getRunTimeCommandAnnotation("SelectSharedColorInstances"))
					-image "polyColorInstancesSelect.png"
					-command "SelectSharedColorInstances";
	
				menuItem
					-label (uiRes("m_ModelingMeshDisplayMenu.kPolyColorShareInstances"))
					-annotation (getRunTimeCommandAnnotation("ShareColorInstances"))
					-image "polyColorInstancesShare.png"
					-command "ShareColorInstances";
	
			setParent -menu ..;
		setParent -m ..;
		refreshPolygonsColorMenu $parent;
	}

}







