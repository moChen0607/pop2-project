// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//
//  Procedure Name:
//      buildSelectMenu
//
//  Description:
//		Builds all the items in the Select menu when
//		the user clicks on the menu.  Checks to see if
//		there are any children in the menu already, and
//		if so, doesn't rebuild the menu.
//
//  Input Arguments:
//      Name of the parent menu.
//
//  Return Value:
//      None.
//


global proc buildSelectMenu( string $parent )
{
    string $menu;
	setParent -menu $parent;

	if( `menu -q -ni $parent` != 0 ) {
		//
		//	Menu is already built - just return
		//
		return;
	}

	int $completeLicense = `licenseCheck -mode edit -type complete`;

	menuItem -label (uiRes("m_buildSelectMenu.kSelectAll"))
		-version "2014"
		-annotation (uiRes("m_buildSelectMenu.kSelectAllAnnot"))
		-command ("SelectAll") selectAllItem;

	//	Select all by type sub-menu.
	//
	global string $gEditSelectAllByTypeSubMenu;
	$gEditSelectAllByTypeSubMenu = `menuItem
		-label (uiRes("m_buildSelectMenu.kSelectAllByType"))
		-subMenu true -to true selAllHierItem`;

		menuItem -ltVersion "2015" -label (uiRes("m_buildSelectMenu.kSelectAllIKHandles"))
			-annotation (uiRes("m_buildSelectMenu.kSelectAllIKHandlesAnnot"))
			-command ("SelectAllIKHandles")
			selIKHanItem;

		menuItem -label (uiRes("m_buildSelectMenu.kSelectAllJoints"))
			-annotation (uiRes("m_buildSelectMenu.kSelectAllJointsAnnot"))
			-command ("SelectAllJoints")
			selJointsItem;

		menuItem -divider true;

		if ($completeLicense) {
			menuItem -label (uiRes("m_buildSelectMenu.kSelectAllClusters"))
				-ltVersion 2016
				-annotation (uiRes("m_buildSelectMenu.kSelectAllClustersAnnot"))
				-command ("SelectAllClusters");
		}

		menuItem -label (uiRes("m_buildSelectMenu.kSelectAllLattices"))
			-annotation (uiRes("m_buildSelectMenu.kSelectAllLatticesAnnot"))
			-command ("SelectAllLattices");

		if ($completeLicense) {
			menuItem -label (uiRes("m_buildSelectMenu.kSelectAllSculptObjects"))
				-annotation (uiRes("m_buildSelectMenu.kSelectAllSculptObjectsAnnot"))
				-command ("SelectAllSculptObjects");

			menuItem -label (uiRes("m_buildSelectMenu.kSelectAllWires"))
				-annotation (uiRes("m_buildSelectMenu.kSelectAllWiresAnnot"))
				-command ("SelectAllWires");
		}

		menuItem -divider true;

		menuItem -label (uiRes("m_buildSelectMenu.kSelectAllTransforms"))
			-annotation (uiRes("m_buildSelectMenu.kSelectAllTransformsAnnot"))
			-command ("SelectAllTransforms") 
			selDAGItem;

		menuItem -label (uiRes("m_buildSelectMenu.kSelectAllGeometry"))
			-annotation (uiRes("m_buildSelectMenu.kSelectAllGeometryAnnot"))
			-command ("SelectAllGeometry") 
			selGeomItem;

		menuItem -label (uiRes("m_buildSelectMenu.kSelectAllNurbsCurves"))
			-annotation (uiRes("m_buildSelectMenu.kSelectAllNurbsCurvesAnnot"))
			-command ("SelectAllNURBSCurves")
			selNurbsCurveItem;

		menuItem -label (uiRes("m_buildSelectMenu.kSelectAllNurbsSurfaces"))
			-annotation (uiRes("m_buildSelectMenu.kSelectAllNurbsSurfacesAnnot"))
			-command ("SelectAllNURBSSurfaces")
			selNurbsSurfaceItem;

		menuItem -label (uiRes("m_buildSelectMenu.kSelectAllPolygons"))
			-annotation (uiRes("m_buildSelectMenu.kSelectAllPolygonsAnnot"))
			-command ("SelectAllPolygonGeometry")
			selPolysItem;

		menuItem -divider true;

		menuItem -label (uiRes("m_buildSelectMenu.kSelectAllCameras"))
			-annotation (uiRes("m_buildSelectMenu.kSelectAllCamerasAnnot"))
			-command ("SelectAllCameras")
			selCamerasItem;

		menuItem -label (uiRes("m_buildSelectMenu.kSelectAllLights"))
			-annotation (uiRes("m_buildSelectMenu.kSelectAllLightsAnnot"))
			-command ("SelectAllLights")
			selLightsItem;

		menuItem -label (uiRes("m_buildSelectMenu.kSelectAllImagePlanes"))
			-annotation (uiRes("m_buildSelectMenu.kSelectAllImagePlanesAnnot"))
			-command ("SelectAllImagePlanes");

		menuItem -divider true;

		menuItem -label (uiRes("m_buildSelectMenu.kSelectAllAssets"))
			-annotation (getRunTimeCommandAnnotation("SelectAllAssets"))
			-command ("SelectAllAssets")
			selContainersItem;

		menuItem -divider true;

		if( fluidEditLicenseFound() ) {
			menuItem -label (uiRes("m_buildSelectMenu.kSelectAllFluids"))
				-annotation (uiRes("m_buildSelectMenu.kSelectAllFluidsAnnot"))
				-command ("SelectAllFluids")
				selFluidsItem;
		}

		if( `licenseCheck -m edit -type complete` == 1 ) {
			menuItem -label (uiRes("m_buildSelectMenu.kSelectAllParticles"))
				-annotation (uiRes("m_buildSelectMenu.kSelectAllParticlesAnnot"))
				-command ("SelectAllParticles")
				selParticlesItem;

			menuItem -label (uiRes("m_buildSelectMenu.kSelectAllRigidBodies"))
				-annotation (uiRes("m_buildSelectMenu.kSelectAllRigidBodiesAnnot"))
				-command ("SelectAllRigidBodies")
				selRigidBodiesItem;

			menuItem -label (uiRes("m_buildSelectMenu.kSelectAllRigidConstraints"))
				-annotation (uiRes("m_buildSelectMenu.kSelectAllRigidConstraintsAnnot"))
				-command ("SelectAllRigidConstraints")
				selRigidConstraintsItem;
		}

		if(`isTrue "MayaCreatorExists"` && (`licenseCheck -m "edit" -typ "particlePaint"`)) {
			menuItem -divider true;

			menuItem -label (uiRes("m_buildSelectMenu.kSelectAllBrushes"))
				-annotation (uiRes("m_buildSelectMenu.kSelectAllBrushesAnnot"))
				-command ("SelectAllBrushes")
				selAllBrushesItem;

			menuItem -label (uiRes("m_buildSelectMenu.kSelectAllStrokes"))
				-annotation (uiRes("m_buildSelectMenu.kSelectAllStrokesAnnot"))
				-command ("SelectAllStrokes")
				selAllStrokesItem;
		}

		if( nClothEditLicenseFound() ) {
			menuItem -divider true;

			menuItem -label (uiRes("m_buildSelectMenu.kSelectAllDynamicConstraints"))
				-annotation (uiRes("m_buildSelectMenu.kSelectAllDynamicConstraintsAnnot"))
				-command ("SelectAllDynamicConstraints")
				selDynamicConstraintsItem;

			menuItem -label (uiRes("m_buildSelectMenu.kSelectAllFollicles"))
				-annotation (uiRes("m_buildSelectMenu.kSelectAllFolliclesAnnot"))
				-command ("SelectAllFollicles")
				selFolliclesItem;

			menuItem -label (uiRes("m_buildSelectMenu.kSelectAllNCloths"))
				-annotation (uiRes("m_buildSelectMenu.kSelectAllNClothsAnnot"))
				-command ("SelectAllNCloths")
				selNClothsItem;

			menuItem -label (uiRes("m_buildSelectMenu.kSelectAllNParticles"))
				-annotation (uiRes("m_buildSelectMenu.kSelectAllNParticlesAnnot"))
				-command ("SelectAllNParticles")
				selNParticlesItem;

			menuItem -label (uiRes("m_buildSelectMenu.kSelectAllNRigids"))
				-annotation (uiRes("m_buildSelectMenu.kSelectAllNRigidsAnnot"))
				-command ("SelectAllNRigids")
				selNRigidsItem;
		}
		setParent -menu ..;

	// END SELECT BY TYPE SUB MENU

	menuItem -label (uiRes("m_buildSelectMenu.kDeselect"))
		-annotation (uiRes("m_buildSelectMenu.kDeselectAnnot"))
		-command ("SelectNone")
		deselectItem;

	menuItem -label (uiRes("m_buildSelectMenu.kSelectHierarchy"))
		-annotation (uiRes("m_buildSelectMenu.kSelectHierarchyAnnot"))
		-command ("SelectHierarchy");

	menuItem -label (uiRes("m_buildSelectMenu.kSelectInverse"))
		-annotation (uiRes("m_buildSelectMenu.kInvertSelectionAnnot"))
		-command ("InvertSelection") invertSelectionItem;

	menuItem -label (uiRes("m_buildSelectMenu.kSelectSimilar"))
		-annotation (uiRes("m_buildSelectMenu.kSelectSimilarAnnot"))
		-image "selectSimilar.png"
		-version "2014"
		-command ("SelectSimilar") selectSimilarItem;
		menuItem -optionBox true 
			-annotation (getRunTimeCommandAnnotation("SelectSimilarOptions"))
			-command ("SelectSimilarOptions")
			selectSimilarOptItem;

	menuItem -divider true -longDivider false;

	string $cmd = "GrowPolygonSelectionRegion";
	menuItem
		-label (uiRes("m_buildSelectMenu.kSelectGrow"))
		-annotation (getRunTimeCommandAnnotation($cmd))
		-image "polyGrowSelection.png"
		-command $cmd
		-dragMenuCommand "polygonsMenuItemToShelf \"polySelectConstraint -pp 1\""
		;

	$cmd = "ShrinkPolygonSelectionRegion";
	menuItem
		-label (uiRes("m_buildSelectMenu.kSelectShrink"))
		-annotation (getRunTimeCommandAnnotation($cmd))
		-image "polyShrinkSelection.png"
		-command $cmd
		-dragMenuCommand "polygonsMenuItemToShelf \"polySelectConstraint -pp 2\""
		;

	menuItem -divider true -longDivider false;

	//	Quick Select Sets sub-menu.
	//
	$menu = `menuItem -ltVersion 2016
		-label (uiRes("m_buildSelectMenu.kSelectQuickSelectSets"))
		-sm true selectCharItem`;
		menuItem -e -pmc ( "createCharacterMenu " + $menu ) $menu;
	setParent -menu ..;

	menuItem -divider true -dividerLabel (uiRes("m_buildSelectMenu.kSelectType"));

	$cmd = "SelectToggleMode";
	menuItem -label (uiRes("m_buildSelectMenu.kSelectObjectComponent")) -ecr true
		-i "polyObjectComponent.png" 
		-annotation (getRunTimeCommandAnnotation($cmd))
		-c $cmd;

	menuItem -divider true -dividerLabel (uiRes("m_buildSelectMenu.kSelectPolygons"));

	menuItem -label (uiRes("m_buildSelectMenu.kSelectPolyComponents")) -sm true -tearOff true;
		$cmd = "SelectMultiComponentMask";
		menuItem -version "2014" -label (uiRes("m_buildSelectMenu.kNewPolySelectMultiComponent")) -ecr true
			-enable `pluginInfo -q -loaded "modelingToolkit"`
			-annotation (getRunTimeCommandAnnotation($cmd))
			-c $cmd polySelectMultiComponentItem;
			
		menuItem -divider true;

		$cmd = "SelectVertexMask";
		menuItem -label (uiRes("m_buildSelectMenu.kSelectPolyVertices")) -ecr true
			-i "polySelectVertex.png" 
			-annotation (getRunTimeCommandAnnotation($cmd))
			-c $cmd;

		$cmd = "SelectEdgeMask";
		menuItem -label (uiRes("m_buildSelectMenu.kSelectPolyEdge")) -ecr true
			-i "polySelectEdge.png" 
			-annotation (getRunTimeCommandAnnotation($cmd))
			-c $cmd;

		$cmd = "SelectFacetMask";
		menuItem -label (uiRes("m_buildSelectMenu.kSelectPolyFace")) -ecr true
			-i "polySelectFace.png" 
			-annotation (getRunTimeCommandAnnotation($cmd))
			-c $cmd;

		$cmd = "SelectVertexFaceMask";
		menuItem -label (uiRes("m_buildSelectMenu.kSelectPolyVtxFaces")) -ecr true
			-i "polySelectVertexFace.png" 
			-annotation (getRunTimeCommandAnnotation($cmd))
			-c $cmd;

		$cmd = "SelectUVMask";
		menuItem -label (uiRes("m_buildSelectMenu.kSelectPolyUVs")) -ecr true
			-i "polySelectUV.png" 
			-annotation (getRunTimeCommandAnnotation($cmd))
			-c $cmd;

		menuItem -label (uiRes("m_buildSelectMenu.kSelectMeshUVShell")) 
			-c ("SelectMeshUVShell")
			-annotation (getRunTimeCommandAnnotation ("SelectMeshUVShell"))
			;

		setParent -m ..;

	menuItem -divider true -longDivider false;

	$cmd = "SelectContiguousEdges";
	menuItem
		-label (uiRes("m_buildSelectMenu.kSelectContiguousEdges"))
		-annotation (getRunTimeCommandAnnotation($cmd))
		-image "polyLoopEdge.png"
		-command $cmd
		;
		menuItem -optionBox true
			-annotation (getRunTimeCommandAnnotation("SelectContiguousEdgesOptions"))
			-image "polyLoopEdge.png"
			-command "SelectContiguousEdgesOptions"
			;
			
	$cmd = "SelectShortestEdgePathTool";
	menuItem -label (uiRes("m_buildSelectMenu.kSelectShortestEdgePathTool"))
		-image "selectEdgePath.png"
		-annotation (getRunTimeCommandAnnotation($cmd))
		-command ($cmd) 
		polySelectShortestPathItem
		;

	menuItem -divider true -longDivider false;

	menuItem -label (uiRes("m_buildSelectMenu.kSelectPolyConvertSelection")) -sm 1 -to 1;

		$cmd = "ConvertSelectionToVertices";
		menuItem
			-label (uiRes("m_buildSelectMenu.kSelectNewConvertToVertices"))
			-annotation (getRunTimeCommandAnnotation($cmd))
			-image "polyConvertToVertices.png"
			-command $cmd
			;

		$cmd = "ConvertSelectionToVertexFaces";
		menuItem
			-label (uiRes("m_buildSelectMenu.kSelectNewConvertToVertexFaces"))
			-annotation (getRunTimeCommandAnnotation($cmd))
			-image "polyConvertToVertexFaces.png"
			-command $cmd
			;

		$cmd = "ConvertSelectionToVertexPerimeter";
		menuItem
			-version "2015"
			-label (uiRes("m_buildSelectMenu.kSelectNewConvertToVertexPerimeter"))
			-annotation (getRunTimeCommandAnnotation($cmd))
			-image "polyConvertToShellBorder.png"
			-command $cmd
			;

		menuItem -divider true;

		$cmd = "ConvertSelectionToEdges";
		menuItem
			-label (uiRes("m_buildSelectMenu.kSelectNewConvertToEdges"))
			-annotation (getRunTimeCommandAnnotation($cmd))
			-image "polyConvertToEdge.png"
			-command $cmd
			;


		menuItem
			-label (uiRes("m_buildSelectMenu.kSelectNewConvertToEdgeLoop"))
			-command "SelectEdgeLoopSp" 
			-image "polyConvertToEdgeLoop.png"
			-annotation (getRunTimeCommandAnnotation ("SelectEdgeLoop"))
			;


		menuItem
			-label (uiRes("m_buildSelectMenu.kSelectNewConvertToEdgeRing"))
			-command "SelectEdgeRingSp" 
			-image "polyConvertToEdgeRing.png"
			-annotation (getRunTimeCommandAnnotation ("SelectEdgeRing"))
			;

		$cmd = "ConvertSelectionToContainedEdges";
		menuItem
			-label (uiRes("m_buildSelectMenu.kSelectNewConvertToContainedEdges"))
			-annotation (getRunTimeCommandAnnotation($cmd))
			-image "polyConvertToContainedEdges.png"
			-command $cmd
			;

		$cmd = "ConvertSelectionToEdgePerimeter";
		menuItem
			-version "2015"
			-label (uiRes("m_buildSelectMenu.kSelectNewConvertToEdgePerimeter"))
			-annotation (getRunTimeCommandAnnotation($cmd))
			-image "polyConvertToShellBorder.png"
			-command $cmd
			;

		menuItem -divider true;

		$cmd = "ConvertSelectionToFaces";
		menuItem
			-label (uiRes("m_buildSelectMenu.kSelectNewConvertToFaces"))
			-annotation (getRunTimeCommandAnnotation($cmd))
			-image "polyConvertToFace.png"
			-command $cmd
			;

		$cmd = "SelectFacePath";
		menuItem
			-label (uiRes("m_buildSelectMenu.kSelectNewConvertToFacePath"))
			-command $cmd  
			-image "polyConvertToFacePath.png"
			-annotation (getRunTimeCommandAnnotation ($cmd))
			;

		$cmd = "ConvertSelectionToContainedFaces";
		menuItem
			-label (uiRes("m_buildSelectMenu.kSelectNewConvertToContainedFaces"))
			-annotation (getRunTimeCommandAnnotation($cmd))
			-image "polyConvertToContainedFaces.png"
			-command $cmd
			;

		menuItem -divider true;

		$cmd = "ConvertSelectionToUVs";
		menuItem
			-label (uiRes("m_buildSelectMenu.kSelectNewConvertToUVs"))
			-annotation (getRunTimeCommandAnnotation($cmd))
			-image "polyConvertToUVs.png"
			-command $cmd
			;

		menuItem
			-label (uiRes("m_buildSelectMenu.kSelectNewConvertToUVShell"))
			-annotation (getRunTimeCommandAnnotation("ConvertSelectionToUVs"))
			-image "polyConvertToUVShell.png"
			-command "polySelectBorderShell 0"
			;

		menuItem
			-label (uiRes("m_buildSelectMenu.kSelectNewConvertToUVBorder"))
			-annotation (getRunTimeCommandAnnotation("ConvertSelectionToUVs"))
			-image "polyConvertToUVBorder.png"
			-command "polySelectBorderShell 1" 
			;

		$cmd = "ConvertSelectionToUVPerimeter";
		menuItem
			-version "2015"
			-label (uiRes("m_buildSelectMenu.kSelectNewConvertToUVPerimeter"))
			-annotation (getRunTimeCommandAnnotation($cmd))
			-image "polyConvertToShellBorder.png"
			-command $cmd
			;

		$cmd = "ConvertSelectionToUVEdgeLoop";
		menuItem
			-label (uiRes("m_buildSelectMenu.kSelectNewConvertToUVEdgeLoop"))
			-annotation (getRunTimeCommandAnnotation($cmd))
			-image "polyConvertToUVEdgeLoop.png"
			-command $cmd 
			;

		menuItem -divider true;

		menuItem
			-label (uiRes("m_buildSelectMenu.kSelectNewConvertToShell"))
			-annotation (getRunTimeCommandAnnotation("ConvertSelectionToShell"))
			-image "polyConvertToShell.png"
			-command "polyConvertToShell" 
			;
					
		menuItem
			-label (uiRes("m_buildSelectMenu.kSelectNewConvertToShellBorder"))
			-annotation (getRunTimeCommandAnnotation("ConvertSelectionToShellBorder"))
			-image "polyConvertToShellBorder.png"
			-command "polyConvertToShellBorder" 
			;

		setParent -m ..;

	$cmd = "PolygonSelectionConstraints";
	menuItem -label (uiRes("m_buildSelectMenu.kSelectNewConstraints"))
		-annotation (getRunTimeCommandAnnotation($cmd))
		-image "polySelectUsingConstraints.png"
		-command $cmd
		;

	menuItem -divider true -dividerLabel (uiRes("m_buildSelectMenu.kSelectNurbsCurves"));

	// NURBS Curves Component submenu
	//
	menuItem -label (uiRes("m_buildSelectMenu.kSelCrvComponent")) -sm true -to true;
		menuItem -label (uiRes("m_buildSelectMenu.kSelCurveCompCV"))
			-version "2016"
			-annotation (getRunTimeCommandAnnotation("SelectCVsMask"))
			-command "SelectCVsMask"
			;
		menuItem -label (uiRes("m_buildSelectMenu.kSelCrvCompCurvePoint"))
			-version "2016"
			-annotation (getRunTimeCommandAnnotation("SelectSurfacePointsMask"))
			-command "SelectSurfacePointsMask"
			;
		menuItem -label (uiRes("m_buildSelectMenu.kSelCrvCompEditPoint"))
			-version "2016"
			-annotation (getRunTimeCommandAnnotation("SelectPointsMask"))
			-command "SelectPointsMask"
			;
		menuItem -label (uiRes("m_buildSelectMenu.kSelCrvCompHull"))
			-version "2016"
			-annotation (getRunTimeCommandAnnotation("SelectHullsMask"))
			-command "SelectHullsMask"
			;
		setParent -m ..;

	menuItem -divider true -longDivider false;

	menuItem
		-label (uiRes("m_buildSelectMenu.kSelectCrvCVsLabel")) 
		-annotation (getRunTimeCommandAnnotation ("SelectCurveCVsAll"))
		-image "selectCVs.png"
		-command "SelectCurveCVsAll"
		allCurveCVsItem;

	menuItem
		-label (uiRes("m_buildSelectMenu.kSelectCrvCVsFirstLabel")) 
		-annotation (getRunTimeCommandAnnotation ("SelectCurveCVsFirst"))
		-image "selectFirstCV.png"
		-command "SelectCurveCVsFirst"
		firstCurveCVsItem;

	menuItem
		-label (uiRes("m_buildSelectMenu.kSelectCrvCVsLastLabel")) 
		-annotation (getRunTimeCommandAnnotation ("SelectCurveCVsLast"))
		-image "selectLastCV.png"
		-command "SelectCurveCVsLast"
		lastCurveCVsItem;

	menuItem -divider true;
	
	menuItem
		-label (uiRes("m_buildSelectMenu.kClusterCrvLabel")) 
		-annotation (getRunTimeCommandAnnotation ("ClusterCurve"))
		-image "selectCluster.png"
		-command "ClusterCurve"
		clusterCurveItem;

	menuItem -divider true -dividerLabel (uiRes("m_buildSelectMenu.kSelectNurbsSurfaces"));
		
	// NURBS Surfaces Component submenu
	//
	menuItem -label (uiRes("m_buildSelectMenu.kSelSurfaceComponent")) -sm true -to true;
		menuItem -label (uiRes("m_buildSelectMenu.kSelSurfCompCV"))
			-version "2016"
			-annotation (getRunTimeCommandAnnotation("SelectCVsMask"))
			-command "SelectCVsMask"
			;
		menuItem -label (uiRes("m_buildSelectMenu.kSelSurfCompHull"))
			-version "2016"
			-annotation (getRunTimeCommandAnnotation("SelectHullsMask"))
			-command "SelectHullsMask"
			;
		menuItem -label (uiRes("m_buildSelectMenu.kSelSurfCompIsoparm"))
			-version "2016"
			-annotation (getRunTimeCommandAnnotation("SelectLinesMask"))
			-command "SelectLinesMask"
			;
		menuItem -label (uiRes("m_buildSelectMenu.kSelSurfCompSurfacePoint"))
			-version "2016"
			-annotation (getRunTimeCommandAnnotation("SelectSurfacePointsMask"))
			-command "SelectSurfacePointsMask"
			;
		setParent -m ..;

	menuItem -divider true -longDivider false;

	menuItem -label (uiRes("m_buildSelectMenu.kSelectSurfCVSelectionBoundary")) 
		-annotation (uiRes("m_buildSelectMenu.kSelectCVSelectionBoundaryAnnot")) 
		-i "selectCVboundary.png"
		-c "nurbsSelect -bs";

	menuItem -label (uiRes("m_buildSelectMenu.kSelectSurfaceBorder")) 
		-annotation (uiRes("m_buildSelectMenu.kSelectSurfaceBorderAnnot")) 
		-i "selectSurfaceBorder.png"
		-c "performSelectNurbsBorder 0";
		menuItem  -optionBox true
			-annotation (uiRes("m_buildSelectMenu.kSelectSurfaceBorderOptionsAnnot"))  -ecr false 
			-i "selectSurfaceBorder.png"
			-c "performSelectNurbsBorder 1" ;
}
