// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//  Creation Date:  April 1999
//
//  This routine contains the names of the plug-ins that contain
//  functionality that is a core part of Maya.  If those plug-in
//  are installed, we want to "autoload" them the first time this
//  release of Maya is started.
//
//  If customer's subsequently decide they don't want to have
//  those plug-ins autoloaded, they can disable the autoload via
//  Maya's plug-in manager.
//
//  This code is very specific to the installation setup of a
//  particular Maya release, you probably should not fiddle
//  with it without consulting the release engineering team first.

global proc initialPluginLoad()
{
	string $mayaPlugInPath = `getenv MAYA_PLUG_IN_PATH`;
	string $pluginAutoloadList[] = { };
	if (`getenv "MAYA_NO_INITIAL_AUTOLOAD_MT"` == "") {
		appendStringArray( $pluginAutoloadList, { "modelingToolkit" }, 1 );
	}

	// List of plug-ins introduced with 3.0
	if ( ! `optionVar -exists oneTimeUnlimitedPluginLoad30` ) {
		optionVar -iv oneTimeUnlimitedPluginLoad30 1;

		string $licenseType = `about -p`;

		// Do not erase pre 3.0 setup if there is
		// one. oneTimeUnlimitedPluginLoad was the optionvar used
		// then.
		if (! `optionVar -exists oneTimeUnlimitedPluginLoad` ) 
		{
			string $defaultPlugins[] = {
				"rotateHelper"
				, "ik2Bsolver"
			};
			$pluginAutoloadList = AWAppendStringsToStringArray (
									$defaultPlugins,
									$pluginAutoloadList);

			$licenseType = match("Unlimited", $licenseType);
			if ( $licenseType == "Unlimited" ) {
				string $UnlimitedPlugins[] = {
					"Fur"
				};
				$pluginAutoloadList = AWAppendStringsToStringArray (
					$UnlimitedPlugins, $pluginAutoloadList);
			}
		}

	}

	// List of plug-ins introduced with 5.0	
	if ( ! `optionVar -exists oneTimeDefaultPluginLoad50` ) {
		optionVar -iv oneTimeDefaultPluginLoad50 1;
	
		string $defaultPlugins[] = {
			"Mayatomr",
			"VectorRender"
		};

		$pluginAutoloadList = AWAppendStringsToStringArray (
							$defaultPlugins,
							$pluginAutoloadList);

	}

	// List of plug-ins introduced with 6.5.  Some are only
	// available on specific platforms.
	if ( ! `optionVar -exists oneTimeDefaultPluginLoad65` ) {
		optionVar -iv oneTimeDefaultPluginLoad65 1;
	
		string $defaultPlugins[] = {};
		
		string $defaultPluginsNT[] = {
			"DirectConnect",
			"fbxmaya"
		};

		string $defaultPluginsMac[] = {
			"DirectConnect",
			"fbxmaya"
		};

		string $defaultPluginsLinux[] = {
			"fbxmaya"
		};

		if (`about -nt`) {
			appendStringArray( $defaultPlugins, $defaultPluginsNT, size($defaultPluginsNT) );
		} else if (`about -mac`) {
			appendStringArray( $defaultPlugins, $defaultPluginsMac, size($defaultPluginsMac) );
		} else if (`about -linux`) {
			appendStringArray( $defaultPlugins, $defaultPluginsLinux, size($defaultPluginsLinux) );
		}

		if ( size($defaultPlugins) ) {
			$pluginAutoloadList = AWAppendStringsToStringArray (
									$defaultPlugins,
								$pluginAutoloadList);
		}
	}

	// List of plug-ins introduced with 7.0
	if ( ! `optionVar -exists oneTimeDefaultPluginLoad70` ) {
		optionVar -iv oneTimeDefaultPluginLoad70 1;
	
		string $defaultPlugins[] = {
			"ikSpringSolver"
		};

		$pluginAutoloadList = AWAppendStringsToStringArray (
							$defaultPlugins,
							$pluginAutoloadList);
	}

	// List of plug-ins introduced with 2008 Extension 2
	if ( ! `optionVar -exists oneTimeDefaultPluginLoad2008Ext2` ) {
		optionVar -iv oneTimeDefaultPluginLoad2008Ext2 1;
	
		string $defaultPlugins[] = {
			"MayaMuscle"
		};

		$pluginAutoloadList = AWAppendStringsToStringArray (
							$defaultPlugins,
							$pluginAutoloadList);
	}
	
	// List of plug-ins introduced with 2011 
	if ( ! `optionVar -exists oneTimeDefaultPluginLoad2011` ) {
		optionVar -iv oneTimeDefaultPluginLoad2011 1;
	
		string $defaultPlugins[] = {
			"mayaHIK"
		};

		$pluginAutoloadList = AWAppendStringsToStringArray (
							$defaultPlugins,
							$pluginAutoloadList);
	}

	// List of plug-ins introduced with 2011 advantage pack
	if ( ! `optionVar -exists oneTimeDefaultPluginLoad2011AdvantagePack` ) {
		optionVar -iv oneTimeDefaultPluginLoad2011AdvantagePack 1;
	
		string $defaultPlugins[] = {
			"Substance"
		};

		$pluginAutoloadList = AWAppendStringsToStringArray (
							$defaultPlugins,
							$pluginAutoloadList);
	}

	// List of plug-ins introduced with 2012
	if ( ! `optionVar -exists oneTimeDefaultPluginLoad2012` ) {
		optionVar -iv oneTimeDefaultPluginLoad2012 1;
	
		string $defaultPlugins[] = {
			"mayaHIK", 
			"mayaCharacterization", // Depends on mayaHIK
			"OpenEXRLoader",
			"tiffFloatReader"
		};
        
            $defaultPlugins[size($defaultPlugins)] = "OneClick";            
        
            $pluginAutoloadList = AWAppendStringsToStringArray (
							$defaultPlugins,
							$pluginAutoloadList); 
	}

	// List of plug-ins introduced with 2013
	if ( ! `optionVar -exists oneTimeDefaultPluginLoad2013` ) {
		optionVar -iv oneTimeDefaultPluginLoad2013 1;
	
		string $defaultPlugins[] = {
			"AbcExport",
			"AbcImport",
			"gpuCache"
		};

        $defaultPlugins[size($defaultPlugins)] = "quatNodes";
        $defaultPlugins[size($defaultPlugins)] = "matrixNodes";

		$pluginAutoloadList = AWAppendStringsToStringArray (
							$defaultPlugins,
							$pluginAutoloadList);
	}

	// List of plug-ins introduced with 2013 Update
	if ( ! `optionVar -exists oneTimeDefaultPluginLoad2013Update` ) {
		optionVar -iv oneTimeDefaultPluginLoad2013Update 1;
	
		string $defaultPlugins[] = {		
			"sceneAssembly",
			"ArubaTessellator" 
		};

		$pluginAutoloadList = AWAppendStringsToStringArray (
							$defaultPlugins,
							$pluginAutoloadList);
	}


	// List of plug-ins introduced with 2014
	if (! `optionVar -exists oneTimeDefaultPluginLoad2014`) {
		optionVar -iv oneTimeDefaultPluginLoad2014 1;
		
		string $defaultPlugins[] = {};
		
		string $autoLoaderPlugins [] = { "autoLoader" };
		if ( !`about -batch` ) {
			appendStringArray( $defaultPlugins, $autoLoaderPlugins, size($autoLoaderPlugins) );
		}
		

        // Load the CloudImportExportPlugin
        string $cloudImportExportPlugin [] = { "CloudImportExport" };
        appendStringArray( $defaultPlugins, $cloudImportExportPlugin, size($cloudImportExportPlugin) );

        $pluginAutoloadList = AWAppendStringsToStringArray (
            $defaultPlugins,
            $pluginAutoloadList );
	}

    // List of plug-ins introduced with 2014 Update
	if ( ! `optionVar -exists oneTimeDefaultPluginLoad2014Update` ) {
		optionVar -iv oneTimeDefaultPluginLoad2014Update 1;

		string $defaultPlugins[] = {};

		string $xgenPlugin[] = { 
			"xgenToolkit",
			"xgenMR"
		};

		if (`getenv "MAYA_NO_INITIAL_AUTOLOAD_MT"` == "") {
			appendStringArray( $defaultPlugins, $xgenPlugin, size($xgenPlugin) );
		}
	
		$pluginAutoloadList = AWAppendStringsToStringArray (
							$defaultPlugins,
							$pluginAutoloadList);

		string $defaultPluginsNT[] = {};

        if (`about -nt`) {
            $pluginAutoloadList = AWAppendStringsToStringArray (
                $defaultPluginsNT,
                $pluginAutoloadList );
        }
	}

	// List of plug-ins introduced with 2015
	if (! `optionVar -exists oneTimeDefaultPluginLoad2015`) {
		optionVar -iv oneTimeDefaultPluginLoad2015 1;
		
		string $defaultPlugins[] = {};		

			string $shaderFXPlugins [] = { "shaderFXPlugin" };
			appendStringArray( $defaultPlugins, $shaderFXPlugins, size($shaderFXPlugins) );

		string $bifrostPlugins[] = { 
			"BifrostMain",
			"bifrostshellnode",
			"bifrostvisplugin"
		};

		if (`getenv "MAYA_NO_INITIAL_AUTOLOAD_MT"` == "") {
			appendStringArray( $defaultPlugins, $bifrostPlugins, size($bifrostPlugins) );
		}
			string $unfold3DPlugin [] = { "Unfold3D" };
			appendStringArray( $defaultPlugins, $unfold3DPlugin, size($unfold3DPlugin) );
         		

		$pluginAutoloadList = AWAppendStringsToStringArray (
			$defaultPlugins,
			$pluginAutoloadList );
	}

	// List of plug-ins introduced with Maya 2015 Extension 1 and
	// Maya LT Extension 1.
	if (! `optionVar -exists oneTimeDefaultPluginLoad2015Ext1`) {
		optionVar -iv oneTimeDefaultPluginLoad2015Ext1 1;

		string $defaultPlugins[] = {};

		//	Game exporters are not available on Linux.
		if (!`about -linux`)
		{

		}

		$pluginAutoloadList = AWAppendStringsToStringArray (
			$defaultPlugins,
			$pluginAutoloadList );
	}

	if ( size($pluginAutoloadList)>0 ) {

		string $pluginPaths[];
		string $ext;
		string $extensions[];
		string $fileName;

		if (`about -nt`) {
			$extensions[0] = ".mll";
			$extensions[1] = ".nll.dll";
			tokenize $mayaPlugInPath ";" $pluginPaths;
		} else if (`about -mac`) {
			$extensions[0] = ".bundle";
			tokenize $mayaPlugInPath ":" $pluginPaths;
		} else
		{
			$extensions[0] = ".so";
			tokenize $mayaPlugInPath ":" $pluginPaths;
		}

		$extensions[size($extensions)] = ".py";

		for ( $pluginName in $pluginAutoloadList ) {
			if ( ! `pluginInfo -query -loaded $pluginName` ) {
				int $foundIt = false;

				for ( $pluginDirectory in $pluginPaths ) {
					$fileName =   $pluginDirectory
								+ "/"
								+ $pluginName;

					for ($ext in $extensions) {

						// If the plug-in file exists, we will try to load it
						// Use the -r test instead of -x.  -x on Windows only
						// checks the file extension, and won't return true on
						// a file with a .mll extension.
						// delay plugin load until necessary libraries are loaded
						if ( `filetest -r ($fileName + $ext)` ) {
							string $cmdAutoLoad = "autoLoadPlugin(\"\", \"" 
										+ $pluginName
										+ "\", \""
										+ $pluginName
										+ "\")";
							evalDeferred($cmdAutoLoad);
						
							// stop searching after we find the first match.
							$foundIt = true;
							break;
						}
					}

					if ($foundIt) {
						break;
					}
				}
			}
		}
	}

	if ( ! `optionVar -exists oneTimeDefaultPluginUnload2008sp1` ) {
		optionVar -iv oneTimeDefaultPluginUnload2008sp1 1;

		// Unload compositingInterop the first time 2008sp1 or more recent is run
		evalDeferred("unautoLoadPlugin(\"\",\"compositingInterop\")");
	}
}
