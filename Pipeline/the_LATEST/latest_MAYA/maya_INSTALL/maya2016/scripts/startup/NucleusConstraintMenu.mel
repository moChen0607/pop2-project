// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

proc DynCreateNComponentPaintMenu(  string $parent,
									string $useThisMesh,
									int $whichMenu )
//
// Build the paint nComponent submenu
//
// If $whichMenu == 0, paint by vertex map.	
// If $whichMenu == 1, paint by texture map.
// If $whichMenu == 2, convert current texture map to vertex map
// If $whichMenu == 3, convert current vertex map to texture map	
//
{
	string $meshParam = $useThisMesh;
	if( $useThisMesh == "" ){
		$meshParam = "\"\"";
	}
	setParent -menu $parent;
	// To add another paintable attribute, add the appropriate entries to the
	// following tables
	//
	string $attrs[] = {"strength", "glueStrength", "weight" };
	string $labels[] = {
		(uiRes("m_NucleusConstraintMenu.kStrengthMap")) ,
		(uiRes("m_NucleusConstraintMenu.kGlueStrengthMap")) ,
		(uiRes("m_NucleusConstraintMenu.kWeightMap")) } ;
	string $annots[];
	string $vertexLabels[] = {"PVS", "PVGS", "PVW"} ;
	string $mapLabels[] = {"PSM", "PGSM", "PWM"} ;
	string $images[] = {};
	if ($whichMenu < 2) {
		$annots = {
			(uiRes("m_NucleusConstraintMenu.kStrengthMapAnnot")) ,
			(uiRes("m_NucleusConstraintMenu.kGlueStrengthMapAnnot")) ,
			(uiRes("m_NucleusConstraintMenu.kWeightMapAnnot")) };
			
			if ($whichMenu == 0) {
				$images = { "paintVertexStrength.png", "paintVertexGlue.png", "paintVertexWeight.png" };
			} else if ($whichMenu == 1) {
				$images = { "paintTextureStrength.png", "paintTextureGlue.png", "paintTextureWeight.png" };
			}
	} else if ($whichMenu == 2) {
		$annots = {		
			(uiRes("m_NucleusConstraintMenu.kStrengthConvertAnnot")),
			(uiRes("m_NucleusConstraintMenu.kGlueStrengthConvertAnnot")),
			(uiRes("m_NucleusConstraintMenu.kWeightConvertAnnot")) };

			$images = { "convertTextToStrength.png", "convertTextToGlue.png", "convertTextToWeight.png" };
	} else {
		$annots = {		
			(uiRes("m_NucleusConstraintMenu.kStrengthConvertVertAnnot")),
			(uiRes("m_NucleusConstraintMenu.kGlueStrengthConvertVertAnnot")),
			(uiRes("m_NucleusConstraintMenu.kWeightConvertVertAnnot")) };

			$images = { "convertVertexToStrength.png", "convertVertexToGlue.png", "convertVertexToWeight.png" };
	}
	string $optAnnots[] = {

		(uiRes("m_NucleusConstraintMenu.kStrengthMapOptionAnnot")),
		(uiRes("m_NucleusConstraintMenu.kGlueStrengthMapOptionAnnot")),
		(uiRes("m_NucleusConstraintMenu.kWeightMapOptionAnnot")) };
	
	// Loop through the tables and build the menu
	//
	int $index = 0;
	int $numAttrs = size($attrs);
	while( $index < $numAttrs ){
		string $attrName = $attrs[$index] + "Map";
		string $attrLabel = capitalizeString( $attrs[$index] );
		string $baseAttr = $attrs[$index];
		string $setMapTypeCmd = ("setNComponentMapType(\""+$baseAttr+"\",");

		string $attrCmd, $optCmd;
		switch ($whichMenu) {
		case 0: { // paint vertex map
			$setMapTypeCmd += "1)";			
			$attrCmd = ($setMapTypeCmd+"; artAttrNComponentToolScript 4 "+$baseAttr);
			$optCmd = ($setMapTypeCmd+"; artAttrNComponentToolScript 3 "+$baseAttr);
			}
			break;
		case 1: { // paint texture
			$setMapTypeCmd += "2)";
			$attrCmd = ($setMapTypeCmd+"; paintNClothTexture " + $attrName + " " + $attrLabel + " 2 0" + $meshParam );
			$optCmd = ($setMapTypeCmd+"; paintNClothTexture " + $attrName + " " + $attrLabel + " 2 1" + $meshParam );
			}
			break;
		case 2: { // convert texture map to vertex map
			$attrCmd = ("nComponentTextureMapToVtxMap " + $attrName);
			}
			break;
		case 3: { // convert texture map to vertex map
			$attrCmd = ("nClothVtxMapToTextureMap 1 { \"" + $attrName +
						"\", \""+ $attrs[$index] +
						"\", \""+ 2 +
						"\", "+ $meshParam + " }");
			}
			break;
		}

		if ($whichMenu == 0) {
			menuItem -label $labels[$index]
				-annotation $annots[$index]
				-image $images[$index]
				-imageOverlayLabel $vertexLabels[$index]
				-enable true
				-command $attrCmd;

			menuItem -optionBox true
				-annotation $optAnnots[$index]
				-image $images[$index]
				-imageOverlayLabel $vertexLabels[$index]
				-enable true
				-command $optCmd;
		} else if ($whichMenu == 1) {
			menuItem -label $labels[$index]
				-annotation $annots[$index]
				-image $images[$index]
				-imageOverlayLabel $mapLabels[$index]
				-enable true
				-command $attrCmd;

			menuItem -optionBox true
				-annotation $optAnnots[$index]
				-image $images[$index]
				-imageOverlayLabel $mapLabels[$index]
				-enable true
				-command $optCmd;
		} else {
			menuItem -label $labels[$index]
				-annotation $annots[$index]
				-image $images[$index]
				-enable true
				-command $attrCmd;
		}
		
		$index++;
	}


	setParent -menu ..;
}

global proc NucleusConstraintMenu( string $parent )
//
// Build the constraint menu
{
	setParent -menu $parent;
	if( `menu -q -ni $parent` != 0 ) {
		//
		//	Menu is built already - just return
		//
		return;
	}

	menuItem -divider true -dividerLabel (uiRes("m_NucleusConstraintMenu.kConstraintCreate"));
	
	menuItem -label (uiRes("m_NucleusConstraintMenu.kComponent")) 
       	-annotation (uiRes("m_NucleusConstraintMenu.kComponentAnnot")) 
		-image "nConstraintComponent.png"
		-command "performCreateComponentNConstraint 0"
		-version "2014"
		-dmc     "performCreateComponentNConstraint 2";
        menuItem -optionBox true
			-c   "performCreateComponentNConstraint 1";
			
	menuItem -label (uiRes("m_NucleusConstraintMenu.kComponentToComponent")) 
       	-annotation (uiRes("m_NucleusConstraintMenu.kComponentToComponentAnnot")) 
		-image "nConstraintComponent.png"
		-command "performCreateDynamicConstraint 0 \"pointToPoint\""
		-dmc     "performCreateDynamicConstraint 2 \"pointToPoint\"";
        menuItem -optionBox true
			-c   "performCreateDynamicConstraint 1 \"pointToPoint\"";
	
	menuItem -label (uiRes("m_NucleusConstraintMenu.kForceField")) 
       	-annotation (uiRes("m_NucleusConstraintMenu.kForceFieldAnnot")) 
		-image "nConstraintForceField.png"
		-command "performCreateDynamicConstraint 0 \"force\""
		-dmc     "performCreateDynamicConstraint 2 \"force\"";
        menuItem -optionBox true
			-c   "performCreateDynamicConstraint 1 \"force\"";
			
	menuItem -label (uiRes("m_NucleusConstraintMenu.kPointToSurface")) 
       	-annotation (uiRes("m_NucleusConstraintMenu.kPointToSurfaceAnnot")) 
		-image "nConstraintPointoSurface.png"
		-command "performCreateDynamicConstraint 0 \"pointToSurface\""
		-dmc     "performCreateDynamicConstraint 2 \"pointToSurface\"";
        menuItem -optionBox true
			-c   "performCreateDynamicConstraint 1 \"pointToSurface\"";
			
	menuItem -label (uiRes("m_NucleusConstraintMenu.kSlideOnSurface")) 
       	-annotation (uiRes("m_NucleusConstraintMenu.kSlideOnSurfaceAnnot")) 
		-image "nConstraintSlideonSurface.png"
		-command "performCreateDynamicConstraint 0 \"slideOnSurface\""
		-dmc     "performCreateDynamicConstraint 2 \"slideOnSurface\"";
        menuItem -optionBox true
			-c   "performCreateDynamicConstraint 1 \"slideOnSurface\"";
	
	menuItem -label (uiRes("m_NucleusConstraintMenu.kTearableSurface")) 
       	-annotation (uiRes("m_NucleusConstraintMenu.kTearableSurfaceAnnot")) 
		-image "nConstraintTearable.png"
		-command "performCreateDynamicConstraint 0 \"tearableSurface\""
		-dmc     "performCreateDynamicConstraint 2 \"tearableSurface\"";
        menuItem -optionBox true
			-c   "performCreateDynamicConstraint 1 \"tearableSurface\"";
	
	menuItem -label (uiRes("m_NucleusConstraintMenu.kTransform")) 
       	-annotation (uiRes("m_NucleusConstraintMenu.kTransformAnnot")) 
		-image "nConstraintTransform.png"
		-command "performCreateDynamicConstraint 0 \"transform\""
		-dmc     "performCreateDynamicConstraint 2 \"transform\"";
        menuItem -optionBox true
			-c   "performCreateDynamicConstraint 1 \"transform\"";

	menuItem -divider true -dividerLabel (uiRes("m_NucleusConstraintMenu.kConstraintEdit"));

	menuItem -label (uiRes("m_NucleusConstraintMenu.kAttractToMatch")) 
       	-annotation (uiRes("m_NucleusConstraintMenu.kAttractToMatchAnnot")) 
		-image "nClothMatchingMesh.png"
		-command "performCreateDynamicConstraint 0 \"match\""
		-dmc     "performCreateDynamicConstraint 2 \"match\"";
        menuItem -optionBox true
			-c   "performCreateDynamicConstraint 1 \"match\"";
	
	menuItem -label (uiRes("m_NucleusConstraintMenu.kDisableCollision")) 
       	-annotation (uiRes("m_NucleusConstraintMenu.kDisableCollisionAnnot")) 
		-image "nConstraintDisableCollision.png"
		-command "performCreateDynamicConstraint 0 \"disableCollision\""
		-dmc     "performCreateDynamicConstraint 2 \"disableCollision\"";
        menuItem -optionBox true
			-c   "performCreateDynamicConstraint 1 \"disableCollision\"";
	
	menuItem -label (uiRes("m_NucleusConstraintMenu.kCollisionExclusion")) 
       	-annotation (uiRes("m_NucleusConstraintMenu.kCollisionExclusionAnnot")) 
		-image "nConstraintExcludeCollision.png"
		-command "performCreateDynamicConstraint 0 \"collisionExclusion\""
		-dmc     "performCreateDynamicConstraint 2 \"collisionExclusion\"";
        menuItem -optionBox true
			-c   "performCreateDynamicConstraint 1 \"collisionExclusion\"";
	
	menuItem -l (uiRes("m_NucleusConstraintMenu.kRemoveDynamicConstraint"))
		-annotation (getRunTimeCommandAnnotation("dynamicConstraintRemove"))
		-c "dynamicConstraintRemove" 
		-dmc "performRemoveDynamicConstraint 2 \"selected\""
		-i "nConstraintRemove.png"
		dynamicConstraintRemoveItem;
	
	menuItem -label (uiRes("m_NucleusConstraintMenu.kWeldBorders")) 
       	-annotation (uiRes("m_NucleusConstraintMenu.kWeldBordersAnnot")) 
		-image "nConstraintWeldBorders.png"
		-command "performCreateDynamicConstraint 0 \"weldBorders\""
		-dmc     "performCreateDynamicConstraint 2 \"weldBorders\"";
        menuItem -optionBox true
			-c   "performCreateDynamicConstraint 1 \"weldBorders\"";

	menuItem -divider true -dividerLabel (uiRes("m_NucleusConstraintMenu.kConstraintMembership"));

	menuItem -label (uiRes("m_NucleusConstraintMenu.kConstraintMembershipTool")) 
       	-annotation (uiRes("m_NucleusConstraintMenu.kConstraintMembershipToolAnnot")) 
		-image "nConstraintMembership.png"
		-c "nConstraintMembershipTool";

	menuItem -label (uiRes("m_NucleusConstraintMenu.kAddMembers")) 
       	-annotation (uiRes("m_NucleusConstraintMenu.kAddMembersAnnot"))
		-image "nConstraintAddMembers.png"
		-c "dynamicConstraintMembership \"add\"";	
		
	menuItem -label (uiRes("m_NucleusConstraintMenu.kRemoveMembers")) 
       	-annotation (uiRes("m_NucleusConstraintMenu.kRemoveMembersAnnot")) 
		-image "nConstraintRemoveMembers.png"
		-c "dynamicConstraintMembership \"remove\"";	
		
	menuItem -label (uiRes("m_NucleusConstraintMenu.kReplaceMembers")) 
       	-annotation (uiRes("m_NucleusConstraintMenu.kReplaceMembersAnnot")) 
		-image "nConstraintReplaceMembers.png"
		-c "dynamicConstraintMembership \"replace\"";
		
	menuItem -label (uiRes("m_NucleusConstraintMenu.kSelectMembers")) 
       	-annotation (uiRes("m_NucleusConstraintMenu.kSelectMembersAnnot")) 
		-image "nConstraintSelectMembers.png"
		-c "dynamicConstraintMembership \"select\"";

	menuItem -divider true -dividerLabel (uiRes("m_NucleusConstraintMenu.kConstraintMaps"));

	// Map-related menu items
	//
	string $paintVtxMapItem = `menuItem -label (uiRes("m_NucleusConstraintMenu.kPaintPropByVertex"))  
        -annotation (uiRes("m_NucleusConstraintMenu.kPaintPropByVertexAnnot")) 
		-subMenu true -tearOff true -allowOptionBoxes true nClothPaintPropVertexItem`;
	DynCreateNComponentPaintMenu $paintVtxMapItem "" 0;
	setParent -menu ..;

	string $paintTextureItem = `menuItem -label (uiRes("m_NucleusConstraintMenu.kPaintPropByTexture"))  
        -annotation (uiRes("m_NucleusConstraintMenu.kPaintPropByTextureAnnot")) 
		-subMenu true -tearOff true -allowOptionBoxes true nClothPaintPropTextureItem`;
	DynCreateNComponentPaintMenu $paintTextureItem "" 1;

	string $convertTxToVtxItem = `menuItem -label (uiRes("m_NucleusConstraintMenu.kConvertTextureMap"))
        -annotation (uiRes("m_NucleusConstraintMenu.kConvertTextureMapAnnot"))
		-subMenu true -tearOff true -allowOptionBoxes true nClothConvertTextureItem`;
	DynCreateNComponentPaintMenu $convertTxToVtxItem "" 2;

	string $convertVtxToTxItem = `menuItem -label (uiRes("m_NucleusConstraintMenu.kConvertVtxMap"))
        -annotation (uiRes("m_NucleusConstraintMenu.kConvertVtxMapAnnot"))
		-subMenu true -tearOff true -allowOptionBoxes true nClothConvertVtxItem`;
	DynCreateNComponentPaintMenu $convertVtxToTxItem "" 3;
	
}
