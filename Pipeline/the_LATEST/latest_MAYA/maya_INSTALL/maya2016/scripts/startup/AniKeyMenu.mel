// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  11 June 2014
//
//  Description:
//      This implements the "Key" menu on the Animation Menu Set.
//



//  Procedure Name:
//      AniKeyMenu
//
//  Description:
//      Create the ANIMATION->Key menu
//
//  Input Arguments:
//      The parent control for the menu.
//
//  Return Value:
//      None.
//
global proc AniKeyMenu ( string $parent ) {

	setParent -menu $parent;
	if( `menu -q -ni $parent` != 0 ) {
		//
		// Menu is built already - just return
		//
		return;
	}

	// Set
	menuItem -divider true -dividerLabel (uiRes("m_AniKeyMenu.kKeySet"));
	string $cmd;

	$cmd = "SetKey";
	menuItem -label (uiRes("m_AniKeyMenu.kSetKey")) 
			-command $cmd
			-annotation (getRunTimeCommandAnnotation($cmd))
			-image "setKeyframe.png"
			-dragMenuCommand "performSetKeyframeArgList 1 {\"2\", \"animationList\"}" setKeyItem;
		$cmd = "SetKeyOptions";
		menuItem -optionBox true
			-command $cmd
			-annotation (getRunTimeCommandAnnotation($cmd))
			-image "setKeyframe.png";

	string $cmd = "SetKeyAnimated";
	menuItem -label (uiRes("m_AniKeyMenu.kSetKeyOnAnimated")) 
			-command $cmd
			-image "setKeyOnAnim.png"
			-annotation (getRunTimeCommandAnnotation($cmd))
			setKeyAnimatedItem
			;

	$cmd = "SetKeyTranslate";
	menuItem -label (uiRes("m_AniKeyMenu.kTranslate"))
		-command $cmd
		-image "setKeyOnTranslate.png"
		-annotation (getRunTimeCommandAnnotation($cmd))
		setTranslationKeyItem;

	$cmd = "SetKeyRotate";
	menuItem -label (uiRes("m_AniKeyMenu.kRotate"))
		-command $cmd
		-image "setKeyOnRotate.png"
		-annotation (getRunTimeCommandAnnotation($cmd))
		setRotationKeyItem;

	$cmd = "SetKeyScale";
	menuItem -label (uiRes("m_AniKeyMenu.kScale"))
		-command $cmd
		-image "setKeyOnScale.png"
		-annotation (getRunTimeCommandAnnotation($cmd))
		setScaleKeyItem;

	$cmd = "SetBreakdownKey";
	menuItem -label (uiRes("m_AniKeyMenu.kSetBreakdown"))
			-command $cmd
			-annotation (getRunTimeCommandAnnotation($cmd))
			-dragMenuCommand "performSetBreakdown 2 animationList" setBreakdownItem;
		$cmd = "SetBreakdownKeyOptions";
		menuItem -optionBox true
			-command $cmd
			-annotation (getRunTimeCommandAnnotation($cmd))
			setBreakdownOptionItem;
			
		// Set Driven Keyframe
		//
		menuItem -ltVersion "2016" -label (uiRes("m_AniKeyMenu.kSetDrivenKeyParent"))  -subMenu true -aob true -to true;
			$cmd = "SetDrivenKeyOptions";
			menuItem -ltVersion "2016" -label (uiRes("m_AniKeyMenu.kSetDrivenKey"))
				-command $cmd
				-annotation (getRunTimeCommandAnnotation($cmd))
				setDrivenKeyDialog;
			
			$cmd = "GoToPreviousDrivenKey";
			menuItem -ltVersion "2016" -label (uiRes("m_AniKeyMenu.kGoToPrevious")) 
				-command $cmd
				-annotation (getRunTimeCommandAnnotation($cmd))
				previousDrivenKeyItem;
			
			$cmd = "GoToNextDrivenKey";
			menuItem -ltVersion "2016" -label (uiRes("m_AniKeyMenu.kGoToNext")) 
				-command $cmd
				-annotation (getRunTimeCommandAnnotation($cmd))
				nextDrivenKeyItem;
			setParent -menu ..;

	// menu item for keyframing blendshape target weights
	$cmd = "KeyBlendShapeTargetsWeight";
	menuItem -label (uiRes("m_AniKeyMenu.kSetBlendShapeTargetWeightKeys")) 
		-command $cmd
		-annotation (getRunTimeCommandAnnotation($cmd));

	// Edit
	menuItem -divider true -dividerLabel (uiRes("m_AniKeyMenu.kKeyEdit"));

	menuItem -label (uiRes("m_AniKeyMenu.kCutKeys"))
		-annotation (uiRes("m_AniKeyMenu.kCutKeysAnnot"))
		-command ("timeSliderCutKey")
		-dragMenuCommand "performCutKeyArgList 1 {\"2\", \"animationList\", \"0\"}" cutKeyItem;
		menuItem -optionBox true 
			-annotation (uiRes("m_AniKeyMenu.kCutKeysOptionsAnnot"))
			-command ("CutKeysOptions")
			cutKeyDialogItem;

	menuItem -label (uiRes("m_AniKeyMenu.kCopyKeys"))
		-annotation (uiRes("m_AniKeyMenu.kCopyKeysAnnot"))
		-command ("timeSliderCopyKey")
		-dragMenuCommand "performCopyKeyArgList 1 {\"2\", \"animationList\", \"0\"}" copyKeyItem;
		menuItem -optionBox true 
			-annotation (uiRes("m_AniKeyMenu.kCopyKeysOptionsAnnot"))
			-command ("CopyKeysOptions")
			copyKeyDialogItem;

	menuItem -label (uiRes("m_AniKeyMenu.kPasteKeys"))
		-annotation (uiRes("m_AniKeyMenu.kPasteKeysAnnot"))
		-command ("timeSliderPasteKey false")
		-dragMenuCommand "performPasteKeyArgList 1 {\"2\", \"animationList\", \"0\"}" pasteKeyItem;
		menuItem -optionBox true 
			-annotation (uiRes("m_AniKeyMenu.kPasteKeysOptionsAnnot"))
			-command ("PasteKeysOptions")
			pasteKeyDialogItem;

	menuItem -label (uiRes("m_AniKeyMenu.kDeleteKeys"))
		-annotation (uiRes("m_AniKeyMenu.kDeleteKeysAnnot"))
		-command ("timeSliderClearKey")
		-dragMenuCommand "performClearKeyArgList 1 {\"2\", \"animationList\", \"0\", \"0\"}" clearKeyItem;
		menuItem -optionBox true 
			-annotation (uiRes("m_AniKeyMenu.kDeleteKeysOptionsAnnot"))
			-command ("DeleteKeysOptions")
			clearKeyDialogItem;

	menuItem -label (uiRes("m_AniKeyMenu.kScaleKeys"))
		-annotation (uiRes("m_AniKeyMenu.kScaleKeysAnnot"))
		-command ("ScaleKeys")
		-dragMenuCommand "performScaleKeyArgList 1 {\"2\", \"animationList\", \"0\"}" scaleKeyItem;
		menuItem -optionBox true 
			-annotation (uiRes("m_AniKeyMenu.kScaleKeysOptionsAnnot"))
			-command ("ScaleKeysOptions")
			scaleKeyDialogItem;
	
	menuItem -label (uiRes("m_AniKeyMenu.kSnapKeys"))
		-annotation (uiRes("m_AniKeyMenu.kSnapKeysAnnot"))
		-command ("SnapKeys")
		-dragMenuCommand "performSnapKeyArgList 1 { \"2\", \"animationList\", \"0\" }" 
		snapKeyItem;
		menuItem -optionBox true 
			-annotation (uiRes("m_AniKeyMenu.kSnapKeysOptionsAnnot"))
			-command ("SnapKeysOptions")
			snapKeyDialogItem;

	menuItem -label (uiRes("m_AniKeyMenu.kBakeSimulation"))
	-command ("BakeSimulation")
	-image "bakeAnimation.png"
	-annotation (uiRes("m_AniKeyMenu.kBakeSimulationAnnot"))
	-dragMenuCommand "performBakeSimulationArgList 1 {\"2\", \"animationList\"}"
	bakeSimulationItem;
	menuItem -optionBox true 
		-annotation (uiRes("m_AniKeyMenu.kBakeSimulationOptionsAnnot"))
		-command ("BakeSimulationOptions")
		bakeSimulationDialogItem;

	menuItem -divider true -longDivider false;

	$cmd = "HoldCurrentKeys";
	menuItem -label (uiRes("m_AniKeyMenu.kHoldCurrentKeys"))  -echoCommand true
		-command $cmd
		-annotation (getRunTimeCommandAnnotation($cmd))
		holdKeyItem;

	// IK/FK Switching
	//
	menuItem -ltVersion "2015" -label (uiRes("m_AniKeyMenu.kIKFKKeys"))  -subMenu true -aob true -to true;
		$cmd = "SetIKFKKeyframe";
		menuItem -ltVersion "2015" -label (uiRes("m_AniKeyMenu.kSetIKFKKey"))  
			-command $cmd
			-annotation (getRunTimeCommandAnnotation($cmd))
				ikFKSetKeyItem;

		int $ikState = `optionVar -q ikFKSwitchState`;
		$cmd = "ToggleFkIk";
		string $mi = `menuItem -ltVersion "2015" -label (uiRes("m_AniKeyMenu.kEnableIKSolver"))  
					-checkBox $ikState
					-command $cmd
					-annotation (getRunTimeCommandAnnotation($cmd))
					ikFKStateItem`;

		$cmd = "ConnectNodeToIKFK";
		menuItem -ltVersion "2015" -label (uiRes("m_AniKeyMenu.kConnectToIKFK"))  
			-command $cmd
			-annotation (getRunTimeCommandAnnotation($cmd))
				ikFKConnectToItem;

		$cmd = "MoveIKtoFK";
		menuItem -ltVersion "2015"  -label (uiRes("m_AniKeyMenu.kMoveToIKFK")) 
			-command $cmd
			-annotation (getRunTimeCommandAnnotation($cmd))
				moveIKtoFKitem;

		setUpIKSelectionScriptJob($mi);

		setParent -menu ..;

	// ----- Character Set -----
	// Important:
	// These character set menu items are replicated in the rigging menuset inside ChaControlsMenu.mel
	// If you are making changes to these items, please confirm update the corresponding
	// item in ChaControlsMenu.mel.
	//
	// Also, if you update createSelectCharNodesMenu() and createSelectCharMenu() proc, 
	// please also remember to update the corresponding duplicate in ChaControlsMenu.mel.
	menuItem -divider true -dividerLabel (uiRes("m_AniKeyMenu.kKeyCharacterSet"));

	menuItem -label (uiRes("m_AniKeyMenu.kCreateChar"))  
		-annotation (uiRes("m_AniKeyMenu.kCreateCharAnnot")) 
		-c "CreateCharacter" 
		-dragMenuCommand "performCreateCharacter 2" 
		createAniCharacterItem;
		menuItem -optionBox true
			-annotation (uiRes("m_AniKeyMenu.kCreateCharOptAnnot")) 
			-c "CreateCharacterOptions"
			createAniCharacterDialogItem; 

	menuItem -label (uiRes("m_AniKeyMenu.kCreateSubChar")) 
		-annotation (uiRes("m_AniKeyMenu.kCreateSubCharAnnot"))
		-c "CreateSubCharacter"
		-dragMenuCommand "performCreateSubcharacter 2"
		createAniSubCharacterItem;
		menuItem -optionBox true
			-annotation (uiRes("m_AniKeyMenu.kCreateSubCharOptAnnot")) 
			-c "CreateSubCharacterOptions"
			createAniSubCharacterDialogItem; 

	menuItem -label (uiRes("m_AniKeyMenu.kCharMapper")) 
		-annotation (uiRes("m_AniKeyMenu.kCharMapperAnnot")) 
		-command "CharacterMapper";

	menuItem -label (localizedUIComponentLabel("Attribute Editor"))
		-annotation (uiRes("m_AniKeyMenu.kAttrEdAnnot")) 
		-command "EditCharacterAttributes" 
		editAniCharacterAttributesItem;

	menuItem -divider true -longDivider false;

	menuItem -label (uiRes("m_AniKeyMenu.kAddToChararacter")) 
		-annotation (uiRes("m_AniKeyMenu.kAddToCharacterAnnot")) 
		-c "AddToCharacterSet"
		addAniCharacterItem;

	menuItem -label (uiRes("m_AniKeyMenu.kRemoveFromCharacter")) 
		-annotation (uiRes("m_AniKeyMenu.kRemoveFromCharacterAnnot"))
		-c "RemoveFromCharacterSet"
		removeAniCharacterItem;

	menuItem -label (uiRes("m_AniKeyMenu.kMergeCharacters")) 
		-annotation (uiRes("m_AniKeyMenu.kMergeCharactersAnnot"))
		-c "MergeCharacterSet"
		mergeAniCharacterItem;

	menuItem -divider true -longDivider false;

	menuItem -label (uiRes("m_AniKeyMenu.kSelectCharacterNode"))  -sm true -aob true
		selectAniCharSMItem;
		menu -e -pmc "createSelectCharMenu selectAniCharSMItem" 
			selectAniCharSMItem;
		setParent -menu ..;
			
	menuItem -label (uiRes("m_AniKeyMenu.kSelectCharacterMembers"))  -sm true -aob true
		selectAniCharNodesSMItem;
		menu -e -pmc "createSelectCharNodesMenu selectAniCharNodesSMItem" 
			selectAniCharNodesSMItem;
		setParent -menu ..;
		
	menuItem -label (uiRes("m_AniKeyMenu.kSetCurrentChar"))  -sm true setAniCharSMItem;
		menu -e -pmc "buildSetCharacterMenu setAniCharSMItem" setAniCharSMItem;
		setParent -menu ..;

	menuItem -label (uiRes("m_AniKeyMenu.kRedirect")) 
		-annotation (uiRes("m_AniKeyMenu.kRedirectAnnot")) 
		-c "AddAnimationOffset" 
		-dragMenuCommand "addAnimationOffset" 
		addAnimationOffset;
		menuItem -optionBox true
			-annotation (uiRes("m_AniKeyMenu.kRedirectOptAnoot")) 
			-c "AddAnimationOffsetOptions"
			addAnimationOffsetDialogItem; 
	// ----- Character Set -----

	// Time
	menuItem -divider true -dividerLabel (uiRes("m_AniKeyMenu.kKeyTime"));

	string $timeWarpSubMenu =
	`menuItem -subMenu true -label (uiRes("m_AniKeyMenu.kTimeWarp"))  
		-tearOff true
		-allowOptionBoxes true
		timeWarpSubMenu`;

		// 	Add Time Warp
		//
		$cmd = "AddTimeWarp" ;
		menuItem -label (uiRes("m_AniKeyMenu.kAddTimeWarp"))
			-image "addTimeWarp.png"
			-command $cmd
			-annotation (getRunTimeCommandAnnotation($cmd))
			addTimeWarpItem;

		// 	Select Time Warp
		//
		$cmd = "SelectTimeWarp" ;
		menuItem -label (uiRes("m_AniKeyMenu.kSelectTimeWarp"))
			-command $cmd
			-annotation (getRunTimeCommandAnnotation($cmd))
			-image "selectTimeWarp.png"
			selectTimeWarpItem;

		// 	Delete Time Warp
		//
		$cmd = "DeleteTimeWarp" ;
		menuItem -label (uiRes("m_AniKeyMenu.kDeleteTimeWarp"))
			-command $cmd
			-annotation (getRunTimeCommandAnnotation($cmd))
			-image "deleteTimeWarp.png"
			deleteTimeWarpItem;

		// 	Enable Time Warp
		//
		string $enableTimeWarpItem = 
		`menuItem -label (uiRes("m_AniKeyMenu.kEnableTimeWarp"))
			-image "enableTimeWarp.png"
			-annotation (uiRes("m_AniKeyMenu.kEnableTimeWarpAnnot")) 
			-cb 1
			-command "setAttr time1.enableTimewarp (!`getAttr time1.enableTimewarp`); currentTime `currentTime -q`;"
			enableTimeWarpItem`;
		setParent -m ..;

	menuItem -e
		-pmc ( "menuItem -e -cb `getAttr time1.enableTimewarp` " + $enableTimeWarpItem )
		$timeWarpSubMenu;
		
	menuItem -label (uiRes("m_AniKeyMenu.kSetTimecode"))  		
		-annotation (getRunTimeCommandAnnotation("SetTimecode"))
		-command "SetTimecode"
		animSetTimecodeItem;
}

//
//  Procedure Name:
//      createSelectCharNodesMenu
//
//  Description:
//      Create the menu for selecting all of the nodes in
//      a particular character.
//
//  Input Arguments:
//      $parent - parent menu
//
//  Return Value:
//      None
//
global proc createSelectCharNodesMenu( string $parent )
{
	string $cmd;
	string $annotation;
	string $format;

	setParent -menu $parent;
	menu -e -dai $parent;

	// Get characters in system
	//
	string $characters[] = `ls -type character`;

	if( `size $characters` == 0 ) {
		menuItem -label (uiRes("m_AniKeyMenu.kNoCharacterSets"))  -enable false;
	} else {
		for( $character in $characters ) {
			$cmd = ( "select -cl;selectNodesInCharacter( \"" + $character + "\" )" );
			$format = (uiRes("m_AniKeyMenu.kSelectNodesInCharacter"));
			$annotation = `format -stringArg $character $format`;
			menuItem -label $character -c $cmd -annotation $annotation;
		}
	}
}

//
//  Procedure Name:
//      createSelectCharMenu
//
//  Description:
//      Create the menu for selecting characters quickly
//
//  Input Arguments:
//      $parent - parent menu
//
//  Return Value:
//      None
//
global proc createSelectCharMenu( string $parent ) {
	string $cmd;
	string $annotation;
	string $format;

	setParent -menu $parent;
	menu -e -dai $parent;

	//Get characters in system
	//
	string $characters[] = `ls -type character`;

	if( `size $characters` == 0 ) {
		menuItem -label (uiRes("m_AniKeyMenu.kNoCharacterSets2"))  -enable false;
	} else {
		for( $character in $characters ) {
			$cmd = ( "select -r \"" + $character + "\"" );
			$format = (uiRes("m_AniKeyMenu.kSelect"));
			$annotation = `format -stringArg $character $format`;
			menuItem -label $character -c $cmd -annotation $annotation;
		}
	}
}
