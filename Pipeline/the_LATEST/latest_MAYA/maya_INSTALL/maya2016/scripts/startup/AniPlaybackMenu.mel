// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  11 June 2014
//
//  Description:
//      This implements the "Playback" menu on the Animation Menu Set.
//



//  Procedure Name:
//      AniKeyMenu
//
//  Description:
//      Create the ANIMATION->Playback menu
//
//  Input Arguments:
//      The parent control for the menu.
//
//  Return Value:
//      None.
//

global proc updatePlaybackLoopMenu(string $parent) {
	setParent -menu $parent;
	// update the checkbox for the Playback Loop option
	string $looping = `playbackOptions -q -loop`;
	menuItem -e 
			 -radioButton ($looping == "continuous") 
			 playbackLoopContinuousItem;
	menuItem -e 
			 -radioButton ($looping == "once") 
			 playbackLoopOnceItem;
	menuItem -e 
			 -radioButton ($looping == "oscillate") 
			 playbackLoopOscillateItem;
}

global proc updatePlaybackSpeedMenu(string $parent) {
	setParent -menu $parent;
	// update the radioButton for the Playback Speed option
	float $speed = `playbackOptions -q -playbackSpeed`;
	float $maxSpeed = `playbackOptions -q -maxPlaybackSpeed`;
	menuItem -e
			-radioButton ($speed == 0 && $maxSpeed == 0)
			playbackFreeItem;

	menuItem -e
			-radioButton ($speed == 0 && $maxSpeed == 1)
			playbackPefRealtimeItem;

	menuItem -e
			-radioButton ($speed == 1 && $maxSpeed == 0)
			playbackRealtimeItem;
}

global proc AniPlaybackMenu ( string $parent ) {
	setParent -menu $parent;

	if( `menu -q -ni $parent` != 0 ) {
		//
		//	Menu is built already - just return
		//
		return;
	}
	
	if( `isTrue AnimationExists` ) {
		menuItem -divider true;
		menuItem -label (uiRes("m_AniPlaybackMenu.kPlayblastLabel"))  
			-annotation (uiRes("m_AniPlaybackMenu.kPlayblastAnnot")) 
			-image "playblast.png"
			-c "PlayblastWindow" playblastItem;
		menuItem -optionBox true 
			-annotation (uiRes("m_AniPlaybackMenu.kPlayblastDialogAnnot"))
			-c "PlayblastOptions" playblastDialogItem;
	} 
	// Controls
	menuItem -divider true -dividerLabel (uiRes("m_AniPlaybackMenu.kPlaybackControls"));
	
	menuItem -label (uiRes("m_AniPlaybackMenu.kPlayLabel"))
			-annotation (uiRes("m_AniPlaybackMenu.kPlayAnnot"))
			-c "PlaybackToggle" 
			-image "timeplay.png"
			playbackPlayItem;
	
	menuItem -label (uiRes("m_AniPlaybackMenu.kPlayBackwardLabel"))
			-annotation (uiRes("m_AniPlaybackMenu.kPlayBackwardAnnot"))
			-c "PlaybackBackward" 
			-image "timerev.png"
			playbackPlayBackwardItem;
			
	menuItem -label (uiRes("m_AniPlaybackMenu.kStopLabel"))
			-annotation (uiRes("m_AniPlaybackMenu.kStopAnnot"))
			-c "PlaybackToggle"
			-image "timestop.png" 
			playbackStopItem;
			
	menuItem -label (uiRes("m_AniPlaybackMenu.kNextKeyLabel"))
			-annotation (uiRes("m_AniPlaybackMenu.kNextKeyAnnot"))
			-c "NextKey"
			-image "timenext.png" 
			playbackNextKeyItem;

	menuItem -label (uiRes("m_AniPlaybackMenu.kPrevKeyLabel"))
			-annotation (uiRes("m_AniPlaybackMenu.kPrevKeyAnnot"))
			-c "PreviousKey"
			-image "timeprev.png"
			playbackPrevKeyItem;

	menuItem -label (uiRes("m_AniPlaybackMenu.kNextFrameLabel"))
			-annotation (uiRes("m_AniPlaybackMenu.kNextFrameAnnot"))
			-c "NextFrame"
			-image "timestart.png"
			playbackNextFrameItem;

	menuItem -label (uiRes("m_AniPlaybackMenu.kPrevFrameLabel"))
			-annotation (uiRes("m_AniPlaybackMenu.kPrevFrameAnnot"))
			-c "PreviousFrame"
			-image "timeend.png"
			playbackPrevFrameItem;

	menuItem -label (uiRes("m_AniPlaybackMenu.kPlayRangeStartLabel"))
			-annotation (uiRes("m_AniPlaybackMenu.kPlayRangeStartAnnot"))
			-c "GoToMinFrame"
			-image "timerew.png" 
			playbackPlayRangeStartItem;

	menuItem -label (uiRes("m_AniPlaybackMenu.kPlayRangeEndLabel"))
			-annotation (uiRes("m_AniPlaybackMenu.kPlayRangeEndAnnot"))
			-c "GoToMaxFrame"
			-image "timefwd.png"
			playbackPlayRangeEndItem;

	// Controls
	menuItem -divider true -dividerLabel (uiRes("m_AniPlaybackMenu.kPlaybackSettings"));

	// Set Range to...
	menuItem -label (uiRes("m_AniPlaybackMenu.kSetRange"))  -subMenu true -tearOff yes playbackRangeItem;
		menuItem -label (uiRes("m_AniPlaybackMenu.kEnabledClips"))  
			-command "evalEcho setPlaybackRangeToEnabledClips"
			-annotation (uiRes("m_AniPlaybackMenu.kEnabledClipsAnnot")) 
			playbackRangeEnabledClipsItem;
		menuItem -label (uiRes("m_AniPlaybackMenu.kMinMax"))  
			-command "evalEcho setPlaybackRangeToMinMax" 
			-annotation (uiRes("m_AniPlaybackMenu.kMinMaxAnnot")) 
			playbackRangeMinMaxItem;
		menuItem -label (uiRes("m_AniPlaybackMenu.kPrefs"))  
			-command "evalEcho setPlaybackRangeToPrefs" 
			-annotation (uiRes("m_AniPlaybackMenu.kPrefsAnnot")) 
			playbackRangePrefsItem;
		menuItem -label (uiRes("m_AniPlaybackMenu.kSelected"))  
			-command "evalEcho setPlaybackRangeToHighlight" 
			-annotation (uiRes("m_AniPlaybackMenu.kSelectedAnnot")) 
			playbackRangeHighlightItem;
		menuItem -label (uiRes("m_AniPlaybackMenu.kSound"))  
			-command "evalEcho setPlaybackRangeToSound" 
			-annotation (uiRes("m_AniPlaybackMenu.kSoundAnnot")) 
			playbackRangeSoundItem;
		menuItem -label (uiRes("m_AniPlaybackMenu.kStartEnd"))  
			-command "evalEcho setPlaybackRangeToStartEnd" 
			-annotation (uiRes("m_AniPlaybackMenu.kStartEndAnnot")) 
			playbackRangeStartEndItem;
		setParent -m ..;

	// Playback Speed 
	float $speed = `playbackOptions -q -playbackSpeed`;
	float $maxSpeed = `playbackOptions -q -maxPlaybackSpeed`;
	
	menuItem -label (uiRes("m_AniPlaybackMenu.kPlaybackSpeed"))  
		-subMenu true -tearOff yes 
		-pmc ("updatePlaybackSpeedMenu " + $parent)
		playbackSpeedItem;
		
		radioMenuItemCollection;
		menuItem -label (uiRes("m_AniPlaybackMenu.kFree"))
			-radioButton ($speed == 0 && $maxSpeed == 0)
			-command "evalEcho playbackOptions -e -playbackSpeed 0 -maxPlaybackSpeed 0"
			-annotation (uiRes("m_AniPlaybackMenu.kFreeAnnot")) 
			playbackFreeItem;

		menuItem -label (uiRes("m_AniPlaybackMenu.kPlayEveryFrameRealtime"))
			-radioButton ($speed == 0 && $maxSpeed == 1)
			-command "evalEcho playbackOptions -e -playbackSpeed 0 -maxPlaybackSpeed 1"
			-annotation (uiRes("m_AniPlaybackMenu.kPlayEveryFrameRealtimeAnnot")) 
			playbackPefRealtimeItem;

		menuItem -label (uiRes("m_AniPlaybackMenu.kRealtime"))
			-radioButton ($speed == 1 && $maxSpeed == 0)
			-command "evalEcho playbackOptions -e -playbackSpeed 1"
			-annotation (uiRes("m_AniPlaybackMenu.kRealtimeAnnot")) 
			playbackRealtimeItem;
		setParent -m ..;
		
	// Playback Looping
	menuItem -label (uiRes("m_AniPlaybackMenu.kPlaybackLooping"))  
		-subMenu true -tearOff yes 
		-pmc ("updatePlaybackLoopMenu " + $parent)
		playbackLoopItem;

	string $looping = `playbackOptions -q -loop`;

		menuItem -label (uiRes("m_AniPlaybackMenu.kContinuous"))
			-radioButton ($looping == "continuous")				
			-command "evalEcho playbackOptions -loop  \"continuous\"" 
			-annotation (uiRes("m_AniPlaybackMenu.kContinuousAnnot")) 
			playbackLoopContinuousItem;
		menuItem -label (uiRes("m_AniPlaybackMenu.kOnce"))
			-radioButton ($looping == "once")
			-command "evalEcho playbackOptions -loop \"once\""
			-annotation (uiRes("m_AniPlaybackMenu.kOnceAnnot")) 
			playbackLoopOnceItem;
		menuItem -label (uiRes("m_AniPlaybackMenu.kOscillate"))
			-radioButton ($looping == "oscillate")				
			-command "evalEcho playbackOptions -loop \"oscillate\""
			-annotation (uiRes("m_AniPlaybackMenu.kOscillateAnnot")) 
			playbackLoopOscillateItem;
		setParent -m ..;

	menuItem -label (uiRes("m_AniPlaybackMenu.kSteppedPreview"))
		-checkBox `playbackOptions -q -blockingAnim`
		-command "playbackOptions -edit -blockingAnim #1 "
		-annotation (uiRes("m_AniPlaybackMenu.kSteppedPreviewAnnot"))
		playbackSteppedPreviewItem;

	// Render
	menuItem -divider true -dividerLabel (uiRes("m_AniPlaybackMenu.kPlaybackRender"));
	
	// Render Current Frame
	string $annotation = getRunTimeCommandAnnotation("RenderIntoNewWindow");
	menuItem -label (uiRes("m_AniPlaybackMenu.kRenderCurrentFrame")) 
		-annotation $annotation
		-c "RenderIntoNewWindow"
		playbackRenderCurrentFrameMenuItem;

	$annotation = getRunTimeCommandAnnotation("RenderGlobalsWindow");
	menuItem -label (uiRes("m_AniPlaybackMenu.kDisplayRenderSettings"))
		-annotation $annotation
		-c unifiedRenderGlobalsWindow
		playbackDisplayRenderSettingsItem;
	
}
