// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Description:
//      This script contains the procedures for
//      1. Retrieving the localized version of the shelf tab label
//      from english values.
//      2. Retrieving the shelf tab label in english from the localized values.
//

// This variable is not referenced. It is a convenient way to build
// all the ui resources needed to translate the shelves names.
string $InternalShelfLabels[] = {
	(uiRes("m_shelfLabel.kFX")),
	(uiRes("m_shelfLabel.kFXCaching")),
	(uiRes("m_shelfLabel.kDynamics")),
	(uiRes("m_shelfLabel.kCloth")),
	(uiRes("m_shelfLabel.kFluids")),
	(uiRes("m_shelfLabel.kHair")),
	(uiRes("m_shelfLabel.kNCloth")),
	(uiRes("m_shelfLabel.kRendering")),
	(uiRes("m_shelfLabel.kCustom")),
	(uiRes("m_shelfLabel.kPaintEffects")),
	(uiRes("m_shelfLabel.kToon")),
	(uiRes("m_shelfLabel.kFur")),
	(uiRes("m_shelfLabel.kMuscle")),
	(uiRes("m_shelfLabel.kBullet")),
        (uiRes("m_shelfLabel.kXGen")),
	(uiRes("m_shelfLabel.kGeneral")),
	(uiRes("m_shelfLabel.kCurvesSurfaces")),
	(uiRes("m_shelfLabel.kCurves")),
	(uiRes("m_shelfLabel.kSurfaces")),
	(uiRes("m_shelfLabel.kPolygons")),
	(uiRes("m_shelfLabel.kSubdivs")),
	(uiRes("m_shelfLabel.kDeformation")),
	(uiRes("m_shelfLabel.kRigging")),
	(uiRes("m_shelfLabel.kAnimation")),

	(uiRes("m_shelfLabel.kSculpting")),

	(uiRes("m_shelfLabel.kShelf1")),
	(uiRes("m_shelfLabel.kShelf2"))
};

//
//  Procedure Name:
//      shelfLabel_melToUI
//
//  Description:
//		Returns the localized version of the shelf tab label.
//
//  Input Arguments:
//		The shelf tab label in english.
//
//  Return Value:
//		The localized version of the tab label.
//


global proc string shelfLabel_melToUI (string $melLabel)
{
	string $resourceFile = "shelfLabel";
	string $resourceName = "m_"+$resourceFile+".k"+$melLabel;

	// We cannot call uiRes directly, we do not want error on missing
	// resources. They may come from customer defined shelves.

	// check for kGeneral to make sure the resource file was loaded
	if( !`displayString -exists ("m_"+$resourceFile+".kGeneral")` ) {
		catch( initResources( $resourceFile+".res.mel" ) );
	}

	if(`displayString -exists $resourceName`) {
		return `displayString -query -value $resourceName`;
	}

	return $melLabel;
}

//
//  Procedure Name:
//      shelfLabel_uiToMel
//
//  Description:
//		Returns the shelf tab label in english.
//
//  Input Arguments:
//		The localized version of the tab label.
//
//  Return Value:
//		The shelf tab label in english.
//
global proc string shelfLabel_uiToMel( string $uiLabel )
{
	string $keys[] = `displayString -query -keys "m_shelfLabel."`;
	for ($key in $keys) {
		if ($uiLabel == uiRes($key)) {
			string $buffer[];
			tokenize $key "." $buffer;
			if( size( $buffer ) == 2 ) {
				int $len = size($buffer[1]);
				return `substring $buffer[1] 2 $len`;
			}
		}
	}

	return $uiLabel;
}
