// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  17 June 2014
//
//
//  Procedure Name:
//      ModelingUVMenu
//
//  Description:
//		Create the MODELING->UV menu
//
//  Input Arguments:
//      Parent window that menu will be a part of.
//
//  Return Value:
//      None.
//

global proc ModelingUVMenu ( string $parent ) 
//
// Description:
//		Modeling UV menu
//
{
	if (! `isTrue "PolygonsExists"`) return;

	setParent -m $parent;
	if( `menu -q -ni $parent` != 0 ) {
		//
		//	Menu is built already - just return
		//
		return;
	}

	int $creator = 0;
	string $selectCmd = "ls -selection";

	menuItem -divider true -dividerLabel (uiRes("m_ModelingUVMenu.kEditorsDivider"));

		menuItem 
			-enableCommandRepeat false 
        	-label (uiRes("m_ModelingUVMenu.kUVTextureEditor"))  
			-annotation (uiRes("m_ModelingUVMenu.kUVTexureEditorAnnot"))
			-image "textureEditor.png"
			-command "TextureViewWindow";

		menuItem 
			-label (uiRes("m_ModelingUVMenu.kPolyUVSetEditor")) 
			-enableCommandRepeat true
			-enable true
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVSetEditorAnnot"))
			-image "polyUVSetEditor.png"
			-command "UVSetEditor"
			;

	menuItem -divider true -dividerLabel (uiRes("m_ModelingUVMenu.kCreateDivider"));

		if ($creator != 1) {
			menuItem 
				-enableCommandRepeat false 
				-checkBox false 
				-label (uiRes("m_ModelingUVMenu.kPolyUVsAssignShaderToProjection"))  
				-image "polyCheck.png"
				-dragMenuCommand "polygonUVsItemToShelf \"togglePolyCreateShaderWithMapping\""
				-annotation (uiRes("m_ModelingUVMenu.kPolyUVsAssignShaderToProjectionAnnot")) 
				-command "togglePolyCreateShaderWithMapping"
				toggleCreateShaderItem
				;

			menuItem -d true -ld false;
		}

		menuItem 
			-label (uiRes("m_ModelingUVMenu.kPolyUVsAutomatic")) 
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsAutomaticAnnot")) 
			-command "performPolyAutoProj 0" 
			-image "polyAutoProj.png" 
			;
			
		menuItem -optionBox 1
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsAutomaticOptionAnnot")) 
			-command "performPolyAutoProj 1" 
			-enableCommandRepeat false 
			-image "polyAutoProj.png"
			;


		menuItem 
			-label (uiRes("m_ModelingUVMenu.kPolyUVsBestPlane"))   
			-enableCommandRepeat true
			-image "bestPlaneTxt.png"
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsBestPlaneAnnot")) 
			-dragMenuCommand "polygonsMenuItemToShelf \"setToolTo polyBestPlaneTexturingContext\""
			-command "BestPlaneTexturingTool" 
			polyBestPlaneTexturingItem
			;

		string $createUVsBasedOnCamera = (uiRes("m_ModelingUVMenu.kPolyUVsCameraBasedUVsCreate"));
		string $prefix = ($creator == 0 ? "" : ( "PolyRequestUVSetName \""+$createUVsBasedOnCamera+ "\" ") );
		string $cmd = $prefix + "performPolyForceUVArgList";
		string $version = "\"1\"";
		string $args0 = ("{\"0\", \"camera\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args1 = ("{\"1\", \"camera\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args2 = ("{\"2\", \"camera\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $suffix = ($creator == 0 ? " \"\"" : "");
		string $dmc = "performPolyForceUVArgList \"1\" {\"2\", \"camera\", \"ls -selection\", \"0\"} \"\";";
		string $c = ($cmd + " " + $version + " " + $args0 + $suffix);
		
		menuItem
			-label $createUVsBasedOnCamera
			-enableCommandRepeat true 
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsCameraAnnot")) 
			-image "polyCameraUVs.png"
			-dragMenuCommand $dmc
			-command $c 
			cameraProjectionItem
			;
			
		string $c = ($cmd + " " + $version + " " + $args1 + $suffix);
		
		menuItem -optionBox 1
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsCameraOptionAnnot"))  
			-image "polyCameraUVs.png"
			-enableCommandRepeat false 
			-command $c 
			cameraProjectionOptionItem
			;

		menuItem -d true -ld false;

		// Cylindrical mapping
		string $cylindricalLabel = (uiRes("m_ModelingUVMenu.kPolyUVsCylindrical"));
		string $createCylindricalMapping = (uiRes("m_ModelingUVMenu.kPolyUVsCreateCylindrical"));
		string $prefix = ($creator == 0 ? "" : ("PolyRequestUVSetName \""+$createCylindricalMapping+"\" ") );
		string $cmd = $prefix + "performPolyProjectionArgList";
		string $version = "\"1\"";
		string $args0 = ("{\"0\", \"Cylindrical\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args1 = ("{\"1\", \"Cylindrical\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args2 = ("{\"2\", \"Cylindrical\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $suffix = ($creator == 0 ? " \"\"" : "");
		string $dmc = "performPolyProjectionArgList \"1\" {\"2\", \"Cylindrical\", \"ls -selection\", \"0\"} \"\";";
		string $c = ($cmd + " " + $version + " " + $args0 + $suffix);

		menuItem
			-label $cylindricalLabel
			-enableCommandRepeat true 
			-image "polyCylProj.png"
			-dragMenuCommand $dmc 
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsCylindricalAnnot")) 
			-command $c cylindricMappingItem
			;
		
		string $c = ($cmd + " " + $version + " " + $args1 + $suffix);
		
		menuItem -optionBox 1 
			-image "polyCylProj.png"
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsCylindricalOptAnnot"))  
			-enableCommandRepeat false 
			-command $c 
			cylindricMappingOptionItem
			;

		// Planar mapping
		string $planarLabel = (uiRes("m_ModelingUVMenu.kPolyUVsPlanar"));
		string $createPlanarMapping = (uiRes("m_ModelingUVMenu.kPolyUVsCreatePlanar"));
		string $prefix = ($creator == 0 ? "" : ("PolyRequestUVSetName \""+$createPlanarMapping+"\" ") );
		string $cmd = $prefix + "performPolyProjectionArgList";
		string $version = "\"1\"";
		string $args0 = ("{\"0\", \"Planar\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args1 = ("{\"1\", \"Planar\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args2 = ("{\"2\", \"Planar\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $suffix = ($creator == 0 ? " \"\"" : "");
		string $dmc = "performPolyProjectionArgList \"1\" {\"2\", \"Planar\", \"ls -selection\", \"0\"} \"\";";
		string $c = ($cmd + " " + $version + " " + $args0 + $suffix);

		menuItem
			-label $planarLabel
			-enableCommandRepeat true 
			-image "polyPlanProj.png"
			-dragMenuCommand $dmc 
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsPlanarAnnot")) 
			-command $c 
			planarMappingItem
			;
			
		string $c = ($cmd + " " + $version + " " + $args1 + $suffix);
		
		menuItem -optionBox 1  
			-image "polyPlanProj.png"
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsPlanarOptionAnnot"))  
			-enableCommandRepeat false 
			-command $c 
			planarMappingOptionItem
			;	

		
		// Spherical mapping
		string $sphericalLabel = (uiRes("m_ModelingUVMenu.kPolyUVsSpherical"));
		string $createSphericalMapping = (uiRes("m_ModelingUVMenu.kPolyUVsSphericalMapping"));
		string $prefix = ($creator == 0 ? "" : ("PolyRequestUVSetName \""+$createSphericalMapping+"\" ") );
		string $cmd = $prefix + "performPolyProjectionArgList";
		string $version = "\"1\"";
		string $args0 = ("{\"0\", \"Spherical\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args1 = ("{\"1\", \"Spherical\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args2 = ("{\"2\", \"Spherical\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $suffix = ($creator == 0 ? " \"\"" : "");
		string $c = ($cmd + " " + $version + " " + $args0 + $suffix);
		string $dmc = "performPolyProjectionArgList \"1\" {\"2\", \"Spherical\", \"ls -selection\", \"0\"} \"\";";

		menuItem
			-label $sphericalLabel
			-enableCommandRepeat true 
			-image "polySphereProj.png"
			-dragMenuCommand $dmc
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsSphericalAnnot")) 
			-command $c sphericMappingItem
			;
			
		string $c = ($cmd + " " + $version + " " + $args1 + $suffix);
		
		menuItem -optionBox 1 
			-image "polySphereProj.png"
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsSphericalOptAnnot"))  
			-enableCommandRepeat false 
			-command $c 
			sphericMappingOptionItem
			;

		// Contour stretch mapping
		string $contourLabel = (uiRes("m_ModelingUVMenu.kPolyUVsContour"));
		string $createContourMapping = (uiRes("m_ModelingUVMenu.kPolyUVsContourMapping"));
		string $prefix = ($creator == 0 ? "" : ("PolyRequestUVSetName \""+$createContourMapping+"\" ") );
		string $cmd = $prefix + "performPolyProjectionArgList";
		string $version = "\"1\"";
		string $args0 = ("{\"0\", \"Contour\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args1 = ("{\"1\", \"Contour\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args2 = ("{\"2\", \"Contour\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $suffix = ($creator == 0 ? " \"\"" : "");
		string $c = ($cmd + " " + $version + " " + $args0 + $suffix);
		string $dmc = "performPolyProjectionArgList \"1\" {\"2\", \"Contour\", \"ls -selection\", \"0\"} \"\";";

		menuItem
			-version "2016"
			-label $contourLabel
			-enableCommandRepeat true 
			-image "polyContourProj.png"
			-dragMenuCommand $dmc
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsContourAnnot")) 
			-command $c contourMappingItem
			;
			
		string $c = ($cmd + " " + $version + " " + $args1 + $suffix);
		
		menuItem -optionBox 1 
			-image "polyContourProj.png"
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsContourOptAnnot"))  
			-enableCommandRepeat false 
			-command $c 
			contourMappingOptionItem
			;

	menuItem -divider true -dividerLabel (uiRes("m_ModelingUVMenu.kModifyDivider"));		
		
		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsAlignUVs")) 
			-c "performTextureViewAlignUVsOptions false"
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsAlignUVsAnnot"))
			-image "polyAlignUVs.png" ;
		menuItem -optionBox true
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsAlignUVsOptionAnnot"))
			-image "polyAlignUVs.png"
			-ecr false
			-c "performTextureViewAlignUVsOptions true";
		
		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsFlipUVs"))   -ecr true
			-iol (uiRes("m_ModelingUVMenu.kFlipUvIconOverlay")) 
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsFlipUVsAnnot")) 
			-image "polyFlipUVs.png"
			-dmc "performPolyForceUV flip 2"
			-c	 "FlipUVs" flipUVItem;
		menuItem -optionBox 1
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsFlipUVsOptionAnnot"))
			-image "polyFlipUVs.png"
			-ecr false 
			-c "performPolyForceUV flip 1" flipUVOptionItem;

		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsGridUVs")) 
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsGridUVsAnnot")) 
			-c "performPolyGridUV 0" -i "polyGridUV.png";

		menuItem -optionBox 1
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsGridUVsOptionAnnot")) 
			-c "performPolyGridUV 1" -ecr false -i "polyGridUV.png";

		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsLayoutRectangle"))   -ecr true -i "polyUVRectangle.png"
			-annotation (getRunTimeCommandAnnotation("LayoutUVRectangle"))
			-dmc "polygonsMenuItemToShelf \"polyPerformAction polyUVRectangle v 0\""
			-c "LayoutUVRectangle" layoutUVRectangleTextureItem;

		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsNormalizeUVs"))   -ecr true
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsNormalizeUVsAnnot"))
			-image "polyNormalizeUVs.png"
			-dmc "performPolyForceUV normalize 2"
			-c	 "NormalizeUVs" normalizePolyUVsItem;

		menuItem -optionBox 1
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsNormalizeUVsOptionAnnot"))
			-image "polyNormalizeUVs.png"
			-ecr false 
			-c "performPolyForceUV normalize 1" normalizePolyUVsOptionItem;

		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsRotateUVs"))  -ecr true
			-i "polyTextureRotateUV.png"
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsRotateUVsAnnot")) 
			-dmc "performPolyRotateUVs 2"
			-ddc "performPolyRotateUVs 1"
			-c "RotateUVs"
			rotatePolyUVsUVItem;

		menuItem -optionBox 1
			-ecr false
			-i "polyTextureRotateUV.png"
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsRotateUVsOptionAnnot")) 
			-c "performPolyRotateUVs 1"
			rotatePolyUVsOptionItem;

		string $unitizeLabel = (uiRes("m_ModelingUVMenu.kPolyUVsUnitizeLabel"));
		string $createUnitizedUVs = (uiRes("m_ModelingUVMenu.kPolyUVsCreateUnitizedUVs"));
		string $prefix = ($creator == 0 ? "" : ( "PolyRequestUVSetName \"" +$createUnitizedUVs+ "\" ") );
		string $cmd = $prefix + "performPolyForceUVArgList";
		string $version = "\"1\"";
		string $args0 = ("{\"0\", \"unitize\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args1 = ("{\"1\", \"unitize\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args2 = ("{\"2\", \"unitize\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $suffix = ($creator == 0 ? " \"\"" : "");
		string $dmc = "performPolyForceUVArgList \"1\" {\"2\", \"unitize\", \"ls -sl\", \"0\"} \"\"";
		string $c = ($cmd + " " + $version + " " + $args0 + $suffix);
		menuItem
			-label $unitizeLabel
			-ecr true 
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsUnitizeUVsAnnot"))
			-image "polyUnitizeUVs.png"
			-dmc $dmc
			-c	 $c unitizePolyUVsItem;
		string $c = ($cmd + " " + $version + " " + $args1 + $suffix);
		menuItem -optionBox 1
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsUnitizeUVsOptionAnnot"))
			-image "polyUnitizeUVs.png"
			-ecr false 
			-c $c unitizePolyUVsOptionItem;

		menuItem -d true -ld false;

		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsMapUVBorder"))   -ecr true
			-i "polyMapUVBorder.png"
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsMapUVBorderAnnot")) 
			-ddc "performPolyUntangleUV map 1"
			-dmc "performPolyUntangleUV map 2"
			-c	 "MapUVBorder" mapUVBorderItem;
		menuItem -optionBox 1 -i "polyMapUVBorder.png" 
				-annotation (uiRes("m_ModelingUVMenu.kPolyUVsMapUVBorderOptionAnnot"))  
				-ecr false 
				-c "performPolyUntangleUV map 1" mapPolyUVsBorderOptionItem;

		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsStraightenUVBorder")) 
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsStraightenUVBorderAnnot")) 
			-i "polyStraightenUVBorder.png"
			-c "performPolyStraightenUV 0";
		menuItem -optionBox 1
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsStraightenUVBorderOptionAnnot")) 
			-i "polyStraightenUVBorder.png"
			-c "performPolyStraightenUV 1" -ecr false;

		menuItem -d true -ld false;

		menuItem -label (uiRes("m_ModelingUVMenu.kOptimizeUVs"))   -ecr true
			-version "2015"
			-i "polyRelaxUVShell.png"
			-annotation (uiRes("m_ModelingUVMenu.kOptimzeUVsAnnot")) 
			-c	 "OptimzeUVs";

		menuItem -optionBox 1 -i "polyRelaxUVShell.png" 
			-annotation (uiRes("m_ModelingUVMenu.kOptimizeUVsOptionsAnnot"))  
			-ecr false 
			-c "OptimzeUVsOptions";

		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsUnfoldUVs")) 
			-version "2015"
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsUnfoldUVsAnnot")) 
			-echoCommand true
			-dragMenuCommand "performUnfold 2"
			-c "performUnfold 0" 
			-i "textureEditorUnfoldUVsLarge.png"
			unfoldPolyUVsItem;

		menuItem -optionBox true
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsUnfoldUVsOptionAnnot")) 
			-c "performUnfold 1"
			-i "textureEditorUnfoldUVsLarge.png"
			unfoldPolyUVsOptItem;

		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsLayoutUVs")) 
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsLayoutUVsAnnot")) 
			-c "performPolyLayoutUV 0" -i "polyLayoutUV.png";

		menuItem -optionBox 1
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsLayoutUVsOptionAnnot")) 
			-c "performPolyLayoutUV 1" -ecr false -i "polyLayoutUV.png";

		menuItem -d true -ld false;

		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsWarpImage")) 
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsWarpImageAnnot")) 
			-echoCommand true
			-dragMenuCommand "WarpImageOptions"
			-c "WarpImageOptions" 
			-i "polyWarpImage.png"
			layoutPolyUVsWarpImageItem;

	menuItem -divider true -dividerLabel (uiRes("m_ModelingUVMenu.kEditDivider"));	

		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsCutUVs"))   -ecr true -i "polyMapCut.png"
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsCutUVsAnnot")) 
			-dmc "polygonsMenuItemToShelf \"polyPerformAction polyMapCut e 0\""
			-c "CutUVs" cutPolyUVsTextureItem;

		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsDeleteUVs"))   -ecr true -i "polyMapDel.png"
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsDeleteUVsAnnot")) 
			-dmc "polygonsMenuItemToShelf \"polyPerformAction polyMapDel f 0\""
			-c "DeleteUVs" delPolyUVsTextureItem;

		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsMergeUVs")) 
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsMergeUVsAnnot")) 
			-c "performPolyMergeUV 0" -i "polyMergeUV.png" ;
			
		menuItem -optionBox 1
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsMergeUVsOptionAnnot")) 
			-c "performPolyMergeUV 1" -ecr false -i "polyMergeUV.png" ;
			
		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsMoveAndSewUVs")) 
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsMoveAndSewUVsAnnot")) 
			-c "performPolyMapSewMove 0" -i "polyMoveSew.png";
		
		menuItem -optionBox 1 
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsMoveAndSewUVsOptionAnnot")) 
			-c "performPolyMapSewMove 1" -ecr false -i "polyMoveSew.png";

		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsSewUVs"))   -ecr true -i "polyMapSew.png"
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsSewUVsAnnot")) 
			-dmc "polygonsMenuItemToShelf \"polyPerformAction polyMapSew e 0\""
			-c "SewUVs" sewPolyUVsTextureItem;
			
		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsSplitUVs"))   -ecr true -i "polySplitUVs.png"
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsSplitUVsAnnot")) 
			-c "polySplitTextureUV" splitPolyUVsTextureItem;

		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsGrabUVTool")) -i "UV_3D_Grab_Brush.png"
			-annotation `getRunTimeCommandAnnotation("SetMeshGrabUVTool")`
			-version 2016
			-c "SetMeshGrabUVTool"
			-ddc "ShowMeshGrabUVToolOptions" ;

		menuItem -optionBox 1
			-annotation `getRunTimeCommandAnnotation("ShowMeshGrabUVToolOptions")`
			-c "ShowMeshGrabUVToolOptions" -ecr false -i "UV_3D_Grab_Brush.png" ;

	menuItem -divider true -dividerLabel (uiRes("m_ModelingUVMenu.kSetsDivider"));	
	
		// Copy UVs to UV Set
		string $prefix = "M";	// M is just to ensure a unique name for the menu item
		string $selectUVSetMenu = `menuItem 
			-label (uiRes("m_ModelingUVMenu.kPolyUVsCopyUVsToUVSet"))  
			-subMenu true 
			-allowOptionBoxes true 
			($prefix+"CopyUVSets")`;

		string $cmd = "string $menuNames[];" +
					  "buildUVSetMenuNames( $menuNames ); " +
					  "buildUVSetMenu " + $selectUVSetMenu + " $menuNames \"" + $prefix + " \" 1;" +
					  "buildUVSetMenuWithCopyUVsCmd " + $selectUVSetMenu + " $menuNames ;";
					  
		menuItem -e -pmc $cmd $selectUVSetMenu;

		string $copyCurrentUVSet = (uiRes("m_ModelingUVMenu.kPolyUVsCopyCurrentUVSet"));
		string $prefix = ($creator == 0 ? "" : ("PolyRequestUVSetName \""+$copyCurrentUVSet+"\" ") );
		string $cmd = $prefix + "performCopyCurrentUVSet";
		string $version = "\"1\"";
		string $args0 = ("{\"0\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args1 = ("{\"1\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args2 = ("{\"2\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $suffix = ($creator == 0 ? " \"\"" : "");
		string $dmc = "performCopyCurrentUVSet \"1\" {\"2\", \"ls -selection\", \"0\"} \"\";";
		string $c = ($cmd + " " + $version + " " + $args0 + $suffix);
		
		menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsCopyIntoNewUVSet"))  -ecr true
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsCopyIntoNewUVSetAnnot")) 
			-image "polyCopyUVSet.png"
			-dragMenuCommand $dmc
			-command $c copyCurrentUVSet
			;
			
		if ($creator != 1) {
			string $c = ($cmd + " " + $version + " " + $args1 + $suffix);
			
			menuItem -optionBox 1
				-image "polyCopyUVSet.png"
				-annotation (uiRes("m_ModelingUVMenu.kPolyUVsCopyNewUVSetOptionAnnot")) 
				-enableCommandRepeat false 
				-command $c 
				copyCurrentUVSetOB
				;
		}

		setParent -menu ..;

		// Create empty UV set

		string $createUVSetLabel = (uiRes("m_ModelingUVMenu.kPolyUVsUVSetLabel"));
		string $createEmptyUVSet = (uiRes("m_ModelingUVMenu.kPolyUVsCreateEmptyUVSet"));
		string $prefix = ($creator == 0 ? "" : ("PolyRequestUVSetName \""+$createEmptyUVSet+"\" ") );
		string $cmd = $prefix + "performCreateUVSet";
		string $version = "\"1\"";
		string $args0 = ("{\"0\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args1 = ("{\"1\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $args2 = ("{\"2\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
		string $suffix = ($creator == 0 ? " \"\"" : "");
		string $dmc = "performCreateUVSet \"1\" {\"2\", \"ls -selection\", \"0\"} \"\";";
		string $c = ($cmd + " " + $version + " " + $args0 + $suffix);
		
		menuItem
			-label $createUVSetLabel
			-enableCommandRepeat true 
			-image "polyCreateUVSet.png"
			-dragMenuCommand $dmc
			-annotation (uiRes("m_ModelingUVMenu.kPolyUVsCreateUVSetAnnot")) 
			-command $c 
			createUVSetItem
			;
			
		if ($creator != 1) {
			string $c = ($cmd + " " + $version + " " + $args1 + $suffix);
			
			menuItem -optionBox 1  
				-image "polyCreateUVSet.png"
				-annotation (uiRes("m_ModelingUVMenu.kPolyUVsCreateUVSetOptAnnot"))  
				-enableCommandRepeat false 
				-command $c 
				createUVSetOptionItem
				;	
		}


		if ($creator != 1) {
			menuItem -label (uiRes("m_ModelingUVMenu.kPolyUVsDeleteCurrentUVSet"))  
				-enableCommandRepeat true
				-image "polyDeleteUVSet.png"
				-annotation (uiRes("m_ModelingUVMenu.kPolyUVsDeleteCurrentUVSetAnnot")) 
				-dragMenuCommand "performDeleteCurrentUVSet 2"
				-command "DeleteCurrentUVSet" deleteCurrentUVSet;

			menuItem 
				-label (uiRes("m_ModelingUVMenu.kPolyUVsRenameCurrentUVSet"))  
				-enableCommandRepeat true
				-image "polyRenameUVSet.png"
				-annotation (uiRes("m_ModelingUVMenu.kPolyUVsRenameCurrentUVSetAnnot")) 
				-command "RenameCurrentUVSet" renameCurrentUVSet;

			menuItem 
				-label (uiRes("m_ModelingUVMenu.kPolyUVsSetCurrentUVSet"))  
				-enableCommandRepeat true
				-image "polySetCurrentUVSet.png"
				-annotation (uiRes("m_ModelingUVMenu.kPolyUVsSetCurrentUVSetAnnot")) 
				-command "SetCurrentUVSet" setCurrentUVSet;
		}

		menuItem -d true -ld false;

		menuItem 
			-label (uiRes("m_ModelingUVMenu.kPolyUVsPerInstance"))
			-subMenu true -to true
			-allowOptionBoxes true;

			menuItem
				-label (uiRes("m_ModelingUVMenu.kPolyUVSelectShared"))
				-annotation (uiRes("m_ModelingUVMenu.kPolyUVSelectSharedAnnot"))
				-image "polyShareInstancesSelect.png"
				-command "SelectSharedUVInstances";

			menuItem
				-label (uiRes("m_ModelingUVMenu.kPolyUVShareInstances"))
				-annotation (uiRes("m_ModelingUVMenu.kPolyUVShareInstancesAnnot"))
				-image "polyShareInstances.png"
				-command "ShareUVInstances";

			menuItem
				-label (uiRes("m_ModelingUVMenu.kPolyUVMakeInstanceCurrent"))
				-annotation (uiRes("m_ModelingUVMenu.kPolyMakeInstancecurrentAnnot"))
				-image "polyShareInstancesCurrent.png"
				-command "MakeUVInstanceCurrent";
			
		setParent -menu ..;		

	setParent -menu ..;				
}