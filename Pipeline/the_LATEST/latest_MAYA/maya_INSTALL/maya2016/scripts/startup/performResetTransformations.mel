// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  27 Aug 1999
//
//  Description:
//      Performs reset transformations on objects.
//
//
//  Procedure Name:
//      setOptionVars
//
//  Description:
//		Initialize the option values.
//
//  Input Arguments:
//		Whether to set the options to default values.
//
//  Return Value:
//      None.
//
proc setOptionVars(int $forceFactorySettings)
{
	//	Add optionVar to store what's being reset - translate, rotate, or scale
	//
	if ($forceFactorySettings || !`optionVar -exists resetTransformationsTranslate`){
		optionVar -intValue resetTransformationsTranslate 1;
	}
	if ($forceFactorySettings || !`optionVar -exists resetTransformationsRotate`){
		optionVar -intValue resetTransformationsRotate 1;
	}
	if ($forceFactorySettings || !`optionVar -exists resetTransformationsScale`){
		optionVar -intValue resetTransformationsScale 1;
	}
}

//
//  Procedure Name:
//      performResetTransformationsSetup
//
//  Description:
//		Update the state of the option box UI to reflect the option values.
//
//  Input Arguments:
//      parent               - Top level parent layout of the option box UI.
//                             Required so that UI object names can be 
//                             successfully resolved.
//
//	forceFactorySettings - Whether the option values should be set to
//                             default values.
//
//  Return Value:
//      None.
//
global proc performResetTransformationsSetup(string $parent, 
	int $forceFactorySettings)
{
	// Retrieve the option settings
	//
	setOptionVars ($forceFactorySettings);
	setParent $parent;

	//	Radio button to select what gets moved
	//
	int $trans = `optionVar -q resetTransformationsTranslate`;
	int $rotate = `optionVar -q resetTransformationsRotate`;
	int $scale = `optionVar -q resetTransformationsScale`;

	checkBoxGrp -e -v1 $trans resetCheckBoxGrp;
	checkBoxGrp -e -v2 $rotate resetCheckBoxGrp;
	checkBoxGrp -e -v3 $scale resetCheckBoxGrp;
}

//
//  Procedure Name:
//      performResetTransformationsCallback
//
//  Description:
//		Update the option values with the current state of the option box UI.
//
//  Input Arguments:
//      parent - Top level parent layout of the option box UI.  Required so
//               that UI object names can be successfully resolved.
//
//	doIt   - Whether the command should execute.
//
//  Return Value:
//      None.
//
global proc performResetTransformationsCallback(string $parent, int $doIt)
{
    setParent $parent;

	// Set the optionVar's from the control values, and then perform command
	//
	int $i = `checkBoxGrp -q -v1 resetCheckBoxGrp`;
	optionVar -intValue resetTransformationsTranslate $i;
	$i = `checkBoxGrp -q -v2 resetCheckBoxGrp`;
	optionVar -intValue resetTransformationsRotate $i;
	$i = `checkBoxGrp -q -v3 resetCheckBoxGrp`;
	optionVar -intValue resetTransformationsScale $i;

	if ($doIt) {
		performResetTransformations 0; 
		addToRecentCommandQueue "performResetTransformations 0" "ResetTransformations";
	}
}

//
//  Procedure Name:
//      performResetTransformationsOptions
//
//  Description:
//		Construct the option box UI.  Involves accessing the standard option
//		box and customizing the UI accordingly.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
proc performResetTransformationsOptions()
{
	//	Name of the command for this option box.
	//
	string $commandName = "performResetTransformations";

	//	Build the option box actions.
	//
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	//	STEP 1:  Get the option box.
	//	============================
	//
	//	The value returned is the name of the layout to be used as
	//	the parent for the option box UI.
	//
	string $layout = getOptionBox();
	setParent $layout;
	
	//	STEP 2:  Pass the command name to the option box - see STEP 8.
	//	==============================================================
	
	//	STEP 3:  Activate the default UI template.
	//	==========================================
	//
	//	Activate the default UI template so that the layout of this 
	//	option box is consistent with the layout of the rest of the 
	//	application.
	//
	setUITemplate -pushTemplate DefaultTemplate;

	//	STEP 4: Create option box contents.
	//	===================================
	//	
	//	This, of course, will vary from option box to option box.	
	
	//	Turn on the wait cursor.
	//
	waitCursor -state 1;

	//	RECOMMENDATION:  Place the UI in a 'scrollable' layout.  A 
	//	scrollable layout ensures that if the option box window is ever
	//	resized such that it's entire contents is not visible then the 
	//	scroll bars provided by the scrollable layout will allow the user
	//	to access the hidden UI.  Two layouts currently supporting 
	//	scrollable behaviour are the 'scrollLayout' and the 'tabLayout'.
	//
//	scrollLayout;
	//
	//	or...
	//
	tabLayout -tabsVisible 0 -scrollable 1;
	
	string $parent = `columnLayout -adjustableColumn 1`;
	
	//	RECOMMENDATION:  Use the 'Grp' commands where possible because
	//	they obey the formatting specified in the default template.
	//	This will result in a more consistent look throughout the
	//	application.
	//	

	checkBoxGrp -label (uiRes("m_performResetTransformations.kReset"))   
		-ncb 3
		-vertical
		-label1 (uiRes("m_performResetTransformations.kTranslate")) 
		-label2 (uiRes("m_performResetTransformations.kRotatee")) 
		-label3 (uiRes("m_performResetTransformations.kScale")) 
		resetCheckBoxGrp;

	//	Turn off the wait cursor.
	//
	waitCursor -state 0;
	
	//	Step 5: Deactivate the default UI template.
	//	===========================================
	//
	setUITemplate -popTemplate;

	//	Step 6: Customize the buttons.  
	//	==============================
	//
	//	Provide more descriptive labels for the buttons.  This is not 
	//	necessary, but in some cases, for example, a button labelled 
	//	'Create' may be more meaningful to the user than one labelled
	//	'Apply'.
	//
	//	Disable those buttons that are not applicable to the option box.
	//
	//	Attach actions to those buttons that are applicable to the option
	//	box.  Note that the 'Close' button has a default action attached 
	//	to it that will hide the window.  If a a custom action is
	//	attached to the 'Close' button then be sure to call the 'hide the
	//	option box' procedure within the custom action so that the option
	//	box is hidden properly.

	//	'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-label (uiRes("m_performResetTransformations.kResetTransform")) 
		-command ($callback + " " + $parent + " " + 1)
		$applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;

	//	Step 7: Set the option box title.
	//	=================================
	//
	setOptionBoxTitle (uiRes("m_performResetTransformations.kResetTransformationsOptions"));

	//	Step 8: Customize the 'Help' menu item text.
	//	============================================
	//
	setOptionBoxHelpTag( "ResetTransformations" );

	//	Step 9: Set the current values of the option box.
	//	=================================================
	//
	eval (($setup + " " + $parent + " " + 0));	
	
	//	Step 10: Show the option box.
	//	=============================
	//
	showOptionBox();
}

//
//  Procedure Name:
//      performParentHelp
//
//  Description:
//		Return a short description about this command.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      string.
//
proc string performParentHelp()
{
	return 
	"  Command: Reset Transformations.\n" +
	" will reset the select object's transformations to identity.";
}

//
//  Procedure Name:
//      assembleCmd
//
//  Description:
//		Construct the command that will apply the option box values.
//
//  Input Arguments:
//      None.
//
proc string assembleCmd()
{
	string  $cmd = "makeIdentity";

	setOptionVars(false);

	int		$trans      = `optionVar -q resetTransformationsTranslate`;
	int		$rotate      = `optionVar -q resetTransformationsRotate`;
	int		$scale      = `optionVar -q resetTransformationsScale`;
	
	// Execute the command with the option settings
	//

	$cmd = $cmd + " -apply false" +
		" -t "+$trans +" -r " + $rotate + " -s " + $scale;
	return $cmd;
}

//
//  Procedure Name:
//      performParent
//
//  Description:
//		Perform the performParent command using the corresponding 
//		option values.  This procedure will also show the option box
//		window if necessary as well as construct the command string
//		that will invoke the optionBoxExample1 command with the current
//		option box values.
//
//  Input Arguments:
//      0 - Execute the command.
//      1 - Show the option box dialog.
//      2 - Return the command.
//
global proc string performResetTransformations(int $action)
{
	string $cmd = "";

	switch ($action) {

		//	Execute the command.
		//
		case 0:
			//	Get the command.
			//
			$cmd = `assembleCmd`;

			//	Execute the command with the option settings.
			//
			eval($cmd);

			break;

		//	Show the option box.
		//
		case 1:
			performResetTransformationsOptions;
			break;

		//	Return the command string.
		//
		case 2:
			//	Get the command.
			//
			$cmd = `assembleCmd`;
			break;
	}
	return $cmd;
}

