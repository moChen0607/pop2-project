// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
{
		if (`isTrue AnimationExists`) {
	   	   	   	   	   
			if (!`scriptedPanelType -exists dopeSheetPanel`) {
				//
				//  Define the callbacks for the dopeSheetPanel
				//
				scriptedPanelType
//					-sourceFile			"dopeSheetPanel"
					-createCallback		"createDopeSheetPanel" 
					-addCallback		"addDopeSheetPanel"
					-removeCallback		"removeDopeSheetPanel"
					-deleteCallback		"deleteDopeSheetPanel"
					-saveStateCallback	"saveStateDopeSheetPanel"
					dopeSheetPanel;

				source	"dopeSheetPanel";

			}
	   	   	   	   	   
			if (!`scriptedPanelType -exists clipEditorPanel`) {
				//
				//  Define the callbacks for the clipEditorPanel
				//
				scriptedPanelType
					-createCallback		"createClipEditorPanel" 
					-addCallback		"addClipEditorPanel"
					-removeCallback		"removeClipEditorPanel"
					-deleteCallback		"deleteClipEditorPanel"
					-saveStateCallback	"saveStateClipEditorPanel"
					clipEditorPanel;

				source	"clipEditorPanel";
            }

			if (!`scriptedPanelType -exists sequenceEditorPanel`) {
				//
				//  Define the callbacks for the sequenceEditorPanel
				//
				scriptedPanelType
					-createCallback		"createSequenceEditorPanel" 
					-addCallback		"addSequenceEditorPanel"
					-removeCallback		"removeSequenceEditorPanel"
					-deleteCallback		"deleteSequenceEditorPanel"
					-saveStateCallback	"saveStateSequenceEditorPanel"
					sequenceEditorPanel;

				source	"sequenceEditorPanel";
            }
			if (!`scriptedPanelType -exists shotPlaylistPanel`) {
				//
				//  Define the callbacks for the sequenceEditorPanel
				//
				scriptedPanelType
					-createCallback		"createShotPlaylistPanel" 
					-addCallback		"addShotPlaylistPanel"
					-initCallback		"initShotPlaylistPanel"
					-removeCallback		"removeShotPlaylistPanel"
					-deleteCallback		"deleteShotPlaylistPanel"
					-saveStateCallback	"saveStateShotPlaylistPanel"
					shotPlaylistPanel;

				source	"shotPlaylistPanel";
            }
			if (!`scriptedPanelType -exists graphEditor`) {
				//
				//  Define the callbacks for the graphEditor
				//
				scriptedPanelType
//					-sourceFile			"graphEditorPanel"
					-createCallback		"createGraphEditor" 
					-addCallback		"addGraphEditor"
					-removeCallback		"removeGraphEditor"
					-deleteCallback		"deleteGraphEditor"
					-saveStateCallback	"saveStateGraphEditor"
					graphEditor;

				source	"graphEditorPanel";
			}


			// ADSK_TIME_EDITOR_BEGIN

			if (mayaHasTimeEditorFeature()) {

				if (!`scriptedPanelType -exists cteEditor`) {
					//
					//  Define the callbacks for the cteEditor
					//
					scriptedPanelType
						-createCallback		"createCTEEditor" 
						-addCallback		"addCTEEditor"
						-removeCallback		"removeCTEEditor"
						-deleteCallback		"deleteCTEEditor"
						-saveStateCallback	"saveStateCTEEditor"
						cteEditor;

					source	"cteEditorPanel";
				}
			}

			// ADSK_TIME_EDITOR_END

			if (!`scriptedPanelType -exists rendRelPanel`) {
				//
				//  Define the callbacks for the rendering
				// 	relationship panel
				//
				scriptedPanelType
						-createCallback 	"createRendRelPanel"		
						-addCallback 		"addRendRelPanel"
						-removeCallback 	"removeRendRelPanel"
						-deleteCallback 	"deleteRendRelPanel"
						-saveStateCallback 	"saveStateRendRelPanel"
				  rendRelPanel;

				source	"rendRelPanel";
			}

			if (!`scriptedPanelType -exists componentEditorPanel`) {
				scriptedPanelType
					-createCallback		"createComponentEditorPanel" 
					-initCallback "initComponentEditorPanel"
					-addCallback		"addComponentEditorPanel"
					-removeCallback		"removeComponentEditorPanel" 
					-saveStateCallback	"saveComponentEditorPanel"
					componentEditorPanel;

				source	"componentEditorPanel";
			}

		}

		if (`isTrue MayaCreatorExists`) {
			if (!`scriptedPanelType -exists dynPaintScriptedPanelType`) {
				if ( !`exists dynPaintCreateCallback` ) {
					// Make sure that the script is loaded
					//
					source dynPaintPanel;
				}

				// This is duplicated from dynPaintPanel.mel
				scriptedPanelType
					-createCallback    "dynPaintCreateCallback"
					-initCallback      "dynPaintInitCallback" 
					-addCallback       "dynPaintAddCallback"
					-removeCallback    "dynPaintRemoveCallback"
					-deleteCallback    "dynPaintDeleteCallback"
					-saveStateCallback "dynPaintSaveStateCallback"
					-unique true
					dynPaintScriptedPanelType;
			}
		}

			if (!`scriptedPanelType -exists nodeEditorPanel`) {
				//
				//  Define the callbacks for the nodeEditor panel
				//
				scriptedPanelType
					-createCallback		"nodeEdCreateCallback" 
					-initCallback		"nodeEdInitCallback" 
					-addCallback		"nodeEdAddCallback"
					-removeCallback		"nodeEdRemoveCallback"
					-deleteCallback		"nodeEdDeleteCallback"
					-saveStateCallback	"nodeEdSaveStateCallback"
					nodeEditorPanel;

				source	"nodeEditorPanel";
			}

		if (`exists nodeTreeLister`) {
			if (!`scriptedPanelType -exists createNodePanel`) {
				source	"createNodePanel";

				//
				//  Define the callbacks for the createNode panel
				//
				scriptedPanelType
					-createCallback		"createNodeCreateCallback" 
					-initCallback		"createNodeInitCallback" 
					-addCallback		"createNodeAddCallback"
					-removeCallback		"createNodeRemoveCallback"
					-deleteCallback		"createNodeDeleteCallback"
					-saveStateCallback	"createNodeSaveStateCallback"
					createNodePanel;
			}
        }
	   	   	   	  
		if (`exists hyperGraph`) {
			if (!`scriptedPanelType -exists hyperGraphPanel`) {
				//
				//  Define the callbacks for the fullGraphPanel
				//
				scriptedPanelType
					-createCallback		"createHyperGraphPanel" 
					-initCallback		"initHyperGraphPanel" 
					-addCallback		"addHyperGraphPanel"
					-removeCallback		"removeHyperGraphPanel"
					-deleteCallback		"deleteHyperGraphPanel"
					-saveStateCallback	"saveStateHyperGraphPanel"
					hyperGraphPanel;

				source	"hyperGraphPanel";
			}

			if (!`scriptedPanelType -exists hyperShadePanel`) 
			{
				//
				//  Define the callbacks for the shader editor panel.
				//
				scriptedPanelType
					-createCallback		"createHyperShadePanel" 
					-initCallback		"initHyperShadePanel"
					-addCallback		"addHyperShadePanel"
					-removeCallback		"removeHyperShadePanel"
					-saveStateCallback	"saveStateHyperShadePanel"
					-deleteCallback		"deleteHyperShadePanel"
					-unique true
					hyperShadePanel;
					
				source "hyperShadePanel";
			}

			if (!`scriptedPanelType -exists visorPanel`) {
				//
				//  Define the callbacks for the fullGraphPanel
				//
				scriptedPanelType
					-createCallback		"createVisorPanel" 
					-addCallback		"addVisorPanel"
					-initCallback		"initVisorPanel" 
					-removeCallback		"removeVisorPanel"
					-deleteCallback		"deleteVisorPanel"
					-saveStateCallback	"saveStateVisorPanel"
					-unique true
					visorPanel;

				source	"visorPanel";
			}
		}
	   	   	   	   	   
        if (`isTrue "PolygonsExists"`) {
			if (!`scriptedPanelType -exists polySelectionConstraintPanel`) {
				scriptedPanelType
					-unique true
//					-createCallback		"createPolySelConstraintWindow" 
					-addCallback		"addPolySelConstraintWindow" 
					-removeCallback		"removePolySelConstraintWindow"
					-label (uiRes("m_initScriptedPanels.kPolySelectionConstraintPanel")) 
					polySelectionConstraintPanel;					

				source	"polySelConstraintPanel";
			}
			if (`isTrue "PolyTextureExists"`) {
				if (!`scriptedPanelType -exists polyTexturePlacementPanel`) {
					scriptedPanelType
						-unique true
//						-sourceFile			"texturePanel"
						-createCallback		"createTextureWindow" 
						-addCallback		"addTextureWindow" 
						-removeCallback		"removeTextureWindow" 
						polyTexturePlacementPanel;

					source	"texturePanel";
				}
			}
		}
	   	   	   	   	   	   	   	   	   	   	   	   	   	  	   	   	   	   	   	   	   	   	   	   	   	   	   	  
		// Rendering Panel
		if (`isTrue "RenderingExists"`) {

			// For the multilister we define a dummy panel for the sake 
			// of scenes saved before Maya 2010 which contain a multilister panel
			// 
			if (!`scriptedPanelType -exists multiListerPanel`) {
				scriptedPanelType
					-createCallback		"createMultiListerPanel" 
					-addCallback		"addMultiListerPanel"
					-removeCallback		"removeMultiListerPanel" 
					-saveStateCallback	"saveMultiListerPanel"
					-unique true
					multiListerPanel;

				source	"multiListerPanel";
			}
			

			if (!`scriptedPanelType -exists renderWindowPanel`) {
				scriptedPanelType
					-unique true
//					-sourceFile			"renderWindowPanel"
					-createCallback		"createRenderWindowPanel" 
					-addCallback		"addRenderWindowPanel" 
					-removeCallback		"removeRenderWindowPanel" 
					renderWindowPanel;

				source	"colorManagementRenderViewUtilities";
				source	"renderWindowPanel";
			}
			
		}

		if (`isTrue "DynamicsExists"`) {
			if (! `scriptedPanelType -exists dynRelEdPanel`) {
				scriptedPanelType 
	//				-sourceFile			"dynRelEditorPane"
					-createCallback		"createDynREPanel"
					-addCallback		"addDynREPanel" 
					-removeCallback		"removeDynREPanel"
					dynRelEdPanel;

				eval( "source \"dynRelEditorPane\"" );
			}
		}

		// Register the relationship editor. The relationship editor is a
		// generic editor which will perform tasks like light linking,
		// dynamics relationships, attribute connection.
		// Since the relationship editor is generic, it needs to be registered
		// regardless of what modules are present. Checking whether a
		// particular task of the relationship editor can be performed given
		// the available modules must be done in the relationship editor
		// itself.
		//
		if (!`scriptedPanelType -exists relationshipPanel`) 
		{
			//
			//  Define the callbacks for the relationship panel.
			//
			scriptedPanelType
				-createCallback		"createRelationshipPanel" 
				-initCallback		"initRelationshipPanel"
				-addCallback		"addRelationshipPanel"
				-removeCallback		"removeRelationshipPanel"
				-saveStateCallback	"saveStateRelationshipPanel"
				-deleteCallback		"deleteRelationshipPanel"
				relationshipPanel;
				
			eval( "source \"relationshipEditor\"" );
		}

		if (!`scriptedPanelType -exists referenceEditorPanel`) {
			scriptedPanelType
				-unique 		true
//				-sourceFile		"referenceEditorPanel"
				-createCallback	"createRefEdPanel"
				-addCallback	"addRefEdPanel"
				-removeCallback	"removeRefEdPanel"
				referenceEditorPanel;
			
			eval( "source \"referenceEditorPanel\"" );
		}

	   	   	   	   	   
		if (!`scriptedPanelType -exists componentEditorPanel`) {
			//
			//  Define the callbacks for the componentEditorPanel
			//
			scriptedPanelType
				-createCallback		"createComponentEditorPanel" 
				-addCallback		"addComponentEditorPanel"
				-removeCallback		"removeComponentEditorPanel"
				-deleteCallback		"deleteComponentEditorPanel"
				-saveStateCallback	"saveStateComponentEditorPanel"
				componentEditorPanel;

			eval( "source \"componentEditorPanel\"" );
        }


		source "blindDataEditor.mel";
		initBlindDataEditor();

		if (!`scriptedPanelType -exists webBrowserPanel`) {
			scriptedPanelType
				-createCallback		"createWebBrowserPanel" 
				-addCallback		"addWebBrowserPanel"
				-removeCallback		"removeWebBrowserPanel"
				-deleteCallback		"deleteWebBrowserPanel"
				-saveStateCallback	"saveStateWebBrowserPanel"
				-unique true
				-obsolete true
				webBrowserPanel;
		}
		eval ("source \"webBrowserPanel\"");

		global string $gScriptEditorPanel;
		if (!`scriptedPanelType -exists scriptEditorPanel`) {
			scriptedPanelType
					-createCallback		"createScriptEditorPanel" 
					-addCallback		"addScriptEditorPanel"
					-removeCallback		"removeScriptEditorPanel"
					-deleteCallback		"deleteScriptEditorPanel"
					-saveStateCallback	"saveStateScriptEditorPanel"
					-unique true
					-retainOnFileOpen true
					scriptEditorPanel;
			eval ("source \"scriptEditorPanel\"");
		}

	if (!`scriptedPanelType -exists profilerPanel`) {
		scriptedPanelType
			-addCallback		"addProfilerPanel"
			-unique true
			profilerPanel;		
		eval ("source \"profilerPanel\"");
	}

}