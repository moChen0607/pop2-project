// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  2014/04/22
//
//  Description:
//      This script defines various HUD-related procedures
//      for evaluation manager state feedback.
//


global proc int isEvaluatorSupported( string $evaluatorName )
//
//  Description:
//      Checks whether a given custom evaluator is available or not.
//
//  Arguments:
//      $evaluatorName - Name of the custom evaluator.
//
//  Returns:
//      1 if the custom evaluator is supported, 0 otherwise.
//
{
    $supportedModes = `evaluator -q`;
    $index = stringArrayFind( $evaluatorName , 0 , $supportedModes );
    
    return ( $index >= 0 );
}


global proc int isEvaluatorActive( string $evaluatorName )
//
//  Description:
//      Checks whether a given custom evaluator is active or not.
//
//  Arguments:
//      $evaluatorName - Name of the custom evaluator.
//
//  Returns:
//      1 if the custom evaluator is active, 0 otherwise.
//
{
    if ( isEvaluatorSupported( $evaluatorName ) )
    {
        return `evaluator -q -name $evaluatorName`;
    }
    else
    {
        // The mode is not  in the supported modes.
        return 0;
    }
}


global proc string[] getEvaluationManagerStatus()
//
//  Description:
//      Returns an array of strings describing the evaluation manager mode/state.
//
//  Returns:
//      An array of strings describing the evaluation manager mode/state:
//      - The array first string is the EM graph state.
//      - The array second string is the evaluation mode.
//      - The array third string is the OpenCL deformer evaluator active state.
//
{
    string $returnValue[3];
    
    string $currentMode[] = `evaluationManager -q -mode`;
    
    if ( size( $currentMode ) < 1 || $currentMode[0] == "off" )
    {
        $returnValue[0] = (uiRes("m_initHUDScriptsEvaluationManager.kHUDEMOff"));
        $returnValue[1] = (uiRes("m_initHUDScriptsEvaluationManager.kHUDEMDG"));
        $returnValue[2] = (uiRes("m_initHUDScriptsEvaluationManager.kHUDEMNotApplicable"));
    }
    else
    {
        // Graph ready state.
        if ( size( $currentMode ) > 1 )
        {
            $returnValue[0] = (uiRes("m_initHUDScriptsEvaluationManager.kHUDEMReady"));
        }
        else
        {
            $returnValue[0] = (uiRes("m_initHUDScriptsEvaluationManager.kHUDEMBuildingGraph"));
        }
        
        // Hard-coded string to display for each mode.
        if ( $currentMode[0] == "serialUncached" )
        {
            $returnValue[1] = (uiRes("m_initHUDScriptsEvaluationManager.kHUDEMSerialNotCached"));
        }
        else if ( $currentMode[0] == "serial" )
        {
            $returnValue[1] = (uiRes("m_initHUDScriptsEvaluationManager.kHUDEMSerial"));
        }
        else if ( $currentMode[0] == "parallel" )
        {
            $returnValue[1] = (uiRes("m_initHUDScriptsEvaluationManager.kHUDEMParallel"));
        }
        else
        {
            $returnValue[1] = "EM " + $currentMode[0];
        }

        if( ! `evaluationManager -q -enabled` )
        {
            $returnValue[1] = $returnValue[1] + (uiRes("m_initHUDScriptsEvaluationManager.kHUDEMDisabled"));
        }
        
        // OpenCL deformer state.
        if ( isEvaluatorSupported( "deformer" ) )
        {
            $returnValue[2] = `evaluator -name "deformer" -valueName "status" -q`;
        }
        else
        {
            $returnValue[2] = (uiRes("m_initHUDScriptsEvaluationManager.kHUDEMOpenCLNotLoaded"));
        }
    }
    
    return $returnValue;
}

global proc string getEvaluationManagerState()
//
//  Description:
//      Callback to get the evaluation manager state.
//      See getEvaluationManagerStatus() for possible values.
//
//  Returns:
//      A string describing the evaluation manager state.
//
{
    $status = getEvaluationManagerStatus();
    return $status[0];
}

global proc string getEvaluationManagerMode()
//
//  Description:
//      Callback to get the evaluation manager mode.
//      See getEvaluationManagerStatus() for possible values.
//
//  Returns:
//      A string describing the evaluation manager mode.
//
{
    $status = getEvaluationManagerStatus();
    return $status[1];
}

global proc string getEvaluationManagerOpenCLStatus()
//
//  Description:
//      Callback to get the OpenCL deformer evaluator active state.
//      See getEvaluationManagerStatus() for possible values.
//
//  Returns:
//      A string describing the OpenCL deformer evaluator active state.
//
{
    $status = getEvaluationManagerStatus();
    return $status[2];
}


proc string[] GetEvaluationManagerHUD()
//
//  Description:
//      Returns the names of HUD objects that display evaluation manager feedback.
//
//  Returns:
//      The names of evaluation manager HUD objects, which are:
//      - HUDEMMode
//      - HUDEMState
//      - HUDOpenCLOverride
//
{
    return { "HUDEMMode" , "HUDEMState" , "HUDOpenCLOverride" };
}

global proc RemoveEvaluationManagerHUD()
//
//  Description:
//      Removes the HUD elements that display evaluation manager feedback.
//
{
    for ( $element in GetEvaluationManagerHUD() )
    {
        if ( `headsUpDisplay -exists $element` )
        {
            headsUpDisplay -remove $element;
        }
    }
}

global proc UpdateEvaluationManagerHUDVisibility()
//
//  Description:
//      Update the visible evaluation manager HUD elements.
//
{
    int $currentVisibility = `optionVar -query evaluationVisibility`;

    SetEvaluationManagerHUDVisibility 0;
    if ($currentVisibility == 0)
        return;

    string $status[] = getEvaluationManagerStatus();
    string $hudElements[] = { "HUDEMMode" };
    if ($status[1] != uiRes("m_initHUDScriptsEvaluationManager.kHUDEMDG"))
    {
        $hudElements[1] = "HUDEMState";

        if (isEvaluatorActive( "deformer" ))
            $hudElements[2] = "HUDOpenCLOverride";
    }

    for ( $element in $hudElements )
    {
        if ( `headsUpDisplay -exists $element` )
        {
            headsUpDisplay -e -visible $currentVisibility $element;
        }
    }
}

global proc CreateEvaluationManagerHUD( int $section , int $labelWidth , int $dataWidth )
//
//  Description:
//      Creates the HUD elements that display evaluation manager feedback.
//
//  Arguments:
//      $section - Section to which to add the HUD elements (see headsUpDisplay for more info).
//      $labelWidth - Label width for the HUD elements (see headsUpDisplay for more info).
//      $dataWidth - Data width for the HUD elements (see headsUpDisplay for more info).
//      $visible - Whether or not the HUD elements should initially be visible.
//
{
    int $visible = `optionVar -query evaluationVisibility`;

    headsUpDisplay -section          $section
                   -labelWidth       $labelWidth
                   -dataWidth        $dataWidth
                   -visible          $visible
                   -block            `headsUpDisplay -nextFreeBlock $section`
                   -attachToRefresh
                   -label            (uiRes("m_initHUDScriptsEvaluationManager.kHUDLabelOpenCLOverride"))
                   -labelFontSize    "small"
                   -command          "getEvaluationManagerOpenCLStatus()"
                   HUDOpenCLOverride;

    headsUpDisplay -section          $section
                   -labelWidth       $labelWidth
                   -dataWidth        $dataWidth
                   -visible          $visible
                   -attachToRefresh
                   -block            `headsUpDisplay -nextFreeBlock $section`
                   -label            (uiRes("m_initHUDScriptsEvaluationManager.kHUDLabelEMState"))
                   -labelFontSize    "small"
                   -command          "getEvaluationManagerState()"
                   HUDEMState;

    headsUpDisplay -section          $section
                   -labelWidth       $labelWidth
                   -dataWidth        $dataWidth
                   -visible          $visible
                   -block            `headsUpDisplay -nextFreeBlock $section`
                   -attachToRefresh
                   -label            (uiRes("m_initHUDScriptsEvaluationManager.kHUDLabelEvaluation"))
                   -labelFontSize    "small"
                   -command          "getEvaluationManagerMode()"
                   HUDEMMode;

    UpdateEvaluationManagerHUDVisibility;
}

global proc SetEvaluationManagerHUDVisibility( int $newVisibleState )
//
//  Description:
//      Show or hide the HUD elements that display evaluation manager feedback.
//
//  Arguments:
//      $newVisibleState - 0 to hide the elements, non-0 to show them.
//
{
    for ( $element in GetEvaluationManagerHUD() )
    {
        if ( `headsUpDisplay -exists $element` )
        {
            headsUpDisplay -e -visible $newVisibleState $element;
        }
    }
}



global proc ToggleEvaluationManagerHUDVisibility()
//
//  Description:
//      Toggle visibility state for evaluation manager HUD elements.
//
{
    int $currentVisibility = `optionVar -query evaluationVisibility`;
    optionVar -iv "evaluationVisibility" (!$currentVisibility);
    UpdateEvaluationManagerHUDVisibility;
}

global proc WarnAboutSerialExecutionFallback()
{
    warning (uiRes("m_initHUDScriptsEvaluationManager.kWarningSerialFallback"));
}




//
//  Let's define various procedures to help setup
//  the evaluation manager shelf.
//


global proc ToggleEvaluator( string $evaluatorName )
//
//  Description:
//       Toggles the enabled/disabled state of a given a custom evaluator name.
//
//  Arguments:
//      $evaluatorName - Name of the custom evaluator.
//
{
    if ( isEvaluatorActive( $evaluatorName ) )
    {
        // Deactivate the deformer.
        evaluator -enable off -name $evaluatorName;
    }
    else
    {
        // Activate the deformer.
        string $pluginName = $evaluatorName + "Evaluator";
        if ( !`pluginInfo -q -loaded $pluginName` )
        {
            loadPlugin( $pluginName );
        }
        evaluator -enable on -name $evaluatorName;
        evaluator -enable on -name $evaluatorName -nodeType "TdependNode" -nodeTypeChildren;
    }
}


//
// Definitions of the callback for each button of the shelf.
//
// Using a function call per button allows us to change the code
// associated with a button without changing the shelf itself
// that might already be in user settings.
//

global proc setEvaluationManagerModeDefaultDG()
//
//  Description:
//      Callback that sets the evaluation mode to regular Maya evaluation.
//
{
    catch ( `evaluationManager -mode "off"` );
    
    SetEvaluationManagerHUDVisibility( 0 );
    
    // Trigger an evaluation so that the graph is rebuilt after changing mode.
    currentTime `currentTime -q`;
    // Force refresh of HUD elements.
    refresh -force;
}

global proc setEvaluationManagerModeSerial()
//
//  Description:
//      Callback that sets the evaluation mode to serial (cached) evaluation.
//
{
    catch ( `evaluationManager -mode "serial"` );
    
    SetEvaluationManagerHUDVisibility( 1 );
    
    // Trigger an evaluation so that the graph is rebuilt after changing mode.
    currentTime `currentTime -q`;
    // Force refresh of HUD elements.
    refresh -force;
}

global proc setEvaluationManagerModeParallel()
//
//  Description:
//      Callback that sets the evaluation mode to parallel evaluation.
//
{
    catch ( `evaluationManager -mode "parallel"` );
    
    SetEvaluationManagerHUDVisibility( 1 );
    
    // Trigger an evaluation so that the graph is rebuilt after changing mode.
    currentTime `currentTime -q`;
    // Force refresh of HUD elements.
    refresh -force;
}

global proc turnOnOpenCLEvaluatorActive()
//  Description:
//      allback that turn on the OpenCL deformer evaluator active state.
//
{
	if(!isEvaluatorActive( "deformer" ))
	{
		toggleOpenCLEvaluator();
	}
}

global proc turnOffOpenCLEvaluatorActive()
//  Description:
//      Callback that turn off the OpenCL deformer evaluator active state.
//
{
	if(isEvaluatorActive( "deformer" ))
	{
		toggleOpenCLEvaluator();
	}
}


global proc toggleOpenCLEvaluator()
//
//  Description:
//      Callback that toggles the OpenCL deformer evaluator active state.
//
{
    // This will only do something the first time the toggle is hit.
    // The plug-in is not unloaded when toggling off.
    if ( !`pluginInfo -q -loaded "GPUBuiltInDeformer"` )
    {
        loadPlugin( "GPUBuiltInDeformer" );
    }
    
    catch ( `ToggleEvaluator( "deformer" )` );
    
    // Trigger an evaluation so that the graph is rebuilt after enabling/disabling evaluator.
    currentTime `currentTime -q`;
    // Force refresh of HUD elements.
    refresh -force;
}

global proc toggleEvaluationManagerManipulation()
//
//  Description:
//      Callback that toggles the evaluation manager manipulation active state.
//
{
    if ( `evaluationManager -q -manipulation` )
    {
        evaluationManager -manipulation off;
        warning (uiRes("m_initHUDScriptsEvaluationManager.kEMManipulationOff"));
    }
    else
    {
        evaluationManager -manipulation on;
        warning (uiRes("m_initHUDScriptsEvaluationManager.kEMManipulationOn"));
    }
}
