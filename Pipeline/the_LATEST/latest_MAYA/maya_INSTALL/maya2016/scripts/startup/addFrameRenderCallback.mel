// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Dec 2014
//
//  Description:	Add and remove callbacks triggered before or after rendering a frame.
//
//
//<doc>
//<name addFrameRenderCallback>
//
//<synopsis>
//	addFrameRenderCallback (string $beforeOrAfter, string $commandString)
//
//<description>
//      This proc registers a user-defined command string which will be triggered before or after rendering a frame.
//
//<flags>
//		string $beforeOrAfter	A string, either "before" or "after", to specify the callback type.
//		string $commandString	The callback function to be triggered before or after rendering a frame.
//
//<returns>
//
//<examples>
//	addFrameRenderCallback("after", "clearUpMyRendererResource()");
//	removeFrameRenderCallback("after", "clearUpMyRendererResource()");
//
//</doc>
//

global string $gBeforeFrameRenderCallbacks[];
global string $gAfterFrameRenderCallbacks[];

global proc addFrameRenderCallback(string $beforeOrAfter, string $commandString)
{
	global string $gBeforeFrameRenderCallbacks[];
	global string $gAfterFrameRenderCallbacks[];
	if ($beforeOrAfter=="before") {
		$gBeforeFrameRenderCallbacks[size($gBeforeFrameRenderCallbacks)] = $commandString;
	}
	else {
		$gAfterFrameRenderCallbacks[size($gAfterFrameRenderCallbacks)] = $commandString;
	}
}

global proc removeFrameRenderCallback(string $beforeOrAfter, string $commandString)
{
	global string $gBeforeFrameRenderCallbacks[];
	global string $gAfterFrameRenderCallbacks[];

	if ($beforeOrAfter=="before") {
		int $index = stringArrayFind($commandString, 0, $gBeforeFrameRenderCallbacks);
		if (-1 != $index) {
			stringArrayRemoveAtIndex($index, $gBeforeFrameRenderCallbacks);
		}
	}
	else {
		int $index = stringArrayFind($commandString, 0, $gAfterFrameRenderCallbacks);
		if (-1 != $index) {
			stringArrayRemoveAtIndex($index, $gAfterFrameRenderCallbacks);
		}
	}
}

