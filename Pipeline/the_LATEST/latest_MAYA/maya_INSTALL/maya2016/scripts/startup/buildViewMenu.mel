// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//
//  Procedure Name:
//      buildViewMenu
//
//  Description:
//		Builds all the items in the View menu when
//		the user clicks on the menu.  Checks to see if
//		there are any children in the menu already, and
//		if so, doesn't rebuild the menu.
//
//  Input Arguments:
//      Name of the parent menu.
//
//  Return Value:
//      None.
//


global proc buildViewMenu( string $parent )
{
    string $menu;
	setParent -menu $parent;

	if( `menu -q -ni $parent` != 0 ) {
		//
		//	Menu is already built - just return
		//
		return;
	}
	
	WindowMenu $parent;

    menuItem -divider true -dividerLabel (uiRes("m_buildViewMenu.kViewEditorLayout"));

    menuItem -label (uiRes("m_buildViewMenu.kViewArrangement"))  -subMenu true -tearOff true;

        menuItem -label (localizedPanelLabel("Single Pane" ))
			-command "SingleViewArrangement"
			-annotation (getRunTimeCommandAnnotation("SingleViewArrangement"));

        menuItem -label (localizedPanelLabel("Two Panes Side by Side" ))
			-command "TwoSideBySideViewArrangement"
			-annotation (getRunTimeCommandAnnotation("TwoSideBySideViewArrangement"));

		menuItem -label (localizedPanelLabel("Two Panes Stacked" ))
			-command "TwoStackedViewArrangement"
			-annotation (getRunTimeCommandAnnotation("TwoStackedViewArrangement"));

		menuItem -label (localizedPanelLabel("Three Panes Split Top" ))
			-command "ThreeTopSplitViewArrangement"
			-annotation (getRunTimeCommandAnnotation("ThreeTopSplitViewArrangement"));

        menuItem -label (localizedPanelLabel("Three Panes Split Left" ))
			-command "ThreeLeftSplitViewArrangement"
			-annotation (getRunTimeCommandAnnotation("ThreeLeftSplitViewArrangement"));

        menuItem -label (localizedPanelLabel("Three Panes Split Bottom" ))
			-command "ThreeBottomSplitViewArrangement"
			-annotation (getRunTimeCommandAnnotation("ThreeBottomSplitViewArrangement"));

        menuItem -label (localizedPanelLabel("Three Panes Split Right" ))
			-command "ThreeRightSplitViewArrangement"
			-annotation (getRunTimeCommandAnnotation("ThreeRightSplitViewArrangement"));

		menuItem -label (localizedPanelLabel("Four Panes" ))
			-command "FourViewArrangement"
			-annotation (getRunTimeCommandAnnotation("FourViewArrangement"));
		
		menuItem -divider true;

		menuItem -label (uiRes("m_buildViewMenu.kPreviousArrangement"))  
			-annotation (getRunTimeCommandAnnotation("PreviousViewArrangement"))
			-command "PreviousViewArrangement";

        menuItem -label (uiRes("m_buildViewMenu.kNextArrangement"))  
			-annotation (getRunTimeCommandAnnotation("NextViewArrangement"))
			-command "NextViewArrangement";

    setParent -menu ..;

	$menu = `menuItem -label (uiRes("m_buildViewMenu.kSavedLayouts"))  -subMenu true`;
	menuItem -e -postMenuCommand ("buildNamedArrangementsNow " + $menu) $menu;
	setParent -menu ..;

	menuItem -label (uiRes("m_buildViewMenu.kSaveCurrentLayout"))  
		-annotation (uiRes("m_buildViewMenu.kSaveCurrentLayoutAnnot")) 
		-c "SaveCurrentLayout";

	menuItem -divider true -ld false;

    menuItem -label (uiRes("m_buildViewMenu.kFrameAllInAllViews"))  
		-annotation (uiRes("m_buildViewMenu.kFrameAllInAllViewsAnnot")) 
		-c "FrameAllInAllViews";
    menuItem -label (uiRes("m_buildViewMenu.kFrameSelInAllViews"))  
		-annotation (uiRes("m_buildViewMenu.kFrameSelInAllViewsAnnot")) 
		-c "FrameSelectedInAllViews";

    menuItem -divider true -ld false;

	if (!`about -mac`) {
		menuItem -label (uiRes("m_buildViewMenu.kMinimizeApplication"))  
			-annotation (uiRes("m_buildViewMenu.kMinimizeApplicationAnnot")) 
			-command "MinimizeApplication";
	}

	menuItem -label (uiRes("m_buildViewMenu.kRaiseMainWindow")) 
		-annotation (uiRes("m_buildViewMenu.kRaiseMainWindowAnnot")) 
		-command "RaiseMainWindow";

	menuItem -label (uiRes("m_buildViewMenu.kRaiseAppWindows"))  
		-annotation (uiRes("m_buildViewMenu.kRaiseAppWindowsAnnot")) 
		-command "RaiseApplicationWindows";
}
