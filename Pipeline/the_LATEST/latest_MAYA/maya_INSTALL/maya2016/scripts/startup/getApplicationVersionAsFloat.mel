// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  10.May.2002
//
//<doc>
//<name getApplicationVersionAsFloat>
//<owner "Alias">
//
//<synopsis>
//		getApplicationVersionAsFloat()
//
//<returns>
//		float : Value containing the major and minor version numbers.
//
//<description>
//		Return the application version number as a float value.
//		<p>
//		If you use the "about -version" command you get a string
//		value containing the application version. Strings of course
//		may not be used in comparisons like:
//		<p>
//		if ($version > 3.5) { ... };
//		<p>
//		This procedure will return a float value containing the
//		major and minor version number. The major version will be
//		separated from the minor version by a decimal. For example,
//		4.0.3 will return a float value of 4.03.
//
//<examples>
//	if (getApplicationVersionAsFloat() >= 2.5) {
//		print ("Running version 2.5 or higher\n");
//	};
//
//</doc>
//
global proc float getApplicationVersionAsFloat()
{
	float $version = 0.0;
	string $result;
	string $versionString = `about -version`;

	//	The following regular expression will ensure a string begins 
	//	with a digit and strip out any non-numeric characters. You will be 
	//	left with a result that looks like the following (where N is 
	//	one more digits).
	//
	//	N
	//	N.N
	//	N.N.N
	//	N.N.N.N
	//
	string $regularExpression = "^[0-9]+[.]*[0-9]*[.]*[0-9]*[.]*[0-9]*";
	$result = `match $regularExpression $versionString`;
	if ("" != $result) {
		//
		//	Determine the major, minor and patch numbers by tokenizing
		//	the string with the period character.
		//
		//	The first token will become the whole value left of the
		//	decimal point. The remaing tokens will be appended together
		//	to form the fractional part to the right of the decimal.
		//
		//	For example, N.N.N.N will become N.NNN.
		//
		string $tokenArray[];
		int $tokenCount;
		$tokenCount= `tokenize $result "." $tokenArray`;
		$result = "";
		for ($index = 0; $index < $tokenCount; $index++) {
			$result += $tokenArray[$index];
			if ($index == 0 && $tokenCount > 1) {
				$result += ".";
			}
		}
		$version = $result;
	}
	
	// If the version could not be determined from the version string parsing
	// then retrieve it from the apiVersion using `about -apiVersion`.
	//
	// Note:
	//     The version retrieved from the apiVersion returns only the N.N
	//     (major.minor) version values.
	//
	// Recommendation:
	//     If only the major.minor version values are needed, then
	//     consider using `about -apiVersion` directly instead of
	//     getApplicationVersionAsFloat().  See the `about` command for details
	//     on the value returned.
	//
	if ($version == 0) {
		$version = `about -apiVersion` / 100.0;
	}

	return $version;
}
