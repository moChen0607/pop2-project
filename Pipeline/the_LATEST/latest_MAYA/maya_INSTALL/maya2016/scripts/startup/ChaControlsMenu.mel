// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  12 June 2014
//
//
//  Procedure Name:
//      ChaControlsMenu
//
//  Description:
//		Create the Rigging->Control menu
//
//  Input Arguments:
//      parent to parent the menu to.
//
//  Return Value:
//      None.
//

global proc ChaControlsMenu( string $parent )
{
	int $dimWhenNoSelect = 0;

	setParent -menu $parent;
	if( `menu -q -ni $parent` != 0 ) {
		//
		//	Menu is built already - just return
		//
		return;
	}

	//createControllersMenu $parent;

	menuItem -divider true -dividerLabel  (uiRes("m_ChaControlsMenu.kRigCtlHIK"));

		menuItem 
			-label (uiRes("m_ChaControlsMenu.kRigCreateControlRig"))
			-annotation (uiRes("m_ChaControlsMenu.kRigCreateControlRigAnnot"))
			-command "HIKCharacterControlsTool;hikCreateControlRig;hikOnSwitchContextualTabs" 
			createControlRig;

	// ----- Character Set -----
	// Important:
	//		These character set menu items are replicated in the animation menuset inside AniKeyMenu.mel
	//		If you are making changes to these items, please confirm update the corresponding item in AniKeyMenu.mel.
	//
	//		Also, if you update createSelectCharNodesMenu() and createSelectCharMenu() proc, please also remember to update
	//		the corresponding duplicate in AniKeyMenu.mel.
	menuItem -divider true -dividerLabel  (uiRes("m_ChaControlsMenu.kRigCtlCharacterSet"));

		menuItem -label (uiRes("m_ChaControlsMenu.kCreateChar"))  
			-annotation (uiRes("m_ChaControlsMenu.kCreateCharAnnot")) 
			-c "CreateCharacter" 
			-dragMenuCommand "performCreateCharacter 2" 
			createCharacterItem;
			menuItem -optionBox true
				-annotation (uiRes("m_ChaControlsMenu.kCreateCharOptAnnot")) 
				-c "CreateCharacterOptions"
				createCharacterDialogItem; 

		menuItem -label (uiRes("m_ChaControlsMenu.kCreateSubChar")) 
			-annotation (uiRes("m_ChaControlsMenu.kCreateSubCharAnnot"))
			-c "CreateSubCharacter"
			-dragMenuCommand "performCreateSubcharacter 2"
			createSubCharacterItem;
			menuItem -optionBox true
				-annotation (uiRes("m_ChaControlsMenu.kCreateSubCharOptAnnot")) 
				-c "CreateSubCharacterOptions"
				createSubCharacterDialogItem; 

		menuItem -label (uiRes("m_ChaControlsMenu.kCharMapper")) 
			-annotation (uiRes("m_ChaControlsMenu.kCharMapperAnnot")) 
			-command "CharacterMapper";

		menuItem -label (localizedUIComponentLabel("Attribute Editor"))
			-annotation (uiRes("m_ChaControlsMenu.kAttrEdAnnot")) 
			-command "EditCharacterAttributes" 
			editCharacterAttributesItem;

		menuItem -divider true -longDivider false;

		menuItem -label (uiRes("m_ChaControlsMenu.kAddToChararacter")) 
			-annotation (uiRes("m_ChaControlsMenu.kAddToCharacterAnnot")) 
			-c "AddToCharacterSet"
			addCharacterItem;

		menuItem -label (uiRes("m_ChaControlsMenu.kRemoveFromCharacter")) 
			-annotation (uiRes("m_ChaControlsMenu.kRemoveFromCharacterAnnot"))
			-c "RemoveFromCharacterSet"
			removeCharacterItem;

		menuItem -label (uiRes("m_ChaControlsMenu.kMergeCharacters")) 
			-annotation (uiRes("m_ChaControlsMenu.kMergeCharactersAnnot"))
			-c "MergeCharacterSet"
			mergeCharacterItem;

		menuItem -divider true -longDivider false;

		menuItem -label (uiRes("m_ChaControlsMenu.kSelectCharacterNode"))  -sm true -aob true
			selectCharSMItem;
			menu -e -pmc "createSelectCharMenu selectCharSMItem" 
				selectCharSMItem;
			setParent -menu ..;

		menuItem -label (uiRes("m_ChaControlsMenu.kSelectCharacterMembers"))  -sm true -aob true
			selectCharNodesSMItem;
			menu -e -pmc "createSelectCharNodesMenu selectCharNodesSMItem" 
				selectCharNodesSMItem;
			setParent -menu ..;

		menuItem -label (uiRes("m_ChaControlsMenu.kSetCurrentChar"))  -sm true setCharSMItem;
			menu -e -pmc "buildSetCharacterMenu setCharSMItem" setCharSMItem;
			setParent -menu ..;

		menuItem -label (uiRes("m_ChaControlsMenu.kRedirect")) 
			-annotation (uiRes("m_ChaControlsMenu.kRedirectAnnot")) 
			-c "AddAnimationOffset" 
			-dragMenuCommand "addAnimationOffset" 
			addAnimationOffset;
			menuItem -optionBox true
				-annotation (uiRes("m_ChaControlsMenu.kRedirectOptAnoot")) 
				-c "AddAnimationOffsetOptions"
				addAnimationOffsetDialogItem; 

		setParent -menu ..;

	setParent -m ..;
}

//
//  Procedure Name:
//      createSelectCharNodesMenu
//
//  Description:
//		Create the menu for selecting all of the nodes in
//      a particular character.
//
//  Input Arguments:
//      $parent - parent menu
//
//  Return Value:
//      None
//
global proc createSelectCharNodesMenu( string $parent )
{
	string $cmd;
	string $annotation;
	string $format;

	setParent -menu $parent;
	menu -e -dai $parent;

	//	Get characters in system
	//
	string $characters[] = `ls -type character`;

	if( `size $characters` == 0 ) {
		menuItem -label (uiRes("m_ChaControlsMenu.kNoCharacterSets"))  -enable false;
	} else {
		for( $character in $characters ) {
			$cmd = ( "select -cl;selectNodesInCharacter( \"" + $character + "\" )" );
			$format = (uiRes("m_ChaControlsMenu.kSelectNodesInCharacter"));
			$annotation = `format -stringArg $character $format`;
			menuItem -label $character -c $cmd -annotation $annotation;
		}
	}
}

//
//  Procedure Name:
//      createSelectCharMenu
//
//  Description:
//		Create the menu for selecting characters quickly
//
//  Input Arguments:
//      $parent - parent menu
//
//  Return Value:
//      None
//
global proc createSelectCharMenu( string $parent ) {
	string $cmd;
	string $annotation;
	string $format;

	setParent -menu $parent;
	menu -e -dai $parent;

	//	Get characters in system
	//
	string $characters[] = `ls -type character`;

	if( `size $characters` == 0 ) {
		menuItem -label (uiRes("m_ChaControlsMenu.kNoCharacterSets2"))  -enable false;
	} else {
		for( $character in $characters ) {
			$cmd = ( "select -r \"" + $character + "\"" );
			$format = (uiRes("m_ChaControlsMenu.kSelect"));
			$annotation = `format -stringArg $character $format`;
			menuItem -label $character -c $cmd -annotation $annotation;
		}
	}
}
