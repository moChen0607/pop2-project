// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc ShowRiggingDeformationMenu()
{
	global string $gRigDeformationsMenu;
	ChaDeformationsMenu($gRigDeformationsMenu);

	python("from PySide.QtCore import *");
	python("from PySide.QtGui  import *");
	python("from shiboken import wrapInstance");
	python("ptr = maya.OpenMayaUI.MQtUtil.findControl(maya.mel.eval( 'string $tempString = $gRigDeformationsMenu' ))") ; 
	python("wrapInstance(long(ptr), QMenu).showTearOffMenu()");
}

global proc AniDeformationsMenu( string $parent )
{
	setParent -menu $parent;
	if( `menu -q -ni $parent` != 0 ) {
		//
		//	Menu is built already - just return
		//
		return;
	}

	menuItem -divider true -dividerLabel (uiRes("m_AniDeformationsMenu.kDeformationCreate"));

		menuItem -label (uiRes("m_AniDeformationsMenu.kCreateBlendShape")) 
			-image "blendShape.png"
			-annotation (uiRes("m_AniDeformationsMenu.kCreateBlendShapeAnnot")) 
			-command "CreateBlendShape"
			blendShapeItem;
			menuItem -optionBox true 
				-annotation (uiRes("m_AniDeformationsMenu.kBlendShapeOptionAnnot")) 
				-image "blendShape.png"
				-command "CreateBlendShapeOptions"
				blendShapeDialogItem;

		menuItem -label (uiRes("m_AniDeformationsMenu.kCreateLattice")) 
			-image "lattice.png"
			-annotation (uiRes("m_AniDeformationsMenu.kCreateLatticeAnnot")) 
			-command "CreateLattice" latticeItem;
			menuItem -optionBox true 
				-annotation (uiRes("m_AniDeformationsMenu.kLatticeOptionAnnot")) 
				-image "lattice.png"
				-command "CreateLatticeOptions" 
				latticeDialogItem;

	setParent -m ..;

	menuItem -divider true -dividerLabel (uiRes("m_AniDeformationsMenu.kDeformationEdit"));

		menuItem -label (uiRes("m_AniDeformationsMenu.kEditBlendShape"))  -aob true -subMenu true -tearOff true;
			menuItem -label (uiRes("m_AniDeformationsMenu.kAdd")) 
				-image "blendShapePlus.png"
				-annotation (uiRes("m_AniDeformationsMenu.kAddAnnot")) 
				-command "AddBlendShape";
				menuItem -optionBox true 
					-annotation (uiRes("m_AniDeformationsMenu.kAddOptionAnnot")) 
					-image "blendShapePlus.png"
					-command "AddBlendShapeOptions";

			menuItem -label (uiRes("m_AniDeformationsMenu.kRemove")) 
				-annotation (uiRes("m_AniDeformationsMenu.kRemoveAnnot")) 
				-image "removeBlendShape.png"
				-command "RemoveBlendShape";
				menuItem -optionBox true
					-annotation (uiRes("m_AniDeformationsMenu.kRemoveOptionAnnot")) 
					-image "removeBlendShape.png"
					-command "RemoveBlendShapeOptions";

			menuItem -label (uiRes("m_AniDeformationsMenu.kSwap")) 
				-annotation (uiRes("m_AniDeformationsMenu.kSwapAnnot")) 
				-image "swapBlendShape.png"
				-command "SwapBlendShape";
				menuItem -optionBox true
					-annotation (uiRes("m_AniDeformationsMenu.kSwapOptionAnnot")) 
					-image "swapBlendShape.png"
					-command "SwapBlendShapeOptions";

			menuItem -label (uiRes("m_AniDeformationsMenu.kBakeTopologyToTargets")) 
				-annotation (uiRes("m_AniDeformationsMenu.kBakeTopologyToTargetsAnnot")) 
				-image "bakeBlendShape.png"
				-command "BakeTopologyToTargets" bakeTopologyToTargetsItem;

			menuItem -label (uiRes("m_AniDeformationsMenu.kEditNormalizationGroups")) 
				-annotation (uiRes("m_AniDeformationsMenu.kEditNormalizationGroupsAnnot")) 
				-command "editNormalizationGroups" editNormalizationGroupsItem;
			setParent -m ..;

			int $dimWhenNoSelect = 0;

		menuItem -subMenu true -label (uiRes("m_AniDeformationsMenu.kEditLattice"))  -to true;
			menuItem -label (uiRes("m_AniDeformationsMenu.kRemoveLatticeTweaks"))  
				-annotation (uiRes("m_AniDeformationsMenu.kRemoveLatticeTweaksAnnot")) 
				-image "removeTweaks.png"
				-command "RemoveLatticeTweaks" resetLatticeTweaksItem;
			if ($dimWhenNoSelect)
				dimWhen -f "SomethingSelected" resetLatticeTweaksItem;

			menuItem -label (uiRes("m_AniDeformationsMenu.kResetLattice"))  
				-annotation (uiRes("m_AniDeformationsMenu.kResetLatticeAnnot")) 
				-image "resetLattice.png"
				-command "ResetLattice" resetLatticeItem;
			if ($dimWhenNoSelect)
				dimWhen -f "SomethingSelected" resetLatticeItem;

				setParent -menu ..;

	setParent -m ..;

	menuItem -divider true -longDivider false;

	menuItem -label (uiRes("m_AniDeformationsMenu.kFullDeformationMenu")) 
		-annotation (uiRes("m_AniDeformationsMenu.kFullDeformationMenuAnnot")) 
		-command ("ShowRiggingDeformationMenu")
		fullDeformerMenu;

	setParent -m ..;

}