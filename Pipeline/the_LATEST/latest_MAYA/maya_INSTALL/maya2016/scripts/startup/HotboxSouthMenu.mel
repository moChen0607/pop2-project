// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  31 May 1997
//
//  Procedure Name:
//      HotboxSouthMenu
//
//  Description:
//		Create the user customizable Hotbox South Menu for hotbox
//
//  Input Arguments:
//      parent to parent the menu to.
//
//  Return Value:
//      None.
//




global proc switchPanelToType(string $panelType) {
	string $curPanel = `getPanel -withFocus`;
	string $firstPanel;
	
	if ($curPanel == "" || $panelType == "")
		return;
	
	// If the panel is torn-off then abort operation.
	//
	int $tornOff = `panel -q -tearOff $curPanel`;
	if ($tornOff) return;


	string $allPanelsOfType[];
	switch ($panelType) {
		case "Outliner":
			$allPanelsOfType = `getPanel -typ outlinerPanel`;
			$firstPanel = $allPanelsOfType[0];
			if ($firstPanel != "" && !`panel -q -to $firstPanel`)
				outlinerPanel -e -rp $curPanel $firstPanel;
			break;

		case "GraphEditor":
			$allPanelsOfType = `getPanel -sty graphEditor`;
			$firstPanel = $allPanelsOfType[0];
			if ($firstPanel != "" && !`panel -q -to $firstPanel`)
				scriptedPanel -e -rp $curPanel $firstPanel;
			break;

		case "DopeSheet":
			$allPanelsOfType = `getPanel -sty dopeSheetPanel`;
			$firstPanel = $allPanelsOfType[0];
			if ($firstPanel != "" && !`panel -q -to $firstPanel`)
				scriptedPanel -e -rp $curPanel $firstPanel;
			break;

		case "NodeEditor":
			string $allPanelsOfType[] = `getPanel -sty nodeEditorPanel`;
			$firstPanel = $allPanelsOfType[0];
			if ($firstPanel != "" && !`panel -q -to $firstPanel`)
				scriptedPanel -e -rp $curPanel $firstPanel;
			break;

		case "Hypergraph":
            $firstPanel = getHyperGraphPanel("DAG");
            hyperGraphReplacePanel($curPanel, $firstPanel);
            string $editor = $firstPanel+"HyperGraphEd";
            showDAGLevel $editor;
			break;

		case "Hypershade":
			$allPanelsOfType = `getPanel -sty hyperShadePanel`;
			$firstPanel = $allPanelsOfType[0];
			if ($firstPanel != "" && !`panel -q -to $firstPanel`)
				scriptedPanel -e -rp $curPanel $firstPanel;
			break;
			
		case "DynRelationships":
			$allPanelsOfType = `getPanel -sty dynRelEdPanel`;
			$firstPanel = $allPanelsOfType[0];
			if ($firstPanel != "" && !`panel -q -to $firstPanel`)
				scriptedPanel -e -rp $curPanel $firstPanel;
			break;

		case "RenderView":
			$allPanelsOfType = `getPanel -sty renderWindowPanel`;
			$firstPanel = $allPanelsOfType[0];
			if ($firstPanel != "" && !`panel -q -to $firstPanel`)
				scriptedPanel -e -rp $curPanel $firstPanel;
			break;

		case "SetEditor":
			$allPanelsOfType = `getPanel -sty relationshipPanel`;
			$firstPanel = $allPanelsOfType[0];
			if ($firstPanel != "" && !`panel -q -to $firstPanel`)
				scriptedPanel -e -rp $curPanel $firstPanel;
				relationshipEditorBeginTask($firstPanel,"setMembership");
			break;

	}	

    // ensure that panes are drawn
    global string $gMainPane;
    if ( `about -mac` && $gMainPane != "")
        paneLayout -e -manage true $gMainPane;

}



global proc HotboxSouthMenu( string $parent )
{
	setParent -m $parent;
	if( `menu -q -ni $parent` != 0 ) {
		//
		//	Menu is built already - just return
		//
		return;
	}


	menuItem -rp "N" -label (localizedPanelLabel("Outliner"))  
		-c "switchPanelToType Outliner";

	menuItem -rp "E" -label (localizedPanelLabel("Graph Editor"))  
		-c "switchPanelToType GraphEditor";

	menuItem -rp "SE" -label (localizedPanelLabel("Dope Sheet"))  
		-c "switchPanelToType DopeSheet";

	menuItem -rp "S" -label (localizedPanelLabel("Hypergraph"))  
		-c "switchPanelToType Hypergraph";

	menuItem -rp "SW" -label (localizedPanelLabel("Node Editor"))  
		-c "switchPanelToType NodeEditor";

	menuItem -rp "W" -label (localizedPanelLabel("Hypershade"))  
		-c "switchPanelToType Hypershade";

	menuItem -rp "NW" -label (localizedPanelLabel("Render View"))  
		-c "switchPanelToType RenderView";
			
	menuItem -rp "NE" -label (localizedHotboxMenuItem("Set Editor"))  
		-c "switchPanelToType SetEditor";

    setParent -m ..;

}
