// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Jan 2000
//
//  Description:
//
//	Create new versions of all of the option vars so that we can
//	restore the state when Cancel is used.
//
//	Note: If adding preferences, make sure to read
//	http://torw3/maya/TechDoc/CodingGuides/addingPreferences.html
//

global proc prefsHoldCurrentState (string $mode)
//
//	$mode = "save" to save a copy of the current pref optVars
//		  = "restore" to restore the values from the saved version
//		  = "delete" to delete the temporary option vars
//
{

	//----------------------------------------------------------
	// Interface Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -sv "mayaModeHold"				`optionVar -q mayaMode`;
		optionVar -iv "mainWindowMenubarVisHold"	`optionVar -q mainWindowMenubarVis`;
		optionVar -iv "collapseIconBarsInPanelsHold"	`optionVar -q collapseIconBarsInPanels`;
		optionVar -iv "allowMenusInPanelsHold"		`optionVar -q allowMenusInPanels`;
		optionVar -iv "mainWindowTitleBarVisHold"	`optionVar -q mainWindowTitleBarVis`;
		optionVar -iv "cmdWindowTitleBarVisHold"	`optionVar -q cmdWindowTitleBarVis`;
		optionVar -iv "commandLineHoldFocusHold"	`optionVar -q commandLineHoldFocus`;
		optionVar -iv "showIconsInMenusHold"		`optionVar -q showIconsInMenus`;
		optionVar -iv "saveWindowPosHold"			`optionVar -q saveWindowPos`;
		optionVar -iv "channelsLayersSeparateHold"	`optionVar -q channelsLayersSeparate`;
		optionVar -iv "EEexprEdTextEditorHold"		`optionVar -q EEexprEdTextEditor`;
		optionVar -iv "displayNewFeatureHighlightsHold"	`optionVar -q displayNewFeatureHighlights`;
		optionVar -iv "showHighlightNewFeaturesWindowOnStartupHold"	`optionVar -q showHighlightNewFeaturesWindowOnStartup`;
		float $color[] = `optionVar -q newFeatureHighlightColor`;
		optionVar -fv newFeatureHighlightColorHold $color[0];
		optionVar -fva newFeatureHighlightColorHold $color[1];
		optionVar -fva newFeatureHighlightColorHold $color[2];
		optionVar -iv "mayaMacButtonMapHold"		`optionVar -q mayaMacButtonMap`;
		optionVar -iv "useScrollWheelHold"			`optionVar -q useScrollWheel`;
		optionVar -iv "interfaceScalingModeHold"		`optionVar -q interfaceScalingMode`;
		optionVar -fv "interfaceScalingValueHold"			`optionVar -q interfaceScalingValue`; 
	} else if ($mode == "restore") {
		optionVar -sv "mayaMode"					`optionVar -q mayaModeHold`;
		optionVar -iv "mainWindowMenubarVis"		`optionVar -q mainWindowMenubarVisHold`;
		optionVar -iv "collapseIconBarsInPanels"		`optionVar -q collapseIconBarsInPanelsHold`;
		optionVar -iv "allowMenusInPanels"			`optionVar -q allowMenusInPanelsHold`;
		optionVar -iv "mainWindowTitleBarVis"		`optionVar -q mainWindowTitleBarVisHold`;
		optionVar -iv "cmdWindowTitleBarVis"		`optionVar -q cmdWindowTitleBarVisHold`;
		optionVar -iv "commandLineHoldFocus"		`optionVar -q commandLineHoldFocusHold`;
		optionVar -iv "showIconsInMenus"			`optionVar -q showIconsInMenusHold`;
		optionVar -iv "saveWindowPos"				`optionVar -q saveWindowPosHold`;
		optionVar -iv "channelsLayersSeparate"		`optionVar -q channelsLayersSeparateHold`;
		optionVar -iv "EEexprEdTextEditor"			`optionVar -q EEexprEdTextEditorHold`;
		optionVar -iv "displayNewFeatureHighlights"	`optionVar -q displayNewFeatureHighlightsHold`;
		optionVar -iv "showHighlightNewFeaturesWindowOnStartup"	`optionVar -q showHighlightNewFeaturesWindowOnStartupHold`;
		float $color[] = `optionVar -q newFeatureHighlightColorHold`;
		optionVar -fv newFeatureHighlightColor $color[0];
		optionVar -fva newFeatureHighlightColor $color[1];
		optionVar -fva newFeatureHighlightColor $color[2];
		optionVar -iv "mayaMacButtonMap"			`optionVar -q mayaMacButtonMapHold`;
		optionVar -iv "useScrollWheel"				`optionVar -q useScrollWheelHold`;
		optionVar -iv "interfaceScalingMode"		`optionVar -q interfaceScalingModeHold`;
		optionVar -fv "interfaceScalingValue"			`optionVar -q interfaceScalingValueHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "mayaModeHold";
		optionVar -remove "mainWindowMenubarVisHold";
		optionVar -remove "collapseIconBarsInPanelsHold";
		optionVar -remove "allowMenusInPanelsHold";
		optionVar -remove "mainWindowTitleBarVisHold";
		optionVar -remove "cmdWindowTitleBarVisHold";
		optionVar -remove "commandLineHoldFocusHold";
		optionVar -remove "showIconsInMenusHold";
		optionVar -remove "saveWindowPosHold";
		optionVar -remove "channelsLayersSeparateHold";
		optionVar -remove "EEexprEdTextEditorHold";
		optionVar -remove "displayNewFeatureHighlightsHold";
		optionVar -remove "showHighlightNewFeaturesWindowOnStartupHold";
		optionVar -remove "newFeatureHighlightColorHold";
		optionVar -remove "mayaMacButtonMapHold";
		optionVar -remove "useScrollWheelHold";
		optionVar -remove "interfaceScalingModeHold";
		optionVar -remove "interfaceScalingValueHold";
	}

	//----------------------------------------------------------
	// UI Elements Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -iv "statusLineVisibleHold"		`optionVar -q statusLineVisible`;
		optionVar -iv "isShelfVisibleHold" 			`optionVar -q isShelfVisible`;
		optionVar -iv "toolboxVisibleHold" 			`optionVar -q toolboxVisible`;
		optionVar -iv "timeSliderVisibleHold" 		`optionVar -q timeSliderVisible`;
		optionVar -iv "playbackRangeVisibleHold" 	`optionVar -q playbackRangeVisible`;
		optionVar -iv "commandLineVisibleHold" 		`optionVar -q commandLineVisible`;
		optionVar -iv "helpLineVisibleHold" 		`optionVar -q helpLineVisible`;
		optionVar -iv "isAttributeEditorVisibleHold" `optionVar -q isAttributeEditorVisible`;
		optionVar -iv "toolSettingsVisibleHold" 	`optionVar -q toolSettingsVisible`;
		optionVar -iv "channelsVisibleHold" 		`optionVar -q channelsVisible`;
		optionVar -iv "layersVisibleHold" 			`optionVar -q layersVisible`;
	} else if ($mode == "restore") {
		optionVar -iv "statusLineVisible"			`optionVar -q statusLineVisibleHold`;
		optionVar -iv "isShelfVisible" 				`optionVar -q isShelfVisibleHold`;
		optionVar -iv "toolboxVisible" 				`optionVar -q toolboxVisibleHold`;
		optionVar -iv "timeSliderVisible" 			`optionVar -q timeSliderVisibleHold`;
		optionVar -iv "playbackRangeVisible"		`optionVar -q playbackRangeVisibleHold`;
		optionVar -iv "commandLineVisible" 			`optionVar -q commandLineVisibleHold`;
		optionVar -iv "helpLineVisible" 			`optionVar -q helpLineVisibleHold`;
		optionVar -iv "isAttributeEditorVisible" 	`optionVar -q isAttributeEditorVisibleHold`;
		optionVar -iv "toolSettingsVisible" 		`optionVar -q toolSettingsVisibleHold`;
		optionVar -iv "channelsVisible" 			`optionVar -q channelsVisibleHold`;
		optionVar -iv "layersVisible" 				`optionVar -q layersVisibleHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "statusLineVisibleHold";
		optionVar -remove "isShelfVisibleHold";
		optionVar -remove "toolboxVisibleHold";
		optionVar -remove "timeSliderVisibleHold";
		optionVar -remove "playbackRangeVisibleHold";
		optionVar -remove "commandLineVisibleHold";
		optionVar -remove "helpLineVisibleHold";
		optionVar -remove "isAttributeEditorVisibleHold";
		optionVar -remove "toolSettingsVisibleHold";
		optionVar -remove "channelsVisibleHold";
		optionVar -remove "layersVisibleHold";
	}

	//----------------------------------------------------------
	// Misc UI Preferences
	//----------------------------------------------------------

	global string $gMayaVersionYear;

	if ($mode == "save") {
		optionVar -iv "inViewMessageEnableHold" 		`optionVar -query inViewMessageEnable`;
		optionVar -iv "inViewMessageAssistEnableHold" 	`optionVar -query inViewMessageAssistEnable`;
		optionVar -iv "inViewMessageStatusEnableHold" 	`optionVar -query inViewMessageStatusEnable`;
		optionVar -fv "inViewMessageDisplayTimeHold" 	`optionVar -query inViewMessageDisplayTime`;
		optionVar -iv "inViewMessageFontSizeHold" 		`optionVar -query inViewMessageFontSize`;
		optionVar -iv "inViewMessageOpacityHold" 		`optionVar -query inViewMessageOpacity`;
		optionVar -intValue "toolMessageVisibleHold"		`optionVar -query toolMessageVisible`;
		optionVar -floatValue "toolMessageTimeHold"			`optionVar -query toolMessageTime`;
		optionVar -intValue "toolMessageVerticalOffsetHold"	`optionVar -query toolMessageVerticalOffset`;
		optionVar -intValue "toolMessageHorizontalOffsetHold"	`optionVar -query toolMessageHorizontalOffset`;
		optionVar -iv "popUpHelpModeHold"				`optionVar -q popUpHelpMode`;

		optionVar -iv "popUpSimpleHelpModeHold"			`optionVar -q popUpSimpleHelpMode`;
		optionVar -iv "helpBrowserUseWindowHold"		`optionVar -q helpBrowserUseWindow`;
		optionVar -iv "helpBrowserRaiseWindowHold"		`optionVar -q helpBrowserRaiseWindow`;
		optionVar -sv "helpLanguageHold" 				`optionVar -q helpLanguage`;
		optionVar -sv ("localHelpUrl" + $gMayaVersionYear + "Hold")	 					`optionVar -q ("localHelpUrl" + $gMayaVersionYear)`;
		optionVar -sv ("customPathHelpUrl" + $gMayaVersionYear + "Hold")	 			`optionVar -q ("customPathHelpUrl" + $gMayaVersionYear)`;
		optionVar -sv "helpModeHold" 					`optionVar -q helpMode`;
		optionVar -sv "newScenePanelConfigurationHold" 	`optionVar -q newScenePanelConfiguration`;
		optionVar -iv "useNewScenePanelConfigHold" 		`optionVar -q useNewScenePanelConfig`;
		optionVar -iv "useScenePanelConfigHold"  		`optionVar -q useScenePanelConfig`;
		optionVar -iv "useSaveScenePanelConfigHold"		`optionVar -q useSaveScenePanelConfig`;
		optionVar -iv "ResetModelViewsOnNewSceneHold"		`optionVar -q ResetModelViewsOnNewScene`;
		optionVar -sv "interactionModeToSuiteHold"		`optionVar -q interactionModeToSuite`;
	}
	else if ($mode == "restore")
	{
		optionVar -iv "inViewMessageEnable" 		`optionVar -query inViewMessageEnableHold`;
		optionVar -iv "inViewMessageAssistEnable" 	`optionVar -query inViewMessageAssistEnableHold`;
		optionVar -iv "inViewMessageStatusEnable" 	`optionVar -query inViewMessageStatusEnableHold`;
		optionVar -fv "inViewMessageDisplayTime" 	`optionVar -query inViewMessageDisplayTimeHold`;
		optionVar -iv "inViewMessageFontSize" 		`optionVar -query inViewMessageFontSizeHold`;
		optionVar -iv "inViewMessageOpacity" 		`optionVar -query inViewMessageOpacityHold`;
		optionVar -intValue "toolMessageVisible"			`optionVar -query toolMessageVisibleHold`;
		optionVar -floatValue "toolMessageTime"			`optionVar -query toolMessageTimeHold`;
		optionVar -intValue "toolMessageVerticalOffset"	`optionVar -query toolMessageVerticalOffsetHold`;
		optionVar -intValue "toolMessageHorizontalOffset"	`optionVar -query toolMessageHorizontalOffsetHold`;
		optionVar -iv "popUpHelpMode"					`optionVar -q popUpHelpModeHold`;
		optionVar -iv "helpPopupDisplayTime"			`optionVar -q helpPopupDisplayTimeHold`;
		optionVar -iv "helpBrowserUseWindow"			`optionVar -q helpBrowserUseWindowHold`;
		optionVar -iv "helpBrowserRaiseWindow"			`optionVar -q helpBrowserRaiseWindowHold`;
		optionVar -sv "helpLanguage" 					`optionVar -q helpLanguageHold`;
		optionVar -sv ("localHelpUrl" + $gMayaVersionYear)			`optionVar -q ("localHelpUrl" + $gMayaVersionYear + "Hold")`;
		optionVar -sv ("customPathHelpUrl" + $gMayaVersionYear)		`optionVar -q ("customPathHelpUrl" + $gMayaVersionYear + "Hold")`;
		optionVar -sv "helpMode" 						`optionVar -q helpModeHold`;
		optionVar -sv "newScenePanelConfiguration" 		`optionVar -q newScenePanelConfigurationHold`;
		optionVar -iv "useNewScenePanelConfig" 			`optionVar -q useNewScenePanelConfigHold`;
		optionVar -iv "useScenePanelConfig"  			`optionVar -q useScenePanelConfigHold`;
		optionVar -iv "useSaveScenePanelConfig"			`optionVar -q useSaveScenePanelConfigHold`;
		optionVar -iv "ResetModelViewsOnNewScene"			`optionVar -q ResetModelViewsOnNewSceneHold`;
		optionVar -sv "interactionModeToSuite"			`optionVar -q interactionModeToSuiteHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "inViewMessageEnableHold";
		optionVar -remove "inViewMessageAssistEnableHold";
		optionVar -remove "inViewMessageStatusEnableHold";
		optionVar -remove "inViewMessageDisplayTimeHold";
		optionVar -remove "inViewMessageFontSizeHold";
		optionVar -remove "inViewMessageOpacityHold";
		optionVar -remove "toolMessageVisibleHold";
		optionVar -remove "toolMessageTimeHold";
		optionVar -remove "toolMessageVerticalOffsetHold";
		optionVar -remove "toolMessageHorizontalOffsetHold";
		optionVar -remove "popUpHelpModeHold";
		optionVar -remove "popUpSimpleHelpModeHold";
		optionVar -remove "helpBrowserUseWindowHold";
		optionVar -remove "helpBrowserRaiseWindowHold";
		optionVar -remove "helpLanguageHold";
		optionVar -remove ("localHelpUrl" + $gMayaVersionYear + "Hold");
		optionVar -remove ("customPathHelpUrl" + $gMayaVersionYear + "Hold");
		optionVar -remove "helpModeHold";
		optionVar -remove "newScenePanelConfigurationHold";
		optionVar -remove "useNewScenePanelConfigHold";
		optionVar -remove "useScenePanelConfigHold";
		optionVar -remove "useSaveScenePanelConfigHold";
		optionVar -remove "ResetModelViewsOnNewSceneHold";
		optionVar -remove "interactionModeToSuiteHold";
	}

	//----------------------------------------------------------
	// Display Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -iv "fastInteractionHold"				`optionVar -q fastInteraction`;
		optionVar -iv "toggleViewAxisHold"				`optionVar -q toggleViewAxis`;
		optionVar -iv "toggleOriginAxisHold"			`optionVar -q toggleOriginAxis`;
		optionVar -iv "showGridHold"					`optionVar -q showGrid`;
		optionVar -iv "activeObjectPivotsHold"			`optionVar -q activeObjectPivots`;
		optionVar -iv "displayAffectedHold"				`optionVar -q displayAffected`;
		optionVar -iv "displayRegionOfEffectHold"		`optionVar -q displayRegionOfEffect`;
		optionVar -iv "wireframeOnShadedActiveHold"		`optionVar -q wireframeOnShadedActive`;
		optionVar -iv "shadeTemplatesHold"				`optionVar -q shadeTemplates`;
		optionVar -iv "displayViewportGradientHold"		`optionVar -q displayViewportGradient`;
		optionVar -fv "lineWidthHold"					`optionVar -q lineWidth`;
		optionVar -iv "maxTextureResolutionHold"		`optionVar -q maxTextureResolution`;
		optionVar -iv "ghostFramesBeforeHold"			`optionVar -q ghostFramesBefore`;
		optionVar -iv "ghostFramesAfterHold"			`optionVar -q ghostFramesAfter`;
		optionVar -iv "ghostFrameStepHold"				`optionVar -q ghostFrameStep`;
		optionVar -iv "materialLoadingModeHold"	        `optionVar -q materialLoadingMode`;
		optionVar -iv "fcheckAsImageViewerHold"				`optionVar -q fcheckAsImageViewer`;
		optionVar -sv "userDefinedImageViewerCmdForImageHold"				`optionVar -q userDefinedImageViewerCmdForImage`;
		optionVar -sv "userDefinedImageViewerCmdForSequenceHold"				`optionVar -q userDefinedImageViewerCmdForSequence`;
		optionVar -iv "maxImageSizeForSwatchGenHold"	`optionVar -q maxImageSizeForSwatchGen`;
		optionVar -iv "generateUVTilePreviewsOnSceneLoadHold"	`optionVar -q generateUVTilePreviewsOnSceneLoad`;
		optionVar -iv "enableSwatchRenderingHold"		`optionVar -q enableSwatchRendering`;
		optionVar -iv "viewportRendererHold"			`optionVar -q viewportRenderer`;

	} else if ($mode == "restore") {
		optionVar -iv "fastInteraction"					`optionVar -q fastInteractionHold`;
		optionVar -iv "toggleViewAxis"					`optionVar -q toggleViewAxisHold`;
		optionVar -iv "toggleOriginAxis"				`optionVar -q toggleOriginAxisHold`;
		optionVar -iv "showGrid"						`optionVar -q showGridHold`;
		optionVar -iv "activeObjectPivots"				`optionVar -q activeObjectPivotsHold`;
		optionVar -iv "displayAffected"					`optionVar -q displayAffectedHold`;
		optionVar -iv "displayRegionOfEffect"			`optionVar -q displayRegionOfEffectHold`;
		optionVar -iv "wireframeOnShadedActive"			`optionVar -q wireframeOnShadedActiveHold`;
		optionVar -iv "shadeTemplates"					`optionVar -q shadeTemplatesHold`;
		optionVar -iv "displayViewportGradient"			`optionVar -q displayViewportGradientHold`;
		optionVar -fv "lineWidth"						`optionVar -q lineWidthHold`;
		optionVar -iv "maxTextureResolution"			`optionVar -q maxTextureResolutionHold`;
		optionVar -iv "ghostFramesBefore"				`optionVar -q ghostFramesBeforeHold`;
		optionVar -iv "ghostFramesAfter"				`optionVar -q ghostFramesAfterHold`;
		optionVar -iv "ghostFrameStep"					`optionVar -q ghostFrameStepHold`;
		optionVar -iv "materialLoadingMode"		        `optionVar -q materialLoadingModeHold`;
		optionVar -iv "fcheckAsImageViewer"					`optionVar -q fcheckAsImageViewerHold`;
		optionVar -sv "userDefinedImageViewerCmdForImage"					`optionVar -q userDefinedImageViewerCmdForImageHold`;
		optionVar -sv "userDefinedImageViewerCmdForSequence"					`optionVar -q userDefinedImageViewerCmdForSequenceHold`;
		optionVar -iv "maxImageSizeForSwatchGen" 		`optionVar -q maxImageSizeForSwatchGenHold`;
		optionVar -iv "generateUVTilePreviewsOnSceneLoad" 		`optionVar -q generateUVTilePreviewsOnSceneLoadHold`;
		optionVar -iv "enableSwatchRendering"			`optionVar -q enableSwatchRenderingHold`;
		optionVar -iv "viewportRenderer"			`optionVar -q viewportRendererHold`;

	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "fastInteractionHold";
		optionVar -remove "toggleViewAxisHold";
		optionVar -remove "toggleOriginAxisHold";
		optionVar -remove "showGridHold";
		optionVar -remove "activeObjectPivotsHold";
		optionVar -remove "displayAffectedHold";
		optionVar -remove "displayRegionOfEffectHold";
		optionVar -remove "wireframeOnShadedActiveHold";
		optionVar -remove "shadeTemplatesHold";
		optionVar -remove "displayViewportGradientHold";
		optionVar -remove "lineWidthHold";
		optionVar -remove "maxTextureResolutionHold";
		optionVar -remove "ghostFramesBeforeHold";
		optionVar -remove "ghostFramesAfterHold";
		optionVar -remove "ghostFrameStepHold";
		optionVar -remove "fcheckAsImageViewerHold" ;
		optionVar -remove "userDefinedImageViewerCmdForImageHold" ;
		optionVar -remove "userDefinedImageViewerCmdForSequenceHold" ;
		optionVar -remove "maxImageSizeForSwatchGenHold";
		optionVar -remove "materialLoadingModeHold";
		optionVar -remove "generateUVTilePreviewsOnSceneLoadHold";
		optionVar -remove "enableSwatchRenderingHold";
		optionVar -remove "viewportRendererHold";
	}

	//----------------------------------------------------------
	// Kin Display Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -fv "ikHandleDisplayScaleHold"	`optionVar -q ikHandleDisplayScale`;
		optionVar -fv "ikJointDisplayScaleHold"		`optionVar -q ikJointDisplayScale`;
		optionVar -fv "ikIkFkJointDisplayScaleHold"		`optionVar -q ikIkFkJointDisplayScale`;
		optionVar -sv "ikIkFkDisplayMethodHold"		`optionVar -q ikIkFkDisplayMethod`;
	} else if ($mode == "restore") {
		optionVar -fv "ikHandleDisplayScale"		`optionVar -q ikHandleDisplayScaleHold`;
		optionVar -fv "ikJointDisplayScale"			`optionVar -q ikJointDisplayScaleHold`;
		optionVar -fv "ikIkFkJointDisplayScale"			`optionVar -q ikIkFkJointDisplayScaleHold`;
		optionVar -sv "ikIkFkDisplayMethod"			`optionVar -q ikIkFkDisplayMethodHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "ikHandleDisplayScaleHold";
		optionVar -remove "ikJointDisplayScaleHold";
		optionVar -remove "ikIkFkJointDisplayScaleHold";
		optionVar -remove "ikIkFkDisplayMethodHold";
	}

	//----------------------------------------------------------
	// Manipulator Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -fv "manipGlobalScaleHold"		 `optionVar -q manipGlobalScale`;
		optionVar -fv "manipHandleSizeHold"			 `optionVar -q manipHandleSize`;
		optionVar -fv "manipLineSizeHold"			 `optionVar -q manipLineSize`;
		optionVar -fv "manipLinePickSizeHold"		 `optionVar -q manipLinePickSize`;
		optionVar -fv "manipPreviousStateSizeHold"	 `optionVar -q manipPreviousStateSize`;
		optionVar -iv "middleMouseReposHold"		 `optionVar -q manipMiddleMouseRepos`;
        optionVar -iv "manipsRememberActiveHandleHold" `optionVar -q manipsRememberActiveHandle`;
        optionVar -iv "manipsRememberActiveHandleAfterToolSwitchHold" `optionVar -q manipsRememberActiveHandleAfterToolSwitch`;
		optionVar -iv "manipPlaneHandleOffsetHold"   `optionVar -q manipPlaneHandleOffset`;
		optionVar -iv "manipShowPlaneHandlesHold"   `optionVar -q manipShowPlaneHandles`;
		optionVar -iv "manipPivotRotateHandleOffsetHold" `optionVar -q manipPivotRotateHandleOffset`;
		optionVar -iv "manipShowPivotRotateHandleHold"   `optionVar -q manipShowPivotRotateHandle`;
	} else if ($mode == "restore") {
		optionVar -fv "manipGlobalScale"			`optionVar -q manipGlobalScaleHold`;
		optionVar -fv "manipHandleSize"				`optionVar -q manipHandleSizeHold`;
		optionVar -fv "manipLineSize"				`optionVar -q manipLineSizeHold`;
		optionVar -fv "manipLinePickSize"			`optionVar -q manipLinePickSizeHold`;
		optionVar -fv "manipPreviousStateSize"		`optionVar -q manipPreviousStateSizeHold`;
		optionVar -iv "middleMouseRepos"			`optionVar -q manipMiddleMouseReposHold`;
        optionVar -iv "manipsRememberActiveHandle"	`optionVar -q manipsRememberActiveHandleHold`;
        optionVar -iv "manipsRememberActiveHandleAfterToolSwitch"	`optionVar -q manipsRememberActiveHandleAfterToolSwitchHold`;
		optionVar -iv "manipPlaneHandleOffset"		`optionVar -q manipPlaneHandleOffsetHold`;
		optionVar -iv "manipShowPlaneHandles"		`optionVar -q manipShowPlaneHandlesHold`;
		optionVar -iv "manipPivotRotateHandleOffset" `optionVar -q manipPivotRotateHandleOffsetHold`;
		optionVar -iv "manipShowPivotRotateHandle"	`optionVar -q manipShowPivotRotateHandleHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "manipGlobalScaleHold";
		optionVar -remove "manipHandleSizeHold";
		optionVar -remove "manipLineSizeHold";
		optionVar -remove "manipLinePickSizeHold";
		optionVar -remove "manipPreviousStateSizeHold";
		optionVar -remove "middleMouseReposHold";
        optionVar -remove "manipsRememberActiveHandleHold";
        optionVar -remove "manipsRememberActiveHandleAfterToolSwitchHold";
		optionVar -remove "manipPlaneHandleOffsetHold";
		optionVar -remove "manipShowPlaneHandlesHold";
		optionVar -remove "manipPivotRotateHandleOffsetHold";
		optionVar -remove "manipShowPivotRotateHandleHold";
	}

	//----------------------------------------------------------
	// NURBS Display Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -iv "newCurveDisplayEPHold"		`optionVar -q newCurveDisplayEP`;
		optionVar -iv "newCurveDisplayHullHold"		`optionVar -q newCurveDisplayHull`;
		optionVar -iv "newCurveDisplayCVHold"		`optionVar -q newCurveDisplayCV`;
		optionVar -iv "newSurfaceDisplayEPHold"		`optionVar -q newSurfaceDisplayEP`;
		optionVar -iv "newSurfaceDisplayHullHold"	`optionVar -q newSurfaceDisplayHull`;
		optionVar -iv "newSurfaceDisplayCVHold"		`optionVar -q newSurfaceDisplayCV`;
		optionVar -iv "newSurfaceDisplayOriginHold"	`optionVar -q newSurfaceDisplayOrigin`;
		optionVar -iv "newNurbsIsoparmsHold"		`optionVar -q newNurbsIsoparms`;
		optionVar -iv "newNurbsPointsShadedHold"	`optionVar -q newNurbsPointsShaded`;
		optionVar -iv "newNurbsPointsWireHold"		`optionVar -q newNurbsPointsWire`;
		optionVar -iv "highPrecisionNurbsHold"		`optionVar -q highPrecisionNurbs`;
	} else if ($mode == "restore") {
		optionVar -iv "newCurveDisplayEP"			`optionVar -q newCurveDisplayEPHold`;
		optionVar -iv "newCurveDisplayHull"			`optionVar -q newCurveDisplayHullHold`;
		optionVar -iv "newCurveDisplayCV"			`optionVar -q newCurveDisplayCVHold`;
		optionVar -iv "newSurfaceDisplayEP"			`optionVar -q newSurfaceDisplayEPHold`;
		optionVar -iv "newSurfaceDisplayHull"		`optionVar -q newSurfaceDisplayHullHold`;
		optionVar -iv "newSurfaceDisplayCV"			`optionVar -q newSurfaceDisplayCVHold`;
		optionVar -iv "newSurfaceDisplayOrigin"		`optionVar -q newSurfaceDisplayOriginHold`;
		optionVar -iv "newNurbsIsoparms"			`optionVar -q newNurbsIsoparmsHold`;
		optionVar -iv "newNurbsPointsShaded"		`optionVar -q newNurbsPointsShadedHold`;
		optionVar -iv "newNurbsPointsWire"			`optionVar -q newNurbsPointsWireHold`;
		optionVar -iv "highPrecisionNurbs"			`optionVar -q highPrecisionNurbsHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "newCurveDisplayEPHold";
		optionVar -remove "newCurveDisplayHullHold";
		optionVar -remove "newCurveDisplayCVHold";
		optionVar -remove "newSurfaceDisplayEPHold";
		optionVar -remove "newSurfaceDisplayHullHold";
		optionVar -remove "newSurfaceDisplayCVHold";
		optionVar -remove "newSurfaceDisplayOriginHold";
		optionVar -remove "newNurbsIsoparmsHold";
		optionVar -remove "newNurbsPointsShadedHold";
		optionVar -remove "newNurbsPointsWireHold";
		optionVar -remove "highPrecisionNurbsHold";
	}

	//----------------------------------------------------------
	// Poly Display Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -iv "newPolyVtxDispHold"			`optionVar -q newPolyVtxDisp`;
		optionVar -fv "newPolyVertexSizeHold"		`optionVar -q newPolyVertexSize`;
		optionVar -iv "newPolyVtxBackCullHold"		`optionVar -q newPolyVtxBackCull`;
		optionVar -iv "newPolyVertexNormalsHold"	`optionVar -q newPolyVertexNormals`;
		optionVar -iv "newPolyEdgeDispHold"			`optionVar -q newPolyEdgeDisp`;
		optionVar -fv "newPolyBorderEdgeSizeHold"	`optionVar -q newPolyBorderEdgeSize`;
		optionVar -iv "newPolyBorderEdgeHiliteHold"	`optionVar -q newPolyBorderEdgeHilite`;
		optionVar -iv "newPolyBorderMapHiliteHold"	`optionVar -q newPolyBorderMapHilite`;
		optionVar -iv "newPolyCreaseEdgeHiliteHold"	`optionVar -q newPolyCreaseEdgeHilite`;
		optionVar -iv "newPolyCreaseVertexHiliteHold"	`optionVar -q newPolyCreaseVertexHilite`;
		optionVar -fv "newPolyUVSizeHold"		`optionVar -q newPolyUVSize`;
		optionVar -fv "newPolyNormalSizeHold"		`optionVar -q newPolyNormalSize`;
		optionVar -iv "newPolyFacetCentreDispHold"	`optionVar -q newPolyFacetCentreDisp`;
		optionVar -iv "newPolyFacetNormalDispHold"	`optionVar -q newPolyFacetNormalDisp`;
		optionVar -iv "newPolyFacetTrngleDispHold"	`optionVar -q newPolyFacetTrngleDisp`;
		optionVar -iv "newPolyFacetWarpDispHold"	`optionVar -q newPolyFacetWarpDisp`;
		optionVar -iv "newPolyHoleFacesHiliteHold"	`optionVar -q newPolyHoleFacesHilite`;
		optionVar -iv "newPolyNumVertexDispHold"	`optionVar -q newPolyNumVertexDisp`;
		optionVar -iv "newPolyNumEdgeDispHold"		`optionVar -q newPolyNumEdgeDisp`;
		optionVar -iv "newPolyNumFacetDispHold"		`optionVar -q newPolyNumFacetDisp`;
		optionVar -iv "newPolyNumUvDispHold"		`optionVar -q newPolyNumUvDisp`;
		optionVar -iv "newPolyColorShadedHold"		`optionVar -q newPolyColorShaded`;
		optionVar -iv "newPolyColorChannelHold"		`optionVar -q newPolyColorChannel`;
		optionVar -iv "newPolyMaterialBlendHold"	`optionVar -q newPolyMaterialBlend`;
		optionVar -iv "newPolyBackFaceCullHold"		`optionVar -q newPolyBackFaceCull`;
	} else if ($mode == "restore") {
		optionVar -iv "newPolyVtxDisp"				`optionVar -q newPolyVtxDispHold`;
		optionVar -fv "newPolyVertexSize"			`optionVar -q newPolyVertexSizeHold`;
		optionVar -iv "newPolyVtxBackCull"			`optionVar -q newPolyVtxBackCullHold`;
		optionVar -iv "newPolyVertexNormals"		`optionVar -q newPolyVertexNormalsHold`;
		optionVar -iv "newPolyEdgeDisp"				`optionVar -q newPolyEdgeDispHold`;
		optionVar -fv "newPolyBorderEdgeSize"		`optionVar -q newPolyBorderEdgeSizeHold`;
		optionVar -iv "newPolyBorderEdgeHilite"		`optionVar -q newPolyBorderEdgeHiliteHold`;
		optionVar -iv "newPolyBorderMapHilite"		`optionVar -q newPolyBorderMapHiliteHold`;
		optionVar -iv "newPolyCreaseEdgeHilite"		`optionVar -q newPolyCreaseEdgeHiliteHold`;
		optionVar -iv "newPolyCreaseVertexHilite"		`optionVar -q newPolyCreaseVertexHiliteHold`;
		optionVar -fv "newPolyNormalSize"			`optionVar -q newPolyNormalSizeHold`;
		optionVar -fv "newPolyUVSize"			`optionVar -q newPolyUVSizeHold`;
		optionVar -iv "newPolyFacetCentreDisp"		`optionVar -q newPolyFacetCentreDispHold`;
		optionVar -iv "newPolyFacetNormalDisp"		`optionVar -q newPolyFacetNormalDispHold`;
		optionVar -iv "newPolyFacetTrngleDisp"		`optionVar -q newPolyFacetTrngleDispHold`;
		optionVar -iv "newPolyFacetWarpDisp"		`optionVar -q newPolyFacetWarpDispHold`;
		optionVar -iv "newPolyHoleFacesHilite"		`optionVar -q newPolyHoleFacesHiliteHold`;
		optionVar -iv "newPolyNumVertexDisp"		`optionVar -q newPolyNumVertexDispHold`;
		optionVar -iv "newPolyNumEdgeDisp"			`optionVar -q newPolyNumEdgeDispHold`;
		optionVar -iv "newPolyNumFacetDisp"			`optionVar -q newPolyNumFacetDispHold`;
		optionVar -iv "newPolyNumUvDisp"			`optionVar -q newPolyNumUvDispHold`;
		optionVar -iv "newPolyColorShaded"			`optionVar -q newPolyColorShadedHold`;
		optionVar -iv "newPolyColorChannel"			`optionVar -q newPolyColorChannelHold`;
		optionVar -iv "newPolyMaterialBlend"		`optionVar -q newPolyMaterialBlendHold`;
		optionVar -iv "newPolyBackFaceCull"			`optionVar -q newPolyBackFaceCullHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "newPolyVtxDispHold";
		optionVar -remove "newPolyVertexSizeHold";
		optionVar -remove "newPolyVtxBackCullHold";
		optionVar -remove "newPolyVertexNormalsHold";
		optionVar -remove "newPolyEdgeDispHold";
		optionVar -remove "newPolyBorderEdgeSizeHold";
		optionVar -remove "newPolyBorderEdgeHiliteHold";
		optionVar -remove "newPolyBorderMapHiliteHold";
		optionVar -remove "newPolyCreaseEdgeHiliteHold";
		optionVar -remove "newPolyCreaseVertexHiliteHold";
		optionVar -remove "newPolyNormalSizeHold";
		optionVar -remove "newPolyUVSizeHold";
		optionVar -remove "newPolyFacetCentreDispHold";
		optionVar -remove "newPolyFacetNormalDispHold";
		optionVar -remove "newPolyFacetTrngleDispHold";
		optionVar -remove "newPolyFacetWarpDispHold";
		optionVar -remove "newPolyHoleFacesHiliteHold";
		optionVar -remove "newPolyNumVertexDispHold";
		optionVar -remove "newPolyNumEdgeDispHold";
		optionVar -remove "newPolyNumFacetDispHold";
		optionVar -remove "newPolyNumUvDispHold";
		optionVar -remove "newPolyColorShadedHold";
		optionVar -remove "newPolyColorChannelHold";
		optionVar -remove "newPolyMaterialBlendHold";
		optionVar -remove "newPolyBackFaceCullHold";
	}

	//----------------------------------------------------------
	// Subdiv Display Preferences
	//----------------------------------------------------------
	if ($mode == "save") {
		optionVar -iv "subdivComponentDisplayStyleHold"		`optionVar -q subdivComponentDisplayStyle`;
	} else if ($mode == "restore") {
		optionVar -iv "subdivComponentDisplayStyle"			`optionVar -q subdivComponentDisplayStyleHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "subdivComponentDisplayStyleHold";
	}

	//----------------------------------------------------------
	// Font Display Preferences
	//----------------------------------------------------------
	if ($mode == "save") {
		optionVar -iv "fontSetOptHold"      `optionVar -q fontSetOpt`;
		optionVar -iv "smallFontSizeHold"		`optionVar -q smallFontSize`;
		optionVar -iv "defaultFontSizeHold"		`optionVar -q defaultFontSize`;
	} else if ($mode == "restore") {
		optionVar -iv "fontSetOpt"			`optionVar -q fontSetOptHold`;
		optionVar -iv "smallFontSize"			`optionVar -q smallFontSizeHold`;
		optionVar -iv "defaultFontSize"			`optionVar -q defaultFontSizeHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "fontSetOptHold";
		optionVar -remove "smallFontSizeHold";
		optionVar -remove "defaultFontSizeHold";
	}

	//----------------------------------------------------------
	// General Application Settings Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -sv "upAxisDirectionHold"			`optionVar -q upAxisDirection`;
		optionVar -sv "workingUnitLinearHold"		`optionVar -q workingUnitLinear`;
		optionVar -sv "workingUnitAngularHold"		`optionVar -q workingUnitAngular`;
		optionVar -sv "workingUnitTimeHold"			`optionVar -q workingUnitTime`;
		optionVar -fv "positionalToleranceHold"		`optionVar -q positionalTolerance`;
		optionVar -fv "tangentialToleranceHold"		`optionVar -q tangentialTolerance`;
	} else if ($mode == "restore") {
		optionVar -sv "upAxisDirection"				`optionVar -q upAxisDirectionHold`;
		optionVar -sv "workingUnitLinear"			`optionVar -q workingUnitLinearHold`;
		optionVar -sv "workingUnitAngular"			`optionVar -q workingUnitAngularHold`;
		optionVar -sv "workingUnitTime"				`optionVar -q workingUnitTimeHold`;
		optionVar -fv "positionalTolerance"			`optionVar -q positionalToleranceHold`;
		optionVar -fv "tangentialTolerance"			`optionVar -q tangentialToleranceHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "upAxisDirectionHold";
		optionVar -remove "workingUnitLinearHold";
		optionVar -remove "workingUnitAngularHold";
		optionVar -remove "workingUnitTimeHold";
		optionVar -remove "positionalToleranceHold";
		optionVar -remove "tangentialToleranceHold";
	}

	//----------------------------------------------------------
	// Camera Preferences
	//----------------------------------------------------------
	if ($mode == "save") {
		optionVar -iv "animateRollHold"                     `optionVar -q animateRoll`;
		optionVar -iv "animateRollFitAllHold"               `optionVar -q animateRollFitAll`;
		optionVar -iv "animateRollGotoBookmarkHold"         `optionVar -q animateRollGotoBookmark`;
		optionVar -iv "animateRollNextLastCameraViewHold"   `optionVar -q animateRollNextLastCameraView`;
		optionVar -fv "totalAnimateRollTimeHold"			`optionVar -q totalAnimateRollTime`;
	} else if ($mode == "restore") {
		optionVar -iv "animateRoll"                    `optionVar -q animateRollHold`;
		optionVar -iv "animateRollFitAll"              `optionVar -q animateRollFitAllHold`;
		optionVar -iv "animateRollGotoBookmark"        `optionVar -q animateRollGotoBookmarkHold`;
		optionVar -iv "animateRollNextLastCameraView"  `optionVar -q animateRollNextLastCameraViewHold`;
		optionVar -fv "totalAnimateRollTime"		   `optionVar -q totalAnimateRollTimeHold`;
	} else {
		optionVar -remove "animateRollHold";
		optionVar -remove "animateRollFitAllHold";
		optionVar -remove "animateRollGotoBookmarkHold";
		optionVar -remove "animateRollNextLastCameraViewHold";
		optionVar -remove "totalAnimateRollTimeHold";
	}

	// ADSK_CLR_MGT_BEGIN
	//----------------------------------------------------------
	// Color Management Preferences
	//----------------------------------------------------------
	//
	// source is a directive, unconditionally processed when this file
	// is sourced, so irrelevant whether source is inside conditional 
	// or not.
	source "colorManagementUtilities.mel";
	colorManagementPrefsHoldCurrentState($mode);

	// ADSK_CLR_MGT_END

	//----------------------------------------------------------
	// Animation Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -fv "playbackMinHold"					`optionVar -q playbackMin`;
		optionVar -fv "playbackMaxHold"					`optionVar -q playbackMax`;
		optionVar -fv "playbackMinRangeHold"			`optionVar -q playbackMinRange`;
		optionVar -fv "playbackMaxRangeHold"			`optionVar -q playbackMaxRange`;
		optionVar -iv "timeSliderHeightHold"			`optionVar -q timeSliderHeight`;
		optionVar -sv "timeSliderShowKeysHold"			`optionVar -q timeSliderShowKeys`;
		optionVar -iv "timeSliderShowKeysCombinedHold"	`optionVar -q timeSliderShowKeysCombined`;
		optionVar -iv "timeSliderTimeCodeHold"			`optionVar -q timeSliderTimeCode`;
		optionVar -iv "timeSliderSnappingHold"			`optionVar -q timeSliderSnapping`;
		optionVar -sv "timeSliderPlayViewHold"			`optionVar -q timeSliderPlayView`;
		optionVar -sv "timeSliderPlayLoopHold"			`optionVar -q timeSliderPlayLoop`;
		optionVar -fv "timeSliderPlaySpeedHold"			`optionVar -q timeSliderPlaySpeed`;
		optionVar -fv "timeSliderMaxPlaySpeedHold"		`optionVar -q timeSliderMaxPlaySpeed`;
		optionVar -fv "timeSliderPlayByHold"			`optionVar -q timeSliderPlayBy`;
		optionVar -iv "graphEdLmbMovesSelectionsHold"	`optionVar -q graphEdLmbMovesSelections`;
		optionVar -iv "seqDoubleClickSetTimeRangeHold"	`optionVar -q  seqDoubleClickSetTimeRange`;
		optionVar -iv "graphEdSnapToAdjacentValuesHold"	`optionVar -q graphEdSnapToAdjacentValues`;

	} else if ($mode == "restore") {
		optionVar -fv "playbackMin"						`optionVar -q playbackMinHold`;
		optionVar -fv "playbackMax"						`optionVar -q playbackMaxHold`;
		optionVar -fv "playbackMinRange"				`optionVar -q playbackMinRangeHold`;
		optionVar -fv "playbackMaxRange"				`optionVar -q playbackMaxRangeHold`;
		optionVar -iv "timeSliderHeight"				`optionVar -q timeSliderHeightHold`;
		optionVar -sv "timeSliderShowKeys"				`optionVar -q timeSliderShowKeysHold`;
		optionVar -iv "timeSliderShowKeysCombined"		`optionVar -q timeSliderShowKeysCombinedHold`;
		optionVar -iv "timeSliderTimeCode"				`optionVar -q timeSliderTimeCodeHold`;
		optionVar -iv "timeSliderSnapping"				`optionVar -q timeSliderSnappingHold`;
		optionVar -sv "timeSliderPlayView"				`optionVar -q timeSliderPlayViewHold`;
		optionVar -sv "timeSliderPlayLoop"				`optionVar -q timeSliderPlayLoopHold`;
		optionVar -fv "timeSliderPlaySpeed"				`optionVar -q timeSliderPlaySpeedHold`;
		optionVar -fv "timeSliderMaxPlaySpeed"				`optionVar -q timeSliderMaxPlaySpeedHold`;
		optionVar -fv "timeSliderPlayBy"				`optionVar -q timeSliderPlayByHold`;
		optionVar -iv "graphEdLmbMovesSelections"		`optionVar -q graphEdLmbMovesSelectionsHold`;
		optionVar -iv "graphEdSnapToAdjacentValues"		`optionVar -q graphEdSnapToAdjacentValuesHold`;
		optionVar -iv "seqDoubleClickSetTimeRange"		`optionVar -q  seqDoubleClickSetTimeRangeHold`;

	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "playbackMinHold";
		optionVar -remove "playbackMaxHold";
		optionVar -remove "playbackMinRangeHold";
		optionVar -remove "playbackMaxRangeHold";
		optionVar -remove "timeSliderHeightHold";
		optionVar -remove "timeSliderShowKeysHold";
		optionVar -remove "timeSliderShowKeysCombinedHold";
		optionVar -remove "timeSliderTimeCodeHold";
		optionVar -remove "timeSliderSnappingHold";
		optionVar -remove "timeSliderPlayViewHold";
		optionVar -remove "timeSliderPlayLoopHold";
		optionVar -remove "timeSliderPlaySpeedHold";
		optionVar -remove "timeSliderMaxPlaySpeedHold";
		optionVar -remove "timeSliderPlayByHold";
		optionVar -remove "graphEdLmbMovesSelectionsHold";
		optionVar -remove "graphEdSnapToAdjacentValuesHold";

	}


	//----------------------------------------------------------
	// ViewCube Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -iv "viewCubeShowCubeHold"		`optionVar -q viewCubeShowCube`;
		optionVar -sv "viewCubeScreenPositionHold"		`optionVar -q viewCubeScreenPosition`;
		optionVar -sv "viewCubeSizeHold"		`optionVar -q viewCubeSize`;
		optionVar -fv "viewCubeInactiveOpacityHold"		`optionVar -q viewCubeInactiveOpacity`;
		optionVar -iv "viewCubeSnapToClosestHold"		`optionVar -q viewCubeSnapToClosest`;
		optionVar -iv "viewCubeFitToViewHold"		`optionVar -q viewCubeFitToView`;
		optionVar -iv "animateRollViewCompassHold"		`optionVar -q animateRollViewCompass`;
		optionVar -iv "viewCubePreserveSceneUpHold"		`optionVar -q viewCubePreserveSceneUp`;
		optionVar -iv "viewCubeShowCompassHold"		`optionVar -q viewCubeShowCompass`;
		optionVar -fv "viewCubeCompassAngleHold"		`optionVar -q viewCubeCompassAngle`;

	} else if ($mode == "restore") {
		optionVar -iv "viewCubeShowCube"			`optionVar -q viewCubeShowCubeHold`;
		optionVar -sv "viewCubeScreenPosition"		`optionVar -q viewCubeScreenPositionHold`;
		optionVar -sv "viewCubeSize"		`optionVar -q viewCubeSizeHold`;
		optionVar -fv "viewCubeInactiveOpacity"		`optionVar -q viewCubeInactiveOpacityHold`;
		optionVar -iv "viewCubeSnapToClosest"		`optionVar -q viewCubeSnapToClosestHold`;
		optionVar -iv "viewCubeFitToView"		`optionVar -q viewCubeFitToViewHold`;
		optionVar -iv "animateRollViewCompass"		`optionVar -q animateRollViewCompassHold`;
		optionVar -iv "viewCubePreserveSceneUp"		`optionVar -q viewCubePreserveSceneUpHold`;
		optionVar -iv "viewCubeShowCompass"		`optionVar -q viewCubeShowCompassHold`;
		optionVar -fv "viewCubeCompassAngle"		`optionVar -q viewCubewCompassAngleHold`;

	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "viewCubeShowCubeHold";
		optionVar -remove "viewCubeScreenPositionHold";
		optionVar -remove "viewCubeSizeHold";
		optionVar -remove "viewCubeInactiveOpacityHold";
		optionVar -remove "viewCubeSnapToClosestHold";
		optionVar -remove "viewCubeFitToViewHold";
		optionVar -remove "animateRollViewCompassHold";
		optionVar -remove "viewCubePreserveSceneUpHold";
		optionVar -remove "viewCubeShowCompassHold";
		optionVar -remove "viewCubeCompassAngleHold";
	}

	//----------------------------------------------------------
	// InViewEditor Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -iv "inViewEditorVisibleHold"		`optionVar -q inViewEditorVisible`;
	} else if ($mode == "restore") {
		optionVar -iv "inViewEditorVisible"			`optionVar -q inViewEditorVisibleHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "inViewEditorVisibleHold";
	}

	//----------------------------------------------------------
	// SteeringWheel Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -iv "steeringWheelWelcomeSeenHold"			`optionVar -q steeringWheelWelcomeSeen`;
		optionVar -fv "steeringWheelBigSizeHold"				`optionVar -q steeringWheelBigSize`;
		optionVar -iv "steeringWheelBigOpacityHold"				`optionVar -q steeringWheelBigOpacity`;
		optionVar -fv "steeringWheelMiniSizeHold"				`optionVar -q steeringWheelMiniSize`;
		optionVar -fv "steeringWheelMiniOpacityHold"			`optionVar -q steeringWheelMiniOpacity`;
		optionVar -iv "steeringWheelShowToolMessagesHold"		`optionVar -q steeringWheelShowToolMessages`;
		optionVar -iv "steeringWheelShowToolTipsHold"			`optionVar -q steeringWheelShowToolTips`;
		optionVar -iv "steeringWheelShowPinnedOnStartupHold"	`optionVar -q steeringWheelShowPinnedOnStartup`;
		optionVar -iv "steeringWheelInvertLookAxisHold"			`optionVar -q steeringWheelInvertLookAxis`;
		optionVar -iv "steeringWheelConstrainWalkToGroundHold"	`optionVar -q steeringWheelConstrainWalkToGround`;
		optionVar -fv "steeringWheelWalkSpeedFactorHold"		`optionVar -q steeringWheelWalkSpeedFactor`;
		optionVar -iv "steeringWheelIncrementalZoomHold"		`optionVar -q steeringWheelIncrementalZoom`;
		optionVar -iv "steeringWheelKeepSceneUprightHold"		`optionVar -q steeringWheelKeepSceneUpright`;
		optionVar -iv "steeringWheelSelectionSensitivityHold"	`optionVar -q steeringWheelSelectionSensitivity`;

	} else if ($mode == "restore") {
		optionVar -iv "steeringWheelWelcomeSeen"			`optionVar -q steeringWheelWelcomeSeenHold`;
		optionVar -fv "steeringWheelBigSize"				`optionVar -q steeringWheelBigSizeHold`;
		optionVar -iv "steeringWheelBigOpacity"				`optionVar -q steeringWheelBigOpacityHold`;
		optionVar -fv "steeringWheelMiniSize"				`optionVar -q steeringWheelMiniSizeHold`;
		optionVar -fv "steeringWheelMiniOpacity"			`optionVar -q steeringWheelMiniOpacityHold`;
		optionVar -iv "steeringWheelShowToolMessages"		`optionVar -q steeringWheelShowToolMessagesHold`;
		optionVar -iv "steeringWheelShowToolTips"			`optionVar -q steeringWheelShowToolTipsHold`;
		optionVar -iv "steeringWheelShowPinnedOnStartup"	`optionVar -q steeringWheelShowPinnedOnStartupHold`;
		optionVar -iv "steeringWheelInvertLookAxis"			`optionVar -q steeringWheelInvertLookAxisHold`;
		optionVar -iv "steeringWheelConstrainWalkToGround"	`optionVar -q steeringWheelConstrainWalkToGroundHold`;
		optionVar -fv "steeringWheelWalkSpeedFactor"		`optionVar -q steeringWheelWalkSpeedFactorHold`;
		optionVar -iv "steeringWheelIncrementalZoom"		`optionVar -q steeringWheelIncrementalZoomHold`;
		optionVar -iv "steeringWheelKeepSceneUpright"		`optionVar -q steeringWheelKeepSceneUprightHold`;
		optionVar -iv "steeringWheelSelectionSensitivity"	`optionVar -q steeringWheelSelectionSensitivityHold`;

	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "steeringWheelWelcomeSeenHold";
		optionVar -remove "steeringWheelBigSizeHold";
		optionVar -remove "steeringWheelBigOpacityHold";
		optionVar -remove "steeringWheelMiniSizeHold";
		optionVar -remove "steeringWheelMiniOpacityHold";
		optionVar -remove "steeringWheelShowToolMessagesHold";
		optionVar -remove "steeringWheelShowToolTipsHold";
		optionVar -remove "steeringWheelShowPinnedOnStartupHold";
		optionVar -remove "steeringWheelInvertLookAxisHold";
		optionVar -remove "steeringWheelConstrainWalkToGroundHold";
		optionVar -remove "steeringWheelWalkSpeedFactorHold";
		optionVar -remove "steeringWheelIncrementalZoomHold";
		optionVar -remove "steeringWheelKeepSceneUprightHold";
		optionVar -remove "steeringWheelSelectionSensitivityHold";
	}

	//----------------------------------------------------------
	// Dynamics Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -iv "dynPrefAutoCreateHold"			`optionVar -q dynPrefAutoCreate`;
		optionVar -iv "dynPrefRunupToCurrentTimeHold"	`optionVar -q dynPrefRunupToCurrentTime`;
		optionVar -iv "dynPrefRunupFromHold"			`optionVar -q dynPrefRunupFrom`;
		optionVar -iv "dynPrefSaveRuntimeStateHold"		`optionVar -q dynPrefSaveRuntimeState`;
		optionVar -iv "dynPrefEchoCollisionHold"		`optionVar -q dynPrefEchoCollision`;
	} else if ($mode == "restore") {
		optionVar -iv "dynPrefAutoCreate"				`optionVar -q dynPrefAutoCreateHold`;
		optionVar -iv "dynPrefRunupToCurrentTime"		`optionVar -q dynPrefRunupToCurrentTimeHold`;
		optionVar -iv "dynPrefRunupFrom"				`optionVar -q dynPrefRunupFromHold`;
		optionVar -iv "dynPrefSaveRuntimeState"			`optionVar -q dynPrefSaveRuntimeStateHold`;
		optionVar -iv "dynPrefEchoCollision"			`optionVar -q dynPrefEchoCollisionHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "dynPrefAutoCreateHold";
		optionVar -remove "dynPrefRunupToCurrentTimeHold";
		optionVar -remove "dynPrefRunupFromHold";
		optionVar -remove "dynPrefSaveRuntimeStateHold";
		optionVar -remove "dynPrefEchoCollisionHold";
	}

	//----------------------------------------------------------
	// Key Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -iv "gpuOverrideHold"	`optionVar -q gpuOverride`;
		optionVar -iv "evaluationModeHold"	`optionVar -q evaluationMode`;
		optionVar -iv "autoKeyframeStateHold"	`optionVar -q autoKeyframeState`;
		optionVar -iv "rotationInterpolationDefaultHold" `optionVar -q rotationInterpolationDefault`;
		optionVar -iv "hikRotationInterpolationDefaultHold" `optionVar -q hikRotationInterpolationDefault`;
		optionVar -iv "weightedTangentsHold"	`optionVar -q weightedTangents`;
		optionVar -sv "inTangentTypeHold"		`optionVar -q inTangentType`;
		optionVar -sv "outTangentTypeHold"		`optionVar -q outTangentType`;
		optionVar -iv "animBlendingOptHold"		`optionVar -q animBlendingOpt`;
	} else if ($mode == "restore") {
		optionVar -iv "gpuOverride"	`optionVar -q gpuOverrideHold`;
		optionVar -iv "evaluationMode"	`optionVar -q evaluationModeHold`;
		optionVar -iv "autoKeyframeState"		`optionVar -q autoKeyframeStateHold`;
		optionVar -iv "rotationInterpolationDefault" `optionVar -q rotationInterpolationDefaultHold`;
		optionVar -iv "hikRotationInterpolationDefault" `optionVar -q hikRotationInterpolationDefaultHold`;
		optionVar -iv "weightedTangents"		`optionVar -q weightedTangentsHold`;
		optionVar -sv "inTangentType"			`optionVar -q inTangentTypeHold`;
		optionVar -sv "outTangentType"			`optionVar -q outTangentTypeHold`;
		optionVar -iv "animBlendingOpt"	`optionVar -q animBlendingOptHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "gpuOverrideHold";
		optionVar -remove "evaluationModeHold";
		optionVar -remove "autoKeyframeStateHold";
		optionVar -remove "rotationInterpolationDefaultHold";
		optionVar -remove "hikRotationInterpolationDefaultHold";
		optionVar -remove "weightedTangentsHold";
		optionVar -remove "inTangentTypeHold";
		optionVar -remove "outTangentTypeHold";
		optionVar -remove "animBlendingOptHold";
	}

	//----------------------------------------------------------
	// Assets Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -iv "containerSelRootsInOutlinerHold" `optionVar -q containerSelRootsInOutliner`;
		optionVar -intValue "containerChanBoxMaxNoTemplateHold" `optionVar -q containerChanBoxMaxNoTemplate`;
		optionVar -intValue "containerChanBoxMaxWithTemplateHold" `optionVar -q containerChanBoxMaxWithTemplate`;
		optionVar -intValue "containerFlatViewCapHold" `optionVar -q containerFlatViewCap`;
	} else if ($mode == "restore") {
		optionVar -iv containerSelRootsInOutliner `optionVar -q containerSelRootsInOutlinerHold`;
		optionVar -intValue "containerChanBoxMaxNoTemplate" `optionVar -q containerChanBoxMaxNoTemplateHold`;
		optionVar -intValue "containerChanBoxMaxWithTemplate" `optionVar -q containerChanBoxMaxWithTemplateHold`;
		optionVar -intValue "containerFlatViewCap" `optionVar -q containerFlatViewCapHold`;
	} else {
		optionVar -remove "containerSelRootsInOutlinerHold";
		optionVar -remove "containerChanBoxMaxNoTemplateHold";
		optionVar -remove "containerChanBoxMaxWithTemplateHold";
		optionVar -remove "containerFlatViewCapHold";
	}

	//----------------------------------------------------------
	// File References Preferences
	//----------------------------------------------------------

	if ($mode == "save")
	{
		optionVar -iv "refAnimCurvesEditableHold"		`optionVar -q refAnimCurvesEditable`;
		optionVar -iv "refLockEditableHold"				`optionVar -q refLockEditable`;
	}
	else if($mode == "restore")
	{
		optionVar -iv "refAnimCurvesEditable"			`optionVar -q refAnimCurvesEditableHold`;
		optionVar -iv "refLockEditable"					`optionVar -q refLockEditableHold`;
	}
	else
	{
		optionVar -remove "refAnimCurvesEditableHold";
		optionVar -remove "refLockEditableHold";
	}


	//----------------------------------------------------------
	// Modeling Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -iv "modelWithTypeHold" `modelWithType(-1)`;
		optionVar -iv "modelWithToolsHold" `modelWithToolsAll(-1)`;
		optionVar -intValue "polyAutoConvertActionHold" 				`optionVar -query polyAutoConvertAction`;
		optionVar -intValue "polyCreateMeshesSingleSidedHold" 			`optionVar -query polyCreateMeshesSingleSided`;
		optionVar -intValue "polyAutoInstallActionHold" 				`optionVar -query polyAutoInstallAction`;
		optionVar -intValue "polyDefaultTangentSpaceHold"				`optionVar -query polyDefaultTangentSpace`;
		optionVar -floatValue "polyDefaultTangentSmoothingAngleHold" 	`optionVar -query polyDefaultTangentSmoothingAngle`;
		optionVar -intValue "polyAutoShowColorPerVertexHold"			`optionVar -query polyAutoShowColorPerVertex`;
		optionVar -intValue "polyKeepFacetsGroupedHold"			`optionVar -query polyKeepFacetsGrouped`;
	} else if ($mode == "restore") {
		int $oldVal;
		$oldVal = `optionVar -q modelWithTypeHold`;
		if ($oldVal != -1) modelWithType($oldVal);
		$oldVal = `optionVar -q modelWithToolsHold`;
		if ($oldVal != -1) modelWithToolsAll($oldVal);
		optionVar -intValue "polyAutoConvertAction" 				`optionVar -query polyAutoConvertActionHold`;
		optionVar -intValue "polyCreateMeshesSingleSided" 			`optionVar -query polyCreateMeshesSingleSidedHold`;
		optionVar -intValue "polyAutoInstallAction" 				`optionVar -query polyAutoInstallActionHold`;
		optionVar -intValue "polyDefaultTangentSpace" 				`optionVar -query polyDefaultTangentSpaceHold`;
		optionVar -floatValue "polyDefaultTangentSmoothingAngle" 	`optionVar -query polyDefaultTangentSmoothingAngleHold`;
		optionVar -intValue "polyAutoShowColorPerVertex" 			`optionVar -query polyAutoShowColorPerVertexHold`;
		optionVar -intValue "polyKeepFacetsGrouped" 			`optionVar -query polyKeepFacetsGroupedHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "modelWithTypeHold";
		optionVar -remove "modelWithToolsHold";
		optionVar -remove "polyAutoConvertActionHold";
		optionVar -remove "polyCreateMeshesSingleSidedHold";
		optionVar -remove "polyAutoInstallActionHold";
		optionVar -remove "polyDefaultTangentSpaceHold";
		optionVar -remove "polyDefaultTangentSmoothingAngleHold";
		optionVar -remove "polyAutoShowColorPerVertexHold";
		optionVar -remove "polyKeepFacetsGroupedHold";
	}

	//----------------------------------------------------------
	// Modeling Toolkit Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -iv MT_useCompModeCustCmdHold		`optionVar -q MT_useCompModeCustCmd`;
		optionVar -sv MT_compModeCustCmdHold		`optionVar -q MT_compModeCustCmd`;
		optionVar -iv MT_selectDeadSpaceRangeHold	`optionVar -q MT_selectDeadSpaceRange`;
		optionVar -iv MT_tweakDeadSpaceRangeHold	`optionVar -q MT_tweakDeadSpaceRange`;

		optionVar -iv MT_freeRotateHold (`optionVar -q MT_freeRotate`);
		optionVar -iv MT_refreshActiveOnlyHold (`optionVar -q MT_refreshActiveOnly`);
		optionVar -iv MT_resetManipOnToolSwitchHold (`optionVar -q MT_resetManipOnToolSwitch`);
		optionVar -iv MT_resetManipOnSelChangeHold (`optionVar -q MT_resetManipOnSelChange`);
		optionVar -fv MT_manipPickRangeHold (`optionVar -q MT_manipPickRange`);
		optionVar -iv MT_planeHandleOffsetHold (`optionVar -q MT_planeHandleOffset`);
		optionVar -iv manipHideOnCtrlHold (`optionVar -q manipHideOnCtrl`);
		optionVar -iv manipHideOnShiftHold (`optionVar -q manipHideOnShift`);
		optionVar -iv manipHideOnShiftCtrlHold (`optionVar -q manipHideOnShiftCtrl`);

		optionVar -iv MT_hudShowModeHold (`optionVar -q MT_hudShowMode`);
		optionVar -iv MT_hudShowCoordSpaceHold (`optionVar -q MT_hudShowCoordSpace`);
		optionVar -iv MT_showDynamicHUDHold (`optionVar -q MT_showDynamicHUD`);

		float $color[] = `optionVar -q MT_dynamicHUDColor`;
		optionVar -fv MT_dynamicHUDColorHold $color[0];
		optionVar -fva MT_dynamicHUDColorHold $color[0];
		optionVar -fva MT_dynamicHUDColorHold $color[0];

		optionVar -iv MT_invertedCursorsHold `optionVar -q MT_invertedCursors`;

		float $color[] = `optionVar -q MT_hiliteColorAdd`;
		optionVar -fv MT_hiliteColorAddHold $color[0];
		optionVar -fva MT_hiliteColorAddHold $color[1];
		optionVar -fva MT_hiliteColorAddHold $color[2];

		float $color[] = `optionVar -q MT_hiliteColorCutLine`;
		optionVar -fv MT_hiliteColorCutLineHold $color[0];
		optionVar -fva MT_hiliteColorCutLineHold $color[1];
		optionVar -fva MT_hiliteColorCutLineHold $color[2];
		optionVar -fva MT_hiliteColorCutLineHold $color[3];

		float $color[] = `optionVar -q MT_hiliteColorCutVert`;
		optionVar -fv MT_hiliteColorCutVertHold $color[0];
		optionVar -fva MT_hiliteColorCutVertHold $color[1];
		optionVar -fva MT_hiliteColorCutVertHold $color[2];
		optionVar -fva MT_hiliteColorCutVertHold $color[3];

		float $color[] = `optionVar -q MT_hiliteColorCutEdge`;
		optionVar -fv MT_hiliteColorCutEdgeHold $color[0];
		optionVar -fva MT_hiliteColorCutEdgeHold $color[1];
		optionVar -fva MT_hiliteColorCutEdgeHold $color[2];
		optionVar -fva MT_hiliteColorCutEdgeHold $color[3];

		float $color[] = `optionVar -q MT_hiliteColorCutFace`;
		optionVar -fv MT_hiliteColorCutFaceHold $color[0];
		optionVar -fva MT_hiliteColorCutFaceHold $color[1];
		optionVar -fva MT_hiliteColorCutFaceHold $color[2];
		optionVar -fva MT_hiliteColorCutFaceHold $color[3];

		$color = `optionVar -q MT_hiliteColorSubtract`;
		optionVar -fv MT_hiliteColorSubtractHold $color[0];
		optionVar -fva MT_hiliteColorSubtractHold $color[1];
		optionVar -fva MT_hiliteColorSubtractHold $color[2];

		$color = `optionVar -q MT_paintColorAdd`;
		optionVar -fv MT_paintColorAddHold $color[0];
		optionVar -fva MT_paintColorAddHold $color[1];
		optionVar -fva MT_paintColorAddHold $color[2];

		$color = `optionVar -q MT_paintColorSubtract`;
		optionVar -fv MT_paintColorSubtractHold $color[0];
		optionVar -fva MT_paintColorSubtractHold $color[1];
		optionVar -fva MT_paintColorSubtractHold $color[2];

		$color = `optionVar -q MT_activeManipColor`;
		optionVar -fv MT_activeManipColorHold $color[0];
		optionVar -fva MT_activeManipColorHold $color[1];
		optionVar -fva MT_activeManipColorHold $color[2];

		optionVar -fv MT_highlightOpacityHold `optionVar -q MT_highlightOpacity`;

		optionVar -iv MT_quaDrawMmbWeldHold		`optionVar -q MT_quaDrawMmbWeld`;
		optionVar -iv MT_shiftSlideHold			`optionVar -q MT_shiftSlide`;
		optionVar -iv MT_shiftCtrlSlideHold		`optionVar -q MT_shiftCtrlSlide`;
	} else if ($mode == "restore") {
		optionVar -iv MT_useCompModeCustCmd		`optionVar -q MT_useCompModeCustCmdHold`;
		optionVar -sv MT_compModeCustCmd		`optionVar -q MT_compModeCustCmdHold`;
		optionVar -iv MT_selectDeadSpaceRange	`optionVar -q MT_selectDeadSpaceRangeHold`;
		optionVar -iv MT_tweakDeadSpaceRange	`optionVar -q MT_tweakDeadSpaceRangeHold`;

		optionVar -iv MT_freeRotate (`optionVar -q MT_freeRotateHold`);
		optionVar -iv MT_refreshActiveOnly (`optionVar -q MT_refreshActiveOnlyHold`);
		optionVar -iv MT_resetManipOnToolSwitch (`optionVar -q MT_resetManipOnToolSwitchHold`);
		optionVar -iv MT_resetManipOnSelChange (`optionVar -q MT_resetManipOnSelChangeHold`);
		optionVar -fv MT_manipPickRange (`optionVar -q MT_manipPickRangeHold`);
		optionVar -iv MT_planeHandleOffset (`optionVar -q MT_planeHandleOffsetHold`);
		optionVar -iv manipHideOnCtrl (`optionVar -q manipHideOnCtrlHold`);
		optionVar -iv manipHideOnShift (`optionVar -q manipHideOnShiftHold`);
		optionVar -iv manipHideOnShiftCtrl (`optionVar -q manipHideOnShiftCtrlHold`);

		optionVar -iv MT_hudShowMode (`optionVar -q MT_hudShowModeHold`);
		optionVar -iv MT_hudShowCoordSpace (`optionVar -q MT_hudShowCoordSpaceHold`);
		optionVar -iv MT_showDynamicHUD (`optionVar -q MT_showDynamicHUDHold`);

		float $color[] = `optionVar -q MT_dynamicHUDColorHold`;
		optionVar -fv MT_dynamicHUDColor $color[0];
		optionVar -fva MT_dynamicHUDColor $color[0];
		optionVar -fva MT_dynamicHUDColor $color[0];

		optionVar -iv MT_invertedCursors `optionVar -q MT_invertedCursorsHold`;

		$color = `optionVar -q MT_hiliteColorAddHold`;
		optionVar -fv MT_hiliteColorAdd $color[0];
		optionVar -fva MT_hiliteColorAdd $color[1];
		optionVar -fva MT_hiliteColorAdd $color[2];

		$color = `optionVar -q MT_hiliteColorCutLineHold`;
		optionVar -fv MT_hiliteColorCutLine $color[0];
		optionVar -fva MT_hiliteColorCutLine $color[1];
		optionVar -fva MT_hiliteColorCutLine $color[2];
		optionVar -fva MT_hiliteColorCutLine $color[3];

		$color = `optionVar -q MT_hiliteColorCutVertHold`;
		optionVar -fv MT_hiliteColorCutVert $color[0];
		optionVar -fva MT_hiliteColorCutVert $color[1];
		optionVar -fva MT_hiliteColorCutVert $color[2];

		$color = `optionVar -q MT_hiliteColorCutEdgeHold`;
		optionVar -fv MT_hiliteColorCutEdge $color[0];
		optionVar -fva MT_hiliteColorCutEdge $color[1];
		optionVar -fva MT_hiliteColorCutEdge $color[2];

		$color = `optionVar -q MT_hiliteColorCutFaceHold`;
		optionVar -fv MT_hiliteColorCutFace $color[0];
		optionVar -fva MT_hiliteColorCutFace $color[1];
		optionVar -fva MT_hiliteColorCutFace $color[2];

		$color = `optionVar -q MT_hiliteColorSubtractHold`;
		optionVar -fv MT_hiliteColorSubtract $color[0];
		optionVar -fva MT_hiliteColorSubtract $color[1];
		optionVar -fva MT_hiliteColorSubtract $color[2];

		$color = `optionVar -q MT_paintColorAddHold`;
		optionVar -fv MT_paintColorAdd $color[0];
		optionVar -fva MT_paintColorAdd $color[1];
		optionVar -fva MT_paintColorAdd $color[2];

		$color = `optionVar -q MT_paintColorSubtractHold`;
		optionVar -fv MT_paintColorSubtract $color[0];
		optionVar -fva MT_paintColorSubtract $color[1];
		optionVar -fva MT_paintColorSubtract $color[2];

		$color = `optionVar -q MT_activeManipColorHold`;
		optionVar -fv MT_activeManipColor $color[0];
		optionVar -fva MT_activeManipColor $color[1];
		optionVar -fva MT_activeManipColor $color[2];

		optionVar -fv MT_highlightOpacity `optionVar -q MT_highlightOpacityHold`;

		optionVar -iv MT_quaDrawMmbWeld		`optionVar -q MT_quaDrawMmbWeldHold`;
		optionVar -iv MT_shiftSlide			`optionVar -q MT_shiftSlideHold`;
		optionVar -iv MT_shiftCtrlSlide		`optionVar -q MT_shiftCtrlSlideHold`;
	} else {
		optionVar -remove "MT_useCompModeCustCmdHold";
		optionVar -remove "MT_compModeCustCmdHold";
		optionVar -remove "MT_selectDeadSpaceRangeHold";
		optionVar -remove "MT_tweakDeadSpaceRangeHold";

		optionVar -remove MT_freeRotateHold;
		optionVar -remove MT_refreshActiveOnlyHold;
		optionVar -remove MT_resetManipOnToolSwitchHold;
		optionVar -remove MT_resetManipOnSelChangeHold;
		optionVar -remove MT_manipPickRangeHold;
		optionVar -remove MT_planeHandleOffsetHold;
		optionVar -remove manipHideOnCtrlHold;
		optionVar -remove manipHideOnShiftHold;
		optionVar -remove manipHideOnShiftCtrlHold;

		optionVar -remove MT_hudShowModeHold;
		optionVar -remove MT_hudShowCoordSpaceHold;
		optionVar -remove MT_showDynamicHUDHold;

		optionVar -remove MT_dynamicHUDColorHold;

		optionVar -remove MT_invertedCursorsHold;
		optionVar -remove MT_hiliteColorAddHold;
		optionVar -remove MT_hiliteColorCutLineHold;
		optionVar -remove MT_hiliteColorCutVertHold;
		optionVar -remove MT_hiliteColorCutEdgeHold;
		optionVar -remove MT_hiliteColorCutFaceHold;
		optionVar -remove MT_hiliteColorSubtractHold;
		optionVar -remove MT_paintColorAddHold;
		optionVar -remove MT_paintColorSubtractHold;
		optionVar -remove MT_activeManipColorHold;
		optionVar -remove MT_highlightOpacityHold;

		optionVar -remove MT_quaDrawMmbWeldHold;
		optionVar -remove MT_shiftSlideHold;
		optionVar -remove MT_shiftCtrlSlideHold;
	}

	//----------------------------------------------------------
	// Node Editor Preferences
	//----------------------------------------------------------
	global string $gNodeEdGlobalOptionsKeys[];
	if ($mode == "save") {
		string $var;
		for ($var in $gNodeEdGlobalOptionsKeys) {
			optionVar -iv ($var + "Hold") `optionVar -q $var`;
		}
	} else if ($mode == "restore") {
		for ($var in $gNodeEdGlobalOptionsKeys) {
			optionVar -iv $var `optionVar -q ($var + "Hold")`;
		}
	} else {
		for ($var in $gNodeEdGlobalOptionsKeys) {
			optionVar -remove ($var + "Hold");
		}
	}

	//----------------------------------------------------------
	// Selection Preferences
	//----------------------------------------------------------

	global int $gCustomSelPriority[];
	global int $gCustomSelPriorityHold[];

	if ($mode == "save") {
		optionVar -iv "selectSingleMarqueeHold"		`optionVar -q selectSingleMarquee`;
		optionVar -iv "selectClickDragHold"			`optionVar -q selectClickDrag`;
		optionVar -iv "selectAffectsActiveHold"		`optionVar -q selectAffectsActive`;
		optionVar -iv "ignoreSelectionPriorityHold"	`optionVar -q ignoreSelectionPriority`;
		optionVar -iv "popupMenuSelectionHold"		`optionVar -q popupMenuSelection`;
		optionVar -iv "expandPopupListHold"			`optionVar -q expandPopupList`;
		optionVar -iv "clickBoxSizeHold"			`optionVar -q clickBoxSize`;
		optionVar -sv "selectPrefPriorityModeHold"	`optionVar -q selectPrefPriorityMode`;
		optionVar -iv "polyFaceSensitiveHold"		`optionVar -q polyFaceSensitive`;
		optionVar -iv "preSelectHiliteHold"			`optionVar -q preSelectHilite`;
		optionVar -iv "containerCentricSelectionHold"	`optionVar -q containerCentricSelection`;
		optionVar -iv "containerAutoSelectContainerHold"	`optionVar -q containerAutoSelectContainer`;
		optionVar -iv "selectPrefUseDepthHold"		`optionVar -q selectPrefUseDepth`;
		optionVar -iv "selectPrefPreSelectBackfacingHold" `optionVar -q selectPrefPreSelectBackfacing`;
		optionVar -iv "selectPrefPreSelectClosestHold" `optionVar -q selectPrefPreSelectClosest`;
		optionVar -iv "TrackSelectionOrderHold"		`optionVar -q TrackSelectionOrder`;
		optionVar -iv "PreserveComponentSelectionsHold"	`optionVar -q PreserveComponentSelections`;
		optionVar -iv "selectionChildHighlightModeHold"	`optionVar -q selectionChildHighlightMode`;
		$gCustomSelPriorityHold = `optionVar -q customSelectPriority`;

	} else if ($mode == "restore") {
		optionVar -iv "selectSingleMarquee"			`optionVar -q selectSingleMarqueeHold`;
		optionVar -iv "selectClickDrag"				`optionVar -q selectClickDragHold`;
		optionVar -iv "selectAffectsActive"			`optionVar -q selectAffectsActiveHold`;
		optionVar -iv "ignoreSelectionPriority"		`optionVar -q ignoreSelectionPriorityHold`;
		optionVar -iv "popupMenuSelection"			`optionVar -q popupMenuSelectionHold`;
		optionVar -iv "expandPopupList"				`optionVar -q expandPopupListHold`;
		optionVar -iv "clickBoxSize"				`optionVar -q clickBoxSizeHold`;
		optionVar -sv "selectPrefPriorityMode"		`optionVar -q selectPrefPriorityModeHold`;
		optionVar -iv "polyFaceSensitive"			`optionVar -q polyFaceSensitiveHold`;
		optionVar -iv "preSelectHilite"				`optionVar -q preSelectHiliteHold`;
		optionVar -iv "containerCentricSelection"	`optionVar -q containerCentricSelectionHold`;
		optionVar -iv "containerAutoSelectContainer"	`optionVar -q containerAutoSelectContainerHold`;
		optionVar -iv "selectPrefUseDepth"			`optionVar -q selectPrefUseDepthHold`;
		optionVar -iv "selectPrefPreSelectBackfacing" `optionVar -q selectPrefPreSelectBackfacingHold`;
		optionVar -iv "selectPrefPreSelectClosest"	`optionVar -q selectPrefPreSelectClosestHold`;
		optionVar -iv "TrackSelectionOrder"			`optionVar -q TrackSelectionOrderHold`;
		optionVar -iv "PreserveComponentSelections"	`optionVar -q PreserveComponentSelectionsHold`;
		optionVar -iv "selectionChildHighlightMode"	`optionVar -q selectionChildHighlightModeHold`;
		int $i;
		int $arraySize = size($gCustomSelPriorityHold);
		optionVar -ca "customSelectPriority";
		for ($i = 0; $i < $arraySize; $i++ ) {
			optionVar -iva customSelectPriority $gCustomSelPriorityHold[$i];
		}

	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "selectSingleMarqueeHold";
		optionVar -remove "selectClickDragHold";
		optionVar -remove "selectAffectsActiveHold";
		optionVar -remove "ignoreSelectionPriorityHold";
		optionVar -remove "popupMenuSelectionHold";
		optionVar -remove "expandPopupListHold";
		optionVar -remove "clickBoxSizeHold";
		optionVar -remove "selectPrefPriorityModeHold";
		optionVar -remove "polyFaceSensitiveHold";
		optionVar -remove "preSelectHiliteHold";
		optionVar -remove "containerCentricSelectionHold";
		optionVar -remove "containerAutoSelectContainerHold";
		optionVar -remove "selectPrefUseDepthHold";
		optionVar -remove "selectPrefPreSelectBackfacingHold";
		optionVar -remove "selectPrefPreSelectClosestHold";
		optionVar -remove "TrackSelectionOrderHold";
		optionVar -remove "PreserveComponentSelectionsHold";
		optionVar -remove "selectionChildHighlightModeHold";
	}

	//----------------------------------------------------------
	// Snapping Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -iv "useSnapToleranceHold"	`optionVar -q useSnapTolerance`;
		optionVar -iv "snapToleranceHold"		`optionVar -q snapTolerance`;
		optionVar -iv "snapUVToleranceHold"		`optionVar -q snapUVTolerance`;
		optionVar -iv "snapMagnetHold"			`optionVar -q snapMagnet`;
		optionVar -fv "snapMagnetToleranceHold"	`optionVar -q snapMagnetTolerance`;
	} else if ($mode == "restore") {
		optionVar -iv "useSnapTolerance"		`optionVar -q useSnapToleranceHold`;
		optionVar -iv "snapTolerance"			`optionVar -q snapToleranceHold`;
		optionVar -iv "snapUVTolerance"			`optionVar -q snapUVToleranceHold`;
		optionVar -iv "snapMagnet"				`optionVar -q snapMagnetHold`;
		optionVar -fv "snapMagnetTolerance"		`optionVar -q snapMagnetToleranceHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "useSnapToleranceHold";
		optionVar -remove "snapToleranceHold";
		optionVar -remove "snapUVToleranceHold";
		optionVar -remove "snapMagnetHold";
		optionVar -remove "snapMagnetToleranceHold";
	}

	//----------------------------------------------------------
	// Sound Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -sv "timeSliderSoundDisplayHold"		`optionVar -q timeSliderSoundDisplay`;
		optionVar -iv "timeSliderRepeatOnHoldHold"		`optionVar -q timeSliderRepeatOnHold`;
		optionVar -fv "timeSliderRepeatChunkHold"		`optionVar -q timeSliderRepeatChunk`;
	} else if ($mode == "restore") {
		optionVar -sv "timeSliderSoundDisplay"			`optionVar -q timeSliderSoundDisplayHold`;
		optionVar -iv "timeSliderRepeatOnHold"			`optionVar -q timeSliderRepeatOnHoldHold`;
		optionVar -fv "timeSliderRepeatChunk"			`optionVar -q timeSliderRepeatChunkHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "timeSliderSoundDisplayHold";
		optionVar -remove "timeSliderRepeatOnHoldHold";
		optionVar -remove "timeSliderRepeatChunkHold";
	}

	//----------------------------------------------------------
	// Advanced Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -iv "undoIsEnabledHold"			`optionVar -q undoIsEnabled`;
		optionVar -iv "undoIsInfiniteHold"			`optionVar -q undoIsInfinite`;
		optionVar -iv "undoLengthHold"				`optionVar -q undoLength`;
	} else if ($mode == "restore") {
		optionVar -iv "undoIsEnabled"				`optionVar -q undoIsEnabledHold`;
		optionVar -iv "undoIsInfinite"				`optionVar -q undoIsInfiniteHold`;
		optionVar -iv "undoLength"					`optionVar -q undoLengthHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "undoIsEnabledHold";
		optionVar -remove "undoIsInfiniteHold";
		optionVar -remove "undoLengthHold";
	}

	//----------------------------------------------------------
	// Rendering Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -sv "preferredRendererHold"					`optionVar -q preferredRenderer`;
		optionVar -iv "miCacheOptimFileTexturesHold"			`optionVar -q miCacheOptimFileTextures`;
		optionVar -iv "miFileTextureCacheStorageModeHold"		`optionVar -q miFileTextureCacheStorageMode`;
		optionVar -sv "miFileTextureCacheLocationHold"			`optionVar -q miFileTextureCacheLocation`;
		optionVar -iv "miFileTextureCacheConversionScopeHold"	`optionVar -q miFileTextureCacheConversionScope`;
		optionVar -iv "miUseMayaAlphaDetectionHold"				`optionVar -q miUseMayaAlphaDetection`;
		optionVar -iv "miCollapseHistoryOnProxyUpdateHold"		`optionVar -q miCollapseHistoryOnProxyUpdate`;
        optionVar -iv "miEnableRayTracingForSwatchHold"		    `optionVar -q miEnableRayTracingForSwatch`;
	} else if ($mode == "restore") {
		optionVar -sv "preferredRenderer"					`optionVar -q preferredRendererHold`;
		optionVar -iv "miCacheOptimFileTextures"			`optionVar -q miCacheOptimFileTexturesHold`;
		optionVar -iv "miFileTextureCacheStorageMode"		`optionVar -q miFileTextureCacheStorageModeHold`;
		optionVar -sv "miFileTextureCacheLocation"			`optionVar -q miFileTextureCacheLocationHold`;
		optionVar -iv "miFileTextureCacheConversionScope"	`optionVar -q miFileTextureCacheConversionScopeHold`;
		optionVar -iv "miUseMayaAlphaDetection"				`optionVar -q miUseMayaAlphaDetectionHold`;
		optionVar -iv "miCollapseHistoryOnProxyUpdate"		`optionVar -q miCollapseHistoryOnProxyUpdateHold`;
        optionVar -iv "miEnableRayTracingForSwatch"			`optionVar -q miEnableRayTracingForSwatchHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "preferredRendererHold";
		optionVar -remove "miCacheOptimFileTexturesHold";
		optionVar -remove "miFileTextureCacheStorageModeHold";
		optionVar -remove "miFileTextureCacheLocationHold";
		optionVar -remove "miFileTextureCacheConversionScopeHold";
		optionVar -remove "miUseMayaAlphaDetectionHold";
		optionVar -remove "miCollapseHistoryOnProxyUpdateHold";
        optionVar -remove "miEnableRayTracingForSwatchHold";
	}

	//----------------------------------------------------------
	// File I/O Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -sv "fileCompressionModeHold"			`optionVar -q fileCompressionMode`;
		optionVar -iv "displayLayerMergeHold"			`optionVar -q displayLayerMerge`;
		optionVar -iv "RecentFilesMaxSizeHold"			`optionVar -q RecentFilesMaxSize`;
		optionVar -iv "RecentBackupsMaxSizeHold"		`optionVar -q RecentBackupsMaxSize`;
		optionVar -iv "RecentProjectsMaxSizeHold"		`optionVar -q RecentProjectsMaxSize`;
		optionVar -iv "FileDialogStyleHold"				`optionVar -q FileDialogStyle`;
		optionVar -iv "FileDialogHideExtensionHold"	`optionVar -q FileDialogHideExtension`;
		optionVar -iv "fileIgnoreVersionHold"			`optionVar -q fileIgnoreVersion`;
		optionVar -iv "autoSaveEnableHold"				`optionVar -q autoSaveEnable`;
		optionVar -iv "autoSavePromptHold"				`optionVar -q autoSavePrompt`;
		optionVar -iv "autoSaveLimitBackupsHold"		`optionVar -q autoSaveLimitBackups`;
		optionVar -iv "autoSaveMaxBackupsHold"			`optionVar -q autoSaveMaxBackups`;
		optionVar -iv "autoSaveIntervalHold"			`optionVar -q autoSaveInterval`;
		optionVar -iv "autoSaveDestinationHold"			`optionVar -q autoSaveDestination`;
		if ( `optionVar -exists autoSaveFolder` )
			optionVar -sv "autoSaveFolderHold"				`optionVar -q autoSaveFolder`;
		optionVar -iv "MT_autoloadTexturesHold"				`optionVar -q MT_autoloadTextures`;
	} else if ($mode == "restore") {
		optionVar -sv "fileCompressionMode"				`optionVar -q fileCompressionModeHold`;
		optionVar -iv "displayLayerMerge"				`optionVar -q displayLayerMergeHold`;
		optionVar -iv "RecentFilesMaxSize"				`optionVar -q RecentFilesMaxSizeHold`;
		optionVar -iv "RecentBackupsMaxSize"			`optionVar -q RecentBackupsMaxSizeHold`;
		optionVar -iv "RecentProjectsMaxSize"			`optionVar -q RecentProjectsMaxSizeHold`;
		optionVar -iv "FileDialogStyle"					`optionVar -q FileDialogStyleHold`;
		optionVar -iv "FileDialogHideExtension"			`optionVar -q FileDialogHideExtensionHold`;
		optionVar -iv "fileIgnoreVersion"				`optionVar -q fileIgnoreVersionHold`;
		optionVar -iv "autoSaveEnable"					`optionVar -q autoSaveEnableHold`;
		optionVar -iv "autoSavePrompt"					`optionVar -q autoSavePromptHold`;
		optionVar -iv "autoSaveLimitBackups"			`optionVar -q autoSaveLimitBackupsHold`;
		optionVar -iv "autoSaveMaxBackups"				`optionVar -q autoSaveMaxBackupsHold`;
		optionVar -iv "autoSaveInterval"				`optionVar -q autoSaveIntervalHold`;
		optionVar -iv "autoSaveDestination"				`optionVar -q autoSaveDestinationHold`;
		if ( `optionVar -exists autoSaveFolderHold` )
			optionVar -sv "autoSaveFolder"					`optionVar -q autoSaveFolderHold`;
		optionVar -iv "MT_autoloadTextures"				`optionVar -q MT_autoloadTexturesHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "fileCompressionModeHold";
		optionVar -remove "displayLayerMergeHold";
		optionVar -remove "RecentFilesMaxSizeHold";
		optionVar -remove "RecentBackupsMaxSizeHold";
		optionVar -remove "RecentProjecstMaxSizeHold";
		optionVar -remove "FileDialogStyleHold";
		optionVar -remove "FileDialogHideExtensionHold";
		optionVar -remove "fileIgnoreVersionHold";
		optionVar -remove "autoSaveEnableHold";
		optionVar -remove "autoSavePromptHold";
		optionVar -remove "autoSaveLimitBackupsHold";
		optionVar -remove "autoSaveMaxBackupsHold";
		optionVar -remove "autoSaveIntervalHold";
		optionVar -remove "autoSaveDestinationHold";
		optionVar -remove "autoSaveFolderHold";
		optionVar -remove "MT_autoloadTexturesHold";
	}
	//----------------------------------------------------------
	// Modules Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -iv "loadDynamicsHold"		`optionVar -q loadDynamics`;
		optionVar -iv "loadUrchinHold"			`optionVar -q loadUrchin`;
	} else if ($mode == "restore") {
		optionVar -iv "loadDynamics"			`optionVar -q loadDynamicsHold`;
		optionVar -iv "loadUrchin"				`optionVar -q loadUrchinHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "loadDynamicsHold";
		optionVar -remove "loadUrchinHold";
	}

	//----------------------------------------------------------
	// OpenMaya Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -iv "apiPrefLazyLoadingHold"		`optionVar -q apiPrefLazyLoading`;
		optionVar -iv "apiPrefOldPluginWarningHold"	`optionVar -q apiPrefOldPluginWarning`;
	} else if ($mode == "restore") {
		optionVar -iv "apiPrefLazyLoading"			`optionVar -q apiPrefLazyLoadingHold`;
		optionVar -iv "apiPrefOldPluginWarning"		`optionVar -q apiPrefOldPluginWarningHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "apiPrefLazyLoadingHold";
		optionVar -remove "apiPrefOldPluginWarningHold";
	}
	//----------------------------------------------------------
	// Custom Preferences
	//----------------------------------------------------------
	global string $gPrefsCustomTabHoldCurrentState[];
	string $holdCurrentStateFn;
	for($holdCurrentStateFn in $gPrefsCustomTabHoldCurrentState) {
		eval $holdCurrentStateFn $mode;
	}

	//----------------------------------------------------------
	// Save Actions Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -iv "saveActionsPreferencesHold"	`optionVar -q saveActionsPreferences`;
		optionVar -iv "saveActionsScriptEditorHold"	`optionVar -q saveActionsScriptEditor`;
	} else if ($mode == "restore") {
		optionVar -iv "saveActionsPreferences"		`optionVar -q saveActionsPreferencesHold`;
		optionVar -iv "saveActionsScriptEditor"		`optionVar -q saveActionsScriptEditorHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "saveActionsPreferencesHold";
		optionVar -remove "saveActionsScriptEditorHold";
	}

	//----------------------------------------------------------
	// Command Port Preferences
	//----------------------------------------------------------

	if ($mode == "save") {
		optionVar -iv "commandportOpenByDefaultHold"	`optionVar -q commandportOpenByDefault`;
		optionVar -sv "commandportDefaultNameHold"	`optionVar -q commandportDefaultName`;
	} else if ($mode == "restore") {
		optionVar -iv "commandportOpenByDefault"	`optionVar -q commandportOpenByDefaultHold`;
		optionVar -sv "commandportDefaultName"		`optionVar -q commandportDefaultNameHold`;
	} else {
		// Remove the temporary option vars so they don't get saved out
		optionVar -remove "commandportOpenByDefaultHold";
		optionVar -remove "commandportDefaultNameHold";
	}
}
