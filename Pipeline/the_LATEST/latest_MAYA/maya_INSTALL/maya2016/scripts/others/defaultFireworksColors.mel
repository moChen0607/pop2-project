// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


//
//  ================ defaultFireworksColors ================
//
//  SYNOPSIS
//      Set the colors for the particle burst streaks (the cone instances).
//		This proc will set $numColors of colors into a vector array, ranging
//		equally along the color spectrum in color spectrum order.
//		The colors are "rgb".
//
//	ARGUMENTS
//		int $numColors
//
//	RETURN
//		The colors
//
global proc vector[] defaultFireworksColors(int $numColors)
{
	vector $colors[];
	clear($colors);

	float $numC = $numColors - 1;

	for ($i = 0; $i < $numColors; $i++)
	{
		// Set the hue for hsv.
		//
		float $h = $i / $numC;

		// Set the hsv of the color.
		//
		vector $hsv = <<$h, 1, 1>>; 

		// Convert from hsv to rgb.
		//
		$colors[$i] = hsv_to_rgb($hsv);
	}

	return $colors;
}


