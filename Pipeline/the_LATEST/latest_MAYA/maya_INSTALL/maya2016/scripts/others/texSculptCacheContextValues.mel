// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc texSculptBrushInfo(string $mode, string $brushInfo[])
{
    switch ($mode)
	{
	case "Grab":
		$brushInfo[3] = "0";
		$brushInfo[2] = "GrabUVTool";
		$brushInfo[1] = "UV_Grab_BrushLarge.png";
		$brushInfo[0] = "Grab UV Tool";
		break;
    case "Freeze":
		$brushInfo[3] = "1";
        $brushInfo[2] = "PinUVTool";
		$brushInfo[1] = "UV_Freeze_ToolLarge.png";
		$brushInfo[0] = "Freeze UV Tool";
		break;
    case "Pinch":
		$brushInfo[3] = "1";
        $brushInfo[2] = "PinchUVTool";
		$brushInfo[1] = "UV_Pinch_ToolLarge.png";
		$brushInfo[0] = "Pinch UV Tool";
        break; 
    case "Smear":
		$brushInfo[3] = "1";
        $brushInfo[2] = "SmearUVTool";
		$brushInfo[1] = "UV_Smear_ToolLarge.png";
		$brushInfo[0] = "Smear UV Tool";
        break; 
	default:
		$brushInfo[3] = "0";
		$brushInfo[2] = "GrabUVTool";
		$brushInfo[1] = "UV_Grab_BrushLarge.png";
		$brushInfo[0] = "Grab UV Tool";
		break;
	}
}

global proc texSculptCacheContextValues( string $toolName	)
{
	string $parent = (`toolPropertyWindow -q -location` + "|texSculptCacheContext");
	setParent $parent;

	float $size = `texSculptCacheContext -q -size $toolName`;
	float $strength = `texSculptCacheContext -q -strength $toolName`;
	int $falloff = 1 + (`texSculptCacheContext -q -falloffType $toolName`);
	int $stg = `falloffCurve -q -snapToGrid texSculptFalloffCurve`;
	
	// See the Direction definition
	// enum Direction {
	//    kDirUV = 0,  // Can also be 2.
	//    kDirU = 3,   // 3 will corresponding to "XZ"
	//    kDirV = 4    // 4 will corresponding to "YZ"
	// }
	// To setup the item in Direction tool settings, need to transform 0, 1, 2 to 1, 2, 3.
	int $direction = 1 + (`texSculptCacheContext -q -direction $toolName`);
	
	string $mode = (`texSculptCacheContext -q -mode $toolName`);

	floatSliderGrp -e -value $size texSculptFalloffSize_FSG;
	floatSliderGrp -e -value $strength texSculptFalloffStrength_FSG;

	int $inv = `texSculptCacheContext -q -inverted $toolName`;

	int $twist = `texSculptCacheContext -q -grabTwist $toolName`;
	checkBoxGrp -e -value1 $twist texSculptTwist_CBG;
    if( $mode == "Grab" )
	{
		checkBoxGrp -e -visible true texSculptTwist_CBG; 
	}
	else
	{
		checkBoxGrp -e -visible false texSculptTwist_CBG; 
	}	
	
    // the menuIndex starts from 1 not 0. 
	optionMenuGrp -e -select $falloff texSculptCacheFalloffType_OMG;

	if( $mode == "Grab" )
	{
		optionMenuGrp -e -visible true -select $direction texSculptGrabDirection_OMG;
	}
	else
	{
		optionMenuGrp -e -visible false texSculptGrabDirection_OMG;
	}

	if( $mode == "Freeze" )
	{
		rowLayout -e -visible true unPinAll_ROW;
		rowLayout -e -visible true invertPinned_ROW;
	}
	else
	{
		rowLayout -e -visible false unPinAll_ROW;
		rowLayout -e -visible false invertPinned_ROW;
	}
	
	falloffCurve -e
		-asString `texSculptCacheContext -q -sculptFalloffCurve $toolName`
		texSculptFalloffCurve;

	if(`optionVar -exists "optionvarCustomCurves"`)
	{
		string $customsArray[] = `optionVar -q "optionvarCustomCurves"`;
		for($i = 0 ; $i<size($customsArray); $i++)
		{
			string $falloffCurveName = "texCustomCurve" + $i;
			if($customsArray[$i] !=" ")
			{
				falloffCurve -e -asString $customsArray[$i] $falloffCurveName;
			}
		}
	}
	
	checkBoxGrp -edit -value1 $stg useSnapToGrid_CBG;

	int $ring = `texSculptCacheContext -q -showBrushRingDuringStroke $toolName`;
	checkBoxGrp -edit -value1 $ring texSculptBrushRing_CBG;
	
	string $brushInfo[];
	texSculptBrushInfo($mode, $brushInfo);

	toolPropertySetCommon $brushInfo[0] $brushInfo[1] $brushInfo[2];
	toolPropertySelect texSculptCacheContext;

	string $nameField = `toolPropertyWindow -query -field`;
	text -edit -label $brushInfo[0] $nameField;

	int $invVis = $brushInfo[3];
	checkBoxGrp -edit -value1 $inv -visible $invVis texSculptInvert_CBG;
	
	string $reset = `toolPropertyWindow -query -resetButton`;
	button -edit -enable true -command ("texSculptCacheContextValues_ResetTool \"" + $toolName + "\"") $reset;
}
