// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  April 3, 1997
//
//  Description:
//      The selectAllCurveKnots() procedure takes a surface list,
//		and adds all the visible knots as selection items to the pointList.
//
//  Input Arguments:
//      curveList - the curves to do this to
//      div - "draw precision"
//      pointList - append to the list
//      pointCount - start at this index into pointList
//

global proc selectActiveCurveKnots()
//
// Description:
//     Select the knot points on all the active curves.
{
	global int $gSelectNurbsCurvesBit;

	string $pointList[];
	string $curveList[];
	int $pointCount = 0;
	int $div = 0;

	$curveList = `filterExpand -ex true -sm $gSelectNurbsCurvesBit`;

	selectAllCurveKnots( $curveList, $div, $pointList, $pointCount );
	select -r $pointList;
}

global proc selectAllCurveKnots( string $curveList[], int $div,
								 string $pointList[], int $pointCount )
//
// Description:
//     Append the isoparm selection items to the point list.
{
	float $knots[];
	float $val, $quot;
	int $i, $n, $div;
	int $s, $ns, $d;
	string $curve;

	// To get the knots from the extracted isoparm:
	string $infonode = `createNode curveInfo`;
	string $infonodecurve = $infonode + ".ic";
	string $infonodeknots = ($infonode + ".kn");

	// We know these are curves.  Get the display values from them:
	string $curve = $curveList[0];
	$ns = size($curveList);
	for( $s=0; $s<$ns; $s+=1 ) {
		$curve = $curveList[$s];

		// For the division values, 0 means "do it in a single step".
		connectAttr ($curve + ".l") $infonodecurve;
		int $deg = `getAttr ($curve + ".d")`;
		$knots = `getAttr $infonodeknots`;

		$n = size($knots);
		for( $i=($deg-1); $i<($n-$deg); $i+=1 ) {
			if( $knots[$i+1] == $knots[$i] ) continue;

			$val = $knots[$i];
			$pointList[$pointCount] = ($curve + ".u[" + $val + "]");
			$pointCount += 1;

			if( $div > 0 ) {
				$quot = ($knots[$i+1] - $val) / ($div+1);
				for( $d=0; $d<$div; $d+=1 ) {
					$val += $quot;
					$pointList[$pointCount] = ($curve +
											   ".u[" + $val + "]");
					$pointCount += 1;
				}
			}
		}

		$val = $knots[$n-$deg];
		$pointList[$pointCount] = ($curve + ".u[" + $val + "]");
		$pointCount += 1;
		disconnectAttr ($curve + ".l") $infonodecurve;
	}

	// Don't need this anymore:
	delete $infonode;
}
