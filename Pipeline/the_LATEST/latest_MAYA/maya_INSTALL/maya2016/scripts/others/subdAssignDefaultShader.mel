// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Creation Date:  03 Apr 2000
//
// 	Description:
//		Look at the shader connected to the input subdiv surface.
//		If if has no shader assigned then give it the default shader.
//		If it has a shader already, do nothing.
//
//  Procedure Name:
//      subdAssignDefaultShader
//
//  Input Arguments:
//	    $subdiv: Subdiv shape to check for a shader.
//				 If $subdiv is a transform, all subdiv shapes below it
//				 will be processed.
//		
//  Return Value:
//      None.
//
global proc subdAssignDefaultShader( string $subdiv ) 
{
	// Sometimes the results of the above command can
	// be transforms above the subds...  Check all the
	// leaf-level subds for shaders.
	//
	string $subdivShapes[] = `ls -dag -lf -type subdiv $subdiv`;
	
	for( $subdiv in $subdivShapes ) {

		// Check for connections to "instObjGroups"
		// If any of the connections are a shading engine, then we're done
		//
		int    $foundShadingGroup = false ;
		string $connections[] = `listConnections ($subdiv + 
												  ".instObjGroups")`;
		if( size($connections) == 0 ) {

			// Check further for connections to "instObjGroups[].objectGroups"
			//
			int $attrSize = `getAttr -size ($subdiv + ".instObjGroups")`;
			int $i;
			for( $i = 0; $i < $attrSize ; $i ++ ) {
				$connections = `listConnections ($subdiv + 
								  ".instObjGroups[" + $i + "].objectGroups")`;

				for( $connection in $connections ) {
					if( `nodeType $connection` == "shadingEngine" ) {
						$foundShadingGroup = true;
						break;
					}
				}
				if( $foundShadingGroup ) break;
			}

		} else {
		
			for( $connection in $connections ) {
				if( `nodeType $connection` == "shadingEngine" ) {
					$foundShadingGroup = true;
					break;
				}
			}
		}
		
		if( !$foundShadingGroup ) {
			sets -edit -fe initialShadingGroup $subdiv;
		}
	}
}
