// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc referenceEditorViewportNewCamera(string $menu){
//
//  Description:
//		Build new perspective camera for reference editor viewport.  
//		
//  Input Arguments:
//		$menu - parent of all menu item names
//
//  Return Value:
//      None
//
	global string $gReferenceEditorModelEditor;

	// Note the leading colon on the camera name to allow the name to
	// be found even when in relativeNames mode.
	//
	global string $gRefEdViewportCamera[];
	$gRefEdViewportCamera = `camera -n :refEdViewportCamera`;
	modelEditor -edit -camera $gRefEdViewportCamera[0] $gReferenceEditorModelEditor;

	referenceEditorViewportBuildCamerasMenu $menu;
}

global proc referenceEditorViewportBuildCamerasMenu(string $menu){
//
//  Description:
//		Build cameras menu for reference editor viewport.  
//		
//  Input Arguments:
//		$menu - parent of all menu item names
//
//  Return Value:
//      None
//
	global string $gReferenceEditorModelEditor;
	string $cameras[] = `listCameras -perspective`;
	menu -e -deleteAllItems $menu;

	setParent -menu $menu;

    for ($camera in $cameras) {
        menuItem -label $camera 
			-command
            ("modelEditor -edit -camera " + ($camera) + " " + ($gReferenceEditorModelEditor))
			;
    }

    menuItem -divider true;

	menuItem -label (uiRes("m_referenceEditorViewportMenuBar.kNewPerspective"))
		-command ("referenceEditorViewportNewCamera " + $menu)
			;

}


global proc referenceEditorViewportMenuBar(string $menuBarLayout,
										   string $modelEditor){
//
//  Description:
//		Build menus and menuItems for reference editor viewport menubar.  
//		
//  Input Arguments:
//		$menuBarLayout - parent of all menus and items
//		$modelEditor - name of the modelEditor that the menu items work on
//
//  Return Value:
//      None
//

	int $dimWhenNoSelect = 0;
		
	//	These menu items are mostly copied from createModelPanelMenu.
	//

	string $itemName;

	// The shadows menu item will only be available
	// if the hardware support the HWshadows
	//
	global int $supportHWshadows = true;
	
	if( `about -nt` )
	{
		string $checkHWshadowsExt = `openGLExtension -ext "GL_ARB_shadow"`;
		if( $checkHWshadowsExt == "" )
			$checkHWshadowsExt = `openGLExtension -ext "GL_SGIX_shadow"`;
		if( $checkHWshadowsExt == "" )
		{
			$checkHWshadowsExt = `openGLExtension -ext "GL_ARB_texture_env_combine"`;
			if( $checkHWshadowsExt == "" )
				$checkHWshadowsExt = `openGLExtension -ext "GL_EXT_texture_env_combine"`;
			if( $checkHWshadowsExt != "" )	{
				$checkHWshadowsExt = `openGLExtension -ext "GL_ARB_multitexture"`;
				if( $checkHWshadowsExt != "" )	{
					$checkHWshadowsExt = `openGLExtension -ext "GL_EXT_bgra"`;
				}
			}
		}
		if( $checkHWshadowsExt == "" )	{ $supportHWshadows = false; }
		else							{ $supportHWshadows = true;	}
	}
	
	string $cameraString = (uiRes("m_referenceEditorViewportMenuBar.kCameras"));
	
	$itemName = `menu -tearOff false 
			-aob true 
			-label (uiRes("m_referenceEditorViewportMenuBar.kShading"))
			-postMenuCommandOnce false
			-familyImage "menuIconShading.png"`;
	menu -edit -pmc ("updateShadingMenu "+$itemName+" "+$modelEditor) $itemName;

	$itemName = `menu -tearOff true 
			-label (uiRes("m_referenceEditorViewportMenuBar.kLighting"))
			-postMenuCommandOnce false
			-familyImage "menuIconLighting.png"`;
	menu -e -pmc ("updateLightingMenu "+$itemName+" "+$modelEditor) $itemName;

	$itemName = `menu -tearOff true 
			-label (uiRes("m_referenceEditorViewportMenuBar.kShow"))
			-postMenuCommandOnce false
			-familyImage "menuIconShow.png"`;
	menu -e -pmc ("updateShowMenu "+$itemName+" "+$modelEditor+" \"\" \"\"") $itemName;

	$itemName = `menu -tearOff true 
			-label $cameraString
			-familyImage "menuIconShow.png"`;

		referenceEditorViewportBuildCamerasMenu $itemName ;

}
