// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  4 May 1998
//
//  Procedure Name:
//      performPolyMirror
//
//  Description:
//        Mirrors a polyObject
//			and optionally merges the mirror with the original.
//         
//  Input Arguments:
//        $option : Whether to set the options to default values.
//  Return Value:
//        command string iff $option==2
//

proc setOptionVars (int $forceFactorySettings)
{
	if ($forceFactorySettings || !`optionVar -exists polyMirrorDirection`) {
		optionVar -intValue polyMirrorDirection 0;
	}
	if ($forceFactorySettings || !`optionVar -exists polyMirrorStitch`) {
        optionVar -intValue polyMirrorStitch 1;
    }
}

global proc performPolyMirrorSetup (string $parent, int $forceFactorySettings)
{
	setOptionVars($forceFactorySettings);
	setParent $parent;

	int $mDir = `optionVar -q polyMirrorDirection`;
	
	switch ($mDir) {
		case 1: radioButtonGrp -e -select 1 polyMirrorDirection123; break;
		case 2: radioButtonGrp -e -select 2 polyMirrorDirection123; break;
		case 3: radioButtonGrp -e -select 3 polyMirrorDirection123; break;
		case 4: radioButtonGrp -e -select 1 polyMirrorDirection456; break;
		case 5: radioButtonGrp -e -select 2 polyMirrorDirection456;	break;
		case 6: radioButtonGrp -e -select 3 polyMirrorDirection456;	break;
		default: radioButtonGrp -e -select 1 polyMirrorDirection123; break;
	}

	int $val = off;
	if (`optionVar -q polyMirrorStitch`) {
		$val = on;

		int $ival = `optionVar -q polyMirrorStitch`;		// 1 or 2

		if($ival == 1) {
			radioButtonGrp -edit -select 1 polyMirrorStitchType1;
		} else {
			radioButtonGrp -edit -select 1 polyMirrorStitchType2;
		}

		radioButtonGrp -e -enable on polyMirrorStitchType1;
		radioButtonGrp -e -enable on polyMirrorStitchType2;
	} else {
		// We have to select one, even if disabled.
		//
		radioButtonGrp -edit -select 1 polyMirrorStitchType1;
		radioButtonGrp -e -enable off polyMirrorStitchType1;
		radioButtonGrp -e -enable off polyMirrorStitchType2;
	}

	checkBoxGrp -edit -value1 $val polyMirrorStitchOption;
}

global proc performPolyMirrorCallback (string $parent, int $doIt)
{
	setParent $parent;
	
	int $mDirBtn123 = `radioButtonGrp -q -select polyMirrorDirection123`;
	int $mDirBtn456 = `radioButtonGrp -q -select polyMirrorDirection456`;
	int $mDir;

	switch ($mDirBtn123) {
		case 1: $mDir = 1; break;
		case 2: $mDir = 2; break;
		case 3: $mDir = 3; break;
		default:
		switch ($mDirBtn456) {
			case 1: $mDir = 4; break;
			case 2: $mDir = 5; break;
			case 3: $mDir = 6; break;
			default: $mDir = 1;
		}
	}

	optionVar -intValue polyMirrorDirection $mDir;

	int $val = 0;
	if (`checkBoxGrp -query -value1 polyMirrorStitchOption`) {
		$val = `radioButtonGrp -q -select polyMirrorStitchType1`;
		
		// check if shared radio button polyMirrorStitchType2 is selected
		if($val == 0){
			$val = 2;
		}
	}

	optionVar -intValue polyMirrorStitch $val;

	if ($doIt) {
		performPolyMirror 0;
		addToRecentCommandQueue "performPolyMirror 0" "PolyMirror";
	}
}

proc polyMirrorOptions ()
{
	// Global template variables for form spacing
	global int $gOptionBoxTemplateFrameSpacing;
	
	string $layout = getOptionBox();
	setParent $layout;

	setUITemplate -pushTemplate OptionBoxTemplate;
	waitCursor -state 1;
	
	// Form layout
	string $parent = `formLayout polyMirrorOptions`;
	
	string $commandName = "performPolyMirror";
	string $callback = ($commandName + "Callback " + $parent + " ");
	string $setup = ($commandName + "Setup "  + $parent + " ");

	setOptionBoxCommandName($commandName);
	
		// Settings frame
		string $settingsFrame = 
		`frameLayout -label (uiRes("m_performPolyMirror.kSettingsFrame"))`;

			columnLayout;

				radioButtonGrp 
					-label (uiRes("m_performPolyMirror.kMirrorDirection"))
					-numberOfRadioButtons 3 
					-label1 (uiRes("m_performPolyMirror.kXPlus"))
					-label2 (uiRes("m_performPolyMirror.kYPlus"))
					-label3 (uiRes("m_performPolyMirror.kZPlus"))
					polyMirrorDirection123;

				radioButtonGrp 
					-shareCollection polyMirrorDirection123
					-numberOfRadioButtons 3
					-label1 (uiRes("m_performPolyMirror.kXMinus"))
					-label2 (uiRes("m_performPolyMirror.kYMinus"))
					-label3 (uiRes("m_performPolyMirror.kZMinus"))
					polyMirrorDirection456;

				checkBoxGrp 
					-label1 (uiRes("m_performPolyMirror.kMergeWithOriginal"))
					-on1 ("radioButtonGrp -e -enable on  polyMirrorStitchType1;radioButtonGrp -e -enable on  polyMirrorStitchType2")
					-of1 ("radioButtonGrp -e -enable off polyMirrorStitchType1;radioButtonGrp -e -enable off polyMirrorStitchType2")
					polyMirrorStitchOption;

				radioButtonGrp 
					-numberOfRadioButtons 1
					-label1 (uiRes("m_performPolyMirror.kMergeVertices"))
					polyMirrorStitchType1;

				// Bug #246990 workaround (cannot have vertical and horizontal oriented radio buttons in same
				// option box.  Avoided by immitating vertical layout using shareCollection.
				radioButtonGrp 
					-numberOfRadioButtons 1
					-shareCollection polyMirrorStitchType1
					-label1 (uiRes("m_performPolyMirror.kConnectBorderEdges"))
					polyMirrorStitchType2;

			setParent ..; // columnLayout

		setParent $parent; // frameLayout

	setParent ..; // formLayout

	// Attach Description/Settings frames to form layout
	formLayout -e
		-af $settingsFrame "top" $gOptionBoxTemplateFrameSpacing
		-af $settingsFrame "left" $gOptionBoxTemplateFrameSpacing
		-af $settingsFrame "right" $gOptionBoxTemplateFrameSpacing
		-an $settingsFrame "bottom"
	$parent;

	waitCursor -state 0;
	setUITemplate -popTemplate;
	   
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit -label (uiRes("m_performPolyMirror.kMirrorButton"))
	       -command ($callback + 1)
		$applyBtn;
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + 0 + "; hideOptionBox")
		$saveBtn;
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + 1)
		$resetBtn;
			 
	setOptionBoxTitle( (uiRes("m_performPolyMirror.kMirrorOptions")) );

	//	Customize the 'Help' menu item text.
	//
	setOptionBoxHelpTag( "MirrorGeometry" );

	eval (($setup + 0));
	showOptionBox();
}

proc string assembleCmd()
{
	int $doHistory = `constructionHistory -q -toggle`;

	string $cmd="polyMirrorFace ";
	$cmd += "-ws 1 ";

	int $oldToNew[7] = {0, 0, 2, 4, 1, 3, 5};
	int $mdir = `optionVar -q polyMirrorDirection`;
	$cmd+= " -direction " + $oldToNew[$mdir];
	$cmd+= " -mergeMode " + (`optionVar -query polyMirrorStitch`);

	return $cmd;	
}

global proc string performPolyMirror (int $option)
{
    string $cmd="";
    string $lbl;

	switch ($option) {
	case 0:
			string $cmd=`assembleCmd `;
            //string $res=`evalEcho $cmd`;
            polyPerformAction $cmd "f" 0;

			// make sure node is selected when there is history
			if ( 0 != size(`ls -sl`) || (0 != size(`ls -hl`)) ) {
				string $tmp[] = `listHistory`;
				string $totalSel[];
				for ($opNode in $tmp) {
					if (`nodeType $opNode` == "polyMirror") {
						$totalSel[size($totalSel)] = $opNode;
					}
				}
			
 				if (size($totalSel) > 0) 
 					select -add $totalSel[0];
			}

			setToolTo ShowManips;
			break;
    case 1: polyMirrorOptions; break;
    case 2: 
			$cmd=`assembleCmd`;
			$cmd = ("polyPerformAction \"" + $cmd + "\" \"f\" 0");
			break;
    default:
        $cmd = ("performPolyMirror 0");
    }
    return $cmd;
}

