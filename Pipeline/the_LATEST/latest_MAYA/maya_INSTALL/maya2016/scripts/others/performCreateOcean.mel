// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Feb 2002
//
//  Description:
//
//  Option box for the createOcean command 
//

//
//  Procedure Name:
//      setOptionVars
//
//  Description:
//		Initialize the option values.
//
//  Input Arguments:
//		Whether to set the options to default values.
//
//  Return Value:
//      None.
//
proc setOptionVars(int $forceFactorySettings)
{
	if ($forceFactorySettings||!`optionVar -exists createOceanAttachToCamera`) {
		optionVar -intValue createOceanAttachToCamera 0;
	}
	if ($forceFactorySettings || !`optionVar -exists createOceanPreviewPlane`) {
		optionVar -intValue createOceanPreviewPlane 1;
	}
	if ($forceFactorySettings || !`optionVar -exists createOceanPreviewPlaneSize`) {
		optionVar -floatValue createOceanPreviewPlaneSize 10.0;
	}
}

//
//  Procedure Name:
//      createOceanSetup
//
//  Description:
//		Update the state of the option box UI to reflect the option values.
//
//  Input Arguments:
//      parent               - Top level parent layout of the option box UI.
//                             Required so that UI object names can be 
//                             successfully resolved.
//
//	forceFactorySettings - Whether the option values should be set to
//                             default values.
//
//  Return Value:
//      None.
//
global proc createOceanSetup(string $parent, int $forceFactorySettings)
{
	//	Retrieve the option settings
	//
	setOptionVars($forceFactorySettings);

	setParent $parent;

	//	Query the optionVar's and set the values into the controls.

	checkBoxGrp -edit 
		-value1 `optionVar -query createOceanAttachToCamera`
		createOceanAttachToCamera;

	checkBoxGrp -edit 
		-value1 `optionVar -query createOceanPreviewPlane`
		createOceanPreviewPlane;

	floatSliderGrp -edit 
		-v `optionVar -query createOceanPreviewPlaneSize`
		createOceanPreviewPlaneSize;

}

//
//  Procedure Name:
//      createOceanCallback
//
//  Description:
//		Update the option values with the current state of the option box UI.
//
//  Input Arguments:
//      parent - Top level parent layout of the option box UI.  Required so
//               that UI object names can be successfully resolved.
//
//	doIt   - Whether the command should execute.
//
//  Return Value:
//      None.
//
global proc createOceanCallback(string $parent, int $doIt)
{
    setParent $parent;

	//	Set the optionVar's from the control values, and then
	//	perform the command.

	optionVar -intValue createOceanAttachToCamera
		`checkBoxGrp -query -value1 createOceanAttachToCamera`;

	optionVar -intValue createOceanPreviewPlane
		`checkBoxGrp -query -value1 createOceanPreviewPlane`;

	optionVar -floatValue createOceanPreviewPlaneSize
		`floatSliderGrp -query -v createOceanPreviewPlaneSize`;

	if ($doIt) {
		performCreateOcean 0;
	}
}

//
//  Procedure Name:
//      createOceanOptions
//
//  Description:
//		Construct the option box UI.  Involves accessing the standard option
//		box and customizing the UI accordingly.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
proc createOceanOptions()
{
	//	Name of the command for this option box.
	//
	string $commandName = "createOcean";

	//	Build the option box actions.
	//
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	string $layout = getOptionBox();
	setParent $layout;
	
	setOptionBoxCommandName($commandName);
	
	setUITemplate -pushTemplate DefaultTemplate;

	waitCursor -state 1;

	tabLayout -tabsVisible 0 -scrollable 1;
	
	string $parent = `columnLayout -adjustableColumn 1`;
	
	checkBoxGrp -ncb 1 -label1 (uiRes("m_performCreateOcean.kAttachToCamera"))
					createOceanAttachToCamera;

	checkBoxGrp -ncb 1 -label1 (uiRes("m_performCreateOcean.kCreatePreviewPlane"))
					createOceanPreviewPlane;

    floatSliderGrp
		-label (uiRes("m_performCreateOcean.kPreviewPlaneSize"))
		-field 1
		-min 0.0 
		-max 200.0 
		-fieldMinValue 0.0 
		-fieldMaxValue 1000000.0
		-pre 2
		createOceanPreviewPlaneSize;

	waitCursor -state 0;
	
	setUITemplate -popTemplate;

	//	'Create' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-label (uiRes("m_performCreateOcean.kCreateOcean"))
		-command ($callback + " " + $parent + " " + 1)
		$applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;

	setOptionBoxTitle (uiRes("m_performCreateOcean.kCreateOceanOptionTitle"));

	//	Customize the 'Help' menu item text.
	//
	setOptionBoxHelpTag( "CreateOcean" );

	eval (($setup + " " + $parent + " " + 0));	
	
	showOptionBox();
}

//
//  Procedure Name:
//      createOceanHelp
//
//  Description:
//		Return a short description about this command.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      string.
//
proc string createOceanHelp()
{
	return 
	"  Command: createOcean - Create a planar surface with an assigned ocean shader and optionally a heightfield preview node.\n" +
	"Selection: None";
}

//
//  Procedure Name:
//      assembleCmd
//
//  Description:
//		Construct the command that will apply the option box values.
//
//  Input Arguments:
//      None.
//
proc string assembleCmd()
{
	string $cmd = "createOcean";

	setOptionVars(false);

	$cmd = ($cmd
		+ " " + `optionVar -query createOceanAttachToCamera` 
		+ " " + `optionVar -query createOceanPreviewPlane` 
		+ " " + `optionVar -query createOceanPreviewPlaneSize` 
		);

	return $cmd;
}

//
//  Procedure Name:
//      performCreateOcean
//
//  Description:
//		Perform the createOcean command using the corresponding 
//		option values.
//
//  Input Arguments:
//      0 - Execute the command.
//      1 - Show the option box dialog.
//      2 - Return the command.
//
global proc string performCreateOcean(int $action)
{
	string $cmd = "";

	switch ($action) {

		//	Execute the command.
		//
		case 0:
			$cmd = `assembleCmd`;
			eval($cmd);
			break;

		//	Show the option box.
		//
		case 1:
			createOceanOptions;
			break;

		//	Return the command string.
		//
		case 2:
			//	Get the command.
			//
			$cmd = `assembleCmd`;
			break;
	}
	return $cmd;
}

