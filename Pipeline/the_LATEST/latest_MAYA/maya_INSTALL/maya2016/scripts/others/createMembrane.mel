// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

proc string setupMembrane( string $mesh )
{
	string $membrane = `createNode membrane`;
	string $meshIn = ($mesh + ".inMesh");
	string $inPlug = `connectionInfo -sfd $meshIn`;
	if( $inPlug == "" ){
		string $dup[] = `duplicate -rr -name polySurface1 $mesh`;
		$dup = `ls -dag -shapes $dup[0]`;
		string $inMesh = $dup[0];
		setAttr ($inMesh + ".intermediateObject") true;
		connectAttr ($inMesh + ".outMesh") ($membrane + ".inputMesh");
	} else {
		connectAttr $inPlug ($membrane + ".inputMesh");
	}
	connectAttr ($mesh + ".worldMatrix[0]") ($membrane + ".inputMatrix");
	connectAttr -f ($membrane + ".outputMesh") $meshIn;
	setAttr ($mesh + ".quadSplit") 0;
	return $membrane;
}

global proc string [] createMembrane()
{
	string $meshes[] = `ls -sl -dag -type mesh`;
	string $createdMembranes[];
	int $numMeshes = size( $meshes );
	if( $numMeshes < 1 ){
		warning( (uiRes("m_createMembrane.kNoMeshSelected")));
		return $createdMembranes;
	}

	int $i;
	for( $i = 0; $i < $numMeshes; $i++ ){
		$createdMembranes[$i] = setupMembrane( $meshes[$i] );
	}
	select -r $createdMembranes;
	return $createdMembranes;
}
