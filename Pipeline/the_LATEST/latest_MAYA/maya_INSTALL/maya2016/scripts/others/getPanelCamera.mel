// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//      getPanelCamera
//
//  Description:
//      Get the camera shapes in the model panel.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      An empty string list is returned if there is no camera.
//

proc string[]  getStereoCameraShapes( string $cameraRig )
{
	int $numberOfCameras = 0;
	string $cameras[];
	python("from maya.app.stereo import stereoCameraRig");
	string $centerCam = python("stereoCameraRig.centerCam('"+$cameraRig+"')");
	if (size($centerCam))
		$cameras[$numberOfCameras++] = $centerCam;
	string $leftCam = python("stereoCameraRig.leftCam('"+$cameraRig+"')");
	if (size($leftCam))
	{	
		// It's possible that the left or right are the same as the
		// center. Remove duplicates.
		if (!stringArrayContains( $leftCam, $cameras))
			$cameras[$numberOfCameras++] = $leftCam;
	}
	string $rightCam = python("stereoCameraRig.rightCam('"+$cameraRig+"')");
	if (size($rightCam))
	{
		// It's possible that the left or right are the same as the
		// center. Remove duplicates.
		if (!stringArrayContains( $rightCam, $cameras))
			$cameras[$numberOfCameras++] = $rightCam;
	}
	return $cameras; 
}

proc string[] getCameraShapeName( string $camera )
{
	string $cameras[];	
	// A shape was found so use that.
	if (`objectType -isa camera $camera`) { 
		$cameras[0] = $camera; 
	} else { 
		// Check the shape under a transform for a camera
		// Get current camera's shape 	
		string $cameraShapes[] = `listRelatives -shapes $camera`;

		if (size($cameraShapes) > 0) {
			$cameras[0] = $cameraShapes[0];
		}
	}	
	return $cameras;
}

global proc string[] getPanelCamera( string $modelPanel )
{
	int $numberOfCameras = 0;

    if (`modelPanel -exists $modelPanel`) {
        string $camera = `modelPanel -q -camera $modelPanel`;
		return getCameraShapeName( $camera );
    }
    else {
		string $customEditor = `getCustomViewEditorFromPanel $modelPanel`;
		if ("" != $customEditor)
		{
			string $cameraRig = `modelEditor -q -camera $customEditor`;
			python("from maya.app.stereo import stereoCameraRig");
			string $rigRoot = python( "stereoCameraRig.rigRoot('"+$cameraRig+"')"); 
			if ($rigRoot != "") { 
				return getStereoCameraShapes( $rigRoot ); 
			} else
			if ( size($cameraRig) ) { 
				return getCameraShapeName( $cameraRig );
			}
		}
	}
	string $warnMsg = (uiRes("m_getPanelCamera.kNoValidCamera"));
	warning (`format -s $modelPanel $warnMsg`);
    return {}; 
}
