// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//	removeDynamicConstraint.mel
//
//	Description:
//		Interface for removing a dynamicConstraint.
//
//		Arguments:
//			None.
//

global proc removeDynamicConstraint( string $scope )
//
//	Description:
//
//		Given a selected list of meshes, remove them (their nObject) from any nucleus solver
//	system to which they are associated.
//
//	Input:
//		$scope	all: remove all nCloths
//				selected: remove only selected nCloths
//
{
	if( !nClothEditLicenseFound() ) {        
		error( (uiRes("m_removeDynamicConstraint.kNClothLicenseNotFound")) );
		return;
	}
	string $constraints[];
	if( $scope == "all" ){
		$constraints = `ls -type "dynamicConstraint"`;
		if( size($constraints) == 0 ){
			warning( (uiRes("m_removeDynamicConstraint.kNoDynamicConstraints")) );
			return;
		}
	} else {	// $scope == "selected" is assumed
		string $selected[] = `ls -sl`;

		// Get the selected dynamic constraints
		//
		$constraints = `listRelatives -ni -s -type "dynamicConstraint" $selected`;
		if( size($constraints) == 0 ){
			warning( (uiRes("m_removeDynamicConstraint.kNoDynamicConstraintSelected")));
			return;
		}
	}

	string $constraint;
	$constraints = stringArrayRemoveDuplicates( $constraints );

	for( $constraint in $constraints ) {
		string $parents[] = `listRelatives -pa -p $constraint`;
		delete $constraint;
		if( size($parents) > 0 ){
			string $parent = $parents[0];
			string $children[] = `listRelatives $parent`;
			if( size($children) == 0 ){
				delete $parent;
			}
		}
	}
	return;
}
