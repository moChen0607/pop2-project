// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//      renderLayerPresetMenu
//
//  Description:
//		Build a menu for managing user presets with the "nodePreset" command,
//      or applying built-in presets.
//
//  Input Arguments:
//      $presetMenu - the name of the menu control
//      $node       - the name of the render layer to create the menu for
//
//  Return Value:
//      None
//

global proc renderLayerPresetMenu( string $presetMenu, string $node )
{
    setParent -menu $presetMenu;

    popupMenu -e -deleteAllItems $presetMenu;

	// Menu items for built-in presets
	//

	menuItem -label (uiRes("m_renderLayerPresetMenu.kLuminanceDepth")) 
		-command ("renderLayerBuiltinPreset linearDepth "+$node);

	menuItem -label (uiRes("m_renderLayerPresetMenu.kGeometryMatte")) 
		-command ("renderLayerBuiltinPreset matte "+$node); 

	menuItem -label (uiRes("m_renderLayerPresetMenu.kDiffuse")) 
		-command ("renderLayerBuiltinPreset diffuse "+$node);

	menuItem -label (uiRes("m_renderLayerPresetMenu.kSpecular")) 
		-command ("renderLayerBuiltinPreset specular "+$node);

	menuItem -label (uiRes("m_renderLayerPresetMenu.kShadow")) 
		-command ("renderLayerBuiltinPreset shadow "+$node);

	menuItem -divider true;

	// Giving the chance to third parties to add their custom presets
	//
	callbacks -executeCallbacks -hook "renderLayerPresetMenu" $node;

	menuItem -divider true;

	string $presets[] = `nodePreset -list $node`;

	// Menu items for managing user presets
	//

    menuItem -label (uiRes("m_renderLayerPresetMenu.kSavePreset")) -command
        ("saveNodePresetCB " + $node);

	if (size($presets) > 0) {
		// There are user presets, create a menu and sub-items
		// to delete them.

		menuItem -label (uiRes("m_renderLayerPresetMenu.kDeletePreset")) -subMenu true;

		for ($item in $presets) {
			menuItem -label $item -command
				("nodePresetConfirmDeleteDialog { "+
				 "\""+$node+"\""+
				 ", \""+$item+"\""+
				 " }");
		}

		setParent -menu ..;
	}

	menuItem -divider true;

	// Menu items for applying the user presets
	//

	for ($item in $presets) {
		menuItem -label $item
			-command ("nodePreset -load "+$node+" "+$item);
	}
}

global proc saveNodePresetCB(string $node)
{
    string $script = "renderLayerSaveCustomPreset(\"#nodeName\",\"#presetName\")";
    string $arg = "-custom \"" + encodeString($script) + 
                  "\" -attributes \"renderPassInfo attributeOverrideScript\"";
    string $nodes[] = {$node};
    string $args[] = {$arg};
    saveNodePresetDialog($nodes, $args);
}