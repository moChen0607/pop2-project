// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


//
// Procedure name:
//		getShape
// 
// Description:
//		Returns the name of the first selected object of type $type
//
// Input Arguments:
//		$type - the type of node the be returned
//
//	Return Value:
//		The name of the first selected object of type $type.
//
proc string
getShape()
{
	string $theShape = "";
	string $theShapes[] = `ls -selection -long -dagObjects -shapes`;
	
	if (size($theShapes) > 0)
	{
		$theShape = $theShapes[0];
	}
	
	return $theShape;
}

//
// Procedure name:
//		closestPointOn
// 
// Description:
//		Creates either a closestPointOnMesh, nearestPointOnCurve, or
//			closestPointOnSurface, depending on the selection. Optionally 
//			creates locators and hooks them up to the node we're interested in.
//
// Input Arguments:
//		$doSpaceLocator - if true, create and hook up a locator for the closest point's
//			input position
//		$doObjLocator - if true, create and hook up a locator for the closest point's
//			output position.
//
//	Return Value:
//		The name of the first selected object of type $type.
//	
global proc closestPointOn(int $doSpaceLocator, int $doObjLocator)
{
	string $theShape = "";
	string $shapeAttr = "";
	string $inputAttr = "";
	string $nodeType = "";
	string $type = "";
	
	$theShape = getShape();
	
	if ($theShape != "")
	{
		$type = `nodeType $theShape`;
	}
		
	if ($type=="mesh")
	{
		$shapeAttr = "worldMesh";
		$inputAttr = "inMesh";
		$nodeType = "closestPointOnMesh";
	}
	else if ($type=="nurbsCurve" 
		  || $type=="bezierCurve")
	{
		$shapeAttr = "worldSpace";
		$inputAttr = "inputCurve";
		$nodeType = "nearestPointOnCurve";
	}
	else if ($type=="nurbsSurface")
	{
		$shapeAttr = "worldSpace";
		$inputAttr = "inputSurface";
		$nodeType = "closestPointOnSurface";
	}
	
	if ($nodeType == "")
	{
		warning (uiRes("m_closestPointOn.kNoSelectionWarning"));
		return;
	}

	string $closestPointNode = `createNode ($nodeType)`;
	connectAttr($theShape+"."+$shapeAttr) 
			   ($closestPointNode+"."+$inputAttr);
	
	if ($type=="mesh")
	{
		connectAttr($theShape+".worldMatrix") 
			   ($closestPointNode+".inputMatrix");
	}

	if ($doSpaceLocator)
	{
		string $locator[] = `spaceLocator -name cpConstraintIn`;
		connectAttr($locator[0]+".translate") 
					($closestPointNode+".inPosition");
	}
	
	if ($doObjLocator)
	{
		string $locator[] = `spaceLocator -name cpConstraintPos`;
		connectAttr($closestPointNode+".position")
					($locator[0]+".translate");
	}
}
