// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//


global proc rigidBodyInterpenetrate( int $flag )
//
// Enable the cache for all the selected dynamic objects.
{
	int    $i;
	int    $okToInterpenetrate = 1;
	int    $rigidBodyCount;
	string $rigidSolver;
	string $rigidBodyList[];
	string $selObj[] = `ls -sl`;


	for ($i = 0; $i < size( $selObj ); $i++)
    {
        string  $leaves[] = `ls -selection -dag -leaf -showType $selObj[$i]`;

        // Turn on all the caches for the selected objects.
        //
        for ($j = 0; $j < size( $leaves ); $j += 2)
        {
            if ($leaves[$j+1] == "rigidBody")
            {
                $rigidBodyList[ $rigidBodyCount ] = $selObj[$i];
                $rigidBodyCount++;
            }
        }
    }

	$rigidBodyCount = size($rigidBodyList);

	// First make sure all the selected rigid bodies are in the same
	// solver.
	//
	if ( $rigidBodyCount > 1 )
	{
		$rigidSolver = `rigidBody -q -solver $rigidBodyList[0]`;

		for ( $i = 0; $i < $rigidBodyCount; $i++ )
		{
			string $solverName = `rigidBody -q -solver $rigidBodyList[$i]`;

			if ( $solverName != $rigidSolver )
			{
				$okToInterpenetrate = 0;
	    		warning ( (uiRes("m_rigidBodyInterpenetrate.kAllRigidBodiesSameSolver")));
			    break;
			}
		}
	}
	else
	{
		$okToInterpenetrate = 0;
	    warning ( (uiRes("m_rigidBodyInterpenetrate.kAtLeastTwoRigidBodies")));
	}

	if (  $okToInterpenetrate == 1 )
	{
		string $rigidBodies;

		string $rigidSolver = `rigidBody -q -solver $rigidBodyList[0]`;

		for ( $i = 0; $i < $rigidBodyCount; $i++ )
		{
		    $rigidBodies += $rigidBodyList[$i];
			$rigidBodies += " ";
		}

		string $cmd  = "rigidSolver -e ";
		if ( $flag == 0 )
		{
			$cmd = $cmd + "-collide ";
		}
		else
		{
			$cmd = $cmd + "-interpenetrate ";
		}

		$cmd = $cmd + $rigidBodies + " " + $rigidSolver;
		evalEcho $cmd;
	}
}
