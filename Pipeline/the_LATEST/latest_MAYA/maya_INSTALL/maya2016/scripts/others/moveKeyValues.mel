// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  March 17, 1997
//
//  Description:
//      This script sets the values for the specified moveKey context
//	within the tool property sheet.
//
//  Input Arguments:
//		string $context			The name of the actual context being edited
//
//  Return Value:
//      None.
//
global proc moveKeyValues (string $context)
{
	string $parent = `toolPropertyWindow -query -location`;
	setParent $parent;

	string $currentOption = `moveKeyCtx -query -option $context`;
	int $option = 1;
	if ($currentOption == "over") $option = 2;

	radioButtonGrp -edit
		-onCommand1 ("moveKeyCtx -edit -option move " + $context)
		-onCommand2 ("moveKeyCtx -edit -option over " + $context)
		-select $option
		moveKeyOption;

	string $currentFunction = `moveKeyCtx -query -moveFunction $context`;
	$option = 1;
	if ($currentFunction == "linear" ) $option = 2;
	if ($currentFunction == "power" ) $option = 3;

	// Set our optionMenuGrp changeCommand and select the current moveFunction
	// from the list.
	//	
	string $optMenuCmd = "moveKeyCtxMoveFunction( \"moveKeyFunction\", \"" + $context + "\")";
	optionMenuGrp -e
				  -cc $optMenuCmd
				  -sl $option
				  moveKeyFunction;

	string $helpTag = "MoveKeyTool";
	toolPropertySetCommon $context "move_M.png" $helpTag;
	toolPropertySelect "moveKey";
}

global proc moveKeyCtxMoveFunction( string $optMenuGrp, string $context )
{
	int $option = 0;
	$option = `optionMenuGrp -q -sl $optMenuGrp`;
	string $strOption = "constant";

	switch( $option )
	{
	case 1:
		$strOption = "constant";
		break;
	case 2:
		$strOption = "linear";
		break;
	case 3:
		$strOption = "power";
		break;
	};

	string $cmd = "moveKeyCtx -e -moveFunction " + $strOption + " " + $context;
	if( catch(eval($cmd)) )
	{
		string $output = (uiRes("m_moveKeyValues.kError"));
		$output = `format -s $strOption $output`;
		print $output;
	}
}
