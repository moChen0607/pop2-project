// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
// Procedure(s) : 
//		removeObjectShaderInstances
//		removeSingleObjectShaderInstances
//		shaderUsedByObjects
//
// For a list of objects, find it's shaders,
// and remove shader instance usage.
//
// Last Updated : Sept 18, 2000
//
global proc string[]
shadersUsedByObjects(string $objList[])
{
	string $shaders[];
	int $numObj = size($objList);
	if ($numObj == 0)
		return $shaders;
	
	$shaders = `listSets -type 1 -ets -o $objList[0]`;
	//print ("Initial list:"); print $shaders; print ("\n");
	for ($i=1; $i<$numObj; $i++) {
		$sh = `listSets -type 1 -ets -o $objList[$i]`;
		//print ("Add to list:"); print $sh; print ("\n");
		int $nShaders_j = size($sh);
		int $nShaders_k = size($shaders);
		
		// Scan new list
		for ($j=0; $j<$nShaders_j; $j++) {
			
			string $scanShader = $sh[$j];
			
			// Against old list
			int $found = 0;
			for ($k=0; $k<$nShaders_k; $k++) {
				if ($shaders[$k] == $scanShader) {
					//print ("Shader " + $scanShader + " already exists\n");
					$found = 1;
					break;
				}
			}
			if ($found == 0) {
				//print ("Add shader " + $scanShader + "at entry " + $nShaders_k + "\n");
				$shaders[$nShaders_k] = $scanShader;
			}
		}
	}
	//print ("Final result:\n");
	//print $shaders; print ("\n");
	return $shaders;
}

global proc 
removeObjectShaderInstances(string $objList[])
{
	if (size($objList) == 0)
		return;
	string $shaderList[] = `shadersUsedByObjects $objList`;
	for ($i=0; $i<size($shaderList); $i++) {
		removeShaderInstances $shaderList[$i];
	}
}

global proc removeSingleObjectShaderInstances(string $object)
{
	string $objList[1];
	$objList[0] = $object;
	removeObjectShaderInstances( $objList );
}
