// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


global proc particleToPoly()
{
	string $sel[] =	`ls -sl -dag -type nParticle`;
	if( size( $sel ) < 1 ){
		warning( (uiRes("m_particleToPoly.kNoNParticleSelected")) );
		return;
	}
	string $np;
	string $meshes[];
	int $numMeshes = 0;
	for ( $np in $sel ){
		// if the user deliberately picks just one intermediate object
		// they probably did it on purpose, otherwise keep looking for a non-intermediate one
		if( (size( $sel ) > 1) && getAttr ($np + ".io"))
			continue;
		string $mNode = `createMeshNode`;
		connectAttr ($np + ".outMesh") ($mNode + ".inMesh");
		setAttr -type "string" ($mNode+".motionVectorColorSet") "velocityPV";
		setAttr ($np + ".intermediateObject") true;
		string $par[] = `listRelatives -parent $mNode`;
		if( size($par) > 0 ){
			select -r $par[0];
			$mNode = $par[0];
			sets -e -forceElement initialShadingGroup;
		}
		$meshes[$numMeshes] = $mNode;
		$numMeshes++;
	}
	if( $numMeshes > 0 ){
		select -r $meshes;
	}
}
