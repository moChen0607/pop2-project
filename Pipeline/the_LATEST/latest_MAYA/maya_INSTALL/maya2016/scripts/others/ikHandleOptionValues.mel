// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//	Creation Date:	Jan. 6, 1997
//
//	Description:	initializes ik handle portion of jointContext tool
//					property sheet values
//
//	Input Arguments:
//		toolName  - this is the name of the instance of the tool
//					that the property sheet is modifying.
//
//	Return Value:
//		None.
//


global proc ikHandleOptionValues( string $toolName, string $ctxCmd )
{
	string	$current;
	int		$set;
	int		$autoPriorityFlag;

	//	current solver (option menu)
	string	$solvertype = eval($ctxCmd + " -q -solverTypeH " + $toolName);
	string	$solverItems[] = `optionMenuGrp -q -ils ikHandleOptionMenu`;
	string	$menuItemValue;
	int		$i;
	for( $i = 0; $i < size($solverItems); $i++ )
	{
		$menuItemValue = ikSolverUnlocalize(`menuItem -q -l $solverItems[$i]`);
		if ($menuItemValue == $solvertype)
			optionMenuGrp -e -sl ($i+1) ikHandleOptionMenu;
	}
	clear($solverItems);

	//	auto priority check box
	//
	$set = eval($ctxCmd + " -q -autoPriorityH " + $toolName);
	if ($set) {
		checkBoxGrp -e -value1 1 autoPriorityGrp;
		$autoPriorityFlag = false;
	}
	else {
		checkBoxGrp -e -value1 0 autoPriorityGrp;
		$autoPriorityFlag = true;
	}

	//	snap handle
	$set = eval($ctxCmd + " -q -snapHandleH " + $toolName);
	if ($set) {
		checkBoxGrp -e -value1 1 snapHandleGrp;
	}
	else {
		checkBoxGrp -e -value1 0 snapHandleGrp;
	}

	//	force solver
	$set = eval($ctxCmd + " -q -forceSolverH " + $toolName);
	if ($set) {
		checkBoxGrp -e -value1 1 forceSolverGrp;
	}
	else {
		checkBoxGrp -e -value1 0 forceSolverGrp;
	}

	//=====================================================
	// For maya1.0, there is not superSticky yet. So in UI,
	// use checkBox to turn on/off sticky.
	//
	// Use radioButtonGrp when implementing superSticky.
	//=====================================================
	//	stickies
	$current = eval($ctxCmd + " -q -stickyH " + $toolName);
	if ($current == "sticky") {
		//radioButtonGrp -e -select 2 stickyGrp;
		checkBoxGrp -e -value1 1 stickyGrp;
	}
	//else if ($current == "superSticky") {
	//	radioButtonGrp -e -select 3 stickyGrp;
	//}
	else {
		//radioButtonGrp -e -select 1 stickyGrp;
		checkBoxGrp -e -value1 0 stickyGrp;
	}

	//	priority
	$set = eval($ctxCmd + " -q -priorityH " + $toolName);
	intSliderGrp -e
		-value $set
		-enable $autoPriorityFlag
		priority;

	//	weight
	$fv = eval($ctxCmd + " -q -weightH " + $toolName);
	floatSliderGrp -e
		-value $fv
		handleWeight;

	//	poweight
	$fv = eval($ctxCmd + " -q -poWeightH " + $toolName);
	floatSliderGrp -e
		-value $fv
		handlePOWeight;

	return;
}

