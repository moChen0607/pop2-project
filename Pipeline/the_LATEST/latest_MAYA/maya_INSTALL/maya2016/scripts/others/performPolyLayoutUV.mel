// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  4 April 1997
//
//  Procedure Name:
//      performPolyAutoProj
//
//  Description:
//        
//         
//  Input Arguments:
//        $option : Whether to set the options to default values.
//  Return Value:
//        command string iff $option==2
//

//
// Initialize optionVars for polyLayoutUV:
// Color, Texture, Vertex
// 
proc setOptionVars (
	string		$prefix, 
	int			$forceFactorySettings,
	string		$vars[]
)
{
	string $varName;

	// Must match $vars
	int    $intValues[]= { 1, 1, 2, 1, 1 };

	for ( $i = size($vars) ; $i-- ; )
	{
		$varName = ($prefix + $vars[$i]);
		if ($forceFactorySettings || !`optionVar -exists $varName`)
			optionVar -intValue $varName $intValues[$i];
	}

	$varName = ($prefix + "eg");
	if ($forceFactorySettings || !`optionVar -exists $varName`)
		optionVar -floatValue $varName .2;

	$varName = "polyLayoutUVMultiOrNonMulti";
	if ($forceFactorySettings || !`optionVar -exists $varName`)
		optionVar -intValue $varName 1;

	// This is separated from the for loop above since the corresponding
	// UI has been changed to optionMenuGrp.
	//
	$varName = ($prefix + "l");
	if ($forceFactorySettings || !`optionVar -exists $varName`)
		optionVar -intValue $varName 2;

	$varName = ($prefix + "GridU");
	if ($forceFactorySettings || !`optionVar -exists $varName`)
		optionVar -intValue $varName 1;

	$varName = ($prefix + "GridV");
	if ($forceFactorySettings || !`optionVar -exists $varName`)
		optionVar -intValue $varName 1;

	// prescaling - default node
	$varName = ($prefix + "Prescale");

	if ($forceFactorySettings || !`optionVar -exists $varName`)
		optionVar -intValue $varName 0;

	$varName = ($prefix + "RegionPresets");
	if ($forceFactorySettings || !`optionVar -exists $varName`)
		optionVar -intValue $varName 0;

	$varName = ($prefix + "ScaleU");
	if ($forceFactorySettings || !`optionVar -exists $varName`)
		optionVar -floatValue $varName 1.0;

	$varName = ($prefix + "ScaleV");
	if ($forceFactorySettings || !`optionVar -exists $varName`)
		optionVar -floatValue $varName 1.0;

	$varName = ($prefix + "OffsetU");
	if ($forceFactorySettings || !`optionVar -exists $varName`)
		optionVar -floatValue $varName 0.0;

	$varName = ($prefix + "OffsetV");
	if ($forceFactorySettings || !`optionVar -exists $varName`)
		optionVar -floatValue $varName 0.0;

}

// Also used in performSubdLayoutUV
global float  $gShellSpacingPresets[] = {.05, .1, .2, .4, .8, 1.6, 3.2};

global proc performPolyLayoutUVSetup (string $parent, int $forceFactorySettings)
{
    global float  $gShellSpacingPresets[];
	string $prefix = "polyLayoutUV";
	string $intVars[] = {"fr", "rbf", "se", "sc", "lm"};
	string $varName;
	int    $i;

	setOptionVars($prefix, $forceFactorySettings, $intVars);
	setParent $parent;
	
	for ($i=size($intVars)-1; $i>0; $i--)
	{
		$varName = ($prefix + $intVars[$i]);
		radioButtonGrp -e -sl (1+`optionVar -q $varName`) $varName;
	}
	
	$varName = ($prefix + $intVars[0]);
	checkBoxGrp -e -value1 `optionVar -q $varName` $varName;

	$varName = "polyLayoutUVMultiOrNonMulti";
	string $separateMenu = ($prefix + $intVars[2]);
	int $currentMultiSelection = `optionVar -q $varName`;
	int $switchedMultiSelection = 0;
	if ($currentMultiSelection == 0) {
		$switchedMultiSelection = 1;
	}

	radioButtonGrp -e -sl (1+$currentMultiSelection) $varName;
	radioButtonGrp -e -en ($switchedMultiSelection) $separateMenu;

	$varName = ($prefix + "eg");
	float $fval = `optionVar -q $varName`;
	floatSliderGrp -e -v $fval $varName;

	// See if the value corresponds to one of the shell spacing presets.
	$varName = ($prefix + "egPresets");
	optionMenuGrp -e -sl 1 $varName;
	for ($i = size($gShellSpacingPresets) ; $i-- ; )
	{
		if ($fval == $gShellSpacingPresets[$i])
		{
			optionMenuGrp -e -sl ($i+2) $varName;
			break;
		}
	}

	$varName = ($prefix + "l");
	optionMenuGrp -e -sl (`optionVar -q $varName`+ 1) $varName;	
	int $layout = `optionMenuGrp -q -sl $varName`;

	$varName = ($prefix + "Grid");
	columnLayout -e -vis ($layout == 4) $varName;

	$varName = ($prefix + "GridU");
	int $val = `optionVar -q $varName`;
	intField -e -v $val $varName;

	$varName = ($prefix + "GridV");
	int $val = `optionVar -q $varName`;
	intField -e -v $val $varName;

	$varName = ($prefix + "sc");
	if (($layout==4 || $layout==5) && `radioButtonGrp -q -sl $varName` == 3)
		radioButtonGrp -e -sl 2 $varName;
	radioButtonGrp -e -en3 ($layout!=4 && $layout!=5) $varName;

	// prescaling - default node
	$varName = ($prefix + "Prescale");
	radioButtonGrp -e -en ($currentMultiSelection) 
		-sl (1+`optionVar -q $varName`) $varName;

	int $enablePlacement = ($currentMultiSelection) && $layout!=4 && $layout!=5;

	$varName = ($prefix + "RegionPresets");
	optionMenuGrp -e -en $enablePlacement
		-sl (`optionVar -q $varName`+ 1) $varName;

	int $item = `optionMenuGrp -q -sl ($prefix + "RegionPresets")` - 1;
	if ($enablePlacement && $item < 9) {
		// fixed the placement
		polyLayoutPlacement($prefix);
	}
	else {
		// free placement
		$varName = ($prefix + "ScaleU");
		float $fval = `optionVar -q $varName`;
		floatSliderGrp -e -en $enablePlacement -v $fval $varName;

		$varName = ($prefix + "ScaleV");
		float $fval = `optionVar -q $varName`;
		floatSliderGrp -e -en $enablePlacement -v $fval $varName;

		$varName = ($prefix + "OffsetU");
		float $fval = `optionVar -q $varName`;
		floatSliderGrp -e -en $enablePlacement -v $fval $varName;

		$varName = ($prefix + "OffsetV");
		float $fval = `optionVar -q $varName`;
		floatSliderGrp -e -en $enablePlacement -v $fval $varName;
	}

}

global proc performPolyLayoutUVCallback (string $parent, int $doIt)
{
	string $prefix = "polyLayoutUV";
	string $intVars[] = {"fr", "rbf", "se", "sc", "lm"};
	string $varName;

	setParent $parent;

	for ($i=size($intVars)-1; $i>0; $i--)
	{
		$varName = ($prefix + $intVars[$i]);
		optionVar -intValue $varName (`radioButtonGrp -q -sl $varName`-1);
	}

	$varName = ($prefix + $intVars[0]);
	optionVar -intValue $varName `checkBoxGrp -q -value1 $varName`;
	$varName = ($prefix + "eg");
	optionVar -floatValue $varName `floatSliderGrp -q -v $varName`;

	$varName = "polyLayoutUVMultiOrNonMulti";
	optionVar -intValue $varName (`radioButtonGrp -q -sl $varName`-1);

	$varName = ($prefix + "l");
	optionVar -intValue $varName (`optionMenuGrp -q -sl $varName` - 1);

	$varName = ($prefix + "GridU");
	optionVar -intValue $varName `intField -q -v $varName`;
	$varName = ($prefix + "GridV");
	optionVar -intValue $varName `intField -q -v $varName`;

	// prescaling - default node
	$varName = ($prefix + "Prescale");
	optionVar -intValue $varName (`radioButtonGrp -q -sl $varName` - 1);

	$varName = ($prefix + "RegionPresets");
	optionVar -intValue $varName (`optionMenuGrp -q -sl $varName` - 1);

	$varName = ($prefix + "ScaleU");
	optionVar -floatValue $varName `floatSliderGrp -q -v $varName`;

	$varName = ($prefix + "ScaleV");
	optionVar -floatValue $varName `floatSliderGrp -q -v $varName`;

	$varName = ($prefix + "OffsetU");
	optionVar -floatValue $varName `floatSliderGrp -q -v $varName`;

	$varName = ($prefix + "OffsetV");
	optionVar -floatValue $varName `floatSliderGrp -q -v $varName`;

	if ($doIt) 
	{
		$varName = "polyLayoutUVMultiOrNonMulti";
		int $multi = `optionVar -q $varName`;

		if ($multi == 1) {
			performPolyMultiLayoutUV 0;
			addToRecentCommandQueue "performPolyMultiLayoutUV 0" "PolyMultiLayoutUV";
		} else {
			performPolyLayoutUV 0;
			addToRecentCommandQueue "performPolyLayoutUV 0" "PolyLayoutUV";
		}
	}
}

global proc polyLayoutSpacingPresets()
{
	int $item = `optionMenuGrp -q -sl "polyLayoutUVegPresets"`-2;
    global float  $gShellSpacingPresets[];

	if ($item>=0 && $item<size($gShellSpacingPresets) )
		floatSliderGrp -e -v $gShellSpacingPresets[$item] "polyLayoutUVeg";
}


global proc polyLayoutPlacement(string $prefix)
{
	int $item = `optionMenuGrp -q -sl ($prefix + "RegionPresets")` - 1;

	float $scu[]  = {1.0, 1.0, 1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5};
	float $scv[]  = {1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, 0.5, 0.5};
	float $offu[] = {0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5};
	float $offv[] = {0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5};

	if ($item >= 0 && $item < 9) {

		floatSliderGrp -e -en 0 -v $scu[$item]  ($prefix + "ScaleU");	
		floatSliderGrp -e -en 0 -v $scv[$item]  ($prefix + "ScaleV");	
		floatSliderGrp -e -en 0 -v $offu[$item] ($prefix + "OffsetU");
		floatSliderGrp -e -en 0 -v $offv[$item] ($prefix + "OffsetV");
	}
	else {
		// enable the sliders
		floatSliderGrp -e -en 1 ($prefix + "ScaleU");	
		floatSliderGrp -e -en 1 ($prefix + "ScaleV");	
		floatSliderGrp -e -en 1 ($prefix + "OffsetU");
		floatSliderGrp -e -en 1 ($prefix + "OffsetV");
	}
}

global proc polyLayoutEnablePlacement(int $val, string $prefix)
{
	int $layout = `optionMenuGrp -q -sl ($prefix + "l")`;
	int $enablePlacement = ($val) && $layout!=4 && $layout!=5;

	radioButtonGrp -e -en $val ($prefix + "Prescale");
	optionMenuGrp  -e -en $enablePlacement ($prefix + "RegionPresets");

	int $item = `optionMenuGrp -q -sl ($prefix + "RegionPresets")` - 1;
	if ($item >= 0 && $item < 9) {
		floatSliderGrp -e -en 0 ($prefix + "ScaleU");
		floatSliderGrp -e -en 0 ($prefix + "ScaleV");
		floatSliderGrp -e -en 0 ($prefix + "OffsetU");
		floatSliderGrp -e -en 0 ($prefix + "OffsetV");
	}
	else {
		floatSliderGrp -e -en $enablePlacement ($prefix + "ScaleU");
		floatSliderGrp -e -en $enablePlacement ($prefix + "ScaleV");
		floatSliderGrp -e -en $enablePlacement ($prefix + "OffsetU");
		floatSliderGrp -e -en $enablePlacement ($prefix + "OffsetV");
	}
}

global proc polyLayoutGrayPresets()
{
	string $prefix = "polyLayoutUV";

	$varName = ($prefix + "l");
	int $layout = `optionMenuGrp -q -sl $varName`;

	$varName = ($prefix + "eg");
	floatSliderGrp -e -en ($layout==3 || $layout==4 || $layout==5) $varName;

	$varName = ($prefix + "egPresets");
	optionMenuGrp -e -en ($layout==3 || $layout==4 || $layout==5) $varName;

	$varName = ($prefix + "Grid");
	columnLayout -e -vis ($layout==4) $varName;

	$varName = ($prefix + "sc");
	if (($layout==4 || $layout==5) && `radioButtonGrp -q -sl $varName` == 3)
		radioButtonGrp -e -sl 2 $varName;
	radioButtonGrp -e -en3 ($layout!=4 && $layout!=5) $varName;

	$varName = "polyLayoutUVMultiOrNonMulti";
	int $enablePlacement = (`radioButtonGrp -q -sl $varName`==2) && $layout!=4 && $layout!=5;

	optionMenuGrp -e -en $enablePlacement ($prefix + "RegionPresets");
	int $item = `optionMenuGrp -q -sl ($prefix + "RegionPresets")` - 1;
	if ($enablePlacement && $item < 9) {
		// fixed the placement
		polyLayoutPlacement($prefix);
	}
	else {
		floatSliderGrp -e -en $enablePlacement ($prefix + "ScaleU");
		floatSliderGrp -e -en $enablePlacement ($prefix + "ScaleV");
		floatSliderGrp -e -en $enablePlacement ($prefix + "OffsetU");
		floatSliderGrp -e -en $enablePlacement ($prefix + "OffsetV");
	}
}

proc polyLayoutUVOptions (string $prefix, string $intVars[])
{
	// Global template variables for form spacing
	global int $gOptionBoxTemplateFrameSpacing;
	global int $gOptionBoxTemplateInnerFrameMarginHeight; 
	global int $gOptionBoxTemplateInnerFrameMarginWidth;
	global int $gOptionBoxTemplateOffsetText;
	global int $gOptionBoxTemplateTextColumnWidth;
	global int $gOptionBoxTemplateSingleWidgetWidth;
	
	string $commandName = "performPolyLayoutUV";
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");
	string $varName;

	string $layout = getOptionBox();
	setParent $layout;
	setUITemplate -pushTemplate OptionBoxTemplate;
	waitCursor -state 1;
	
	string $separateMenu = ($prefix + $intVars[2]);
	scrollLayout;

	// Form layout
	string $parent = `formLayout polyLayoutUVOptions`;

		// Overlapping frame
		string $overlappingFrame = 
		`frameLayout -label (uiRes("m_performPolyLayoutUV.kOverlappingFrame"))`; 
	
			columnLayout;

				$varName = "polyLayoutUVMultiOrNonMulti";
				string $disableSeparateCmd = 
					"{ int $tmp = `radioButtonGrp -q -sl "+$varName+"`;" +
					"  polyLayoutEnablePlacement ($tmp==2) "+$prefix+";" + 				
					"  radioButtonGrp -e -en ($tmp==1) "+$separateMenu+";}";

				radioButtonGrp 
					-label (uiRes("m_performPolyLayoutUV.kLayoutMultipleObjects")) 
					-nrb 2 
					-cc $disableSeparateCmd
					-label1 (uiRes("m_performPolyLayoutUV.kOverlapping"))
					-label2 (uiRes("m_performPolyLayoutUV.kNonOverlapping")) 
					-vr 
					$varName;

				separator -style "none";

				radioButtonGrp 
					-label (uiRes("m_performPolyLayoutUV.kPrescaling"))
					-nrb 3
					-label1 (uiRes("m_performPolyLayoutUV.kPrescaleNonde"))
					-label2 (uiRes("m_performPolyLayoutUV.kPresacleObject"))
					-label3 (uiRes("m_performPolyLayoutUV.kPrescaleWorld"))
					-vr 
					($prefix + "Prescale");

				separator -style "none";

				$varName = $separateMenu;
				radioButtonGrp 
					-label (uiRes("m_performPolyLayoutUV.kSeparateShells"))
					-nrb 3
					-label1 (uiRes("m_performPolyLayoutUV.kSeparateShellsOff"))
					-label2 (uiRes("m_performPolyLayoutUV.kSeparateShellsFolds"))
					-label3 (uiRes("m_performPolyLayoutUV.kSeparateShellsAllIntersectiong")) 
					-vr 
					$varName;

				separator -style "none";

				$varName = ($prefix + $intVars[0]);
				checkBoxGrp -label1 (uiRes("m_performPolyLayoutUV.kFlipReversed")) $varName;
			
			setParent ..; // columnLayout

		setParent $parent; // frameLayout
		
		// Layout settings frame
		string $layoutSettingsFrame = 
		`frameLayout -label (uiRes("m_performPolyLayoutUV.kLayoutSettingsFrame"))`;

			columnLayout;

				$varName = ($prefix + "l");
				$gapName = ($prefix + "eg");
				$menuName = ($prefix + "egPresets");

				optionMenuGrp -label (uiRes("m_performPolyLayoutUV.kShellLayout")) -cc polyLayoutGrayPresets $varName;
				menuItem -label (uiRes("m_performPolyLayoutUV.kShellLayoutNone"));
				menuItem -label (uiRes("m_performPolyLayoutUV.kShellLayoutAlongU"));
				menuItem -label (uiRes("m_performPolyLayoutUV.kShellLayoutIntoSquare"));
				menuItem -label (uiRes("m_performPolyLayoutUV.kShellLayoutGrid"));
				menuItem -label (uiRes("m_performPolyLayoutUV.kShellLayoutNearest"));

				setParent -m ..;

				$varName = ($prefix + "Grid");
				columnLayout $varName;
					setUITemplate -popTemplate;

					rowLayout -nc 4
						-columnAlign4	"right" "center" "center" "center"
						-columnAttach4	"both" "both" "both" "both"
						-columnOffset4	$gOptionBoxTemplateOffsetText 0 0 0
						-columnWidth4	$gOptionBoxTemplateTextColumnWidth
										$gOptionBoxTemplateSingleWidgetWidth
										10
										$gOptionBoxTemplateSingleWidgetWidth;
					text -l "";
					text -label (uiRes("m_performPolyLayoutUV.kShellLayoutGridU"));
					text -l "";
					text -label (uiRes("m_performPolyLayoutUV.kShellLayoutGridV"));
					setParent ..;

					rowLayout -nc 4
						-columnAlign4	"right" "center" "center" "center"
						-columnAttach4	"both" "both" "both" "both"
						-columnOffset4	$gOptionBoxTemplateOffsetText 0 0 0
						-columnWidth4	$gOptionBoxTemplateTextColumnWidth
										$gOptionBoxTemplateSingleWidgetWidth
										10
										$gOptionBoxTemplateSingleWidgetWidth;
					text -label (uiRes("m_performPolyLayoutUV.kShellLayoutGridUV"));
					intField -min 1 -max 100 -v 1 ($prefix + "GridU");
					text -label (uiRes("m_performPolyLayoutUV.kShellLayoutGridX"));
					intField -min 1 -max 100 -v 1 ($prefix + "GridV");
					setParent ..;

					setUITemplate -pushTemplate OptionBoxTemplate;
				setParent ..;

				separator -style "none";

				$varName = ($prefix + $intVars[3]);
				radioButtonGrp 
					-label (uiRes("m_performPolyLayoutUV.kScaleMode")) 
					-nrb 3
					-label1 (uiRes("m_performPolyLayoutUV.kScaleModeNone"))
					-label2 (uiRes("m_performPolyLayoutUV.kScaleModeUniform"))
					-label3 (uiRes("m_performPolyLayoutUV.kScaleModeStretchToSquare")) 
					-vr 
					$varName;

				separator -style "none";

				$varName = ($prefix + $intVars[4]);
				radioButtonGrp 
					-label (uiRes("m_performPolyLayoutUV.kShellStacking")) 
					-nrb 2
					-label1 (uiRes("m_performPolyLayoutUV.kShellStackingBoundingBox"))
					-label2 (uiRes("m_performPolyLayoutUV.kShellStackingShape")) 
					-vr 
					$varName;

				separator -style "none";

				$varName = ($prefix + $intVars[1]);
				radioButtonGrp 
					-label (uiRes("m_performPolyLayoutUV.kRotate"))
					-nrb 3
					-label1 (uiRes("m_performPolyLayoutUV.kRotateNone"))
					-label2 (uiRes("m_performPolyLayoutUV.kRotate90"))
					-label3 (uiRes("m_performPolyLayoutUV.kRotateFree")) 
					-vr 
					$varName;

				// Shell spacing frame
				string $shellSpacingFrame = `frameLayout -label (uiRes("m_performPolyLayoutUV.kShellSpacingFrame"))`;

					columnLayout;

						optionMenuGrp 
							-label (uiRes("m_performPolyLayoutUV.kSpacingPresets")) 
							-cc polyLayoutSpacingPresets 
							$menuName;

                            // If you change this update gShellSpacingPresets and
                            // duplicate that in performSubdLayoutUV.mel
							menuItem -label (uiRes("m_performPolyLayoutUV.kSpacingPresetsCustom"));
							menuItem -label (uiRes("m_performPolyLayoutUV.kSpacingPresets2048Map"));
							menuItem -label (uiRes("m_performPolyLayoutUV.kSpacingPresets1024Map"));
							menuItem -label (uiRes("m_performPolyLayoutUV.kSpacingPresets512Map"));
							menuItem -label (uiRes("m_performPolyLayoutUV.kSpacingPresets256Map"));
							menuItem -label (uiRes("m_performPolyLayoutUV.kSpacingPresets128Map"));
							menuItem -label (uiRes("m_performPolyLayoutUV.kSpacingPresets64Map"));
							menuItem -label (uiRes("m_performPolyLayoutUV.kSpacingPresets32Map"));

						setParent -m ..;

						string $cmd = ("optionMenuGrp -e -sl 1 " + $menuName);
						floatSliderGrp 
							-label (uiRes("m_performPolyLayoutUV.kPercentageSpace")) 
							-min 0.0 
							-max 5.0 
							-cc $cmd 
							$gapName;

					setParent ..; // columnLayout
				
				setParent ..;  // frame

				// Shell spacing frame
				string $regionFrame = `frameLayout -label (uiRes("m_performPolyLayoutUV.kShellPlacement"))`;

					columnLayout;
						// User defined region
						$menuName = ($prefix + "RegionPresets");
						optionMenuGrp 
							-label (uiRes("m_performPolyLayoutUV.kRegionPreset")) 
							-cc  ("polyLayoutPlacement " + $prefix)
							$menuName;

							menuItem -label (uiRes("m_performPolyLayoutUV.kPresetFullSquare"));
							menuItem -label (uiRes("m_performPolyLayoutUV.kPresetBottomHalf"));
							menuItem -label (uiRes("m_performPolyLayoutUV.kPresetTopHalf"));
							menuItem -label (uiRes("m_performPolyLayoutUV.kPresetLeftHalf"));
							menuItem -label (uiRes("m_performPolyLayoutUV.kPresetRightHalf"));
							menuItem -label (uiRes("m_performPolyLayoutUV.kPresetBottomLeft"));
							menuItem -label (uiRes("m_performPolyLayoutUV.kPresetBottomRight"));
							menuItem -label (uiRes("m_performPolyLayoutUV.kPresetTopLeft"));
							menuItem -label (uiRes("m_performPolyLayoutUV.kPresetTopRight"));
							menuItem -label (uiRes("m_performPolyLayoutUV.kPresetNone"));

						setParent -m ..;

						floatSliderGrp 
							-label (uiRes("m_performPolyLayoutUV.kRegionScaleU")) 
							-min 0.01
							-max 5.0 
							-cc  ("polyLayoutPlacement " + $prefix)
							($prefix + "ScaleU");

						floatSliderGrp 
							-label  (uiRes("m_performPolyLayoutUV.kRegionScaleV")) 
							-min 0.01 
							-max 5.0 
							-cc  ("polyLayoutPlacement " + $prefix)
							($prefix + "ScaleV");
						
						floatSliderGrp 
							-label (uiRes("m_performPolyLayoutUV.kRegionOffsetU")) 
							-min -5.0 
							-fieldMinValue -100.0 
							-max 5.0 
							-fieldMaxValue 100.0 
							-cc  ("polyLayoutPlacement " + $prefix)
							($prefix + "OffsetU");
						
						floatSliderGrp 
							-label (uiRes("m_performPolyLayoutUV.kRegionOffsetV")) 
							-min -5.0 
							-fieldMinValue -100.0 
							-max 5.0 
							-fieldMaxValue 100.0 
							-cc  ("polyLayoutPlacement " + $prefix)
							($prefix + "OffsetV");

					setParent ..; // columnLayout

				setParent ..;  // frame

			setParent ..; // columnLayout

		setParent $parent; // frameLayout

	setParent ..;	// formLayout
	setParent ..;	// scrollLayout

	// Attach frames to form layout
	formLayout -e
		-af $overlappingFrame "top" $gOptionBoxTemplateFrameSpacing
		-af $overlappingFrame "left" $gOptionBoxTemplateFrameSpacing
		-af $overlappingFrame "right" $gOptionBoxTemplateFrameSpacing
		-an $overlappingFrame "bottom"

		-ac $layoutSettingsFrame "top" $gOptionBoxTemplateFrameSpacing $overlappingFrame
		-af $layoutSettingsFrame "left" $gOptionBoxTemplateFrameSpacing
		-af $layoutSettingsFrame "right" $gOptionBoxTemplateFrameSpacing
		-an $layoutSettingsFrame "bottom" 

	$parent;
	
	waitCursor -state 0;
	setUITemplate -popTemplate;

	string $applyBtn = getOptionBoxApplyBtn();
	button -edit -label (uiRes("m_performPolyLayoutUV.kLayoutUVs"))
	       -command ($callback + " " + $parent + " " + 1) $applyBtn;
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1) $resetBtn;

	setOptionBoxTitle (uiRes("m_performPolyLayoutUV.kLayoutUVsOptions"));

	setOptionBoxHelpTag( "LayoutUVs" );

	eval (($setup + " " + $parent + " " + 0));

	showOptionBox();
}

global proc string performPolyLayoutUV (int $option)
{
	string $prefix = "polyLayoutUV";
	string $intVars[] = {"fr", "rbf", "se", "sc", "lm"};
	string $cmd="";
	switch ($option) 
	{
		case 0: {
			setOptionVars($prefix, false, $intVars);
		
			string $varName;
			$varName = "polyLayoutUVMultiOrNonMulti";
			int $multi = `optionVar -q $varName`;

			if ($multi == 1) {
				performPolyMultiLayoutUV 0;
			} else {
				$cmd = $prefix;
				for ( $i = size($intVars)-1 ; $i >= 0; $i--)
				{
					$varName = ($prefix + $intVars[$i]);
					int $ival = `optionVar -query $varName`;
					$cmd = $cmd + " -" + $intVars[$i] + " " + $ival;
				}
			
				$varName = ($prefix + "eg");
				float $fval = `optionVar -query $varName`;
				$cmd = $cmd + " -ps " + $fval;
			
				$varName = ($prefix + "l");
				float $fval = `optionVar -query $varName`;
				$cmd = $cmd + " -l " + $fval;
			
				$varName = ($prefix + "GridU");
				int $val = `optionVar -query $varName`;
				$cmd = $cmd + " -gu " + $val;

				$varName = ($prefix + "GridV");
				int $val = `optionVar -query $varName`;
				$cmd = $cmd + " -gv " + $val;

				polyPerformAction $cmd "f" 0;
			}
		}
		break;

		case 1:
			polyLayoutUVOptions($prefix, $intVars);
			break;
		case 2:
			$cmd="performPolyLayoutUV 0";
			break;
	}
	return $cmd;
}

global proc string performPolyMultiLayoutUV (int $option)
{
	string $prefix = "polyLayoutUV";
	string $intVars[] = {"fr", "rbf", "se", "sc", "lm"};
	string $cmd="";

	switch ($option)
	{
		case 0:
			string $varName;
			setOptionVars($prefix, false, $intVars);
			$cmd = "polyMultiLayoutUV";
			for ( $i = size($intVars)-1 ; $i >= 0 ; $i--)
			{
				// Skip "se" as it does not exist for layoutMultiUVs.
				//
				if ($intVars[$i] == "se") { continue; }

				string $varName = ($prefix + $intVars[$i]);
				int $ival = `optionVar -query $varName`;
				$cmd = $cmd + " -" + $intVars[$i] + " " + $ival;
			}

			$varName = ($prefix + "eg");
			float $fval = `optionVar -query $varName`;
			$cmd = $cmd + " -ps " + $fval;

			$varName = ($prefix + "l");
			float $fval = `optionVar -query $varName`;
			$cmd = $cmd + " -l " + $fval;
			
				$varName = ($prefix + "GridU");
				int $val = `optionVar -query $varName`;
				$cmd = $cmd + " -gu " + $val;

				$varName = ($prefix + "GridV");
				int $val = `optionVar -query $varName`;
				$cmd = $cmd + " -gv " + $val;

			$varName = ($prefix + "Prescale");
			int $val = `optionVar -query $varName`;
			print ($varName+$val);
			$cmd = $cmd + " -psc " + $val;

				$varName = ($prefix + "ScaleU");
				float $fval = `optionVar -query $varName`;
				$cmd = $cmd + " -su " + $fval;

				$varName = ($prefix + "ScaleV");
				float $fval = `optionVar -query $varName`;
				$cmd = $cmd + " -sv " + $fval;			

				$varName = ($prefix + "OffsetU");
				float $fval = `optionVar -query $varName`;
				$cmd = $cmd + " -ou " + $fval;	

				$varName = ($prefix + "OffsetV");
				float $fval = `optionVar -query $varName`;
				$cmd = $cmd + " -ov " + $fval;	

			evalEcho($cmd);
			break;
		case 1:
			polyLayoutUVOptions($prefix, $intVars);
			break;
		case 2:
			$cmd="performPolyMultiLayoutUV 0";
			break;
	}
	return $cmd;
}
