// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Nov 24, 19987
//
//  Description:
//      This script is use to display and update the move shell tool options.
//
//  Input Arguments:
//		None.
//
//  Return Value:
//      None.
//


//
//  Procedure Name:
//      assembleCmd
//
//  Description:
//		Construct the command that will apply the option box values.
//
//  Input Arguments:
//      None.
//
proc string assembleCmd()
{
	string $cmd;
	
	string $texWinName[] = `getPanel -sty polyTexturePlacementPanel`;
		
	float $front[] = `colorSliderGrp -query -rgb uvShadeFrontColor`;
	float $alpha1 = `floatSliderGrp -query -value uvShadeFrontAlpha`;

	float $back[] = `colorSliderGrp -query -rgb uvShadeBackColor`;
	float $alpha2 = `floatSliderGrp -query -value uvShadeBackAlpha`;

	$cmd = "textureWindow -edit";
	$cmd += " -frontFacingColor";
	$cmd += " " + $front[0];
	$cmd += " " + $front[1];
	$cmd += " " + $front[2];
	$cmd += " " + $alpha1;
	$cmd += " -backFacingColor";
	$cmd += " " + $back[0];
	$cmd += " " + $back[1];
	$cmd += " " + $back[2];
	$cmd += " " + $alpha2;				
	$cmd += " " +$texWinName[0];

	return $cmd;
}

global proc mapShadeOptionsCallback(string $parent, int $doIt)
{
	if ($doIt) {
		//	Execute the command with the option settings.
		$cmd = `assembleCmd`;
		eval($cmd);	
	}

	mapShadeOptionsRefresh $parent;
}


global proc	mapShadeOptionsRefresh(string $parent)
{
	setParent $parent;
	string $texWinName[] = `getPanel -sty polyTexturePlacementPanel`;

	float $front[] =  `textureWindow -q -frontFacingColor $texWinName[0]`;
	float $back[] =  `textureWindow -q -backFacingColor $texWinName[0]`;
	
	if (size($front) == 4) {	
		colorSliderGrp -e -rgb  $front[0] $front[1] $front[2]
			uvShadeFrontColor;

		floatSliderGrp -e
			-value $front[3] 
			uvShadeFrontAlpha; 
	}

	if (size($back) == 4) {
		colorSliderGrp -e -rgb  $back[0] $back[1] $back[2]
			uvShadeBackColor;

		floatSliderGrp -e
			-value $back[3] 
			uvShadeBackAlpha;  
	}
	
}

global proc mapShadeOptionsSetup(string $parent, int $doIt)
{
 	setParent $parent;

	if ($doIt == false) {
		
		setUITemplate -pushTemplate OptionsTemplate;
 		columnLayout textureMoveUV;
 			frameLayout 
 				-collapsable true
 				-collapse false
 				-label (uiRes("m_performOverlayUVOptions.kShellMoveSettings"))
 				texShadeSettingFrame;

 				columnLayout textureSmudgeDeformOptions;
 					separator -style "none"; 
 					
 				colorSliderGrp
 					-label (uiRes("m_performOverlayUVOptions.kUVShadeFrontColor"))
					uvShadeFrontColor;
									
				floatSliderGrp
					-label (uiRes("m_performOverlayUVOptions.kUVShadeFrontAlpha"))
					uvShadeFrontAlpha; 

 				colorSliderGrp
 					-label (uiRes("m_performOverlayUVOptions.kUVShadeBackColor"))
					uvShadeBackColor;
					
				floatSliderGrp
					-label (uiRes("m_performOverlayUVOptions.kUVShadeBackAlpha"))
					uvShadeBackAlpha; 
					
				setParent ..;
			setParent ..;
		setParent ..;

		setUITemplate -popTemplate;
	}

	// Update the settings
	mapShadeOptionsCallback ($parent, false);
}


//  Procedure Name:
//      tvSudgeToolOptions
//
//  Description:
//		Construct the option box UI.  Involves accessing the standard option
//		box and customizing the UI accordingly.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
proc uvShadeOptions()
{
	//	Name of the command for this option box.
	//
	string $commandName = "mapShadeOptions";

	//	Build the option box actions.
	//
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

 	//	STEP 1:  Get the option box.
	//	============================
	//
	//	The value returned is the name of the layout to be used as
	//	the parent for the option box UI.
	//
	string $layout = getOptionBox();
	setParent $layout;
	
	//	STEP 2:  Pass the command name to the option box.
	//	=================================================
	//
	//	Any default option box behaviour based on the command name is set 
	//	up with this call.  For example, updating the 'Help' menu item with
	//	the name of the command.
	//
	setOptionBoxCommandName($commandName);
	
	//	STEP 3:  Activate the default UI template.
	//	==========================================
	//
	//	Activate the default UI template so that the layout of this 
	//	option box is consistent with the layout of the rest of the 
	//	application.
	//
	setUITemplate -pushTemplate DefaultTemplate;

	//	STEP 4: Create option box contents.
	//	===================================
	//	
	//	This, of course, will vary from option box to option box.	
	//	Turn on the wait cursor.
	//
	waitCursor -state 1;

	tabLayout -tabsVisible 0 -scrollable 1;
	
	string $parent = `columnLayout -adjustableColumn 1`;

	//	Turn off the wait cursor.
	//
	waitCursor -state 0;
	
	//	Step 5: Deactivate the default UI template.
	//	===========================================
	//
	setUITemplate -popTemplate;

	//	Step 6: Customize the buttons.  
	//	==============================
	//
	//	Provide more descriptive labels for the buttons.  This is not 
	//	necessary, but in some cases, for example, a button labelled 
	//	'Create' may be more meaningful to the user than one labelled
	//	'Apply'.
	//
	//	Disable those buttons that are not applicable to the option box.
	//
	//	Attach actions to those buttons that are applicable to the option
	//	box.  Note that the 'Close' button has a default action attached 
	//	to it that will hide the window.  If a a custom action is
	//	attached to the 'Close' button then be sure to call the 'hide the
	//	option box' procedure within the custom action so that the option
	//	box is hidden properly.

	//	'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-command ($callback + " " + $parent + " " + 1)
		$applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 1 + "; hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;

	//	Step 7: Set the option box title.
	//	=================================
	//
	setOptionBoxTitle (uiRes("m_performOverlayUVOptions.kColorShadeOptions"));

	//	Step 8: Customize the 'Help' menu item text.
	//	============================================
	//
	setOptionBoxHelpTag("texMoveUVShellTool");

	//	Step 9: Set the current values of the option box.
	//	=================================================
	//
	eval (($setup + " " + $parent + " " + 0));	
	
	//	Step 10: Show the option box.
	//	=============================
	//
	showOptionBox();
}


//
//  Procedure Name:
//      performOverlayUVOptions
//
//  Description:
//
//  Input Arguments:
//      0 - Execute the command.
//      1 - Show the option box dialog.
//      2 - Return the command.
// 
global proc string performOverlayUVOptions(int $action)
{
	string $cmd = "";
			
	string $texWinName[] = `getPanel -sty polyTexturePlacementPanel`;
	eval( "textureWindow -e -displaySolidMap 1 " + $texWinName[0] ) ;
		
	switch ($action) {

		//	Execute the command.
		//
		case 0:
			//	Get the command.
			//
			$cmd = `assembleCmd`;

			//	Execute the command with the option settings.
			//
			eval($cmd);
			break;

		//	Show the option box.
		//
		case 1:
			uvShadeOptions;
			break;

		//	Return the command string.
		//
		case 2:
			//	Get the command.
			//
			$cmd = `assembleCmd`;
			break;
	}

	return $cmd;
}

