// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  June 2000
//
//  Description:
//      Option tool property window for Artisan tools
//
//
//  Procedure Name:
//      artSelectValues
//
//  Description:
//      Initialize the option values.
//
//  Input Arguments:
//
//  Return Value:
//      None.
//

global string $artSkinCurrentInfluence = "";

global proc artAttrCommonValues( 
	string 	$artCommand,
	string	$currTool
)
//
//	Common values across all Attribute Paint tools.
//
{
	// Operation frameLayout.
	$cmd = ($artCommand + " -q -selectedattroper " + `currentCtx`);
	string $operation =  `eval $cmd`;
	if ( $operation == "absolute" ) {
		radioButtonGrp -e -sl 1 artAttrOperRadioButton0;
	} else if ( $operation == "additive" ) {
		radioButtonGrp -e -sl 2 artAttrOperRadioButton0;
	} else if ( $operation == "scale" ) {
		radioButtonGrp -e -sl 1 artAttrOperRadioButton1;
	} else if ( $operation == "smooth" ) {
		radioButtonGrp -e -sl 2 artAttrOperRadioButton1;
	}

	// Paint Value options.
	$cmd = ($artCommand + " -q -value " + `currentCtx` );
	floatSliderGrp -e -v `eval $cmd` artAttrValueSlider;

    if(`floatFieldGrp -q -exists artAttrMinMaxValue`)
	{
	    $cmd = ($artCommand + " -q -minvalue " + `currentCtx` );
	    floatFieldGrp -e -value1 `eval $cmd` artAttrMinMaxValue;

	    $cmd = ($artCommand + " -q -maxvalue " + `currentCtx` );
	    floatFieldGrp -e -value2 `eval $cmd` artAttrMinMaxValue;
	}

	//if the operation is smooth disable value options

	int $enableControls = ($operation != "smooth");


	if( $artCommand == "artAttrSkinPaintCtx" )
	{
		string	$currContext = `currentCtx`;	
		int $paintMode = `eval( $artCommand + " -q -skinPaintMode "+$currContext )`;
		//paintMode: 1 == skin paint weights, 0 == marquee select, 2 == paint select
		if( !($paintMode==1) )
		{
			$enableControls = true;
		}
	}
	artAttrUpdateValueControls ( $enableControls );

	artAttrUpdatePaintValueSlider( $artCommand );

	// Clamp Options.
	$cmd = ($artCommand + " -q -clamp " + `currentCtx` );
	string $clampOpt = `eval $cmd`;
	if(`checkBoxGrp -exists artAttrClampChkBox`)
	{
	    if ( $clampOpt == "none" ) {
		    checkBoxGrp -e -v1 false artAttrClampChkBox;
		    checkBoxGrp -e -v2 false artAttrClampChkBox;
	    } else if ( $clampOpt == "both" ) {
		    checkBoxGrp -e -v1 true artAttrClampChkBox;
		    checkBoxGrp -e -v2 true artAttrClampChkBox;
	    } else if ( $clampOpt == "lower" ) {
		    checkBoxGrp -e -v1 true artAttrClampChkBox;
		    checkBoxGrp -e -v2 false artAttrClampChkBox;
	    } else if ( $clampOpt == "upper" ) {
		    checkBoxGrp -e -v1 false artAttrClampChkBox;
		    checkBoxGrp -e -v2 true artAttrClampChkBox;
	    }
	}
	artAttrUpdateClampField( $artCommand );
	
	if(`floatFieldGrp -exists artAttrClampField`)
	{
	    $cmd = ($artCommand + " -q -clamplower " + `currentCtx` );
	    floatFieldGrp -e -value1 `eval $cmd` artAttrClampField;

	    $cmd = ($artCommand + " -q -clampupper " + `currentCtx` );
	    floatFieldGrp -e -value2 `eval $cmd` artAttrClampField;
	}
}

global proc artAttrPaintValues( 
	string 	$artCommand,
	string	$currTool
)
//
//	Attribute Paint tool values.
//
{
	source "artisanUtilities.mel" ;

	// Filter label - may be set by artAttrToolScript()
	string $artAttrFilterLabel = artAttrFilterLabel();
	global string $gArtAttrCurrentAttr;

	// Fill in the popMenu.
	artAttrPaintMenu( "artAttrListPopupMenu" );

	// Common Attribute Paint UI.
	artAttrCommonValues( $artCommand, $currTool );

	// Set the paintable node to the first one found.
	//artAttrInitPaintableAttr();
	artAttrSetPaintableNode();

	// Update the button UI.  Not good enough to just check
	// if the button exists -- once created, it *always* does...
	// Have to check to see if the selected tab in the tool 
	// settings is actually the tab we think...
	//
	string $toolLocation = `toolPropertyWindow -q -location`;
	if(( `tabLayout -q -selectTab $toolLocation` == "artAttr" )
	&& ( `button -q -ex artAttrListButton` ))
	{
		string $attrLabel = (uiRes("m_artAttrValues.kNoAttributeSelected"));
		if ( $gArtAttrCurrentAttr == "" ) {
			warning (uiRes("m_artAttrValues.kSelectObjectHavingPaintableAttrs"));
		}
		else {
			string $buffer[];
			tokenize( $gArtAttrCurrentAttr, ".", $buffer );

			$attrLabel = getNodeNameFromAbsolutePath( $buffer[1] ) + "." + $buffer[2];
		}	
		button -e -label $attrLabel artAttrListButton;
	}

	// Display the proper label on the filter.
	if (`button -q -ex artAttrFilterButton`) {
		button -e -label $artAttrFilterLabel artAttrFilterButton;
	}
	
	// Set the vector index UI.
	if( `optionMenuGrp -q -ex artAttrVectorIdxOptionMenu` ) {
		string $cmd = ($artCommand + " -q -dti " + `currentCtx` );
		optionMenuGrp -e -select `eval $cmd` artAttrVectorIdxOptionMenu;
	}
}


// =======================================================
// Main callback procedure for Paint Selecion tool.
// =======================================================
global proc artAttrValues(
	string 	$toolName
)
{
	source "artisanCallback.mel";
    source "artisanValues.mel";

	string 	$artCommand	 = "artAttrCtx";
	string	$currContext = `currentCtx`;
	string	$currTool	 = `contextInfo -c $currContext`;

	// Provide a different icon for different attribute tools.
	string $icon	  = "artAttr.png";
	string $helpTag	  = "AttributePaintTool";
	string $whichTool = `artAttrCtx -q -whichTool $currContext`;

	string $parent = (`toolPropertyWindow -q -location` + "|artAttr");
	if (`layout -exists $parent`) {
		setParent $parent;

		toolPropertySetCommon $toolName $icon $helpTag;

		// Brush frameLayout values.
		artisanBrushValues( $artCommand, $currTool );

		// Paint Attribute frameLayout values.
		artAttrPaintValues( $artCommand, $currTool );

		// Stroke frameLayout values.
		artisanStrokeValues( $artCommand, $currTool );

		// Stylus Pressure frameLayout values.
		artisanPressureValues( $artCommand, $currTool );

		// Attribute Maps frameLayout values.
		artisanAttrMapValues( $artCommand, $currTool );

		// Display frameLayout values.
		artisanDisplayValues( $artCommand, $currTool );

		toolPropertySelect artAttr;
	}
}
