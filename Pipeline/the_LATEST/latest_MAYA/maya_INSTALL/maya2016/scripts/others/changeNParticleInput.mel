// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc changeNParticleInput( string $nParticle, string $attr, int $newVal)
{
	if( !objExists($nParticle) ){
		return;
	}
	string $ramp, $pp;
	int $isVector = false;

	if( $attr == "radiusScaleInput" ){
		$ramp = "internalRadiusRamp";
		$pp = "radiusPP";
	} else if( $attr == "massScaleInput" ) {
		$ramp = "internalMassRamp";
		$pp = "mass";
	} else if( $attr == "frictionScaleInput" ) {
		$ramp = "internalFrictionRamp";
		$pp = "frictionScalePP";
	} else if( $attr == "stickinessScaleInput" ) {
		$ramp = "internalStickinessRamp";
		$pp = "stickinessScalePP";
	} else if( $attr == "collideStrengthScaleInput" ) {
		$ramp = "internalCollideStrengthRamp";
		$pp = "collideStrengthPP";
	} else if( $attr == "bounceScaleInput" ) {
		$ramp = "internalBounceRamp";
		$pp = "bounceScalePP";
	} else if( $attr == "viscosityScaleInput" ) {
		$ramp = "internalViscosityRamp";
		$pp = "viscosityScalePP";
	} else if( $attr == "surfaceTensionScaleInput" ) {
		$ramp = "internalSurfaceTensionRamp";
		$pp = "surfaceTensionScalePP";
	} else if( $attr == "pointFieldScaleInput" ) {
		$ramp = "internalFieldScaleRamp";
		$pp = "pointFieldScalePP";
	} else if( $attr == "opacityScaleInput" ) {
		$ramp = "internalOpacityRamp";
		$pp = "opacityPP";
	} else if( $attr == "incandescenceInput" ) {
		$isVector = true;
		$ramp = "internalIncandescenceRamp";
		$pp = "incandescencePP";
	} else if ($attr == "colorInput") {
		$isVector = true;
		$ramp = "internalColorRamp";
		$pp = "rgbPP";
	} else {
		return;
	} 
	string $source = ($nParticle + "." + $ramp);
	string $dest = ($nParticle + "." + $pp);
	if( $newVal == 0 ){
		// destroy connections
		if( $pp == "mass" ){
			// can only disconnect mass as it is not a dynamic attr
			if( isConnected( $source, $dest ) ){
				disconnectAttr $source $dest;
			}
		} else {
			if( objExists( $dest ) ){
				deleteAttr $dest;
			}
			$dest = $dest + "0";
			if( objExists( $dest ) ){
				deleteAttr $dest;
			}
		}
	} else {
		if( !objExists( $dest ) ){
			if( $isVector ){
				addAttr -ln $pp -dt vectorArray $nParticle;
			} else {
				addAttr -ln $pp -dt doubleArray $nParticle;
			}
		}
		if( !isConnected( $source, $dest ) ){
			connectAttr -f $source $dest;
		}
		$dest += "0";
		if( !objExists( $dest ) ){
			$pp += "0";
			if( $isVector ){
				addAttr -ln $pp -dt vectorArray $nParticle;
			} else {
				addAttr -ln $pp -dt doubleArray $nParticle;
			}
		}	
	}
	
}
