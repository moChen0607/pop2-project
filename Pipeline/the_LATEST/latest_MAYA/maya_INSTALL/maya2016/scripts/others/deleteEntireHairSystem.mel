// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc deleteEntireHairSystem()
{
	string $startSelect[] = `ls -sl`;
	convertHairSelection( "hairSystems" );
	string $hsys[] = `ls -sl`;
	if( size( $hsys ) < 1 ){
		warning( (uiRes("m_deleteEntireHairSystem.kNoHairSystemForDelete")) );
		select -r $startSelect;
		return;
	}

	convertHairSelection( "follicles" );
	string $follicles[] = `ls -sl`;
	convertHairSelection( "startCurves" );
	string $startCurves[] = `ls -sl`;
	select -r $follicles;
	convertHairSelection( "restCurves" );
	string $restCurves[] = `ls -sl`;
	select -r $follicles;
	convertHairSelection( "current" );
	string $current[] = `ls -sl`;
	select -r $follicles;
	convertHairSelection( "constraints" );
	string $constraints[] = `ls -sl`;
	string $hsysGroups[];
	int $i, $j = 0;
	for( $i = 0; $i < size( $hsys ); $i++ ){
		string $tforms[] = listTransforms( $hsys[$i] );
		if( size( $tforms ) > 0 ){
			$hsysGroups[$j] = $tforms[0];
			$j++;
		}
		string $groups[] = getHairSystemGroups( $hsys[$i], false );
		if( $groups[0] != "" ){
			$hsysGroups[$j] = $groups[0];
			$j++;
		}
		if( $groups[1] != "" ){
			$hsysGroups[$j] = $groups[1];
			$j++;
		}
	}
	
	if(`pluginInfo -q -l Fur`) {	
		for( $i = 0; $i < size( $hsys ); $i++ ){
			string $curveAttractorSet[] = `listConnections -shapes true -type "FurCurveAttractors" $hsys[$i]`;
			if(size($curveAttractorSet) == 1)
				HfDeleteCAS $curveAttractorSet[0];
		}
	}

	string $all[];
	appendStringArray( $all, $hsys, size($hsys));
	appendStringArray( $all, $follicles, size($follicles));
	appendStringArray( $all, $startCurves, size($startCurves));
	appendStringArray( $all, $restCurves, size($restCurves));
	appendStringArray( $all, $current, size($current));
	appendStringArray( $all, $constraints, size($constraints));
	appendStringArray( $all, $hsysGroups, size($hsysGroups));
	delete $all;
	select -r;
}
