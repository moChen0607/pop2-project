// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  Oct 5, 2004
//
//  Procedure Name:
//      getRelatedProxies
//
//  Description:
//      Determines the proxies of the reference's proxy manager.
//
//  Input Arguments:
//      Name of reference node
//
//  Return Value:
//      Array of proxies reference node, if any.
//

global proc string[] getRelatedProxies(string $refNode)
//
//	Description:
//		Given a reference node that is a proxy, find it's proxy manager and
//	return an array of all the reference nodes that are managed by the proxy
//	manager. If the reference is not a proxy (i.e., if it has no reference
//	manager), return an empty array.
//		
{

	string $proxyNodes[];

	// First, check if the refNode corresponds to a valid reference
	//
	if ( !isValidReference( $refNode ) )
	{
		string $msgFormat = (uiRes("m_getRelatedProxies.kNodeNotReference"));
		error(`format -s $refNode $msgFormat`);
	}

	// Next, check if the reference node has a proxy manager.
	//
	string $proxyManager = proxyManager( $refNode );
	if ( $proxyManager == "" )
	{
		return $proxyNodes;
	}

	// Next, get all the references managed by proxyManager,
	// and stuff them into the string array.
	//
	string $refConnections[] = `listConnections -t reference ($proxyManager + ".proxyList")`;
	int $numProxies = `size($refConnections)`;
	int $proxyIndex = 0;
	while( $proxyIndex < $numProxies ){
		// Get the reference
		//
		string $refNodePlugs[] = `connectionInfo -dfs ($proxyManager + ".proxyList[" + $proxyIndex + "]")`;
		$proxyIndex++;
		string $msgFormat = (uiRes("m_getRelatedProxies.kInvalidProxy"));
		
		if( size($refNodePlugs) != 1 ){
			// Broken connection, we'll just skip it.
			//
			warning(`format -s $proxyManager $msgFormat`);
			continue;
		}
		string $proxyRefNode = `plugNode $refNodePlugs[0]`;
		string $nodeType = `nodeType $proxyRefNode`;
		if( $nodeType != "reference" ){
			// Connection was not to a reference, skip it.
			//
			warning(`format -s $proxyManager $msgFormat`);
			continue;
		}
		$proxyNodes[size($proxyNodes)] = $proxyRefNode;
	}
	return ($proxyNodes);
}
