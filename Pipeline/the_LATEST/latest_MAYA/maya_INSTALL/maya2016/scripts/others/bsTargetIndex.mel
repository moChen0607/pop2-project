// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  June, 2000
//
//  Description:
//    Given a plug that contains a blendShape target multiIndex,
//    return the target index
//
//	Return:
//    If no multiIndex is found, returns -1.
//
global proc int bsTargetIndex(string $plug)
{
	string $buffer[], $buffer2[];
	tokenize($plug,"[",$buffer);
	if (size($buffer) < 4) {
		return(-1);
	}
	tokenize($buffer[2],"]",$buffer2);
	return $buffer2[0];
}

// Find the 0-based index of the target on the blendShape.
// Returns -1 if it cannot find the target.
//
global proc int getIndexForBlendShapeTarget(string $target, string $blendShape)
{
	int $result = -1;
	int $ii;
	// find the index that corresponds to this target by
	// parsing the corresponding weight attribute index
	//
	string $aliasNames[] = `aliasAttr -q $blendShape`;
	string $tokens[];
	tokenize $target ":"  $tokens; // remove namespace, alias attr don't have them
	$target = $tokens[size($tokens) -1];
	for ( $ii = 0; $ii < size($aliasNames); $ii += 2) {
		if ($aliasNames[$ii] == $target) {
			string $buffer[];
			if (tokenize($aliasNames[$ii+1],"[",$buffer) == 2) {
				string $buffer2[];
				tokenize($buffer[1],"]",$buffer2);
				$result = $buffer2[0];
			}
		}
	}
	return $result;
}
