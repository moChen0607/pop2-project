// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.



//  Procedure Name:
//      getPolyVertsCenter
//
//  Description:
//      Gets the center point of specified verts
//
//  Input Arguments:
//      string $vertices[]: vertices to find center for
//
//  Return Value:
//      float $center: center of verts.
//
global proc float[] getPolyVertsCenter(string $vertices[])
{
	//Return the center of selected verts
	//Get center based on average
	//
	float $center[];
	float $tmpLocation[];
	float $xtotal = 0;
	float $ytotal = 0;
	float $ztotal = 0;

	$size = `size $vertices`;
	//print $size;

	for ($vert in $vertices)
		{
		$tmpLocation = `xform -q -ws -t $vert`;
		$xtotal +=  $tmpLocation[0];
		$ytotal +=  $tmpLocation[1];
		$ztotal +=  $tmpLocation[2];
		}

	$center[0] = ($xtotal / ($size));
	$center[1] = ($ytotal / ($size));
	$center[2] = ($ztotal / ($size));

	return $center;
}

//  Procedure Name:
//      polyMergeVerticesToCenter
//
//  Description:
//      Merge/collapse all selected verts/faces/edges to center.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
global proc polyMergeToCenter()
{

	ConvertSelectionToVertices;
	string $selected[] = `filterExpand -sm 31 -ex 1`;
	if (`size $selected` > 0){
		float $center[] = `getPolyVertsCenter $selected`;

		select -r $selected;

		move -a $center[0] $center[1] $center[2] $selected;

		polyMergeVertex  -d 0.01 -ch (`constructionHistory -q -tgl`);
	}

}
