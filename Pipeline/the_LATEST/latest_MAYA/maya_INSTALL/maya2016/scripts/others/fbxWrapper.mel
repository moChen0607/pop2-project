// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  March 3rd, 2012
//
//  Description:
//      Wrap all procedures that are called by FBX in HumanIK. 
//		This is because they have been renamed in Maya
//



// To be removed when the proc is renamed in FBX
global proc mayaHIKsetCharacterInput(string $pCharacter, string $pNewCharacterSrc )
{
	hikSetCharacterInput( $pCharacter, $pNewCharacterSrc );
}

// To be removed when the proc is renamed in FBX
global proc mayaHIKenableCharacter( string $pCharacter, int $activateAndDirtyFlags )
{
	hikEnableCharacter( $pCharacter, $activateAndDirtyFlags );
}

// To be removed when the proc is renamed in FBX.
// This may also be used in the characterization plugin. If so, it will need to be renamed there too.
global proc refreshAllCharacterLists()
{
	hikUpdateCharacterList();
}

// To be removed when the proc is renamed in FBX
global proc showHideHIKCharacterToolFK( int $show )
{
	hikShowHideRigFkNodes( hikGetCurrentCharacter(), $show );
}

// To be removed when the proc is renamed in FBX
global proc showHideHIKCharacterToolIK( int $show )
{
	hikShowHideRigIKNodes( hikGetCurrentCharacter(), $show );
}

// To be removed when the proc is renamed in FBX
global proc string CreateHIKCharacter()
{
	return hikCreateCharacterNoUpdateOfCurrent();
}

// To be removed when the proc is renamed in FBX
global proc int mayaHIKisCharacterLocked(string $character)
{
	return hikIsDefinitionLocked( $character );
}

// To be removed when the proc is renamed in FBX
global proc mayaHIKcharacterLock( string $pCharacter, int $pLock, int $pValidateAndSaveStance )
{
	hikCharacterLock( $pCharacter, $pLock, $pValidateAndSaveStance );
}

// To be removed when the proc is renamed in FBX
global proc string getProperty2StateFromCharacter(string $pCharacter)
{
	return hikGetProperty2StateFromCharacter($pCharacter);
}

// To be removed when the proc is renamed in FBX
global proc string CreateControlSet()
{
	return hikCreateControlRigNode();
}

// To be removed when the proc is renamed in FBX
global proc ConnectCharacterDef(string $pOutput, string $pInput)
{
	hikConnectCharacterDefinition( $pOutput, $pInput);
}

// To be removed when the proc is renamed in FBX
global proc AddFkToControlSet(string $pControlSet, string $pFkNode, int $pNodeId)
{
	hikAddFkToControlRig( $pControlSet, $pFkNode, $pNodeId);
}

// To be removed when the proc is renamed in FBX
global proc createHIKKeyingGroups(string $pCharacter, string $keyingGroups[])
{
	hikCreateKeyingGroups( $pCharacter, $keyingGroups);
}

// To be removed when the proc is renamed in FBX
global proc string[] getFkNodesFromControlSet( string $controlSet )
{
	return hikGetFkNodesFromControlRig( $controlSet );
}

// To be removed when the proc is renamed in FBX
global proc addToKeyingGroups(string $node, int $isIkEffector, string $keyingGroups[])
{
	hikAddToKeyingGroups( $node, $isIkEffector, $keyingGroups);
}

// To be removed when the proc is renamed in FBX
global proc setKeyingMode()
{
	hikSetKeyingMode();
}

// To be removed when the proc is renamed in FBX
global proc string BuildStateFromFK(string $pControlSet)
{
	return hikBuildStateFromFK( $pControlSet);
}

// To be removed when the proc is renamed in FBX
global proc string BuildStateFromEffector(string $pControlSet)
{
	return hikBuildStateFromEffector($pControlSet);
}

// To be removed when the proc is renamed in FBX
global proc string CreatePinningNode()
{
	return hikCreatePinningNode();
}

// To be removed when the proc is renamed in FBX
global proc ConnectEffectorStateObject(string $pOutput, string $pInput)
{
	hikConnectEffectorStateObject($pOutput, $pInput);
}

// To be removed when the proc is renamed in FBX
global proc ConnectEffectorsToPinningState(string $pPinningState, string $pControlSet)
{
	hikConnectEffectorsToPinningState($pPinningState, $pControlSet);
}

// To be removed when the proc is renamed in FBX
global proc string[] getSolverFromCharacter(string $pCharacter)
{
	return hikGetSolverFromCharacter($pCharacter);
}

// To be removed when the proc is renamed in FBX
global proc bindEffectors2PropState( string $pControlSet, string $pPropState )
{
	hikBindEffectors2PropState( $pControlSet, $pPropState );
}

// To be removed when the proc is renamed in FBX
global proc string[] BuildFKIKSyncFromState(string $StateObj, string $pControlSet)
{
	return hikBuildFKIKSyncFromState($StateObj, $pControlSet);
}

// To be removed when the proc is renamed in FBX
global proc string[] getEffectorFromCharacterStateFromCharacter(string $pCharacter)
{
	return hikGetEffectorFromCharacterStateFromCharacter($pCharacter);
}

// To be removed when the proc is renamed in FBX
global proc ConnectPropState(string $pOutput, string $pInput)
{
	hikConnectPropState($pOutput, $pInput);
}

// To be removed when the proc is renamed in FBX
global proc ConnectCharacterStateObject(string $pOutput, string $pInput)
{
	hikConnectCharacterStateObject($pOutput, $pInput);
}

// To be removed when the proc is renamed in FBX
global proc createAuxPivotFromNode( string $character, int $effId, string $auxPivot )
{
	hikCreateAuxPivotFromNode( $character, $effId, $auxPivot );
}

// To be removed when the proc is renamed in FBX
global proc createAuxEffectorFromNode( string $character, int $effId, string $aux )
{
	hikCreateAuxEffectorFromNode( $character, $effId, $aux );
}

// To be removed when the proc is renamed in FBX
global proc mayaHIKsetRigInput( string $pCharacter )
{
	hikSetRigInput( $pCharacter );
}

// To be removed when the proc is renamed in FBX
global proc mayaHIKsetStanceInput( string $pCharacter )
{
	hikSetStanceInput( $pCharacter );
}

// To be removed when the proc is renamed in FBX
global proc string[] getSkeletonNodesFromCharacter(string $character)
{
	return hikGetSkeletonNodes( $character );
}

// To be removed when the proc is renamed in FBX
global proc int deleteControlRig(string $pCharacter)
{
	// no need of the parameter in the new version of the proc. It takes the current character automaticly.
	return hikDeleteControlRig();
}

// To be removed when the proc is renamed in FBX.
// This is also used in the characterization plugin. It will need to be renamed there too.
global proc deleteCharacter(string $pCharacter)
{
	hikDeleteCharacter($pCharacter);
}

// To be removed when the proc is renamed in FBX.
global proc string GetCharacterDef(string $pObject)
{
	return hikGetCharacterDefinition($pObject);
}

// To be removed when the proc is renamed in FBX.
global proc updateHIKCharacterToolCharacterList( )
{
	hikUpdateCharacterList();
}

// To be removed when the proc is renamed in FBX.
global proc string[] getRigFkNodes(string $pCharacter, int $includeRefNode )
{
	return hikGetRigFKNodes( $pCharacter, $includeRefNode );
}

// To be removed when the proc is renamed in FBX.
global proc int mayaHIKisCharacterEnabled( string $pCharacter )
{
	return hikIsCharacterEnabled( $pCharacter );
}

// To be removed when the proc is renamed in FBX.
global proc string mayaHIKgetCharacterInput( string $pCharacter )
{
	return hikGetRetargetCharacterInput( $pCharacter );
}

// To be removed when the proc is renamed in FBX.
global proc string[] getIkNodesFromControlSet( string $controlSet, int $includeAux )
{
	return hikGetIkNodesFromControlRig( $controlSet, $includeAux );
}

// To be removed when the proc is renamed in FBX.
global proc int GetHIKEffectorIdFromName(string $name)
{
	return hikGetEffectorIdFromName($name);
}

// To be removed when the proc is renamed in FBX.
global proc int GetHIKNodeIdFromName(string $name)
{
	return hikGetNodeIdFromName($name);
}

// To be removed when the proc is renamed in FBX.
global proc int GetHIKNodeCount()
{
	return hikGetNodeCount();
}

// To be removed when the proc is renamed in FBX.
global proc AddSkToCharacter(string $pCharacter, string $pNode, int $pNodeId, int $doSelect )
{
	hikAddSkToCharacter($pCharacter, $pNode, $pNodeId, $doSelect );
}

// To be removed when the proc is renamed in FBX.
global proc SetSkTOffsetOnCharacter(string $pCharacter, int $pNodeId, float $Tx, float $Ty, float $Tz)
{
	hikSetSkTOffsetOnCharacter($pCharacter, $pNodeId, $Tx, $Ty, $Tz);
}

// To be removed when the proc is renamed in FBX.
global proc SetSkROffsetOnCharacter(string $pCharacter, int $pNodeId, float $Rx, float $Ry, float $Rz)
{
	hikSetSkROffsetOnCharacter($pCharacter, $pNodeId, $Rx, $Ry, $Rz);
}

// To be removed when the proc is renamed in FBX.
global proc SetSkSOffsetOnCharacter(string $pCharacter, int $pNodeId, float $Sx, float $Sy, float $Sz)
{
	hikSetSkSOffsetOnCharacter($pCharacter, $pNodeId, $Sx, $Sy, $Sz);
}

// To be removed when the proc is renamed in FBX.
global proc string GetControlSetForCharacter(string $pCharacter)
{
	return hikGetControlRig($pCharacter);
}

// To be removed when the proc is renamed in FBX.
global proc mayaHIKsetInactiveStanceInput( string $pCharacter )
{
	hikSetInactiveStanceInput( $pCharacter );
}

global proc AddIkToControlSet(string $pControlSet, string $pIkEffector, int $pEffectorId, int $pEffectorSetId)
{
	hikAddIkToControlRig($pControlSet, $pIkEffector, $pEffectorId, $pEffectorSetId);
}
