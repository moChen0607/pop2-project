// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  April 29, 1997
//
//  Description:
//      The stitchSurfacePointsPreset() procedure executes one stitchSurfacePoints
//      operation given atleast two NURBS surfaces points, based on the option vars.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
proc string pieceTogetherCmd(
    int $doHistory,
    int $replaceOriginal,
	int $ewt,
	int $cascade )
//
//	Description :
//
{
	string $cmd = "stitchSurfacePoints" ;

	$cmd = $cmd + " -ch " ;
	$cmd = $cmd + $doHistory ;

	$cmd = $cmd + " -rpo ";	
	$cmd = $cmd + $replaceOriginal ;		

	$cmd = $cmd + " -ewt " ;
	if( $ewt != 0 ) $cmd = $cmd + " true " ;	
	else $cmd = $cmd + " false " ;	

	$cmd = $cmd + " -cascade " ;
    if( $cascade ) $cmd = $cmd + " true " ;
    else $cmd = $cmd + " false " ;

	return $cmd ;
}

global proc stitchSurfacePointsPreset(
    int $doHistory,
    int $replaceOriginal,
	int $assignEqualWt,
	int $cascade )
//
//	Description :
//
{
	global int $gSelectEditPointsBit ;
    global int $gSelectSurfaceParmPointsBit;
    global int $gSelectSurfaceKnotsBit ;
    global int $gSelectCVsBit ;
    string $ptsList[] = `filterExpand -ex true -sm $gSelectEditPointsBit -sm $gSelectSurfaceParmPointsBit -sm $gSelectCVsBit`;
    int $len = size($ptsList) ;

	if( $len < 2 ) {
		error (uiRes("m_stitchSurfacePointsPreset.kInvalidSelection")) ;
	} else {
		string $cmd = pieceTogetherCmd( $doHistory, $replaceOriginal, $assignEqualWt, $cascade ) ;
		$cmd = appendToCmdPlaceHoldersForSelectionItems($cmd,$len) ;
		string $results[] = executeCmdOnItems($cmd,$ptsList);
		if( size($results) == 0 && ( $replaceOriginal == 1 ) && ( $doHistory == 0 )) {
			error (uiRes("m_stitchSurfacePointsPreset.kCmdFailed")) ;	
		} else {
			global int $gSelectNurbsSurfacesBit ;

			int $count = size($results) ;
        	string $selectString = "select -r ";	
			int $i ;
	        for( $i = 0 ; $i < $count ; $i++ ) {
   	        	$selectString +=  $results[$i] ;
            	$selectString += " ";
        	}
        	$selectString += ";";
        	select -cl ;
        	eval($selectString) ;
		}		
	}
}
	

