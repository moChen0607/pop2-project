// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


//
//  Procedure Name:
//      buildCameraBookmarkMenu
//
//  Description:
//      Create a menu item for each the bookmark views associated with
//      the current camera. New bookmarks can be created with or
//      without a description.
//
global proc buildCameraBookmarkMenu( string $parent, string $panel )
{
    setParent -m $parent;

    menu -e -deleteAllItems $parent;

	// Update the values in the menu based on the current camera
	//
    string $camera = "";

	string $customEditor = `getCustomViewEditorFromPanel( $panel )`;
	if (size($customEditor))
	{
		$camera = `modelEditor -q -camera $customEditor`;		
	}
	else
		$camera = `modelPanel -q -camera $panel`;

    // Create a menu item for each bookmark

    string $bookmarks[] = `listConnections ($camera+".bookmarks")`;
    string $bookmarks3D[] = {};
    string $bookmarks2D[] = {};
    for ( $item in $bookmarks) {
        $viewType = `getAttr ($item + ".viewType")`;
        if ($viewType == 0)
            $bookmarks3D[size($bookmarks3D)] = $item;
        else if ($viewType == 1)
            $bookmarks2D[size($bookmarks2D)] = $item;
    }

    for ( $item in $bookmarks3D) {
        menuItem -label $item
            -c ("cameraView -e -animate (`optionVar -q animateRollGotoBookmark`) -camera "+$camera+" -setCamera "+$item);
    }

    for ( $item in $bookmarks2D) {
        menuItem -label ($item + (uiRes("m_buildCameraBookmarkMenu.kPanZoom")))
            -c ("cameraView -e -animate (`optionVar -q animateRollGotoBookmark`) -camera "+$camera+" -setCamera "+$item);
    }
    menuItem -divider true;

    menuItem -label (uiRes("m_buildCameraBookmarkMenu.kEditBookmarks")) -c ("cameraBookmarkEditor "+$camera);
}
