// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

/////////////////////////////////////////////////////////////////////////////
//    Main menubar code
/////////////////////////////////////////////////////////////////////////////

global proc buildTextureViewContextHelpItems(string $nameRoot, string $menuParent)
//
//  Description:
//		Build context sensitive menu items
//		
//  Input Arguments:
//		$nameRoot - name to use as the root of all item names
//		$menuParent - the name of the parent of this menu
//
//  Return Value:
//      None
//
{
	menuItem -label (uiRes("m_texturePanelMenus.kHelpOnUVEditor"))
		-enableCommandRepeat false
		-command "showHelp TextureView";
}

global proc textureWindowCreateMenubar(string $editor, string $editorCmd)
//
// Description:
//		Texture window menu bar creation.
//
//		When adding a new menuitem to an existing menu, modify the
//		appropriate textureWindowBuildNAMEMenu. If adding a new menu
//		create a new textureWindowBuildNAMEMenu proc.
//
//		In either case, if the new menuItem is a checkbox, it should
//		call txtWndUpdateEditor when selected. See
//		textureWindowBuildViewMenu for examles.
//		In addition, code should be added to txtWndUpdateEditor to update
//		the state of all controls which provide an interface to the new
//		functionality. This is to ensure that all the controls are in
//		sync.
//
//		Keep in mind that there is also a textureWindoCreatePopup proc. If
//		you wish your new menuItem to be in the popup, you must modify that
//		proc as well.
// Arguments:
//
// Returns:
//
//
{
	global string $gTextureEditorMenubarPrefix;

	//
	//	Make the Edit sub menu.
	//
	string	$subName = `menu -label (uiRes("m_texturePanelMenus.kPolygons"))
		-to 1 
		-aob true
		-familyImage "menuIconEdit.png"
		($editor+"EditPolyMenu")`;
	textureWindowBuildEditMenu( $subName, $editor, $editorCmd, 1 );


	//
	//	Make the Edit Subdiv sub menu.
	//
	if (`isTrue "SubdivUIExists"`) {
		string	$subName = `menu -label (uiRes("m_texturePanelMenus.kSubdivs"))
			-to 1 
			-aob true
			-familyImage "menuIconEdit.png"
			($editor+"EditSubdivMenu")`;
		textureWindowBuildEditSubdivMenu( $subName, $editor, $editorCmd, 1 );
	}

	// Disabling NURBS UV Menu - NURBS UVs are only partially implemented.
	// Here we are limiting their exposure. When the remaining features of
	// NURBS UVs are implemented, the following lines can be uncommented.
	// [lli]
	//
	/*
	//
	//	Make the Edit NURBS sub menu.
	//
	// Note: we must issue a -pmc to update this item since it is based on
	// the object selection rather than the txtWndUpdateEditor method - which
	// only responds to editor changes.
	//
	string $nurbsPostMenuCommand = "updateNurbsEditUVModeMenuItem(\"" +
									$gTextureEditorMenubarPrefix +
									$editor +
									"NurbsEditUVModeItem\")";
	$subName = `menu -l "NURBS"
		-to 1
		-aob true
		-pmc $nurbsPostMenuCommand
		-familyImage "menuIconEdit.png"
		($editor+"EditNurbsMenu")`;
	textureWindowBuildEditNurbsMenu( $subName, $editor, $editorCmd, 1 );
	*/

	//
	//	Make the View sub menu.
	//
	$subName = `menu -label (uiRes("m_texturePanelMenus.kView"))
		-to 1 
		-aob true
		-familyImage "menuIconView.png"
		($editor+"ViewMenu")`;
	textureWindowBuildViewMenu( $subName, $editor, $editorCmd, 1 );

	//
	// Make the select sub menu
	//
	$subName = `menu -label (uiRes("m_texturePanelMenus.kSelect"))
		-to 1
		-aob true
		-familyImage "menuIconSelect.png"
		($editor+"SelectMenu")`;
	textureWindowBuildSelectMenu( $subName, $editor, $editorCmd, 1 );


	//
	// Make the tool sub menu
	//
	$subName = `menu -label (uiRes("m_texturePanelMenus.kTool"))
		-to 1
		-aob true
//		-familyImage "menuIconTool.png" // TO DO
		($editor+"ToolMenu")`;
	textureWindowBuildToolMenu( $subName, $editor, $editorCmd, 1 );

	//
	// Make the image sub menu
	//
	$subName = `menu -label (uiRes("m_texturePanelMenus.kImage"))
		-to 1
		-aob true
		-familyImage "menuIconImages.png"
		($editor+"ImageMenu")`;
	textureWindowBuildImageMenu( $subName, $editor, $editorCmd, 1 );

	// 
	// Make the textures sub menu
	//
	$subName = `menu -label (uiRes("m_texturePanelMenus.kTextures")) 
		-tearOff false
		-allowOptionBoxes false
		($editor+"TexturesMenu")`;
	menu -edit -postMenuCommand ( "textureWindowBuildTexturesMenu " + 
									$subName + " " +
									$editor + " " +
									$editorCmd + " 1" )
		$subName;
	setParent -menu ..;
		
	//
	// Make uv set sub menu
	//
	$subName = `menu -label (uiRes("m_texturePanelMenus.kUVSets"))  
		-tearOff false
		-allowOptionBoxes false
		($editor+"UVSetsMenu")`;
	menu -edit -postMenuCommand ( "textureWindowBuildUVSetsMenu " + 
									$subName + " " +
									$editor + " " +
									$editorCmd + " 1" )
		$subName;
	setParent -menu ..;

	//
	//	Create the common tools of the menuBar.
	//
	//iiWindowEditorMenuBar( $editor, $editorCmd );

	//	Add support for the Context Sensitive Help Menu.
	//
	addContextHelpProc $editor "buildTextureViewContextHelpItems";
}


/////////////////////////////////////////////////////////////////////////////
//    Main menu code
/////////////////////////////////////////////////////////////////////////////


global proc textureWindowBuildViewMenu(string $parent, string $editor, 
									   string $editorCmd, int $menuBar)
//
// Description:
//		View menu
// Arguments:
//
// Returns:
//
//
{
	global string $gTextureEditorMenubarPrefix;

	setParent -m $parent;

	// Add a prefix to have a different name in the menuBar from the popup menu
	string $prefix="";
	if ($menuBar == 1) {
		$prefix = ($gTextureEditorMenubarPrefix + $editor);
	} 
	else {
		$prefix = $editor;
	}

	// Face selection filter
	string	$cmdStr = "txtWndRelFacesMode( \"" + $editor
						+ "\", \"" + $editorCmd + "\", ";

	string $cmdStr2 = ("textureWindowShaderFacesMode( \"" + $editor
						+ "\", \"" + $editorCmd + "\", ");
	

	string $updateEditor = ( "txtWndUpdateEditor(\"" + $editor + "\", \"" +
							 $editorCmd + "\", \"null\", 101);" );

	if (!`optionVar -exists textureWindowShaderFacesMode`)
		optionVar -iv textureWindowShaderFacesMode 0;
		//0 off
		//1 view shaders
		//2 view isolate

	//********************************************
	//*** some of these menuItems need annotations
	//*** should they be runtime commands?
	//********************************************
	menuItem -label (uiRes("m_texturePanelMenus.kViewContainedFaces"))  -checkBox 0
			 -command ($cmdStr + " 1);" + $updateEditor)
			 ($prefix+"containedFacesItem");

	menuItem -label (uiRes("m_texturePanelMenus.kViewConnectedFaces"))  -checkBox 0
			 -command ($cmdStr + " 0);" + $updateEditor)
			 ($prefix+"connectedFacesItem");

	menuItem -label (uiRes("m_texturePanelMenus.kViewFacesOfSelectedImages"))  -checkBox 0
			 -command ($cmdStr2 + " 0);" + $updateEditor)
			 ($prefix+"shaderFacesItem");

	menuItem -label (uiRes("m_texturePanelMenus.kIsolateSelect"))  
			 -subMenu true
			 -tearOff true
			 ($prefix+"isolateFacesItem");

		menuItem -label (uiRes("m_texturePanelMenus.kViewSet"))  -checkBox 0
			-command ($cmdStr2 + " 1);" + $updateEditor)
			-annotation (uiRes("m_texturePanelMenus.kViewSetAnnot")) 
			($prefix+"isolateViewItem");

		menuItem -label (uiRes("m_texturePanelMenus.kAddSelected")) 
			-command ("textureEditorIsolateSelect 1;")
			-annotation (uiRes("m_texturePanelMenus.kAddSelectedAnnot")) 
			($prefix+"isolateAddItem");

		menuItem -label (uiRes("m_texturePanelMenus.kRemoveSelected")) 
			-command ("textureEditorIsolateSelect 2;")
			-annotation (uiRes("m_texturePanelMenus.kRemoveSelectedAnnot")) 
			($prefix+"isolateRemoveItem");

		menuItem -label (uiRes("m_texturePanelMenus.kRemoveAll")) 
			-command ("textureEditorIsolateSelect 0;")
			-annotation (uiRes("m_texturePanelMenus.kRemoveAllannot"))
			($prefix+"isolateResetItem");

		setParent -m $parent;

	menuItem -d 1 ;

	// Grid display menu item + option box
	//
	// textureWindow -e -tgl 1/0 $panelname;
    
	string $gridPath;
	menuItem -label (uiRes("m_texturePanelMenus.kGrid"))  
		-checkBox 0 
		-c ("textureWindowToggleGrid (\"" + 
			$editor+ "\",\""  +
			$editorCmd + "\" );" +
			$updateEditor)
		-annotation (uiRes("m_texturePanelMenus.kShowGridAnnot")) 
		($prefix+"toggleGrid");

	menuItem -ecr false -optionBox 1 
		-annotation (uiRes("m_texturePanelMenus.kGridOptionsAnnot")) 
		-c "performTextureViewGridOptions true" textureViewGridSpacingItem;

	string $toolbarPath;
	menuItem -label (uiRes("m_texturePanelMenus.kToolbar"))  
		-ecr false
		-checkBox (!`optionVar -q textureEditorToolbarState`)
		//note that the optionVar stores the collapse state of the 
		//frameLayout which is opposite to most controls - false 
		//means the frameLayout is not collapsed so the ! operator
		//is used
		-command ("textureWindowToggleToolbar;" + $updateEditor)
		-annotation (uiRes("m_texturePanelMenus.kToolbarAnnot")) 
		($prefix+"toggleToolbar");

	menuItem -label (uiRes("m_texturePanelMenus.kTileLabels"))  
		-checkBox 0
		-c ("textureWindowToggleTileLabels (\"" + 
			$editor+ "\",\""  +
			$editorCmd + "\" );" +
			$updateEditor)
		-annotation (uiRes("m_texturePanelMenus.kTileLabelsAnnot")) 
		($prefix+"toggleTileLabels");

	menuItem -d 1 ;

	// Frame options
	menuItem -label (uiRes("m_texturePanelMenus.kFrameAll")) 
			 -command ("FrameAll")
			 ($prefix+"frameAllItem");
	menuItem -label (uiRes("m_texturePanelMenus.kFrameSelection")) 
			 -command ("FrameSelected")
			 ($prefix+"frameSelectedItem");
	//menuItem -l "Real Size"
	//		 -c ($editorCmd+" -e -realSize "+$editor)
	//		 ($prefix+"realSizeItem");
    setParent -m ..;
}

global proc textureWindowBuildEditMenu(string $parent, string $editor, 
										 string $editorCmd, int $menuBar)
//
// Description:
//		Edit menu
// Arguments:
//
// Returns:
//
//
{
	global string $gTextureEditorMenubarPrefix;

	setParent -m $parent;

	// Add a prefix to have a different name in the menuBar from the popup menu
	string $prefix="";
	if ($menuBar == 1) {
		$prefix = ($gTextureEditorMenubarPrefix + $editor);
	} 
	else {
		$prefix = $editor;
	}


	menuItem -label (uiRes("m_texturePanelMenus.kCopyUVs"))  -ecr true 
		-annotation (uiRes("m_texturePanelMenus.kCopyUVsAnnot")) 
		-c "polyClipboard -cp -uv";

	menuItem -label (uiRes("m_texturePanelMenus.kPasteUVs"))  -ecr true 
		-annotation (uiRes("m_texturePanelMenus.kPasteUVsAnnot")) 
		-c "polyClipboard -ps -uv";

	////////////////////////////////////////////////////////////////
	menuItem -divider true;

	int $creator = 0;
	string $createEmptyUVSet = (uiRes("m_texturePanelMenus.kCreateEmptyUVSet"));
	string $emptyUVSet = (uiRes("m_texturePanelMenus.kEmptyUVSet"));
	
	string $selectCmd = "ls -sl";
    $prefix = ($creator == 0 ? "" : ("PolyRequestUVSetName \""+$createEmptyUVSet+"\" ") );
    string $cmd = $prefix + "performCreateUVSet";
    string $version = "\"1\"";
    string $args0 = ("{\"0\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
    string $args1 = ("{\"1\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
    string $suffix = ($creator == 0 ? " \"\"" : "");
    string $c = ($cmd + " " + $version + " " + $args0 + $suffix);
    menuItem
        -label ($creator == 1 ? $emptyUVSet : $createEmptyUVSet)
        -ecr true
        -i "polyCreateUVSet.png"
        -annotation (uiRes("m_texturePanelMenus.kCreateUVSetAnnot")) 
        -c $c createUVSetItemTexturePanel;

	if( $creator != 1 ) {
    	string $c = ($cmd + " " + $version + " " + $args1 + $suffix);
    	menuItem -optionBox 1
        	-i "polyCreateUVSet.png"
        	-annotation (uiRes("m_texturePanelMenus.kCreateUVSetOptionsAnnot")) 
        	-ecr false -c $c
			createUVSetOptionItemTexturePanel;
	}

	{

	// Menu item to Copy UVs to another uvset.  This has a submenu to display 
	// all available uv sets to copy to.
	//
    string $selectUVSetMenuForCopy = 
		`menuItem -label (uiRes("m_texturePanelMenus.kCopyUVsToUVSet"))  -ecr true
         -command "SetCurrentUVSet" 
		-subMenu true -allowOptionBoxes true`;

	// This causes submenu to rebuild everytime it shows 
	string $pmc = "string $menuNames[]; buildUVSetMenuNames($menuNames);" +
				  "buildUVSetMenu " + $selectUVSetMenuForCopy + " $menuNames \"" + $prefix + " \" 1;" +
				  "buildUVSetMenuWithCopyUVsCmd " + $selectUVSetMenuForCopy + " $menuNames ;" ;

	menuItem -e -postMenuCommand $pmc $selectUVSetMenuForCopy;

    string $copyCurrentUVSet = (uiRes("m_texturePanelMenus.kCopyCurrentUVSet"));
    $prefix = ($creator == 0 ? "" : ( "PolyRequestUVSetName \"" + $copyCurrentUVSet + "\" " ) );
    string $cmd = $prefix + "performCopyCurrentUVSet";
    string $version = "\"1\"";
    string $args0 = ("{\"0\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
    string $args1 = ("{\"1\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
    string $args2 = ("{\"2\", \"" + $selectCmd + "\", \"" + ($creator == 1 ? "1" : "0") + "\"}");
    string $suffix = ($creator == 0 ? " \"\"" : "");
    string $c = ($cmd + " " + $version + " " + $args0 + $suffix);
    menuItem -label (uiRes("m_texturePanelMenus.kCopyIntoNewUVSet"))  -ecr true
        -i "polyCreateUVSet.png"
        -annotation (uiRes("m_texturePanelMenus.kCopyIntoNewUVSetAnnot")) 
        -c $c copyCurrentUVSetTexturePanel;

	if( $creator != 1 ) {
     	string $c = ($cmd + " " + $version + " " + $args1 + $suffix);
     	menuItem -optionBox 1
            -i "polyCreateUVSet.png"
            -annotation (uiRes("m_texturePanelMenus.kCopyIntoNewUVSetOptionsAnnot")) 
            -ecr false
            -c $c copyCurrentUVSetOBTexturePanel;
	}

    setParent -m ..;
	}

    menuItem -label (uiRes("m_texturePanelMenus.kSetCurrentUVSet"))  -ecr true
         -i "polySetCurrentUVSet.png"
         -annotation (uiRes("m_texturePanelMenus.kSetCurrentUVSetAnnot")) 
         -c "SetCurrentUVSet" setCurrentUVSetTexturePanel;

    menuItem -label (uiRes("m_texturePanelMenus.kRenameCurrentUVSet"))  -ecr true
         -i "polyRenameUVSet.png"
         -annotation (uiRes("m_texturePanelMenus.kRenameCurrentUVSetAnnot")) 
         -c "RenameCurrentUVSet" renameCurrentUVSetTexturePanel;

    menuItem -label (uiRes("m_texturePanelMenus.kDeleteCurrentUVSet"))  -ecr true
         -i "polyDeleteUVSet.png"
         -annotation (uiRes("m_texturePanelMenus.kDeleteCurrentUVSetAnnot")) 
         -c "DeleteCurrentUVSet" deleteCurrentUVSetTexturePanel;

	////////////////////////////////////////////////////////////////
	menuItem -divider true;

	menuItem -label (uiRes("m_texturePanelMenus.kNormalizeUVs"))   -ecr true -i "polyNormalizeUVs.png"
		-annotation (uiRes("m_texturePanelMenus.kNormalizeUVsAnnot")) 
		-c	 "performPolyForceUV normalize 0" normalizeUVItem;
		menuItem -optionBox 1 
			-annotation (uiRes("m_texturePanelMenus.kNormalizeUVsOnPolygonsOptionsAnnot"))  
			-ecr false 
			-c "performPolyForceUV normalize 1" ($prefix+"normalizeUVOptionItem");

	menuItem -label (uiRes("m_texturePanelMenus.kUnitizeUVs"))   -ecr true -i "polyUnitizeUVs.png"
		-annotation (uiRes("m_texturePanelMenus.kUnitizeUVsAnnot")) 
		-c	 "performPolyForceUV unitize 0" unitizeUVItem;
	   menuItem -optionBox 1
		   -annotation (uiRes("m_texturePanelMenus.kUnitizeUVsOptionBoxAnnot")) 
		   -ecr false
		   -c "performPolyForceUV unitize 1"  ($prefix+"unitizeUVOptionItem");


	menuItem -label (uiRes("m_texturePanelMenus.kFlipUVs"))   -ecr true -i "polyFlipUVs.png"
		-annotation (uiRes("m_texturePanelMenus.kFlipUVsAnnot")) 
		-c	 "performPolyForceUV flip 0" flipUVItem;
		menuItem -optionBox 1 
			-annotation (uiRes("m_texturePanelMenus.kFlipUVsOnPolygonsOptionsAnnot"))  
			-ecr false 
			-c "performPolyForceUV flip 1" ($prefix+"flipUVOptionItem");

	// m2.1 Rotate uvs about vertex
	menuItem -label (uiRes("m_texturePanelMenus.kRotateUVs"))  -ecr true -i "polyTextureRotateUV.png"
		-annotation (uiRes("m_texturePanelMenus.kRotateUVsAnnot")) 
		-c "performPolyRotateUVs 0"
		rotateUVItem;
	menuItem -optionBox 1
		-ecr false
		-i "polyTextureRotateUV.png"
		-annotation (uiRes("m_texturePanelMenus.kRotateUVsOptionsAnnot")) 
		-c "performPolyRotateUVs 1"
		rotateUVOptionItem;

	menuItem -label (uiRes("m_texturePanelMenus.kLayoutRectangle"))   -ecr true -i "polyUVRectangle.png"
		-annotation (getRunTimeCommandAnnotation("LayoutUVRectangle"))
		-dmc "polygonsMenuItemToShelf \"polyPerformAction polyUVRectangle v 0\""
		-c "LayoutUVRectangle" layoutUVRectangleTextureItem;
		
	////////////////////////////////////////////////////////////////
	menuItem -divider true;

	menuItem -label (uiRes("m_texturePanelMenus.kCycleUVs"))  -ecr true
		-i "cycleUVs.png"
		-annotation (uiRes("m_texturePanelMenus.kCycleUVsAnnot")) 
		-c "polyRotateUVsByVertex"
		cycleUVItem;

	menuItem -label (uiRes("m_texturePanelMenus.kBestPlaneTexturingTool"))   -ecr true 
		-i "bestPlaneTxt.png"
        -annotation (uiRes("m_texturePanelMenus.kBestPlaneTexturingToolAnnot")) 
        -c   "setToolTo polyBestPlaneTexturingContext" polyBestPlaneTexturingItem;

	////////////////////////////////////////////////////////////////
	menuItem -divider true;
	
	menuItem -label (uiRes("m_texturePanelMenus.kGridUVs"))
		-image "polySnapUVsToGrid.png"
		-command ("polyGridUV `optionVar -query gridUVValueU` " +
				"`optionVar -query gridUVValueV` " +
				"`optionVar -query gridUVValuePixel`")
		-annotation (uiRes("m_texturePanelMenus.kGridUVsAnnot")) 
		gridUVItem;

		menuItem -optionBox 1
			-command "performPolyGridUV 1"
			($prefix+"gridUVOptionItem");

	menuItem -label (uiRes("m_texturePanelMenus.kAlignUVs")) 
		-c "performTextureViewAlignUVsOptions false"
		-annotation (uiRes("m_texturePanelMenus.kAlignUVsAnnot")) 
		-i "polyAlignUVs.png"
		($prefix+"AlignUVs");
	menuItem 
	    -optionBox true
		-c "performTextureViewAlignUVsOptions true"
		textureViewAlignUVsItem;

	menuItem -label (uiRes("m_texturePanelMenus.kWarpImage")) 
		-annotation (uiRes("m_texturePanelMenus.kWarpImageAnnot")) 
		-echoCommand true
		-dragMenuCommand "performPolyWarpImage 2"
		-c "performPolyWarpImage 0" 
		-i "polyWarpImage.png"
		layoutWarpImageItem;
	menuItem -optionBox true
		-annotation (uiRes("m_texturePanelMenus.kWarpImageOptionsAnnot")) 
		-c "performPolyWarpImage 1"
		-i "polyWarpImage.png"
		layoutWarpImageOptItem;	
	
	////////////////////////////////////////////////////////////////
	menuItem -divider true;	

	menuItem -label (uiRes("m_texturePanelMenus.kMapUVBorder"))   -ecr true
		-i "polyMapUVBorder.png"
		-annotation (uiRes("m_texturePanelMenus.kMapUVBorderAnnot")) 
		-c	 "performPolyUntangleUV map 0" mapUVBorderItem;
		menuItem -optionBox 1 -i "polyMapUVBorder.png" 
			-annotation (uiRes("m_texturePanelMenus.kMapUVBorderOptionsAnnot"))  
			-ecr false 
			-c "performPolyUntangleUV map 1" ($prefix+"mapUVBorderOptionItem");

   menuItem -label (uiRes("m_texturePanelMenus.kStraightenUVBorder")) 
       -annotation (uiRes("m_texturePanelMenus.kStraightenUVBorderAnnot")) 
       -c "performPolyStraightenUV 0" -i "polyStraightenUVBorder.png"
		straightenUVBorderItem;
   menuItem -optionBox 1 
       -annotation (uiRes("m_texturePanelMenus.kStraightenUVBorderOptionsAnnot")) 
       -c "performPolyStraightenUV 1" -ecr false
       -i "polyStraightenUVBorder.png"
		($prefix+"straightenUVOptionItem");

	////////////////////////////////////////////////////////////////
	menuItem -divider true;	

	menuItem -label (uiRes("m_texturePanelMenus.kOptimizeUVs"))   -ecr true
		-version "2015"
		-i "polyRelaxUVShell.png"
		-annotation (uiRes("m_texturePanelMenus.kOptimzeUVsAnnot")) 
		-c	 "OptimzeUVs" 
		optimzeUVsItem;

	menuItem -optionBox 1 -i "polyRelaxUVShell.png" 
		-annotation (uiRes("m_texturePanelMenus.kOptimizeUVsOptionsAnnot"))  
		-ecr false 
		-c "OptimzeUVsOptions" 
		($prefix+"optimzeUVsOptionItem");

	menuItem -label (uiRes("m_texturePanelMenus.kUnfoldUVs")) 
		-version "2015"
		-annotation (uiRes("m_texturePanelMenus.kUnfoldUVsAnnot")) 
		-echoCommand true
		-dragMenuCommand "performUnfold 2"
		-c "performUnfold 0" 
		-i "textureEditorUnfoldUVsLarge.png"
		unfoldUVItem;
	menuItem -optionBox true
		-annotation (uiRes("m_texturePanelMenus.kUnfoldUVsOptionsAnnot")) 
		-c "performUnfold 1"
		-i "textureEditorUnfoldUVsLarge.png"
		unfoldUVOptItem;

    menuItem -label (uiRes("m_texturePanelMenus.kLayoutUVs")) 
         -annotation (uiRes("m_texturePanelMenus.kLayoutUVsAnnot")) 
         -c "performPolyLayoutUV 0" -i "polyLayoutUV.png" 
		 layoutUVItem;
    menuItem -optionBox 1
         -annotation (uiRes("m_texturePanelMenus.kLayoutUVsOptionsAnnot")) 
         -c "performPolyLayoutUV 1" -ecr false -i "polyLayoutUV.png"
		($prefix+"layoutUVOptionItem");

	////////////////////////////////////////////////////////////////
	menuItem -divider true;
	menuItem -label (uiRes("m_texturePanelMenus.kUnpinAllUVs"))  -ecr true
		-version "2016"
		-annotation (uiRes("m_texturePanelMenus.kUnpinAllUVsAnnot")) 
		-c	 "if(`selectMode -q -component`){polyPinUV -op 2 `ls -hilite`;}else{polyPinUV -op 2;}" 
		unpinAllUVsItem;

	menuItem -label (uiRes("m_texturePanelMenus.kInvertPinUVs"))  -ecr true
		-version "2016"
		-annotation (uiRes("m_texturePanelMenus.kInvertPinUVsAnnot")) 
		-c	 "if(`selectMode -q -component`){polyPinUV -op 3 `ls -hilite`;}else{polyPinUV -op 3;}" 
		InvertPinUVsItem;

	menuItem -label (uiRes("m_texturePanelMenus.kPinSelectionUVs"))  -ecr true
		-version "2016"
		-annotation (uiRes("m_texturePanelMenus.kPinSelectionUVsAnnot")) 
		-c	"if(`selectMode -q -component`){ConvertSelectionToUVs;performPolyPinSelectionUVOptions 0;}" 
		PinSelectionUVsItem;
	menuItem -optionBox 1 
        -annotation (uiRes("m_texturePanelMenus.kPinSelectionOptionsAnnot")) 
		-c	"if(`selectMode -q -component`){ConvertSelectionToUVs;performPolyPinSelectionUVOptions 1;}" -ecr false;

	menuItem -label (uiRes("m_texturePanelMenus.kUnpinSelectionUVs"))  -ecr true
		-version "2016"
		-annotation (uiRes("m_texturePanelMenus.kUnpinSelectionUVsAnnot")) 
		-c	"if(`selectMode -q -component`){ConvertSelectionToUVs;polyPinUV -op 1;}" 
		UnpinSelectionUVsItem;

	////////////////////////////////////////////////////////////////
	menuItem -divider true;

	menuItem -label (uiRes("m_texturePanelMenus.kCutUVs"))   -ecr true -i "polyMapCut.png"
		-annotation (uiRes("m_texturePanelMenus.kCutUVsAnnot")) 
		-c "polyPerformAction polyMapCut e 0" ($prefix+"cutTextureItem");

	menuItem -label (uiRes("m_texturePanelMenus.kSplitUVs"))   -ecr true -i "polySplitUVs.png"
		-annotation (uiRes("m_texturePanelMenus.kSplitUVsAnnot")) 
		-c "polySplitTextureUV";

	menuItem -version "2015"
		-label (uiRes("m_texturePanelMenus.kCreateShell"))
		 -ecr true -i "polySplitUVs.png"
		-annotation (getRunTimeCommandAnnotation ("CreateUVShellAlongBorder"))
		-c "CreateUVShellAlongBorder";

	menuItem -label (uiRes("m_texturePanelMenus.kSewUVs"))   -ecr true -i "polyMapSew.png"
		-annotation (uiRes("m_texturePanelMenus.kSewUVsAnnot")) 
		-c "polyPerformAction polyMapSew e 0" ($prefix+"sewTextureItem");

    menuItem -label (uiRes("m_texturePanelMenus.kMoveAndSewUVs")) 
        -annotation (uiRes("m_texturePanelMenus.kMoveAndSewAnnot")) 
        -c "performPolyMapSewMove 0" -i "polyMoveSew.png"
		($prefix+"moveSewTextureItem");
    menuItem -optionBox 1
        -annotation (uiRes("m_texturePanelMenus.kMoveAndSewOptionsAnnot")) 
        -c "performPolyMapSewMove 1" -ecr false -i "polyMoveSew.png";

    menuItem -label (uiRes("m_texturePanelMenus.kMergeUVs")) 
        -annotation (uiRes("m_texturePanelMenus.kMergeUVsAnnot")) 
        -c "performPolyMergeUV 0" -i "polyMergeUV.png" 
		($prefix+"mergeUVTextureItem");

    menuItem -optionBox 1 
        -annotation (uiRes("m_texturePanelMenus.kMergeUVsOptionsAnnot")) 
        -c "performPolyMergeUV 1" -ecr false -i "polyMergeUV.png" ;

    menuItem -label (uiRes("m_texturePanelMenus.kDeleteUVs"))   -ecr true -i "polyMapDel.png"
        -annotation (uiRes("m_texturePanelMenus.kDeleteUVsAnnot")) 
        -c "DeleteUVs" 
		($prefix+"delUVsTextureItem");

	////////////////////////////////////////////////////////////////
	menuItem -divider true;

	menuItem -label (uiRes("m_texturePanelMenus.kUVSnapshot")) 
		-annotation (uiRes("m_texturePanelMenus.kUVSnapshotAnnot")) 
		-c "performUVSnapshot" -i "polyUVSnapshot.png";

    setParent -m ..;
}

global proc textureWindowBuildEditSubdivMenu(string $parent, string $editor, 
										 string $editorCmd, int $menuBar)
//
// Description:
//		Edit Subdiv menu
// Arguments:
//
// Returns:
//
//
{
	global string $gTextureEditorMenubarPrefix;

	setParent -m $parent;

	// Add a prefix to have a different name in the menuBar from the popup menu
	string $prefix="";
	if ($menuBar == 1) {
		$prefix = ($gTextureEditorMenubarPrefix + $editor);
	} 
	else {
		$prefix = $editor;
	}

        menuItem -label (uiRes("m_texturePanelMenus.kSubdivCutUVEdges"))   -ecr true -i "polyMapCut.png"
            -annotation (uiRes("m_texturePanelMenus.kSubdivCutUVEdgesAnnot")) 
            -c "SubdCutUVs"
            subdivCutTextureItem;

        menuItem -label (uiRes("m_texturePanelMenus.kSubdivLayout")) 
            -annotation (uiRes("m_texturePanelMenus.kSubdivLayoutAnnot")) 
            -c "performSubdLayoutUV 0" -i "polyLayoutUV.png";
        menuItem -optionBox 1
            -annotation (uiRes("m_texturePanelMenus.kSubdivLayoutOptionsAnnot")) 
            -c "performSubdLayoutUV 1" -ecr false -i "polyLayoutUV.png";

        menuItem -label (uiRes("m_texturePanelMenus.kSubdivMoveandSewUVEdges")) 
            -annotation (uiRes("m_texturePanelMenus.kSubdivMoveandSewUVEdgesAnnot")) 
            -c "performSubdMapSewMove 0" -i "polyMoveSew.png";
        menuItem -optionBox 1
            -annotation (uiRes("m_texturePanelMenus.kSubdivMoveandSewUVEdgesOptionsAnnot")) 
            -c "performSubdMapSewMove 1" -ecr false -i "polyMoveSew.png";
 
	////////////////////////////////////////////////////////////////
	menuItem -divider true;

	menuItem -label (uiRes("m_texturePanelMenus.kSubdivUVSnapshot")) 
		-annotation (uiRes("m_texturePanelMenus.kSubdivUVSnapshotAnnot")) 
		-c "performUVSnapshot" -i "polyUVSnapshot.png";

    setParent -m ..;
}

/*
global proc textureWindowBuildEditNurbsMenu(string $parent, string $editor, 
										 string $editorCmd, int $menuBar)
//
// Description:
//		Edit Nurbs menu
// Arguments:
//
// Returns:
//
//
{
	global string $gTextureEditorMenubarPrefix;

	setParent -m $parent;

	// Add a prefix to have a different name in the menuBar from the popup menu
	string $prefix="";
	if ($menuBar == 1) {
		$prefix = ($gTextureEditorMenubarPrefix + $editor);
	} 
	else {
		$prefix = $editor;
	}

        menuItem -l "Edit UV Mode"  -ecr true 
			-checkBox (`queryNurbsEditUVMode`)
            -ann (uiRes("m_texturePanelMenus.kEditNurbsUVModeAnn"))
            -c "nurbsToggleEditUVMode"
            ($prefix+"NurbsEditUVModeItem");

    setParent -m ..;
}
*/

global proc textureWindowBuildSelectMenu(string $parent, string $editor, 
										 string $editorCmd, int $menuBar)
//
// Description:
//		Selection menu
// Arguments:
//
// Returns:
//
//
{
	global string $gTextureEditorMenubarPrefix;

	setParent -m $parent;

	// Add a prefix to have a different name in the menuBar from the popup menu
	string $prefix="";
	if ($menuBar == 1) {
		$prefix = ($gTextureEditorMenubarPrefix + $editor);
	} 
	else {
		$prefix = $editor;
	}

	string $updateEditor = ( "txtWndUpdateEditor(\"" + $editor + "\", \"" +
							 $editorCmd + "\", \"null\", 101);" );

	menuItem -label (uiRes("m_texturePanelMenus.kSelectContainedFaces")) 
			 -c ($editorCmd+" -e -selectInternalFaces "+$editor)
			 ($prefix+"selContainedFacesItem");

	menuItem -label (uiRes("m_texturePanelMenus.kSelectConnectedFaces")) 
			 -c ($editorCmd+" -e -selectRelatedFaces "+$editor)
			 ($prefix+"selConnectedFacesItem");

	menuItem -label (uiRes("m_texturePanelMenus.kSelectShell")) 
		-c ("SelectUVShell")
		-annotation (getRunTimeCommandAnnotation ("SelectUVShell"))
		($prefix+"selShellItem");

	menuItem -label (uiRes("m_texturePanelMenus.kSelectShellBorder")) 
		-c ("SelectUVBorder")
		-annotation (getRunTimeCommandAnnotation ("SelectUVBorder"))
		($prefix+"selShellBorder");

	global string $gPolyshortestEdgePath;
	menuItem -label (uiRes("m_texturePanelMenus.kSelectShortestEdge")) 
		-command ( "setToolTo " + $gPolyshortestEdgePath + "; " +
						$updateEditor)
		-annotation (getRunTimeCommandAnnotation ("SelectShortestEdge"))
		($prefix+"selShortEdge");

	menuItem -divider true;

	menuItem -label (uiRes("m_texturePanelMenus.kConvertSelectionToFaces"))  
        -c ("PolySelectConvert 1")
		($prefix+"selConvertToFaces");

	menuItem -label (uiRes("m_texturePanelMenus.kConvertSelectionToEdges")) 
        -c ("PolySelectConvert 2")
		($prefix+"selConvertToEdges");

	menuItem -version "2015"
		-label (uiRes("m_texturePanelMenus.kConvertSelectionToEdgePerimeter")) 
        -c ("ConvertSelectionToEdgePerimeter")
		($prefix+"selConvertToEdgePerimeter");

	menuItem -label (uiRes("m_texturePanelMenus.kConvertSelectionToVertices")) 
        -c ("PolySelectConvert 3")
		($prefix+"selConvertToVertices");

	menuItem -version "2015"
		-label (uiRes("m_texturePanelMenus.kConvertSelectionToVertexPerimeter")) 
        -c ("ConvertSelectionToVertexPerimeter")
		($prefix+"selConvertToVertexPerimeter");

	menuItem -label (uiRes("m_texturePanelMenus.kConvertSelectionToUVs"))  
        -c ("PolySelectConvert 4")
		($prefix+"selConvertToUVs");

	menuItem -version "2015"
		-label (uiRes("m_texturePanelMenus.kConvertSelectionToUVPerimeter")) 
        -c ("ConvertSelectionToUVPerimeter")
		($prefix+"selConvertToUVPerimeter");

	menuItem -label (uiRes("m_texturePanelMenus.kConvertSelectionToUVEdgeLoop"))  
        -c ("polySelectEdges edgeUVLoopOrBorder")
		($prefix+"selConvertToUVEdgeLoop");

    setParent -m ..;
}

global proc textureWindowBuildToolMenu(string $parent, string $editor, 
										 string $editorCmd, int $menuBar)
//
// Description:
//		Tool menu
// Arguments:
//
// Returns:
//
//
{
	global string $gTextureEditorMenubarPrefix;

	setParent -m $parent;
	
	string $whichCtx = `currentCtx`;

	// Add a prefix to have a different name in the menuBar from the popup menu
	string $prefix="";
	if ($menuBar == 1) {
		$prefix = ($gTextureEditorMenubarPrefix + $editor);
	} 
	else {
		$prefix = $editor;
	}

	// callback for updating the state of all editor controls
	//
	string $updateEditor = ( "txtWndUpdateEditor(\"" + $editor + "\", \"" +
							 $editorCmd + "\", \"null\", 101);" );

	menuItem -label (uiRes("m_texturePanelMenus.kUVLatticeTool")) 
			 -command ( "setToolTo texLatticeDeformSuperContext;" +
						$updateEditor)
			 -annotation (uiRes("m_texturePanelMenus.kUVLatticeToolAnnot")) 
			 ($prefix+"LatticeTool");

	menuItem 
	        -optionBox true
			-c "performTextureLatticeOptions true"
			textureViewLatticeOptionItem;

	menuItem -label (uiRes("m_texturePanelMenus.kUVSmudgeTool")) 
			 -command ( "setToolTo texSmudgeUVSuperContext;" +
						$updateEditor)
			 -annotation (uiRes("m_texturePanelMenus.kUVSmudgeToolAnnot")) 
			($prefix+"SmudgeTool");

	menuItem 
	        -optionBox true
			-c "performTextureSmudgeOptions true"
			textureViewSmudgeOptionItem;

	menuItem -label (uiRes("m_texturePanelMenus.kMoveShellTool")) 
			 -command ( "setToolTo texMoveUVShellSuperContext;" +
						$updateEditor)
			 -annotation (uiRes("m_texturePanelMenus.kMoveUVShellToolAnnot")) 
			($prefix+"ShellTool");

	menuItem -l (uiRes("m_texturePanelMenus.kMoveShellToolOption"))
			-optionBox true
			-c "performTextureMoveShellOptions true"
			($prefix+"ShellToolOption");

	menuItem -label (uiRes("m_texturePanelMenus.kTexSmoothTool")) 
			 -command ( "setToolTo texSmoothSuperContext;" +
						$updateEditor)
			 -annotation (uiRes("m_texturePanelMenus.kTexSmoothToolAnnot")) 
			($prefix+"SmoothTool");

	menuItem -l (uiRes("m_texturePanelMenus.kTexSmoothToolOption"))
			-optionBox true
			-c "performTextureSmoothOptions true"
			($prefix+"SmoothToolOption");

	menuItem -label (uiRes("m_texturePanelMenus.kTweakUVTool")) 
			 -version "2015"
			 -command ( "setToolTo texTweakSuperContext;" +
						$updateEditor)
			 -annotation (uiRes("m_texturePanelMenus.kTweakUVToolAnnot")) 
			($prefix+"TweakUVTool");

	menuItem -l (uiRes("m_texturePanelMenus.kTweakUVToolOption"))
			-optionBox true
			-c "performTweakUVOptions true"
			($prefix+"TweakUVToolOption");

	menuItem -divider true;

	if ( `pluginInfo -q -loaded Unfold3D` )
	{
		menuItem -label (uiRes("m_texturePanelMenus.kUnfoldUVTool")) 
					-version "2016"
					-command ( "Unfold3DContext -e -unfold -i1 \"UV_Unfold_BrushLarge.png\" texUnfoldUVContext;" +
							"setToolTo texUnfoldUVContext;" +
							$updateEditor)
					-annotation (uiRes("m_texturePanelMenus.kUnfoldUVToolAnnot")) 
				($prefix+"UnfoldUVTool");

		menuItem -label (uiRes("m_texturePanelMenus.kUnfoldUVToolOption"))
				-optionBox true
					-command ( "Unfold3DContext -e -unfold -i1 \"UV_Unfold_BrushLarge.png\" texUnfoldUVContext;" +
							"setToolTo texUnfoldUVContext;" +
							"toolPropertyWindow;" +
							$updateEditor)
				($prefix+"UnfoldUVToolOption");

		menuItem -label (uiRes("m_texturePanelMenus.kOptimizeUVTool")) 
					-version "2016"
					-command ( "Unfold3DContext -e -optimize -i1 \"UV_Optimize_BrushLarge.png\" texUnfoldUVContext;" +
							"setToolTo texUnfoldUVContext;" +
							$updateEditor)
					-annotation (uiRes("m_texturePanelMenus.kOptimizeUVToolAnnot")) 
				($prefix+"OptimizeUVTool");

		menuItem -label (uiRes("m_texturePanelMenus.kOptimizeUVToolOption"))
				-optionBox true
					-command ( "Unfold3DContext -e -optimize -i1 \"UV_Optimize_BrushLarge.png\" texUnfoldUVContext;" +
							"setToolTo texUnfoldUVContext;" +
							"toolPropertyWindow;" +
							$updateEditor)
				($prefix+"OptimizeUVToolOption");
	}

	menuItem -label (uiRes("m_texturePanelMenus.kCutUVTool")) 
			 -version "2016"
			 -command ( "setToolTo texCutUVContext;" +
						"texCutContext -edit -mode Cut -i1 \"UV_Cut_ToolLarge.png\" texCutUVContext; " + 
                        $updateEditor)
			 -annotation (uiRes("m_texturePanelMenus.kCutUVToolAnnot")) 
			($prefix+"CutUVTool");

	menuItem -label (uiRes("m_texturePanelMenus.kCutUVToolOption"))
			-optionBox true
			 -command ( "setToolTo texCutUVContext;" +
						"texCutContext -edit -mode Cut -i1 \"UV_Cut_ToolLarge.png\" texCutUVContext; " + 
                        "toolPropertyWindow;" +
						$updateEditor)
			($prefix+"CutUVToolOption");
    
    menuItem -label (uiRes("m_texturePanelMenus.kSewUVTool")) 
			 -version "2016"
			 -command ( "setToolTo texCutUVContext;" +
						"texCutContext -edit -mode Sew -i1 \"UV_Sew_ToolLarge.png\" texCutUVContext; " + 
                        $updateEditor)
			 -annotation (uiRes("m_texturePanelMenus.kSewUVToolAnnot")) 
			($prefix+"SewUVTool");
            
	menuItem -label (uiRes("m_texturePanelMenus.kSewUVToolOption"))
			-optionBox true
			 -command ( "setToolTo texCutUVContext;" +
						"texCutContext -edit -mode Sew -i1 \"UV_Sew_ToolLarge.png\" texCutUVContext; " + 
                        "toolPropertyWindow;" +
						$updateEditor)
			($prefix+"SewUVToolOption");

	
	menuItem -label (uiRes("m_texturePanelMenus.kGrabUVTool")) 
			 -version "2016"
			 -command ( "texSculptCacheContext -e -m Grab -i1 \"UV_Grab_BrushLarge.png\" texSculptCacheContextObj; " + 
                        "setToolTo texSculptCacheContextObj;" +
						$updateEditor)
			 -annotation (uiRes("m_texturePanelMenus.kGrabUVToolAnnot")) 
			($prefix+"GrabUVTool");

	menuItem -label (uiRes("m_texturePanelMenus.kGrabUVToolOption"))
			-optionBox true
			 -command ( "texSculptCacheContext -e -m Grab -i1 \"UV_Grab_BrushLarge.png\" texSculptCacheContextObj; " + 
                        "setToolTo texSculptCacheContextObj;" +
						"toolPropertyWindow;" +
						$updateEditor)
			($prefix+"GrabUVToolOption");

	menuItem -label (uiRes("m_texturePanelMenus.kPinchUVTool")) 
			 -version "2016"
			 -command ( "texSculptCacheContext -e -m Pinch -i1 \"UV_Pinch_ToolLarge.png\" texSculptCacheContextObj; " + 
                        "setToolTo texSculptCacheContextObj;" +
						$updateEditor)
			 -annotation (uiRes("m_texturePanelMenus.kPinchUVToolAnnot")) 
			($prefix+"PinchUVTool");

	menuItem -label (uiRes("m_texturePanelMenus.kPinchUVToolOption"))
			-optionBox true
			 -command ( "texSculptCacheContext -e -m Pinch -i1 \"UV_Pinch_ToolLarge.png\" texSculptCacheContextObj; " + 
                        "setToolTo texSculptCacheContextObj;" +
						"toolPropertyWindow;" +
						$updateEditor)
			($prefix+"PinchUVToolOption");
            
	menuItem -label (uiRes("m_texturePanelMenus.kSmearUVTool")) 
			 -version "2016"
			 -command ( "texSculptCacheContext -e -m Smear -i1 \"UV_Smear_ToolLarge.png\" texSculptCacheContextObj; " + 
                        "setToolTo texSculptCacheContextObj;" +
						$updateEditor)
			 -annotation (uiRes("m_texturePanelMenus.kSmearUVToolAnnot")) 
			($prefix+"SmearUVTool");

	menuItem -label (uiRes("m_texturePanelMenus.kSmearUVToolOption"))
			-optionBox true
			 -command ( "texSculptCacheContext -e -m Smear -i1 \"UV_Smear_ToolLarge.png\" texSculptCacheContextObj; " + 
                        "setToolTo texSculptCacheContextObj;" +
						"toolPropertyWindow;" +
						$updateEditor)
			($prefix+"SmearUVToolOption"); 

	menuItem -label (uiRes("m_texturePanelMenus.kPinUVTool")) 
			 -version "2016"
			 -command ( "texSculptCacheContext -e -m Freeze -i1 \"UV_Freeze_ToolLarge.png\" texSculptCacheContextObj; " + 
                        "setToolTo texSculptCacheContextObj;" +
						$updateEditor)
			 -annotation (uiRes("m_texturePanelMenus.kPinUVToolAnnot")) 
			($prefix+"PinUVTool");

	menuItem -label (uiRes("m_texturePanelMenus.kPinUVToolOption"))
			-optionBox true
			 -command ( "texSculptCacheContext -e -m Freeze -i1 \"UV_Freeze_ToolLarge.png\" texSculptCacheContextObj; " + 
                        "setToolTo texSculptCacheContextObj;" +
						"toolPropertyWindow;" +
						$updateEditor)
			($prefix+"PinUVToolOption");
            
    setParent -m ..;
}

global proc textureWindowBuildTexturesMenu(string $parent, string $editor, 
										 string $editorCmd, int $menuBar)
//
// Description:
//		Textures menu
// Arguments:
//
// Returns:
//
//
{
	global string $gTextureEditorMenubarPrefix;
	
	// Add a prefix to have a different name in the menuBar from the popup menu
	string $prefix="";
	if ($menuBar == 1) {
		$prefix = ($gTextureEditorMenubarPrefix + $editor);
	} 
	else {
		$prefix = $editor;
	}
	
	// Clear out this menu first
	menu -edit -deleteAllItems $parent;
	setParent -menu $parent;

	// Build 1 menu item for each image
	// currently cached.
	int $numImages 		= `textureWindow -query -numberOfImages $editor`;
	int $selectedImg 	= `textureWindow -query -imageNumber $editor`;
	string $menuNames[] = `textureWindow -query -imageNames $editor`;

	int $markIndex = 0;
	if (`textureWindow -query -useFaceGroup $editor`) {
		$markIndex = textureWindowFindActiveShader($editor);
		$markIndex--;
	} else {
		$markIndex = $selectedImg;
	}

	// If there are no UV sets to display, then put an empty menu item
	if( $numImages == 0 ) {
		menuItem 
			-enableCommandRepeat false 
			-enable false 
			-label (uiRes("m_texturePanelMenus.kImageNoObjectSelected"));		
	}

	int $i;
	for ($i=0; $i<$numImages; $i++)
	{
		// Mark the proper image on the list as selected.
		int $checkBox = 0;
		if ( $i == $markIndex ) {
			$checkBox = 1;
		} 

		// Command will set the current image number
		menuItem 
			-enableCommandRepeat false 
			-label $menuNames[$i]
			-checkBox $checkBox 
			-command ("textureWindowSelectImage " + $i + " " + $editor )
			($prefix+$parent+$i);	
	}
	setParent -menu ..;
	
}

global proc textureWindowBuildUVSetsMenu(string $parent, string $editor, 
										 string $editorCmd, int $menuBar)
//
// Description:
//		UV Sets menu
// Arguments:
//
// Returns:
//
//
{
	global string $gTextureEditorMenubarPrefix;
	
	// Add a prefix to have a different name in the menuBar from the popup menu
	string $prefix="";
	if ($menuBar == 1) {
		$prefix = ($gTextureEditorMenubarPrefix + $editor);
	} 
	else {
		$prefix = $editor;
	}
	
	// Clear out this menu first
	menu -edit -deleteAllItems $parent;
	setParent -menu $parent;

	string $menuNames[] = `textureWindow -query -uvSets $editor`;
	int $numUVSets = size($menuNames);
	int $i;

	// If there are no UV sets to display, then put an empty menu item
	if( $numUVSets == 0 ) {
		menuItem 
			-enableCommandRepeat false 
			-enable false 
			-label (uiRes("m_texturePanelMenus.kUVSetNoObjectSelected"));
		setParent -menu ..;
		return;
	}

	string $selectObj[] = `ls -objectsOnly -selection`;
	int $numObjects = size($selectObj);
	
	for ($i=0; $i<$numUVSets; $i++)	
	{
		// $menuNames[$i] comes in the format
		// "|polySurface3|polySurfaceShape3 | map3"
		// So tokenize it on the space to get the map set name
		string $buf[];
		tokenize $menuNames[$i] " " $buf;
		string $obj = $buf[0];
		string $uvSet = $buf[size($buf) - 1];

		string $fullMenuItemName;
		// Create a menu item for each uv set
		string $currUVSet[] = `polyUVSet -pi 1 -query -currentUVSet $obj`;
		int $isCurrent = ($currUVSet[0] == $uvSet);

		// if it is a per-instance set, display the set related to the
		// selected object
		//
		string $perInstanceUVSet[] = `polyUVSet -uvSet $uvSet -q -pi $obj`;
		if (size($perInstanceUVSet[0]) > 0) {
			$uvSet = $perInstanceUVSet[0];
		}
		string $name = ($obj+" | "+$uvSet);
		if ($isCurrent) {
			
			// Put a check mark on the menu item with the current uvset
			$fullMenuItemName = 
				`menuItem 
					-enableCommandRepeat false 
					-label $name
					-checkBox true
					($prefix+$parent+$i)`;		

		} else {
			$fullMenuItemName = 
				`menuItem 
					-enableCommandRepeat false 
					-label $name
					($prefix+$parent+$i)`;
		}
	
		// Display a shorter name in the menu item if there's
		// only one object selected
		if( `menuItem -exists $fullMenuItemName` && ($numObjects == 1) ) {
			menuItem -edit -label $uvSet $fullMenuItemName;
		}
	
		// Attach a command to this menu item
		if( size($fullMenuItemName) > 0 ) {
			// This part of the cmd will switch the current uv set
			string $cmd = ("textureWindow -edit -setUvSet " + $i + " " 
							+ $editor + ";");
			menuItem -edit
				-command $cmd
				$fullMenuItemName;
		}
	}

	setParent -menu ..;
}

global proc textureWindowBuildImageMenu(string $parent, string $editor, 
										string $editorCmd, int $menuBar)
//
// Description:
//		Image menu
// Arguments:
//
// Returns:
//
//
{
	global string $gTextureEditorMenubarPrefix;

	setParent -m $parent;

	// Add a prefix to have a different name in the menuBar from the popup menu
	string $prefix="";
	if ($menuBar == 1) {
		$prefix = ($gTextureEditorMenubarPrefix + $editor);
	} 
	else {
		$prefix = $editor;
	}

	// callback for updating the state of all editor controls
	//
	string $updateEditor = ( "txtWndUpdateEditor(\"" + $editor + "\", \"" +
							 $editorCmd + "\", \"null\", 101);" );

	//
	// Make the Image menu
	//
	menuItem -label (uiRes("m_texturePanelMenus.kDisplayImage")) 
		-cb 1
		-c ("textureWindowToggleTextureImage (\"" + 
			$editor+ "\",\"" + 
			$editorCmd+ "\");" +
			$updateEditor)
		($prefix+"ImageDisplay");

	menuItem -label (uiRes("m_texturePanelMenus.kDimImage")) 
		-cb 1
		-c ("textureWindowToggleImageDimming (\"" + 
			$editor+ "\",\"" + 
			$editorCmd+ "\");" +
			$updateEditor)
		($prefix+"DimImage");

	menuItem -label (uiRes("m_texturePanelMenus.kDisplayUnfiltered")) 
		-cb 0
		-c ("textureWindowToggleUnfiltered (\"" + 
			$editor + "\",\"" + 
			$editorCmd + "\" );" +
			$updateEditor)
		($prefix+"ImageUnfiltered");

	menuItem -label (uiRes("m_texturePanelMenus.kShadeUVs"))
		-cb 1
		-c ("textureWindowToggleMapOverlay (\"" + 
			$editor+ "\",\"" + 
			$editorCmd+ "\");" +
			$updateEditor)
		($prefix+"MapOverlay");
		
	menuItem 
	    -optionBox true
		-c "performOverlayUVOptions true"
		($prefix+"MapOverlayOptions");
		
		
	////////////////////////////////////////////////////////////////
	menuItem -divider true;

	menuItem -label (uiRes("m_texturePanelMenus.kDisplayRGBChannels")) 
		-c ("textureWindow -e -displayStyle \"color\" " + $editor)
		($prefix+"ImageRGB");

	menuItem -label (uiRes("m_texturePanelMenus.kDisplayAlphaChannel")) 
		-c ("textureWindow -e -displayStyle \"mask\" " + $editor)
		($prefix+"ImageAlpha");

	////////////////////////////////////////////////////////////////
	menuItem -divider true;
		
	menuItem -label (uiRes("m_texturePanelMenus.kPixelSnap")) 
		-cb 0
		-c ("SnapToPixel; " + $updateEditor)
		($prefix+"ImageSnap");
		
	menuItem 
	    -optionBox true
		-c "performPixelSnapOptions true"
		($prefix+"PixelSnapOptions");

	menuItem -label (uiRes("m_texturePanelMenus.kImageRange")) 
		($prefix+"ImageRange");
	menuItem 
	    -optionBox true
		-c "performTextureViewImageRangeOptions 1"
		textureViewImageRangeItem;
		
	menuItem -label (uiRes("m_texturePanelMenus.kUseImageRatio")) 
		-cb 0
		-c ("textureWindowToggleRatio (\"" + 
			$editor + "\",\"" 
			+ $editorCmd + "\");" +
			$updateEditor)
		($prefix+"ImageRatio");
		
	menuItem -label (uiRes("m_texturePanelMenus.kUVTextureEditorBaking"))
			 -checkBox 1
			 -command ( "textureWindowToggleEditorImage (\"" + 
						$editor+ "\");" +
						$updateEditor)
			 -annotation (uiRes("m_texturePanelMenus.kUVTextureEditorBakingAnnot")) 
			($prefix+"DisplayEditorImage");
	menuItem 
	    -optionBox true
		-c "performTextureViewBakeTextureOptions true"
		textureViewBakeTextureItem;

	////////////////////////////////////////////////////////////////
	menuItem -divider true;

	menuItem -label (uiRes("m_texturePanelMenus.kCreatePSDNetwork")) 
		-c "photoShopPaintTex"
		textureViewCreatePSDTextures ;
		
	menuItem -label (uiRes("m_texturePanelMenus.kUpdatePSDNetworks")) 
		-c "psdUpdateTextures"
		textureViewUpdatePSDTextures ;
		
	setParent -menu ..;
}

// Global procedure to get a command string for later execution. Changing select type to $toType.
// The valid value for $toType is:
// 1 : Face
// 2 : Edge
// 3 : Vertex
// 4 : UV
// 5 : Shell
// This mapping matches that used by textureWindowSelectConvert().
global proc string textureWindowChangeSelectTypeString(int $toType)
{
    string $cmd;
	if (!`isTrue "SubdivUIExists"`)
	{
		if (`selectMode -q -object`)
		{
			if ($toType == 1)
			{
				$cmd = ("changeSelectMode -component; setComponentPickMask \"Facet\" true; " +
							"selectType -ocm -alc false; " +
							"selectType -ocm -facet true; " +
							"selectType -sf false -se false -suv false -cv false; ");
			}
			else if ($toType == 2)
			{
				$cmd = "changeSelectMode -component; " +
							"selectType -isoparm 0 -surfaceEdge 1 -polymeshEdge 1 -subdivMeshEdge 1 -springComponent 1; " +
							"selectType -ocm -alc false; " +
							"selectType -ocm -edge true; " +
							"selectType -sf false -se false -suv false -cv false; ";
			}
			else if ($toType == 4)
			{
				$cmd = ("changeSelectMode -component; " +
							"selectType -ocm -alc false; selectType -alc false; " +
							"selectType -puv true; " +
							"selectType -suv true; ");
			}
			else if ($toType == 3)
			{
				$cmd = ("changeSelectMode -component; setComponentPickMask \"Point\" true; " +
							"selectType -ocm -alc false; " +
							"selectType -ocm -vertex true; " +
							"selectType -sf false -se false -suv false -cv false; ");
			}
			else if ($toType == 5)
			{
				$cmd = ("changeSelectMode -component; setComponentPickMask \"Facet\" true; " +
							"selectType -ocm -alc false; " +
							"selectType -msh true; " +
							"selectType -sf false -se false -suv false -cv false; ");
            }
		} 
		else
		{
			if ($toType == 1)
			{
				$cmd = ("changeSelectMode -component; setComponentPickMask \"Facet\" true; " +
							"selectType -ocm -alc false; " +
							"selectType -facet true; " +
							"selectType -sf false -se false -suv false -cv false; ");
			}
			else if ($toType == 2)
			{
				$cmd = ("changeSelectMode -component; " + 
							"selectType -isoparm 0 -surfaceEdge 1 -polymeshEdge 1 -subdivMeshEdge 1 -springComponent 1; " +
							"selectType -ocm -alc false; " +
							"selectType -edge true; " +
							"selectType -sf false -se false -suv false -cv false; ");
			}
			else if ($toType ==4)
			{
				$cmd = ("changeSelectMode -component; " +
							"selectType -alc false; " +
							"selectType -puv true; " +
							"selectType -suv true; ");
			}
			else if ($toType == 3)
			{
				$cmd = ("changeSelectMode -component; setComponentPickMask \"Point\" true; " +
							"selectType -ocm -alc false; " +
							"selectType -vertex true; " +
							"selectType -sf false -se false -suv false -cv false; ");
			}
			else if ($toType == 5)
			{
				$cmd = ("changeSelectMode -component; setComponentPickMask \"Facet\" true; " +
							"selectType -ocm -alc false; " +
							"selectType -msh true; " +
							"selectType -sf false -se false -suv false -cv false; ");
			}
		}
	}
	else
	{
		if (`selectMode -q -object`)
		{
			if ($toType == 1)
			{
				$cmd = ("changeSelectMode -component; setComponentPickMask \"Facet\" true; " +
							"selectType -ocm -alc false; " +
							"selectType -ocm -facet true; " +
							"selectType -sme false -smu false -smp false; " +
							"selectType -sf false -se false -suv false -cv false; ");
			}
			else if ($toType == 2)
			{
				$cmd = ("changeSelectMode -component; setComponentPickMask \"Line\" true; " +
							"selectType -ocm -alc false; " +
							"selectType -ocm -edge true; " + 
							"selectType -smf false -smu false -smp false; " +
							"selectType -sf false -se false -suv false -cv false; ");
			}
			else if ($toType == 4)
			{
				$cmd = ("changeSelectMode -component; " +
							"selectType -ocm -alc false; selectType -alc false; " +
							"selectType -puv true; " +
							"selectType -smu true; " + 
							"selectType -suv true; ");
			}
			else if ($toType == 3)
			{
				$cmd = ("changeSelectMode -component; setComponentPickMask \"Point\" true; " +
							"selectType -ocm -alc false; " +
							"selectType -ocm -vertex true; " +
							"selectType -sf false -se false -suv false -cv false; ");
			}
			else if ($toType == 5)
			{
				$cmd = ("changeSelectMode -component; setComponentPickMask \"Facet\" true; " +
							"selectType -ocm -alc false; " +
							"selectType -msh true; " +
							"selectType -sme false -smu false -smp false; " +
							"selectType -sf false -se false -suv false -cv false; ");
			}			
		} 
		else
		{
			if ($toType == 1)
			{
				$cmd = ("changeSelectMode -component; setComponentPickMask \"Facet\" true; " +
							"selectType -ocm -alc false; " +
							"selectType -facet true; " +
							"selectType -sme false -smu false -smp false; " +
							"selectType -sf false -se false -suv false -cv false; ");
			}
			else if ($toType == 2)
			{
				$cmd = ("changeSelectMode -component; setComponentPickMask \"Line\" true; " + 
							"selectType -ocm -alc false; " +
							"selectType -edge true; " +
							"selectType -smf false -smu false -smp false; " +
							"selectType -sf false -se false -suv false -cv false; ");
			}
			else if ($toType == 4)
			{
				$cmd = ("changeSelectMode -component; " +
							"selectType -alc false; " +
							"selectType -puv true; " +
							"selectType -smu true; " +
							"selectType -suv true; ");
			}
			else if ($toType == 3)
			{
				$cmd = ("changeSelectMode -component; setComponentPickMask \"Point\" true; " +
							"selectType -ocm -alc false; " +
							"selectType -vertex true; " +
							"selectType -sf false -se false -suv false -cv false; ");
			}
			else if ($toType == 5)
			{
				$cmd = ("changeSelectMode -component; setComponentPickMask \"Facet\" true; " +
							"selectType -ocm -alc false; " +
							"selectType -msh true; " +
							"selectType -sme false -smu false -smp false; " +
							"selectType -sf false -se false -suv false -cv false; ");
			}
		}
	}
	return $cmd;
}

/////////////////////////////////////////////////////////////////////////////
//    Marking menu code
/////////////////////////////////////////////////////////////////////////////


global proc textureWindowCreatePopupRadialMenu( string $editor, string $editorCmd, int $popupType )
//
// Description:
//		Texture window popup marking menu creation. This part is solely the radial
//	component of the marking menu.
//
// Arguments:
//		$popupType - defines whether to create the Poly/SubD marking menu, the
//					NURBS marking menu, or the combined marking menu.
//
//					case 0: Poly / SubD marking menu
//					case 1: NURBS marking menu
//					case 2: Both
//
// Returns:
//
//
{
	// Record the popup type
	//
	global int $gTextureEditorPopupType;
	$gTextureEditorPopupType = $popupType;

	// Marking menu selection commands
	//
	string $selectCmd[8];
	$selectCmd[0] = textureWindowChangeSelectTypeString(1);
	$selectCmd[1] = textureWindowChangeSelectTypeString(2);
	$selectCmd[2] = textureWindowChangeSelectTypeString(4);
	$selectCmd[3] = textureWindowChangeSelectTypeString(3);
	$selectCmd[5] = textureWindowChangeSelectTypeString(5);

	// Marking menu directions
	//
	string $directions[8];
	$directions[0] = "S";
	$directions[1] = "N";
	$directions[2] = "E";
	$directions[3] = "W";
	$directions[4] = "NE";
	$directions[5] = "NW";
	$directions[6] = "SE";
	$directions[7] = "SW";

	// If we want to create Poly/SubD marking menu, or the combined Poly/SubD/NURBS
	// marking menu, then execute this code.
	//
	
	string $uv = (uiRes("m_texturePanelMenus.kUV"));
	string $editNURBSUVMode = (uiRes("m_texturePanelMenus.kEditNURBSUVMode"));
	if( $popupType == 0 || $popupType == 2 )
	{
		menuItem -label (uiRes("m_texturePanelMenus.kFace"))
			-rp ($directions[0])
			-c ($selectCmd[0])
			($editor+"Face");
		
		menuItem -label (uiRes("m_texturePanelMenus.kEdge"))
			-rp ($directions[1])
			-c ($selectCmd[1])
			($editor+"Edge");
		
		menuItem -label $uv 
			-rp ($directions[2])
			-c ($selectCmd[2])
			($editor+"UV");
		
		menuItem -label (uiRes("m_texturePanelMenus.kVertex"))
			-rp ($directions[3])
			-c ($selectCmd[3])
			($editor+"Vertex");

		menuItem -label (uiRes("m_texturePanelMenus.kShellComp"))
				-version "2015"
				-rp ($directions[5])
				-c ($selectCmd[5])
			($editor+"Shell");

		if( $popupType == 2 )
		{
			menuItem -label $editNURBSUVMode
				-checkBox (`queryNurbsEditUVMode`)
				-rp ($directions[4])
				-c "nurbsToggleEditUVMode"
				($editor+"EditNURBSUV");
		}
	}
	else if( $popupType == 1 )
	{
		// We want *only* the NURBS marking menu
		//
		menuItem -label $uv
			-rp ($directions[2])
			-c ($selectCmd[2])
			($editor+"UV");

		menuItem -label $editNURBSUVMode
			-checkBox (`queryNurbsEditUVMode`)
			-rp ($directions[4])
			-c "nurbsToggleEditUVMode"
			($editor+"EditNURBSUV");
	}
	else if( $popupType == 3)
	{
		string $currentContext = `currentCtx`;
		string $ctx = `contextInfo -c $currentContext`;
		texSculptCacheContextOptionsPopup($editor, $editorCmd);
	}
}

global proc textureWindowDeletePopupRadialMenu( string $editor )
{
	if( `menuItem -q -ex ($editor+"Face")` ) deleteUI ($editor+"Face");
	if( `menuItem -q -ex ($editor+"Edge")` ) deleteUI ($editor+"Edge");
	if( `menuItem -q -ex ($editor+"UV")` ) deleteUI ($editor+"UV");
	if( `menuItem -q -ex ($editor+"Vertex")` ) deleteUI ($editor+"Vertex");
	if( `menuItem -q -ex ($editor+"Shell")` ) deleteUI ($editor+"Shell");
	if( `menuItem -q -ex ($editor+"EditNURBSUV")` ) deleteUI ($editor+"EditNURBSUV");
	if( `menuItem -q -ex ($editor+"Invert")` ) deleteUI ($editor+"Invert");
	if( `menuItem -q -ex ($editor+"UVCutTool")` ) deleteUI ($editor+"UVCutTool");
	if( `menuItem -q -ex ($editor+"LastTool")` ) deleteUI ($editor+"LastTool");
	if( `menuItem -q -ex ($editor+"GrabUVTool")` ) deleteUI ($editor+"GrabUVTool");
	if( `menuItem -q -ex ($editor+"PinUVTool")` ) deleteUI ($editor+"PinUVTool");
	if( `menuItem -q -ex ($editor+"FalloffType")` ) deleteUI ($editor+"FalloffType");
	if( `menuItem -q -ex ($editor+"FalloffHybrid")` ) deleteUI ($editor+"FalloffHybrid");
	if( `menuItem -q -ex ($editor+"FalloffSurface")` ) deleteUI ($editor+"FalloffSurface");
	if( `menuItem -q -ex ($editor+"FalloffVolume")` ) deleteUI ($editor+"FalloffVolume");
}

global proc textureWindowCreatePopupMenubar( string $editor, string $editorCmd )
//
//	Description:
//		Create the popup version of the menubar. This is the popup menu that
//		appears below the marking menu that is a replica of the UV texture editor
//		menubar, except as a popup menu instead.
//
//		When adding a new menuitem to an existing menu, modify the
//		appropriate textureWindowBuildNAMEMenu. If adding a new menu
//		create a new textureWindowBuildNAMEMenu proc.
//
//		In either case, if the new menuItem is a checkbox, it should
//		call txtWndUpdateEditor when selected. See
//		textureWindowBuildViewMenu for examples.
//		In addition, code should be added to txtWndUpdateEditor to update
//		the state of all controls which provide an interface to the new
//		functionality. This is to ensure that all the controls are in
//		sync.
//
//		Keep in mind that there is also a textureWindowCreateMenubar proc. If
//		you wish your new menuItem to be in the popup, you must modify that
//		proc as well.
//
{
	string	$subName = `menuItem -label (uiRes("m_texturePanelMenus.kPolygons")) -aob true -sm 1 -to 1 ($editor+"EditMenu")`;
	textureWindowBuildEditMenu( $subName, $editor, $editorCmd, 0 );
	
	if (`isTrue "SubdivUIExists"`) {
		string	$subName = `menuItem -label (uiRes("m_texturePanelMenus.kSubdivs")) -aob true -sm 1 -to 1
		($editor+"EditSubdivMenu")`;
		textureWindowBuildEditSubdivMenu( $subName, $editor, $editorCmd, 0 );
	}

	// Disabling NURBS UV Menu - NURBS UVs are only partially implemented.
	// Here we are limiting their exposure. When the remaining features of
	// NURBS UVs are implemented, the following lines can be uncommented.
	// [lli]
	//
	/*
	// Nurbs "Edit UV Mode" update.
	//
	// Note: we must issue a -pmc to update this item since it is based on
	// the object selection rather than the txtWndUpdateEditor method - which
	// only responds to editor changes.
	//
	string $nurbsPostMenuCommand = "updateNurbsEditUVModeMenuItem(\"" +
									$editor +
									"NurbsEditUVModeItem\")";

	$subName = `menuItem -l "NURBS"
								-aob true
								-sm 1
								-pmc $nurbsPostMenuCommand
								-to 1
								($editor+"EditNurbsMenu")`;
	textureWindowBuildEditNurbsMenu( $subName, $editor, $editorCmd, 0 );
	*/
	
	$subName = `menuItem -label (uiRes("m_texturePanelMenus.kView")) -aob true -sm 1 -to 1 ($editor+"ViewMenu")`;
	textureWindowBuildViewMenu( $subName, $editor, $editorCmd, 0 );
	
	$subName = `menuItem -label (uiRes("m_texturePanelMenus.kSelect")) -sm 1 -aob true -to 1 ($editor+"SelectMenu")`;
	textureWindowBuildSelectMenu( $subName, $editor, $editorCmd, 0 );

	$subName = `menuItem -label (uiRes("m_texturePanelMenus.kTool")) -sm 1 -aob true -to 1 ($editor+"ToolMenu")`;
	textureWindowBuildToolMenu( $subName, $editor, $editorCmd, 0 );

	$subName = `menuItem -label (uiRes("m_texturePanelMenus.kImage")) -sm 1 -aob true -to 1 ($editor+"ImageMenu")`;
	textureWindowBuildImageMenu( $subName, $editor, $editorCmd, 0 );
	
	$subName = `menuItem 
					-label (uiRes("m_texturePanelMenus.kTextures")) 
					-subMenu true 
					-allowOptionBoxes false 
					-tearOff false 
					($editor+"TexturesMenu")`;
	menu -edit -postMenuCommand ( "textureWindowBuildTexturesMenu " + 
									$subName + " " +
									$editor + " " +
									$editorCmd + " 0" )
					$subName;
	setParent -menu ..;
	
	$subName = `menuItem 
					-label (uiRes("m_texturePanelMenus.kUVSets")) 
					-subMenu true 
					-allowOptionBoxes false 
					-tearOff false 
					($editor+"UVSetsMenu")`;
	menu -edit -postMenuCommand ( "textureWindowBuildUVSetsMenu " + 
									$subName + " " +
									$editor + " " +
									$editorCmd + " 0" )
					$subName;
	setParent -menu ..;
}

global proc textureWindowCreatePopupConvertMenu( string $editor, string $editorCmd )
//
//	Description:
//		Create popup marking menu for selection conversion. Currently this is
//	the control key modifier popup menu for the UV texture editor.
//
{
	// Marking menu selection commands
	//
	string $selectCmd[8];

	$selectCmd[0] = "textureWindowSelectConvert 1"; // F
	$selectCmd[1] = "textureWindowSelectConvert 2"; // E
	$selectCmd[2] = "textureWindowSelectConvert 4"; // UV 
	$selectCmd[3] = "textureWindowSelectConvert 3"; // V 
	$selectCmd[4] = "polySelectBorderShell 0";        // UV shell
	$selectCmd[5] = "polySelectBorderShell 1";		  // UV border
	$selectCmd[6] = "SelectEdgeLoop";    // Contiguous edges
	$selectCmd[7] = "polySelectEdges edgeUVLoopOrBorder"; // Edge loop from UV's

	string $directions[8];
	$directions[0] = "S";
	$directions[1] = "N";
	$directions[2] = "E";
	$directions[3] = "W";
	$directions[4] = "NE";
	$directions[5] = "NW";
	$directions[6] = "SE";
	$directions[7] = "SW";

	menuItem -label (uiRes("m_texturePanelMenus.kToFace")) 
		-rp ($directions[0])
		-c ($selectCmd[0])
		($editor+"ToFace");
	
	menuItem -subMenu true
		-label (uiRes("m_texturePanelMenus.kToEdge")) 
		-rp ($directions[1]);

			menuItem -label (uiRes("m_texturePanelMenus.kToEdge"))
				-rp ($directions[1])
				-c ($selectCmd[1])
				($editor+"ToEdge");

			menuItem -label (uiRes("m_texturePanelMenus.kToEdgePerim")) 
				-rp "S"
				-version "2015"
				-c "ConvertSelectionToEdgePerimeter";

			setParent -menu ..;


	menuItem -subMenu true
		-label (uiRes("m_texturePanelMenus.kToUV")) 
		-rp ($directions[2]);

			menuItem -label (uiRes("m_texturePanelMenus.kToUV"))
				-rp ($directions[2])
				-c ($selectCmd[2])
				($editor+"ToUV");

			menuItem -label (uiRes("m_texturePanelMenus.kToUVPerim")) 
				-rp "W"
				-version "2015"
				-c "ConvertSelectionToUVPerimeter";

			setParent -menu ..;


	menuItem -subMenu true
		-label (uiRes("m_texturePanelMenus.kToVertex")) 
		-rp ($directions[3]);

			menuItem -label (uiRes("m_texturePanelMenus.kToVertex"))
				-rp ($directions[3])
				-c ($selectCmd[3])
				($editor+"ToVertex");

			menuItem -label (uiRes("m_texturePanelMenus.kToVertexPerim")) 
				-rp "E"
				-version "2015"
				-c "ConvertSelectionToVertexPerimeter";

			setParent -menu ..;


	menuItem -label (uiRes("m_texturePanelMenus.kToShell")) 
		-rp ($directions[4])
		-c ($selectCmd[4])
		($editor+"ToShell");

	menuItem -label (uiRes("m_texturePanelMenus.kToBorder")) 
		-rp ($directions[5])
		-c ($selectCmd[5])
		($editor+"ToBorder");

	menuItem -label (uiRes("m_texturePanelMenus.kToEdgeLoop")) 
		-rp ($directions[6])
		-c ($selectCmd[6])
		($editor+"ToEdgeLoop");

	menuItem -label (uiRes("m_texturePanelMenus.kToShellBorder")) 
		-rp ($directions[7])
		-c ($selectCmd[7])
		($editor+"SelectShellBorder");
}


global proc textureWindowCreatePopupContextMenu( string $parent )
//
//	Description:
//		Create popup marking menu for context sensitive tools. Currently this is
//	the shift key modifier popup menu for the UV texture editor.
//
{

	string $firstSelected[];
	string $firstSelectedShape[];
	string $firstSelectedShapeNodeType = "unknown";

	string $tweakannot = (uiRes("m_texturePanelMenus.kWindowContextUVTweakToolAnnot2"));
	string $tweaktool =  (uiRes("m_texturePanelMenus.kWindowContextTweakUVTool"));

	//Get last selected component or object with shape
	$firstSelected = `ls -sl -head 1`;

	if (`size $firstSelected` != 0)
		$firstSelectedShape = `listRelatives -shapes $firstSelected[0]`;
	if (`size $firstSelectedShape` != 0)
		$firstSelectedShapeNodeType = `nodeType $firstSelectedShape[0]`;

	//if (`popupMenu -query -exists ($parent + "popupMenusShift")`){
	//	popupMenu -edit -deleteAllItems ($parent + "popupMenusShift");

	//	setParent -menu ($parent + "popupMenusShift");
	if (`popupMenu -query -exists $parent`){
		popupMenu -edit -deleteAllItems $parent;

		setParent -menu $parent;

		
		menuItem
			-label (uiRes("m_texturePanelMenus.kToggleTextureBorders")) 
			-command ("int $borders[] = `polyOptions -q -displayMapBorder`;" +
			"float $borderWidth[] = `optionVar -q displayPolyBorderEdgeSize`;" +
			"polyOptions -displayMapBorder (!$borders[0]) -sizeBorder $borderWidth[1]")
			-annotation (uiRes("m_texturePanelMenus.kToggleTextureBordersAnnot")) 
			;
		
		menuItem
			-version "2015"
			-label (uiRes("m_texturePanelMenus.kToggleTextureShellBorders")) 
			-command ("int $borders[] = `polyOptions -q -displayShellBorder`;" +
			"float $borderWidth[] = `optionVar -q displayPolyBorderEdgeSize`;" +
			"polyOptions -displayShellBorder (!$borders[0]) -sizeBorder $borderWidth[1]")
			-annotation (uiRes("m_texturePanelMenus.kToggleTextureShellBordersAnnot")) 
			;

		//Check selection for uv,vertex,face,edge,mesh

		//////////////////////////////////////////////////////////////
		//
		//	UV
		//
		//////////////////////////////////////////////////////////////


		if (`gmatch $firstSelected[0] "*.map*"`)
		{

			menuItem
				-enableCommandRepeat 1
				-radialPosition "SE"
				-annotation (uiRes("m_texturePanelMenus.kWindowContextMapUVBorderAnnot"))  
				-label (uiRes("m_texturePanelMenus.kWindowContextMapUVBorder"))  
				-command "performPolyUntangleUV map 0"
				;

			menuItem
				-enableCommandRepeat 1
				-radialPosition "SE"
				-optionBox 1
				-annotation (uiRes("m_texturePanelMenus.kWindowContextMapUVBorderOptionsAnnot"))  
				-command "performPolyUntangleUV map 1" 
				;

			menuItem
				-enableCommandRepeat 1
				-radialPosition "SW"
				-annotation (uiRes("m_texturePanelMenus.kWindowContextStraightenUVBorderAnnot"))  
				-label (uiRes("m_texturePanelMenus.kWindowContextStraightenUVBorder"))  
				-command "performPolyStraightenUV 0" 
				;

			menuItem
				-enableCommandRepeat 1
				-radialPosition "SW"
				-optionBox 1
				-annotation (uiRes("m_texturePanelMenus.kWindowContextStraightenUVBorderOptionsAnnot"))  
				-command "performPolyStraightenUV 1" 
				;
			menuItem
				-version "2015"
				-enableCommandRepeat 1
				-radialPosition "E"
				-annotation (uiRes("m_texturePanelMenus.kWindowContextOptimizeUVsAnnot")) 
				-label (uiRes("m_texturePanelMenus.kWindowContexOptimizeUVs"))
				-command    ("performPolyOptimizeUV 0")
				;
		
			menuItem
				-enableCommandRepeat 1
				-radialPosition "E"
				-optionBox 1
				-annotation (uiRes("m_texturePanelMenus.kWindowContextOptimizeUVsOptionsAnnot"))
				-command    ("performPolyOptimizeUV 1")
		;
			menuItem
				-version "2015"
				-enableCommandRepeat 1
				-radialPosition "N"
				-annotation (uiRes("m_texturePanelMenus.kWindowContextUnfoldUVsAnnot"))  
				-label (uiRes("m_texturePanelMenus.kWindowContextUnfoldUVs"))  
				-command "performUnfold 0" 
				;

			menuItem
				-enableCommandRepeat 1
				-radialPosition "N"
				-optionBox 1
				-annotation (uiRes("m_texturePanelMenus.kWindowContextUnfoldUVsOptionsAnnot"))  
				-command "performUnfold 1" 
				;

			menuItem
				-enableCommandRepeat 1
				-radialPosition "W"
				-annotation (uiRes("m_texturePanelMenus.kWindowContextLayoutUVsAnnot1"))  
				-label (uiRes("m_texturePanelMenus.kWindowContextLayoutUVs"))  
				-command "performPolyLayoutUV 0" 
				;

			menuItem
				-enableCommandRepeat 1
				-radialPosition "W"
				-optionBox 1
				-annotation (uiRes("m_texturePanelMenus.kWindowContextLayoutUVsOptionsAnnot1"))  
				-command "performPolyLayoutUV 1" 
				;

			menuItem
				-command  "setToolTo texLatticeDeformSuperContext;"
				-annotation (uiRes("m_texturePanelMenus.kWindowContextUVLatticeToolAnnot")) 
				-label (uiRes("m_texturePanelMenus.kWindowContextUVLatticeTool")) 
				-radialPosition "NE"
				;

			menuItem
				-annotation (uiRes("m_texturePanelMenus.kWindowContextUVLatticeToolOptionsAnnot")) 
				-radialPosition "NE"
				-optionBox 1
				-command "setToolTo texLatticeDeformSuperContext;toolPropertyWindow;"
				;

			menuItem
				-command  "smudgeSetToTool; setToolTo texSmudgeUVSuperContext;" 
				-annotation (uiRes("m_texturePanelMenus.kWindowContextUVSmudgeToolAnnot")) 
				-label (uiRes("m_texturePanelMenus.kWindowContextUVSmudgeTool")) 
				-radialPosition "NW"
				texSmudgeUVButton
				;

			menuItem
				-annotation (uiRes("m_texturePanelMenus.kWindowContextUVSmudgeToolOptionsAnnot")) 
				-radialPosition "NW"
				-optionBox 1
				-command "setToolTo texSmudgeUVSuperContext;toolPropertyWindow;"
				;
				
			menuItem
				-command  "setToolTo texMoveUVShellSuperContext;" 
				-annotation (uiRes("m_texturePanelMenus.kWindowContextUVShellMoveToolAnnot"))
				-label (uiRes("m_texturePanelMenus.kWindowContextUVShelMoveTool"))
				-radialPosition "SW"
				moveShellButton
				;
				
			menuItem
				-annotation (uiRes("m_texturePanelMenus.kWindowContextUVShellMoveToolOptionsAnnot")) 
				-radialPosition "SW"
				-optionBox 1
				-command "performTextureMoveShellOptions 1"
				;								

			menuItem
				-command  "setToolTo texSmoothSuperContext;" 
				-annotation (uiRes("m_texturePanelMenus.kWindowContextUVSmoothToolAnnot"))
				-label (uiRes("m_texturePanelMenus.kWindowContextUVShelSmoothTool"))
				-radialPosition "S"
				textSmoothButton
				;
					
			menuItem
				-annotation (uiRes("m_texturePanelMenus.kWindowContextUVSmoothToolOptionsAnnot")) 
				-radialPosition "S"
				-optionBox 1
				-command "performTextureSmoothOptions 1"
				;	

			menuItem
				-version "2015"
				-enableCommandRepeat 1
				-label (uiRes("m_texturePanelMenus.kCreateShell"))
				-command "CreateUVShellAlongBorder" 
				;

			// allow user to define a proc with additional menu items
			if (`exists contextUVToolsUVUserMM`)
				contextUVToolsUVUserMM $parent;

		}

		//////////////////////////////////////////////////////////////
		//
		//	VERTEX
		//
		//////////////////////////////////////////////////////////////

		if (`gmatch $firstSelected[0] "*.vtx*"`)
		{
			menuItem
				-version "2015"
				-enableCommandRepeat 1
				-radialPosition "SE"
				-label (uiRes("m_texturePanelMenus.kCreateShell"))
				-command "CreateUVShellAlongBorder" 
				;

			// allow user to define a proc with additional menu items
			if (`exists contextUVToolsVertexUserMM`)
				contextUVToolsVertexUserMM $parent;

		}

		//////////////////////////////////////////////////////////////
		//
		//	FACE
		//
		//////////////////////////////////////////////////////////////

		else if (`gmatch $firstSelected[0] "*.f*"`)	
		{

			menuItem
				-version "2015"
				-command  "setToolTo texTweakSuperContext;" 
				-annotation $tweakannot
				-label $tweaktool
				-radialPosition "S"
				tweakShellButton
				;

			menuItem
				-enableCommandRepeat 1
				-radialPosition "W"
				-annotation (uiRes("m_texturePanelMenus.kWindowContextLayoutUVsAnnot"))  
				-label (uiRes("m_texturePanelMenus.kWindowContextLayoutUVs1"))  
				-command "performPolyLayoutUV 0" 
				;

			menuItem
				-enableCommandRepeat 1
				-radialPosition "W"
				-optionBox 1
				-annotation (uiRes("m_texturePanelMenus.kWindowContextLayoutUVsOptionsAnnot"))  
				-command "performPolyLayoutUV 1" 
				;

			menuItem
				-enableCommandRepeat 1
				-radialPosition "NE"
				-annotation (uiRes("m_texturePanelMenus.kWindowContextNormalizeUVsAnnot"))  
				-label (uiRes("m_texturePanelMenus.kWindowContextNormalizeUVs"))  
				-command "polyNormalizeUV -normalizeType 1 -centerOnTile 1 -preserveAspectRatio off " 
				;

			menuItem
				-enableCommandRepeat 1
				-radialPosition "NW"
				-annotation (uiRes("m_texturePanelMenus.kWindowContextUnitizeUVsAnnot"))  
				-label (uiRes("m_texturePanelMenus.kWindowContextUnitizeUVs"))  
				-command "polyForceUV -unitize " 
				;

			menuItem
				-enableCommandRepeat 1
				-radialPosition "N"
				-label (uiRes("m_texturePanelMenus.kWindowContextPlanarMap"))  
				-command "polyProjection -ch 1 -type Planar -ibd on -icx 0.5 -icy 0.5 -ra 0 -isu 1 -isv 1 -md bestPlane ;setToolTo ShowManips;" 
				;

			menuItem
				-version "2015"
				-enableCommandRepeat 1
				-radialPosition "SE"
				-label (uiRes("m_texturePanelMenus.kCreateShell"))
				-command "CreateUVShellAlongBorder" 
				;

			// allow user to define a proc with additional menu items
			if (`exists contextUVToolsFaceUserMM`)
				contextUVToolsFaceUserMM $parent;

		}

		//////////////////////////////////////////////////////////////
		//
		//	EDGE
		//
		//////////////////////////////////////////////////////////////

		else if (`gmatch $firstSelected[0] "*.e*"`)	
		{

			menuItem
				-version "2015"
				-command  "setToolTo texTweakSuperContext;" 
				-annotation $tweakannot
				-label $tweaktool
				-radialPosition "S"
				tweakShellButton
				;

			menuItem
				-enableCommandRepeat 1
				-radialPosition "W"
				-annotation (uiRes("m_texturePanelMenus.kWindowContextCutUVsAnnot"))  
				-label (uiRes("m_texturePanelMenus.kWindowContextCutUVs"))  
				-command "polyPerformAction polyMapCut e 0" 
				;

			menuItem
				-enableCommandRepeat 1
				-radialPosition "E"
				-annotation (uiRes("m_texturePanelMenus.kWindowContextSewUVsAnnot"))  
				-label (uiRes("m_texturePanelMenus.kWindowContextSewUVs"))  
				-command "polyPerformAction polyMapSew e 0" 
				;

			menuItem
				-enableCommandRepeat 1
				-radialPosition "N"
				-annotation (uiRes("m_texturePanelMenus.kWindowContextMoveandSewAnnot"))  
				-label (uiRes("m_texturePanelMenus.kWindowContextMoveandSewUVs"))  
				-command "performPolyMapSewMove 0" 
				;

			menuItem
				-enableCommandRepeat 1
				-radialPosition "N"
				-optionBox 1
				-annotation (uiRes("m_texturePanelMenus.kWindowContextMoveandSewOptionsAnnot"))  
				-command "performPolyMapSewMove 1" 
				;

			menuItem
				-version "2015"
				-enableCommandRepeat 1
				-radialPosition "SE"
				-label (uiRes("m_texturePanelMenus.kCreateShell"))
				-command "CreateUVShellAlongBorder" 
				;

			// allow user to define a proc with additional menu items
			if (`exists contextUVToolsEdgeUserMM`)
				contextUVToolsEdgeUserMM $parent;

		}	

		//////////////////////////////////////////////////////////////
		//
		//	POLY OBJECT
		//
		//////////////////////////////////////////////////////////////

		else if ($firstSelectedShapeNodeType == "mesh")
		{

			menuItem
				-version "2015"
				-command  "setToolTo texTweakSuperContext;" 
				-annotation $tweakannot
				-label $tweaktool
				-radialPosition "S"
				tweakShellButton
				;

			// allow user to define a proc with additional menu items
			if (`exists contextUVToolsObjectUserMM`)
				contextUVToolsObjectUserMM $parent;

		}	


		//////////////////////////////////////////////////////////////
		//
		//	DEFAULT
		//
		//////////////////////////////////////////////////////////////

		else		{

			// allow user to define a proc with additional menu items
			if (`exists contextUVToolsDefaultUserMM`)
				contextUVToolsDefaultUserMM $parent;

		}		

	}
}



global proc textureWindowUpdatePopup( string $popupMenu, string $editor, string $editorCmd )
//
//	Description:
//		This procedure will update the popup menu on the fly based on the current
//	selection. ie. If polys are selected, this will make sure that the marking menu
//	is the poly/subd menu set. If NURBS are selected, the NURBS menu set will be
//	created. If both are present, the combined menu set will be created. This is executed
//	each time the popup menu is requested.
//
//		Use this method if you would like the ability to update the popup menu prior
//	to being shown. This includes: rebuilding the menu, updating checkboxes, etc.
//
{
	global int $gTextureEditorPopupType;

	// Determine type based on the selection/hilite list.
	//
	int $selectedTypes[];
	txtWndSelectedTypes( $selectedTypes );
	int $polySelected = $selectedTypes[0];
	int $nurbsSelected = $selectedTypes[1];
	int $subdivSelected = $selectedTypes[2];

	// Popup types:
	//
	// 0 == "Poly/SubD marking menu"
	// 1 == "NURBS marking menu"
	// 2 == "Combined Poly/SubD/NURBS marking menu"
	//
	int $popupType = 0;
	if( $polySelected || $subdivSelected )
	{
		if( $nurbsSelected )
		{
			$popupType = 2;
		}
		else
		{
			$popupType = 0;
			string $currentContext = `currentCtx`;
			string $ctx = `contextInfo -c $currentContext`;
			if($ctx == "texSculptCacheContext" || $ctx == "texCutContext" || $ctx == "Unfold3DBrush")
				$popupType = 3;
		}
	}
	else if( $nurbsSelected )
	{
		$popupType = 1;
	}

	// If the popupTypes do not match, then switch the menuset.
	//
	if( $popupType != $gTextureEditorPopupType || $popupType == 3 )
	{
		string $oldParent = `setParent -q -m`;

		// Clear the existing radial menu and rebuild it
		//
		textureWindowDeletePopupRadialMenu( $editor );
		setParent -m $popupMenu;
		textureWindowCreatePopupRadialMenu( $editor, $editorCmd, $popupType );
		setParent -m $oldParent;
	}

	// Now perform any updating necessary specific to the marking menus
	//
	if( $gTextureEditorPopupType == 1	||
		$gTextureEditorPopupType == 2	)
	{
		updateNurbsEditUVModeMenuItem( $editor+"EditNURBSUV" );
	}
}


