// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//	Description:
//		Save the given string in a global variable to allow future examination.
//	We should only ever get into this method if we're running a test, and we've
//	overriden the alias evalString. The alias evalString is defined in
//	defaultRunTimeCommands.mel as "alias evalString eval".
//
//	In normal mode, evalString behaves like eval. This can be overriden in test
//	mode to avoid the evaluation of a costly method (eg, doing a batch render)
//	and instead capturing the intended command by calling the saveEvalString
//	method. See mayaBatchRenderTest.mel for an example usage of this method.
//

global proc saveEvalString( string $cmd )
//
//	Description:
//		Save the given string in a global variable to allow future examination.
//
{
	// Print the command that we're skipping, in the unlikely event that we
	// ever get in the wrong state and saveEvalString is called when eval
	// should really have been called. This would help track down what might
	// have appeared like a mysterious behaviour.
	//
	string $fmt = (uiRes("m_saveEvalString.kSkippingEval"));
	print( `format -s $cmd $fmt` );

	global string $gSavedEvalString;
	$gSavedEvalString = $cmd;
}
