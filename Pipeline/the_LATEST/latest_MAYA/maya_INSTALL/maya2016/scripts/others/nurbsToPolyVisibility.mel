// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//      nurbsToPolyVisibility
//
//  Description:
//		Control the visibility of controls
//
//  Input Arguments:
//      parent               - Top level parent layout of the option box UI.
//                             Required so that UI object names can be 
//                             successfully resolved.
//
//		format				 - which one is pressed
//
//  Return Value:
//      None.
//

global proc nurbsToPolyVisibility( string $parent, int $format )
{
	setParent $parent;
	switch( $format ) {
	  case 0:
	  default:
		tabLayout -e -vis true -selectTab tabCount formatTabs;
		break;
	  case 1:
		tabLayout -e -vis true -selectTab tabStandard formatTabs;
		break;
	  case 2:
		tabLayout -e -vis true -selectTab tabGeneral formatTabs;
		break;
	  case 3:
		tabLayout -e -vis false formatTabs;
		break;
	}
    //
    // Ghost the Type controls if the Tessellation method is set
    // to Control Points (format == 3)
    //
    if ($format == 3) {
        radioButtonGrp -edit -enable 0 type;
    } else {
        radioButtonGrp -edit -enable 1 type;
    }

    //
    // If the "Attach Multiple Mesh" option is chosen then disable the 
    // control points method and make sure the tolerance slider is enabled.
    //
    int $merge = `checkBoxGrp -q -value1 mergeBox`;
    radioButtonGrp -edit -enable2 (!$merge) format2;
    floatSliderGrp -edit -enable $merge mergeTolerance;
}

