// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

// Description:  This procedure is called when a hyper graph window
//      is deleted.  
//      . If the window was closed by the user, then the hyper
//        graph panel would be deleted, unless it is the default
//        hyper graph panel.
//      . If the window was closed by mel because we want to move
//        the hyper graph panel to a display panel, then
//        we don't delete the hyper graph panel.
//
global proc hyperGraphWindowClosed(string $whichPanel)
{
    global int $gKeepHyperGraphWhileClosingWindow; 

    if (!$gKeepHyperGraphWhileClosingWindow)
    {
        // Check if it is the default hyper graph panel.
        // Don't delete the default hyper graph panel.
        //
        if ($whichPanel != "hyperGraphPanel1")
        {
            // Check if the panel we want to delete exists or not,
            // before we delete it.
            //
            if (`scriptedPanel -exists $whichPanel`)
            {
                deleteUI -panel $whichPanel;
            }
        }
    }
    else
    {
        // We kept this hyper graph panel.
        // Now set the $gKeepHyperGraphWhileClosingWindow back to 
        // default for the next hyper graph window scriptJob.
        //
        $gKeepHyperGraphWhileClosingWindow = false;
    }
}

// Description:  This procedure is for opening hyper graph window
//      with the given type of view.
//      A hyper graph window could display the hierarchical view
//      or the DG view. 
//
global proc hyperGraphWindow(string $whichPanel, string $type)
{
    // If whichPanel was given, then we check if the panel is a
    // hyepr graph panel. 
    //
    if ($whichPanel != "")
    {
        if (`scriptedPanel -query -type $whichPanel` != "hyperGraphPanel")
        {
            string $errorMessage = (uiRes("m_hyperGraphWindow.kNoSuchPanel"));
            $errorMessage = `format -stringArg $whichPanel $errorMessage`;
            error($errorMessage);
            return;
        }
    }
    else    
    {
        // We don't know whichPanel yet.  We need to use the 
        // $type+OpenHyperGraphMode optionVar to determine which
        // panel to bring up or if new hyper graph panel
        // needs to be created. 
        //
        $whichPanel = getHyperGraphPanel($type);
 
        if ($whichPanel == "")
        {
            // Can not create a hypergraph panel.
            //
            return;
        }
    }


    int $isNewWindow = false;
    string $wndName = $whichPanel + "Window";
    if (`panel -q -to $whichPanel`) {
        //
        // The window is already displayed so just show it
        //
        showWindow $wndName;
    } else {
        //
        // There is no window so tear off the panel to make one
        //
        scriptedPanel -e -to $whichPanel;

        // Make sure the hypergraph panel is of the correct type.
        //
        string $hyperGraphEd = $whichPanel + "HyperGraphEd";
        if ($type == "DG")
        {
            showDGLevel $hyperGraphEd;
        }
        else if ($type == "DAG")
        {
            showDAGLevel $hyperGraphEd;
        }

        $isNewWindow = true;
    }
    fillEmptyPanes;

    // If the window does not have a scriptJob attached to it yet,
    // attach a script job to be execuated when the window is closed.
    //
    if ($isNewWindow)
    {
        string $panelControl = `panel -query -control $whichPanel`;
        string $windowName = match("^[^|]*",$panelControl);
        scriptJob -runOnce true -uiDeleted $windowName 
            ("hyperGraphWindowClosed \""+$whichPanel+"\"");
    }
}
