// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc denormalizeCurve (int $removeNormalizer, string $curveName)
{
	if (!`objExists $curveName`)
	{
		return;
	}

	if (!isAnimCurve($curveName) || `reference -isNodeReferenced $curveName`)
	{
		return;
	}

	string $curveDests[] = `listConnections -source false -skipConversionNodes 1 ($curveName+".output")`;

	if (size ($curveDests) == 0)
	{
		return;
	}

	string $curveDest = $curveDests[0];

	string $normalizerType = "curveNormalizerLinear";

	if (`nodeType $curveName` == "animCurveTA")
	{
		$normalizerType = "curveNormalizerAngle";
	}

	if ((size($curveDest) == 0) || (`nodeType $curveDest` != $normalizerType))
	{
		return;
	}

	float $scalarValue = `getAttr ($curveDest + ".scalar")`;

	int $keyCount = `getAttr -size ($curveName+".ktv")`;
	
	int $key;

	setAttr ($curveDest+".scalar") 1.0;
	scaleKey -valueScale $scalarValue $curveName;

	if (`bufferCurve -exists $curveName`)
	{
		bufferCurve -swap $curveName;
		scaleKey -valueScale $scalarValue $curveName;
		bufferCurve -swap $curveName;
	}

	if ($removeNormalizer)
	{
		string $outputName = $curveDest+"output";
		string $originalAttrs[] = `listConnections -source false -skipConversionNodes true -plugs true ($curveDest+".output")`;

		string $originalAttr = "";

		if (size($originalAttrs) > 0)
		{
			$originalAttr = $originalAttrs[0];
		}

		disconnectAttr ($curveName+".output") ($curveDest+".animInput");

		if ($originalAttr != "")
		{
			disconnectAttr ($curveDest+".output") $originalAttr;
			connectAttr ($curveName+".output") $originalAttr;
		}

		delete $curveDest;
	}
}

