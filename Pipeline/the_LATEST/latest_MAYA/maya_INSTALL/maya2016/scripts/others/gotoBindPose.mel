// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Creation Date:  May 14 1997
//
//<doc>
//<name gotoBindPose>
//
//<synopsis>
//		gotoBindPose()
//
//<description>
//      This script moves all selected skeletons to the bindPose.
//
//
//<examples>
//	select -r joeHip maryHip;
//  gotoBindPose;
//
//</doc>
//

global proc gotoBindPose()
{
	// For each selected transform ...
	string $selTransforms[] = `ls -sl -type transform`;
	for ($obj in $selTransforms)
	{
		// Query the bindPose connected to the object ...
		string $bindPoses[] = `dagPose -q -bp $obj`;

		// ... and restore it (if only one bindPose is found).
		//
		if(size($bindPoses) == 1)
		{
			catch(`dagPose -r -g -bp $obj`);
			continue;
		}

		// If multiple bindposes are found use the skinCluster object to determine 
		// which of bindPose should be restored.
		//

		// First check if a shape exists and bail if no shape can be found.
		//
		string $shapes[] = `listRelatives -path -noIntermediate -shapes $obj`;
		if(size($shapes) == 0) {
			string $fmt = (uiRes("m_gotoBindPose.kErrorNoShape"));
			error(`format -s $obj $fmt`);
		}

		// If a shape is found, find the all bindPoses connected to the skinCluster.
		//
		string $skinClusterName = findRelatedSkinCluster($shapes[0]);
		string $skinBindPosePlug = $skinClusterName + ".bindPose";
		string $bindPose[] = `listConnections -d false -s true -type dagPose $skinBindPosePlug`;
		if(size($bindPose) > 0){
			catch(`dagPose -r -g $bindPose[0]`);
		} else {
			// Otherwise, handle legacy scenes ...

			//for legacy scenes (prior to Maya 2008) the skin cluster may not be connected
			//to the bindpose. In this case we'll have to try to find the bind pose a 
			//different way.
			string $influences[] = `skinCluster -q -inf $skinClusterName`;
			for($inf in $influences) 
			{
				$bindPose = `dagPose -q -bp $inf`;
				if(size($bindPose)== 0)
					continue;

				catch(`dagPose -r -g $bindPose[0]`);
				break;
			}
		}

	}
}
