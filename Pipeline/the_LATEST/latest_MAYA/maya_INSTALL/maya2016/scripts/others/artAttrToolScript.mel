// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  May 2000 
//
//
//
//  Procedure Name:
//     	artAttrToolScript 
//
//  Description:
//		create wrapper around the artSelect command
//
//  Input Arguments:
//		4 ==> enter the tool (create if necessary)
//      3 ==> property sheet box
//
//  Return Value:
//      None.
//
global proc string artAttrToolScript( 
	int 	$setToTool, 
	string 	$attrFilter
)
//
//	Description :
//		4 ==> enter the tool
{
	source "artAttrCallback.mel";

	artAttrSyncCurrentAttribute();

	string $filterUILabel = (uiRes("m_artAttrToolScript.kFilter"));

	string $tool = "artAttrContext";
	if ( $attrFilter == "" ) {
		// General Attribute Paint Tool.
		makePaintable -activateAll true;
		makePaintable -activate false "mesh" "vertexColorRGB" ;
		makePaintable -activate false "mesh" "vertexFaceColorRGB" ;
		makePaintable -activate false "skinCluster" "*";
		setArtAttrFilterLabel( (uiRes("m_artAttrToolScript.kFilterAll")) );
	} 
	else if ( $attrFilter == "cluster" ) {
		// Cluster Paint Weight Tool.
		makePaintable -activateAll false;
		makePaintable -activate true "cluster" "weights";
		
		// Set the filter label.
		setArtAttrFilterLabel( `format -s "cluster" $filterUILabel` );
	} 
	else if ( $attrFilter == "textureDeformer" ) {
		// Texture Deformer Paint Weight Tool.
		makePaintable -activateAll false;
		makePaintable -activate true "textureDeformer" "weights";
		
		// Set the filter label.
		setArtAttrFilterLabel( `format -s "textureDeformer" $filterUILabel` );
	}
	else if ( $attrFilter == "jiggle" ) {
		// Jiggle Paint Weight Tool.
		makePaintable -activateAll false;
		makePaintable -activate true "jiggle" "weights";

		// Set the filter label.
		setArtAttrFilterLabel( `format -s "jiggle" $filterUILabel` );
	}
	else if ( $attrFilter == "polyReduce" ) {
		// Poly Reduce Paint Weight Tool.
		makePaintable -activateAll false;
		makePaintable -activate true "polyReduce" "vertexWeights";

		// Set the filter label.
		setArtAttrFilterLabel( `format -s "polyReduce" $filterUILabel` );
	}
	else if ( $attrFilter == "particle" ) {
		// Soft Body Paint Tool.
		makePaintable -activateAll false;
		makePaintable -activate true "particle" "*";

		// Set the filter label.
		setArtAttrFilterLabel( `format -s "particle" $filterUILabel` );
	}
	else if ( $attrFilter == "wire" ) {
		// wire Paint Weight Tool.
		makePaintable -activateAll false;
		makePaintable -activate true "wire" "weights";

		// Set the filter label.
		setArtAttrFilterLabel( `format -s "wire" $filterUILabel` );
	}
	else if ( $attrFilter == "transferAttributes" ) {
		// Transfer Attributes Paint Weight Tool.
		makePaintable -activateAll false;
		makePaintable -activate true "transferAttributes" "weights";
		
		// Set the filter label.
		setArtAttrFilterLabel( `format -s "transferAttributes" $filterUILabel` );
	} 
	else if ( $attrFilter == "shrinkWrap" ) {
		// ShrinkWrap Paint Weight Tool.
		makePaintable -activateAll false;
		makePaintable -activate true "shrinkWrap" "weights";

		// Set the filter label.
		setArtAttrFilterLabel( `format -s "shrinkWrap" $filterUILabel` );
	}
	else if ( $attrFilter == "deltaMush" ) {
		// DeltaMush Paint Weight Tool.
		makePaintable -activateAll false;
		makePaintable -activate true "deltaMush" "weights";

		// Set the filter label.
		setArtAttrFilterLabel( `format -s "deltaMush" $filterUILabel` );
	}

	// Create a tool if it does not exists.
	if( ! `artAttrCtx -exists $tool` ) {
		rememberCtxSettings `artAttrCtx -i1 "attrPaint.png" -whichTool "general" $tool`;
	}
	setToolTo $tool;

	if( 3 == $setToTool ) {
		toolPropertyWindow;

		// Make sure that the filer is displayed. 
		if (`button -q -ex artAttrFilterButton`) {
			button -e -label `artAttrFilterLabel` artAttrFilterButton;
    	}
	}
	else {
		if( 4 != $setToTool ) {
			warning (uiRes("m_artAttrToolScript.kWrongInput"));
		} else if (!artAttrInitPaintableAttr()) {		
			warning (uiRes("m_artAttrToolScript.kSelectObjectWithPaintableAttr"));
		}	
	}
	return $tool;
}
