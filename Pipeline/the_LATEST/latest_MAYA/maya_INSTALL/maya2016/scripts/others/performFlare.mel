// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  18 April 1997
//
//  Description:
//      flare default options box.  The content for each tab 
//		is not created until it is accessed for the first time.
//
//////////////////////////////////////////////////////////////////////
//
//  Procedure Name:
//      setOptionVars
//
//  Description:
//		Initialize the option values.
//
//  Input Arguments:
//		Whether to set the options to default values.
//
//  Return Value:
//      None.
//
proc setOptionVars(int $forceFactorySettings)
{
	//	min.
	//
	if ($forceFactorySettings || !`optionVar -exists flareMin`) {
		optionVar -floatValue  flareMin -1.0;
	}

	//	max.
	//
	if ($forceFactorySettings || !`optionVar -exists flareMax`) {
		optionVar -floatValue  flareMax 1.0;
	}

	//	start flareX.
	//
	if ($forceFactorySettings || !`optionVar -exists flareStartFlareX`) {
		optionVar -floatValue  flareStartFlareX 1.0;
	}

	//	start flareZ.
	//
	if ($forceFactorySettings || !`optionVar -exists flareStartFlareZ`) {
		optionVar -floatValue  flareStartFlareZ 1.0;
	}

	//	end flareX.
	//
	if ($forceFactorySettings || !`optionVar -exists flareEndFlareX`) {
		optionVar -floatValue  flareEndFlareX 1.0;
	}

	//	end flareZ.
	//
	if ($forceFactorySettings || !`optionVar -exists flareEndFlareZ`) {
		optionVar -floatValue  flareEndFlareZ 1.0;
	}

	//	curve.
	//
	if ($forceFactorySettings || !`optionVar -exists flareCurve`) {
		optionVar -floatValue  flareCurve 0.0;
	}

	// default options common to all deformers
	//
	if ($forceFactorySettings || !`optionVar -exists flarePositioning`) {
		optionVar -stringValue flarePositioning "default";
	}
	if ($forceFactorySettings || !`optionVar -exists flareExclusive`) {
		// 0 == no exclusive
		// 1 == exclusive with new name
		// 2 == exclusive using an existing partition
		//
		optionVar -intValue flareExclusive 0;
	}
	if ($forceFactorySettings || !`optionVar -exists flareExclName`) {
		optionVar -stringValue flareExclName "deformPartition";
	}
}

//
//  Procedure Name:
//      flareSetup
//
//  Description:
//		Update the state of the option box UI to reflect the option values.
//
//  Input Arguments:
//      parent               - Top level parent layout of the option box UI.
//                             Required so that UI object names can be 
//                             successfully resolved.
//
//		forceFactorySettings - Whether the option values should be set to
//                             default values.
//
//      tabIndex		     - 0 = both tabs, 1 = basic, 2 = advanced
//
//  Return Value:
//      None.
//
global proc flareSetup(string $parent,
					   int $forceFactorySettings,
					   int $tabIndex)	
{
	//	Retrieve the option settings
	//
	setOptionVars($forceFactorySettings);
	setParent $parent;

	//	Query the optionVar's and set the values into the controls.
	//
	if ($tabIndex != 2) {	
		//	min.
		//
		if (`floatSliderGrp -exists flareMin`) {
			floatSliderGrp -edit 
				-value `optionVar -query flareMin`
				flareMin;
		}
		
		//	max.
		//
		if (`floatSliderGrp -exists flareMax`) {
			floatSliderGrp -edit 
				-value `optionVar -query flareMax`
				flareMax;
		}
		
		//	start flareX.
		//
		if (`floatSliderGrp -exists flareStartFlareX`) {
			floatSliderGrp -edit 
				-value `optionVar -query flareStartFlareX`
				flareStartFlareX;
		}
		
		//	start flareZ.
		//
		if (`floatSliderGrp -exists flareStartFlareZ`) {
			floatSliderGrp -edit 
				-value `optionVar -query flareStartFlareZ`
				flareStartFlareZ;
		}
		
		//	end flareX.
		//
		if (`floatSliderGrp -exists flareEndFlareX`) {
			floatSliderGrp -edit 
				-value `optionVar -query flareEndFlareX`
				flareEndFlareX;
		}
		
		//	end flareZ.
		//
		if (`floatSliderGrp -exists flareEndFlareZ`) {
			floatSliderGrp -edit 
				-value `optionVar -query flareEndFlareZ`
				flareEndFlareZ;
		}
		
		//	curve.
		//
		if (`floatSliderGrp -exists flareCurve`) {
			floatSliderGrp -edit 
				-value `optionVar -query flareCurve`
				flareCurve;
		}
	}

	if ($tabIndex != 1) {
		// Positioning of the flare deformer in the DG
		//
		string $positioning = `optionVar -query flarePositioning`;
		if (`optionMenuGrp -exists flarePositioningWidget`) {
			if ($positioning == "default") {
				optionMenuGrp -edit -select 1 flarePositioningWidget;
			}
			else if ($positioning == "before") {
				optionMenuGrp -edit -select 2 flarePositioningWidget;
			}
			else if ($positioning == "after") {
				optionMenuGrp -edit -select 3 flarePositioningWidget;
			}
			else if ($positioning == "split") {
				optionMenuGrp -edit -select 4 flarePositioningWidget;
			}
			else if ($positioning == "parallel") {
				optionMenuGrp -edit -select 5 flarePositioningWidget;
			}
			else {
				optionMenuGrp -edit -select 1 flarePositioningWidget;
			}
		}
		
		int $exc=`optionVar -query flareExclusive`;
		if (`checkBoxGrp -exists exclWidget`) {
			checkBoxGrp -e -v1 $exc exclWidget;
		}
		string $exn=`optionVar -query flareExclName`;
		if (`textFieldGrp -exists partitionNameWidget`) {
			textFieldGrp -e -tx $exn -enable $exc partitionNameWidget;
		}
		if (`optionMenuGrp -exists partitionListWidget`) {
			optionMenuGrp -e  -enable $exc partitionListWidget;
		}
	}
}

//
//  Procedure Name:
//      flareCallback
//
//  Description:
//		Update the option values with the current state of the option box UI.
//
//  Input Arguments:
//      parent - Top level parent layout of the option box UI.  Required so
//               that UI object names can be successfully resolved.
//
//		doIt   - Whether the command should execute.
//
//  Return Value:
//      None.
//
global proc flareCallback(string $parent, int $doIt)
{
	//	Set the optionVar's from the control values, and then
	//	perform the command.

	//	Min.
	//
	if (`floatSliderGrp -exists flareMin`) {
		optionVar -floatValue flareMin		
			`floatSliderGrp -query -value flareMin`;
	}

	//	Max.
	//
	if (`floatSliderGrp -exists flareMax`) {
		optionVar -floatValue flareMax		
			`floatSliderGrp -query -value flareMax`;
	}

	//	start FlareX.
	//
	if (`floatSliderGrp -exists flareStartFlareX`) {
		optionVar -floatValue flareStartFlareX		
			`floatSliderGrp -query -value flareStartFlareX`;
	}

	//	start FlareZ.
	//
	if (`floatSliderGrp -exists flareStartFlareZ`) {
		optionVar -floatValue flareStartFlareZ		
			`floatSliderGrp -query -value flareStartFlareZ`;
	}

	//	end FlareX.
	//
	if (`floatSliderGrp -exists flareEndFlareX`) {
		optionVar -floatValue flareEndFlareX		
			`floatSliderGrp -query -value flareEndFlareX`;
	}

	//	end FlareZ.
	//
	if (`floatSliderGrp -exists flareEndFlareZ`) {
		optionVar -floatValue flareEndFlareZ		
			`floatSliderGrp -query -value flareEndFlareZ`;
	}

	//	Curve.
	//
	if (`floatSliderGrp -exists flareCurve`) {
		optionVar -floatValue flareCurve		
			`floatSliderGrp -query -value flareCurve`;
	}

	// Positioning of the flare deformer in the DG
	//
	string $positioning = "default";
	if (`optionMenuGrp -exists flarePositioningWidget`) {
		if (`optionMenuGrp -query -select flarePositioningWidget` == 1) {
			$positioning = "default";
		}
		else if (`optionMenuGrp -query -select flarePositioningWidget` == 2){
			$positioning = "before";
		}
		else if (`optionMenuGrp -query -select flarePositioningWidget` == 3){
			$positioning = "after";
		}
		else if (`optionMenuGrp -query -select flarePositioningWidget` == 4){
			$positioning = "split";
		}
		else if (`optionMenuGrp -query -select flarePositioningWidget` == 5){
			$positioning = "parallel";
		}
	}
	optionVar -stringValue flarePositioning $positioning;

	if (`checkBoxGrp -exists exclWidget`) {
		optionVar -intValue flareExclusive `checkBoxGrp -q -v1 exclWidget`;
	}
	if (`optionMenuGrp -exists partitionListWidget`) {
		string $partitionNameVal = `optionMenuGrp -q -v partitionListWidget`;
		if ($partitionNameVal == (uiRes("m_performFlare.kCreateNewPartition"))) {
			if (`textFieldGrp -exists partitionNameWidget`) {
				$partitionNameVal = `textFieldGrp -q -tx partitionNameWidget`;
			}
		} else {
			// a value of 2 indicates that we use an existing partition
			//
			optionVar -intValue flareExclusive 2;
		}
		
		optionVar -stringValue flareExclName $partitionNameVal;
	}
	
	if ($doIt) {
		performFlare 0; 
		addToRecentCommandQueue "performFlare 0" "Flare";
	}
}


//
//  Procedure Name:
//      createFlareTabUI
//
//  Description:
//		Create the tab UI.  The contents of each tab are created only 
//		when it is required, ie. if the tab is initially visible or 
//		if the tab is selected by the user.
//
//  Input Arguments:
//      The name of the tab layout.
//
//  Return Value:
//      None.
//
global proc createFlareTabUI(string $tabLayout)
{
	string $tab[] = `tabLayout -query -childArray $tabLayout`;
	int $currentTabIndex = `tabLayout -query -selectTabIndex $tabLayout`;

	//	Determine if the UI for this tab has been created yet.
	//	This is accomplished by querying the number of children
	//	in the current tab.  If the tab has no children then the UI
	//	must be created.
	//
	if (0 == `columnLayout -query -numberOfChildren $tab[$currentTabIndex-1]`) {

		setParent $tab[$currentTabIndex-1];

		string $label;
		int $index;

		//	Activate the default UI template so that the layout of this 
		//	option box is consistent with the layout of the rest of the 
		//	application.
		//
		setUITemplate -pushTemplate DefaultTemplate;

		//	Turn on the wait cursor.
		//
		waitCursor -state 1;

		//	The current tab has no children.  Determine which tab is
		//	active and create its UI.
		//
		//	RECOMMENDATION:  Use the 'Grp' commands where possible because
		//	they obey the formatting specified in the default template.
		//	This will result in a more consistent look throughout the
		//	application.
		//	
		if (1 == $currentTabIndex) {

	    	//	Create UI for the first tab.
	    	//
	    	floatSliderGrp -label (uiRes("m_performFlare.kLowBound"))  -fieldMinValue -10000.0 
			  -minValue -10.0 -maxValue 0.0 flareMin;

	    	floatSliderGrp -label (uiRes("m_performFlare.kHighBound"))  -minValue 0.0 
			  -maxValue 10.0 -fieldMaxValue 10000.0 flareMax;

	    	floatSliderGrp -label (uiRes("m_performFlare.kStartFlareX"))  -minValue 0.0 -maxValue 10.0
				-fieldMinValue -10000.0 -fieldMaxValue 10000.0
	    		flareStartFlareX;

	    	floatSliderGrp -label (uiRes("m_performFlare.kStartFlareZ"))  -minValue 0.0 -maxValue 10.0
				-fieldMinValue -10000.0 -fieldMaxValue 10000.0
	    		flareStartFlareZ;

	    	floatSliderGrp -label (uiRes("m_performFlare.kEndFlareX"))  -minValue 0.0 -maxValue 10.0
				-fieldMinValue -10000.0 -fieldMaxValue 10000.0
	    		flareEndFlareX;

	    	floatSliderGrp -label (uiRes("m_performFlare.kEndFlareZ"))  -minValue 0.0 -maxValue 10.0
				-fieldMinValue -10000.0 -fieldMaxValue 10000.0
	    		flareEndFlareZ;

	    	floatSliderGrp -label (uiRes("m_performFlare.kCurve"))  -minValue -10.0 -maxValue 10.0
				-fieldMinValue -10000.0 -fieldMaxValue 10000.0
	    		flareCurve;

			setParent ..;
		} else if (2 == $currentTabIndex) {
			
			//	Create UI for the second tab.
			//
			columnLayout -adjustableColumn true;

			// Positioning of the flare deformer in the DG
			optionMenuGrp -label (uiRes("m_performFlare.kDeformationOrder"))  flarePositioningWidget;
			menuItem -label (uiRes("m_performFlare.kDefault"))        flarePosItem1;
			menuItem -label (uiRes("m_performFlare.kBefore"))         flarePosItem2;
			menuItem -label (uiRes("m_performFlare.kAfter"))          flarePosItem3;
			menuItem -label (uiRes("m_performFlare.kSplit"))          flarePosItem4;
			menuItem -label (uiRes("m_performFlare.kParallel"))       flarePosItem5;

			separator;
			checkBoxGrp	
				-numberOfCheckBoxes 1
				-label ""
				-label1 (uiRes("m_performFlare.kExclusive")) 
				-v1 0 
				-on1 "optionMenuGrp -e -enable 1 partitionListWidget; updatePartitionNameWidget;"
				-offCommand "optionMenuGrp -e -enable 0 partitionListWidget; updatePartitionNameWidget;"
				exclWidget;

			// Create an option menu listing the partitions
			//
			optionMenuGrp -label (uiRes("m_performFlare.kPartitiontoUse"))  -enable `checkBoxGrp -q -v1 exclWidget`
				-cc "updatePartitionNameWidget" partitionListWidget;

			string $currentNameOption = "";
			if (`optionVar -exists flareExclName`) {
				$currentNameOption = `optionVar -q flareExclName`;
			}
			
			// add all the partitions to the menu
			//
			int $pp;
			string $partitionArray[];
			$partitionArray = `ls -type partition`;
			int $partitionCount = size($partitionArray);
			menuItem -label (uiRes("m_performFlare.kCreateNewPartition")) ;
			for ($pp = 0; $pp < $partitionCount; $pp++)
			{
				// Do not list the render partition as adding items to
				// it is only going to cause confusion.
				//
				if ($partitionArray[$pp] != "renderPartition" && 
					$partitionArray[$pp] != "characterPartition") {
					menuItem -label $partitionArray[$pp];
				}
				if ($currentNameOption == $partitionArray[$pp]) {
					optionVar -stringValue flareExclName "deformPartition";
				}
			}

			textFieldGrp -label (uiRes("m_performFlare.kNewPartitionName"))  -enable `checkBoxGrp -q -v1 exclWidget` 
				-tx "deformPartition"
				partitionNameWidget;
		
			updatePartitionNameWidget;
		}

		//	Update the control values to match the options.
		//
		eval (("flareSetup " + $tabLayout + " "+0+" "+$currentTabIndex));
	
		//	Turn off the wait cursor.
		//
		waitCursor -state 0;
		
		//	Deactivate the default UI template.
		//
		setUITemplate -popTemplate;
	}
}

//
//  Procedure Name:
//      flareOptions
//
//  Description:
//		Construct the option box UI.  Involves accessing the standard option
//		box and customizing the UI accordingly.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
// ********* Change 'flare' in this proc to be the name of your command
proc flareOptions()
{
	//	Name of the command for this option box.
	//
	string $commandName = "nonLinear";

	//	Build the option box actions.
	//
	string $callback = ("flareCallback");
	string $setup = ("flareSetup");

	//	STEP 1:  Get the option box.
	//	============================
	//
	//  The value returned is the name of the layout to be used as
	//	the parent for the option box UI.
	//
	string $layout = getOptionBox();
	setParent $layout;
	
	//	STEP 2:  Pass the command name to the option box.
	//	=================================================
	//
	//	Any default option box behaviour based on the command name is set 
	//	up with this call.  For example, updating the 'Help' menu item with
	//	the name of the command.
	//
	setOptionBoxCommandName($commandName);

	//	STEP 3:  Activate the default UI template.
	//	==========================================
	//
	//	Activate the default UI template so that the layout of this 
	//	option box is consistent with the layout of the rest of the 
	//	application.
	//
	//	Note: this option box example delays the creation of the UI
	//	until it's required.  Therefore this step is moved to the
	//	procedure where the UI is actually created. 
	//
	//setUITemplate -pushTemplate DefaultTemplate;

	//	STEP 4: Create option box contents.
	//	===================================
	//	
	//	This, of course, will vary from option box to option box.	
	
	//	Demonstrate the delaying of UI creation via tab layouts.
	//	Instead of creating all of the option box UI initially, only
	//	create that which is initially visible.  Wait, until the 
	//	other tabs are selected to create the remaining UI.
	//
	string $tabLayout = `tabLayout -scrollable 1`;

	//	Attach an action that will be invoked before a tab is selected.
	//	
	tabLayout -edit 
		-preSelectCommand ("createFlareTabUI " + $tabLayout)
		$tabLayout;

	//	Create just the immediate children of the tab layout so that
	//	the tabs appear.
	//
	columnLayout;
		setParent ..;
	columnLayout;
		setParent ..;
	
	//	Set the tab labels.
	//
	tabLayout -edit
		-tabLabelIndex 1 (uiRes("m_performFlare.kBasic"))
		-tabLabelIndex 2 (uiRes("m_performFlare.kAdvanced"))
		$tabLayout;

	//	Create the UI for the tab that is initially visible.
	//
	createFlareTabUI($tabLayout);

	//	Step 5: Deactivate the default UI template.
	//  ===========================================
	//
	//	Note: this option box example delays the creation of the UI
	//	until it's required.  Therefore this step is moved to the
	//	procedure where the UI is actually created.
	//
	//	See also Step 2. 
	//
	//setUITemplate -popTemplate;

	//	Step 6: Customize the buttons.  
	//	==============================
	//
	//	Provide more descriptive labels for the buttons.  This is not 
	//	necessary, but in some cases, for example, a button labelled 
	//	'Create' may be more meaningful to the user than one labelled
	//	'Apply'.
	//
	//  Disable those buttons that are not applicable to the option box.
	//
	//	Attach actions to those buttons that are applicable to the option
	//	box.  Note that the 'Close' button has a default action attached 
	//	to it that will hide the window.  If a a custom action is
	//	attached to the 'Close' button then be sure to call the 'hide the
	//	option box' procedure within the custom action so that the option
	//	box is hidden properly.

	//	'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-label (uiRes("m_performFlare.kCreate")) 
		-command ($callback + " " + $tabLayout + " " + 1)
		$applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $tabLayout + " " + 0 + "; hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $tabLayout + " " + 1 + " " + 0)
		$resetBtn;

	//	Step 7: Set the option box title.
	//	=================================
	//
	setOptionBoxTitle (uiRes("m_performFlare.kCreateFlareDeformerOptions"));

	//	Step 8: Customize the 'Help' menu item text.
	//	============================================
	//
	setOptionBoxHelpTag( "Flare" );

	//	Step 9: Set the current values of the option box.
	//	=================================================
	//
	//	NOTE:  Can not do this here since we do not know what UI is
	//	currently visible.  This is moved to where the UI is created.
	//
	//eval (($setup + " " + $tabLayout + " " + 0));	
	
	//	Step 10: Show the option box.
	//	=============================
	//
	showOptionBox();
}

//
//  Procedure Name:
//      optionBoxExample1Help
//
//  Description:
//		Return a short description about this command.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      string.
//
proc string flareHelp()
{
	return 
	"  Command: flare - creates a flare\n" +
	"Selection: Deformable geometry.";	
}

proc string getCmd()
{
	string $cmd = "nonLinear -type flare ";

	$cmd += " -lowBound " + `optionVar -query flareMin`;
	$cmd += " -highBound " + `optionVar -query flareMax`;
	$cmd += " -startFlareX " + `optionVar -query flareStartFlareX`;
	$cmd += " -startFlareZ " + `optionVar -query flareStartFlareZ`;
	$cmd += " -endFlareX " + `optionVar -query flareEndFlareX`;
	$cmd += " -endFlareZ " + `optionVar -query flareEndFlareZ`;
	$cmd += " -curve " + `optionVar -query flareCurve`;

 	// Build a positioning flag if needed
	//
	string $positioning = `optionVar -query flarePositioning`;
	if ($positioning != "default") {
		$cmd += (" -" + $positioning);
	}
	
	int $exc=`optionVar -query flareExclusive`;
	if ($exc) {
		string $exn=`optionVar -query flareExclName`;
		if ($exn!="") {
			// make sure that we do not clash names with an existing
			// partition when the user requested a new partition, even
			// if the user may have entered a non-unique name
			//
			if ($exc == 1) 	$exn += "#";
			$cmd += (" -exclusive \"" + $exn+"\"");
		}
	}

	return $cmd;
}


//
//  Procedure Name:
//      performFlare
//
//  Description:
//		Perform the flare command using the corresponding 
//		option values.  This procedure will also show the option box
//		window if necessary as well as construct the command string
//		that will invoke the flare command with the current
//		option box values.
//
//  Input Arguments:
//      0 - Execute the command.
//      1 - Show the option box dialog.
//      2 - Return the command.
//
//  Return Value:
//      None.
//
global proc string performFlare(int $action)
{
	string $cmd = "";

	switch ($action) {

		//	Execute the command.
		//
		case 0:
			//	Retrieve the option settings
			//
			setOptionVars(false);

			//	Get the command.
			//
			$cmd = getCmd();

			//	Execute the command with the option settings.
			//
			evalEcho($cmd);

			break;

		//	Show the option box.
		//
		case 1:
			flareOptions;
			break;

		//	Return the command string.
		//
		case 2:
			//	Retrieve the option settings.
			//
			setOptionVars (false);

			//	Get the command.
			//
			$cmd = getCmd();
			break;
	}
	return $cmd;
}

