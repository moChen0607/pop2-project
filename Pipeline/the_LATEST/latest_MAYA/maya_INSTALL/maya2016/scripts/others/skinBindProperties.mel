// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


proc skinInfluenceFrame()
{
	// Influence object
	//
	columnLayout;
		// source skinClusterInflMenu;
		global string $gSkinBindInfluencesList;
		
	   // Influences Display mode			      
		rowColumnLayout -nc 4		        
		   -cw 1 38 -cw 2 106 -cw 3 92 -cw 4 98;
		   text -label (uiRes("m_skinBindProperties.kSortTransforms"));
		   radioCollection;
		      radioButton -label (uiRes("m_skinBindProperties.kAlphabetically")) bindSortRadioAlphabetical ;
		      radioButton -label (uiRes("m_skinBindProperties.kByHierarchy")) bindSortRadioHierarchy ;	    
		      radioButton -label (uiRes("m_skinBindProperties.kByFlatHierarchy"))  bindSortRadioFlat ;	    
				    
		setParent ..;						
		separator -h 10 -style "none";
				
		// Influences list
		frameLayout 
			-borderVisible yes 
			-collapsable false 
			-labelVisible yes					// Label is required otherwise the border does not appear
			-label (uiRes("m_skinBindProperties.kInfluencesListLabel"));
					
			columnLayout -adj true;
				string $filterLayout = `formLayout`;
				$gSkinBindInfluencesList = `treeView -w 90 -h 250 -numberOfButtons 1 bindingInflList`;
				treeView -e -enableKeys 1 $gSkinBindInfluencesList;
				string $filterField = filterUICreateField($gSkinBindInfluencesList, $filterLayout);
				setParent ..;
						
				formLayout
				-edit
				-attachForm $filterField "left"		0
				-attachForm $filterField "right"	0
				-attachForm $filterField "top" 		0
				-attachNone $filterField "bottom"
				-attachForm $gSkinBindInfluencesList "left"		0
				-attachForm $gSkinBindInfluencesList "right"	0
				-attachControl $gSkinBindInfluencesList "top" 0 $filterField
				-attachForm $gSkinBindInfluencesList "bottom" 0							
				$filterLayout;

			setParent ..;
		setParent ..;

	setParent ..;
}


global proc skinBindProperties () 
{
	// TO DO: set up varOption
	
	string $emptyLabel = "";
	if (`about -linux`) {
		$emptyLabel = " ";
	}
	
	string $parent = `toolPropertyWindow -q -location`;
	setParent $parent;

	setUITemplate -pushTemplate OptionsTemplate;
	
	columnLayout -adj true skinBind;
	
		frameLayout -label (uiRes("m_skinBindProperties.kInfluence")) 
       		-collapsable true -collapse false 
			skinBindOperationFrame;
			
			skinInfluenceFrame();

   		setParent ..;
		
		frameLayout 
			-label (uiRes("m_skinBindProperties.kSkinBindReflacSettings"))
			-collapsable true -collapse false ;
			
			columnLayout IBReflectLayout;
			
				// Reflection Mode.
				rowLayout -nc 2 -cw2 275 35 -columnAttach 1 "left" 0 -columnAttach 2 "right" 0;
					checkBoxGrp 
						-label (uiRes("m_skinBindProperties.kReflection"))  -label1 "" 
						-annotation (uiRes("m_skinBindProperties.kReflectionModeAnnot")) 
						-width 150
						IBReflectionOptionsMode;
           
				setParent ..;
				
				// Reflection space
				string $objectSpace = (uiRes("m_skinBindProperties.kObjectSpace"));
				radioButtonGrp -nrb 2 -cw3 131 128 85
					-label (uiRes("m_skinBindProperties.kSpace")) 
					-labelArray2 (uiRes("m_skinBindProperties.kWorldSpace")) $objectSpace
					-annotation (uiRes("m_skinBindProperties.kReflectionAboutAnnot")) 
					IBReflectionSpace;
					
				// Reflection Axis
				string $yAxis = (uiRes("m_skinBindProperties.kY"));  
				string $zAxis = (uiRes("m_skinBindProperties.kZ"));  
				radioButtonGrp -nrb 3 -cw4 131 63 63 63
					-label (uiRes("m_skinBindProperties.kReflectionAxis")) 
					-labelArray3 (uiRes("m_skinBindProperties.kX")) $yAxis $zAxis
					-annotation (uiRes("m_skinBindProperties.kReflectionAxisSelectionAnnot")) 
					IBReflectionOptionsAxis;
		
				floatSliderGrp -field true -label (uiRes("m_skinBindProperties.kTolerance"))  
					-annotation (uiRes("m_skinBindProperties.kToleranceAnnot")) 
					-precision 4
					-min 0.001 -max 10.0 
					-fieldMinValue 0.0001
					-fieldMaxValue 1000.0 
					IBReflectionOptionsTol;
			
		   	setParent ..;
		setParent ..;   			
		frameLayout -collapsable true -collapse false
			-label (uiRes("m_skinBindProperties.kSkinBindSettings")) ;
			columnLayout skinBindCtrlOptions;
			
				rowLayout -nc 2;	
					text 
						(uiRes("m_skinBindProperties.kBindFalloffCurve"));	
					gradientControlNoAttr
						-h 90
						skinBindFalloffRamp;
				setParent ..;

				rowLayout -nc 2 -cw 2 230;
				int $presetCellSize = 23;
					text -label
						(uiRes("m_skinBindProperties.kFalloffCurvePresets")) skinBindFalloffPresetsText;

					gridLayout -numberOfColumns 5 -cellWidthHeight $presetCellSize $presetCellSize akinBindProfilePresetsGrid;
						iconTextButton -image "softCurveProfile.png" ibSoftTextButton;
						iconTextButton -image "mediumCurveProfile.png" ibMediumTextButton; 
						iconTextButton -image "tightCurveProfile.png" ibMediumHardTextButton;	// temp PNG file
						iconTextButton -image "hardCurveProfile.png" ibHardTextButton;
						iconTextButton -image "linearCurveProfile.png" ibLinearTextButton;
						
						setParent ..;
				setParent ..;

	
				// Influences Display mode			      
				rowLayout -nc 4 -cw 2 75 -cw 3 95;
					text -label (uiRes("m_skinBindProperties.kIBDisplayMode"));
					radioCollection ibDisplayCollection;
						radioButton -label (uiRes("m_skinBindProperties.kIBNone")) ibDisplayNone ;
						radioButton -label (uiRes("m_skinBindProperties.kIBNeighboring")) ibDisplayIntersecting ;	    
						radioButton -label (uiRes("m_skinBindProperties.kIBAll"))  ibDisplayAll ;
				  
				setParent ..;

				rowLayout -nc 3 -cw 2 75;
					text -label (uiRes("m_skinBindProperties.kDisplayWeights"));
					radioCollection ibWeightDisplayCollection;
						radioButton -label (uiRes("m_skinBindProperties.kIBSelectDisplay")) ibDisplaySelect ;
						radioButton -label (uiRes("m_skinBindProperties.kIBNormalDisplay")) ibDisplayNormalize ;	    
				  
				setParent ..;

				rowLayout -nc 2;	
					text -label (uiRes("m_skinBindProperties.kBindColorCurve"));
					gradientControlNoAttr
						-h 90
						-rampAsColor true
						skinBindColorRamp;
				setParent ..;

				colorSliderGrp -label (uiRes("m_skinBindProperties.kSindColorSlider")) 
						skinBindColorRampSlider;
						
				rowLayout -nc 2 -cw 2 230;
					text -label
						(uiRes("m_skinBindProperties.kColorCurvePresets")) skinBindColorPresetsText;

					gridLayout -numberOfColumns 3 -cellWidthHeight $presetCellSize $presetCellSize akinBindColorPresetsGrid;
						iconTextButton -image "colorPresetBlackRedYellow.png" ibHotColorTextButton;   
						iconTextButton -image "colorPresetSpectrum.png" ibFullRangeColorTextButton; 
						iconTextButton -image "colorPresetGrayscale.png" ibGreyColorTextButton; 
						setParent ..;
				setParent ..;							

			setParent ..;
		setParent ..;
	setParent ..;	

	setUITemplate -popTemplate;

	// build the  
	bindingSelectInfluence();

}

