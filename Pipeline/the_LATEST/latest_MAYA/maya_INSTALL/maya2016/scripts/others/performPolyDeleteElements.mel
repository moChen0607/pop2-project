// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

proc deleteFace(string $selectedFaces[])
{
	//get the list of edges correspoding to the selected faces
	//select the edges
	string $edges[] = `polyListComponentConversion -ff -te $selectedFaces`;
	select $edges;
	
	//save edges in a set since IDs may change when faces get deleted
	string $edgeSet = `sets`;

	//delete the faces and select the border edges only
	delete $selectedFaces;
	select -r $edgeSet;
}

global proc performPolyDeleteElements()
{
	global int $gSelectMeshesBit;
	global int $gSelectMeshVerts;
	global int $gSelectMeshEdge;
	global int $gSelectMeshFaces;
	
	string $objList[] =	`filterExpand -expand false -selectionMask $gSelectMeshesBit`;
	string $vertList[] = `filterExpand -expand false -selectionMask $gSelectMeshVerts`;
	string $edgeList[] = `filterExpand -expand false -selectionMask $gSelectMeshEdge`;
	string $faceList[] = `filterExpand -expand false -selectionMask $gSelectMeshFaces`;

 	if(size($objList) != 0)
 	{
		select -deselect $objList;
	}

 	if(size($vertList) != 0)
 	{
 		DeleteVertex;
	}
	else if(size($edgeList) != 0)
	{
		DeleteEdge;
	}
	else if(size($faceList) != 0)
	{
		deleteFace($faceList);		
	}
	else
		warning( (uiRes("m_performPolyDeleteElements.kWarningNoVerticesEdgesSelected")) );
}
