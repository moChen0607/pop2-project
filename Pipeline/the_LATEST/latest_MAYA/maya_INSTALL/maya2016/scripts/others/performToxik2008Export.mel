// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.



global string $Toxik2008ExportPrefix = "Toxik2008Export";

global string $Toxik2008ExportNames[] = {
	"FileName",
	"ToxikLocation",						
	"RenderDirectory",						
	"TempDir",

	"CompName", 
	"DestFolder", 
	"LayerFolder",	
	"PythonScriptArgs"                        
};

global int $Toxik2008ExportFirstText = 4; // first are textButtonGrp

global string $Toxik2008ExportIntNames[] = {
    "ExportCameras",
	"ExportLayers",
	"ExportLocators"
};

proc setOptionVars(int $forceFactorySettings)
{
	global string $Toxik2008ExportPrefix;
	global string $Toxik2008ExportNames[];
	global string $Toxik2008ExportIntNames[];

	string $toxik = "C:/Program Files/Autodesk/Autodesk Toxik 2008";

	if (! `about -win`) {
		$toxik = "/opt/Autodesk/Autodesk_Toxik-2008";
	}

	// Need to match ToxikExportNames
	string $ToxikExportDefaults[] = {
		"",
		$toxik,
		"",
		"",
		
		"", 
		"", 
		"",
		""
	};



	// Need to match ToxikExportIntNames
	int $ToxikExportIntDefaults[] = {
		1,									// ExportCameras = None
		2,                                  // ExportLayers = All
		0                                   // Export Locators = False
	};

	int $i;
	for ($i = 0 ; $i<size($Toxik2008ExportNames) ; $i++) {
		string $name = $Toxik2008ExportPrefix + $Toxik2008ExportNames[$i];
		if ($forceFactorySettings || !`optionVar -exists $name`)
			optionVar -stringValue $name $ToxikExportDefaults[$i];
	}

	for ($i = 0 ; $i<size($Toxik2008ExportIntNames) ; $i++) {
		string $name = $Toxik2008ExportPrefix + $Toxik2008ExportIntNames[$i];
		if ($forceFactorySettings || !`optionVar -exists $name`)
			optionVar -intValue $name $ToxikExportIntDefaults[$i];
	}
}

proc int performToxik2008ExportIsToxikSupported() {
	if (`about -mac`) return 0;
	return 1;
}

global proc performToxik2008ExportSetup(
	string $parent,
	int $forceFactorySettings)
{
	global string $Toxik2008ExportPrefix;
	global string $Toxik2008ExportNames[];
	global string $Toxik2008ExportIntNames[];
	global int $Toxik2008ExportFirstText;

	setOptionVars($forceFactorySettings);
	setParent $parent;
     
	int $i;
	for ($i = 0 ; $i<size($Toxik2008ExportNames) ; $i++) {
		string $name = ($Toxik2008ExportPrefix + $Toxik2008ExportNames[$i]);
		string $val = `optionVar -query $name`;
		if ($i<$Toxik2008ExportFirstText) {
			if (`textFieldButtonGrp -exists $name`) {
				textFieldButtonGrp -edit -text $val $name;
			}
		}
		else {
			if (`textFieldGrp -exists $name`) {
				textFieldGrp -edit -text $val $name;
			}
		}
	}

	for ($i = 0 ; $i<size($Toxik2008ExportIntNames) ; $i++) {
		string $name = ($Toxik2008ExportPrefix + $Toxik2008ExportIntNames[$i]);
		int $ival = `optionVar -query $name`;
		switch ($i) {
			case 0: 
			case 1:
				optionMenuGrp -edit -select $ival $name;
				break;
			default: 
				checkBoxGrp -edit -value1 $ival $name;
				break;
		}
	}
}

global proc performToxik2008ExportCallBack (string $parent, int $mode)
{
	global string $Toxik2008ExportPrefix;
	global string $Toxik2008ExportNames[];
	global string $Toxik2008ExportIntNames[];
	global int $Toxik2008ExportFirstText;

	setParent $parent;

	int $i;
	for ($i = 0 ; $i<size($Toxik2008ExportNames) ; $i++) {
		string $name = $Toxik2008ExportPrefix + $Toxik2008ExportNames[$i];
		string $val;
		if ($i<$Toxik2008ExportFirstText) {
			if (`textFieldButtonGrp -exists $name`) {
				$val = `textFieldButtonGrp -query -text $name`;
			}
		}
		else {
			if (`textFieldGrp -exists $name`) {
				$val = `textFieldGrp -query -text $name`;
			}
		}
		optionVar -stringValue $name $val;
	}

	for ($i = 0 ; $i<size($Toxik2008ExportIntNames) ; $i++) {
		string $name = ($Toxik2008ExportPrefix + $Toxik2008ExportIntNames[$i]);
		int $ival;
		switch ($i) {
			case 0: 
			case 1:
				$ival = `optionMenuGrp -query -select $name`; 
				break;
			default: 
				$ival = `checkBoxGrp -query -value1 $name`;
				break;
		}
		optionVar -intValue $name $ival;
	}

	if ($mode) {
		$mode --;
		performToxik2008Export $mode;
		addToRecentCommandQueue ("performToxik2008Export "+$mode)
			"Toxik2008Export";
	}
}

global proc int toxik2008ExportRenderDirBrowseCallBack(
	string $fileName, string $fileType)
{
	global string $Toxik2008ExportPrefix;
	if ($fileName != "") {
		textFieldButtonGrp -e -fileName $fileName
			($Toxik2008ExportPrefix+"RenderDirectory");
	}
	optionVar -stringValue ($Toxik2008ExportPrefix+"RenderDirectory") $fileName; 
	return true;
}

global proc toxik2008ExportRenderDirBrowse()
{
	global string $Toxik2008ExportPrefix;
	string $dir = `optionVar -query ($Toxik2008ExportPrefix+"RenderDirectory")`;
	if ( $dir == "" )
	{
		$dir = `workspace -q -rd`;
		string $imageDir = `workspace -query -fileRuleEntry image`;
		$dir = `setWorkingDirectory $dir "image" $imageDir`;
	}

	// set the workspace dir for the fileBrowser to open in
	string $curWSDir = `workspace -q -dir`;
	workspace -dir $dir;

	// show the file browser
	fileBrowser("toxik2008ExportRenderDirBrowseCallBack",
				"Set Render Directory", // Button name
				"",		// Type
				4				// Directory
				); 

	// restore the workspace dir
	workspace -dir $curWSDir;	
}

global proc int toxik2008ExportTempDirBrowseCallBack(
	string $fileName, string $fileType)
{
	global string $Toxik2008ExportPrefix;
	if ($fileName != "") {
		textFieldButtonGrp -e -fileName $fileName
			($Toxik2008ExportPrefix+"TempDir");
	}
	optionVar -stringValue ($Toxik2008ExportPrefix+"TempDir") $fileName; 
	return true;
}

global proc toxik2008ExportTempDirBrowse()
{
	global string $Toxik2008ExportPrefix;
	string $dir = `optionVar -query ($Toxik2008ExportPrefix+"TempDir")`;
	if ( $dir == "" )
	{
		$dir = `workspace -q -rd`;
		string $sceneDir = `workspace -query -objectTypeEntry scene`;
		$dir = `setWorkingDirectory $dir "scene" $sceneDir`;
	}

	// set the workspace dir for the fileBrowser to open in
	string $curWSDir = `workspace -q -dir`;
	workspace -dir $dir;

	// show the file browser
	fileBrowser("toxik2008ExportTempDirBrowseCallBack",
				"Set Temporary File Directory", // Button name
				"",		// Type
				4				// Directory
				); 

	// restore the workspace dir
	workspace -dir $curWSDir;	
}

global proc int toxik2008ExportToxikBrowseCallBack(string $fileName, string $fType)
{
	global string $Toxik2008ExportPrefix;
	if ($fileName != "")
		textFieldButtonGrp -e -fileName $fileName 
			($Toxik2008ExportPrefix+"ToxikLocation");
	optionVar -stringValue ($Toxik2008ExportPrefix+"ToxikLocation") $fileName; 
	return true;
}

global proc toxik2008ExportToxikBrowse()
{
	global string $Toxik2008ExportPrefix;
	string $dir = `optionVar -query ($Toxik2008ExportPrefix+"ToxikLocation")`;
	if ( $dir == "" )
	{
		if (`about -win`) 
			$dir = "C:/Program Files/Autodesk";
		else
			$dir = "/opt";
	}
	// set the workspace dir for the fileBrowser to open in
	string $curWSDir = `workspace -q -dir`;
	workspace -dir $dir;

	// show the file browser
	fileBrowser("toxik2008ExportToxikBrowseCallBack", 
				"Set",			// Button name
				"",		// Type
				4				// Directory
				);

	// restore the workspace dir
	workspace -dir $curWSDir;
}

global proc int toxik2008ExportToxikFileBrowseCallBack(string $fileName, string $fType)
{
	global string $Toxik2008ExportPrefix;
	if ($fileName != "")
		textFieldButtonGrp -e -fileName $fileName 
			($Toxik2008ExportPrefix+"FileName");
	optionVar -stringValue ($Toxik2008ExportPrefix+"FileName") $fileName; 
	return true;
}

global proc toxik2008ExportToxikFileBrowse()
{
	global string $Toxik2008ExportPrefix;
	string $dir = `optionVar -query ($Toxik2008ExportPrefix+"FileName")`;
	if ($dir == "")
	{
		if (`about -win`) {
			$dir = "C:/";
		}
		else
		{
			$dir = "/";
		}
	}
	string $fileType = "Toxik 2008 project (*.txproject)";
	string $filters[];
	$filters[0] = ($fileType + ",*.txproject");
	$filters[1] = ("All files,*");

	fileBrowserWithFilter("toxik2008ExportToxikFileBrowseCallBack", 
						  "Select",			// Button name
						  "Toxik 2008 project", // Window title
						  $fileType,		// Type
						  0,				// Read
						  $filters,			// Filters
						  $dir				// Directory
						  );
}

//
// Open the option box. The $option argument defines the mode:
// $option = 1: open the option box for export all layers
// $option = 3: open the option box for export selected layers
global proc performToxik2008ExportOptions (int $option)
{
	global string $Toxik2008ExportPrefix;

	//// Global template variables for form spacing
	global int $gOptionBoxTemplateFrameSpacing;
	//
	string $commandName = "performToxik2008Export";
	string $callback = ($commandName + "CallBack");
	string $setup = ($commandName + "Setup");

	string $layout = getOptionBox();
	setParent $layout;
	setUITemplate -pushTemplate OptionBoxTemplate;
	waitCursor -state 1;
	
	// Form layout
	string $parent = `scrollLayout`;

	columnLayout;

	int $spacing = 145;  // Matches option box spacing

	// Settings frame
		frameLayout -cll 1 -label (uiRes("m_performToxik2008Export.kToxikScene"));
		columnLayout;

			textFieldButtonGrp -label (uiRes("m_performToxik2008Export.kToxikFileName"))
				-cw 1 $spacing -cw 3 65
				-buttonLabel (uiRes("m_performToxik2008Export.kBrowse"))
				-cc "toxik2008ExportToxikFileBrowseCallBack(\"\",\"\")"
				-bc toxik2008ExportToxikFileBrowse
				($Toxik2008ExportPrefix+"FileName");
			textFieldGrp -label (uiRes("m_performToxik2008Export.kMainComp"))
				($Toxik2008ExportPrefix+"CompName");
			textFieldGrp -label (uiRes("m_performToxik2008Export.kDestFolder"))
				($Toxik2008ExportPrefix+"DestFolder");
			textFieldGrp -label (uiRes("m_performToxik2008Export.kLayerFolder"))
				($Toxik2008ExportPrefix+"LayerFolder");

			int $enableOpt = 0;
			if ( $option < 3 )
			{
				$enableOpt = 1;
			}

			optionMenuGrp -label (uiRes("m_performToxik2008Export.kExportCam")) -enable $enableOpt
				($Toxik2008ExportPrefix+"ExportCameras");
			menuItem -label (uiRes("m_performToxik2008Export.kNone"));
			menuItem -label (uiRes("m_performToxik2008Export.kAll"));
// Selected option is not yet supported, pending bug fix in Maya
//			menuItem -label _L10N(kSelected,"Selected");

			optionMenuGrp -label (uiRes("m_performToxik2008Export.kExportLay")) -enable $enableOpt
				($Toxik2008ExportPrefix+"ExportLayers");
			menuItem -label (uiRes("m_performToxik2008Export.kNone"));
			menuItem -label (uiRes("m_performToxik2008Export.kAll"));
// Selected option is not yet supported, pending bug fix in Maya
//			menuItem -label (uiRes("m_performToxik2008Export.kSelected"));

			checkBoxGrp -label (uiRes("m_performToxik2008Export.kExportLoc")) -enable $enableOpt
				($Toxik2008ExportPrefix+"ExportLocators");
			

		setParent ..;
		setParent ..;

		// Configuration Frame
		frameLayout -cll 1 -label (uiRes("m_performToxik2008Export.kToxikOutput"));
		columnLayout;

			int $isToxikHere = performToxik2008ExportIsToxikSupported();
			if ($isToxikHere) {
				textFieldButtonGrp -label (uiRes("m_performToxik2008Export.kToxikConfiguration"))
					-cw 1 $spacing -cw 3 65
					-buttonLabel (uiRes("m_performToxik2008Export.kBrowse"))
					-cc "toxik2008ExportToxikBrowseCallBack(\"\",\"\")"
					-bc toxik2008ExportToxikBrowse
					($Toxik2008ExportPrefix+"ToxikLocation");
				textFieldButtonGrp -label (uiRes("m_performToxik2008Export.kTempDir"))
					-cw 1 $spacing -cw 3 65
					-buttonLabel (uiRes("m_performToxik2008Export.kBrowse"))
					-cc "toxik2008ExportTempDirBrowseCallBack(\"\",\"\")"
					-bc toxik2008ExportTempDirBrowse
					($Toxik2008ExportPrefix+"TempDir");
				textFieldButtonGrp -label (uiRes("m_performToxik2008Export.kRenderDir"))
					-cw 1 $spacing -cw 3 65
					-buttonLabel (uiRes("m_performToxik2008Export.kBrowse"))
					-cc "toxik2008ExportRenderDirBrowseCallBack(\"\",\"\")"
					-bc toxik2008ExportRenderDirBrowse
					($Toxik2008ExportPrefix+"RenderDirectory");
				textFieldGrp -label (uiRes("m_performToxik2008Export.kPythonScriptArgs"))
					($Toxik2008ExportPrefix+"PythonScriptArgs");
			}

		setParent ..;
		setParent ..;

	setParent ..;
	setParent ..;

	waitCursor -state 0;
	setUITemplate -popTemplate;
	   
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit -label (uiRes("m_performToxik2008Export.kToxikExport"))
	    -command ($callback + " " + $parent + " " + $option)
		$applyBtn;
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;

	if ($option == 3) 
		setOptionBoxTitle((uiRes("m_performToxik2008Export.kExportSelOpt")));
	else
		setOptionBoxTitle((uiRes("m_performToxik2008Export.kExportAllOpt")));

	setOptionBoxHelpTag( "Toxik2008Export" );

	eval (($setup + " " + $parent + " " + 0));      
	showOptionBox();
}

//
// Main entry point. The $option argument defines the mode:
// $option = 0: export all
// $option = 1: open the option box for export all
// $option = 2: export selected layers
// $option = 3: open the option box for export selected layers
global proc string performToxik2008Export (int $option)
{
	//Save temp scene file

	string $cmd;
	if (($option == 1) || ($option == 3)) {
		performToxik2008ExportOptions($option);
	} 
	else {
		// Hardcoded paths
		string $toxik2008PythonSubDir = "/python/lib/python2.5";
		string $toxik2008PythonLibSubDir1 = "/python/lib/python2.5/autodesk_toxik/libs";
		if (!`about -win`)
		{
			$toxik2008PythonSubDir = "/lib/python2.5/site-packages";
			$toxik2008PythonLibSubDir1 = "/lib/python2.5/site-packages/autodesk_toxik/libs";
		}
		string $toxik2008PythonLibSubDir2 = "/lib";
		string $toxik2008PythonLibSubDir3 = "/plugins";
		string $toxik2008PythonLibSubDir4 = "/program";
		string $mayaPythonSubDir = "/python/lib/site-packages";
		string $mayaPythonLibSubDir = "/python/DLLs";
		string $importScript = "/resources/bgTasks/mayaImport.py";

		string $sep = ":";
		if (`about -win`)
		{
			$sep = ";";
		}

		setOptionVars(0);


		//Extract option data

		string $compName = `optionVar -query Toxik2008ExportCompName`;
		if ($compName == "")
		{
			$compName = `file -query -shortName -sceneName`;
			if ($compName == "")
			{
				$compName = (uiRes("m_performToxik2008Export.kUntitled"));
			}
		}

		string $tmpFile = "/" + $compName;

		string $tmpDir = `optionVar -query Toxik2008ExportTempDir`;
		if ($tmpDir == "")
		{
			if (`about -win`)
			{
				$tmpDir = `getenv TEMP`;
			}
			if ($tmpDir == "")
			{
				$tmpDir = "/tmp";
			}
		}
		$tmpDir = substituteAllString($tmpDir, "\\", "\\\\");
		$tmpFile = `workspace -expandName ($tmpDir+$tmpFile)`;

		string $toxikDir = `optionVar -query Toxik2008ExportToxikLocation`;
		$toxikDir = `workspace -en $toxikDir`;
		$toxikDir = substituteAllString($toxikDir, "\\", "\\\\");

		string $renderDir = `optionVar -query Toxik2008ExportRenderDirectory`;
		if ($renderDir == "")
		{
			$renderDir = `workspace -q -fileRuleEntry images`;
		}
		$renderDir = `workspace -en $renderDir`;
		$renderDir = substituteAllString($renderDir, "\\", "\\\\");

		string $pythonDir = ( `getenv MAYA_LOCATION` + "/bin" );
		$pythonDir = substituteAllString($pythonDir, "\\", "\\\\");

		string $outFile = `optionVar -query Toxik2008ExportFileName`;
		if ($outFile == "")
		{
			string $defaultFile = `file -query -shortName -sceneName`;
			if ($defaultFile == "")
			{
				$defaultFile = (uiRes("m_performToxik2008Export.kUntitled"));
			}
			string $sceneDir = `workspace -query -objectTypeEntry scene`;
			$outFile = $sceneDir+"/" + $defaultFile + ".txproject";
		}
		$outFile = `workspace -en $outFile`;
		$outFile = substituteAllString($outFile, "\\", "\\\\");

		string $mayaDir = `getenv "MAYA_LOCATION"`;
		$mayaDir = substituteAllString($mayaDir, "\\", "\\\\");

		string $compFolder = `optionVar -query Toxik2008ExportDestFolder`;
		if ($compFolder == "")
		{
			$compFolder = $compName;
		}

		string $layerFolder = `optionVar -query Toxik2008ExportLayerFolder`;
		if ($layerFolder == "")
		{
			$layerFolder = $compName + " Layer";
		}

		string $extraArgs = `optionVar -query Toxik2008ExportPythonScriptArgs`;

		// Validate the toxik 2008 location
		$importScript = ($toxikDir + $importScript);
		if ( !`file -q -exists $importScript` )
		{
			error (uiRes("m_performToxik2008Export.kNoImportScript"));
		}

		// save temporary file
		//=====================

		// Save the old selection list
		$cmd = $cmd + "string $selectedItems[] = `ls -long -selection`;\n";
		
		// Select the data that needs to be saved
		$cmd = $cmd + "string $exportFlags = \"" + $extraArgs + "\";\n";
		$cmd = $cmd + "select -clear;\n";

		int $exportLayersOption = `optionVar -query Toxik2008ExportExportLayers`;
		if ($option == 0)
		{
			if (`optionVar -query Toxik2008ExportExportLocators` != 0)
			{
				$cmd = $cmd + "select -add `ls -long -type \"locator\"`;\n";
				$cmd = $cmd + "$exportFlags = $exportFlags + \"--locators \";\n";
			}
			
			int $exportCameraOption = `optionVar -query Toxik2008ExportExportCameras`;
			switch ($exportCameraOption)
			{
			case 1: //None
			default:
				break;
			case 2: //All
				$cmd = $cmd + "string $allCameras[] = `ls -long -type \"camera\"`;\n";
				$cmd = $cmd + "select -add $allCameras;\n";
				$cmd = $cmd + "$exportFlags = $exportFlags + \"--cameras \";\n";
				break;

// Note: selected is not currently supported, waiting for a fix in Maya API
// 
//			case 3: //Selected
//				$cmd = $cmd + "string $selectedCameras[] = `listRelatives -fullPath -type \"camera\" $selectedItems`;\n";
//				$cmd = $cmd + "select -add $selectedCameras;\n";
//				$cmd = $cmd + "$exportFlags = $exportFlags + \"--cameras \";\n";
//				break;
			}

			switch ($exportLayersOption)
			{
			case 1: //None
			default:
				break;
			case 2: //All
				$cmd = $cmd + "select -add `ls -long -type \"renderLayer\"`;\n";
				$cmd = $cmd + "$exportFlags = $exportFlags + \"--renderlayers \";\n";
				break;

// Note: selected is not currently supported, waiting for a fix in Maya API
// 
//			case 3: //Selected
//				$cmd = $cmd + "select -add `getLayerSelection(\"Render\")`;\n";
//				$cmd = $cmd + "$exportFlags = $exportFlags + \"--renderlayers \";\n";
//				break;
			}
		}

// Note: Export selected layers is not currently supported, waiting for a fix in Maya API
//		else
//		{
//			$cmd = $cmd + "select -add `getLayerSelection(\"Render\")`;\n";
//			$cmd = $cmd + "$exportFlags = $exportFlags + \"--renderlayers \";\n";		
//		}

		// Only do the export if there is something to do
		$cmd = $cmd + "if (size(`ls -selection`) > 0) {\n";

		// Perform the save
		string $fileType[] = `file -q -type`;
		$cmd = $cmd + "    string $fileName = `file -type \"" + $fileType[0] + "\" -exportSelected \"" + $tmpFile + "\"`;\n";

		// setup environment for toxik import script
		$cmd = $cmd + "    putenv \"DL_INSTALL_DIR\" \"" + $toxikDir + "\";\n";

		$cmd = $cmd + "    putenv \"PYTHONPATH\" \"" +
			$toxikDir + $toxik2008PythonSubDir + $sep +
			$mayaDir + $mayaPythonSubDir + "\";\n";

		string $libPathEnvVar = "LD_LIBRARY_PATH";
		if (`about -win`)
		{
			$libPathEnvVar = "PATH";
		}

		$cmd = $cmd + "    string $oldPath = `getenv(\"" + $libPathEnvVar + "\")`;\n";
		$cmd = $cmd + "    putenv \"" + $libPathEnvVar + "\" ($oldPath+\""+ $sep + 
			$toxikDir + $toxik2008PythonLibSubDir1 + $sep +
			$toxikDir + $toxik2008PythonLibSubDir2 + $sep +
			$toxikDir + $toxik2008PythonLibSubDir3 + $sep +
			$toxikDir + $toxik2008PythonLibSubDir4 + $sep +
			$mayaDir  + $mayaPythonLibSubDir + "\");\n";

		$cmd = $cmd + "    waitCursor -state on;\n";

		// invoke toxik import script
		$cmd = $cmd + "    string $backup_dir = `pwd`;\n";
		$cmd = $cmd + "    chdir \"" + $pythonDir + "\";\n";
		$cmd = $cmd + "    system (\"mayapy \\\"" + $importScript + "\\\" " +
			"-m \\\"\" + $fileName + \"\\\" " +
			"-d \\\"" + $outFile + "\\\" \" + $exportFlags + \"";
		if ($compFolder != "")
		{
			$cmd = $cmd + "--destination \\\"" + $compFolder + "\\\" ";
		}
		if ($option == 2 || $exportLayersOption > 1)
		{
			$cmd = $cmd + "--renderlayersfolder \\\"" + $layerFolder + "\\\" ";
			$cmd = $cmd + "--renderdirectory \\\"" + $renderDir + "\\\" ";
		}
		if ($option == 2)
		{
			$cmd = $cmd + "--update ";
		}
		else
		{
			$cmd = $cmd + "--overwrite ";		
		}
		$cmd = $cmd + "\");\n";

		$cmd = $cmd + "    waitCursor -state off;\n";

		// restore environment
		$cmd = $cmd + "    putenv \"" + $libPathEnvVar + "\" $oldPath ;\n";
		$cmd = $cmd + "    chdir $backup_dir;\n";
		
		// cleanup temp file
		$cmd = $cmd + "    sysFile -delete $fileName;\n";		

		// If nothing to export : print a warning
		$cmd = $cmd + "} else {\n    warning \"" + (uiRes("m_performToxik2008Export.kExportCancel")) + 
			"\";\n}\n";

		// Restore the old selection list
		$cmd = $cmd + "select $selectedItems;\n";
	}

	evalEcho($cmd);

	return $cmd;
}
