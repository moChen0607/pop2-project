// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//<doc>
//<name psdConvertPSDToFileTexture>
//<owner "PSD">
//
//<synopsis>
//		string hypergraphConvertPsdToFile(string $psdFileNode)
//
//<description>
//		Converts the PSD file node to a file texture node with 
//		the image from the active layer set.
//
//<flags>
//		string $psdFileNode	The PSD file node name.
//
//<returns>
//		string : The newly created file node name.
//
//<examples>
//</doc>
//

global proc string  hypergraphConvertPsdToFile(string $psdFileNode)
{
	if(size($psdFileNode) == 0)
		return "";
		
	source "createRenderNode.mel";
		
	string $layerSetName =  `getAttr ($psdFileNode + ".layerSetName")`;
	string $psdFileName = `getAttr ($psdFileNode + ".fileTextureName")`;
	
	if(size($psdFileName) == 0)
	{
		string $msg = (uiRes("m_hypergraphConvertPsdToFile.kNoFileTexture"));
		error (`format -stringArg $psdFileNode $msg`);
		return "";
	}
	
	string $images = `workspace -q -fileRuleEntry "images"`;
	string $imageDir;
	if($images == ""){
	 	string $rootDir = `workspace -q -rootDirectory`;
	 	$imageDir = $rootDir + "images";
	 	if (!`filetest -d $imageDir`){
	 			sysFile -makeDir $imageDir;
	 	}
	}else{
	 	$imageDir = `workspace -expandName $images` ;
	}
	string $fileTexName = basenameEx($psdFileName);
	
	string $tempPath = $fileTexName + "_" + $layerSetName + ".iff";
	$tempPath = $imageDir + "/" + $tempPath;
	psdExport -ifn $psdFileName -ofn $tempPath -lsn $layerSetName -for "iff" -bpc 0;
	
	string $fileNode =  `shadingNode -asTexture file`;
	setAttr -type "string" ($fileNode + ".fileTextureName") $tempPath;
	
	// Get the input and output connections of the PSD node selected.
	// If input connections exist, then consider those connections or else
	// just create a file node and connect it.
	
	string $psdInputConnections[] = `listConnections -source on -destination off  -connections true -plugs true $psdFileNode`;
	string $psdOutputConnections[] = `listConnections -source off -destination on  -connections true -plugs true $psdFileNode`;
	int $index;
	if(size($psdInputConnections) > 0){
		for ($index = 0; $index < size($psdInputConnections); $index += 2){
			string $tokens[];
			tokenize $psdInputConnections[$index] "." $tokens;
			
			disconnectAttr $psdInputConnections[$index +1] $psdInputConnections[$index ] ;
			
			// Destination node is the PSD node and the source node is usually 
			// place2d node.
			$destinationConnection = $fileNode + "." + $tokens[1];
			$sourceConnection = $psdInputConnections[$index + 1];
			connectAttr -force $sourceConnection $destinationConnection;
		}
		
	}
    
    for ($index = 0; $index < size($psdOutputConnections); $index += 2)
    {
		string $tokens[];
		tokenize $psdOutputConnections[$index] "." $tokens;
		$sourceConnection = $fileNode + "." + $tokens[1];
		$destinationConnection = $psdOutputConnections[$index + 1];
		connectAttr -force $sourceConnection $destinationConnection;
    }
   
	return $fileNode;
}
