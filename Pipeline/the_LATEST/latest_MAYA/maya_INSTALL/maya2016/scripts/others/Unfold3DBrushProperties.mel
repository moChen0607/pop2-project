// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


global proc Unfold3DBrushProperties ()
{
	setUITemplate -pushTemplate OptionsTemplate;

	string $parent = `toolPropertyWindow -q -location`;
    setParent $parent;

	string $layoutLabel = (uiRes("m_Unfold3DBrushProperties.kU3DBrushOpotions"));
	string $mode = (uiRes("m_Unfold3DBrushProperties.kMode")),
		$unfoldMode = (uiRes("m_Unfold3DBrushProperties.kUnfoldMode")),
		$optimizeMode = (uiRes("m_Unfold3DBrushProperties.kOptimizeMode")),
		$brushSize = (uiRes("m_Unfold3DBrushProperties.kBrushSize")),
		$uvScale = (uiRes("m_Unfold3DBrushProperties.kUVScale")),
		$pressure = (uiRes("m_Unfold3DBrushProperties.kBrushPressure")),
		$iterations = (uiRes("m_Unfold3DBrushProperties.kIterations")),
		$selfBorder = (uiRes("m_Unfold3DBrushProperties.kSelfBorder")),
		$triFlips = (uiRes("m_Unfold3DBrushProperties.kTriFlips")),
		$srfAngle = (uiRes("m_Unfold3DBrushProperties.kSrfAngle"));

	columnLayout Unfold3DBrush;
		frameLayout -cll true -cl false -l $layoutLabel unfold3DBrushFrame;
			columnLayout Unfold3DBrushOptions;

				// Mode
				radioButtonGrp
					-label $mode
					-numberOfRadioButtons 2
					-la2 $unfoldMode $optimizeMode
					-vr
					mode;
				separator;
					
				// brush size
				floatSliderGrp
					-label $brushSize
					-ann $uvScale
					-field true
					-minValue 0.0 -maxValue 2.0
                    -fieldMinValue 0.0 -fieldMaxValue 100.0
					brushSize;
				// brush pressure
				floatSliderGrp
					-label $pressure
					-field true
					-minValue 0.0 -maxValue 1.0
                    -fieldMinValue 0.0 -fieldMaxValue 1.0
					brushPressure;
				separator;
					
				// Iterations
				intSliderGrp
					-label $iterations
					-field true
					-minValue 1 -maxValue 10
                    -fieldMinValue 1 -fieldMaxValue 1000
					iterations;
				
				// border intersection
				// triangle flip
				checkBoxGrp
				    -numberOfCheckBoxes 2
				    -la2 $selfBorder $triFlips
				    -cl2 "center" "center"
				    -vr
					-visible false
				    biti;
				separator;
				
				// surfangle
				floatSliderGrp
					-label $srfAngle
					-field true
					-minValue 0.0 -maxValue 1.0
                    -fieldMinValue 0.0 -fieldMaxValue 1.0
					surfangle;

			setParent ..; // Unfold3DBrushOptions
		setParent ..; // Unfold3DBrushFrame
	setParent ..; // Unfold3DBrush

	setUITemplate -popTemplate;

	Unfold3DBrushSetCallbacks($parent);
}

//	Description:
//		associate control events with callbacks
global proc Unfold3DBrushSetCallbacks(string $parent)
{
	setParent	$parent;
	string		$whichCtx = `currentCtx`;
	
	radioButtonGrp -e
		-on1 ("setToolTo " + $whichCtx + "; Unfold3DContext -e -unfold " + $whichCtx)
		-on2 ("setToolTo " + $whichCtx + "; Unfold3DContext -e -optimize " + $whichCtx)
		mode;
	
	floatSliderGrp -e
		-cc ("Unfold3DContext -e -sizeuv #1 " + $whichCtx)
		brushSize;
		
	floatSliderGrp -e
		-cc ("Unfold3DContext -e -pressure #1 " + $whichCtx)
		brushPressure;
		
	intSliderGrp -e
		-cc ("Unfold3DContext -e -ite #1 " + $whichCtx)
		iterations;
		
	checkBoxGrp -e
		-on1 ("Unfold3DContext -e -bi #1 " + $whichCtx)
		-on2 ("Unfold3DContext -e -tf #2 " + $whichCtx)
		biti;
				
	floatSliderGrp -e
		-cc ("Unfold3DContext -e -sa #1 " + $whichCtx)
		surfangle;
}
