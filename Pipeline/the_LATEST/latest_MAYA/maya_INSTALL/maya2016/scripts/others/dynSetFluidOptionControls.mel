// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

source dynSetFluidOptionVars.mel;
//
//
//  Creation Date:  December, 2000
//
//  Description:
//      This script contains code to set the values for the layout
//		controls for the given command selected from the Elements)
//		(or whatever Fluids ends up being finally called)
//		menu.  The values are obtained from the option vars.
//      Also do any enabling/disabling needed as a result of these
//      settings.
//
//  Input Arguments to dynCreateLayout():
//		int $theCmd -- the command for which the layout is being created
//		string $parent  -- the layout parent
//		int $setFactorySettings -- whether to set the default values.
//
//
global proc dynSetFluidOptionControls(string $theCmd, string $parent, int $setFactorySettings)
{
	string $procName = ("set"+$theCmd+"Controls");
	eval ($procName+" "+$parent+" "+$setFactorySettings);
}

global proc setExtendFluidControls (string $parent, int $setFactorySettings)
{
	// Retrieve the option settings
	//
	dynSetOptionVars( "ExtendFluid", $setFactorySettings );
	
	setParent $parent;
	
	// Query the optionVar's and set the values into the controls
	//	
	checkBoxGrp -e 
		-v1 `optionVar -query extendFluidRebuildIC` 
		extendFluidRebuildIC;
	intSliderGrp -e 
		-v `optionVar -query extendFluidMinX` 
		extendFluidMinX;
	intSliderGrp -e 
		-v `optionVar -query extendFluidMaxX` 
		extendFluidMaxX;
	intSliderGrp -e 
		-v `optionVar -query extendFluidMinY` 
		extendFluidMinY;
	intSliderGrp -e 
		-v `optionVar -query extendFluidMaxY` 
		extendFluidMaxY;
	intSliderGrp -e 
		-v `optionVar -query extendFluidMinZ`
		extendFluidMinZ;
	intSliderGrp -e 
		-v `optionVar -query extendFluidMaxZ` 
		extendFluidMaxZ;

}

global proc setResampleFluidControls (string $parent, int $setFactorySettings)
{
	// Retrieve the option settings
	//
	dynSetOptionVars( "ResampleFluid", $setFactorySettings );
	
	setParent $parent;
	
	// Query the optionVar's and set the values into the controls
	//	
	checkBoxGrp -e 
		-v1 `optionVar -query resampleFluidRebuildIC` 
		resampleFluidRebuildIC;
	intSliderGrp -e 
		-v `optionVar -query resampleFluidX` 
		resampleFluidX;
	intSliderGrp -e 
		-v `optionVar -query resampleFluidY` 
		resampleFluidY;
	intSliderGrp -e 
		-v `optionVar -query resampleFluidZ` 
		resampleFluidZ;

}

global proc setCreate3DFluidControls (string $parent, int $setFactorySettings)
{
	// Retrieve the option settings
	//
	dynSetOptionVars( "Create3DFluid", $setFactorySettings );
	
	setParent $parent;
	
	// Query the optionVar's and set the values into the controls
	//	
	intSliderGrp -e 
		-v `optionVar -query create3DFluidXRes` 
		create3DFluidXRes;
	intSliderGrp -e 
		-v `optionVar -query create3DFluidYRes` 
		create3DFluidYRes;
	intSliderGrp -e 
		-v `optionVar -query create3DFluidZRes` 
		create3DFluidZRes;
	floatSliderGrp -e 
		-v `optionVar -query create3DFluidXSize` 
		create3DFluidXSize;
	floatSliderGrp -e 
		-v `optionVar -query create3DFluidYSize` 
		create3DFluidYSize;
	floatSliderGrp -e 
		-v `optionVar -query create3DFluidZSize` 
		create3DFluidZSize;

}
global proc setCreate2DFluidControls (string $parent, int $setFactorySettings)
{
	// Retrieve the option settings
	//
	dynSetOptionVars( "Create2DFluid", $setFactorySettings );
	
	setParent $parent;
	
	// Query the optionVar's and set the values into the controls
	//	
	intSliderGrp -e 
		-v `optionVar -query create2DFluidXRes` 
		create2DFluidXRes;
	intSliderGrp -e 
		-v `optionVar -query create2DFluidYRes` 
		create2DFluidYRes;
	floatSliderGrp -e 
		-v `optionVar -query create2DFluidXSize` 
		create2DFluidXSize;
	floatSliderGrp -e 
		-v `optionVar -query create2DFluidYSize` 
		create2DFluidYSize;
	floatSliderGrp -e 
		-v `optionVar -query create2DFluidZSize` 
		create2DFluidZSize;
}

global proc setMakeCollideFluidControls (string $parent, int $setFactorySettings)
{
	// Retrieve the option settings
	//
	dynSetOptionVars( "MakeCollideFluid", $setFactorySettings );
	
	setParent $parent;
	
	// Query the optionVar's and set the values into the controls
	//	
	intSliderGrp -e 
		-v `optionVar -query tessellationFactor` 
		tessellationFactor;
}

global proc setFluidEmitterControls (string $parent, int $setFactorySettings)
{
	// Retrieve the option settings
	//
	dynSetOptionVars( "FluidEmitter", $setFactorySettings );
	
	setParent $parent;
	
	// Query the optionVar's and set the values into the controls
	//	
	textFieldGrp -e 
		-text `optionVar -query flEmitterName` 
		flEmitterName;

	checkBoxGrp -e 
		-v1 `optionVar -query flEmitterParenting` 
		flEmitterParenting;

	// If we are creating, then option var value of 5 (volume) should be set
	// to the control as 3.  
	//
	string $flEmitterType = `optionVar -query flEmitterTypeOM`;

	optionMenuGrp -e 
		-v $flEmitterType 
		flEmitterTypeOM;
	floatSliderGrp -e 
		-v `optionVar -query flEmitterDensityRate` 
		flEmitterDensityRate;
	floatSliderGrp -e 
		-v `optionVar -query flEmitterHeatRate` 
		flEmitterHeatRate;
	floatSliderGrp -e 
		-v `optionVar -query flEmitterFuelRate` 
		flEmitterFuelRate;
	floatSliderGrp -e 
		-v `optionVar -query flEmitterFluidDropoff` 
		flEmitterFluidDropoff;
	optionMenuGrp -e 
		-sl `optionVar -query flEmitterCycleOM` 
		flEmitterCycleOM;
	int $enabled = 0;
	if (`optionVar -query flEmitterCycleOM` > 1)
		$enabled = 1;
	intSliderGrp -e 
		-enable $enabled
		-v `optionVar -query flEmitterCycleInterval`
		flEmitterCycleInterval;

	floatSliderGrp -e 
		-v `optionVar -query flEmitterMaxDistance` 
		flEmitterMaxDistance;
	floatSliderGrp -e 
		-v `optionVar -query flEmitterMinDistance` 
		flEmitterMinDistance;

	optionMenuGrp -e 
		-sl `optionVar -query flEmitterVolumeShapeOM` 
		flEmitterVolumeShapeOM;

	floatSliderGrp -e 
		-v `optionVar -query flEmitterVolumeOffsetX` 
		flEmitterVolumeOffsetX;

	floatSliderGrp -e 
		-v `optionVar -query flEmitterVolumeOffsetY` 
		flEmitterVolumeOffsetY;

	floatSliderGrp -e 
		-v `optionVar -query flEmitterVolumeOffsetZ` 
		flEmitterVolumeOffsetZ;

	floatSliderGrp -e 
		-v `optionVar -query flEmitterVolumeSweep` 
		flEmitterVolumeSweep;

	floatSliderGrp -e 
		-v `optionVar -query flEmitterTorusSectionRadius` 
		flEmitterTorusSectionRadius;

	dynFluidEmitterOptionChoice( $parent );
	dynFluidEmitterCycleOptionChoice( $parent );
}

global proc setFluidEmitFromObjectControls (string $parent, int $setFactorySettings)
{
	// Retrieve the option settings
	//
	dynSetOptionVars( "FluidEmitFromObject", $setFactorySettings );
	
	setParent $parent;
	
	// Query the optionVar's and set the values into the controls
	//	
	textFieldGrp -e 
		-text `optionVar -query flEmitObjectName` 
		flEmitterName;

	// If we are creating, then option var value of 5 (volume) should be set
	// to the control as 3.  
	//
	string $flEmitterType = `optionVar -query flEmitObjectTypesOM`;

	optionMenuGrp -e 
		-v $flEmitterType 
		flEmitterTypeOM;
	floatSliderGrp -e 
		-v `optionVar -query flEmitObjectDensityRate` 
		flEmitterDensityRate;
	floatSliderGrp -e 
		-v `optionVar -query flEmitObjectHeatRate` 
		flEmitterHeatRate;
	floatSliderGrp -e 
		-v `optionVar -query flEmitObjectFuelRate` 
		flEmitterFuelRate;
	floatSliderGrp -e 
		-v `optionVar -query flEmitObjectFluidDropoff` 
		flEmitterFluidDropoff;
	optionMenuGrp -e 
		-sl `optionVar -query flEmitObjectCycleOM` 
		flEmitterCycleOM;
	int $enabled = 0;
	if (`optionVar -query flEmitObjectCycleOM` > 1)
		$enabled = 1;
	intSliderGrp -e 
		-enable $enabled
		-v `optionVar -query flEmitObjectCycleInterval`
		flEmitterCycleInterval;

	floatSliderGrp -e 
		-v `optionVar -query flEmitObjectMaxDistance` 
		flEmitterMaxDistance;
	floatSliderGrp -e 
		-v `optionVar -query flEmitObjectMinDistance` 
		flEmitterMinDistance;

	dynFluidEmitterOptionChoice( $parent );
	dynFluidEmitterCycleOptionChoice( $parent );
}

global proc set3DFluidAndEmitterControls (string $parent, int $setFactorySettings)
{
	// Retrieve the option settings
	//
	dynSetOptionVars( "3DFluidAndEmitter", $setFactorySettings );
	
	setParent $parent;
	
	// Query the optionVar's and set the values into the controls
	//	
	checkBoxGrp -e 
		-v1 `optionVar -query create3DAddEmitter` 
		createAddEmitter;

	textFieldGrp -e 
		-text `optionVar -query fl3DEmitterName` 
		flEmitterName;

	checkBoxGrp -e 
		-v1 `optionVar -query fl3DEmitterParenting` 
		flEmitterParenting;

	intSliderGrp -e 
		-v `optionVar -query create3DFluidXRes` 
		create3DFluidXRes;
	intSliderGrp -e 
		-v `optionVar -query create3DFluidYRes` 
		create3DFluidYRes;
	intSliderGrp -e 
		-v `optionVar -query create3DFluidZRes` 
		create3DFluidZRes;
	floatSliderGrp -e 
		-v `optionVar -query create3DFluidXSize` 
		create3DFluidXSize;
	floatSliderGrp -e 
		-v `optionVar -query create3DFluidYSize` 
		create3DFluidYSize;
	floatSliderGrp -e 
		-v `optionVar -query create3DFluidZSize` 
		create3DFluidZSize;

	string $flEmitterType = `optionVar -query fl3DEmitterTypesOM`;

	optionMenuGrp -e 
		-v $flEmitterType 
		flEmitterTypeOM;
	floatSliderGrp -e 
		-v `optionVar -query fl3DEmitterDensityRate` 
		flEmitterDensityRate;
	floatSliderGrp -e 
		-v `optionVar -query fl3DEmitterHeatRate` 
		flEmitterHeatRate;
	floatSliderGrp -e 
		-v `optionVar -query fl3DEmitterFuelRate` 
		flEmitterFuelRate;
	floatSliderGrp -e 
		-v `optionVar -query fl3DEmitterFluidDropoff` 
		flEmitterFluidDropoff;
	optionMenuGrp -e 
		-sl `optionVar -query fl3DEmitterCycleOM` 
		flEmitterCycleOM;
	int $enabled = 0;
	if (`optionVar -query fl3DEmitterCycleOM` > 1)
		$enabled = 1;
	intSliderGrp -e 
		-enable $enabled
		-v `optionVar -query fl3DEmitterCycleInterval`
		flEmitterCycleInterval;

	floatSliderGrp -e 
		-v `optionVar -query fl3DEmitterMaxDistance` 
		flEmitterMaxDistance;
	floatSliderGrp -e 
		-v `optionVar -query fl3DEmitterMinDistance` 
		flEmitterMinDistance;

	optionMenuGrp -e 
		-sl `optionVar -query fl3DEmitterVolumeShapeOM` 
		flEmitterVolumeShapeOM;

	floatSliderGrp -e 
		-v `optionVar -query fl3DEmitterVolumeOffsetX` 
		flEmitterVolumeOffsetX;

	floatSliderGrp -e 
		-v `optionVar -query fl3DEmitterVolumeOffsetY` 
		flEmitterVolumeOffsetY;

	floatSliderGrp -e 
		-v `optionVar -query fl3DEmitterVolumeOffsetZ` 
		flEmitterVolumeOffsetZ;

	floatSliderGrp -e 
		-v `optionVar -query fl3DEmitterVolumeSweep` 
		flEmitterVolumeSweep;

	floatSliderGrp -e 
		-v `optionVar -query fl3DEmitterTorusSectionRadius` 
		flEmitterTorusSectionRadius;

	enableAddEmitterControls( $parent );
}

global proc set2DFluidAndEmitterControls (string $parent, int $setFactorySettings)
{
	// Retrieve the option settings
	//
	dynSetOptionVars( "2DFluidAndEmitter", $setFactorySettings );
	
	setParent $parent;
	
	// Query the optionVar's and set the values into the controls
	//	
	checkBoxGrp -e 
		-v1 `optionVar -query create2DAddEmitter` 
		createAddEmitter;

	textFieldGrp -e 
		-text `optionVar -query fl2DEmitterName` 
		flEmitterName;

	checkBoxGrp -e 
		-v1 `optionVar -query fl2DEmitterParenting` 
		flEmitterParenting;

	intSliderGrp -e 
		-v `optionVar -query create2DFluidXRes` 
		create2DFluidXRes;
	intSliderGrp -e 
		-v `optionVar -query create2DFluidYRes` 
		create2DFluidYRes;
	floatSliderGrp -e 
		-v `optionVar -query create2DFluidXSize` 
		create2DFluidXSize;
	floatSliderGrp -e 
		-v `optionVar -query create2DFluidYSize` 
		create2DFluidYSize;
	floatSliderGrp -e 
		-v `optionVar -query create2DFluidZSize` 
		create2DFluidZSize;

	string $flEmitterType = `optionVar -query fl2DEmitterTypesOM`;

	optionMenuGrp -e 
		-v $flEmitterType 
		flEmitterTypeOM;
	floatSliderGrp -e 
		-v `optionVar -query fl2DEmitterDensityRate` 
		flEmitterDensityRate;
	floatSliderGrp -e 
		-v `optionVar -query fl2DEmitterHeatRate` 
		flEmitterHeatRate;
	floatSliderGrp -e 
		-v `optionVar -query fl2DEmitterFuelRate` 
		flEmitterFuelRate;
	floatSliderGrp -e 
		-v `optionVar -query fl2DEmitterFluidDropoff` 
		flEmitterFluidDropoff;
	optionMenuGrp -e 
		-sl `optionVar -query fl2DEmitterCycleOM` 
		flEmitterCycleOM;
	int $enabled = 0;
	if (`optionVar -query fl2DEmitterCycleOM` > 1)
		$enabled = 1;
	intSliderGrp -e 
		-enable $enabled
		-v `optionVar -query fl2DEmitterCycleInterval`
		flEmitterCycleInterval;

	floatSliderGrp -e 
		-v `optionVar -query fl2DEmitterMaxDistance` 
		flEmitterMaxDistance;
	floatSliderGrp -e 
		-v `optionVar -query fl2DEmitterMinDistance` 
		flEmitterMinDistance;

	optionMenuGrp -e 
		-sl `optionVar -query fl2DEmitterVolumeShapeOM` 
		flEmitterVolumeShapeOM;

	floatSliderGrp -e 
		-v `optionVar -query fl2DEmitterVolumeOffsetX` 
		flEmitterVolumeOffsetX;

	floatSliderGrp -e 
		-v `optionVar -query fl2DEmitterVolumeOffsetY` 
		flEmitterVolumeOffsetY;

	floatSliderGrp -e 
		-v `optionVar -query fl2DEmitterVolumeOffsetZ` 
		flEmitterVolumeOffsetZ;

	floatSliderGrp -e 
		-v `optionVar -query fl2DEmitterVolumeSweep` 
		flEmitterVolumeSweep;

	floatSliderGrp -e 
		-v `optionVar -query fl2DEmitterTorusSectionRadius` 
		flEmitterTorusSectionRadius;

	enableAddEmitterControls( $parent );
}
