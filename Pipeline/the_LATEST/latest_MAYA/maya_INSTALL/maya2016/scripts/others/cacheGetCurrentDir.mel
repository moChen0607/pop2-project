// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  2012
//
//  Description:
//      This script consolidates
//		- fluidCacheGetCurrentDir() in performCreateFluidCache.mel
//		- geomCacheGetCurrentDir() in performCreateGeometryCache.mel
//		- cacheGetCurrentDir() in performCreateNclothCache.mel
//      into cacheGetCurrentDir () 
//
//	Hardcoded "data" is now `workspace -q -fre $filerule` where $filerule is the corresponding file rule
//	for the particular cache type.
//


global proc string cacheGetCurrentDir(string $filerule, string $optionVarName, string $gCacheCurrentProject, int $import )
//
// Return a string corresponding to the current directory preference.
// Use the current project's data directory by default.
//
{
	// first find the current project directory, if it is defined
	//

	int $needSubdir = 1;
        // find the directory for the requested file rule, if it exists, or use the current proj
	string $currentRule = (`workspace -q -fre  $filerule`);

	// if the fileRule is null, this will return the current project
	// if it's relative, this will expand to include the project path, if its already absolute, it stays absolute.
	string 	$cacheDir = `workspace -en $currentRule`;
	$cacheDir += "/";

	// check what the user has as their preference
	//
	if (`optionVar -exists $optionVarName`)
	{
		string $cacheVar = `optionVar -q $optionVarName`;
		if ($cacheVar != $gCacheCurrentProject) {
			$cacheDir = $cacheVar;
			$needSubdir = 0;
		}
	}

	if( $needSubdir ) {
		// Find default subdirectory location
		//
		string $subDir = getNameForCacheSubDir( 0, $cacheDir, "" );
		string 	$cacheDirTmp =  $cacheDir + $subDir;
		if ( !$import || `file -q -ex $cacheDirTmp`) {
			$cacheDir = $cacheDirTmp;
		}

	}

	return $cacheDir;
}

