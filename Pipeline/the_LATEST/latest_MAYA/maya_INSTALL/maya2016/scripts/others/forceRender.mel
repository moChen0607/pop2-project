// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

// -*- mode: c -*-
//
//  Procedure Name:
//      forceRender
//
//  Description:
//		Given a render target argument, unconditionally render it
//		after rendering all its dependencies.
//
global proc forceRender(string $renderTarget)
{
  global string $gRenderViewRenderTarget;

  if ( objectType($renderTarget) != "renderTarget" ) {
    string $msg = (uiRes("m_forceRender.kNotARenderTarget"));
    error(`format -stringArg $renderTarget $msg`);
  }

  // Get the merged render tasks for the current camera and current
  // render layer.  Store the original render target, to restore it later.
  string $camera = getCurrentCamera();
  string $renderLayer = `editRenderLayerGlobals -q -currentRenderLayer`;
  string $oldRenderTarget = $gRenderViewRenderTarget;

  string $tasks[] = `getRenderTasks -c $camera -rl $renderLayer $renderTarget`;

  string $task;
  for ($task in $tasks) {
    // FIXME  The render target really needs to be an attribute on a
    // render globals node, so that attribute changed notification can
    // be used to propagate changes to the UI.  For now, since the
    // render target is only in a dynamically-built UI, this is not
    // yet an issue.
    python("task = " + $task);
    $gRenderViewRenderTarget = python("task['renderTarget']");
    string $taskCamera = python("task['camera']");
    string $taskRenderLayer = python("task['renderLayer']");
    editRenderLayerGlobals("-currentRenderLayer", $taskRenderLayer);
    trace("Rendering render target " + $gRenderViewRenderTarget + "\n");
    renderWindowRenderCamera("redoPreviousRender", "renderView", $taskCamera);
  }

  // Restore the original render layer and render target.
  $gRenderViewRenderTarget = $oldRenderTarget;
  editRenderLayerGlobals("-currentRenderLayer", $renderLayer);
}
