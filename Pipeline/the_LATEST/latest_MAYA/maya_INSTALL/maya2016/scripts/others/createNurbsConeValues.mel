// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


global proc createNurbsConeValues(string $toolName)
{
	string $name = "createNurbsCone";
	string $parent = (`toolPropertyWindow -q -location` + "|" + $name);
	setParent $parent;

	float	$startSweep		= `createNurbsConeCtx -q -startSweep $toolName`;
	float	$endSweep		= `createNurbsConeCtx -q -endSweep $toolName`;
	int		$sections		= `createNurbsConeCtx -q -sections $toolName`;
	int		$spans			= `createNurbsConeCtx -q -spans $toolName`;
	float	$rad			= `createNurbsConeCtx -q -radius $toolName`;
	float	$h				= `createNurbsConeCtx -q -height $toolName`;
	int		$surfDeg		= `createNurbsConeCtx -q -surfaceDegree $toolName`;
	int 	$axisType		= `createNurbsConeCtx -q -axisType $toolName`;
	float	$axis[3]		= `createNurbsConeCtx -q -axis $toolName`;
	int		$caps			= `createNurbsConeCtx -q -caps $toolName`;
	int		$exTrCaps		= `createNurbsConeCtx -q -extraTransformOnCaps $toolName`;
	int		$toleranceType	= `createNurbsConeCtx -q -toleranceType $toolName`;
	int		$tolerance		= `createNurbsConeCtx -q -tolerance $toolName`;
	
	int $dragEdit = `createNurbsConeCtx -q -doDragEdit $toolName`;	
	
	// Set control values and callbacks
	//	
	if( $axisType < 4 ) {
		radioButtonGrp -edit -select $axisType createNurbsConeAxisType1RadioButtonGrp;
	} else {
		radioButtonGrp -edit -select ($axisType - 3) createNurbsConeAxisType2RadioButtonGrp;
	}

	radioButtonGrp -edit 
		-onCommand1 ("floatFieldGrp -e -value 1.0 0.0 0.0 0.0 createNurbsConeAxisFieldsFloatGrp; createNurbsConeCtx -edit -axisType 1 -axis 1 0 0 " + $toolName )
		-onCommand2 ("floatFieldGrp -e -value 0.0 1.0 0.0 0.0 createNurbsConeAxisFieldsFloatGrp; createNurbsConeCtx -edit -axisType 2 -axis 0 1 0 " + $toolName )
		-onCommand3 ("floatFieldGrp -e -value 0.0 0.0 1.0 0.0 createNurbsConeAxisFieldsFloatGrp; createNurbsConeCtx -edit -axisType 3 -axis 0 0 1 " + $toolName )
		createNurbsConeAxisType1RadioButtonGrp;
		
	radioButtonGrp -edit
		-onCommand1 ("createNurbsConeCtx -edit -axisType 4 -axis " +
						"`floatFieldGrp -query -value1 createNurbsConeAxisFieldsFloatGrp` " +
						"`floatFieldGrp -query -value2 createNurbsConeAxisFieldsFloatGrp` " +
						"`floatFieldGrp -query -value3 createNurbsConeAxisFieldsFloatGrp` " +
						$toolName )
		-onCommand2 ("float $axis[] = `nurbsViewDirectionVector 1`; createNurbsConeCtx -edit -axisType 5 -axis $axis[0] $axis[1] $axis[2] " + $toolName )					
		createNurbsConeAxisType2RadioButtonGrp;

	floatFieldGrp -edit 
		-enable ($axisType == 4)
		-value $axis[0] $axis[1] $axis[2] 0.0
		-changeCommand ("createNurbsConeCtx -e -axis #1 #2 #3 " + $toolName)
		-value1 $axis[0] 
		-value2 $axis[1] 
		-value3 $axis[2]
		createNurbsConeAxisFieldsFloatGrp;

	radioButtonGrp -e 
		-select ($surfDeg == 3 ? 2 : 1)
		-onCommand1 ("createNurbsConeCtx -e -surfaceDegree 1 " + $toolName)
		-onCommand2 ("createNurbsConeCtx -e -surfaceDegree 3 " + $toolName)
		createNurbsConeSurfaceDegreeRadioButtonGrp;

	floatSliderGrp -e
		-v $startSweep
		-cc ("createNurbsConeCtx -e -startSweep #1 " + $toolName)
		createNurbsConeStartSweepSlider;

	floatSliderGrp -e
		-v $endSweep
		-cc ("createNurbsConeCtx -e -endSweep #1 " + $toolName)
		createNurbsConeEndSweepSlider;

	intSliderGrp -e 
		-v $sections
		-cc ("createNurbsConeCtx -e -sections #1 " + $toolName)
		createNurbsConeSectionsSlider;

	intSliderGrp -e 
		-v $spans
		-cc ("createNurbsConeCtx -e -spans #1 " + $toolName)
		createNurbsConeSpansSlider;

	radioButtonGrp -edit
		-select $toleranceType
		-onCommand1 ("createNurbsConeCtx -edit -toleranceType 1 -useTolerance 0 " + $toolName)
		-onCommand2 ("createNurbsConeCtx -edit -toleranceType 2 -useTolerance 1 -tolerance `floatSliderGrp -query -value createNurbsConeToleranceSlider` " + $toolName)
		-onCommand3 ("createNurbsConeCtx -edit -toleranceType 3 -useTolerance 1 " + $toolName)
		createNurbsConeToleranceRadioButtonGrp;
		
	if( $toleranceType == 1 ){
		
		tabLayout -edit
			-visible true -selectTab createNurbsConeTabWithoutTolerance
			createNurbsConeTabLayoutForTolerance;
			
	} else {		
		
		if( $toleranceType == 2 ){
			
			tabLayout -edit
				-visible true -selectTab createNurbsConeTabWithTolerance
				createNurbsConeTabLayoutForTolerance;
				
		} else {
			
			tabLayout -edit
				-visible false
				createNurbsConeTabLayoutForTolerance;
		}
	}	
		
	floatSliderGrp -edit
		-value $tolerance
		-changeCommand ("createNurbsConeCtx -edit -tolerance #1 " + $toolName)
		createNurbsConeToleranceSlider;

	radioButtonGrp -e 
		-select ($caps + 1)
		-onCommand ("createNurbsConeCtx -e -caps (`radioButtonGrp -q -select createNurbsConeCapsRadioButtonGrp` - 1) " + $toolName)
		createNurbsConeCapsRadioButtonGrp;

	checkBoxGrp -e
		-value1 $exTrCaps
		-cc ("createNurbsConeCtx -e -extraTransformOnCaps #1 " + $toolName)
		createNurbsConeExtraTransformOnCapsCheckBox;

	
	floatSliderGrp -e
		-v $rad
		-cc ("createNurbsConeCtx -e -radius #1 " + $toolName)
		createNurbsConeRadiusSlider;

	floatSliderGrp -e
		-v $h
		-cc ("createNurbsConeCtx -e -height #1 " + $toolName)
		createNurbsConeHeightSlider;

	checkBoxGrp -e
		-v1 $dragEdit
		-cc1 ("createNurbsConeCtx -e -doDragEdit " + !$dragEdit + " " + $toolName)
		createNurbsConeDragEditCheckBox;

	string $icon = "cone.png";
	string $helpTag= "CreateNurbsConeTool";
	toolPropertySetCommon $toolName $icon $helpTag;
	toolPropertySelect $name;
}
