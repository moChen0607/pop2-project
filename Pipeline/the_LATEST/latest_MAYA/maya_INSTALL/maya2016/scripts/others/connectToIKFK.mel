// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc int connectToIKFK()
//
//	Description:
//		Connects a node to an ikHandle so it can control IK/FK.
//		By default all joints in an IK chain are connected, this is
//		for other objects that someone may want to use to control IK/FK
//		switching.
//
//		There should be at least two items in the selected array. The last
//		item should be a IK handle.
//
{
	string $selected[] = `ls -sl`;

	int $nSelected = size($selected);
	if ($nSelected < 2) {
		error((uiRes("m_connectToIKFK.kSelectTwo")));
	}

	int $handleIndex = $nSelected-1;
	string $handle = $selected[$handleIndex];
	if (!size(`ls -type "ikHandle" $handle`)) {
		int $foundHandle = 0;
		if ($nSelected == 2) {
			if (size(`ls -type "ikHandle" $selected[0]`)) {
				$handle = $selected[0];
				$selected[0] = $selected[1];
				$foundHandle = 1;
			}
		}
		if (! $foundHandle) {
			error((uiRes("m_connectToIKFK.kLastSelected")));
		}
	}

	int $ii = 0;
	int $connected = 0;
	for ($ii = 0; $ii < $handleIndex; $ii++) {
		string $object = $selected[$ii];
		string $attrName = ".ikBlend";
		
		if (size(`ls ($object+".solverEnable")`)) {
			// In 5.0, the solverEnable attribute name was switched to
			// ikBlend. 
			//
			if (`isConnected ($handle+".ikBlend") ($object+".solverEnable")`) {
				disconnectAttr ($handle+".ikBlend") ($object+".solverEnable");
			}
			setAttr -k off ($object+".solverEnable");
		}

		if (!size(`ls ($object+$attrName)`)) {
			addAttr -ln ikBlend -at double $object;
			setAttr -k on ($object+$attrName);
		}
		
		if (!`isConnected ($handle+".ikBlend") ($object+".ikBlend")`) {
			connectAttr ($handle+".ikBlend") ($object+".ikBlend");
			$connected++;
		} else {
			string $format = (uiRes("m_connectToIKFK.kBlendAlreadyConnected"));
			string $warnMsg = `format -stringArg $object -stringArg $handle $format`;
			warning ($warnMsg);
		}
	}

	if ($connected > 0) {
		string $format = (uiRes("m_connectToIKFK.kConnectionsMade"));
		string $msg = `format -stringArg $connected $format`;
		print $msg;
	} else {
		print ((uiRes("m_connectToIKFK.kNoConn")));
	}

	return $connected;
}
