// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Aug 08 2006
//
//<doc>
//<name setPluginResource>
//
//<synopsis>
//		setPluginResource(string $pluginName, string $lookUpKey, string $value)
//
//<related getPluginResource registerPluginResource loadPluginLanguageResources>
//<description>
//		Assign a new value to a plugin string resource.  
//      This is used to provide localized values for plugin string resources.  
//      The string resource must already be registered with the plugin,
//      either as an MStringResource or via the mel registerPluginString
//      command. 
// 
//		Lookup keys must be unique. Both the plugin name and the 
//      lookup key are used to uniquely identify the resource.
// 
//      The plugin name is the same string that is passed to the
//      loadPlugin command.
// 
//      This command should be called during plugin load for each
//      string resource that will be used at any time during the plugin
//      execution to ensure the resources are properly initialized.
//      Generally these calls are invoked with the UI string registration  
//      procedures that are setup using MFnPlugin::registerUIStrings.     
//      The value specified will replace the current value of the resource.
//      See also the loadPluginLanguageResources command.  
//
//<flags>
//      string	 $pluginName    Unique Plugin name (as passed to loadPlugin)
//      string	 $lookUpKey		Unique key for this string resource
//      string	 $value         String value to be associated with the resource
//
//<notes>
//      Plugin resources are retrieved using the getPluginResource command.
//      The plugin resource must be initially registered.  This is done
//      in mel using the registerPluginResource command, or in a plugin's
//      code using MStringResource::registerString. 
//
//
//<examples>
//		// Assign resource values that will be used to initialize
//      // menu item labels for the plugin. 
//		// The plugin name is "myPlugin" and each resource has a unique
//      // key. 
//		// 
//		setPluginResource("myPlugin", "showBBoxLabel", "Show Bounding Box");
//		setPluginResource("myPlugin", "hideBBoxLabel", "Hide Bounding Box");
//
//</doc>
//
global proc setPluginResource( string $pluginId, string $stringId, string $str )
{
    string $fullId = "p_" + $pluginId + "." + $stringId;
    int $exists = `displayString -exists $fullId`;
    if ($exists)
    {
       // Override the string's value 
       displayString -replace -value $str $fullId;
    }
    else
    {
       // Issue warning if the string is not properly registered 
       $fmt = (uiRes("m_setPluginResource.kNotRegistered"));
       string $msg = `format -stringArg $pluginId -stringArg $stringId $fmt`;      
       warning $msg;
    }
}

