// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  August 14, 1996
//
//  Description:
//      Process the numerical input.
//
//  Input Arguments:
//      Numerical values (see scmh command for its syntax).
//
//  Return Value:
//      1 on success, 0 on fail.
//

global proc int numericalInput( string $value )
{
	// If the string is empty then there is nothing to do here
	int $stringLen = `size $value`;
	if ( $stringLen == 0 ) return 0;

	// Define the character used to mean "ignore this entry position"
	//
	string $ignoreEntryChar = ".";

	// Tokenize the value string
	//
	string $valueArray[];
	int $numTokens = tokenize ($value, $valueArray);

	// Try to build up the proper string now
	//
	string $result;
	// scan for command flags
	//
	for ($i = 0; $i < $numTokens; $i++) {
		// Only need to add one flag to the result string
		if ($valueArray[$i] == "-a") {
			$result = (" " + $result + " " + $valueArray[$i]);
		}
		else if ($valueArray[$i] == "-r") {
			$result = (" " + $result + " " + $valueArray[$i]);
		}
		else if ($valueArray[$i] == "-q") {
			$result = (" " + $result + " " + $valueArray[$i]);
		}
		else if ($valueArray[$i] == "a") {
			// Put `-` in front of flag or command will complain
			$result = (" " + $result + " -a");
		}
		else if ($valueArray[$i] == "r") {
			// Put `-` in front of flag or command will complain
			$result = (" " + $result + " -r");
		}
		else if ($valueArray[$i] == "q") {
			// Put `-` in front of flag or command will complain
			$result = (" " + $result + " -r");
		}
	}

	// scan for numbers
	string $numbers;
	//
	int $offset = 1;
	for ($i = 0; $i < $numTokens; $i++) {
		if ($valueArray[$i] == $ignoreEntryChar) {
			$result = (" " + $result + " -ignore " + $offset);
			$offset++;
			$numbers = (" " + $numbers + " 0");
		}
		else if ($valueArray[$i] == "-a" || $valueArray[$i] == "a" ) {
		}
		else if ($valueArray[$i] == "-r" || $valueArray[$i] == "r" ) {
		}
		else if ($valueArray[$i] == "-q" || $valueArray[$i] == "q" ) {
		}
		else if ($valueArray[$i] == "") {
		}
		else {
			$numbers = (" " + $numbers + " " + $valueArray[$i]);
			$offset++;
		}
	}

	$stringLen = `size $numbers`;
	int $returnVal = 0;

	if ( $stringLen > 0 )
	{
		$returnVal = !(catch(`eval( "scmh" + $result + $numbers )`));
	}
	
	return $returnVal;
}
