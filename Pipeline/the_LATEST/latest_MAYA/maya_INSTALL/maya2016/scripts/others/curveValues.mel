// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//
//  Creation Date:  April 12 1996
//
//  Description:
//		These procs sets the state of controls in the property sheet.
//		See also curveProperties.mel which constructs the property
//		sheet.
//
//  Input Arguments:
//      $toolName		- this is the name of the instance of the tool
//						  that the property sheet is modifying.
//
//  Return Value:
//      None.
//

global proc curveValues ( string $toolName, string $type, string $ctxCmd ) {
//
//  Description:
//		Sets the state of the property sheet based on the values
//		in the tool context.
//

	// set my top layout to be the current parent
	//
    string $parent = (`toolPropertyWindow -q -location` + "|" + $type );
	setParent $parent;

	// set property sheet name and icon
	//
	string $icon;
	string $helpTag;
	if ($type == "curveCV") {
		frameLayout -edit -label (uiRes("m_curveValues.kCVCurveSettings"))  geometryOptions_F;
		$icon = "curveCV.png";
		checkBoxGrp -e -v1 `eval($ctxCmd + " -q -me " + $toolName)`  
			curveCVMEKBox;
		$helpTag = "CVCurveTool";
	}
	else if ($type == "curveSketch") {
		frameLayout -edit -label (uiRes("m_curveValues.kPencilCurveSettings"))  geometryOptions_F;
		$icon = "pencil.png";
		$helpTag = "PencilCurveTool";
	}
	else if ($type == "curveEP") {
		frameLayout -edit -label (uiRes("m_curveValues.kEPCurveSettings"))  geometryOptions_F;
		$icon = "curveEP.png";
		$helpTag = "EPCurveTool";
	}
	else if ($type == "drawExtrudeFacet") {
		frameLayout -edit -label (uiRes("m_curveValues.kDrawExtrudeSettings"))  geometryOptions_F;
		$icon = "pencil.png";
		$helpTag = "DrawExtrudeFacetTool";
	}
	toolPropertySetCommon $toolName $icon $helpTag;

	// select proper radio buttons for the degree
	//
	int $i = eval($ctxCmd + " -q -d " + $toolName);
	if ($type == "curveSketch" || $type == "drawExtrudeFacet") {
		switch ($i) {
	    	case 1:
		    	radioButtonGrp -e -select 1  curveDegreeRadio1;
	 	    	break;
	    	case 3:
		    	radioButtonGrp -e -select 2  curveDegreeRadio1;
	 	    	break;
		}
	}
	else
	{
		int $bez = 0;
		if( $type == "curveCV" || $type == "curveEP" )
		{
			$bez = `eval($ctxCmd + " -q -bez " + $toolName)`;
		}
		if( $bez )
		{
			radioButtonGrp -e -select 2 curveDegreeRadio2;
		}
		else
		{
			switch ($i) {
	    		case 1:
		    		radioButtonGrp -e -select 1  curveDegreeRadio1;
	 	    		break;
	    		case 2:
		    		radioButtonGrp -e -select 2  curveDegreeRadio1;
	 	    		break;
	    		case 3:
	    			radioButtonGrp -e -select 1  curveDegreeRadio2;
	 	    		break;
	    		case 5:
		    		radioButtonGrp -e -select 1  curveDegreeRadio3;
	 	    		break;
	    		case 7:
		    		radioButtonGrp -e -select 2  curveDegreeRadio3;
	 	    		break;
			} 
		}
	}

	if ($type == "curveCV" || $type == "curveEP") {

		// Set knot parameterisation
		//
		int $isUniform = eval($ctxCmd + " -q -un " + $toolName);
		if ( $isUniform ) { 
			radioButtonGrp -e -select 1 curveKnotTypeRadio1;
		}
		else { 
			radioButtonGrp -e -select 2 curveKnotTypeRadio1;
		}
	}

	if ($type == "drawExtrudeFacet") {
		intFieldGrp -edit -value1 `eval($ctxCmd + " -query -divisions " + $toolName)` drawExtDivsField;
		checkBoxGrp -edit -value1 `eval($ctxCmd + " -query -facesTogether " + $toolName)` drawExtFacesTogetherBox;
	}

/*
	if ($type == "curveEP") {

		// Set shape behaviour
		//
		int $isPreserveShape = eval($ctxCmd + " -q -ps " + $toolName);
		if ( $isPreserveShape ) { 
			radioButtonGrp -e -select 1 curveShapeTypeRadio1;
		}
		else { 
			radioButtonGrp -e -select 2 curveShapeTypeRadio1;
		}

		// Set editing shape behaviour
		//
		floatSliderGrp -e -v `eval($ctxCmd + " -q -pf " + $toolName)` 
			fractionSlider;
	}
*/
	toolPropertySelect $type;
}
