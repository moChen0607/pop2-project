// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  June, 2000
//

global proc int
bsMultiIndexForTarget(string $bsn, int $wc)
//
//	Description:
//		Return the multiIndex that corresponds to target $wc on $bsn.
//
{
	string $sArr[] = `ls -sl`;
	if (nodeType($bsn) != "blendShape") {
		// find the blendShape node:
		// $bsn may be either the blendShape node, or the transform
		// above the base shape of the blendShape
		//
		string $isType[] = `ls -type transform $bsn`;
		if (size($isType)) {
			string $children[] = `pickWalk -d down $bsn`;
			if (size($children)) {
				$bsn = $children[0];
			}
			select -r $sArr;
		}
		$isType = `listConnections -type blendShape $bsn`;
		if (size($isType)) {
			$bsn = $isType[0];
		} else {
			error((uiRes("m_bsMultiIndexForTarget.kNoBlendshape")));
			return -1;
		}
	}

	// if final target index is being requested, search for the max target
	//
	int $maxTarget = 0;
	int $searchForMax = (`blendShape -q -wc $bsn` == ($wc+1));
	
	string $allTargets[] = `listAttr -m ($bsn+".inputTarget")`;
	string $targets[];
	for ($t in $allTargets) {
		// weed out the in-between targets
		//
		if ("" != `match "6000" $t` && "" != `match  "inputPointsTarget" $t` ) {
			$targets[size($targets)] = $t;

			if ($searchForMax) {
				int $tmp = bsTargetIndex($t);
				if ($tmp > $maxTarget) {
					$maxTarget = $tmp;
				}
			}
		}
	}
	if (size($targets) <= $wc) {
		return -1;
	}

	int $targetIndex;
	if ($searchForMax) {
		$targetIndex = $maxTarget;
	} else {
		string $targetPlug = $targets[$wc];
		$targetIndex = bsTargetIndex($targetPlug);
	}
	return $targetIndex;
}

