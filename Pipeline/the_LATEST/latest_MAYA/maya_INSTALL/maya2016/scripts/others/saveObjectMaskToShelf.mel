// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  16 December 1996
//
//
//  Procedure Name:
//	  saveObjectMaskToShelf
//
//  Description:
//		Saves the current object mask selection
//		settings to the currently active shelf
//		tab.
//
//  Input Arguments:
//		None.
//
//  Return Value:
//		None.
//


global proc saveObjectMaskToShelf( ) {

	global string $gShelfTopLevel;
	global string $gSelMarkerFilterTypeList[];
	global string $gSelJointFilterTypeList[];
	global string $gSelCurveFilterTypeList[];
	global string $gSelSurfaceFilterTypeList[];
	global string $gSelDeformerFilterTypeList[];
	global string $gSelDynamicFilterTypeList[];
	global string $gSelRenderingFilterTypeList[];
	global string $gSelOtherFilterTypeList[];

	//  only create the shelfButton if there is an active shelf
	//
	if (`tabLayout -exists $gShelfTopLevel`) {

		string $command4ByNameMask;
		for ($selTypeName in $gSelMarkerFilterTypeList)
			$command4ByNameMask = $command4ByNameMask + "selectType -byName "+$selTypeName+" "+`selectType -q -queryByName $selTypeName`+";";
		for ($selTypeName in $gSelJointFilterTypeList)
			$command4ByNameMask = $command4ByNameMask + "selectType -byName "+$selTypeName+" "+`selectType -q -queryByName $selTypeName`+";";
		for ($selTypeName in $gSelCurveFilterTypeList)
			$command4ByNameMask = $command4ByNameMask + "selectType -byName "+$selTypeName+" "+`selectType -q -queryByName $selTypeName`+";";
		for ($selTypeName in $gSelSurfaceFilterTypeList)
			$command4ByNameMask = $command4ByNameMask + "selectType -byName "+$selTypeName+" "+`selectType -q -queryByName $selTypeName`+";";
		for ($selTypeName in $gSelDeformerFilterTypeList)
			$command4ByNameMask = $command4ByNameMask + "selectType -byName "+$selTypeName+" "+`selectType -q -queryByName $selTypeName`+";";
		for ($selTypeName in $gSelDynamicFilterTypeList)
			$command4ByNameMask = $command4ByNameMask + "selectType -byName "+$selTypeName+" "+`selectType -q -queryByName $selTypeName`+";";
		for ($selTypeName in $gSelRenderingFilterTypeList)
			$command4ByNameMask = $command4ByNameMask + "selectType -byName "+$selTypeName+" "+`selectType -q -queryByName $selTypeName`+";";
		for ($selTypeName in $gSelOtherFilterTypeList)
			$command4ByNameMask = $command4ByNameMask + "selectType -byName "+$selTypeName+" "+`selectType -q -queryByName $selTypeName`+";";

		string $command = ( "selectMode -object; selectType"

			+" -handle " + `selectType -q -handle` 
			+" -ikHandle " + `selectType -q -ikHandle` 
	
			+" -joint " + `selectType -q -joint` 
	
			+" -nurbsCurve " + `selectType -q -nurbsCurve` 
			+" -cos " + `selectType -q -cos` 
			+" -stroke " + `selectType -q -stroke` 

			+" -nurbsSurface " + `selectType -q -nurbsSurface` 
			+" -polymesh " + `selectType -q -polymesh` 
			+" -subdiv " + `selectType -q -subdiv` 
			+" -plane " + `selectType -q -plane` 
	
			+" -lattice " + `selectType -q -lattice` 
			+" -cluster " + `selectType -q -cluster`
			+" -sculpt " + `selectType -q -sculpt`
			+" -nonlinear " + `selectType -q -nonlinear`
	
			+" -particleShape " + `selectType -q -particleShape` 
			+" -emitter " + `selectType -q -emitter` 
			+" -field " + `selectType -q -field` 
			+" -spring " + `selectType -q -spring` 
			+" -rigidBody " + `selectType -q -rigidBody`
			+" -fluid " + `selectType -q -fluid`
			+" -hairSystem " + `selectType -q -hairSystem`
			+" -follicle " + `selectType -q -follicle`
			+" -nCloth " + `selectType -q -nCloth`
			+" -nRigid " + `selectType -q -nRigid`
			+" -dynamicConstraint " + `selectType -q -dynamicConstraint`
			+" -rigidConstraint " + `selectType -q -rigidConstraint` 
			+" -collisionModel " + `selectType -q -collisionModel` 
	
			+" -light " + `selectType -q -light`
			+" -camera " + `selectType -q -camera` 
			+" -texture " + `selectType -q -texture` 
	
			+" -ikEndEffector " + `selectType -q -ikEndEffector` 
			+" -locator " + `selectType -q -locator`
			+" -dimension " + `selectType -q -dimension`
			+";"
			+$command4ByNameMask
		);
	
		// Create the selection mask button on the active shelf
		//
		shelfButton 
			-p `tabLayout -q -st $gShelfTopLevel`
			-label (uiRes("m_saveObjectMaskToShelf.kObjectMask"))
			-imageOverlayLabel (uiRes("m_saveObjectMaskToShelf.kMask"))
			-image1 "commandButton.png" 
			-c $command;
	}
}
