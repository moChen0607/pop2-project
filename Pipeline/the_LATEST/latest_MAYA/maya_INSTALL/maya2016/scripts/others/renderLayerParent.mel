// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  18 May 2005
//
//<doc>
//<name renderLayerParent>
//
//<synopsis>
//      int	 renderLayerParent( string $parent, string $child )
//
//<returns>
//      int : 1 if render layer parenting was successful, 0 otherwise.
//
//<description>
//		This procedure causes render layer node $child to become contained
//		within render layer node $parent via a layer hierarcy relationship.
//		Containment is implemented by connecting the render layer hierarchy
//		attributes on the two nodes as appropriate. There are certain
//		conditions which are not permitted, such as a cyclic relationship,
//		instancing within a layer hierarchy, attempting to connect to the
//		default layer, etc. Any invalid conitions will trigger an error
//		message and 0 will be returned.
//
//      See also renderLayerUnparent().
//
//<flags>
//      string $parent The render layer node we want to be the parent.
//      string $child The render layer node we want to be the child.
//
//<examples>
//      // Create two render layer nodes.
//      //
//		string $parent = `createRenderLayer -name "parent" -empty`;
//		string $child = `createRenderLayer -name "child" -empty`;
//
//		// Make "parent" contain "child".
//		//
//		int $status = renderLayerParent( $parent, $child );
//
//</doc>
//

global proc int renderLayerParent( string $parent, string $child )
{
	int	$status = 1;

	// Remember the current render layer node. Select the default render
	// layer. This restores any previous adjustments.
	//
	string $current = `editRenderLayerGlobals -q -currentRenderLayer`;
	if(catch(`editRenderLayerGlobals -currentRenderLayer "defaultRenderLayer"`)) {
		$status = 0;
	}

	// Now try to perform the parenting operation. This will internally
	// check that the nodes are both render layers, and there is no
	// cycle, etc. An error is issued if anything is wrong.
	//
	string $cmd = "connectAttr -na "+$child+".rlp "+$parent+".rlc;";
	if ( catch( eval( $cmd ) ) ) {
		$status = 0;
	}

	// Make the previous render layer current again. This sets any
	// adjustments.
	//
	if(catch(`editRenderLayerGlobals -currentRenderLayer $current`)) {
		$status = 0;
	}

	return( $status );
}
