// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  18 April 1997
//
//  Description:
//      bend default options box.  The content for each tab 
//      is not created until it is accessed for the first time.
//
//////////////////////////////////////////////////////////////////////
//
//  Procedure Name:
//      setOptionVars
//
//  Description:
//      Initialize the option values.
//
//  Input Arguments:
//      Whether to set the options to default values.
//
//  Return Value:
//      None.
//
proc setOptionVars(int $forceFactorySettings)
{
	//  min.
	//
	if ($forceFactorySettings || !`optionVar -exists bendMin`) {
		optionVar -floatValue  bendMin -1.0;
	}

	//  max.
	//
	if ($forceFactorySettings || !`optionVar -exists bendMax`) {
		optionVar -floatValue  bendMax 1.0;
	}

	//  curvature.
	//
	if ($forceFactorySettings || !`optionVar -exists bendCurve`) {
		optionVar -floatValue  bendCurve 0.0;
	}

	// default options common to all deformers
	//
	if ($forceFactorySettings || !`optionVar -exists bendPositioning`) {
		optionVar -stringValue bendPositioning "default";
	}
	if ($forceFactorySettings || !`optionVar -exists bendExclusive`) {
		// 0 == no exclusive
		// 1 == exclusive with new name
		// 2 == exclusive using an existing partition
		//
		optionVar -intValue bendExclusive 0;
	}
	if ($forceFactorySettings || !`optionVar -exists bendExclName`) {
		optionVar -stringValue bendExclName "deformPartition";
	}
}

//
//  Procedure Name:
//      bendSetup
//
//  Description:
//     Update the state of the option box UI to reflect the option values.
//
//  Input Arguments:
//      parent               - Top level parent layout of the option box UI.
//                             Required so that UI object names can be 
//                             successfully resolved.
//
//      forceFactorySettings - Whether the option values should be set to
//                             default values.
//
//      tabIndex             - 0 = both tabs, 1 = basic, 2 = advanced
//
//  Return Value:
//      None.
//
global proc bendSetup(string $parent,
                      int $forceFactorySettings,
                      int $tabIndex)
{
	//  Retrieve the option settings
	//
	setOptionVars($forceFactorySettings);

	setParent $parent;

	//  Query the optionVar's and set the values into the controls.
	//
	if ($tabIndex != 2) {
		//  min.
		//
		if (`floatSliderGrp -exists bendMin`) {
			floatSliderGrp -edit 
				-value `optionVar -query bendMin`
				bendMin;
		}
		
		//  max.
		//
		if (`floatSliderGrp -exists bendMax`) {
			floatSliderGrp -edit 
				-value `optionVar -query bendMax`
				bendMax;
		}
		
		//  curvature.
		//
		if (`floatSliderGrp -exists bendCurve`) {
			floatSliderGrp -edit 
				-value `optionVar -query bendCurve`
				bendCurve;
		}
	}

	if ($tabIndex != 1) {
		// Positioning of the bend deformer in the DG
		//
		string $positioning = `optionVar -query bendPositioning`;
		if (`optionMenuGrp -exists bendPositioningWidget`) {
			if ($positioning == "default") {
				optionMenuGrp -edit -select 1 bendPositioningWidget;
			}
			else if ($positioning == "before") {
				optionMenuGrp -edit -select 2 bendPositioningWidget;
			}
			else if ($positioning == "after") {
				optionMenuGrp -edit -select 3 bendPositioningWidget;
			}
			else if ($positioning == "split") {
				optionMenuGrp -edit -select 4 bendPositioningWidget;
			}
			else if ($positioning == "parallel") {
				optionMenuGrp -edit -select 5 bendPositioningWidget;
			}
			else {
				optionMenuGrp -edit -select 1 bendPositioningWidget;
			}
		}
		
		int $exc=`optionVar -query bendExclusive`;
		if (`checkBoxGrp -exists exclWidget`) {
			checkBoxGrp -e -v1 $exc exclWidget;
		}
		string $exn=`optionVar -query bendExclName`;
		if (`textFieldGrp -exists partitionNameWidget`) {
			textFieldGrp -e -tx $exn -enable $exc partitionNameWidget;
		}
		if (`optionMenuGrp -exists partitionListWidget`) {
			optionMenuGrp -e  -enable $exc partitionListWidget;
		}
	}
}

//
//  Procedure Name:
//      bendCallback
//
//  Description:
//      Update the option values with the current state of the option box UI.
//
//  Input Arguments:
//      parent - Top level parent layout of the option box UI.  Required so
//               that UI object names can be successfully resolved.
//
//      doIt   - Whether the command should execute.
//
//  Return Value:
//      None.
//
global proc bendCallback(string $parent, int $doIt)
{
	//  Set the optionVar's from the control values, and then
	//  perform the command.

	//  Min.
	//
	if (`floatSliderGrp -exists bendMin`) {
		optionVar -floatValue bendMin
			`floatSliderGrp -query -value bendMin`;
	}

	//  Max.
	//
	if (`floatSliderGrp -exists bendMax`) {
		optionVar -floatValue bendMax
			`floatSliderGrp -query -value bendMax`;
	}

	//  Curvature.
	//
	if (`floatSliderGrp -exists bendCurve`) {
		optionVar -floatValue bendCurve
			`floatSliderGrp -query -value bendCurve`;
	}

	// Positioning of the bend deformer in the DG
	//
	string $positioning = "default";
	if (`optionMenuGrp -exists bendPositioningWidget`) {
		if (`optionMenuGrp -query -select bendPositioningWidget` == 1) {
			$positioning = "default";
		}
		else if (`optionMenuGrp -query -select bendPositioningWidget` == 2){
			$positioning = "before";
		}
		else if (`optionMenuGrp -query -select bendPositioningWidget` == 3){
			$positioning = "after";
		}
		else if (`optionMenuGrp -query -select bendPositioningWidget` == 4){
			$positioning = "split";
		}
		else if (`optionMenuGrp -query -select bendPositioningWidget` == 5){
			$positioning = "parallel";
		}
	}
	optionVar -stringValue bendPositioning $positioning;

	if (`checkBoxGrp -exists exclWidget`) {
		optionVar -intValue bendExclusive `checkBoxGrp -q -v1 exclWidget`;
	}
	if (`optionMenuGrp -exists partitionListWidget`) {
		string $partitionNameVal = `optionMenuGrp -q -v partitionListWidget`;
		if ($partitionNameVal == (uiRes("m_performBend.kCreateNewPartition"))) {
			if (`textFieldGrp -exists partitionNameWidget`) {
				$partitionNameVal = `textFieldGrp -q -tx partitionNameWidget`;
			}
		} else {
			// a value of 2 indicates that we use an existing partition
			//
			optionVar -intValue bendExclusive 2;
		}
		
		optionVar -stringValue bendExclName $partitionNameVal;
	}
	
	if ($doIt) {
		performBend 0; 
		addToRecentCommandQueue "performBend 0" "Bend";
	}
}


//
//  Procedure Name:
//      createBendTabUI
//
//  Description:
//      Create the tab UI.  The contents of each tab are created only 
//      when it is required, ie. if the tab is initially visible or 
//      if the tab is selected by the user.
//
//  Input Arguments:
//      The name of the tab layout.
//
//  Return Value:
//      None.
//
global proc createBendTabUI(string $tabLayout)
{
	string $tab[] = `tabLayout -query -childArray $tabLayout`;
	int $currentTabIndex = `tabLayout -query -selectTabIndex $tabLayout`;

	//  Determine if the UI for this tab has been created yet.
	//  This is accomplished by querying the number of children
	//  in the current tab.  If the tab has no children then the UI
	//  must be created.
	//
	if (0 == `columnLayout -query -numberOfChildren $tab[$currentTabIndex-1]`) {
		setParent $tab[$currentTabIndex-1];

		string $label;
		int $index;

		//  Activate the default UI template so that the layout of this 
		//  option box is consistent with the layout of the rest of the 
		//  application.
		//
		setUITemplate -pushTemplate DefaultTemplate;

		//  Turn on the wait cursor.
		//
		waitCursor -state 1;

		//  The current tab has no children.  Determine which tab is
		//  active and create its UI.
		//
		//  RECOMMENDATION:  Use the 'Grp' commands where possible because
		//  they obey the formatting specified in the default template.
		//  This will result in a more consistent look throughout the
		//  application.
		//  
		if (1 == $currentTabIndex) {

			//  Create UI for the first tab.
			//
			floatSliderGrp
				-label (uiRes("m_performBend.kLowBound"))
				-fieldMinValue -10000.0 
				-minValue -10.0
				-maxValue 0.0
				bendMin;

			floatSliderGrp
				-label (uiRes("m_performBend.kHighBound"))
				-minValue 0.0 
				-maxValue 10.0
				-fieldMaxValue 10000.0
				bendMax;

			//set create options unit consistent with preference
			float $maxCurv, $minCurv;
			float $minCurv = -$maxCurv;
			string $currUnit = `currentUnit -fullName -query -angle`;
			if ($currUnit == "degree") {
				$minCurv = -180.;
				$maxCurv =  180.;
			}
			else {
				$minCurv = -3.14159265;
				$maxCurv =  3.14159265;
			}

			floatSliderGrp
				-label          (uiRes("m_performBend.kCurvature"))
				-minValue       $minCurv
				-maxValue       $maxCurv
				-fieldMinValue -10000.0
				-fieldMaxValue  10000.0
				bendCurve;

			setParent ..;
		} else if (2 == $currentTabIndex) {
			
			//  Create UI for the second tab.
			//
			columnLayout -adjustableColumn true;

			// Positioning of the bend deformer in the DG
			optionMenuGrp -label (uiRes("m_performBend.kDeformationOrder"))  bendPositioningWidget;
			menuItem -label (uiRes("m_performBend.kDefault"))    bendPosItem1;
			menuItem -label (uiRes("m_performBend.kBefore"))      bendPosItem2;
			menuItem -label (uiRes("m_performBend.kAfter"))        bendPosItem3;
			menuItem -label (uiRes("m_performBend.kSplit"))        bendPosItem4;
			menuItem -label (uiRes("m_performBend.kParallel"))  bendPosItem5;

			separator;
			checkBoxGrp	
				-numberOfCheckBoxes 1
				-label ""
				-label1 (uiRes("m_performBend.kExclusive")) 
				-v1 0 
				-on1 "optionMenuGrp -e -enable 1 partitionListWidget; updatePartitionNameWidget;"
				-offCommand "optionMenuGrp -e -enable 0 partitionListWidget; updatePartitionNameWidget;"
				exclWidget;


			// Create an option menu listing the partitions
			//
			optionMenuGrp -label (uiRes("m_performBend.kPartitiontoUse"))  -enable `checkBoxGrp -q -v1 exclWidget`
				-cc "updatePartitionNameWidget" partitionListWidget;

			string $currentNameOption = "";
			if (`optionVar -exists bendExclName`) {
				$currentNameOption = `optionVar -q bendExclName`;
			}
			
			// add all the partitions to the menu
			//
			int $pp;
			string $partitionArray[];
			$partitionArray = `ls -type partition`;
			int $partitionCount = size($partitionArray);
			menuItem -label (uiRes("m_performBend.kCreateNewPartition")) ;
			for ($pp = 0; $pp < $partitionCount; $pp++)
			{
				// Do not list the render partition as adding items to
				// it is only going to cause confusion.
				//
				if ($partitionArray[$pp] != "renderPartition" && 
					$partitionArray[$pp] != "characterPartition") {
					menuItem -label $partitionArray[$pp];
				}
				if ($currentNameOption == $partitionArray[$pp]) {
					optionVar -stringValue bendExclName "deformPartition";
				}
			}

			textFieldGrp -label (uiRes("m_performBend.kNewPartitionName"))  -enable `checkBoxGrp -q -v1 exclWidget` 
				-tx "deformPartition"
				partitionNameWidget;
		
			updatePartitionNameWidget;
		}

		//  Update the control values to match the options.
		//
		eval (("bendSetup " + $tabLayout + " "+0+" "+$currentTabIndex));
	
		//  Turn off the wait cursor.
		//
		waitCursor -state 0;
		
		//  Deactivate the default UI template.
		//
		setUITemplate -popTemplate;
	}
}

//
//  Procedure Name:
//      bendOptions
//
//  Description:
//      Construct the option box UI.  Involves accessing the standard option
//      box and customizing the UI accordingly.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
// ********* Change 'bend' in this proc to be the name of your command
proc bendOptions()
{
	//  Name of the command for this option box.
	//
	string $commandName = "nonLinear";

	//  Build the option box actions.
	//
	string $callback = ("bendCallback");
	string $setup = ("bendSetup");

	//  STEP 1:  Get the option box.
	//  ============================
	//
	//  The value returned is the name of the layout to be used as
	//  the parent for the option box UI.
	//
	string $layout = getOptionBox();
	setParent $layout;
	
	//  STEP 2:  Pass the command name to the option box.
	//  =================================================
	//
	//  Any default option box behaviour based on the command name is set 
	//  up with this call.  For example, updating the 'Help' menu item with
	//  the name of the command.
	//
	setOptionBoxCommandName($commandName);

	//  STEP 3:  Activate the default UI template.
	//  ==========================================
	//
	//  Activate the default UI template so that the layout of this 
	//  option box is consistent with the layout of the rest of the 
	//  application.
	//
	//  Note: this option box example delays the creation of the UI
	//  until it's required.  Therefore this step is moved to the
	//  procedure where the UI is actually created. 
	//
	//setUITemplate -pushTemplate DefaultTemplate;

	//  STEP 4: Create option box contents.
	//  ===================================
	//  
	//  This, of course, will vary from option box to option box.	
	
	//  Demonstrate the delaying of UI creation via tab layouts.
	//  Instead of creating all of the option box UI initially, only
	//  create that which is initially visible.  Wait, until the 
	//  other tabs are selected to create the remaining UI.
	//
	string $tabLayout = `tabLayout -scrollable 1`;

	//  Attach an action that will be invoked before a tab is selected.
	//  
	tabLayout -edit 
		-preSelectCommand ("createBendTabUI " + $tabLayout)
		$tabLayout;

	//  Create just the immediate children of the tab layout so that
	//  the tabs appear.
	//
	columnLayout;
		setParent ..;
	columnLayout;
		setParent ..;
	
	//  Set the tab labels.
	//
	tabLayout -edit
		-tabLabelIndex 1 (uiRes("m_performBend.kBasic"))
		-tabLabelIndex 2 (uiRes("m_performBend.kAdvanced"))
		$tabLayout;

	//  Create the UI for the tab that is initially visible.
	//
	createBendTabUI($tabLayout);

	//  Step 5: Deactivate the default UI template.
	//  ===========================================
	//
	//  Note: this option box example delays the creation of the UI
	//  until it's required.  Therefore this step is moved to the
	//  procedure where the UI is actually created.
	//
	//  See also Step 2. 
	//
	//setUITemplate -popTemplate;

	//  Step 6: Customize the buttons.  
	//  ==============================
	//
	//  Provide more descriptive labels for the buttons.  This is not 
	//  necessary, but in some cases, for example, a button labelled 
	//  'Create' may be more meaningful to the user than one labelled
	//  'Apply'.
	//
	//  Disable those buttons that are not applicable to the option box.
	//
	//  Attach actions to those buttons that are applicable to the option
	//  box.  Note that the 'Close' button has a default action attached 
	//  to it that will hide the window.  If a a custom action is
	//  attached to the 'Close' button then be sure to call the 'hide the
	//  option box' procedure within the custom action so that the option
	//  box is hidden properly.

	//  'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-label (uiRes("m_performBend.kCreate")) 
		-command ($callback + " " + $tabLayout + " " + 1)
		$applyBtn;

	//  'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $tabLayout + " " + 0 + "; hideOptionBox")
		$saveBtn;

	//  'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $tabLayout + " " + 1 + " " + 0)
		$resetBtn;

	//  Step 7: Set the option box title.
	//  =================================
	//
	setOptionBoxTitle (uiRes("m_performBend.kCreateBendDeformerOptions"));

	//  Step 8: Customize the 'Help' menu item text.
	//  ============================================
	//
	setOptionBoxHelpTag( "Bend" );

	//  Step 9: Set the current values of the option box.
	//  =================================================
	//
	//  NOTE:  Can not do this here since we do not know what UI is
	//  currently visible.  This is moved to where the UI is created.
	//
	//eval (($setup + " " + $tabLayout + " " + 0));	
	
	//  Step 10: Show the option box.
	//  =============================
	//
	showOptionBox();
}

//
//  Procedure Name:
//      optionBoxExample1Help
//
//  Description:
//      Return a short description about this command.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      string.
//
proc string bendHelp()
{
	return 
	"  Command: bend - creates a bend\n" +
	"Selection: Deformable geometry.";
}

proc string assembleCmd()
{
	string $cmd = "nonLinear -type bend ";

	$cmd += " -lowBound " + `optionVar -query bendMin`;
	$cmd += " -highBound " + `optionVar -query bendMax`;
	$cmd += " -curvature " + `optionVar -query bendCurve`;

 	// Build a positioning flag if needed
	//
	string $positioning = `optionVar -query bendPositioning`;
	if ($positioning != "default") {
		$cmd += (" -" + $positioning);
	}
	
	int $exc=`optionVar -query bendExclusive`;
	if ($exc) {
		string $exn=`optionVar -query bendExclName`;
		if ($exn!="") {
			// make sure that we do not clash names with an existing
			// partition when the user requested a new partition, even
			// if the user may have entered a non-unique name
			//
			if ($exc == 1) 	$exn += "#";
			$cmd += (" -exclusive \"" + $exn+"\"");
		}
	}

	return $cmd;
}


//
//  Procedure Name:
//      performBend
//
//  Description:
//      Perform the bend command using the corresponding 
//      option values.  This procedure will also show the option box
//      window if necessary as well as construct the command string
//      that will invoke the bend command with the current
//      option box values.
//
//  Input Arguments:
//      0 - Execute the command.
//      1 - Show the option box dialog.
//      2 - Return the command.
//
//  Return Value:
//      None.
//
global proc string performBend(int $action)
{
	string $cmd = "";

	switch ($action) {

		//  Execute the command.
		//
		case 0:
			//  Retrieve the option settings
			//
			setOptionVars(false);

			//  Get the command.
			//
			$cmd = assembleCmd();

			//  Execute the command with the option settings.
			//
			evalEcho($cmd);

			break;

		//  Show the option box.
		//
		case 1:
			bendOptions;
			break;

		//  Return the command string.
		//
		case 2:
			//  Retrieve the option settings.
			//
			setOptionVars (false);

			//  Get the command.
			//
			$cmd = assembleCmd();
			break;
	}
	return $cmd;
}

