// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//
//
//
//
//  Creation Date:  Jan 20, 2000
//
//
//  Description:
//     Script to register UI action  with clip editor
//	within it.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//


////////////////////////////////////////////////////////////////////////
//
// Description:
//     Action called when <backspace> key is pressed
//
//
////////////////////////////////////////////////////////////////////////
global proc
clipEditorDeleteCmd( string $editor )
{
	doRemoveClipArgList 1 { $editor, "0" };
}

////////////////////////////////////////////////////////////////////////
//
// Description:
//     Action called when clip is dropped in TraX
//
//
////////////////////////////////////////////////////////////////////////
global proc
clipDropCmd( string $editor, string $clip, string $character, string $track, string $group,
			 string $startTime )
{
	if( !`exists getClipScheduler`) {
		source "ClipEdMenu.mel";
	}

	string $cmd;

	int $isInstance = `getAttr ($clip+".clipInstance")`;
	int $isPose = `getAttr ($clip+".pose")`;
	
	// We need to copy and paste if the clip is not already mapped to this
	// character. But if it is already on the character, we can just
	// instance it.
	//
	int $copyPasteNeeded = 1;
	string $clipChars[] = `clip -q -ch $clip`;
	string $clipChar;
	for ($clipChar in $clipChars) {
		if ($clipChar == $character) {
			$copyPasteNeeded = 0;
			break;
		}
	}

	if (!$copyPasteNeeded) {
		// Make sure the clip is scheduled
		//
		$copyPasteNeeded = 1;
		string $sch = getClipScheduler($clip);
		if ($sch != "") {
			int $clipIndex = getClipIndex($clip, $sch);
			if ($clipIndex != -1) {
				$copyPasteNeeded = 0;
			}
		}
	}

	if ($copyPasteNeeded) {
		// copy and paste. Use characterMap if it exists, else paste by node name.

		string $absRelFlag = "";
		if (!$isInstance) {
			if ($isPose) {
				$absRelFlag = " -allAbsolute";
			} else {
				$absRelFlag = " -defaultAbsolute";
			}
		}


		$cmd = ("clip -copy "+$clip+"; doPasteClipArgList 6 {\"byMapOrNodeName\", \"specify\", \"" + $character + "\", \"0\", \"" + $startTime + "\", \"" + $track + "\", \"" + $group + "\", \"" + $absRelFlag + "\"}");
	} else {
		$cmd = ("doDuplicateClipArgList 3 {\"1\", \"0\", \"0\", \"" + $clip + "\", \"specify\", \"" + $startTime + "\", \"" + $track + "\", \"" + $group + "\"};");
	}
	evalEcho($cmd);
}

//
// Register UI actions with the clip editor. These are mel proc commands 
// that get called when UI events happen in the clip editor.
//
global proc
clipEditorRegisterActions ( string $editor )
{
	// Delete Key
	clipEditor -e 
		-deleteCmd				clipEditorDeleteCmd
		$editor;
	// Node drop on track
	clipEditor -e 
		-clipDropCmd			clipDropCmd
		$editor;
}
