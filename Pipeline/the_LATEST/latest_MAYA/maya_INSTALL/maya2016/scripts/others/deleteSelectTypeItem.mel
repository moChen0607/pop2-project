// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//
//
//
//
//  Creation Date:  9 Oct 2011
//
//  Description:
//      This procedure delete select node type from UI.
//
//  Input Arguments:
//		The maskGroup is the select group of the select type,
//		 and the SelTypeName is the select type name
//
//  Return Value:
//		None

proc deleteSelTypeFromTypeArr(string $selTypeName,string $selFilterTypeList[], string $selMenuLabelList[])
{
	int $index = stringArrayFind( $selTypeName, 0, $selFilterTypeList );
	if (-1 != $index) {
		stringArrayRemoveAtIndex($index, $selMenuLabelList);
		stringArrayRemoveAtIndex($index, $selFilterTypeList);
	}
}

global proc deleteSelectTypeItem( string $maskGroup, string $selTypeName)
{
	global string $gSelMarkerMenuLabelList[];
	global string $gSelMarkerFilterTypeList[];
	global string $gSelJointMenuLabelList[];
	global string $gSelJointFilterTypeList[];
	global string $gSelCurveMenuLabelList[];
	global string $gSelCurveFilterTypeList[];
	global string $gSelSurfaceMenuLabelList[];
	global string $gSelSurfaceFilterTypeList[];
	global string $gSelDeformerMenuLabelList[];
	global string $gSelDeformerFilterTypeList[];
	global string $gSelDynamicMenuLabelList[];
	global string $gSelDynamicFilterTypeList[];
	global string $gSelRenderingMenuLabelList[];
	global string $gSelRenderingFilterTypeList[];
	global string $gSelOtherMenuLabelList[];
	global string $gSelOtherFilterTypeList[];
	int $index;
	switch ($maskGroup) {
		case "Marker":
			deleteSelTypeFromTypeArr($selTypeName, $gSelMarkerFilterTypeList, $gSelMarkerMenuLabelList);
			break;
		case "Joint":
			deleteSelTypeFromTypeArr($selTypeName, $gSelJointFilterTypeList, $gSelJointMenuLabelList);
			break;
		case "Curve":
			deleteSelTypeFromTypeArr($selTypeName, $gSelCurveFilterTypeList, $gSelCurveMenuLabelList);
			break;
		case "Surface":
			deleteSelTypeFromTypeArr($selTypeName, $gSelSurfaceFilterTypeList, $gSelSurfaceMenuLabelList);
			break;
		case "Deformer":
			deleteSelTypeFromTypeArr($selTypeName, $gSelDeformerFilterTypeList, $gSelDeformerMenuLabelList);
			break;
		case "Dynamic":
			deleteSelTypeFromTypeArr($selTypeName, $gSelDynamicFilterTypeList, $gSelDynamicMenuLabelList);
			break;
		case "Rendering":
			deleteSelTypeFromTypeArr($selTypeName, $gSelRenderingFilterTypeList, $gSelRenderingMenuLabelList);
			break;
		case "Other":
			deleteSelTypeFromTypeArr($selTypeName, $gSelOtherFilterTypeList, $gSelOtherMenuLabelList);
			break;
	}

	// update icons in toolbar since they may switch from partial to none.
	updateObjectSelectionMasks();
}
