// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//      makeCameraRenderable
//
//  Description:
//		This procedure makes the given camera renderable, and any
//		other camera non renderable.
//		It unlocks the renderable attribute,
//		and remove any renderLayerAdjustment 
//
global proc makeCameraRenderable(string $camera)
{
	//
	// First count how many renderable cameras exist
	//
	string $allCameras[] = `ls -cameras`;

	for ($i = 0; $i < size($allCameras); $i++) 
	{
		removeRenderLayerAdjustmentAndUnlock ($allCameras[$i] + ".renderable");
		catch(`setAttr ($allCameras[$i] + ".renderable") false`);
	}

	string $cam[];
	string $camera;
	if (catchQuiet($cam = `listRelatives -path -type "camera" $camera`)) {
		string $msg = (uiRes("m_makeCameraRenderable.kNoCamera"));
		error(`format -stringArg $camera $msg`);
	}

	if (size($cam) >= 1)
		$camera = $cam[0];
	else if (! `objectType -isa "camera" $camera`) {
		string $msg = (uiRes("m_makeCameraRenderable.kNotCamera"));
		error(`format -stringArg $camera $msg`);
	}

	string $msg = (uiRes("m_makeCameraRenderable.kFoundCamera"));
	warning(`format -stringArg $camera $msg`);

	catch(`setAttr ($camera + ".renderable") true`);
}
