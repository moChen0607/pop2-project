// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

// Description:
// Go through all shaders in the scene, find the file texture nodes directly connected 
// to the color attribute. For each file texture connected to the color attribute, we 
// connect the outTransparency too if and only if:
//
//	- There isn't anything connected to the shader's transparency attribute.
//	- The file texture contains some transparent pixels (ie: fileTexture.fileHasAlpha == 1)
//
global proc useTextureAlphasForTransparency()
{
	string $materials[];

	// Get a list of all material nodes in the scene
	//
	$materials = `ls -materials`;

	int $i;

	for ($i = 0; $i < size($materials); $i++)
	{
		if (	(size(`ls ($materials[$i] + ".color")`) != 0)
			&&	(size(`ls ($materials[$i] + ".transparency")`) != 0))
		{
			//
			// The material has color and transparency attributes
			//

			// Determine the source node of the color attribute of the material
			// (if any)
			//
			string $colorSrc[];

			$colorSrc = 
				`listConnections 
					-source true 
					-destination false
					($materials[$i] + ".color")`;
			
			// Determine the source node of the transparency attribute of the
			// material (if any)
			//
			string $transparencySrc[];

			$transparencySrc = 
				`listConnections 
					-source true 
					-destination false
					($materials[$i] + ".transparency")`;
			
			string $colorTextureName = $colorSrc[0]; 
			int $fileHasAlpha = ($colorTextureName != "") 
					&& (`nodeType $colorTextureName` == "file") 
					&& (`getAttr ($colorTextureName+".fileHasAlpha")`);


			if ($fileHasAlpha && ($colorSrc[0] != "") && ($transparencySrc[0] == ""))
			{
				//
				// The color attribute has a source node, and the transparency
				// attribute doesn't
				//

				if (size(`ls ($colorSrc[0] + ".outTransparency")`) != 0)
				{
					// The source node of the color attribute of the material
					// also has an outTransparency attribute, so we will
					// connect it to the transparency attribute of the
					// material.
					// 
					connectAttr 
						($colorSrc[0] + ".outTransparency")
						($materials[$i] + ".transparency");
				}
			}
		}
	}
}
