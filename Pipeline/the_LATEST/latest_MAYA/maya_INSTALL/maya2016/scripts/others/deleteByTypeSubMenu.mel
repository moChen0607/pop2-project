// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

proc addDeleteByTypeSubMenu()
{
	menuItem -label (uiRes("m_deleteByTypeSubMenu.kDeleteHistory"))
		-annotation (uiRes("m_deleteByTypeSubMenu.kDeleteHistoryAnnot"))
		-command ("DeleteHistory")
		clearConstHistoryTypesItem;

	menuItem -label (uiRes("m_deleteByTypeSubMenu.kDeleteNonDeformerHistory"))
		-annotation (uiRes("m_deleteByTypeSubMenu.kDeleteNonDeformerHistoryAnnot"))
		-c "BakeNonDefHistory" deleteNonDefHistoryItem;
    menuItem -optionBox true
		-annotation (uiRes("m_deleteByTypeSubMenu.kDeleteNonDeformerHistoryOptionsAnnot"))
		-c "BakeNonDefHistoryOptions" delNonDefHistoryOptions;
	
	menuItem -divider true;

	menuItem -label (uiRes("m_deleteByTypeSubMenu.kDeleteChannels")) -allowOptionBoxes true 
		-annotation (uiRes("m_deleteByTypeSubMenu.kDeleteChannelsAnnot"))
		-command ("DeleteChannels")
		clearChannelsTypesItem;
		menuItem -optionBox true 
			-annotation (uiRes("m_deleteByTypeSubMenu.kDeleteChannelsOptionsAnnot"))
			-command ("DeleteChannelsOptions")
			clearAllChannelsDialogItem;

	menuItem -label (uiRes("m_deleteByTypeSubMenu.kDeleteStaticChannels")) 
		-allowOptionBoxes true
		-annotation (uiRes("m_deleteByTypeSubMenu.kDeleteStaticChannelsAnnot"))
		-command ("DeleteStaticChannels")
		clearStaticTypesItem;
		menuItem -optionBox true 
			-annotation (uiRes("m_deleteByTypeSubMenu.kDeleteStaticChannelsOptionsAnnot")) 
			-command ("DeleteStaticChannelsOptions")
			clearAllStaticChannelsDialogItem;

	menuItem -divider true;

	menuItem -label (uiRes("m_deleteByTypeSubMenu.kDeleteConstraints"))
		-annotation (uiRes("m_deleteByTypeSubMenu.kDeleteConstraintsAnnot"))
		-command ("DeleteConstraints")
		clearConstraintTypesItem;

	menuItem -label (uiRes("m_deleteByTypeSubMenu.kDeleteMotionPaths"))
		-annotation (uiRes("m_deleteByTypeSubMenu.kDeleteMotionPathsAnnot"))
		-command ("DeleteMotionPaths")
		clearMotionPathTypesItem;

	menuItem -label (uiRes("m_deleteByTypeSubMenu.kDeleteNonParticleExpressions"))
		-allowOptionBoxes true 
		-annotation (uiRes("m_deleteByTypeSubMenu.kDeleteNonParticleExpressionsAnnot"))
		-command ("DeleteExpressions")
		clearExpressionTypesItem;
		menuItem -optionBox true 
			-annotation (uiRes("m_deleteByTypeSubMenu.kDeleteNonParticleExpressionsOptionsAnnot"))
			-command ("DeleteExpressionsOptions")
			clearAllExpressionsDialogItem;

	//	Sounds sub-menu.
	//
	string $soundMenu = `menuItem -label (uiRes("m_deleteByTypeSubMenu.kDeleteSounds"))
		-subMenu true -allowOptionBoxes false deleteSoundSubMenuItem`;
	
	menuItem -e -pmc (
		"updateSoundMenu { " +
			"\"" + $soundMenu + "\", " +
			"\"0\", " +
			"\"delete %s\", " +
			"\"1\" " + 
		"};" 
		)						
		$soundMenu;
	
	setParent -menu ..;

	menuItem -divider true;

	menuItem -label (uiRes("m_deleteByTypeSubMenu.kDeleteAssets"))
		-annotation (getRunTimeCommandAnnotation("DeleteSelectedContainers"))
		-command ("DeleteSelectedContainers")
		delContainersItem;
	
	menuItem -divider true;

	if(`licenseCheck -m edit -type complete` == 1)
	{
		menuItem -label (uiRes("m_deleteByTypeSubMenu.kDeleteRigidBodies"))
			-annotation (uiRes("m_deleteByTypeSubMenu.kDeleteRigidBodiesAnnot"))
			-command ("DeleteRigidBodies")
			clearRigidBodyTypesItem;
	}
}

global proc deleteByTypeSubMenu(string $version)
{
	string $label = (uiRes("m_deleteByTypeSubMenu.kDeleteByType"));
	if ("" != $version)
	{
		menuItem -label $label -version $version
			-subMenu true -allowOptionBoxes true -to true clearActiveItem;
	}
	else
	{
		menuItem -label $label
			-subMenu true -allowOptionBoxes true -to true clearActiveItem;
	}

	addDeleteByTypeSubMenu();

	setParent -menu ..;
}
