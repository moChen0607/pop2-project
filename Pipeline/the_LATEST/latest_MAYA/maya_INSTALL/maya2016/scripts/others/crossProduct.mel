// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//
//
//
// Creation Date: July 21, 1998
//
//<doc>
//<name crossProduct>
//
//<synopsis>
//	float[] crossProduct( float $v1[], float $v2[], 
//  						int $normalizeInputs, int $normalizeResult )
//
//<description>
//		Given two float arrays of 3 values each, this procedure returns
//		the cross product of the two arrays as a float array of size 3.
//
//<flags>
//		float[]	$v1	First vector
//		float[]	$v2	Second vector
//		int	$normalizeInputs	1 means normalize $v1, $v2 before calculation
//		int	$normalizeResult	1 means normalize the return value
//
//<returns>
//		float[] : Cross product of the two vectors
//
//<examples>
//
//	float $v1[3] = {1,2,3};
//	float $v2[3] = {4,5,6};
//	crossProduct($v1, $v2, 0, 0);
//	// Results: -3 6 -3 //
//
//</doc>

global proc float[] crossProduct( float $v1[], float $v2[], 
								  int $normalizeInputs, int $normalizeResult )
{
	if ( size($v1) != 3 ) 
		warning (uiRes("m_crossProduct.kFirstArgument"));
	if ( size($v2) != 3 ) 
		warning (uiRes("m_crossProduct.kSecondArgument"));
	
	if ( $normalizeInputs == 1 )
	{
		// normalize the input vectors
		//
		normalize( $v1 );
		normalize( $v2 );
	}

	// the cross product
	//
	float $cross[3];
	$cross[0] = $v1[1]*$v2[2] - $v1[2]*$v2[1];
	$cross[1] = $v1[2]*$v2[0] - $v1[0]*$v2[2];
	$cross[2] = $v1[0]*$v2[1] - $v1[1]*$v2[0];

	if ( $normalizeResult == 1 )
	{
		// normalize the cross product result
		//
		normalize( $cross );
	}

	return $cross;
}
