// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

// Description:  This procedure is called to select
//   the bin buttons corresponding to the selected bins.
//      
proc markSelectedBins(string $gridLayout)
{
    global string $gHyperShadeSelectedBinList[];

    if (size($gHyperShadeSelectedBinList) == 0)
    {
        // Nothing is selected.
        //
        return;
    }

    // Mark the bin buttons associated to the selected bins.
    // 
    for ($binName in $gHyperShadeSelectedBinList)
    {
        markOneBinUI($binName, $gridLayout, true);
    }

}

// Description:  This procedure is called to refresh the bins UI
//      in hyper shade.
//
global proc refreshHyperShadeBinsUI(string $parentForm, int $forceRebuild)
{
    global int $noHyperShadeRefreshForBinRename;
    if ($noHyperShadeRefreshForBinRename)
    {
        // Do not refresh hyper shade bin UI.
        // Reset the $noHyperShadeRefreshForBinRename variable.
        //
        $noHyperShadeRefreshForBinRename = false;
        return;
    }

    string $oldParent = `setParent -q`;
    string $parent = `setParent $parentForm`;

    // If the bin UIs are not created yet, create it.
    //
    if (!`gridLayout -exists binsGridLayout`)
    {
        catch( hyperShadeBinsUI($parent) );
        setParent $oldParent;
        return;
    } 

    // Update the bin list.
    //
    updateHyperShadeBinList();

    setParent "binsGridLayout";
    string $gridLayout = `setParent -q`;

    string $buttonList[] = `gridLayout -query -childArray $gridLayout`;

    if ($forceRebuild)
    {
        if (size($buttonList) != 0)
        {
            // Delete existing bin buttons.
            //
            string $button;
            for ($button in $buttonList)
            {
                deleteUI $button;
            }
        }

	    // Add buttons for bins.
	    //
	    string $defaultBin = (uiRes("m_hyperShadeBinsUI.kMasterBin"));
	    addNewBinUI($defaultBin, $gridLayout, true);
	
	    string $bin;
        string $binListString = `getAttr defaultRenderGlobals.hyperShadeBinList`;
        if ($binListString != "")
        {
	        string $binListArray[]; 
            tokenize($binListString, ";", $binListArray);
	        for ($bin in $binListArray)
	        {
	            addNewBinUI($bin, $gridLayout, false);
	        }
        }
	
	    // Mark selected bins.
	    //
	    markSelectedBins($gridLayout);
    }
    else if (size($buttonList) == 0)
    {
	    // No master bin yet.  Add buttons for bins.
	    //
	    string $defaultBin = (uiRes("m_hyperShadeBinsUI.kMasterBin"));
	    addNewBinUI($defaultBin, $gridLayout, true);
    }

    setParent $oldParent;
}
