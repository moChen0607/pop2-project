// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  September 2006
//
//  Description:
//
//<doc>
//<name loadPluginLanguageResources>
//
//<synopsis>
//		loadPluginLanguageResources(string $pluginName, string $pluginResourceFile)
//
//<related registerPluginResource setPluginResource getPluginResource>
//<description>
//      Load localized values for string resources registered with a plugin. 
//
//      This procedure takes the name of a script file that will be sourced 
//      to override the default values for a plugin's resources with 
//      language-appropriate values.  
//<p>
//      This file will only be used if Maya is running in a localized mode
//      and an appropriate file for the UI language can be found (see below).
//      Otherwise the default values registered for the resources will
//      be used. 
//<p>
//      This call should be invoked from the UI string registration  
//      procedures that are setup using MFnPlugin::registerUIStrings.
//      When set up correctly it will be called during plugin load and will
//      ensure that the strings are set correctly to their default or
//      localized value for subsequent steps in the plugin's execution. 
//<p>
//      When maya is running in a localized mode, a language-dependent
//      resource file with the given name will be searched for
//      along MAYA_PLUG_IN_RESOURCE_PATH, and sourced if it is found.
//<p>
//      MAYA_PLUG_IN_RESOURCE_PATH is constructed to contain
//      the following locations: Maya's default resource location for the 
//      current localized language; language-subdirectories found
//      in all module locations as MAYA_MODULE_PATH is processed. 
//<p>
//      Call getenv("MAYA_PLUG_IN_RESOURCE_PATH") to see the current value of
//      the search path.  It is only relevant in localized environments. 
//
//
//<flags>
//      string	 $pluginName    Unique Plugin name 
//      string	 $fileName      Name of string resource file to load 
//                              (filename only without path).
//
//<returns>
//      string : the string resource value associated with the key.  
//      If the key is not found, the return value will be empty. 
//
//<notes>
//      Plugin resources are defined using the registerPluginResources
//      and overriden (for localization) using the setPluginResource commands.  
//      They are accessed using getPluginResource.  
//
//<examples>
//  // Load localized resources for the plugin "myPlugin"  
//  // when required. 
//  // The resources are located in a file "myPluginStrings.res.mel"
//  // No action will be taken if the file is not found. 
//  loadPluginLanguageResources("myPlugin", "myPluginStrings.res.mel");
//
//</doc>
//



global proc loadPluginLanguageResources( string $pluginId, string $pluginResFile )
{

    // This is a no-op in a non-localized environment
    int $isLocalized = `about -uiLanguageIsLocalized`;
	if( !$isLocalized ) 
    {
		return;
    }
    
    // Look for the file using the pluginLanguageResourcePath
    // A non-empty path returned from this routine is guaranteed to
    // point to an existing file. 

	string $languagePath = pluginLanguageResourcePath( $pluginResFile );
	if(( $languagePath != "" )) {
		eval( "source \"" + $languagePath + "\"" );
        return;
	}
    else
    {
    }    
}
