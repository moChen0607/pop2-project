// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


//
//  Creation Date:  4 April 1997
//
//  Procedure Name:
//      performPolySoftEdge
//
//  Description:
//        soften the selected polygon edges
//         
//  Input Arguments:
//        $option : Whether to set the options to default values.
//  Return Value:
//        command string iff $option==2
//

proc setOptionVars (int $forceFactorySettings)
{			   
     if ($forceFactorySettings || !`optionVar -exists polySoftEdge`)
		optionVar -floatValue polySoftEdge 30.0;

	//if ($forceFactorySettings || !`optionVar -exists polySoftEdgeWorldSpace`)
        //optionVar -intValue polySoftEdgeWorldSpace 1;
}

global proc performPolySoftEdgeSetup (string $parent, int $forceFactorySettings)
{
	setOptionVars($forceFactorySettings);
	setParent $parent;
     float $fval = `optionVar -query polySoftEdge`;
     floatSliderGrp -edit -value $fval polySoftEdge;
	//int $ival = `optionVar -query polySoftEdgeWorldSpace`;
    //checkBoxGrp -edit -value1 $ival polySoftEdgeWorldSpace;
}

global proc performPolySoftEdgeCallback (string $parent, int $doIt)
{
	setParent $parent;
	optionVar -floatValue polySoftEdge 
			`floatSliderGrp -query -value polySoftEdge`;
    //optionVar -intValue polySoftEdgeWorldSpace
        //`checkBoxGrp -query -value1 polySoftEdgeWorldSpace`;
	if ($doIt) {
		performPolySoftEdge 0;
		addToRecentCommandQueue "performPolySoftEdge 0" "PolySoftEdge";
	}
}

proc polySoftEdgeOptions ()
{
	string $commandName = "performPolySoftEdge";
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");
	   
	string $layout = getOptionBox();
	setParent $layout;
	setUITemplate -pushTemplate DefaultTemplate;
	waitCursor -state 1;
	tabLayout -scr true -tv false;
	
	string $parent = `columnLayout -adjustableColumn 1`;

	floatSliderGrp -label (uiRes("m_performPolySoftEdge.kAngle")) -min 0.0 -max 180.0 -fmn 0.0 -fmx 180.0 polySoftEdge;

	setParent ..;

    //checkBoxGrp -label1 "World Space Coords" polySoftEdgeWorldSpace;

	waitCursor -state 0;
	setUITemplate -popTemplate;
	   
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit -label (uiRes("m_performPolySoftEdge.kSoftHard"))
	       -command ($callback + " " + $parent + " " + 1)
		$applyBtn;
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;
	

	setOptionBoxTitle( (uiRes("m_performPolySoftEdge.kOptionBoxTitle")) );

	setOptionBoxHelpTag( "NormalsSoftenHarden" );

	eval (($setup + " " + $parent + " " + 0));      
	showOptionBox();
}

global proc string performPolySoftEdge (int $option)
{
	string $cmd="";
	string $sel[];
	switch ($option) {
	case 0:
		setOptionVars(false);
		float $fval = `optionVar -query polySoftEdge`;
        //int $ivWS = `optionVar -query polySoftEdgeWorldSpace`;
		$cmd=("polySoftEdge -a " + $fval);
		polyPerformAction $cmd e 0;
		break;
	case 1: polySoftEdgeOptions; break;
	default:
		setOptionVars(false);
		float $fval = `optionVar -query polySoftEdge`;
        //int $ivWS = `optionVar -query polySoftEdgeWorldSpace`;
		$cmd=("polySoftEdge -a " + $fval);
		$cmd = ("polyPerformAction \"" + $cmd + "\" e 0");
		// $cmd ="performPolySoftEdge 0";
	}
	return $cmd;
}
