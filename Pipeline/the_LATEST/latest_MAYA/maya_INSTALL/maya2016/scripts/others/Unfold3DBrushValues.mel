// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//	Description:	initializes Unfold3DBrush tool property sheet values
//
//	Input Arguments:
//		toolName  - this is the name of the instance of the tool
//					that the property sheet is modifying.
//
//	Return Value:
//		None.
//

global proc Unfold3DBrushValues(string $toolName) 
{
//	string $parent = (`toolPropertyWindow -q -location` + "|Unfold3DBrush|Unfold3DTabs|Unfold3DTab");
	string $parent = (`toolPropertyWindow -q -location` + "|Unfold3DBrush");
	setParent $parent;

	frameLayout -e -en true -cl false unfold3DBrushFrame;
	Unfold3DBrushOptionValues($toolName);

	string $brushInfo[];
	$setInt = eval("Unfold3DContext -q -u " + $toolName);
	if ($setInt) {
		$brushInfo[0] = "Unfold UV Tool";
		$brushInfo[1] = "UV_Unfold_Brush.png";
		$brushInfo[2] = "UnfoldBrush";
	} else {
		$brushInfo[0] = "Optimize UV Tool";
		$brushInfo[1] = "UV_Optimize_Brush.png";
		$brushInfo[2] = "OptimizeBrush";
	}
	toolPropertySetCommon $brushInfo[0] $brushInfo[1] $brushInfo[2];
	toolPropertySelect Unfold3DBrush;
	
	string $nameField = `toolPropertyWindow -query -field`;
	text -edit -label $brushInfo[0] $nameField;
	
	string $reset = `toolPropertyWindow -query -resetButton`;
	button -edit -enable true -command ("Unfold3DBrushValues_ResetTool \"" + $toolName + "\"") $reset;
}

global proc Unfold3DBrushOptionValues(string $toolName)
{
	int $setInt;
	float $setFloat;
	
	$setInt = eval("Unfold3DContext -q -u " + $toolName);
	if ($setInt) {
		radioButtonGrp -e
			-select 1
			mode;
		floatSliderGrp -e -enable false surfangle;
	} else {
		radioButtonGrp -e
			-select 2
			mode;
		floatSliderGrp -e -enable true surfangle;
	}

	$setFloat = eval("Unfold3DContext -q -sizeuv " + $toolName);
	floatSliderGrp -e
		-v $setFloat
		brushSize;
	
	$setFloat = eval("Unfold3DContext -q -pressure " + $toolName);
	floatSliderGrp -e
		-v $setFloat
		brushPressure;
		
	$setInt = eval("Unfold3DContext -q -ite " + $toolName);
	intSliderGrp -e
		-v $setInt
		iterations;
		
	$setInt = eval("Unfold3DContext -q -bi " + $toolName);
	if ($setInt) {
		checkBoxGrp -e
			-v1 $setInt
			biti;
	}
	$setInt = eval("Unfold3DContext -q -tf " + $toolName);
	if ($setInt) {
		checkBoxGrp -e
			-v2 $setInt
			biti;
	}
				
	$setFloat = eval("Unfold3DContext -q -sa " + $toolName);
	floatSliderGrp -e
		-v $setFloat
		surfangle;
}