// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  May 2002
//
//
global proc fluidOceanAddSurfaceLocator(int $useSetAttr, int $type, int $isPond)
{
	if( !fluidEditLicenseFound() ) {
		error(uiRes("m_create2DFluid.kNoFluidLicense"));
		return;
	}
	
	$oceanShader = getCurrentOceanOrPond();

	if( $oceanShader != "" ){
		// ignore the isPond argument, just use the current ocean or pond
		$isPond = 0;
		if( nodeType($oceanShader) == "fluidShape" )
			$isPond = 1;

		if( $type == 0 ){
			if( $isPond ){
				pondLocator $oceanShader 0 0;
			} else {
				oceanLocator $oceanShader 0 0;
			}
		} else if( $type == 1 ){
			oceanDynamicLocator $oceanShader 0 0 $useSetAttr 0 "" 0 0 $isPond;
		} else if( $type == 2 ){
			oceanDynamicLocator $oceanShader 0 0 $useSetAttr 1 "" 0 0 $isPond;
		} else if( $type == 3 ){
			oceanDynamicLocator $oceanShader 0 0 $useSetAttr 0 "" 1 0 $isPond;
		} else {
			string $sel[] = `ls -sl -type transform`;
			int $i, $j;
			int $doBoat = ($type >= 5 );
			int $motorBoat = ($type == 6 );
			int $addedObject = false;

			for( $i = 0; $i < size( $sel ); $i++ ){
				string $dag[] = `ls -dag $sel[$i]`;
				int $isOceanPlane = false;
				for( $j = 0; $j < size( $dag ); $j++ ){
					if(  match("oceanPlane", $dag[$j]) != "" 
					   ||match("oceanPreviewPlane", $dag[$j]) != "" ){
						// TODO check for selected ponds
					   $isOceanPlane = true;
					   break;
					}
				}
				if( !$isOceanPlane ){
					oceanDynamicLocator $oceanShader 0 0 $useSetAttr 0 $sel[$i] $doBoat $motorBoat $isPond;
					$addedObject = true;
				}
			}
			if( $addedObject == false){
				error (uiRes("m_fluidOceanAddSurfaceLocator.kNoObjectSelected"));
			}
		}
	} 
}

