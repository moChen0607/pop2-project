// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

/*!	\file TODO.mel

	A utility to help identify areas of the code that need work.

	This is just a syntactically similar interface of the TODO macro
	in C++ code that uses the toDo command to register hits of
	incomplete code and mark areas of Python source for extraction
	to the code health summary.

	This should only be called from tests as we obviously don't want
	to pollute customer-visible files with this sort of thing.

	Example usage:

	proc myIncompleteFunction(int $case)
	{
		switch( $case ) {
		case 0:
			handleCase0()
		break;

		case 1:
		handleCase1()
		break;
	
		default:
			TODO( 'Finish','Unhandled case value ' + case,'MAYA-99999' );
			// Currently only cases 0 and 1 are handled but there are
			// situations in which values of 2 or 3 can be passed in. Those
			// represent edge cases at the moment and they will be handled
			// once our customer feedback lets us know exactly what we
			// should be doing in those situations.
			break;
		}
	}

	\sa ToDo.h
	\sa TODO.py
*/

//======================================================================
/*!
	\brief Register a "TODO" with the system.
	
	This is used to track when running code hits an area that has work
	to be done. This can help track down bugs, inefficiencies, and just
	generally make incomplete work more visible.

	\param[in] type
		What type of ToDo is it. Entries are grouped by this
		value. There are some hardcoded values to choose from, or you can use
		your own.
		  	Refactor	: Code works but needs some sort of refactoring.
			Hack		: Ugly shortcuts were taken to get something working quickly.
			Finish		: Code doesn't handle all cases yet.
			Bug			: There is a known problem with the code.
			Performance	: The code could be made faster or more scalable.

	\param[in] description
		Short description of what work needs to be done to remedy the problem.

	\param[in] jiraEntry
		Link to the name of a JIRA entry referencing this code.
*/
global proc TODO(string $type, string $description, string $jiraEntry)
{
}

