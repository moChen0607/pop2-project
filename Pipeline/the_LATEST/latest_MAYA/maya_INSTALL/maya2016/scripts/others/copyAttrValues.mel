// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


//
//  Procedure Name:
//      copyAttrValuesMain
//
//  Description:
//      This procedure copies attr values from the source node to the 
//		destination node.
//
//  Input Arguments:
//      string $objList[]: list of objects - source first, then destination items
//		string $attrList[]: list of attrs to copy
//
//  Return Value:
//      None.
//
global proc copyAttrValuesMain( string $objList[], string $attrList[] ){
	string $objSource = $objList[0];
	string $objDest;
	int $i;
	string $attr;
	for ($attr in $attrList){
		$value = `getAttr ($objSource + "." + $attr)`;
		for ($i=1; $i < size($objList); $i++) {
			$objDest = $objList[$i];
			catch(`setAttr ($objDest + "." + $attr) $value`);
			string $dest = `connectionInfo -ged ($objSource + "." + $attr)`;
			if ($dest != ""){
				string $tokens[];
				clear $tokens;
				int $num = `tokenize $dest "." $tokens`;
				$newDest = ($objDest + "." + $tokens[1]);
				$source = `connectionInfo -sfd ($objSource + "." + $attr)`;
				if ($source != "" && $dest != "")
					{catch(`connectAttr $source $newDest`);}
			}
		}	
	}	
}

//
//  Procedure Name:
//      copyAttrValues
//
//  Description:
//      This procedure gets the selected channels from the channelBox. It then 
//		sends those lists to copyAttrValuesMain for copying the selected
//		attribute values between nodes.
//
// 		-select at least 2 objects, source object last (so
// 		 you can see it's attributes in the channelBox)
// 		-highlight attributes to copy in the channelBox
// 		-run script
//
//		This script currently only copies connections - it
// 		does not duplicate the upstream nodes.
//
//  Input Arguments:
//      None
//
//  Return Value:
//      None.
//
global proc copyAttrValues(){
	// process selected objects
	string $objList[] = `channelBox -q -mainObjectList mainChannelBox`;
	string $attrList[] = `channelBox -q -selectedMainAttributes mainChannelBox`;
	copyAttrValuesMain $objList $attrList; 

	// now process history nodes
	$attrList = `channelBox -q -selectedHistoryAttributes mainChannelBox`;
	$objList = `channelBox -q -historyObjectList mainChannelBox`;
	copyAttrValuesMain $objList $attrList;

}


