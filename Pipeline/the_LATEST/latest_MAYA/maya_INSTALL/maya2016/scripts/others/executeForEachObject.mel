// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//
//
//
// Creation Date:  Mar. 14, 1997
//
//<doc>
//<name executeForEachObject>
//
//<synopsis>
//	string[] executeForEachObject( string $inThisList[], string $thisCmd )
//
//<description>
//		This procedure takes a list of object names and applies the
//		command in "thisCmd" to each object.  The object name is
//		substituted for a %s in the command.  
//
//<flags>
//		string $inThisList[] - a list of object names to operate on
//		string $thisCmd - a string with %s in it.
//
//<returns>
//		An array of strings is returned containing
//		the names of all results from executing this command on each
//		applicable object.
//
//<examples>
//
//  // Example 1. if "thisCmd" is a string that looks like:
//          string $thisCmd = "reverseCommand -ch off -rpo on %s";
//  // and curve1 and curve2 are in the given list, then the commands 
//  // that will be executed for each object will look like:
//          reverseCommand -ch off -rpo on curve1;
//          reverseCommand -ch off -rpo on curve2;
//
//  // Example 2.  if "thisCmd" is a string that looks like:
//          string $thisCmd = "reverseProc( true, false, %s )";
//  // and curve1 and curve2 are in the given list, then the commands 
//  // that will be executed for each object will look like:
//          reverseProc( true, false, "curve1" );
//          reverseProc( true, false, "curve2" );
//
//  // Example 3.
//          cone; sphere; select -all;
//          string $cmd = "duplicate %s";
//          string $itemList[] = `ls -sl`;
//          select -d;
//          string $results[] = executeForEachObject($itemList, $cmd);	
//
//</doc>
//
global proc string[] executeForEachObject( 
	string $inThisList[], string $thisCmd )
{
	string $listOfExecutedObjects[];
	string $results[];
	int $numExecutions = 0;
	int $numObjects = size($inThisList);
	if( $numObjects > 0 ) {
		int $i;
		string $tmp;
		for( $i=0; $i<$numObjects; $i+=1 ) {
			if ( "" == $inThisList[$i] ) {
				$tmp = `substitute "%s" $thisCmd $inThisList[$i]`;
			}
			else {
				$tmp = `substitute "%s" $thisCmd ("\"" + $inThisList[$i] + "\"")`;
			}
			if( !catch( $results = evalEcho( $tmp ) )) {
				$numExecutions ++;
				int $numResults = size( $results );
				int $numExec = size( $listOfExecutedObjects );
				for( $n = 0; $n < $numResults; $n ++ ) {
					$listOfExecutedObjects[$numExec + $n] = $results[$n];
				}
			}
		}
	}
	return $listOfExecutedObjects;
}
