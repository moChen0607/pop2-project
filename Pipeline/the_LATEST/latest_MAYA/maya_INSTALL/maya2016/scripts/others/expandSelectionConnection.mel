// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  October 13, 1998
//
//  Description:
//		This is a helper proc which will return a string which explicitly
//	lists the members of the selection connection.  It is intended to be used
//	by option box scripts that may be called with selection connections.
//
//  Input Arguments:
//		string $selectionConnection		The name of the selection connection
//										to expand.
//										If $selectionConnection is not a valid
//										selection, then an empty string is
//										returned
//
//  Return Value:
//		A string (which looks like an array) of all the members of the
//	selection connection.
//

global proc string
expandSelectionConnection (string $selectionConnection)
{
	if ($selectionConnection == "") {
		return ("");
	}
	if (!`selectionConnection -exists $selectionConnection`) {
		return ("");
	}
	string $members = "{";
	string $objects[] = expandSelectionConnectionAsArray($selectionConnection);
	int $count = 0;
	for ($item in $objects) {
		if ($count != 0) {
			$members = $members + ", ";
		}
		$members = $members + "\"" + $item + "\"";
		$count++;
	}
	$members = $members + "}";
	return ($members);
}

global proc string[] 
expandSelectionConnectionAsArray (string $selectionConnection)
{

	string $mem[];

	if(( $selectionConnection != "" )
	&&   `selectionConnection -exists $selectionConnection` )
	{
		$mem = `selectionConnection -query -object $selectionConnection`;
	}

	// filter out any summary objects
	int $count = 0;
	string $members[] = {};
	for ($m in $mem) {
		if (match(uiRes("s_TdopeSheetEditorStrings.rDopesheetSummary"), $m) == ""  && 
			match(uiRes("s_TdopeSheetEditorStrings.rSceneSummary"), $m) == "") 
		{ 
			$members[$count] = $m;
			$count++;
		}
	}

	return $members;
}

