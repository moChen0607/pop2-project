// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Dec 18, 1996
//
//  Description:
//      This script is a script for option box dialog for untrim command.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//

proc setOptionVars (int $forceFactorySettings)
{
	untrimSetOptionVars( $forceFactorySettings );
}

global proc untrimSetup( string $parent,
						 int $forceFactorySettings,
						 string $goToTool )
{
	// Retrieve the option settings
	//
	setOptionVars ($forceFactorySettings);
	untrimToolSetup( $forceFactorySettings, $goToTool );

	setParent $parent;

	// Query the optionVar's and set the values into the controls

	int $localIntValue;
	string $localStringValue;

	$localIntValue = `optionVar -q untrimOriginal`;
	checkBoxGrp -e -v1 $localIntValue keepOriginal;

	$localIntValue = `optionVar -q untrimChanges` + 1;
	radioButtonGrp -e -sl $localIntValue whichChanges;

	if( "" != $goToTool ) { 
		checkBoxGrp -e -v1 `scriptCtx -q -euc $goToTool`
		  scriptToolExtraWidget;
		checkBoxGrp -e -v2 `scriptCtx -q -lac $goToTool`
		  scriptToolExtraWidget;
	}
}

global proc untrimCallback (string $parent, int $doIt, string $goToTool )
{
	if( "" != $goToTool ) {
		optionVar -iv untrimEuc `scriptCtx -q -euc $goToTool`;
		optionVar -iv untrimLac `scriptCtx -q -lac $goToTool`;
	}
    setParent $parent;

	// Set the optionVar's from the control values, and then perform the command
	optionVar -intValue untrimOriginal `checkBoxGrp -q -v1 keepOriginal`;

	optionVar -intValue untrimChanges
		(`radioButtonGrp -q -sl whichChanges` - 1);

	if (1 == $doIt) {
		performUntrim( 0, $goToTool );
		string $tmpCmd = "performUntrim(0, \"" + $goToTool + "\")";
		addToRecentCommandQueue $tmpCmd "Untrim";
	}
	else if( $doIt ) {
		setToolTo $goToTool;
	}
}

proc untrimOptions( int $inTheTool, string $goToTool )
{
	//	Name of the command for this option box.
	//
	string $commandName = "untrim";

	//	Build the option box actions.
	//
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	global string $gOptionBoxActionToolItem;
	$gOptionBoxActionToolItem = "modelWithToolUntrim";
	global string $gOptionBoxActionToolItemCB;
	$gOptionBoxActionToolItemCB = "untrimToolScript 3";

	//	Step 1:  Get the option box.
	//	============================
	string $layout = getOptionBox();
	setParent $layout;
	
	//	Step 2:  Pass the command name to the option box.
	//	=================================================
	setOptionBoxCommandName($commandName);
	
	//	Step 3:  Activate the default UI template.
	//	==========================================
	setUITemplate -pushTemplate DefaultTemplate;

	//	Step 4: Create option box contents.
	//	===================================
	
	//	Turn on the wait cursor.
	//
	waitCursor -state 1;

	tabLayout -scr true -tv false;
	
	string $parent = `columnLayout -adjustableColumn 1`;
	
	checkBoxGrp
		-ncb 1
		-label ""
		-label1 (uiRes("m_performUntrim.kKeepOriginal")) 
		keepOriginal;

	radioButtonGrp
		-nrb 2
		-label (uiRes("m_performUntrim.kUntrimOption")) 
		-label1 (uiRes("m_performUntrim.kLast")) 
		-label2 (uiRes("m_performUntrim.kAll")) 
		whichChanges;

	if( $inTheTool ) {
		separator;
		checkBoxGrp -ncb 2 -label (uiRes("m_performUntrim.kToolBehavior")) 
		  -label1 (uiRes("m_performUntrim.kExit")) 
		  -v1 off
		  -on1 ("scriptCtx -e -euc true " + $goToTool)
		  -of1 ("scriptCtx -e -euc false " + $goToTool)

		  -label2 (uiRes("m_performUntrim.kAuto")) 
		  -v2 on
		  -on2 ("scriptCtx -e -lac true " + $goToTool)
		  -of2 ("scriptCtx -e -lac false " + $goToTool)
		  scriptToolExtraWidget;
	}

	//	Turn off the wait cursor.
	//
	waitCursor -state 0;
	
	//	Step 5: Deactivate the default UI template.
	//  ===========================================
	//
	setUITemplate -popTemplate;

	//	Step 6: Customize the buttons.  
	//	==============================

	//	'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	if( $inTheTool ) {
		button -edit -label (uiRes("m_performUntrim.kUntrimTool")) 
			-command ($callback + " " + $parent + " 3 \"" + $goToTool + "\"")
			$applyBtn;
	}
	else {
		button -edit -label (uiRes("m_performUntrim.kUntrim")) 
			-command ($callback + " " + $parent + " 1 \"" + $goToTool + "\"")
			$applyBtn;
	}

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " 0 \"" +
				  $goToTool + "\"; hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " 1 \"" + $goToTool + "\"")
		$resetBtn;

	//	Step 7: Set the option box title.
	//	=================================
	//
	if( $inTheTool ) {
		setOptionBoxTitle (uiRes("m_performUntrim.kUntrimToolTitle"));
	}
	else {
		setOptionBoxTitle (uiRes("m_performUntrim.kUntrimTitle"));
	}

	//	Step 8: Customize the 'Help' menu item text.
	//	============================================
	//
	setOptionBoxHelpTag( "UntrimSurfaces" );

	//	Step 9: Set the current values of the option box.
	//	=================================================
	//
	eval ($setup + " " + $parent + " 0 \"" + $goToTool + "\"");	
	
	//	Step 10: Show the option box.
	//	=============================
	//
	showOptionBox();
}

//
//  Procedure Name:
//      untrimHelp
//
//  Description:
//		Return a short description about this command.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      string.
//

proc string untrimHelp()
{
	return 
	"  Command: Untrim - untrim a trimmed surface\n" +
	"Selection: trimmed surface";
}

proc string assembleCmd()
{
    string $cmd;

    setOptionVars( false );

    int $dohistory = `constructionHistory -q -tgl`;
    int $replaceOrig = !`optionVar -q untrimOriginal`;
    int $doChanges = `optionVar -q untrimChanges`;
    int $doAsScript = false;

    $cmd = ("untrimPreset " + $dohistory + " " +
			$replaceOrig + " " +
			$doChanges + " " +
			$doAsScript);

    return $cmd;
}

global proc string performUntrim (int $action, string $goToTool )
//
// The action variable means
//      0 - do the command
//      1 - show the option box
//      2 - return the drag command
//      3 - Show the tool option box dialog.
{
	int $inTheTool = false;
	if( 3 == $action ) {
		$action = 1;
		$inTheTool = true;
	}

    string $cmd = "";
    switch ($action) {
	  case 0:
		setOptionVars (false);
		$cmd = `assembleCmd`;
		eval($cmd);
		break;

	  case 1:
		untrimOptions( $inTheTool, $goToTool );
		break;

	  case 2:
	  default:
		setOptionVars (false);
		$cmd = `assembleCmd`;
		break;
    }
    return $cmd;
}
