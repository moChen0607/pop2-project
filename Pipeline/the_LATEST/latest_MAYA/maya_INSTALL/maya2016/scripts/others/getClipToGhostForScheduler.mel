// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


// Utility functions
proc string clipToGhostFromCharacter( string $scheduler )
{
	string $characters[] = `clipSchedule -q -ch $scheduler`;
	if ( size($characters) == 0 )
		return "";

	string $conns[] = `listConnections -type clipToGhostData -d 1 -s 0 $characters[0]`;
	return ( size($conns) ) ? $conns[0] : "";
}

// Main entry point/function

//
//  Procedure Name:
//      getClipToGhostForScheduler
//
//  Description:
//      Determine the clipToGhost node connected to a named scheduler.
//
// Input Arguments:
//      $scheduler: The scheduler for which we'd like to find the clipToGhost node.
//
global proc string getClipToGhostForScheduler( string $scheduler )
{
	if ( size( $scheduler ) == 0 )
		return "";

	string $clips[] = `clipSchedule -q -name $scheduler`;

	// For each clip get the name of the clipToGhost node connected to it
	string $clipToGhostNodes[];
	for ( $c in $clips )
		$clipToGhostNodes = 
			stringArrayCatenate( 
				`listConnections -type clipToGhostData -d 1 -s 0 $c`,
				$clipToGhostNodes
			);

	// If none of the clips have been connected to the clipToGhost node
	// yet, the above loop will come up empty. Hence, we 
	// find the clipToGhost node, by seeing looking at the conncetion between the 
	// character and the clipToGhost node
	string $fromCharacter = clipToGhostFromCharacter( $scheduler );
	if ( size($fromCharacter) )
		$clipToGhostNodes[ size($clipToGhostNodes) ] = $fromCharacter;

	// If more than one clipToGhost node is found return an error
	$clipToGhostNodes = stringArrayRemoveDuplicates( $clipToGhostNodes );
	if ( size( $clipToGhostNodes ) > 1 )
		error( (uiRes("m_getClipToGhostForScheduler.kErrorMultipleClipToGhostNodes")) );

	// Otherwise, return the clipToGhost node
	return ( size( $clipToGhostNodes ) == 0 ) ? 
		( "" ) :
		( $clipToGhostNodes[0] );
}
