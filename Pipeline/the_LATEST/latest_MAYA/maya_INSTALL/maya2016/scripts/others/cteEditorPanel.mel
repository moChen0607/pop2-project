// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

proc string cteEditorGraphEdName( string $whichPanel )
{
    return ( $whichPanel + "CTEEd" );
}

global proc createCTEEditor (string $whichPanel)
{
	//  create unique names for editors based on panel name
	//
	string $cteEd   = cteEditorGraphEdName( $whichPanel  );

	loadAnimPanelLibrary;

	cteEditor
		-unParent
		-mainListConnection cteEditorList
		-menu "cteEdMenu"
		-autoFit `optionVar -query cteEditorAutoFit`
		-displayInfinities false
		$cteEd;

	registerEditor $cteEd cteEditorList;

}

global proc refreshCteMuteButton(int $mute)
{
	float $r = 0.5, $g = 0.5, $b = 0.5;
	if ($mute)
	{
		$r = 1;
		$g = 0.5;
		$b = 0.55;
	}
	
	checkBox -e 
		-value $mute 
		-enableBackground $mute
		-backgroundColor $r $g $b
		cteMuteButton;
}

global proc toggleMuteCTE(int $mute)
{
	cte -mute $mute;
	refreshCteMuteButton($mute);
}

global proc onCteMuteChanged()
{
	int $isCteMuted = `cte -q -mute`;
	refreshCteMuteButton($isCteMuted);
}

global proc addCTEEditor (string $whichPanel)
{
	string $cteEd   = cteEditorGraphEdName( $whichPanel  );

	
	// Make sure that there is no template active
	setUITemplate -pushTemplate NONE;

	// Define the standard animation editing panel
	//
	string $widgetList[] = `definePanelElements $whichPanel`;
	
	// Attach tools to the tool form
	//
	int $iconSize = 26;

	setParent $widgetList[5];
		iconTextButton
		-i1 "traxFrameAll.png"
		-width $iconSize -height $iconSize 
		-annotation (uiRes("m_cteEditorPanel.kFrameAllIconAnnot")) 
		-command ("cteEditor -edit -lookAt all " + $cteEd)
		frameAllButton;

		iconTextButton
		-i1 "traxFrameRange.png"
		-width $iconSize -height $iconSize 
		-annotation (uiRes("m_cteEditorPanel.kFramePlaybackIconAnnot")) 
		-command (
			"$start = `playbackOptions -query -minTime`; $end = `playbackOptions -query -maxTime`; $buffer = ($end - $start) * 0.025; " +
			"animView " +
			"-startTime ($start - $buffer) " +
			"-endTime ($end + $buffer) " +
			$cteEd
		)
		frameRangeButton;
		
		iconTextButton
		-i1 "traxFrameSelected.png"
		-width $iconSize -height $iconSize 
		-annotation (uiRes("m_cteEditorPanel.kFrameSelectedIconAnnot")) 
		-command ("cteEditor -edit -lookAt selected " + $cteEd)
		frameSelectedButton;

		iconTextButton
		-i1 "centerCurrentTime.png"
		-width $iconSize -height $iconSize 
		-annotation (uiRes("m_cteEditorPanel.kCenterCurrentTimeIconAnnot"))  
		-command ("cteEditor -edit -lookAt currentTime " + $cteEd)
		centerCurrentTimeButton;
		
		// mute CTE button
		int $isCteMuted = `cte -q -mute`;					
			
		checkBox 
			-label (uiRes("m_cteEditorPanel.kMuteCTEcheck"))
			-onCommand ("toggleMuteCTE(1)")
			-offCommand ("toggleMuteCTE(0)")
			-value $isCteMuted			
			-width 70
			-height 25			
			cteMuteButton;
		
		refreshCteMuteButton($isCteMuted);

	setParent $widgetList[4];
		iconTextButton
			-i1 "getGraphEditor.png"
			-width $iconSize -height $iconSize
			-command ( 
				"$left = `cteEditor -q -viewLeft " + $cteEd + "`; " + 
				"$right = `cteEditor -q -viewRight " + $cteEd + "`;" +
				"replaceEditor graphEditor1 GraphEditor;" +
				"animCurveEditor -e -viewLeft $left -viewRight $right graphEditor1GraphEd;")
			-annotation (uiRes("m_cteEditorPanel.kGetGraphEditorIconAnnot")) 
			getGraphEditorButton;
	
	int $margin = 1 ;

	formLayout -edit
		-attachForm $widgetList[5] "left" $margin 	
		-attachForm $widgetList[5] "top" $margin
		-attachForm $widgetList[5] "bottom" $margin
		-attachControl $widgetList[5] "right" 0 getGraphEditorButton

		-attachNone getGraphEditorButton "left" 
		-attachForm getGraphEditorButton "top" $margin
		-attachForm getGraphEditorButton "bottom" $margin
		-attachForm getGraphEditorButton "right" $margin
		$widgetList[4];

	setParent $widgetList[2];


	// Parent the editors to the editor layout
	cteEditor -edit -parent $widgetList[6] $cteEd;

	setParent -top;

	setUITemplate -popTemplate;
	
	// register event listeners
	scriptJob -compressUndo true -permanent -parent $cteEd -event teMuteChanged ("onCteMuteChanged()");
}

global proc removeCTEEditor (string $whichPanel)
{
	string $cteEd   = cteEditorGraphEdName( $whichPanel  );

	if (`cteEditor -exists $cteEd`) {
		cteEditor -edit -unParent $cteEd;
	}
}

global proc deleteCTEEditor (string $whichPanel)
{
	string $cteEd   = cteEditorGraphEdName( $whichPanel  );

	if (`cteEditor -exists $cteEd`) {
		deleteUI -editor $cteEd;
	}
}

global proc string saveStateCTEEditor (string $whichPanel)
{
	return "";
}
