// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//	Creation Date:  13 April 1997
//
//  Procedure Name:
//      setNewBoneFlexorJoint
//
//  Description:
//		Assign the selected joint as the driver for the selected bone
//	    flexor.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//

global proc setNewBoneFlexorJoint()
//
//	Description:
//   
//
{
	int $ii;
	int $foundJoint = 0;
	int $foundLattice = 0;
	string $latticeName;
	string $jointName;

	string $rels[3];
	string $sel[5] = `ls -sl`;
	int $count = size($sel);
	for ($ii = 0; $ii < $count; $ii++) {
		if (nodeType($sel[$ii]) == "joint") {
			$foundJoint++;
			$jointName = $sel[$ii];
		} else if (nodeType($sel[$ii]) == "transform") {
			$rels = `listRelatives $sel[$ii]`;
			for ($jj = 0; $jj < size($rels); $jj++) {
				if (nodeType($rels[$jj]) == "lattice") {
					int $isIntermediate = `getAttr ($rels[$jj]+".io")`;
					if (! $isIntermediate) {
						$foundLattice++;
						$latticeName = $rels[$jj];
					}
				}
			}
		}
	}

	if ($foundJoint != 1 || $foundLattice != 1) {
		error( (uiRes("m_setNewBoneFlexorJoint.kOneJointAndOneBoneLattice")));
		return;
	}

	string $boneFlex = "";
	string $conns[2] = `listConnections ($latticeName+".li")`;
	$count = size($conns);
	for ($ii = 0; $ii < $count; $ii++) {
		if (nodeType($conns[$ii]) == "boneLattice") {
			$boneFlex = $conns[$ii];
			break;
		}
	}

	if ($boneFlex == "") {
		error( (uiRes("m_setNewBoneFlexorJoint.kSelectedLattice")));
	}

	boneLattice -e -j $jointName $boneFlex;
}
