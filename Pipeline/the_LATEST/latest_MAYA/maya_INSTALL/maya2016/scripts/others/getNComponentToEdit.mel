// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//	getNComponentToEdit
//
//	Description:
//		This method returns the nComponent to edit based on the selected
//  nCloth object.
//
//  Arguments:
//		$componentsOK: If true, it means that the calling operation can
//          operate on selected components of an nCloth.
//	        If false, it means that the calling operation will only
//          operate on an nCloth selected as an object (not components).
//
global proc string getNComponentToEdit(int $componentsOK)
{
	string $result = "";

	// first get the nCloth related to the selection
	//
	string $meshAndCloth[];
	$meshAndCloth = `getNMeshToPaint "" $componentsOK`;

	// now find the relevant constraint based on the selection
	//
	string $constraint = `getNConstraintToEdit "" 0`;

	if ("" != $constraint && size($meshAndCloth) > 0) {
		if (nodeType($constraint) == "transform") {
			string $constraintShape[] = `listRelatives -ni -path -type dynamicConstraint $constraint`;
			if (size($constraintShape) > 0) {
				$constraint = $constraintShape[0];
			}
		}

		// now find the component on the constraint related to this shape
		//
		string $comp[] = `listConnections -type nComponent $constraint`;
		for ($nComp in $comp) {
			string $conns[] = `listConnections -shapes 1 -s 1 -d 0 ($nComp+".objectId")`;
			if (size($conns) > 0 && $conns[0] == $meshAndCloth[1]) {
				$result = $nComp;
				break;
			}
		}
	}
	return $result;
}
