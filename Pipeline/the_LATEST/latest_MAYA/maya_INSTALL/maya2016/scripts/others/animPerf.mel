// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Method: animPerf()
//
//  Description:
//      Runs a fps test against
//		the current scene
//
//  Flags:
//      None.
//
//  Returns:
//      frames per second
//
proc float _animPerf()
{
	float $startFrame = `playbackOptions -query -ast`;
	float $endFrame =  `playbackOptions -query -aet`;

	// change the frame to $endFrame to start. We need to be sure that we are not on startFrame before we run the script.
	// if we ARE on startFrame, then the first refresh won't have to do any evaluation and we'll get a bad result.
	currentTime $startFrame;

	playbackOptions -ast $startFrame -aet $endFrame -loop "once" -min $startFrame -max $endFrame -ps 0 -mps 0;

	float $startTime = `timerX`;
	play -w;
	float $totalTime = `timerX -startTime $startTime`;

	playbackOptions -loop "continuous";

	// We don't include the time changing to $startFrame because we may already be on that frame.
	float $frameCount = $endFrame - $startFrame;
	float $fps = $frameCount/$totalTime;

	print ("Total time: " + $totalTime + "\n");
	print ("Frame Rate: " + $fps + "\n");

	return $fps;
}

// Switches to vp2
global proc float animPerf()
{
	print "Displaying in VP2 shaded mode\n";
	DisplayShaded;
	ActivateViewport20;

	return _animPerf();
}

// Uses current viewport
global proc float animPerfcv()
{
	print "Displaying in current viewport + shaded mode\n";
	DisplayShaded;

	return _animPerf();
}