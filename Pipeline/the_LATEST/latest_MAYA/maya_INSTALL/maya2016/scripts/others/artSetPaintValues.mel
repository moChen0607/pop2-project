// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  May 2003
//
//  Description:
//      Option tool property window for Paint Set Membership
//
//
//  Procedure Name:
//      artSetPaintValues
//
//  Description:
//      Initialize the option values.
//
//  Input Arguments:
//
//  Return Value:
//      None.
//

global proc artisanSetOperationValues( 
	string 	$artCommand,
	string	$currTool
)
//
//	Set Paint tool values.
//
{
	string $cmd;
	// 
	//	Set Membership operation frameLayout
	//

	$cmd = ($artCommand + " -q -setopertype " + `currentCtx`);
	string $operation =  `eval $cmd`;
	if ( $operation == "add" ) {
		radioButtonGrp -e -sl 1 artSetPaintOperationRadio;
	} else if ( $operation == "transfer" ) {
		radioButtonGrp -e -sl 2 artSetPaintOperationRadio;
	} else if ( $operation == "remove" ) {
		radioButtonGrp -e -sl 3 artSetPaintOperationRadio;
	}

	// 
	//	Set Membership flag frameLayout
	// 
	$cmd  = ($artCommand + " -q -objectsetnames " + `currentCtx`);
	string $setListStr = `eval $cmd`;
	string $sets[];
	tokenize($setListStr, " ", $sets);

	textScrollList -e -ra artSetPaintScrollList;
 	for( $s in $sets ) {
		textScrollList -e -append $s artSetPaintScrollList;
	}

	$cmd = ($artCommand + " -q -settomodify " + `currentCtx`);
	textFieldGrp -e -text `eval $cmd` objectSetNameField;
}


// =======================================================
// Main callback procedure for Paint Selecion tool.
// =======================================================
global proc artSetPaintValues(
	string 	$toolName
)
{
	source "artisanCallback.mel";
    source "artisanValues.mel";

    source "artAttrValues.mel";

	string 	$artCommand	 = "artSetPaintCtx";
	string	$currContext = `currentCtx`;
	string	$currTool	 = `contextInfo -c $currContext`;

	string $icon	= "paintSetMembership.png";
	string $helpTag = "SetPaintTool";

	string $parent = (`toolPropertyWindow -q -location` + "|artSetPaint");
	setParent $parent;

	toolPropertySetCommon $toolName $icon $helpTag;

	// Brush frameLayout values.
	artisanBrushValues( $artCommand, $currTool );

	// Set Operation frameLayout values.
	artisanSetOperationValues( $artCommand, $currTool );

	// Stroke frameLayout values.
	artisanStrokeValues( $artCommand, $currTool );

	// Stylus Pressure frameLayout values.
	artisanPressureValues( $artCommand, $currTool );

	// Display frameLayout values.
	artisanDisplayValues( $artCommand, $currTool );

	toolPropertySelect artSetPaint;
}
