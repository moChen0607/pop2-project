// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//
//
// Creation Date:  	October 2001
//
// Written by:	cpam
//
//  Procedure Name:
//      createAnnotation
//
//  Description:
// 		Builds an annotation node with the given string
//
//  Input Arguments:
//		None.
//
//  Return Value:
//      None.

global proc createAnnotation(string $annotation)
{
	//get the object to annotate
	string $object[] = `ls -sl`;
	
	//make sure it's a valid transform node
	string $checkIfTransform[] = `ls -sl -typ transform $object[0]`;
	if (1 == size($checkIfTransform)) {

		//	carry on if it is and calculate the offset for the annotation
		//	based on the object's bounding box
		float $bbox[] = `xform -q -ws -bb $object[0]`;
		$pos[0] = abs($bbox[3] - $bbox[0]);
		$pos[1] = abs($bbox[4] - $bbox[1]);
		$pos[2] = abs($bbox[5] - $bbox[2]);

		//	create a locator for easier manipulation
		$locator = `spaceLocator -n "annotationLocator#" `;
		xform -ws -t ($bbox[0]+($pos[0]/2)) 
			($bbox[1]+($pos[1]/2))
			($bbox[2]+($pos[2]/2));
		parent $locator $object[0];

		//	sort the sides of the bounding box from lowest to highest so 
		//	that the annotation has a more predictable and consistent offset
		$pos = `sort $pos`;
		
		//	add annotation
		select -r $locator;
		$annotationNode = `annotate -tx $annotation 
			-p ($bbox[0]+($pos[2])) 
			($bbox[1]+($pos[2])) 
			($bbox[2]+($pos[2]))`;

		//	get parent transform of annotation
		string $transform[] = `listRelatives -parent $annotationNode`;

		//	parent annotation to locator
		parent $transform[0] $locator;
		select -r $annotationNode;
	} else {
		error (uiRes("m_createAnnotation.kErrorInvalidObject"));
	}
}
