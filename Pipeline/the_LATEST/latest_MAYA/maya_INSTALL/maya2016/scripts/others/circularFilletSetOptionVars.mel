// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  April 29 1997
//
//  Description:
//      Global function to ensure the options for circularFillet are set.
//
//  Input Arguments:
//      Force the factory setting or not.
//
//  Return Value:
//      None.
//

global proc circularFilletSetOptionVars( 
	int $forceFactorySettings )
//
//
//
{
	// primary Radius.
	//
    if ($forceFactorySettings || !`optionVar -exists circularFilletRadius`) {
        optionVar -floatValue circularFilletRadius 1.0 ;
    }

	// generate cos.
	//
    if ($forceFactorySettings || !`optionVar -exists circularFilletGenerateCoS`) {
        optionVar -intValue circularFilletGenerateCoS 0 ;
    }

	// reverse primary surface.
	//
    if ($forceFactorySettings || !`optionVar -exists circularFilletReversePrimary`) {
        optionVar -intValue circularFilletReversePrimary 0 ;
    }

	// reverse secondary surface.
	//
    if ($forceFactorySettings || !`optionVar -exists circularFilletReverseSecondary`) {
        optionVar -intValue circularFilletReverseSecondary 0 ;
    }

	// circularFilletOutputPolygons (int) - either 0|1 for polygon or Nurbs output
    //
    //if ($forceFactorySettings || !`optionVar -exists circularFilletOutputPolygons`){
    //   optionVar -intValue circularFilletOutputPolygons 0;
    //}

	// Tolerances - To use global Vs local tolerances.
    // tolerance (boolean), local positional tolerance (float),
	// local tangent Tolerance (float).
	//
    if ($forceFactorySettings ||
        !`optionVar -exists circularFilletUseGlobalTolerance`) {
        optionVar -intValue circularFilletUseUseGlobalTolerance 1;
    }
    if ($forceFactorySettings ||
        !`optionVar -exists circularFilletLocalPositionalTolerance`) {
        optionVar -floatValue circularFilletLocalPositionalTolerance 0.01;
    }

    if ($forceFactorySettings ||
        !`optionVar -exists circularFilletLocalTangentTolerance`) {
        optionVar -floatValue circularFilletLocalTangentTolerance 0.1;
    }
}

