// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Creation Date:  11 January 2002
//
//  Procedure Name:
//      polyConvertMM
//
//  Description:
//      This procedure creates the popup/marking menu
//      for poly component conversion. See buildConvertMM.
//
//  Input Arguments:
//      The parent item to parent the popup menu to.
//
//  Return Value:
//      None.


global proc polyConvertMM(string $parent){
	
	string $toEdges = (uiRes("m_polyConvertMM.kToEdges"));
	if (`popupMenu -query -exists $parent`){
		popupMenu -edit -deleteAllItems $parent;
		
		setParent -menu $parent;
		
		string $currentContext = `currentCtx`; 
		if (`contextInfo -exists $currentContext`)
		{
            string $ctx = `contextInfo -c $currentContext`; 
			if ($ctx == "sculptMeshCache")
			{
				sculptMeshCacheConvertMM();
				return;
			}
		}

		menuItem
			-label $toEdges
			-subMenu 1
			-radialPosition "N" 
			;

			menuItem
				-label $toEdges 
				-command ("ConvertSelectionToEdges;" +
				"selectType -ocm -alc false;" +
				"selectType -ocm -polymeshEdge true;")
				-radialPosition "N" 
				-annotation (getRunTimeCommandAnnotation ("ConvertSelectionToEdges"))
				;

			menuItem
				-label (uiRes("m_polyConvertMM.kToContainedEdges"))
				-annotation (getRunTimeCommandAnnotation("ConvertSelectionToContainedEdges"))
				-radialPosition "S" 
				-command "ConvertSelectionToContainedEdges"
				;

			menuItem
				-version "2015"
				-label (uiRes("m_polyConvertMM.kToEdgePerimeter"))
				-annotation (getRunTimeCommandAnnotation("ConvertSelectionToEdgePerimeter"))
				-radialPosition "NE" 
				-command "ConvertSelectionToEdgePerimeter"
				;

			setParent -m ..;
		

		menuItem
			-label (uiRes("m_polyConvertMM.kShrinkSelection")) 
			-command "ShrinkPolygonSelectionRegion" 
			-radialPosition "NW" 
			-annotation (getRunTimeCommandAnnotation ("ShrinkPolygonSelectionRegion"))
			;
		
		menuItem
			-label (uiRes("m_polyConvertMM.kToUVs"))
			-subMenu 1
			-radialPosition "E" 
			;

		menuItem
			-label (uiRes("m_polyConvertMM.kToUVs"))
			-command ("ConvertSelectionToUVs;" +
				"selectType -ocm -alc false;" +
				"selectType -ocm -polymeshUV true;")
			-radialPosition "E" 
			-annotation (getRunTimeCommandAnnotation ("ConvertSelectionToUVs"))
			;

			menuItem
				-version "2015"
				-label (uiRes("m_polyConvertMM.kToUVPerimeter"))
				-annotation (getRunTimeCommandAnnotation("ConvertSelectionToUVPerimeter"))
				-radialPosition "NE" 
				-command "ConvertSelectionToUVPerimeter"
				;

			setParent -m ..;
		
		menuItem
			-label (uiRes("m_polyConvertMM.kEdgeLoopUtilities"))
			-subMenu 1
			-radialPosition "SE" 
			;

			menuItem
				-label (uiRes("m_polyConvertMM.kToEdgeLoop")) 
				-command "SelectEdgeLoopSp" 
				-radialPosition "SE" 
				-annotation (getRunTimeCommandAnnotation ("SelectEdgeLoop"))
				;

			menuItem
				-label (uiRes("m_polyConvertMM.kToEdgeLoopAndDelete")) 
				-command "PolyConvertToLoopAndDelete;" 
				-annotation (getRunTimeCommandAnnotation ("PolyConvertToLoopAndDelete"))
				-radialPosition "NE" 
				-enableCommandRepeat 1
				;

			menuItem
				-label (uiRes("m_polyConvertMM.kToEdgeLoopAndDuplicate")) 
				-command "PolyConvertToLoopAndDuplicate"
				-annotation (getRunTimeCommandAnnotation ("PolyConvertToLoopAndDuplicate"))
				-radialPosition "SW" 
				-enableCommandRepeat 1
				;

			setParent -m ..;

		menuItem
			-label (uiRes("m_polyConvertMM.kEdgeRingUtilities")) 
			-subMenu 1
			-radialPosition "SW" 
			;

			menuItem
				-label (uiRes("m_polyConvertMM.kToEdgeRing")) 
				-command "SelectEdgeRingSp" 
				-radialPosition "SW" 
				-annotation (getRunTimeCommandAnnotation ("SelectEdgeLoop"))
				;

			menuItem
				-label (uiRes("m_polyConvertMM.kToEdgeRingAndSplit")) 
				-command "PolyConvertToRingAndSplit" 
				-annotation (getRunTimeCommandAnnotation ("PolyConvertToRingAndSplit"))
				-radialPosition "SE" 
				-enableCommandRepeat 1
				;

			menuItem
				-label (uiRes("m_polyConvertMM.kToEdgeRingAndCollapse")) 
				-command "PolyConvertToRingAndCollapse;" 
				-annotation (getRunTimeCommandAnnotation ("PolyConvertToRingAndCollapse"))
				-radialPosition "NW" 
				-enableCommandRepeat 1
				;


			setParent -m ..;
			
			string $toFaces = (uiRes("m_polyConvertMM.kToFaces"));
			menuItem
				-label $toFaces 
				-subMenu 1
				-radialPosition "S" 
				;

				menuItem
					-label $toFaces 
					-command ("ConvertSelectionToFaces;" +
					"selectType -ocm -alc false;" +
					"selectType -ocm -polymeshFace true;")
					-radialPosition "S" 
					-annotation (getRunTimeCommandAnnotation ("ConvertSelectionToFaces"))
					;

				menuItem
					-label (uiRes("m_polyConvertMM.kToContainedFaces"))
					-annotation (getRunTimeCommandAnnotation("ConvertSelectionToContainedFaces"))
					-radialPosition "N" 
					-command "ConvertSelectionToContainedFaces"
					;

				setParent -m ..;
		
		menuItem
			-label (uiRes("m_subdConvertMM.kToVertices"))
			-subMenu 1
			-radialPosition "W" 
			;

			menuItem
				-label (uiRes("m_subdConvertMM.kToVertices"))  
				-command ("ConvertSelectionToVertices;" +
					"selectType -ocm -alc false;" +
					"selectType -ocm -polymeshVertex true;") 
				-radialPosition "W" 
				-annotation (getRunTimeCommandAnnotation ("ConvertSelectionToVertices"))
				;

			menuItem
				-version "2015"
				-label (uiRes("m_polyConvertMM.kToVertexPerimeter"))
				-annotation (getRunTimeCommandAnnotation("ConvertSelectionToVertexPerimeter"))
				-radialPosition "NE" 
				-command "ConvertSelectionToVertexPerimeter"
				;

			setParent -m ..;
		
		menuItem
			-label (uiRes("m_polyConvertMM.kGrowSelection"))
			-command "GrowPolygonSelectionRegion" 
			-radialPosition "NE" 
			-annotation (getRunTimeCommandAnnotation ("GrowPolygonSelectionRegion"))
			;

		menuItem
			-label (uiRes("m_polyConvertMM.kToFacePath")) 
			-command "SelectFacePath" 
			-annotation (getRunTimeCommandAnnotation ("SelectFacePath"))
			;

		menuItem
			-label (uiRes("m_polyConvertMM.kToUVShell")) 
			-command "polySelectBorderShell 0" 
			-annotation (getRunTimeCommandAnnotation ("ConvertSelectionToUVs"))
			;

		menuItem
			-label (uiRes("m_polyConvertMM.kToShell")) 
			-command "ConvertSelectionToShell" 
			-annotation (getRunTimeCommandAnnotation ("ConvertSelectionToShell"))
			;
		
		menuItem
			-label (uiRes("m_polyConvertMM.kToShellBorder")) 
			-command "ConvertSelectionToShellBorder" 
			-annotation (getRunTimeCommandAnnotation ("ConvertSelectionToShellBorder"))
			;
		
		menuItem -divider true;

		menuItem 
			-label (uiRes("m_polyConvertMM.kSelectBorderEdgeTool"))
			-annotation (getRunTimeCommandAnnotation ("SelectBorderEdgeTool"))
			-command ("SelectBorderEdgeTool")
			;

		menuItem -divider true;

		menuItem
			-label (uiRes("m_polyConvertMM.kSelectionBoundary")) 
			-command "SelectPolygonSelectionBoundary" 
			-annotation (getRunTimeCommandAnnotation ("SelectPolygonSelectionBoundary"))
			;

		menuItem
			-label (uiRes("m_polyConvertMM.kSelectionConstraints")) 
			-command "PolygonSelectionConstraints" 
			-annotation (getRunTimeCommandAnnotation ("PolygonSelectionConstraints"))
			;
		
		setParent -menu ..;

		// allow user to define a proc with additional menu items
		if (`exists polyConvertUserMM`)
			polyConvertUserMM $parent;
	}
}
