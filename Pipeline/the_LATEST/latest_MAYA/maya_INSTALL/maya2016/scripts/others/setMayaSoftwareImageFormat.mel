// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//      setMayaSoftwareImageFormat
//
//  Description:
//		Change the output format of the rendered images.
//
global proc setMayaSoftwareImageFormat(string $format)
{
	int  $i;
	string $imgformats[] = {
		"soft",			"si",
		"softimage",	"si",
		"pic",			"si",
		"wave",			"rla",
		"wavefront",	"rla",
		"tiff",			"tif",
		"tiff16",		"tif16",
		"rgb",			"sgi",
		"rgb16",		"sgi16",
		"alias",		"als",
		"pix",			"als",
		"iff",			"maya",
		"tdi",			"maya",
		"explore",		"maya",
		"jpeg",			"jpg",
		"iff16",		"maya16",
		"cineon",		"cin",
		"fido",			"cin",
		"quantel",		"yuv", 
		"qtl",			"yuv",
		"targa",		"tga"
	};

	// Apply aliases if necessary
	for ($i=0 ; $i<size($imgformats) ; $i=$i+2) {
		if ($format == $imgformats[$i]) {
			$format = $imgformats[$i+1];
		}
	}

	// 16 bit file formats have the same imf keyword, but a different
	// value in the render globals. Look for them first. Also deal
	// with vector formats, which are not part of the imf ones.
	int $val = -1;
	switch ($format) {
		case "tif16":  $val = 4; break;
		case "sgi16":  $val = 13; break;
		case "maya16": $val = 10; break;
		case "swf":    $val = 60; break;
		case "ai":     $val = 61; break;
		case "svg":    $val = 62; break;
		case "swft":   $val = 63; break;
	}
		
	if ($val >= 0) {
		removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.imageFormat;
		catch(`setAttr defaultRenderGlobals.imageFormat $val`);
		return;
	}

	global string $imfKey[];			// This is the unique imf keyword
	int $size = size($imfKey);
	// If the file format array has not been initialized yet, do
	// so. This routine may be called in dynPaintMenus.mel during
	// the file save for PFX canvas images.
	if ($size == 0)
	{
		createImageFormats();
		$size = size($imfKey);
	}

	// Look for the predefined formats
	for ($i=0 ; $i<$size ; $i++)
	{
		if ($format == $imfKey[$i])
		{
			removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.imageFormat;
			catch(`setAttr defaultRenderGlobals.imageFormat $i`);
			return;
		}
	}

	// Check to see if this is a plug-in format
	global string $imfPlugInKey[];
	$size = size($imfPlugInKey);
	for ($i=0 ; $i<$size ; $i++)
	{
		if ($format == $imfPlugInKey[$i])
		{
			removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.imageFormat;
			catch(`setAttr defaultRenderGlobals.imageFormat 50`);
				
			removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.imfkey;
			catch(`setAttr -type "string" defaultRenderGlobals.imfkey $format`);
			return;
		}
	}

	// If we did not find it, try the image extension. This may be
	// confusing, though, as several format could use the same
	// extension.
	global string $imfPlugInExt[];
	$size = size($imfPlugInExt);
	for ($i=0 ; $i<$size ; $i++)
	{
		if ($format == $imfPlugInExt[$i])
		{
			removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.imageFormat;
			setAttr defaultRenderGlobals.imageFormat 50;

			removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.imfkey;
			catch(`setAttr -type "string" defaultRenderGlobals.imfkey $imfPlugInKey[$i]`);
			return;
		}
	}
}
