// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc createNurbsCircleValues(string $toolName)
{
	string $name = "createNurbsCircle";
	string $parent = (`toolPropertyWindow -q -location` + "|" + $name);
	setParent $parent;

	// Get values from context
	//
	int 	$axisType		= `createNurbsCircleCtx -query -normalType $toolName`;
	float	$axis[3]		= `createNurbsCircleCtx -query -normal $toolName`;
	float 	$sweep 			= `createNurbsCircleCtx -query -sweep $toolName`;
	int 	$degree 		= `createNurbsCircleCtx -query -degree $toolName`;
	int 	$sections		= `createNurbsCircleCtx -query -sections $toolName`;
	int 	$toleranceType	= `createNurbsCircleCtx -query -toleranceType $toolName`;
	float	$tolerance		= `createNurbsCircleCtx -query -tolerance $toolName`;
	float 	$radius 		= `createNurbsCircleCtx -query -radius $toolName`;

	int $dragEdit = `createNurbsCircleCtx -q -doDragEdit $toolName`;	

	// Set control values and callbacks
	//
	if( $axisType < 4 ) {
		radioButtonGrp -edit -select $axisType createNurbsCircleAxisType1;
	} else {
		radioButtonGrp -edit -select ($axisType - 3) createNurbsCircleAxisType2;
	}
	
	radioButtonGrp -edit 
		-onCommand1 ("createNurbsCircleCtx -edit -normalType 1 -normal 1 0 0 " + $toolName )
		-onCommand2 ("createNurbsCircleCtx -edit -normalType 2 -normal 0 1 0 " + $toolName )
		-onCommand3 ("createNurbsCircleCtx -edit -normalType 3 -normal 0 0 1 " + $toolName )
		createNurbsCircleAxisType1;
		
	radioButtonGrp -edit
		-onCommand1 ("createNurbsCircleCtx -edit -normalType 4 -normal " +
						"`floatFieldGrp -query -value1 createNurbsCircleAxis` " +
						"`floatFieldGrp -query -value2 createNurbsCircleAxis` " +
						"`floatFieldGrp -query -value3 createNurbsCircleAxis` " +
						$toolName )
		-onCommand2 ("float $axis[] = `nurbsViewDirectionVector 1`; createNurbsCircleCtx -edit -normalType 5 -normal $axis[0] $axis[1] $axis[2] " + $toolName )
		createNurbsCircleAxisType2;
	
	floatFieldGrp -edit
		-enable ($axisType == 4)
		-changeCommand ("createNurbsCircleCtx -edit -normal " +
						"`floatFieldGrp -query -value1 createNurbsCircleAxis` " +
						"`floatFieldGrp -query -value2 createNurbsCircleAxis` " +
						"`floatFieldGrp -query -value3 createNurbsCircleAxis` " +
						$toolName )
		-value1 $axis[0] 
		-value2 $axis[1] 
		-value3 $axis[2]
		createNurbsCircleAxis;		
		
	floatSliderGrp -edit
		-value $sweep
		-changeCommand ("createNurbsCircleCtx -edit -sweep #1 " + $toolName)
		createNurbsCircleSweepSlider;
		
	int $degreeBtn;
	switch($degree) {
		case 1: $degreeBtn = 1; break;
		case 3: $degreeBtn = 2; break;
	}
	radioButtonGrp -edit
		-select $degreeBtn
		-onCommand1 ("createNurbsCircleCtx -edit -degree 1 " + $toolName)
		-onCommand2 ("createNurbsCircleCtx -edit -degree 3 " + $toolName)
		createNurbsCircleDegree;
		
	radioButtonGrp -edit
		-select $toleranceType
		-onCommand1 ("createNurbsCircleCtx -edit -toleranceType 1 -useTolerance 0 " + $toolName)
		-onCommand2 ("createNurbsCircleCtx -edit -toleranceType 2 -useTolerance 1 -tolerance `floatSliderGrp -query -value createNurbsCircleToleranceSlider` " + $toolName)
		-onCommand3 ("createNurbsCircleCtx -edit -toleranceType 3 -useTolerance 1 " + $toolName)
		createNurbsCircleUseTolerance;
		
	if( $toleranceType == 1 ){
		
		tabLayout -edit
			-visible true -selectTab createNurbsCircleTabWithoutTolerance
			createNurbsCircleTabLayoutForTolerance;
			
	} else {
		
		if( $toleranceType == 2 ){
			
			tabLayout -edit
			-visible true -selectTab createNurbsCircleTabWithTolerance
			createNurbsCircleTabLayoutForTolerance;
				
		} else {
			
			tabLayout -edit
				-visible false
				createNurbsCircleTabLayoutForTolerance;
		}
	}
		
	intSliderGrp -edit
		-value $sections
		-changeCommand ("createNurbsCircleCtx -edit -sections #1 " + $toolName)
		createNurbsCircleSectionsSlider;
		
	floatSliderGrp -edit
		-value $tolerance
		-changeCommand ("createNurbsCircleCtx -edit -tolerance #1 " + $toolName)
		createNurbsCircleToleranceSlider;
		
	floatSliderGrp -edit
		-value $radius
		-changeCommand ("createNurbsCircleCtx -edit -radius #1 " + $toolName)
		createNurbsCircleRadiusSlider;

	checkBoxGrp -e
		-v1 $dragEdit
		-cc1 ("createNurbsCircleCtx -e -doDragEdit " + !$dragEdit + " " + $toolName)
		createNurbsCircleDragEditCheckBox;

	string $icon = "circle.png";
	string $helpTag= "CreateNurbsCircleTool";
	toolPropertySetCommon $toolName $icon $helpTag;
	toolPropertySelect $name;
}
