// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//	Description:
//		Returns all selected param locators on curves.  A list of selected locator
//		shape names are returned.  Any selected items with components are ignored.
//
//
global proc string[] findSelectedCurveLocators()
{
	// Go through the selection list and check the type of each 
	// selected shape.  If the shape is a locator, and is in the
	// underworld of a curve, then it's a curve locator.
	//
	string $locatorNames[];
	string $selectionList[] = `ls -sl`;
	int $numSelected = size($selectionList);
	int $i, $j;
	for( $i = 0; $i < $numSelected; $i ++ ) {

		// Reject all selection items with components
		//
		string $s = match( "\\.", $selectionList[$i]);
		if( size($s) > 0 ) { 
			continue; 
		}

		// Reject all selection items that DO NOT have "->" (which indicates
		// an object in the underworld)
		//
		string $s2 = match( "->", $selectionList[$i]);
		if( size($s2) == 0 ) { 
			continue; 
		}

		// Get all the shapes under this selection item
		//
		string $shapes[] = `listRelatives -s $selectionList[$i]`;
		int $numShapes = size($shapes);

		// If the shape was the selection item, then "listRelatives" returns
		// nothing.  So add the case here so it will be processed.
		//
		if( $numShapes == 0 ) {
			$shapes[0] = $selectionList[$i];
			$numShapes = 1;
		}

		// For each shape
		//
		for( $j = 0; $j < $numShapes; $j ++ ) {
			
			// Check if the shape is a locator
			//
			if( `nodeType $shapes[$j]` == "locator" ) {

				// Get the parent of the selection item 
				//
				string $parent[] = `listRelatives -ap $selectionList[$i]`;				
				// If the parent of the selection item is a transform,
				// then go up another level to its parent. eg. if the
				// selection item was the locator shape, then its 1st parent
				// is the locator transform, and the parent above is the 
				// nurbs curve.
				//
				if( `nodeType $parent[0]` == "transform") { 
					$parent = `listRelatives -ap $parent[0]`;
				}

				// If the parent is a nurbs Curve, then store the path to
				// the locator shape.
				//
				if( `nodeType $parent[0]` == "nurbsCurve" ) {
					string $tmp[] = `listRelatives -pa $shapes[$j]`;
					if( size($tmp) == 0 ) {
						$locatorNames[ size($locatorNames) ] = $shapes[$j];
					} else {
						$locatorNames[ size($locatorNames) ] = $tmp[0];
					}
				}
			}
		}
	}

	return $locatorNames;
}
