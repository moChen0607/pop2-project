// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  13 January 1998
//
//  Description:
//
//
//  Procedure Name:
//      performPolyBoolean
//
//  Description:
//        perform a boolean operation of the selected polygon objects
//         
//  Input Arguments:
//        $option : Whether to set the options to default values.
//  Return Value:
//        command string iff $option==2
//

proc setOptionVars (int $forceFactorySettings)
{
     if ($forceFactorySettings || !`optionVar -exists polyBooleanType`)
		optionVar -intValue polyBooleanType 1;
}

global proc performPolyBooleanSetup (string $parent, int $forceFactorySettings)
{
	setOptionVars($forceFactorySettings);
	setParent $parent;
	
	int $val = `optionVar -query polyBooleanType`;
	optionMenuGrp -edit -sl $val polyBooleanType;
//	intSliderGrp -edit -value $val polyBooleanType;
}

global proc performPolyBooleanCallback (string $parent, int $doIt)
{
	setParent $parent;
	optionVar -intValue polyBooleanType
		`optionMenuGrp -query -sl polyBooleanType`;
	if ($doIt) {
		performPolyBoolean 0;
		addToRecentCommandQueue "performPolyBoolean 0" "PolyBoolean";
	}
}

proc polyBooleanOptions ()
{
	string $commandName = "performPolyBoolean";
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");
	   
	string $layout = getOptionBox();
	setParent $layout;
	setUITemplate -pushTemplate DefaultTemplate;
	waitCursor -state 1;
	
	string $parent = `columnLayout -adjustableColumn 1`;

//	intSliderGrp -label "Operation" -min 1 -max 10 -s 1 polyBooleanType;
	optionMenuGrp  -l "Operation" polyBooleanType;
	menuItem -l "Union" BooleanUnionMenuItem;
	menuItem -l "Difference" BooleanDifferenceMenuItem;
	menuItem -l "Intersection" BooleanIntersectionMenuItem;
	setParent -m ..;
	optionMenuGrp -e -sl 1 polyBooleanType;

	waitCursor -state 0;
	setUITemplate -popTemplate;
	   
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit -label (uiRes("m_performPolyBoolean.kBoolean"))
	       -command ($callback + " " + $parent + " " + 1)
		$applyBtn;
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;

	setOptionBoxTitle( (uiRes("m_performPolyBoolean.kOptions")));

	setOptionBoxHelpTag( "PolyBoolean" );

	eval (($setup + " " + $parent + " " + 0));      
	showOptionBox();
}

global proc string performPolyBoolean (int $option)
{
	string $cmd="";
	string $sel[];
	switch ($option) {
	case 0:
		setOptionVars(false);
		int $ival = `optionVar -query polyBooleanType`;
		$cmd = "polyCBoolOp " + " -op " + $ival + " -useThresholds 1";
		polyPerformAction $cmd o 0;
		break;
	case 1: polyBooleanOptions; break;
	default:
		setOptionVars(false);
		int $ival = `optionVar -query polyBooleanType`;
		$cmd = "polyCBoolOp " + " -op " + $ival + " -useThresholds 1";;
		$cmd = ("polyPerformAction \"" + $cmd + "\" o 0");
	}
	return $cmd;
}
