// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Dec 3, 1998
//
//  Procedure Name:
//      performPolyToCurve
//
//         
//

proc setOptionVars (int $forceFactorySettings)
{			   
	if ($forceFactorySettings || !`optionVar -exists polyToCurveForm`)
		optionVar -intValue polyToCurveForm 3;

	if ($forceFactorySettings || !`optionVar -exists polyToCurveDegree`)
		optionVar -intValue polyToCurveDegree 3;
}

global proc performPolyToCurveSetup (string $parent, int $forceFactorySettings)
{
	setOptionVars($forceFactorySettings);
	setParent $parent;

	int $ival;
	$ival = `optionVar -q polyToCurveForm`;
	radioButtonGrp -edit -select $ival formRBG;

	$ival = `optionVar -q polyToCurveDegree`;
	switch($ival) 
	{
		case 1: radioButtonGrp -e -select 1 rebuildCrvDegree123; break;
		case 2: radioButtonGrp -e -select 2 rebuildCrvDegree123; break;
		case 3: radioButtonGrp -e -select 3 rebuildCrvDegree123; break;
		case 5: radioButtonGrp -e -select 1 rebuildCrvDegree57; break;
		case 7: radioButtonGrp -e -select 2 rebuildCrvDegree57; break;
		default: radioButtonGrp -e -select 3 rebuildCrvDegree123; break;
	}
}

global proc performPolyToCurveCallback (string $parent, int $doIt)
{
	setParent $parent;

	int $ival;
	$ival = `radioButtonGrp -query -select formRBG`;
	optionVar -intValue polyToCurveForm $ival;

	int $degreeBtn123 = `radioButtonGrp -q -select rebuildCrvDegree123`;
	int $degreeBtn57 = `radioButtonGrp -q -select rebuildCrvDegree57`;
	int $degree;
	switch($degreeBtn123) {
		case 1: $degree = 1; break;
		case 2: $degree = 2; break;
		case 3: $degree = 3; break;
		default:
			switch($degreeBtn57) {
				case 1: $degree = 5; break;
				case 2: $degree = 7; break;
				default: $degree = 3; break;
			}
		break;
	}

	optionVar -iv polyToCurveDegree $degree;

	if ($doIt) 
	{
		performPolyToCurve 0;
		addToRecentCommandQueue "performPolyToCurve 0" "CreateCurveFromPoly";
	}
}

proc polyToCurveOptions()
{
	global int $gOptionBoxTemplateDescriptionMarginWidth;
	global int $gOptionBoxTemplateFrameSpacing;
	
	string $commandName = "performPolyToCurve";
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");
	   
	string $layout = getOptionBox();
	setParent $layout;
	setUITemplate -pushTemplate OptionBoxTemplate;
	waitCursor -state 1;

	// Form layout
	string $parent = `formLayout polyToCurveOptionsFormLayout`;

		// Description frame
		string $descriptionFrame = 
		`frameLayout -label (uiRes("m_performPolyToCurve.kDescriptionLabel"))
				-marginWidth $gOptionBoxTemplateDescriptionMarginWidth`;	
			columnLayout;
				text (uiRes("m_performPolyToCurve.kDescription"));
				text (uiRes("m_performPolyToCurve.kDescription2"));
				text (uiRes("m_performPolyToCurve.kDescription3"));
		setParent $parent;

		string $label1 = (uiRes("m_performPolyToCurve.kNotPeriodic"));
		string $label2 = (uiRes("m_performPolyToCurve.kPeriodic"));
		string $label3 = (uiRes("m_performPolyToCurve.kPeriodicIfClosed"));

		// Settings frame
		string $settingsFrame = 
		`frameLayout -label (uiRes("m_performPolyToCurve.kSettingsLbl"))`;
			columnLayout;

				radioButtonGrp -numberOfRadioButtons 3 -vertical
					-label (uiRes("m_performPolyToCurve.kPeriodicLbl"))
						-labelArray3 $label1 $label2 $label3
					formRBG;

				separator -style "none";

				radioButtonGrp -label (uiRes("m_performPolyToCurve.kDegreeLbl"))
					-numberOfRadioButtons 3
					-label1 (uiRes("m_performPolyToCurve.kLinear"))
					-label2 (uiRes("m_performPolyToCurve.kQuadratic"))
					-label3 (uiRes("m_performPolyToCurve.kCubic"))
					-select 3
					rebuildCrvDegree123;

				radioButtonGrp -shareCollection rebuildCrvDegree123
					-numberOfRadioButtons 2
					-label1 (uiRes("m_performPolyToCurve.kQuintic"))
					-label2 (uiRes("m_performPolyToCurve.kHeptic"))
					rebuildCrvDegree57;

			setParent $parent;
		setParent ..;

	formLayout -e
			-af $descriptionFrame "top" $gOptionBoxTemplateFrameSpacing
			-af $descriptionFrame "left" $gOptionBoxTemplateFrameSpacing
			-af $descriptionFrame "right" $gOptionBoxTemplateFrameSpacing
			-an $descriptionFrame "bottom"

			-ac $settingsFrame "top" $gOptionBoxTemplateFrameSpacing $descriptionFrame
			-af $settingsFrame "left" $gOptionBoxTemplateFrameSpacing
			-af $settingsFrame "right" $gOptionBoxTemplateFrameSpacing
			-an $settingsFrame "bottom" 
		$parent;

	waitCursor -state 0;
	setUITemplate -popTemplate;
	   
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit -label (uiRes("m_performPolyToCurve.kConvertLbl"))
	       -command ($callback + " " + $parent + " " + 1)
		$applyBtn;

	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;

	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;
			 
	setOptionBoxTitle( (uiRes("m_performPolyToCurve.kOptionsTitle")) );

	setOptionBoxHelpTag( "PolyToCurve" );

	eval (($setup + " " + $parent + " " + 0));      
	showOptionBox();
}

global proc string performPolyToCurve( int $option )
{
	string $cmd="";
	switch ($option) 
	{
	  case 1:
		// Just the option box
		polyToCurveOptions; 
		break;
		
	  default:
		setOptionVars(false);

		int $form = `optionVar -q polyToCurveForm`;
		$form = $form - 1;

		int $degree = `optionVar -q polyToCurveDegree`;

		$cmd = "polyToCurve -form " + $form + " -degree " + $degree + ";";

		if ($option == 0)
			evalEcho $cmd;

		break;
	}
	return $cmd;
}
