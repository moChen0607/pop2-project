// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  20 Feb 2002
//
//  Description:
//		Create 3D Fluid Container
//
global proc string create3DFluid( int $resW, int $resH, int $resD,
								  float $dimW, float $dimH, float $dimD )
{
	string $fluidShape = "";

	if( !fluidEditLicenseFound() ) {
		error((uiRes("m_create3DFluid.kNoFluidLicense")));
		return $fluidShape;
	}

	$fluidShape = `createFluid false`; 


	
	setAttr ($fluidShape + ".resolutionW") $resW;
	setAttr ($fluidShape + ".resolutionH") $resH;
	setAttr ($fluidShape + ".resolutionD") $resD;

	setAttr ($fluidShape + ".dimensionsW") $dimW;
	setAttr ($fluidShape + ".dimensionsH") $dimH;
	setAttr ($fluidShape + ".dimensionsD") $dimD;
	
	
	
	// If the input resolution is proportional we can enable square voxels without changing the effective resolution
	int $res = $resW;
	float $maxDim = $dimW;
	if( $dimH > $maxDim ){
		$res = $resH;
		$maxDim = $dimH;
	}
	if( $dimD > $maxDim ){
		$res = $resD;
		$maxDim = $dimD;
	}
	setAttr( $fluidShape + ".baseResolution") $res;	
	if(    $resW == (int)((float)$res * $dimW/$maxDim)
		&& $resH == (int)((float)$res * $dimH/$maxDim)
		&& $resD == (int)((float)$res * $dimD/$maxDim) ){
		setAttr( $fluidShape + ".squareVoxels" ) true;
	}

	
	
	string $par[] = `listRelatives -parent $fluidShape`;
	if( size($par[0]) ) {
		select -r $par[0];
	}

	return $fluidShape;
}

