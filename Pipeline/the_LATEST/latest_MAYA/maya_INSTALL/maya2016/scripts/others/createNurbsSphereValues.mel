// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc createNurbsSphereValues(string $toolName)
{
	string $name = "createNurbsSphere";
	string $parent = (`toolPropertyWindow -query -location` + "|" + $name);
	setParent $parent;

	// Get values from context
	//
	int 	$axisType		= `createNurbsSphereCtx -query -axisType $toolName`;
	float	$axis[3]		= `createNurbsSphereCtx -query -axis $toolName`;
	float	$startSweep 	= `createNurbsSphereCtx -query -startSweep $toolName`;
	float 	$endSweep 		= `createNurbsSphereCtx -query -endSweep $toolName`;
	int 	$degree 		= `createNurbsSphereCtx -query -degree $toolName`;
	int 	$sections		= `createNurbsSphereCtx -query -sections $toolName`;
	int 	$spans 			= `createNurbsSphereCtx -query -spans $toolName`;
	int 	$toleranceType	= `createNurbsSphereCtx -query -toleranceType $toolName`;
	float	$tolerance		= `createNurbsSphereCtx -query -tolerance $toolName`;
	float 	$radius 		= `createNurbsSphereCtx -query -radius $toolName`;

	int $dragEdit = `createNurbsSphereCtx -q -doDragEdit $toolName`;	

	// Set control values and callbacks
	//	
	if( $axisType < 4 ) {
		radioButtonGrp -edit -select $axisType createNurbsSphereAxisType1;
	} else {
		radioButtonGrp -edit -select ($axisType - 3) createNurbsSphereAxisType2;
	}
	
	radioButtonGrp -edit 
		-onCommand1 ("createNurbsSphereCtx -edit -axisType 1 -axis 1 0 0 " + $toolName )
		-onCommand2 ("createNurbsSphereCtx -edit -axisType 2 -axis 0 1 0 " + $toolName )
		-onCommand3 ("createNurbsSphereCtx -edit -axisType 3 -axis 0 0 1 " + $toolName )
		createNurbsSphereAxisType1;
		
	radioButtonGrp -edit
		-onCommand1 ("createNurbsSphereCtx -edit -axisType 4 -axis " +
						"`floatFieldGrp -query -value1 createNurbsSphereAxis` " +
						"`floatFieldGrp -query -value2 createNurbsSphereAxis` " +
						"`floatFieldGrp -query -value3 createNurbsSphereAxis` " +
						$toolName )
		-onCommand2 ("float $axis[] = `nurbsViewDirectionVector 1`; createNurbsSphereCtx -edit -axisType 5 -axis $axis[0] $axis[1] $axis[2] " + $toolName )		
		createNurbsSphereAxisType2;
	
	floatFieldGrp -edit
		-enable ($axisType == 4)
		-changeCommand ("createNurbsSphereCtx -edit -axis " +
						"`floatFieldGrp -query -value1 createNurbsSphereAxis` " +
						"`floatFieldGrp -query -value2 createNurbsSphereAxis` " +
						"`floatFieldGrp -query -value3 createNurbsSphereAxis` " +
						$toolName )
		-value $axis[0] $axis[1] $axis[2] 0.0
		createNurbsSphereAxis;	
	
	floatSliderGrp -edit
		-value $startSweep
		-changeCommand ("createNurbsSphereCtx -edit -startSweep #1 " + $toolName)
		createNurbsSphereStartSweepSlider;
		
	floatSliderGrp -edit
		-value $endSweep
		-changeCommand ("createNurbsSphereCtx -edit -endSweep #1 " + $toolName)
		createNurbsSphereEndSweepSlider;
	
	int $degreeBtn;
	switch($degree) {
		case 1: $degreeBtn = 1; break;
		case 3: $degreeBtn = 2; break;
	}
	radioButtonGrp -edit
		-select $degreeBtn
		-onCommand1 ("createNurbsSphereCtx -edit -degree 1 " + $toolName)
		-onCommand2 ("createNurbsSphereCtx -edit -degree 3 " + $toolName)
		createNurbsSphereSurfaceDegree;
		
	radioButtonGrp -edit
		-select $toleranceType
		-onCommand1 ("createNurbsSphereCtx -edit -toleranceType 1 -useTolerance 0 " + $toolName)
		-onCommand2 ("createNurbsSphereCtx -edit -toleranceType 2 -useTolerance 1 -tolerance `floatSliderGrp -query -value createNurbsSphereToleranceSlider` " + $toolName)
		-onCommand3 ("createNurbsSphereCtx -edit -toleranceType 3 -useTolerance 1 " + $toolName)
		createNurbsSphereUseTolerance;
		
	if( $toleranceType == 1 ){
		
		tabLayout -edit
			-visible true -selectTab createNurbsSphereTabWithoutTolerance
			createNurbsSphereTabLayoutForTolerance;
			
	} else {
			
		if( $toleranceType == 2 ){
			
			tabLayout -edit
				-visible true -selectTab createNurbsSphereTabWithTolerance
				createNurbsSphereTabLayoutForTolerance;
				
		} else {
			
			tabLayout -edit
				-visible false
				createNurbsSphereTabLayoutForTolerance;
		}
	}

	floatSliderGrp -edit
		-value $tolerance
		-changeCommand ("createNurbsSphereCtx -edit -tolerance #1 " + $toolName)
		createNurbsSphereToleranceSlider;
		
	intSliderGrp -edit
		-value $sections
		-changeCommand ("createNurbsSphereCtx -edit -sections #1 " + $toolName)
		createNurbsSphereSectionsSlider;
		
	intSliderGrp -edit
		-value $spans
		-changeCommand ("createNurbsSphereCtx -edit -spans #1 " + $toolName)
		createNurbsSphereSpansSlider;	
		
	floatSliderGrp -edit
		-value $radius
		-changeCommand ("createNurbsSphereCtx -edit -radius #1 " + $toolName)
		createNurbsSphereRadiusSlider;
		
	checkBoxGrp -e
		-v1 $dragEdit
		-cc1 ("createNurbsSphereCtx -e -doDragEdit " + !$dragEdit + " " + $toolName)
		createNurbsSphereDragEditCheckBox;
		
	string $icon = "sphere.png";
	string $helpTag= "CreateNurbsSphereTool";
	toolPropertySetCommon $toolName $icon $helpTag;
	toolPropertySelect $name;
}
