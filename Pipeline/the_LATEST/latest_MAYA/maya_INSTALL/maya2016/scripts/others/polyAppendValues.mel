// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
// this proc points the tool properties
// window to the current polyAppend context

global proc callPolyAppendFacetCtx(string $toolName)
{
	int $inval = `radioButtonGrp -query -select textureBox`;

	if($inval == 3)
		$inval = 0;

    eval("polyAppendFacetCtx -edit -tx " + $inval + " " + $toolName);
}

global proc changeMaxPointsValueAppend( string $toolName )
{
	int $useSlider = `checkBoxGrp -query -value1 limitPoints`;
	int $val = -1;
	
	if( $useSlider ){
		
		$val = `intSliderGrp -query -value maxPointsSlider`;
		
		polyAppendFacetCtx -edit -subdivision 1 $toolName;	
		intFieldGrp -edit -value1 1 subdSld;

		disable -value false maxPointsSlider;
		disable -value true subdSld;

	} else {
		
		intSliderGrp -edit -value -1 maxPointsSlider;
		disable -value true maxPointsSlider;
		disable -value false subdSld;
	}

	eval("polyAppendFacetCtx -edit -maximumNumberOfPoints " + $val + " " + $toolName);
}

global proc polyAppendValues ( string $toolName )
{
	string $name = "polyAppend";
	string $parent = (`toolPropertyWindow -query -location` + "|" + $name);
	setParent $parent;
	
	// Subdivisions
    //
	intFieldGrp -e
		-value1  `polyAppendFacetCtx -query -subdivision $toolName`
		-changeCommand ("polyAppendFacetCtx -edit -subdivision #1 " +$toolName)
		subdSld;
		
	int $maxP = `polyAppendFacetCtx -query -maximumNumberOfPoints $toolName`;
	int $limitPoints;
		
	if( $maxP < 3 ){
		$limitPoints = 0;
		$maxP = 4;
		disable -value false subdSld;
		disable -value true maxPointsSlider;
	} else {
		$limitPoints = 1;
		disable -value true subdSld;
		disable -value false maxPointsSlider;
	}
	
	checkBoxGrp -edit
		-value1 $limitPoints
		-changeCommand ("changeMaxPointsValueAppend " + $toolName)
		limitPoints;

	// Max points
	intSliderGrp -edit
		-value $maxP
		-changeCommand ("changeMaxPointsValueAppend " + $toolName)
		maxPointsSlider;
	
	// Texture
	//
	// checkBox -e

	int	$val = `polyAppendFacetCtx -query -tx $toolName`;
	if($val == 0)
		$val = 3;

	radioButtonGrp -edit 
		-select	$val
		-changeCommand ("callPolyAppendFacetCtx " +$toolName)
		textureBox;

	// Rotation
    //
	floatSliderGrp -edit
		-enable `polyAppendFacetCtx -query -isRotateAvailable $toolName`
		-value `polyAppendFacetCtx -query -rotate $toolName`
		-changeCommand ("polyAppendFacetCtx -edit -rotate #1 " +$toolName)
		-dragCommand ("polyAppendFacetCtx -edit -rotate #1 " +$toolName)
		angSld;
	  
	// Planar constraint
    //
    checkBoxGrp -edit
		-value1   `polyAppendFacetCtx -query -planarConstraint $toolName`
		-onCommand1 togglePolyPlanarConstraints 
		-offCommand1 togglePolyPlanarConstraints
		planarBox;
	
	string $helpTag= "AppendtoPolygonTool";
	toolPropertySetCommon $toolName "polyAppendFacet.png" $helpTag;
	toolPropertySelect $name;
}
