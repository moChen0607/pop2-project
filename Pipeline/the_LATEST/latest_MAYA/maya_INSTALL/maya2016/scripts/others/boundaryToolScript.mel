// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  14 January 1999
//
//
//  Procedure Name:
//      boundaryToolScript
//
//  Description:
//	create wrapper around the boundary command
//
//  Input Arguments:
//		0 ==> do the command.
//		1 ==> show the action option box
//		2 ==> return the command
//		3 ==> show tool option box
//		4 ==> enter the tool
//
//  Return Value:
//      None.
//

global proc boundary4curves( int $ncurves, string $goToTool )
{
	scriptCtx -e -ssc $ncurves $goToTool;
	if( 4 == $ncurves ) {
		scriptCtx -e
		  -setNoSelectionPrompt (uiRes("m_boundaryToolScript.kSelectFourCurves"))
		  -setSelectionPrompt (uiRes("m_boundaryToolScript.kFourCurvesComputeBoundary"))
		  $goToTool;
	}
	else if( 3 == $ncurves ) {
		scriptCtx -e
		  -setNoSelectionPrompt (uiRes("m_boundaryToolScript.kSelectThreeCurves"))
		  -setSelectionPrompt (uiRes("m_boundaryToolScript.kThreeCurvesComputeBoundary"))
		  $goToTool;
	}
	else {
		scriptCtx -e
		  -setNoSelectionPrompt (uiRes("m_boundaryToolScript.kSelectCurves"))
		  -setSelectionPrompt (uiRes("m_boundaryToolScript.kComputeBoundary"))
		  $goToTool;
	}
}

global proc boundaryToolSetup( int $forceFactorySettings, string $goToTool )
{
	if( $forceFactorySettings || !`optionVar -ex boundaryEuc` ) {
		optionVar -iv boundaryEuc 0;
	}
	if( $forceFactorySettings || !`optionVar -ex boundaryLac` ) {
		optionVar -iv boundaryLac 1;
	}
	if( "" != $goToTool ) {
		scriptCtx -e -euc `optionVar -q boundaryEuc` $goToTool;
		scriptCtx -e -lac `optionVar -q boundaryLac` $goToTool;
		boundary4curves 0 $goToTool;
	}
}

global proc boundaryValues ( string $toolName ) 
{
	performBoundary 3 $toolName;
	scriptCtxCommonValues( $toolName );
}

global proc boundaryProperties()
{
	scriptCtxCommonProperties;
}

global proc boundaryAutoComplete( int $val, string $goToTool )
{
	scriptCtx -e -lac $val $goToTool;
	boundary4curves `optionVar -q boundaryAutoEdgeCount` $goToTool;
}

proc createBoundaryContext( string $tool )
{
	if( ! `scriptCtx -exists $tool` ) {
		boundaryToolSetup( 0, "" );
		scriptCtx -i1 "boundary.png"
		  -title (uiRes("m_boundaryToolScript.kBoundaryTool"))
		  -bcn "boundary"

		  -exitUponCompletion `optionVar -q boundaryEuc`
		  -totalSelectionSets 1
		  -expandSelectionList true
		  -fcs ("boundaryToolScript 0")

		  -setNoSelectionPrompt (uiRes("m_boundaryToolScript.kSelectCurves"))
		  -setSelectionPrompt (uiRes("m_boundaryToolScript.kComputeBoundary"))

		  -setAutoToggleSelection true
		  -setAutoComplete `optionVar -q boundaryLac`
		  -showManipulators true

		  -setSelectionCount 0
		  -nurbsCurve true
		  -isoparm true
		  -curveOnSurface true
		  -surfaceEdge true
		  -polymeshEdge true
		$tool;
	}
}

global proc string boundaryToolScript( int $setToTool )
//
//	Description :
//		0 ==> do the command.
//		1 ==> show the action option box
//		2 ==> return the command
//		3 ==> show tool/action option box
//		4 ==> enter the tool/do the command
{
	string $tool = "";
	if( $setToTool > 2 ) {
		if( !`optionVar -q modelWithToolBoundary` ) {
			$setToTool = 4 - $setToTool;
		}
		else {
			$tool = "boundaryContext";
			createBoundaryContext $tool;
		}
	}
	return scriptToolScript( "performBoundary", $setToTool, $tool );
}
