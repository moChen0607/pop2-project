// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//	Procedure Name:
//		doCreateScaleConstraintArgList
//
//	Description:
//		Create a Scale constraint
//
//	Input Arguments:
//	$version: The version of this option box.  Used to know how to 
//	interpret the $args array.
//		"1" : first verison of shot creation command
//  
//	$args
//	Version 1
//		
//	[0]		$maintainOffset : whether to maintain offset
//	[1]		$sx				: if maintain offset is off, the x value of scale component
//	[2]		$sy				: if maintain offset is off, the y value of scale component
//	[3]		$sz				: if maintain offset is off, the z value of scale component
//	[4]		$axisX			: if true to skip constraining scale on X axis
//	[5]		$axisY			: if true to skip constraining scale on Y axis
//	[6]		$axisZ			: if true to skip constraining scale on Z axis
//	[7]	    $weight			: the weight to use for the Scale constraint
//	[8]	    $animLayer		: if a layer is specified, the anim layer to put this constraint on.
//  [9]		$overrideMode	: whether to set the layer to override mode.

//
//	Return Value:
//		none
//

global proc
doCreateScaleConstraintArgList( string $version, string $args[] )
{
	
	if( $version == 1 && size($args) != 10 )
	{
		print (uiRes("m_doCreateScaleConstraintArgList.kScaleConstraintArgListWrongLength"));

		return;
	}	
	
	string $cmd = "scaleConstraint";

	int $maintainOffset = $args[0];	
	float $sx = $args[1];
	float $sy = $args[2];
	float $sz = $args[3];
	float $axisX = $args[4];
	float $axisY = $args[5];
	float $axisZ = $args[6];		
	float $weight = $args[7];
	string $animLayer = $args[8];
	int $overrideMode = $args[9];	

	if ($maintainOffset) {
		$cmd = ($cmd + " -mo");
	} else {
		//	Translate values
		//		
		$cmd = ($cmd + " -offset " + $sx + " " + $sy + " " + $sz );
	}
	
	// AnimLayer    
	
	if( size($animLayer)>0 && size(`ls -type animLayer $animLayer`) > 0 )
	{
		if(!askUserIfLayerModeChangeIsOK($animLayer,$overrideMode))
			return;
		
		if($overrideMode)
		{
			animLayer -e -override 1 $animLayer;
		}
		else
		{
			animLayer -e -override 0 $animLayer;
		}

		$cmd = ($cmd + " -layer " + $animLayer );		
	}
	
	// Axis values
	//

	// The axis values are inverted so that they represent
	// which axes to *skip* as opposed to which axes are on.	
	// If any of these values is true, that means that one
	// or more axes are to be skipped.
	if ($axisX)
		$cmd = ($cmd + " -skip x");
	if ($axisY)
		$cmd = ($cmd + " -skip y");
	if ($axisZ)
		$cmd = ($cmd + " -skip z");

	$cmd = ($cmd 
			+ " -weight " + $weight);
	
	evalEcho($cmd);	
			
}
