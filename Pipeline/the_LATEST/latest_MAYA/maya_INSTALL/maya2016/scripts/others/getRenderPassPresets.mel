// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

proc string renderPassReleasePresetList_PresetToUI(string $fileName)
//
//	Description:
//		Convert file name of pass preset to UI nice name
//
{
    string $presetName;
    switch($fileName){
        case "2DMotionVector":
            $presetName = (uiRes("m_getRenderPassPresets.kMotionVector2D"));
            break;
        case "3DMotionVector":
            $presetName = (uiRes("m_getRenderPassPresets.kMotionVector3D"));
            break;
        case "ambient":
            $presetName = (uiRes("m_getRenderPassPresets.kAmbient"));
            break;
        case "ambientIrradiance":
            $presetName = (uiRes("m_getRenderPassPresets.kAmbientIrradiance"));
            break;
        case "ambientMaterialColor":
            $presetName = (uiRes("m_getRenderPassPresets.kAmbientMaterialColor"));
            break;
        case "ambientOcclusion":
            $presetName = (uiRes("m_getRenderPassPresets.kAmbientOcclusion"));
            break;
        case "beauty":
            $presetName = (uiRes("m_getRenderPassPresets.kBeauty"));
            break;
        case "beautyWithoutReflectionsRefractions":
            $presetName = (uiRes("m_getRenderPassPresets.kBeautyNoReflectRefract"));
            break;
        case "blank":
            $presetName = (uiRes("m_getRenderPassPresets.kBlank"));
            break;
        case "cameraDepth":
            $presetName = (uiRes("m_getRenderPassPresets.kCameraDepth"));
            break;
        case "cameraDepthRemapped":
            $presetName = (uiRes("m_getRenderPassPresets.kCameraDepthRemapped"));
            break;
        case "coverage":
            $presetName = (uiRes("m_getRenderPassPresets.kCoverage"));
            break;
        case "customColor":
            $presetName = (uiRes("m_getRenderPassPresets.kCustomColor"));
            break;
        case "customDepth":
            $presetName = (uiRes("m_getRenderPassPresets.kCustomDepth"));
            break;
        case "customLabel":
            $presetName = (uiRes("m_getRenderPassPresets.kCustomLabel"));
            break;
        case "customVector":
            $presetName = (uiRes("m_getRenderPassPresets.kCustomVector"));
            break;
        case "diffuse":
            $presetName = (uiRes("m_getRenderPassPresets.kDiffuse"));
            break;
        case "diffuseWithoutShadows":
            $presetName = (uiRes("m_getRenderPassPresets.kDiffuseWithoutShadows"));
            break;
        case "diffuseMaterialColor":
            $presetName = (uiRes("m_getRenderPassPresets.kDiffuseMaterialColor"));
            break;
        case "directIrradiance":
            $presetName = (uiRes("m_getRenderPassPresets.kDirectIrradiance"));
            break;
        case "directIrradianceWithoutShadows":
            $presetName = (uiRes("m_getRenderPassPresets.kDirectIrradianceWithoutShadows"));
            break;
        case "incidenceLightNorm":
            $presetName = (uiRes("m_getRenderPassPresets.kIncandescenceLightNormal"));
            break;
        case "incidenceCamNorm":
            $presetName = (uiRes("m_getRenderPassPresets.kIncandescenceCameraNormal"));
            break;
        case "incidenceCamNormMaterial":
            $presetName = (uiRes("m_getRenderPassPresets.kIncandescenceCameraNormalMaterial"));
            break;
        case "incandescence":
            $presetName = (uiRes("m_getRenderPassPresets.kIncandescence"));
            break;
        case "indirect":
            $presetName = (uiRes("m_getRenderPassPresets.kIndirect"));
            break;
        case "lightVolume":
            $presetName = (uiRes("m_getRenderPassPresets.kLightVolume"));
            break;
        case "matte":
            $presetName = (uiRes("m_getRenderPassPresets.kMatte"));
            break;
        case "normalized2DMotionVector":
            $presetName = (uiRes("m_getRenderPassPresets.kNormalized2DMotionVector"));
            break;
        case "normalCam":
            $presetName = (uiRes("m_getRenderPassPresets.kNormalCamera"));
            break;
        case "normalCamMaterial":
            $presetName = (uiRes("m_getRenderPassPresets.kNormalCameraMaterial"));
            break;
        case "normalObj":
            $presetName = (uiRes("m_getRenderPassPresets.kNormalObject"));
            break;
        case "normalObjMaterial":
            $presetName = (uiRes("m_getRenderPassPresets.kNormalObjectMaterial"));
            break;
        case "normalWorld":
            $presetName = (uiRes("m_getRenderPassPresets.kNormalWorld"));
            break;
        case "normalWorldMaterial":
            $presetName = (uiRes("m_getRenderPassPresets.kNormalWorldMaterial"));
            break;
        case "objectVolume":
            $presetName = (uiRes("m_getRenderPassPresets.kObjectVolume"));
            break;
        case "opacity":
            $presetName = (uiRes("m_getRenderPassPresets.kOpacity"));
            break;
        case "glowSource":
            $presetName = (uiRes("m_getRenderPassPresets.kGlowSource"));
            break;
        case "reflectedMaterialColor":
            $presetName = (uiRes("m_getRenderPassPresets.kReflectedMaterialColor"));
            break;
        case "refractionMaterialColor":
            $presetName = (uiRes("m_getRenderPassPresets.kRefractionMaterialColor"));
            break;
        case "rawShadow":
            $presetName = (uiRes("m_getRenderPassPresets.kRawShadow"));
            break;
        case "reflection":
            $presetName = (uiRes("m_getRenderPassPresets.kReflection"));
            break;
        case "refraction":
            $presetName = (uiRes("m_getRenderPassPresets.kRefraction"));
            break;
        case "scatter":
            $presetName = (uiRes("m_getRenderPassPresets.kScatter"));
            break;
        case "sceneVolume":
            $presetName = (uiRes("m_getRenderPassPresets.kSceneVolume"));
            break;
        case "shadow":
            $presetName = (uiRes("m_getRenderPassPresets.kShadow"));
            break;
        case "specular":
            $presetName = (uiRes("m_getRenderPassPresets.kSpecular"));
            break;
        case "specularWithoutShadows":
            $presetName = (uiRes("m_getRenderPassPresets.kSpecularWithoutShadows"));
            break;
        case "translucence":
            $presetName = (uiRes("m_getRenderPassPresets.kTranslucence"));
            break;
        case "translucenceWithoutShadows":
            $presetName = (uiRes("m_getRenderPassPresets.kTranslucenceWithoutShadows"));
            break;
		case "UV":
            $presetName = (uiRes("m_getRenderPassPresets.kUVPass"));
            break;
		case "worldPosition":
            $presetName = (uiRes("m_getRenderPassPresets.kWorldPosition"));
            break;
        default:
            $presetName = $fileName;
    }
    return $presetName;
}

global proc string renderPassDefaultName(string $ui, string $passID)
//
//	Description:
//		Get default name of render pass.
//
{
    string $nodeName;
    if( (uiRes("m_getRenderPassPresets.kMotionVector2D")) == $ui){
        $nodeName = "mv2DToxik";
    }
    else if( (uiRes("m_getRenderPassPresets.kMotionVector3D")) == $ui){
        $nodeName = "mv3D";
    }
    else if( (uiRes("m_getRenderPassPresets.kAmbient")) == $ui){
        $nodeName = "ambient";
    }
    else if( (uiRes("m_getRenderPassPresets.kAmbientIrradiance")) == $ui){
        $nodeName = "ambientIrradiance";
    }
    else if( (uiRes("m_getRenderPassPresets.kAmbientMaterialColor")) == $ui){
        $nodeName = "ambientRaw";
    }
    else if( (uiRes("m_getRenderPassPresets.kAmbientOcclusion")) == $ui){
        $nodeName = "AO";
    }
    else if( (uiRes("m_getRenderPassPresets.kBeauty")) == $ui){
        $nodeName = "beauty";
    }
    else if( (uiRes("m_getRenderPassPresets.kBeautyNoReflectRefract")) == $ui){
        $nodeName = "beautyNoReflectRefract";
    }
    else if( (uiRes("m_getRenderPassPresets.kBlank")) == $ui){
        $nodeName = "";
    }
    else if( (uiRes("m_getRenderPassPresets.kCameraDepth")) == $ui){
        $nodeName = "depth";
    }
    else if( (uiRes("m_getRenderPassPresets.kCameraDepthRemapped")) == $ui){
        $nodeName = "depthRemapped";
    }
    else if( (uiRes("m_getRenderPassPresets.kCoverage")) == $ui){
        $nodeName = "coverage";
    }
    else if( (uiRes("m_getRenderPassPresets.kCustomColor")) == $ui){
        $nodeName = "customColor";
    }
    else if( (uiRes("m_getRenderPassPresets.kCustomDepth")) == $ui){
        $nodeName = "customDepth";
    }
    else if( (uiRes("m_getRenderPassPresets.kCustomLabel")) == $ui){
        $nodeName = "customLabel";
    }
    else if( (uiRes("m_getRenderPassPresets.kCustomVector")) == $ui){
        $nodeName = "customVector";
    }
    else if( (uiRes("m_getRenderPassPresets.kDiffuse")) == $ui){
        $nodeName = "diffuse";
    }
    else if( (uiRes("m_getRenderPassPresets.kDiffuseWithoutShadows")) == $ui){
        $nodeName = "diffuseNoShadow";
    }
    else if( (uiRes("m_getRenderPassPresets.kDiffuseMaterialColor")) == $ui){
        $nodeName = "diffuseMaterialColor";
    }
    else if( (uiRes("m_getRenderPassPresets.kDirectIrradiance")) == $ui){
        $nodeName = "directIrradiance";
    }
    else if( (uiRes("m_getRenderPassPresets.kDirectIrradianceWithoutShadows")) == $ui){
        $nodeName = "directIrradianceNoShadow";
    }
    else if( (uiRes("m_getRenderPassPresets.kIncandescenceLightNormal")) == $ui){
        $nodeName = "incidenceLN";
    }
    else if( (uiRes("m_getRenderPassPresets.kIncandescenceCameraNormal")) == $ui){
        $nodeName = "incidenceCN";
    }
    else if( (uiRes("m_getRenderPassPresets.kIncandescenceCameraNormalMaterial")) == $ui){
        $nodeName = "incidenceCNMat";
    }
    else if( (uiRes("m_getRenderPassPresets.kIncandescence")) == $ui){
        $nodeName = "incandescence";
    }
    else if( (uiRes("m_getRenderPassPresets.kIndirect")) == $ui){
        $nodeName = "indirect";
    }
    else if( (uiRes("m_getRenderPassPresets.kLightVolume")) == $ui){
        $nodeName = "volumeLight";
    }
    else if( (uiRes("m_getRenderPassPresets.kMatte")) == $ui){
        $nodeName = "matte";
    }
    else if( (uiRes("m_getRenderPassPresets.kNormalized2DMotionVector")) == $ui){
        $nodeName = "mv2DNormRemap";
    }
    else if( (uiRes("m_getRenderPassPresets.kNormalCamera")) == $ui){
        $nodeName = "normalCam";
    }
    else if( (uiRes("m_getRenderPassPresets.kNormalCameraMaterial")) == $ui){
        $nodeName = "normalCamMaterial";
    }
    else if( (uiRes("m_getRenderPassPresets.kNormalObject")) == $ui){
        $nodeName = "normalObj";
    }
    else if( (uiRes("m_getRenderPassPresets.kNormalObjectMaterial")) == $ui){
        $nodeName = "normalObjMaterial";
    }
    else if( (uiRes("m_getRenderPassPresets.kNormalWorld")) == $ui){
        $nodeName = "normalWorld";
    }
    else if( (uiRes("m_getRenderPassPresets.kNormalWorldMaterial")) == $ui){
        $nodeName = "normalWorldMaterial";
    }
    else if( (uiRes("m_getRenderPassPresets.kObjectVolume")) == $ui){
        $nodeName = "volumeObject";
    }
    else if( (uiRes("m_getRenderPassPresets.kOpacity")) == $ui){
        $nodeName = "opacity";
    }
    else if( (uiRes("m_getRenderPassPresets.kGlowSource")) == $ui){
        $nodeName = "glowSource";
    }
    else if( (uiRes("m_getRenderPassPresets.kReflectedMaterialColor")) == $ui){
        $nodeName = "reflectedMaterialColor";
    }
    else if( (uiRes("m_getRenderPassPresets.kRefractionMaterialColor")) == $ui){
        $nodeName = "refractionMaterialColor";
    }
    else if( (uiRes("m_getRenderPassPresets.kRawShadow")) == $ui){
        $nodeName = "shadowRaw";
    }
    else if( (uiRes("m_getRenderPassPresets.kReflection")) == $ui){
        $nodeName = "reflection";;
    }
    else if( (uiRes("m_getRenderPassPresets.kRefraction")) == $ui){
        $nodeName = "refraction";
    }
    else if( (uiRes("m_getRenderPassPresets.kScatter")) == $ui){
        $nodeName = "scatter";
    }
    else if( (uiRes("m_getRenderPassPresets.kSceneVolume")) == $ui){
        $nodeName = "volumeScene";
    }
    else if( (uiRes("m_getRenderPassPresets.kShadow")) == $ui){
        $nodeName = "shadow";
    }
    else if( (uiRes("m_getRenderPassPresets.kSpecular")) == $ui){
        $nodeName = "specular";
    }
    else if( (uiRes("m_getRenderPassPresets.kSpecularWithoutShadows")) == $ui){
        $nodeName = "specularNoShadow";
    }
    else if( (uiRes("m_getRenderPassPresets.kTranslucence")) == $ui){
        $nodeName = "translucence";
    }
    else if( (uiRes("m_getRenderPassPresets.kTranslucenceWithoutShadows")) == $ui){
        $nodeName = "translucenceNoShadow";
    }
	else if( (uiRes("m_getRenderPassPresets.kUVPass")) == $ui){
        $nodeName = "UVPass";
    }
	else if( (uiRes("m_getRenderPassPresets.kWorldPosition")) == $ui){
        $nodeName = "worldPosition";
    }
	else{
        $nodeName = $passID;
    }

    return $nodeName;
}

global proc string[] getRenderPassPresets()
//
//	Description:
//      Get presets for render pass node
//      The following is extracted from procedure AEshowPresetMenu.
//
{
    global string $gRenderPassPresetPath[];
    clear $gRenderPassPresetPath;

    string $presetList[];
    string $type = "renderPass";
    string $array[] ;
    
    // first show the released presets
    //
    string $fpath = `getenv "MAYA_LOCATION"`;
    $fpath = $fpath + "/presets/attrPresets/" + $type;
 
    int $size = getPresetFiles($array, $fpath);
    if ($size > 0 && !($size == 1 && $array[0] == "unknown"))
    {
         for( $file in $array){
            // only show .mel files
            //
            if(  size( match( ".mel", $file ) ) ){
                string $presetName = `substitute ".mel" $file ""`;
                $presetList[size($presetList)] = renderPassReleasePresetList_PresetToUI($presetName);
                $gRenderPassPresetPath[size($gRenderPassPresetPath)] = $fpath + "/" +$file;
            }
        }
    }

    // then show any presets specified by MAYA_PRESET_PATH 
	// each entry in the path points at equivalents to the presets directory
	string $mayaPresetPath = `getenv MAYA_PRESET_PATH`;
	string $presetPaths[];
	if (`about -nt`) 
		tokenize $mayaPresetPath ";" $presetPaths;
	else
		tokenize $mayaPresetPath ":" $presetPaths;
	for($presetPath in $presetPaths) {
		$fpath = $presetPath;
		$fpath = $fpath + "/attrPresets/" + $type;
        getPresetFiles($array, $fpath);
        $size = getPresetFiles($array, $fpath);
        if ($size > 0 && !($size == 1 && $array[0] == "unknown"))
        {
            for( $file in $array){
                // only show .mel files
                if(  size( match( ".mel", $file ) ) ){
                    string $presetName = `substitute ".mel" $file ""`;
                    $presetList[size($presetList)] = renderPassReleasePresetList_PresetToUI($presetName);
                    $gRenderPassPresetPath[size($gRenderPassPresetPath)] = $fpath + "/" +$file;
                }
            }
        }
    }

	// finally show any local presets that the user has created
	$fpath = `internalVar -userPrefDir`;
	$fpath = substitute( "prefs", $fpath, "presets/attrPresets");
	$fpath  = $fpath + $type; 
    getPresetFiles($array, $fpath);
    $size = getPresetFiles($array, $fpath);
    string $localPreset = (uiRes("m_getRenderPassPresets.kLocalPreset"));
    if ($size > 0 && !($size == 1 && $array[0] == "unknown"))
    {
        for( $file in $array){
            // only show .mel files
            if(  size( match( ".mel", $file ) ) ){
                string $presetName = `substitute ".mel" $file ""`;
                $presetList[size($presetList)] = $presetName + $localPreset;
                $gRenderPassPresetPath[size($gRenderPassPresetPath)] = $fpath + "/" +$file;
            }
        }
    }

    string $sortArray[] = {};
    int $i;
    $size = size($presetList);
    for($i = 0; $i < $size; $i++){
        $sortArray[$i] = $presetList[$i] + "%" + $gRenderPassPresetPath[$i];
    }
    $sortArray = `sort $sortArray`;

    string $tempArray[];
    for($i = 0; $i < $size; $i++){
        tokenize($sortArray[$i], "%", $tempArray);
        $presetList[$i] = $tempArray[0];
        $gRenderPassPresetPath[$i] = $tempArray[1];
    }
    
    return $presetList;
}
