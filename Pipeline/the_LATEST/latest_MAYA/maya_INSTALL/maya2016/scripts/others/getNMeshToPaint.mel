// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc string[] getNMeshToPaint( string $useThisMesh, int $componentsOK )
//
//	Description:
//	Get the mesh to be painted. 
//	Arguments:
//		$useThisMesh: If "", then get the mesh from the selection, else
//              use the supplied mesh.
//	    $componentsOK: If true, it means that the calling operation can
//        		operate on selected components of an nCloth.
//        		If false, it means that the calling operation will only
//         		operate on an nCloth selected as an object (not components).
//
{
	string $mSel[];
	if( $useThisMesh == "" ){
		// First, list all the meshes selected
		//
		$mSel = `ls -sl -dag -type mesh -visible -noIntermediate`;

		if (size($mSel) == 0 && $componentsOK) {
			string $sel[] = `ls -sl -visible -noIntermediate`;
			for ($item in $sel) {
				string $buf[];
				if (tokenize($item,".",$buf) > 1)
				{
					string $isMesh[] = `ls -lf -dag -type mesh $buf[0]`;
					if (size($isMesh) && !stringArrayContains($buf[0],$mSel))
					{
						$mSel[size($mSel)] = $buf[0];
					}
				}
			}
		}
	} else {
		$mSel[0] = $useThisMesh;
	}

	// Search for a unique nucleus mesh
	//
	string $retval[];
	int $index = 0;
	int $numSel = size($mSel);
	string $mesh;
	string $cloth;
	while( $index < $numSel ){
		string $meshSel = $mSel[$index];
		$cloth = findTypeInHistory( $meshSel, "nBase", 1,1 );	
		if( $cloth != "" ){
			if( $mesh != "" ){
				// We had previously found one, bail
				//
				warning((uiRes("m_getNMeshToPaint.kNClothPaintMultiWarn")));
				clear $retval;
				break;
			} else {
				$mesh = $meshSel;
				$retval[0] = $mesh;
				$retval[1] = $cloth;
			}
		}
		$index++;
	}
	return $retval;
}

