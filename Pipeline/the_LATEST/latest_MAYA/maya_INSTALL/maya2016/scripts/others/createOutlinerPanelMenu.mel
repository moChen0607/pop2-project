// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date: 	9 June 1997
//
//
// Create an outliner panel's menu bar
//

global proc buildOutlinerContextHelpItems(string $nameRoot, string $menuParent)
//
//  Description:
//		Build context sensitive menu items
//		
//  Input Arguments:
//		$nameRoot - name to use as the root of all item names
//		$menuParent - the name of the parent of this menu
//
//  Return Value:
//      None
//
{
	menuItem -label (uiRes("m_createOutlinerPanelMenu.kHelpOnOutliner")) 
		-enableCommandRepeat false
		-command "showHelp Outliner";
}

global proc string getCurrentOutlinerPanel ()
//
// Description:
// 		Called by run time commands to retrieve the current outliner panel name
//		The panel can be the outliner panel, or the dynamic relationship editor panel.
//
{
	string $currentPanel = `getPanel -withFocus`;
	if ("" != $currentPanel) {
		string $panelType = `getPanel -typeOf $currentPanel`;
		if ($panelType ==  "outlinerPanel") {
			return ($currentPanel);
		} else if ( $panelType == "scriptedPanel") {
			string $scriptedPanelType = `scriptedPanel -q -type $currentPanel`;
			if ( $scriptedPanelType == "dynRelEdPanel" ) {
				return ($currentPanel + "dynRelOutlinerEditor");
			}
		}
	}
	return "";				
}

global proc createOutlinerDisplayMenu( string $ed, int $useDefaultRuntimeCommands )
{

    // Show Menu
    //
    string $showMenuName = `menu -tearOff true
            -label (uiRes("m_createOutlinerPanelMenu.kDisplay"))
            -familyImage "menuIconShow.png"
            Show`;
    menu -e
        -pmc ("updateOutlinerPanelMenu "+$showMenuName+" "+$ed)
        $showMenuName;

    menuItem -checkBox false -label (uiRes("m_createOutlinerPanelMenu.kDAGObjectsOnly"))
        -c ("if(" + $useDefaultRuntimeCommands + ") {" +
			"	OutlinerToggleDAGOnly;" + 
			"} else {" + 
			"	outlinerEditor -e -showDagOnly #1 " + $ed + ";" + 
			"}")
        dagOnlyItem;
    menuItem -checkBox false -label (uiRes("m_createOutlinerPanelMenu.kShapes"))
		-c ("if(" + $useDefaultRuntimeCommands + ") {" +
			"	OutlinerToggleShapes;" + 
			"} else {" + 
			"	outlinerEditor -e -showShapes #1 " + $ed + ";" +
			"}")
        shapesItem;

    menuItem -checkBox false -label (uiRes("m_createOutlinerPanelMenu.kReferenceNodes"))
		-c ("if(" + $useDefaultRuntimeCommands + ") {" +
			"	OutlinerToggleReferenceNodes;" + 
			"} else {" + 
			"	outlinerEditor -e -showReferenceNodes #1 " + $ed + ";" + 
			"}")
        referenceNodesItem;
    menuItem -checkBox false -label (uiRes("m_createOutlinerPanelMenu.kReferenceMembers"))
		-c ("if(" + $useDefaultRuntimeCommands + ") {" +
			"	OutlinerToggleReferenceMembers;" + 
			"} else {" + 
			"	outlinerEditor -e -showReferenceMembers #1 " + $ed +  ";" +
			"}")
        referenceMembersItem;

    menuItem -checkBox false
        -label (uiRes("m_createOutlinerPanelMenu.kAttributesChannels"))
		-c ("if(" + $useDefaultRuntimeCommands + ") {" +
			"	OutlinerToggleAttributes;" + 
			"} else {" + 
			"	outlinerEditor -e -showAttributes #1 " + $ed +  ";" +
			"}")
        attributesItem;
    menuItem -label (uiRes("m_createOutlinerPanelMenu.kSetMembers"))
        -checkBox false
		-c ("if(" + $useDefaultRuntimeCommands + ") {" +
			"	OutlinerToggleSetMembers;" + 
			"} else {" + 
			"	outlinerEditor -e -showSetMembers #1 " + $ed +  ";" +
			"}")
        setMembersItem;
    menuItem -checkBox false -label (uiRes("m_createOutlinerPanelMenu.kConnected"))
		-c ("if(" + $useDefaultRuntimeCommands + ") {" +
			"	OutlinerToggleConnected;" + 
			"} else {" + 
			"	outlinerEditor -e -showConnected #1 " + $ed +  ";" +
			"}")
        connectionsItem;
    menuItem -checkBox true -label (uiRes("m_createOutlinerPanelMenu.kShowNamespace"))
		-c ("if(" + $useDefaultRuntimeCommands + ") {" +
			"	OutlinerToggleNamespace;" + 
			"} else {" + 
			"	outlinerEditor -e -showNamespace #1 " + $ed +  ";" +
			"}")
        showNamespaceItem;

    menuItem -checkBox false -label (uiRes("m_createOutlinerPanelMenu.kIgnoreHiddenAttribute"))
		-c ("if(" + $useDefaultRuntimeCommands + ") {" +
			"	OutlinerToggleIgnoreHidden;" + 
			"} else {" + 
			"	outlinerEditor -e -ignoreHiddenAttribute #1 " + $ed +  ";" +
			"}")
        ignoreHiddenAttributeItem;
    menuItem -checkBox false -label (uiRes("m_createOutlinerPanelMenu.kIgnoreUseOutlinerColor"))
		-c ("if(" + $useDefaultRuntimeCommands + ") {" +
			"	OutlinerToggleIgnoreUseColor;" + 
			"} else {" + 
			"	outlinerEditor -e -ignoreOutlinerColor #1 " + $ed +  ";" +
			"}")
        ignoreOutlinerColorItem;

    menuItem -divider true;

  	menuItem  -label (uiRes("m_createOutlinerPanelMenu.kRevealSelected")) 
		-c ("if(" + $useDefaultRuntimeCommands + ") {" +
			"	OutlinerRevealSelected;" + 
			"} else {" + 
			"	outlinerEditor -e -sc 1 " + $ed +  ";" +
			"}")
  		showSelectedItem;

	int $showContents = `outlinerEditor -q -showContainerContents $ed`;
	int $showContainedOnly = `outlinerEditor -q -showContainedOnly $ed`;
	menuItem -label (uiRes("m_createOutlinerPanelMenu.kContainerContents")) -subMenu true;
		radioMenuItemCollection;
		menuItem -label (uiRes("m_createOutlinerPanelMenu.kUnderContainer"))
			-radioButton ($showContents && $showContainedOnly)
			-command("outlinerEditor -e -showContainerContents 1 "+$ed + "; outlinerEditor -e -showContainedOnly 1 " + $ed +";")
			containerContentsItem;
		menuItem -label (uiRes("m_createOutlinerPanelMenu.kUnderParent"))
			-radioButton (!$showContents && !$showContainedOnly)
			-command("outlinerEditor -e -showContainerContents 0 "+$ed + "; outlinerEditor -e -showContainedOnly 0 " + $ed +";")
			containedOnlyItem;
		menuItem -label (uiRes("m_createOutlinerPanelMenu.kBoth"))
			-radioButton ($showContents && !$showContainedOnly)
			-command("outlinerEditor -e -showContainerContents 1 "+$ed + "; outlinerEditor -e -showContainedOnly 0 " + $ed +";")
			bothItem;
		menuItem -label (uiRes("m_createOutlinerPanelMenu.kNone"))
			-radioButton (!$showContents && $showContainedOnly)
			-command("outlinerEditor -e -showContainerContents 0 "+$ed + "; outlinerEditor -e -showContainedOnly 1 " + $ed +";")
			noneItem;
		setParent -m ..;

	int $outlinerLongName = 1;
	if (!`outlinerEditor -query -niceNames $ed`) {
		$outlinerLongName = (`outlinerEditor -query -longNames $ed` ? 2 : 0);
	}
	menuItem -label (uiRes("m_createOutlinerPanelMenu.kChannelNames"))  -subMenu true;
		radioMenuItemCollection;
		menuItem -label (uiRes("m_createOutlinerPanelMenu.kNice")) 
			-radioButton ( 1 == $outlinerLongName )
			-command ("setOutlinerLongName 1 " + $ed)
			niceNameItem;
		menuItem -label (uiRes("m_createOutlinerPanelMenu.kLong")) 
			-radioButton ( 2 == $outlinerLongName )
			-command ("setOutlinerLongName 2 " + $ed)
			longNameItem;
		menuItem -label (uiRes("m_createOutlinerPanelMenu.kShort")) 
			-radioButton ( 0 == $outlinerLongName )
			-command ("setOutlinerLongName 0 " + $ed)
			shortNameItem;
		setParent -m ..;

	string $sortOrder = `outlinerEditor -query -sortOrder $ed`;
	menuItem -label (uiRes("m_createOutlinerPanelMenu.kSortOrder"))  -subMenu true;
		radioMenuItemCollection;
		menuItem -label (uiRes("m_createOutlinerPanelMenu.kSceneHierarchy")) 
			-radioButton ($sortOrder == "none")
			-command ("outlinerEditor -edit -sortOrder none " + $ed)
			noneSortOrderItem;
		menuItem -label (uiRes("m_createOutlinerPanelMenu.kAlphabeticalWithinType")) 
			-radioButton ($sortOrder == "dagName")
			-command ("outlinerEditor -edit -sortOrder dagName " + $ed)
			dagNameSortOrderItem;
		setParent -m ..;

	//	TODO: Should be conditional on attrs being displayed
	menuItem -divider true;

	string $attrAlphaOrder = `outlinerEditor -query -attrAlphaOrder $ed`;
	menuItem -label (uiRes("m_createOutlinerPanelMenu.kAttrAlphaOrder")) -subMenu true;
		radioMenuItemCollection;
		menuItem -label (uiRes("m_createOutlinerPanelMenu.kAttrAlphaOrderDefault"))
			-radioButton ($sortOrder == "default")
			-command ("outlinerEditor -edit -attrAlphaOrder \"default\" " + $ed )
			defaultAttrAlphaSortOrderItem;
		menuItem -label (uiRes("m_createOutlinerPanelMenu.kAttrAlphabeticalAscend"))
			-radioButton ($sortOrder == "ascend")
			-command ("outlinerEditor -edit -attrAlphaOrder ascend " + $ed )
			ascendAttrAlphaSortOrderItem;
		menuItem -label (uiRes("m_createOutlinerPanelMenu.kAttrAlphabeticalDescend"))
			-radioButton ($sortOrder == "descend")
			-command ("outlinerEditor -edit -attrAlphaOrder descend " + $ed )
			descendAttrAlphaSortOrderItem;
		setParent -m ..;

	menuItem -divider true;
	menuItem -label (uiRes("m_createOutlinerPanelMenu.kSelectSetMembers")) 
		-command ("selectAllSetMembers " + $ed)
		selectAllSetMembersItem;

	menuItem -divider true;
	menuItem -label (uiRes("m_createOutlinerPanelMenu.kHideInOutliner")) -subMenu true;
		menuItem -label (uiRes("m_createOutlinerPanelMenu.kHideInOutlinerHide"))
			-c ("if(" + $useDefaultRuntimeCommands + ") {" +
			"	OutlinerDoHide;" + 
			"} else {" + 
			"	doHideInOutliner 1" +  ";" +
			"}")
			hideInOutlinerHideItem;
		menuItem -label (uiRes("m_createOutlinerPanelMenu.kHideInOutlinerHideUnhide"))
			-c ("if(" + $useDefaultRuntimeCommands + ") {" +
			"	OutlinerUnhide;" + 
			"} else {" + 
			"	doHideInOutliner 0" +  ";" +
			"}")
			hideInOutlinerUnhideItem;
		setParent -m ..;
}

global proc createOutlinerPanelMenu( string $panel )
{
	// if this menu has already been built, return
	//
	string $panelControl = `panel -q -control $panel`;
	if ( `menuBarLayout -exists $panelControl` ){
		setParent $panelControl;
		string $ma[] = `menuBarLayout -q -menuArray $panelControl`;
		for ( $name in $ma ){
			if ( $name == "Show" ){
				return;
			}
		}
	}

	source "OutlinerEdMenu.mel" ;
	// By the time we get here, we know the menu bar
	// of the outlinerPanel is the current menu bar
	//
	// Get the name of the outliner editor in this panel
	//
	string $ed = `outlinerPanel -q -outlinerEditor $panel`;

	// Create the "Display" menu using default runtime commands
	createOutlinerDisplayMenu( $ed, true);

	//	Create the filter UI menu.
	//
	filterUICreateMenu($ed, `setParent -query`);

	//	Add support for the Context Sensitive Help Menu.
	//
	addContextHelpProc $panel "buildOutlinerContextHelpItems";

	buildPanelPopupMenu( $panel );
}

global proc updateOutlinerPanelMenu( string $menu, string $ed )
//
// Update the menu before it is posted.
//
{
	setParent -m $menu;

	string $currentMenu = `setParent -q -m`;
	string $dagOnlyItem = $currentMenu+"|dagOnlyItem";
	string $shapesItem = $currentMenu+"|shapesItem";
	string $referenceNodesItem = $currentMenu+"|referenceNodesItem";
	string $referenceMembersItem = $currentMenu+"|referenceMembersItem";
	string $attributesItem = $currentMenu+"|attributesItem";
	string $connectionsItem = $currentMenu+"|connectionsItem";
	string $showNamespaceItem = $currentMenu+"|showNamespaceItem";
	string $setMembersItem = $currentMenu + "|setMembersItem";
	string $ignoreHiddenAttributeItem = $currentMenu+"|ignoreHiddenAttributeItem";
	string $ignoreOutlinerColorItem = $currentMenu+"|ignoreOutlinerColorItem";

	if ( `outlinerEditor -exists $ed` ){
		menuItem -e -checkBox `outlinerEditor -q -showDagOnly $ed` $dagOnlyItem;
		menuItem -e -checkBox `outlinerEditor -q -showShapes $ed` $shapesItem;
		menuItem -e -checkBox `outlinerEditor -q -showReferenceNodes $ed` $referenceNodesItem;
		menuItem -e -checkBox `outlinerEditor -q -showReferenceMembers $ed` $referenceMembersItem;
		menuItem -e -checkBox `outlinerEditor -q -showAttributes $ed` $attributesItem;
		menuItem -e -checkBox `outlinerEditor -q -showConnected $ed` $connectionsItem;
		menuItem -e -checkBox `outlinerEditor -q -showNamespace $ed` $showNamespaceItem;
		menuItem -edit
			-checkBox `outlinerEditor -query -showSetMembers $ed`
			$setMembersItem;
		menuItem -e -checkBox `outlinerEditor -q -ignoreHiddenAttribute $ed` $ignoreHiddenAttributeItem;
		menuItem -e -checkBox `outlinerEditor -q -ignoreOutlinerColor $ed` $ignoreOutlinerColorItem;
	
		int $showContents = `outlinerEditor -q -showContainerContents $ed`;
		int $showContainedOnly = `outlinerEditor -q -showContainedOnly $ed`;
		menuItem -edit
			-radioButton ($showContents && $showContainedOnly)
			containerContentsItem;
		menuItem -edit
			-radioButton (!$showContents && !$showContainedOnly)
			containedOnlyItem;
		menuItem -edit
			-radioButton ($showContents && !$showContainedOnly)
			bothItem;
		menuItem -edit
			-radioButton (!$showContents && $showContainedOnly)
			noneItem;

		int $outlinerLongName = 1;
		if (!`outlinerEditor -query -niceNames $ed`) {
			$outlinerLongName = (`outlinerEditor -query -longNames $ed` ? 2 : 0);
		}
			menuItem -edit
				-radioButton ( 1 == $outlinerLongName )
				niceNameItem;
			menuItem -edit
				-radioButton ( 2 == $outlinerLongName )
				longNameItem;
			menuItem -edit
				-radioButton ( 0 == $outlinerLongName )
				shortNameItem;

		string $sortOrder = `outlinerEditor -query -sortOrder $ed`;
			menuItem -edit
				-radioButton ($sortOrder == "none")
				noneSortOrderItem;
			menuItem -edit
				-radioButton ($sortOrder == "dagName")
				dagNameSortOrderItem;

		string $attrAlphaOrder = `outlinerEditor -query -attrAlphaOrder $ed`;
			menuItem -edit
				-radioButton ($attrAlphaOrder == "default")
				defaultAttrAlphaSortOrderItem;
			menuItem -edit
				-radioButton ($attrAlphaOrder == "ascend")
				ascendAttrAlphaSortOrderItem;
			menuItem -edit
				-radioButton ($attrAlphaOrder == "descend")
				descendAttrAlphaSortOrderItem;
	}
}
