// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  20 Feb 2002
//
//  Description:
//      Edit Fluid Resolution
//		
//
global proc doResampleFluid( int $version, string $args[] )
{
	if(( $version < 1 ) || ( size( $args ) < 3 )) {
		error(uiRes("m_doAppendHairCache.kIncorrectVersion"));
		return;
	}

	int $resX = $args[0];
	int $resY = $args[1];
	int $resZ = $args[2];

	// Make sure that we have a fluid selected
	// or warn the user and fail

	string $selectionList[] = `ls -sl`;
	int $numSelected = size($selectionList);

	if ($numSelected == 0)
	{
		error(uiRes("m_doDeleteFluidsPB.kNoFluidsSelected"));
		return;
	}

	$fluidShape = getFluidShape($selectionList[0]);
	if (size($fluidShape) == 0)
	{
		error(uiRes("m_doExtendFluid.kSelectFluidFirst"));
		return;
	}

	string $cmd;
	$cmd = "resampleFluid ";

	$cmd = $cmd + "-rw " + $resX + " ";
	$cmd = $cmd + "-rh " + $resY + " ";
	$cmd = $cmd + "-rd " + $resZ + "; ";

	int $is2d = `getAttr ($fluidShape + ".is2d")`;
	int $newResX = $resX;
	int $newResY = $resY;
	int $newResZ = 1;
	if(!$is2d)
		$newResZ = $resZ;
	
	if( verifyFluidResolution( $fluidShape, $newResX, $newResY, $newResZ ) ) {
		$cmd = rebuildFluidInitialStateCmd($cmd, "resampleFluidRebuildIC");
	} else {
		$cmd = "";
	}

	eval $cmd;
}

