// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  19 May 1997
//
//
//  Procedure Name:
//      lattice autoparent
//
//  Description:
//              Verify that only a single object is selected.
//              If so, create a lattice that deforms the given 
//              object and parent the lattice and its base lattice
//              to the given object.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
global proc latticeAutoparent(string $latticeCmd) {
	string $sArr[2] = `ls -sl -tail 2`;

	// verify that only a single item is selected
	//
	if (1 != size($sArr)) {
		error((uiRes("m_latticeAutoparent.kAutoparentSelError")));
		return;
	}

	string $ffdResult[];
	string $ffdNode;
	string $selectedItem = $sArr[0];
	
	// execute the given command string
	//
	if (catch($ffdResult = `eval($latticeCmd)`)) {
		return;
	}
	$ffdNode = $ffdResult[0];

	// parent either:
	//   latticeGroup if single transform method was used,
	//   else lattice and base lattice
	//
	string $parents[2] = `listRelatives -p`;
	$sArr = `ls -sl -tail 2`;

	if (size($sArr) > 0) {
		string $newLattice = $sArr[0];
		
		if (size($parents) > 0) {
			// lattice group
			//
			parent $parents[0] $selectedItem;
			select $newLattice;
		} else {
			parent $sArr[0] $selectedItem;

			// parent lattice and base lattice
			//
			$sArr = `listConnections ($ffdNode+".blm")`;
			if (size($sArr) > 0) {
				parent $sArr[0] $selectedItem;
			}
			select $newLattice;
		}
	}
}
