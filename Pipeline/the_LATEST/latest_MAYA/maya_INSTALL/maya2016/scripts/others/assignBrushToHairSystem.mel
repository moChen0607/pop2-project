// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc assignBrushToHairSystem()
{
	string $brush = getDefaultBrush();

//	string $nodes[] = getBrushes( 2 );
//	if( size($nodes) >0 ){
//		$brush = $nodes[0];
//	}

	string $hsys[] = getSelectedHairSystems();
	int $numHsys = size( $hsys );
	if( $numHsys < 1 ){
		warning( uiRes("m_doDeleteHairPB.kNoHairSystemSelected"));
		return;
	}

	int $i;
	for( $i = 0; $i < $numHsys; $i++ ){
		string $pfxHair = destinationNodeNameFromConnection( 
				$hsys[$i] + ".outputRenderHairs" );
		if( $pfxHair == "" ){
			$pfxHair = `createNode pfxHair`;
			connectAttr ($hsys[$i] + ".outputRenderHairs") ($pfxHair + ".renderHairs");
			setAttr ( $pfxHair + ".displayPercent") 100;
			setAttr ( $pfxHair + ".drawAsMesh") false;
		}
		if( $pfxHair == "" ){
			warning( (uiRes("m_assignBrushToHairSystem.kCouldntCreatePfxHair")));
			continue;
		}
		string $oldBrush = sourceNodeNameFromConnection( $pfxHair + ".brush" );
		if( size($oldBrush) > 0 ){
			disconnectAttr ( $oldBrush + ".outBrush" ) ( $pfxHair + ".brush" );
		}
		string $newBrush[] = `duplicate -ic $brush`;
		brushStartSetup( $newBrush[0], 1 );
		connectAttr ($newBrush[0] + ".outBrush") ($pfxHair + ".brush");
		connectAttr time1.outTime ($newBrush[0] + ".time");
	}
}
