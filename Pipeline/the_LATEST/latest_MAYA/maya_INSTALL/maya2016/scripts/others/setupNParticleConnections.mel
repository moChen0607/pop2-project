// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc initNParticleForStyle(string $nParticle)
{
	string $style = "Point";
	if( `optionVar -exists NParticleStyle` ){
		$style = `optionVar -query NParticleStyle`;
	} 
	// first the common settings
	setAttr ($nParticle +".collisionFlag") 1;
	setAttr ($nParticle +".selfCollide") false;
	int $doFluid = false;
	if( $style == "Points" ){
		setAttr ($nParticle +".particleRenderType") 3;
	}else{
		setAttr ($nParticle +".colorInput") 1;
		setAttr ($nParticle +".opacityScaleInput") 1;
		
		if ($style == "Cloud"){
			setAttr ($nParticle +".particleRenderType") 8;
			setAttr ($nParticle +".ignoreSolverGravity") 1;
			setAttr ($nParticle +".radiusScaleInput") 1;
			setAttr ($nParticle +".color[1].color_Color") -type double3 0 .5 1;
			setAttr ($nParticle + ".color[1].color_Position") 1;
			setAttr ($nParticle + ".color[1].color_Interp") 1;
		}else if ($style == "ThickCloud"){
			setAttr ($nParticle +".particleRenderType") 8;
			setAttr ($nParticle +".ignoreSolverGravity") 1;
			setAttr ($nParticle +".radiusScaleInput") 1;
			setAttr ($nParticle +".opacity") 0.98;
			$doFluid = true;
		}else if ($style == "Balls"){
			setAttr ($nParticle +".particleRenderType") 7;
			setAttr ($nParticle +".radiusScaleInput") 1;
			setAttr ($nParticle +".color[0].color_Color") -type double3 1 0 0;
			setAttr ($nParticle +".color[1].color_Color") -type double3 0 .5 1;
			setAttr ($nParticle + ".color[1].color_Position") 1;
			setAttr ($nParticle + ".color[1].color_Interp") 1;
			setAttr ($nParticle + ".colorInput") 6;
			setAttr ($nParticle +".selfCollide") 1.0;
			setAttr ($nParticle +".bounce") 0.9;
			setAttr ($nParticle +".friction") 0.02;
			setAttr ($nParticle +".threshold") 0.0;
			setAttr ($nParticle +".opacity") 1.0;
		}else if ($style == "Water"){
			setAttr ($nParticle +".color[0].color_Color") -type double3 0.5 0.7 1.0;
			setAttr ($nParticle +".particleRenderType") 7;
			setAttr ($nParticle +".threshold") 0.6;
			setAttr ($nParticle +".opacity") 0.3;
			setAttr ($nParticle +".enableSPH") 1;
			setAttr ($nParticle +".incompressibility") 1.0;
			setAttr ($nParticle +".friction") 0.0;
			setAttr ($nParticle +".bounce") 0.0;
			setAttr ($nParticle +".drag") 0.0;
		}
	}
	initNParticleShader( $nParticle , $style);
}

global proc setupNParticleConnections( string $nParticle )
{
	if( !objExists($nParticle) ){
		warning( (uiRes("m_setupNParticleConnections.kNoNParticle")));
		return;
	}
	
	string $sl[] = `ls -sl`;
	string $nucleus = getActiveNucleusNode( false,	true );

	addActiveToNSystem( $nParticle, $nucleus );
	connectAttr ($nucleus + ".startFrame") ($nParticle +".startFrame");
	
	initNParticleForStyle( $nParticle );
	select $sl;
}
