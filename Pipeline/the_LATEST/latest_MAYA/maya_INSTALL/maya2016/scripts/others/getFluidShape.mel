// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc string 	getFluidShape(string $object)
{
	string $fluidShape[];
	string $objectArray[1];
	$objectArray[0] = $object;

	// First see if $object is itself a fluid shape.  If it is return it.
	//
	$fluidShape = `ls -type fluidShape -type fluidTexture3D -type fluidTexture2D $objectArray`;
	if (size($fluidShape) > 0)
	{
		return $fluidShape[0];
	}

	// If $object is not a particle shape, perhaps it is the transform of
	// a particle shape.  If so, return it.
	//
	string $transforms[];
	string $children[];
	$transforms = `ls -type transform $objectArray`;
	if (size($transforms) > 0)
	{
		$children = `listRelatives -s $transforms[0]`;
		$fluidShape = `ls -type fluidShape -type fluidTexture3D -type fluidTexture2D $children`;
		if (size($fluidShape) > 0)
		{
			return $fluidShape[0];
		}
	}

	// If $object is neither a particle shape nor a transform of a particle
	// shape, then return nothing.
	//
	return "";
}

global proc string[] getActiveFluidShapes() {
	string $activeFluids[];
	string $selection[] = `ls -sl`;
	for( $s in $selection ) {
		string $tryThis = getFluidShape( $s );
		if( size( $tryThis ) ) {
			$activeFluids[ size($activeFluids) ] = $tryThis;
		}
	}

	return $activeFluids;
}
