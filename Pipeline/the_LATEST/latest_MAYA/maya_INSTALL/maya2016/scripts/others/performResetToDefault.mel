// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Creation Date:  Jan 26, 1999
//
//  Description:
//      This script returns the weights of the selected
//      smooth skin components/objects to their default value
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//


global proc performResetToDefault()
//
// Description:
//    This procedure returns the smooth skin weights of the 
//    selected objects/components to their default values by executing
//    the "skinPercent -rtd $skinCluster" command.  It uses the 
//    current selection list to extract the objects and components. 
//    When transforms are selected then the whole hierarchy of skinned
//    surfaces under them will be included in the command. 
//
{
	// Find all the selected components
	//
	string $sel[] = `ls -sl`;

	// Find the selected shapes
	//
	string $allShapes[] = `ls -sl -lf -dag -o`;

	string $shape;
	int $count = 0;
	for ($shape in $allShapes)
	{
		// Ignore if it is an intermediate object
		//
		int $io = `getAttr ($shape+".io")`;
		if ($io == 1)
			continue;
		
		string $parentL[] = `listRelatives -parent $shape`;
		string $parent = $parentL[0];

		// Get the skinCluster attached to the object
		//
		string $skinCluster = findRelatedSkinCluster($shape);
		if ($skinCluster == "")
			continue;

		// Loop though all the selected components
		// and select the ones that are related to the current shape
		//
		select -cl;
		string $comp;
		string $buf[];
		for ($comp in $sel)
		{
			int $tok = tokenize($comp,".",$buf);

			// Component
			//
			if ($tok == 2 && $buf[0] == $parent)
				select -add $comp;

			// Whole shape
			//
			if ($tok == 1 && $buf[0] == $parent)
			{
				select -r $parent;
				break;
			}
		}

		// If the selection list is empty then select the 
		// whole shape
		//
		string $newSel[] = `ls -sl`;
		if (size($newSel)== 0)
			select -r $parent;

		// Execute the command for the given skin cluster
		//
		string $cmd = "skinPercent -rtd "+ $skinCluster;
		catch(evalEcho($cmd));
		$count++;
	}
	// Reset the selection
	//
	select -r $sel;

	if ($count == 0) {
		error( (uiRes("m_performResetToDefault.kNoSkinned")));
	}

}

			
