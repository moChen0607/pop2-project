// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  Jan, 2008
//
//  Input Arguments:
//      None
//
//  Return Value:
//      None.
//
global proc strsTweakModeSetTool(int $turnOn)
{
	optionVar -iv trsManipsTweakMode $turnOn;
	manipMoveContext -edit -tweakMode $turnOn Move;
	manipRotateContext -edit -tweakMode $turnOn Rotate;
	manipScaleContext -edit -tweakMode $turnOn Scale;
}

global proc strsTweakModeDoIt (int $opt)
{
	string $ctx = `currentCtx`;
	string $ctxClass = `contextInfo -q -class $ctx`;

	if ($ctxClass == "selectTool" ||
		$ctxClass == "manipMove" ||
		$ctxClass == "manipRotate" ||
		$ctxClass == "manipScale" ||
		$ctxClass == "xformManipulator")
	{
		int $switchToMoveCtx = ($ctxClass != "manipMove" && $ctxClass != "manipRotate" && $ctxClass != "manipScale");
		if (2 == $opt)
		{
			// Toggle
			strsTweakModeSetTool(!`manipMoveContext -q -tweakMode Move`);
		}
		else if (1 == $opt)
		{
			// Enable
			global string $gLastSacredTool;
			if ($switchToMoveCtx) {
				global string $gCurrentSacredTool;
				$gLastSacredTool = $gCurrentSacredTool;
				setToolTo moveSuperContext;
			} else {
				$gLastSacredTool = "";
			}

			strsTweakModeSetTool(1);
		}
		else if (0 == $opt)
		{
			// Disable
			strsTweakModeSetTool(0);
				
			global string $gLastSacredTool;
			if ("" != $gLastSacredTool && `contextInfo -q -exists $gLastSacredTool`)
				setToolTo $gLastSacredTool;
		}
	}
}

global proc strsTweakMode(int $option)
{
	evalDeferred(("strsTweakModeDoIt(" + $option + ")"));
}
