// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  23 October 2003
//
//  Procedure Name:
//      nurbsConvertMM
//
//  Description:
//      This procedure creates the popup/marking menu
//      for curves component conversion. See buildConvertMM.
//
//  Input Arguments:
//      The parent item to parent the popup menu to.
//
//  Return Value:
//      None.

global proc curveConvertMM(string $parent, int $isBezier){
	
	if (`popupMenu -query -exists $parent`){
		popupMenu -edit -deleteAllItems $parent;
		
		setParent -menu $parent;

		menuItem
			-label (uiRes("m_curveConvertMM.kCurveConvertToCV"))
			-annotation (getRunTimeCommandAnnotation ("SelectCurveCVsAll"))
			-command ("string $selection[] = `ls -sl`; SelectCurveCVsAll;" +
						"hilite $selection; selectType -ocm -alc false; " +
						"selectType -ocm -cv on;")
			-radialPosition "W" 
			;

		menuItem
			-label (uiRes("m_curveConvertMM.kCurveConvertToFirstCV"))
			-annotation (getRunTimeCommandAnnotation ("SelectCurveCVsFirst"))
			-command ("string $selection[] = `ls -sl`; SelectCurveCVsFirst;" +
						"hilite $selection; selectType -ocm -alc false; " +
						"selectType -ocm -cv on;")
			-radialPosition "N" 
			;

		menuItem
			-label (uiRes("m_curveConvertMM.kCurveConvertToLastCV"))
			-annotation (getRunTimeCommandAnnotation ("SelectCurveCVsLast"))
			-command ("string $selection[] = `ls -sl`; SelectCurveCVsLast;" +
						"hilite $selection; selectType -ocm -alc false; " +
						"selectType -ocm -cv on;")
			-radialPosition "S" 
			;
		
		if( !$isBezier )
		{
			menuItem
				-label (uiRes("m_curveConvertMM.kCurveConvertToCluster"))
				-annotation (getRunTimeCommandAnnotation ("ClusterCurve"))
				-command "ClusterCurve"
				-radialPosition "E" 
				;
		}

		setParent -menu ..;	
	}
}
