// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  26 Jun 1996
//
//  Description:
//      This procedure sets the state of the component pick mask.
//
//  Input Arguments:
//		The flag for the pick mask setting to turn on/off,
//		and the state to set that pick mask setting to.
//
//  Return Value:
//		None
//

global proc setComponentPickMask( string $maskType, int $state ) {

	//
	// Set values, based on the $state of the pick mask
	// type and $state passed to the procedure
	//
	switch ($maskType) {
        case "All":
            selectType -allComponents $state;
            // 
            // Change the $state of all the object
            // selection mask buttons in the infoBar
            //
            iconTextCheckBox -e -v $state compSelPointBtn;
            iconTextCheckBox -e -v $state compSelParmPointBtn;
            iconTextCheckBox -e -v $state compSelLineBtn;
            iconTextCheckBox -e -v $state compSelFaceBtn;
            iconTextCheckBox -e -v $state compSelHullBtn;
            iconTextCheckBox -e -v $state compSelPivotBtn;
            iconTextCheckBox -e -v $state compSelHandleBtn;
            break;
		case "Point":
			selectType
				-cv $state
				-polymeshVertex $state
				-subdivMeshPoint $state
				-latticePoint $state
				-particle $state;
			break;
		case "ParmPoint":
			selectType
				-editPoint $state
				-curveParameterPoint $state
				-surfaceParameterPoint $state
				-smu $state
				-puv $state
				-surfaceUV $state;
			break;
		case "Line":
			selectType
				-isoparm $state
				-surfaceEdge $state
				-polymeshEdge $state
				-subdivMeshEdge $state
				-springComponent $state;
			break;
		case "Facet":
			selectType
				-surfaceFace $state
				-subdivMeshFace $state
				-facet $state;
			break;
		case "Hull":
			selectType
				-hull $state;
			break;
		case "Pivot":
			selectType
				-rotatePivot $state
				-scalePivot $state
				-jointPivot $state;
			break;
		case "Marker":
			selectType
				-selectHandle $state;
			break;
		case "Other":
			selectType
				-imagePlane $state
				-localRotationAxis $state;
			break;
	}
}
