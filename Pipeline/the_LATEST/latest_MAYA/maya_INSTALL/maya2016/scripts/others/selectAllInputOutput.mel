// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  5 Apr 1996
//
//  Description:
//      This procedure selects history/future of the object

proc string needTheLead()
{
	string $result = "";
	string $all[] = `ls -l -sl -tail 1 -type dagNode`;
	if( size($all) > 0 ) {
		$result = $all[0];
	}
	else {
		$all = `ls -sl -tail 1`;
		if( size($all) > 0 ) {
			$result = $all[0];
		}
	}
	return $result;
}


proc string fillOutSection( string $chain[] )
{
	string $cmdString = "";
	string $item, $each;
	string $list[];
	int $n;

	for( $item in $chain ) {
		tokenize( $item, "|", $list );
		$n = size($list);
		if( 1 == $n ) {
			$cmdString = ( $cmdString + " \"" + $item + "\"" );
		}
		else if( $n > 0 ) {
			for( $each in $list ) {
				$cmdString = ( $cmdString + " \"" + $each + "\"" );
			}
		}
	}

	return $cmdString;
}

proc string selectInputOutputGiven( string $lead, int $future )
{
	string $chainFalse[];
	string $chainTrue[];
	string $cmdString;

	int $showLevel = 2;
	int $pruneDag = 1;

	if( "" != $lead ) {
		if( "transform" == `nodeType $lead`) {
			$chainFalse2 = `listHistory -gl true -pdo $pruneDag -lf false
				-f $future -il $showLevel $lead`;
			$cmdString = fillOutSection( $chainFalse2 );
		}
		$chainTrue2 = `listHistory -gl true -pdo $pruneDag -lf true
			-f $future -il $showLevel $lead`;
		$cmdString = $cmdString + fillOutSection( $chainTrue2 );

		eval( "select -add " + $cmdString + "");
	}
	return $cmdString;
}

global proc string selectAllInputOutput( int $future )
//
// Select all objects in the history (input) if flag is false
// or future (output) if flag is true of the lead object selected.

{
	// Get the list of selected items and do the list
	// for the lead/last item.
	//
	return selectInputOutputGiven( `needTheLead`, $future );
}
