// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

// Description:  Get the name of the hypergraph panel for the
//               given type of hypergraph view.
//
//               The two possible types are:
//                  . DAG for the hierarchical view;
//                  . DG  for the input and output connections view.
// 
//               The panel this procedure returns depends on
//               the user preference.  The two possible preferences
//               are
//                   . to see the first existing hypergraph with 
//                     this type of view;
//                   . create a new hypergraph with this type of view.
//
global proc string getHyperGraphPanel(string $type)
{
    if ($type != "DAG" && $type != "DG")
    {
        string $warningMessage = (uiRes("m_getHyperGraphPanel.kUseDefaultType"));
        warning($warningMessage); 

        // The default type is "DAG" which is the hypergraph
        // hierarchical view. 
        //
        $type = "DAG";
    }

    if (!`optionVar -exists ($type+"OpenHyperGraphMode")`)
    {
        initializeOpenHyperGraphMode($type);
    }
    int $openMode = `optionVar -query ($type+"OpenHyperGraphMode")`; 
     
    if ($openMode == 0)
    {
        // The user's preference is to open the first
        // available hypergraph panel with the given type of view,
        // then we look for the first avaialbel hypergraph such view.
        //
        string $allPanelsOfType[] = `getPanel -sty hyperGraphPanel`;
        string $panelName;
        for ($panelName in $allPanelsOfType)
        {
            if ($panelName == "")
            {
                continue;
            }

            string $editor = $panelName + "HyperGraphEd";
            if (`hyperGraph -query -graphType $editor` == $type)
            {
                // We found the first hypergraph panel with
                // the given type of view.
                //
                return $panelName;
            }
        }
    }

    // Either we did not find the first available hypergraph
    // with the given type of view, 
    // or the user's preference is to open a new
    // hypergraph panel with such view,
    // then we create a new hypergraph with this type of view.
    //
    string $panelLabel = hyperGraphGenerateNewPanelLabel($type); 
    string $whichPanel = `scriptedPanel -label $panelLabel -type hyperGraphPanel -unParent`;

    return $whichPanel;
} 

