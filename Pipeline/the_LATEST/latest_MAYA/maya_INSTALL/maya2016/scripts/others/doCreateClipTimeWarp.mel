// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Feb 20, 2001
//
//  Description:
//		This script creates a time warp curve.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//

global proc doCreateClipTimeWarp(string $clips[], int $enableWarp)
//
//	Description:
//		Assume that all passed in clips should get the same time warp
//		curve.
//
{
	int $nClips = size($clips);
	if ($nClips == 0) {
		return;
	}

	int $firstWarp = true;
	string $timeWarpCurve;

	int $ii = 0;
	for ($ii = 0; $ii < $nClips; $ii++) {
		string $clip = $clips[$ii];

		string $connections[] = `listConnections ($clip+".timeWarp")`;
		if (size($connections) > 0) {
			//	Something is already connected, so do nothing.
			//
			string $warnMsg = (uiRes("m_doCreateClipTimeWarp.kClipWarn"));
			$warnMsg = `format -s $clip $warnMsg`;
			warning($warnMsg);
			continue;
		}

		setAttr -k on ($clip+".timeWarpEnable");
		setAttr -k on ($clip+".timeWarp");
		setAttr ($clip+".timeWarpEnable") $enableWarp;

		if ($firstWarp) {
			setKeyframe -at timeWarp -t 0.0 -v 0.0 $clip;
			setKeyframe -at timeWarp -t 100.0 -v 100.0 $clip;

			string $cnx[] = 
				`listConnections -s 1 -d 0 -type animCurve ($clip+".tw")`;

			if (size($cnx) > 0) {
				$timeWarpCurve = $cnx[0];
				$firstWarp = false;
			}
		} else {
			connectAttr ($timeWarpCurve+".o") ($clip+".tw");
		}
	}
}
