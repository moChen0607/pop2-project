// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  2005
//
//  Description:
//		
//
proc int objIsDrawn(string $shape)
//
// Return 0 if the shape's visibility is off or if it is in a hidden layer
//
{
	int $vis = `getAttr ($shape+".visibility")`;
	if (0 == $vis) {
		return 0;
	}
	string $layer = objectLayer($shape);
	$vis = `getAttr ($layer+".visibility")`;
	if (0 == $vis) {
		if (`getAttr ($layer+".enabled")`) {
			return 0;
		}
	}
	return 1;
}

global proc 
string[] getGeometriesToCache()
{
	string $shapes[] = `ls -sl -type shape`;
	if (0 == size($shapes)) {
		string $obj;
		string $sel[] = `ls -sl -type transform`;
		for ($selObj in $sel) {
			int $cachableChildCount = 0;
			string $objects[] = `listRelatives -pa -ni -shapes -type shape $selObj`;
			for( $obj in $objects ) {
				if( size(`ls -type deformableShape $obj`) == 1 && objIsDrawn($obj))
				{
					$shapes[size($shapes)] = $obj;
					$cachableChildCount++;
				}
			}
			clear $objects;
			if ($cachableChildCount > 1) {
				string $format = (uiRes("m_getGeometriesToCache.kMoreThanOneCandidate"));
				string $errMsg = `format -stringArg $selObj $format`;
				error($errMsg);
			}
		}
	}

	// append any additional geometries that are in cache groups with
	// the specified geometries
	//
	int $ii, $shapeCount = size($shapes);
	for ($ii = 0; $ii < $shapeCount; $ii++) {
		string $caches[] = findExistingCaches($shapes[$ii]);
		for ($cache in $caches) {
			string $geoms[] = `cacheFile -q -geometry $cache`;
			for ($geom in $geoms) {
				string $isControlPoint[] = `ls -type controlPoint $geom`;
				if (size($isControlPoint) > 0) {
					if (0 == stringArrayCount($geom,$shapes)) {
						$shapes[size($shapes)] = $geom;
					}
				}
			}
		}
	}
	return $shapes;
}
