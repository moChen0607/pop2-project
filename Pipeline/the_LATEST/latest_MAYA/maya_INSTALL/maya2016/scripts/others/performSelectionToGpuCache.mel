// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

proc string optionVarName(string $input)
{
    return "selectionToGPUCache" + $input + "Option";
}

proc string uiItemName(string $input)
{
    return "selectionToGPUCache" + $input + "UI";
}

proc resetOptions(int $force)
{
    if ($force ||
        !`optionVar -exists (optionVarName("saveEvery"))`)
        optionVar -intValue (optionVarName("saveEvery")) 1;

    if ($force) {
        gpuCacheOptions("reset", "CONVERT");
        cacheTimeRangeOptions("reset", "CONVERT");
    }
    else {
        gpuCacheOptions("initialize", "CONVERT");
        cacheTimeRangeOptions("initialize", "CONVERT");
    }
}

proc saveOptions()
{
    gpuCacheOptions("save", "CONVERT");
    cacheTimeRangeOptions("save", "CONVERT");

    optionVar -intValue
        (optionVarName("saveEvery"))
        `intFieldGrp -q -value1 (uiItemName("saveEvery"))`;
}

proc loadOptions()
{
    gpuCacheOptions("load", "CONVERT");
    cacheTimeRangeOptions("load", "CONVERT");

    intFieldGrp -e
        -value1 `optionVar -q (optionVarName("saveEvery"))`
        (uiItemName("saveEvery"));
}

proc displayOptions()
{
    setParent (getOptionBox());

    setUITemplate -pushTemplate DefaultTemplate;
    scrollLayout;
    columnLayout -adjustableColumn 1;

    gpuCacheOptions("createUI", "CONVERT");
    cacheTimeRangeOptions("createUI", "CONVERT");

    intFieldGrp
        -label (uiRes("m_performSelectionToGpuCache.kSaveEvery"))
        -extraLabel (uiRes("m_performSelectionToGpuCache.kEvaluation"))
        -nf 1
        (uiItemName("saveEvery"));

    setParent ..;
    setParent ..;
    setUITemplate -popTemplate;

    setOptionBoxTitle (uiRes("m_performSelectionToGpuCache.kOptionBoxTitle"));

    button -e
        -label (uiRes("m_performSelectionToGpuCache.kCreate"))
        -command ("selectionToGPUCacheCreate; hideOptionBox")
        (getOptionBoxApplyAndCloseBtn());
    button -e
        -command ("selectionToGPUCacheCreate")
        (getOptionBoxApplyBtn());
    button -e
        -command ("selectionToGPUCacheSave")
        (getOptionBoxSaveBtn());
    button -e
        -command ("selectionToGPUCacheReset")
        (getOptionBoxResetBtn());

    loadOptions();

    showOptionBox();

}

proc string assembleCommand()
{
    string $command = gpuCacheOptions("assembleCommand", "CONVERT");

    // Time range options
    float $timeRange[] = cacheTimeRangeOptions("queryTimeRange", "CONVERT");
    float $evaluationRate[] = cacheTimeRangeOptions("queryEvaluationRate", "CONVERT");
    $command = $command + " -startTime " + $timeRange[0] + " ";
    $command = $command + " -endTime " + $timeRange[1] + " ";
    $command = $command + " -simulationRate " + $evaluationRate[0] + " ";

    int $saveEvery =
        `optionVar -q (optionVarName("saveEvery"))`;
    $command = $command + " -sampleMultiplier " + $saveEvery + " ";

    return $command;
}

global proc selectionToGPUCacheCreate()
{
    saveOptions();
    eval(assembleCommand());
}

global proc selectionToGPUCacheSave()
{
    saveOptions();
}

global proc selectionToGPUCacheReset()
{
    resetOptions(1);
    loadOptions();
}

global proc string performSelectionToGPUCache(string $message)
{
    resetOptions(0);

    string $command;
    if ($message == "executeCommand")
    {
        // Execute the command with current options
        $command = assembleCommand();
        eval($command);
    }
    else if ($message == "displayOptions")
    {
        // Display the option box
        displayOptions();
    }
    else if ($message == "assembleCommand")
    {
        $command = assembleCommand();
    }
    return $command;
}
