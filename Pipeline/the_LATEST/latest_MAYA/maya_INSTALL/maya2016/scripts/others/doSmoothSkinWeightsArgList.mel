// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Jan, 2007
//
//  Procedure Name:
//      doSmoothSkinWeightsArgList
//
//  Description:
//      smooth skin weights
//
//  Input Arguments:
//  $version: The version of this option box.  Used to know how to 
//  interpret the $args array.
//      "1" : first verison of smooth weights
//  
//  $args
//  Version 1
//  [0]     $weightChangeTolerance : verts whose weights change above this value will be pruned
//  [1]     $numIterations : Number of iterations to apply to the smoothing.  The more iterations, the more verts will be smoothed.
//  Version 2
//  [2]     $previewMode : in preview mode we select the verts that would have smoothing applied to it.
//
//  Version 3
//  [3]     $obeyMaxInfluences: when smoothing weights do not exceed user specified influence vertices.
//
//          Values can be 0: ignore max influences
//                        1: obey max influences
//                        2: look at the skinCluster node's obeyMaxInfluences attr.
//
//  Return Value:
//      $string: The command string
//

global proc
doSmoothSkinWeightsArgList( int $version, string $args[] )
{
    // Parse user args
    float $weightChangeTolerance = ( float( $args[0] ) * 0.01 );
    int   $numIterations         = $args[1];
    int   $previewMode           = ( ( $version > 1 ) ? $args[2] : false );
    int   $obeyMaxInfluences     = ( ( $version > 2 ) ? $args[3] : 0 );
    // A non-preview option
    int   $normalizeAfterChange  = ( ( $version > 3 ) ? $args[4] : 0 );

    if ( $previewMode && $normalizeAfterChange )
        error( (uiRes("m_doSmoothSkinWeightsArgList.kSmoothSkinWeightsArgListError")));

    // Ensure obeyMaxInfluences is in valid range
    if ( $obeyMaxInfluences < 0 || $obeyMaxInfluences > 2 )
        $obeyMaxInfluences = 0;

    // Determine the skin cluster associated with the current selection
    string $msg = (uiRes("m_doSmoothSkinWeightsArgList.kSelectSkinComponent"));
    string $currentSelection[] = `ls -selection`;
    if ( size( $currentSelection ) == 0 )
        error( $msg );

    string $buff[];
    tokenize($currentSelection[0],".",$buff);

    string $geomName = $buff[0];

    string $sCluster = findRelatedSkinCluster( $geomName );

    // If ther is no valid skin cluster exists report an error
    if ( size( $sCluster) == 0 )
        error( $msg );

    // If we are supposed to look at the node's attr value, do so.
    if ( $obeyMaxInfluences == 2 )
        $obeyMaxInfluences = `getAttr ( $sCluster + ".maintainMaxInfluences" )`;

    // If preview is disabled execute the command
    if ( $previewMode == 0 )
    {
        eval ( "skinCluster -e" + 
            " -sw  " + $weightChangeTolerance +
            " -swi " + $numIterations         +
            " -omi " + $obeyMaxInfluences     +
            "      " + $sCluster );

        if ( $normalizeAfterChange  )
            eval ( "skinCluster -edit -forceNormalizeWeights " + $sCluster );
    }

    // otherwise get a list of verts that will influence the weight smooth and select them
    else
    {
        string $cmd = ("skinCluster -sw "+ $weightChangeTolerance + " -q " +$sCluster);

        int $vertsToSmooth[];
        $vertsToSmooth = `eval($cmd)`;

        select -cl;
        for( $vert in $vertsToSmooth )
            select -add ( $geomName + ".vtx[" + $vert + "]" );
    }
}
