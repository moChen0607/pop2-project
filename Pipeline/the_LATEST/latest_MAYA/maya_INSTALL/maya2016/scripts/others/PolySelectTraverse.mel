// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  1 April 1997
//
//  Description:
//      polygon selection traversal utility
//

//////////////////////////////////////////////////////////////////////

global proc PolySelectTraverse(int $traversal)
{
	string $result[] = `filterExpand -ex false -sm 31 -sm 32 -sm 34 -sm 35`;

	// Check for any poly components first.
	if ( 0 < size($result) )
	{
		// Vertex first
		string $compResult[] = `polyListComponentConversion -fv -tv $result`;
		if (size($compResult) > 0)
		{
			polySelectConstraint -pp $traversal -t 0x0001;	
			return;
		}

		// Then edges
		$compResult = `polyListComponentConversion -fe -te $result`;
		if (size($compResult) > 0)
		{
			polySelectConstraint -pp $traversal -t 0x8000;
			return;
		}
	
		// Then faces
		$compResult = `polyListComponentConversion -ff -tf $result`;
		if (size($compResult) > 0)
		{
			polySelectConstraint -pp $traversal -t 0x0008;
			return;
		}

		// Then uvs
		$compResult = `polyListComponentConversion -fuv -tuv $result`;
		if (size($compResult) > 0)
		{
			polySelectConstraint -pp $traversal -t 0x0010;
			return;
		}
	}

	// Now try Nurbs cv's.
	$result = `filterExpand -ex false -sm 28`;
	if (size($result) > 0)
	{
		if ( 1 == $traversal)
		{
			nurbsSelect -growSelection 1;
		}
		else if ( 2 == $traversal)
		{
			nurbsSelect -shrinkSelection 1;
		}
		else if ( 3 == $traversal)
		{
			nurbsSelect -borderSelection;
		}
	}
}
