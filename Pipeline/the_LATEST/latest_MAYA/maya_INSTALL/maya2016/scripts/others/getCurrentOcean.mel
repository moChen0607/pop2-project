// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  2002
//
// Description: Get selected or sole ocean shader
//	

global proc string getCurrentOcean()
{
	string $shaders[] = `ls -type oceanShader`;
	if( size($shaders) == 0 ){
		warning((uiRes("m_getCurrentOcean.kNoOceanShaders")));
		return( "" );
	}
	// If only one shader then use it
	if( size( $shaders ) == 1 ){
		return( $shaders[0] );
	}

	// There is more than one, so we need to disambiguate using the selection

	// First check for selected oceanShaders 
	string $sel[] = `ls -sl -type oceanShader`;
	if( size($sel) > 0 ){
		return( $sel[0] );
	}

	// next check for selected objects with ocean shaders 
	string $sel[] = `ls -sl -dag -type shape`;
	int $i;
	for( $i = 0; $i < size( $sel ); $i++ ){
		string $nType = `nodeType $sel[$i]`;
		if( $nType == "heightField" ){
			string $con[] = `listConnections ($sel[$i] + ".displacement")`;
			if( size( $con ) > 0){
				$nType = `nodeType $con[0]`;
				if( $nType == "oceanShader" ){
					return( $con[0] );
				}
			}
		} else {
			string $con[] = `listConnections ($sel[$i] + ".instObjGroups[0]")`;
			if( size( $con ) > 0 ){
				string $con2[] = `listConnections ($con[0] + ".displacementShader")`;
				if( size( $con2 ) > 0 ){
					$nType = `nodeType $con2[0]`;
					if( $nType == "oceanShader" ){
						return( $con2[0] );
					}
				}
			}
		}
	}

	warning((uiRes("m_getCurrentOcean.kTooManyOceanShaders")));
	return( "" );	
}
