// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Mar 20, 1997
//
//  Description:
//      The pointCurveConstraintPresetWithOptions() procedure executes a 
//		point curve operation on a nurbs curve based on the option vars. 
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//

proc string pieceTogetherACmd(
	int $doHistory,
	int $keepOriginal,
	float $wt )
//
//	Description :
//		put together a pointCurveConstraint Cmd.
{
	string $cmd ;

	$cmd = "pointCurveConstraint" ;

	// query history.
	//
	$cmd = $cmd + " -ch " ;
	if( $doHistory == 1 ) $cmd = $cmd + "true" ;
    else $cmd = $cmd + "false" ;

	// query replace Original.
	//
	$cmd = $cmd + " -rpo " ;
	if( $keepOriginal == 1 )  $cmd = $cmd + "false" ;
	else $cmd = $cmd + "true" ;

	// query constraint weight.
	//	
	$cmd = $cmd + " -w " ;
	$cmd = $cmd + $wt ;

	return $cmd ;	
}

global proc pointCurveConstraintPreset(
	int $history,
	int $keepOriginal,
	float $wt )
//
//	Description :
//
{

	// put together an intersect cmd.
	//
	string $cmd = pieceTogetherACmd( $history, $keepOriginal, $wt ) ;

	int $nitems = 1 ;
	$cmd = appendToCmdPlaceHoldersForSelectionItems($cmd,$nitems) ;
 

	// Get the list of edit points or points on  nurbs curve selected.
	//
	global int $gSelectCurveParmPointsBit ;
	global int $gSelectCurveKnotsBit ;
	global int $gSelectEditPointsBit ;

	string $ptList[] = `filterExpand -ex true -sm $gSelectCurveParmPointsBit -sm $gSelectCurveKnotsBit -sm $gSelectEditPointsBit `;
	int $ptCount = size($ptList) ;

	if( $ptCount < 1 ) {
	   warning((uiRes("m_pointCurveConstraintPreset.kSelectAnEditPoint"))) ;
	} else {

		// execute one or more pointCurveConstraintCmds.
		//
		string $results[] ;
		int $nr = size($results) ;
		string $ptItem[1] ;
		int $i ;
		for( $i = 0 ; $i < $ptCount ; $i++ ) {
			$ptItem[0] = $ptList[$i] ;
			string $res[] = executeCmdOnItems( $cmd, $ptItem );	
			$results = stringArrayCatenate( $results, $res ) ;
		} // for $i	

		// select the results, the XYZ locators.
		//
		int $resultCount = size($results) ;
		if( $resultCount > 0 ) {

			string $selectString;

			// select all results.
			//
        	$selectString = "select -r  ";
			$resultCount = size($results) ;
			for( $i = 0 ; $i < $resultCount ; $i++ ) {
				$selectString += $results[$i] ;
				$selectString += " " ;
			}
			$selectString += " ;" ;
			eval $selectString ;	
			
			// set filter type to XYZ locators. 
			// filter out only the locators.
			//
			$results = `filterExpand -ex true -sm 24`;
			$resultCount = size($results) ;
        	$selectString = "select ";
			for( $i = 0 ; $i < $resultCount ; $i++ ) {
				$selectString +=  $results[$i] ;
				$selectString += " ";	
			}
			$selectString += ";";
			select -cl ;
			eval($selectString) ;
		}
	}
}

