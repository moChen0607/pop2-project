// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  14 January 1999
//
//  Procedure Name:
//      modelWithType
//
//  Description:
//	    Set or get the values for the output geometry type
//
//  Input Arguments:
//		-1 --> query and return what the current settings are
//       0 --> set all to NURBS
//       1 --> set all to polys
//       2 --> set all to subd's
//       3 --> set all to beziers
//
//  Return Value:
//      0 if all are NURBS, 1 if all are polys, 2 if all are subd's,
//      3 if all are beziers, -1 if its mixed.
//

global proc int modelWithType( int $type )
{
	int $val;
	if( -1 == $type ) {
		$val = `optionVar -q bevelOutputPolygons`;

		if( `optionVar -q birail1OutputPoly` != $val ) return -1;
		if( `optionVar -q birail2OutputPoly` != $val ) return -1;
		if( `optionVar -q birail3OutputPoly` != $val ) return -1;
		if( `optionVar -q blendOutputPoly` != $val ) return -1;
		if( `optionVar -q boundaryPolys` != $val ) return -1;
		if( `optionVar -q circularFilletOutputPolygons` != $val ) return -1;
		if( `optionVar -q extrudeOutputPolygons` != $val ) return -1;
		if( `optionVar -q freeFormFilletOutputPolygons` != $val ) return -1;
		if( `optionVar -q loftPolys` != $val ) return -1;
		if( `optionVar -q planarTrimPolys` != $val ) return -1;
		if( `optionVar -q rebuildSurfacePolys` != $val ) return -1;
		if( `optionVar -q revolveOutputPolygons` != $val ) return -1;
		if( `optionVar -q squareSrfPolys` != $val ) return -1;
		if( `optionVar -q sweepOutputPolygons` != $val ) return -1;
	}
	else {
		optionVar -iv bevelOutputPolygons $type;
		optionVar -iv birail1OutputPoly $type;
		optionVar -iv birail2OutputPoly $type;
		optionVar -iv birail3OutputPoly $type;
		optionVar -iv blendOutputPoly $type;
		optionVar -iv boundaryPolys $type;
		optionVar -iv circularFilletOutputPolygons $type;
		optionVar -iv extrudeOutputPolygons $type;
		optionVar -iv freeFormFilletOutputPolygons $type;
		optionVar -iv loftPolys $type;
		optionVar -iv planarTrimPolys $type;
		optionVar -iv rebuildSurfacePolys $type;
		optionVar -iv revolveOutputPolygons $type;
		optionVar -iv squareSrfPolys $type;
		optionVar -iv sweepOutputPolygons $type;
		$val = $type;
	}
	return $val;
}

