// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  11 February 1998
//
//  Description:
//      This implements the replace node based on attribute names.
//

proc int arrayMatch( string $array[], string $match )
{
    for ($item in $array)
        if ($item == $match)
            return true;

    return false;
}

global proc replaceNode( string $originalNode, string $replaceNode )
{
    // Copy the scalar values

    string $originalAttrs[] =
        `listAttr -scalar -multi -read -visible $originalNode`;

    string $replaceAttrs[] =
        `listAttr -scalar -multi -write -visible $replaceNode`;

    for ($attr in $originalAttrs) {
        if (arrayMatch($replaceAttrs, $attr)) {
            float $value = `getAttr ($originalNode+"."+$attr)`;
            catch(`setAttr ($replaceNode+"."+$attr) $value`);
        }
    }

    // Copy the binMembership attribute.
    //
    setAttr -type "string" ($replaceNode+".binMembership") 
        `getAttr ($originalNode+".binMembership")`;

    string $connections[];

    // Process the source connections

    $connections = `listConnections -source true -destination false
        -connections true -plugs true $originalNode`;

    for ($i = 0; $i < size($connections); $i += 2) {
        string $originalPlug = $connections[$i];
        string $srcPlug = $connections[$i+1];

        string $replacePlug =
            substitute($originalNode, $originalPlug, $replaceNode);
        
        catch(`connectAttr $srcPlug $replacePlug`);
    }

    // Process the destination connections

    $connections = `listConnections -source false -destination true
        -connections true -plugs true $originalNode`;

    for ($i = 0; $i < size($connections); $i += 2) {
        string $originalPlug = $connections[$i];
        string $dstPlug = $connections[$i+1];

        string $replacePlug =
            substitute($originalNode, $originalPlug, $replaceNode);

        // First, break connections between original and dstPlug.
        catch(`disconnectAttr $originalPlug $dstPlug`);

        catch(`connectAttr $replacePlug $dstPlug`);
    }
}
