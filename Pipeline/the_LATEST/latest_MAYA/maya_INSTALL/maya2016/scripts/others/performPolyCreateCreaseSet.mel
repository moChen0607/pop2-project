// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

proc setOptionVars (int $forceFactorySettings)
{
	string $DefaultCreaseSetsName = (uiRes("m_performPolyCreateCreaseSet.kDefaultCreaseSetName"));

	if ($forceFactorySettings || !`optionVar -exists DefaultCreaseSetsName`)
		optionVar -stringValue DefaultCreaseSetsName $DefaultCreaseSetsName;
}

global proc performPolyCreateCreaseSetSetup (string $parent, int $forceFactorySettings)
{
	setOptionVars($forceFactorySettings);
	setParent $parent;

	string $name = `optionVar -query DefaultCreaseSetsName`;
	textFieldGrp -e -text $name polyCreaseSetName_TFG;
}

global proc performPolyCreateCreaseSetCallback (string $parent, int $doIt)
{
	setParent $parent;

	optionVar -stringValue DefaultCreaseSetsName
		`textFieldGrp -q -text polyCreaseSetName_TFG`;

	if ($doIt) 
	{
		performPolyCreateCreaseSet 0;
		addToRecentCommandQueue "performPolyCreateCreaseSet 0" "CreateCreaseSet";
	}
}

proc polyCreateCreaseSetOptionBox()
{
	global int $gOptionBoxTemplateFrameSpacing;
	
	string $commandName = "performPolyCreateCreaseSet";
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");
	   
	string $layout = getOptionBox();
	setParent $layout;
	setUITemplate -pushTemplate OptionBoxTemplate;
	
	columnLayout;
	
	// Form layout
	string $parent = `formLayout polyCreateCreaseSetOptions`;

    textFieldGrp
		-label (uiRes("m_performPolyCreateCreaseSet.kDefaultCreaseName"))
		polyCreaseSetName_TFG;

	string $applyBtn = getOptionBoxApplyBtn();
	button -edit -label (uiRes("m_performPolyCreateCreaseSet.kSmoothButton"))
	       -command ($callback + " " + $parent + " " + 1)
		$applyBtn;

	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;

	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;

	setOptionBoxTitle( (uiRes("m_performPolyCreateCreaseSet.kCreateCreaseSetOptions")) );

	setOptionBoxHelpTag( "PolyCreateCreaseSet" );

	eval (($setup + " " + $parent + " " + 0));      
	showOptionBox();
}

global proc string performPolyCreateCreaseSet(int $option)
{
	string $cmd = "";

	switch ($option) 
	{
	case 1:
		// display option box
		polyCreateCreaseSetOptionBox;
		break;
	case 0:
	default:
		// execute command
		setOptionVars(false);
		string $name = `optionVar -query DefaultCreaseSetsName`;
		$cmd = ("polyCreaseCtx -edit -createSet \"" + $name + "\" polyCreaseContext;");
		evalEcho ($cmd);
	}

	return $cmd;
}

