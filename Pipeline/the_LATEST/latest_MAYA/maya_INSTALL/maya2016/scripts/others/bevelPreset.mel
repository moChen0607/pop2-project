// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  April 1, 1997
//
//  Description:
//      The bevelPreset() procedure executes a bevel operation. 
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//


proc string pieceTogetherCmd(
	int $doHistory,
	int $curvePartial,
	int $asPolygons,
    float $tolerance,
	int $attach,
	int $bevelSidesNumber,
	float $bevelWidth,
	float $bevelDepth,
	float $bevelExtrudeDepth,
	int $bevelCornerType,
	int $bevelShapeType ) 
//
//	Description :
//		Put together an extrude Cmd.
//
{
	string $cmd = "bevel" ;

	// history.
	//
	$cmd = $cmd + " -ch " ;
	if( $doHistory == 1 ) $cmd = $cmd + "true" ;	
	else $cmd = $cmd + "false" ;

	// curve range.
	//
	$cmd = $cmd + " -rn " ;
	if( $curvePartial == 1 ) $cmd = $cmd + "true" ;
	else $cmd = $cmd + "false" ;

	//  polygon output.
	//
	$cmd = $cmd + " -po " ;
	$cmd = $cmd + $asPolygons  ;

	// tolerance.
	//
	$cmd = $cmd + " -tol " ;
	$cmd = $cmd + $tolerance  ;
	
	// bevel number of sides.
	//
	$cmd = $cmd + " -ns " ;
	$cmd = $cmd + $bevelSidesNumber  ;

	// attach surfaces.
	//
	$cmd = $cmd + " -js " ;

	if( $attach == 1 ) {
		$cmd = $cmd + "true " ;
	} else {
		$cmd = $cmd + "false " ;
	}
	
	// bevel width.
	//
	$cmd = $cmd + " -w " ;
	$cmd = $cmd + $bevelWidth  ;

	// bevel depth.
	//	
	$cmd = $cmd + " -d " ;
	$cmd = $cmd + $bevelDepth  ;

	// bevel extrude depth.
	//
	$cmd = $cmd + " -ed " ;
	$cmd = $cmd + $bevelExtrudeDepth  ;

	// bevel corner type.
	//
	$cmd = $cmd + " -ct " ;
	if( $bevelCornerType == 1 || $bevelCornerType == 2 ) {
		$cmd = $cmd + $bevelCornerType ;
	} else {
		$corner = 1 ;
		$cmd = $cmd + $corner ;
	}

	// bevel shape type.
	//
	$cmd = $cmd + " -bst " ;
	$cmd = $cmd + $bevelShapeType ;
	
	return $cmd ;
}

global proc bevelPreset(
	int $doHistory,
    int $curvePartial,
    int $asPolygons,
	float $tolerance,
	int $bevelSidesNumber,
	int $attach,
	float $bevelWidth,
	float $bevelDepth,
	float $bevelExtrudeDepth,
	int $bevelCornerType,
	int $bevelShapeType ) 
//
//	Description :
//		Proc to do a bevel 
//
{

	//---------------------------------------
	// put together a bevel cmd.
	//---------------------------------------
	//
	string $cmd = pieceTogetherCmd(	$doHistory, 
									$curvePartial,
   									$asPolygons,
								 	$tolerance,
									$bevelSidesNumber,
									$attach,
									$bevelWidth,
									$bevelDepth,
									$bevelExtrudeDepth,
									$bevelCornerType,
									$bevelShapeType ) ;


	//----------------------------------------
	// place holders for at most 2 selection items.
	//----------------------------------------
	//
	int $nitems = 2 ;
	$cmd = appendToCmdPlaceHoldersForSelectionItems($cmd,$nitems) ;
 

	//---------------------------------------------
	// Get the list of nurbs curves in select list. 
	//---------------------------------------------
	//
	global int $gSelectNurbsCurvesBit;
	global int $gSelectIsoparmsBit;
	global int $gSelectCurvesOnSurfacesBit;
	global int $gSelectSurfaceEdgeBit;
	global int $gSelectMeshEdge;

	string $curveList[] = `filterExpand -ex true -sm $gSelectMeshEdge -sm $gSelectNurbsCurvesBit -sm $gSelectIsoparmsBit -sm $gSelectCurvesOnSurfacesBit -sm $gSelectSurfaceEdgeBit`;

	//--------------------------------------------
	// Valid # of items.
	//--------------------------------------------
	//
	int $curveCount = size($curveList) ;
	if( $curveCount == 0 ) {
		string $msg = (uiRes("m_bevelPreset.kSelectError"));
		error($msg);
	} else {

		// all n combinations. Use the first selected curve as the direction
		// curve for the other bevels.
		//
		string $bevelResults[] ;
		int $nr = size($bevelResults) ;
		string $curvePair[2] ;
		int $i ;
		for( $i = 0 ; $i < $curveCount ; $i++ ) {
			$curvePair[0] = $curveList[$i];
			if ( $i == 0 ) $curvePair[1] = "";
			else $curvePair[1] = $curveList[0];
			string $results[] = executeCmdOnItems($cmd,$curvePair);	
			$bevelResults = stringArrayCatenate($bevelResults, $results);
		} // for $i	

		int $resultCount = size($bevelResults) ;
		if( $resultCount > 0 ) {
			string $selectString;
        	$selectString = "select -r ";

			for( $i = 0 ; $i < $resultCount ; $i++ ) {
				$selectString +=  $bevelResults[$i] ;
				$selectString += " ";	
			}
			$selectString += ";" ;
			eval($selectString) ;
		}
	}
}

