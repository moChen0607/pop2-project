// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

proc setOptionVars(int $forceFactorySettings, int $operation)
{
	if (0 == $operation)
	{
		if ($forceFactorySettings || !`optionVar -exists Unfold3DIterations`)
			optionVar -intValue Unfold3DIterations 1;

		if ($forceFactorySettings || !`optionVar -exists Unfold3DPack`)
			optionVar -intValue Unfold3DPack 1;

		if ($forceFactorySettings || !`optionVar -exists Unfold3DBorderIntersect`)
			optionVar -intValue Unfold3DBorderIntersect 1;

		if ($forceFactorySettings || !`optionVar -exists Unfold3DTriFlip`)
			optionVar -intValue Unfold3DTriFlip 1;

		if ($forceFactorySettings || !`optionVar -exists Unfold3DMapSize`)
			optionVar -intValue Unfold3DMapSize 3;

		if ($forceFactorySettings || !`optionVar -exists Unfold3DRoomSpace`)
			optionVar -intValue Unfold3DRoomSpace 2;
	}
	else if (1 == $operation)
	{
		if ($forceFactorySettings || !`optionVar -exists Unfold3DOptimizeIterations`)
			optionVar -intValue Unfold3DOptimizeIterations 1;

		if ($forceFactorySettings || !`optionVar -exists Unfold3DOptimizeSurfaceAngle`)
			optionVar -floatValue Unfold3DOptimizeSurfaceAngle 1.0;

		if ($forceFactorySettings || !`optionVar -exists Unfold3DOptimizePower`)
			optionVar -intValue Unfold3DOptimizePower 100;

		if ($forceFactorySettings || !`optionVar -exists Unfold3DBorderOptimizeIntersect`)
			optionVar -intValue Unfold3DBorderOptimizeIntersect 1;

		if ($forceFactorySettings || !`optionVar -exists Unfold3DOptimizeTriFlip`)
			optionVar -intValue Unfold3DOptimizeTriFlip 1;

		if ($forceFactorySettings || !`optionVar -exists Unfold3DOptimizeMapSize`)
			optionVar -intValue Unfold3DOptimizeMapSize 3;

		if ($forceFactorySettings || !`optionVar -exists Unfold3DOptimizeRoomSpace`)
			optionVar -intValue Unfold3DOptimizeRoomSpace 2;
	}
}

proc int indexToMapSize(int $i)
{
	int $val;

	switch ($i)
	{
	case 1:
		$val = 4096;
		break;
	case 2:
		$val = 2048;
		break;
	case 4:
		$val = 512;
		break;
	case 5:
		$val = 256;
		break;
	case 6:
		$val = 128;
		break;
	case 7:
		$val = 64;
		break;
	case 8:
		$val = 32;
		break;
	case 3:
	default:
		$val = 1024;
		break;
	}

	return $val;
}

//
//  Description:
//		Update the state of the option box UI to reflect the option values.
//
global proc unfold3DSetup(string $parent, int $forceFactorySettings, int $operation)
{
	setOptionVars($forceFactorySettings, $operation);
	setParent $parent;

	int $iVal;

	if (0 == $operation)
	{
		$iVal = `optionVar -q Unfold3DIterations`;
		intSliderGrp -edit -value $iVal Iterations_ISG;
	
		$iVal = `optionVar -q Unfold3DPack`;
		checkBoxGrp -edit -value1 (0 != $iVal) Pack_CBG;
	
		$iVal = `optionVar -q Unfold3DBorderIntersect`;
		checkBoxGrp -edit -value1 (0 != $iVal) BorderIntersect_CBG;
	
		$iVal = `optionVar -q Unfold3DTriFlip`;
		checkBoxGrp -edit -value1 (0 != $iVal) TriFlip_CBG;	
	
		$iVal = `optionVar -q Unfold3DMapSize`;
		optionMenuGrp -edit -select $iVal MapSize_OMG;

		$iVal = `optionVar -q Unfold3DRoomSpace`;
		intSliderGrp -edit -value $iVal RoomSpace_ISG;
	}
	else if (1 == $operation)
	{
		$iVal = `optionVar -q Unfold3DOptimizeIterations`;
		intSliderGrp -edit -value $iVal Iterations_ISG;
	
		$iVal = `optionVar -q Unfold3DOptimizePower`;
		intSliderGrp -edit -value $iVal Power_ISG;
	
		float $fVal = `optionVar -q Unfold3DOptimizeSurfaceAngle`;
		floatSliderGrp -edit -value $fVal SurfaceAngle_FSG;

		$iVal = `optionVar -q Unfold3DOptimizeBorderIntersect`;
		checkBoxGrp -edit -value1 (0 != $iVal) BorderIntersect_CBG;
	
		$iVal = `optionVar -q Unfold3DOptimizeTriFlip`;
		checkBoxGrp -edit -value1 (0 != $iVal) TriFlip_CBG;	
	
		$iVal = `optionVar -q Unfold3DOptimizeMapSize`;
		optionMenuGrp -edit -select $iVal MapSize_OMG;

		$iVal = `optionVar -q Unfold3DOptimizeRoomSpace`;
		intSliderGrp -edit -value $iVal RoomSpace_ISG;
	}
}

//
//  Description:
//		Update the option values with the current state of the option box UI.
//
global proc unfold3DCallback(string $parent, int $doIt, int $operation)
{
    setParent $parent;

	int $iVal;

	string $label;

	if (0 == $operation)
	{
		$iVal = `intSliderGrp -q -value Iterations_ISG`;
		optionVar -intValue Unfold3DIterations $iVal;
	
		$iVal = `checkBoxGrp -q -value1 Pack_CBG`;
		optionVar -intValue Unfold3DPack $iVal;
	
		$iVal = `checkBoxGrp -q -value1 BorderIntersect_CBG`;
		optionVar -intValue Unfold3DBorderIntersect $iVal;
	
		$iVal = `checkBoxGrp -q -value1 TriFlip_CBG`;
		optionVar -intValue Unfold3DTriFlip $iVal;
	
		$iVal = `optionMenuGrp -q -select MapSize_OMG`;
		optionVar -intValue Unfold3DMapSize $iVal;
	
		$iVal = `intSliderGrp -q -value RoomSpace_ISG`;
		optionVar -intValue Unfold3DRoomSpace $iVal;

		$label = "Unfold3D Unfold";
	}
	else if (1 == $operation)
	{
		$iVal = `intSliderGrp -q -value Iterations_ISG`;
		optionVar -intValue Unfold3DOptimizeIterations $iVal;
	
		$iVal = `intSliderGrp -q -value Power_ISG`;
		optionVar -intValue Unfold3DOptimizePower $iVal;
	
		$iVal = `checkBoxGrp -q -value1 BorderIntersect_CBG`;
		optionVar -intValue Unfold3DOptimizeBorderIntersect $iVal;
	
		$iVal = `checkBoxGrp -q -value1 TriFlip_CBG`;
		optionVar -intValue Unfold3DOptimizeTriFlip $iVal;
	
		$iVal = `optionMenuGrp -q -select MapSize_OMG`;
		optionVar -intValue Unfold3DOptimizeMapSize $iVal;
	
		$iVal = `intSliderGrp -q -value RoomSpace_ISG`;
		optionVar -intValue Unfold3DOptimizeRoomSpace $iVal;

		float $fVal = `floatSliderGrp -q -value SurfaceAngle_FSG`;
		optionVar -floatValue Unfold3DOptimizeSurfaceAngle $fVal;

		$label = "Unfold3D Optimize";
	}

	if ($doIt) 
	{
		performUnfold3D 0 $operation;
		addToRecentCommandQueue ("performUnfold3D 0 " + $operation) "Unfold3D";
	}
}

proc string addUnfoldOptions()
{
	global int $gOptionBoxTemplateFrameSpacing;

	string $optsLabel = (uiRes("m_performUnfold3D.kUnfoldOptionsFrame"));
	string $iterLabel = (uiRes("m_performUnfold3D.kIterations"));
	string $packLabel = (uiRes("m_performUnfold3D.kPack"));
	string $selfIntLabel = (uiRes("m_performUnfold3D.kPreventSI"));
	string $triFlipLabel = (uiRes("m_performUnfold3D.kPreventTF"));
	string $roomLabel = (uiRes("m_performUnfold3D.kRoomSpace"));
	string $mapSizeLabel = (uiRes("m_performUnfold3D.kMapSize"));
	string $roomSpaceLabel = (uiRes("m_performUnfold3D.kRoomSpaceSize"));

		// Form layout
	string $parent = `formLayout polyUnfold3DOptions`;

		// Solver settings frame
		string $optionsFrame =  `frameLayout -label $optsLabel`;
	
			columnLayout;

			intSliderGrp -label $iterLabel -min 0 -max 10  -fieldMinValue 0 -fieldMaxValue 999 -value 1 Iterations_ISG;
			checkBoxGrp -label "" -label1 $packLabel -value1 true Pack_CBG;
			checkBoxGrp -label "" -label1 $selfIntLabel -value1 true BorderIntersect_CBG;
		    checkBoxGrp -label "" -label1 $triFlipLabel -value1 true TriFlip_CBG;

			setParent ..; // columnLayout
		
		setParent $parent; // frameLayout	

		// Room space settings
		string $roomFrame =  `frameLayout -label $roomLabel`;

			columnLayout;

			optionMenuGrp -label $mapSizeLabel MapSize_OMG;
				menuItem -label "4096";
				menuItem -label "2048";
				menuItem -label "1024";
				menuItem -label "512";
				menuItem -label "256";
				menuItem -label "128";
				menuItem -label "64";
				menuItem -label "32";
			optionMenuGrp -edit -select 3 MapSize_OMG;

			intSliderGrp -label $roomSpaceLabel -field true -min 0 -max 10 
					-value 2 -fieldMinValue 0 -fieldMaxValue 999 RoomSpace_ISG;

			setParent ..; // columnLayout

		setParent $parent; // frameLayout

	setParent ..; // formLayout

	formLayout -e
		-af $optionsFrame "top" $gOptionBoxTemplateFrameSpacing
		-af $optionsFrame "left" $gOptionBoxTemplateFrameSpacing
		-af $optionsFrame "right" $gOptionBoxTemplateFrameSpacing
		-an $optionsFrame "bottom"

		-ac $roomFrame "top" $gOptionBoxTemplateFrameSpacing $optionsFrame 
		-af $roomFrame "left" $gOptionBoxTemplateFrameSpacing
		-af $roomFrame "right" $gOptionBoxTemplateFrameSpacing
		-an $roomFrame "bottom"
	$parent;

	return $parent;
}

proc string addOptimizeOptions()
{
	global int $gOptionBoxTemplateFrameSpacing;

	string $optsLabel = (uiRes("m_performUnfold3D.kOptimizeOptionsFrame"));
	string $iterLabel = (uiRes("m_performUnfold3D.kIterations"));
	string $selfIntLabel = (uiRes("m_performUnfold3D.kPreventSI"));
	string $triFlipLabel = (uiRes("m_performUnfold3D.kPreventTF"));
	string $roomLabel = (uiRes("m_performUnfold3D.kRoomSpace"));
	string $mapSizeLabel = (uiRes("m_performUnfold3D.kMapSize"));
	string $roomSpaceLabel = (uiRes("m_performUnfold3D.kRoomSpaceSize"));

	string $surfangleLabel = (uiRes("m_performUnfold3D.kSurfangle"));
	string $powerLabel = (uiRes("m_performUnfold3D.kPower"));

		// Form layout
	string $parent = `formLayout polyUnfold3DOptions`;

		// Solver settings frame
		string $optionsFrame =  `frameLayout -label $optsLabel`;
	
			columnLayout;

			intSliderGrp -label $iterLabel -min 0 -max 10  -fieldMinValue 0 -fieldMaxValue 999 -value 1 Iterations_ISG;
			floatSliderGrp -label $surfangleLabel -min 0.0 -max 1.0 -field true -value 1.0 SurfaceAngle_FSG;
			intSliderGrp -label $powerLabel -min 1 -max 100  -fieldMinValue 0 -fieldMaxValue 999 -field true -value 100 Power_ISG;
			checkBoxGrp -label "" -label1 $selfIntLabel -value1 true BorderIntersect_CBG;
		    checkBoxGrp -label "" -label1 $triFlipLabel -value1 true TriFlip_CBG;

			setParent ..; // columnLayout
		
		setParent $parent; // frameLayout	

		// Room space settings
		string $roomFrame =  `frameLayout -label $roomLabel`;

			columnLayout;

			optionMenuGrp -label $mapSizeLabel MapSize_OMG;
				menuItem -label "4096";
				menuItem -label "2048";
				menuItem -label "1024";
				menuItem -label "512";
				menuItem -label "256";
				menuItem -label "128";
				menuItem -label "64";
				menuItem -label "32";
			optionMenuGrp -edit -select 3 MapSize_OMG;

			intSliderGrp -label $roomSpaceLabel -field true -min 0 -max 10 
					-value 2 -fieldMinValue 0 -fieldMaxValue 999 RoomSpace_ISG;

			setParent ..; // columnLayout

		setParent $parent; // frameLayout

	setParent ..; // formLayout

	formLayout -e
		-af $optionsFrame "top" $gOptionBoxTemplateFrameSpacing
		-af $optionsFrame "left" $gOptionBoxTemplateFrameSpacing
		-af $optionsFrame "right" $gOptionBoxTemplateFrameSpacing
		-an $optionsFrame "bottom"

		-ac $roomFrame "top" $gOptionBoxTemplateFrameSpacing $optionsFrame 
		-af $roomFrame "left" $gOptionBoxTemplateFrameSpacing
		-af $roomFrame "right" $gOptionBoxTemplateFrameSpacing
		-an $roomFrame "bottom"
	$parent;

	return $parent;
}

proc unfold3DOptions(int $operation)
{
	// Global template variables for form and widget spacing
	global int $gOptionBoxTemplateDescriptionMarginWidth;
	global int $gOptionBoxTemplateFrameSpacing;
	global int $gOptionBoxTemplateTextColumnWidth;
	global int $gOptionBoxTemplateSingleWidgetWidth;
	global int $gOptionBoxTemplateSliderWidgetWidth;
	global int $gOptionBoxTemplateOffsetText;
	
	//	Name of the command for this option box.
	//
	string $commandName = "unfold3D";
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	//	Get the option box.
	//
	string $layout = getOptionBox();
	setParent $layout;
	
	//	Pass the command name to the option box.
	//
	setOptionBoxCommandName($commandName);
	
	//	Activate the option box UI template.
	//
	setUITemplate -pushTemplate OptionBoxTemplate;

	scrollLayout;

	string $parent;

	if (0 == $operation)
	{
		$parent = `addUnfoldOptions`;
	}
	else if (1 == $operation)
	{
		$parent = `addOptimizeOptions`;
	}
	
	//	Deactivate the default UI template.
	//
	setUITemplate -popTemplate;

	//	'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-command ($callback + " " + $parent + " " + 1 + " " + $operation)
		$applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + " " + $operation + "; hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1 + " " + $operation)
		$resetBtn;

	//	Set the option box title.
	//
	if (0 == $operation)
	{
		setOptionBoxTitle (uiRes("m_performUnfold3D.kUnfold3DUnfoldOptions"));
		setOptionBoxHelpTag("Unfold3DUnfold");
	}
	if (1 == $operation)
	{
		setOptionBoxTitle (uiRes("m_performUnfold3D.kUnfold3DOptimizeOptions"));
		setOptionBoxHelpTag("Unfold3DOptimize");
	}

	//	Set the current values of the option box.
	//
	eval (($setup + " " + $parent + " " + 0 + " " + $operation));
	
	//	Show the option box.
	//
	showOptionBox();
}

proc string assembleCmd(int $operation)
{
	string $cmd;

	setOptionVars(false, $operation);

	if (0 == $operation)
	{
		$cmd = "Unfold3D -u ";

		int $iVal;

		$iVal = `optionVar -q Unfold3DIterations`;
		$cmd += ("-ite " + $iVal + " ");

		$iVal = `optionVar -q Unfold3DPack`;
		$cmd += ("-p " + $iVal + " ");
	
		$iVal = `optionVar -q Unfold3DBorderIntersect`;
		$cmd += ("-bi " + $iVal + " ");
	
		$iVal = `optionVar -q Unfold3DTriFlip`;
		$cmd += ("-tf " + $iVal + " ");
	
		$iVal = `optionVar -q Unfold3DMapSize`;
		$iVal = indexToMapSize($iVal);
		$cmd += ("-ms " + $iVal + " ");

		$iVal = `optionVar -q Unfold3DRoomSpace`;
		$cmd += ("-rs " + $iVal + ";");
	}
	else if (1 == $operation)
	{
		$cmd = "Unfold3D -o";

		int $iVal;
		float $fVal;

		$iVal = `optionVar -q Unfold3DOptimizeIterations`;
		$cmd += ("-ite " + $iVal + " ");

		$iVal = `optionVar -q Unfold3DOptimizePower`;
		$cmd += ("-pow " + ($iVal/100) + " ");
	
		$fVal = `optionVar -q Unfold3DOptimizeSurfaceAngle`;
		$cmd += ("-sa " + $fVal + " ");

		$iVal = `optionVar -q Unfold3DOptimizeBorderIntersect`;
		$cmd += ("-bi " + $iVal + " ");
	
		$iVal = `optionVar -q Unfold3DOptimizeTriFlip`;
		$cmd += ("-tf " + $iVal + " ");
	
		$iVal = `optionVar -q Unfold3DOptimizeMapSize`;
		$iVal = indexToMapSize($iVal);
		$cmd += ("-ms " + $iVal + " ");

		$iVal = `optionVar -q Unfold3DOptimizeRoomSpace`;
		$cmd += ("-rs " + $iVal + ";");
	}
		
	return $cmd;
}

//
//  Input Arguments:
//		action:
//      0 - Execute the command.
//      1 - Show the option box dialog.
//      2 - Return the command.
//
//		operation:
//		0 - Unfold
//		1 - Optimize
//
global proc string performUnfold3D(int $action, int $operation)
{
	string $cmd = "";

	switch ($action) 
	{

		//	Execute the command.
		//
		case 0:
			//	Retrieve the option settings
			//
			setOptionVars(false, $operation);

			//	Get the command.
			//
			$cmd = `assembleCmd $operation`;

			//	Execute the command with the option settings.
			//
			evalEcho($cmd);

			break;

		//	Show the option box.
		//
		case 1:
			unfold3DOptions $operation;
			break;

		//	Return the command string.
		//
		case 2:
			//	Retrieve the option settings.
			//
			setOptionVars (false, $operation);

			//	Get the command.
			//
			$cmd = `assembleCmd $operation`;

			break;
	}
	return $cmd;
}
