// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  May 2000 
//
//  Procedure Name:
//      artAttrInitPaintableAttr	
//
//  Description:
//		Initializes the paintable attribute.
//
//  Return Value:
//      0 - if the selection failed.
//      1 - if the selection succeded.
//

proc int artAttrFindAllPaintableAttr()
{
	string $artCmd = "artAttrCtx";

	string $attr = "";
	string $cmd = $artCmd + " -q -objattrArray " + `currentCtx`;
	string $paintAttr = `eval $cmd`;
	string $ListPaintableItem[];
	tokenize( $paintAttr, " ", $ListPaintableItem );
	if (size($ListPaintableItem) < 1) {
		return 0;
	}

	for ($paintableItem in $ListPaintableItem) {
		string $buf[];
		tokenize($paintableItem, ".", $buf);
		if (size($buf) < 3) {
			continue;
		}

		// For paint vertex color tool we are interested in 
		// only vertexColorRGB and vertexFaceColorRGB attributes.
		// So update the paintable array with only those nodes
		if( $buf[2] != "vertexFaceColorRGB" && $buf[2] != "vertexColorRGB") {
			// skip other attributes
			continue ;
		}

		$attr = $buf[0] + "." + $buf[1] + "." + $buf[2];
		string $isPaintableCmd = "makePaintable -q " + $buf[0] + " " + $buf[2];

		int $isPaintable[] = eval($isPaintableCmd);
		if (size($isPaintable) < 1) {
			continue;
		}

		if ($isPaintable[0]) {
			//artAttrSelected( $artCmd, $attr );

			//interactive update required
			string $cmd = $artCmd + " -interactiveUpdate true " ;

			// Notify the context about the change.
			$cmd = ($cmd + " -e -pas \"" + $attr + "\" `currentCtx`");
			eval( $cmd );	

		}
	}

	return 0 ;

}

global proc int artPaintVertexInitPaintableAttr() 
{
	source "artAttrCallback.mel";

	artAttrSyncCurrentAttribute();

	return artAttrFindAllPaintableAttr() ;
}
