// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  April 1, 2003
//
//<doc>
//<name firstParentOf>
//
//<synopsis>
//      string firstParentOf(string $dagObject)
//
//<returns>
//      string : The first DAG parent of the specified DAG object.
//
//<description>
//      This procedure returns the name of the first DAG parent of the
//      specified object, if any. If the specified object has no parents, the
//      return value is "".
//
//<flags>
//      string $dagObject The object whose first DAG parent should be returned.
//
//<examples>
//		// Create a NURBS sphere.
//		//
//		string $createdNodes[] = `sphere -constructionHistory false`;
//		string $sphere = $createdNodes[0];
//		
//		// Create a group containing the sphere.
//		//
//		string $group = `group`;
//
//		// Use firstParentOf() to get the parent of the sphere. This should be
//		// the name of the group.
//		//
//		string $firstParentOfSphere = firstParentOf($sphere);
//
//		if (isSameObject($group, $firstParentOfSphere)) print("// Success!\n");
//		// Success!
//		
//</doc>

global proc string firstParentOf(
	string $dagObject)
{
	//
	// Description:
	//	This procedure returns the name of the first parent of the specified
	//	DAG object.
	//

	string $parent = "";

	if ($dagObject != "")
	{
		if (`objExists $dagObject`)
		{
			if (size(`ls -dagObjects $dagObject`) > 0)
			{
				string $parentArray[] = `listRelatives -parent -fullPath $dagObject`;
				if (size($parentArray) > 0)
				{
					$parent = $parentArray[0];
				}
			}
			else // (size(`ls -dagObjects $dagObject`) == 0)
			{
				string $fmt = (uiRes("m_firstParentOf.kNotADAGNode"));
				error `format -s $dagObject $fmt`;
			}
		}
		else // (!`objExists $dagObject`)
		{
			string $fmt = (uiRes("m_firstParentOf.kNoDAGNode"));
			error `format -s $dagObject $fmt`;
		}
	}

	return $parent;
}
