// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  2003
//
// Description:  Gets hairsystems that are directly selected or indirectly
//		through selected curves.
//	

proc int appendUniqueEntry( string $new, string $array[] )
{
	// add string "new" to "array" if it is not already included
	int $len = size( $array );
	int $i;
	for( $i = 0; $i < $len; $i++ ){
		if( $new == $array[$i] ){
			$new = "";
			break;
		}
	}
	if( $new != "" ){
		$array[$len] = $new;
		$len++;
	}
	return( $len );
}

global proc string[] getSelectedHairSystems()
{
	string $out[] = `ls -sl -dag -type hairSystem`;
	int $len = size( $out ); 

	string $pfxHair[] = `ls -sl -dag -type pfxHair`;
	int $pfxHairLen = size( $pfxHair ); 
	int $i;
	for( $i = 0; $i < $pfxHairLen; $i++ ){
		string $hairSys = sourceNodeNameFromConnection($pfxHair[$i] + ".renderHairs" );
		if( $hairSys != "" ){
			$len = appendUniqueEntry( $hairSys, $out );
		}
	}

	string $hCurves[] = getSelectedHairCurves();
	int $numCurves = size( $hCurves );
	for( $i = 0; $i < $numCurves; $i++ ){
		string $curve = $hCurves[$i];
		string $hairSys = "";
		string $con[] = `connectionInfo -dfs ($curve + ".outHair")`;
		if( size($con) > 0 ){
			string $buffer[];
			int $numTokens = `tokenize $con[0] "." $buffer`;
			if( $numTokens > 1 ){
				string $nType = `nodeType $buffer[0]`;
				if( $nType == "hairSystem"){
					$hairSys = $buffer[0];
				}
			}
		}
		if( $hairSys != "" ){
			$len = appendUniqueEntry( $hairSys, $out );
		}
	}
	return $out;
}
