// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//<doc>
//<name sceneTimeWarp>
//
//<synopsis>
//				string sceneTimeWarp( string $action )
//
//<description>
//				Performs a scene timewarp action.
//
//<flags>
//				string $action The action to perform - one of "add", "select" or "delete"
//
//<returns>
//				string	The name of the timewarp anim curve node
//
//<examples>
//  string $warp = sceneTimeWarp( "add" );
//
//</doc>
//

proc string addTimeWarp()
{
	if ( `connectionInfo -isDestination time1.timewarpIn_Raw` )
	{
		warning( (uiRes("m_sceneTimeWarp.kAlreadyTimeWarp")) );
		return "";
	}
	
	string $warp = `createNode -n timewarp animCurveTT`;
	connectAttr ( $warp + ".a" ) time1.timewarpIn_Raw;
	float $start = `playbackOptions -q -minTime`;
	float $end = `playbackOptions -q -maxTime`;
	setKeyframe -t $start -v $start -ott clamped $warp;
	setKeyframe -t $end -v $end  -itt clamped $warp;
	selectKey $warp;
	setInfinity -pri linear -poi linear;
	setAttr time1.enableTimewarp 1;
	
	return $warp;
}

proc string selectTimeWarp()
{
	select -clear;
	
	string $conns[] = `listConnections -s 1 -d 0 -scn 1 time1.timewarpIn_Raw`;
	if ( size($conns) == 0 )
	{
		warning( (uiRes("m_sceneTimeWarp.kNoTimeWarpSelect")) );
		return "";
	}
	
	for ( $conn in $conns )
	{
		select -add $conn;
	}
	
	return $conns[0];
}

proc string deleteTimeWarp()
{
	string $conns[] = `listConnections -s 1 -d 0 time1.timewarpIn_Raw`;
	if ( size($conns) == 0 )
	{
		warning( (uiRes("m_sceneTimeWarp.kNoTimeWarpDelete")) );
		return "";
	}
	
	// only actually delete stuff if it looks like something we created in addTimeWarp()
	//
	int $didDelete = 0;
	if ( size($conns) == 1 && `nodeType $conns[0]` == "animCurveTT" )
	{
		string $inputs[] = `listConnections -s 1 -d 0 $conns[0]`;
		if ( size($inputs) == 0 )
		{
			delete $conns[0];
			$didDelete = 1;
		}
	}
	if ( !$didDelete )
	{
		// otherwise just disconnect the inputs
		//
		warning( (uiRes("m_sceneTimeWarp.kNotDeleted")) );
		string $plugs[] = `listConnections -s 1 -d 0 -p 1 time1.timewarpIn_Raw`;
		for ( $plug in $plugs )
			disconnectAttr $plug time1.timewarpIn_Raw;
	}

	setAttr time1.enableTimewarp 0;

	return $conns[0];
}

global proc string sceneTimeWarp( string $action )
{
	string $result;
	
	if ( $action == "add" )
	{
			$result = addTimeWarp();
	}
	else if ( $action == "select" )
	{
			$result = selectTimeWarp();
	}
	else if ( $action == "delete" )
	{
			$result = deleteTimeWarp();
	}
	
	return $result;
}
