// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//      rearrangeSelection
//
//  Description:
//		  This procedure generate per-object selection list array.
//  Input Arguments:
//        $totalSelected : Selection list. Typically from command ls -sl.
//  Return Value:
//        An string array. Each element has and only has one object.
// 
//  Usage Example:
//      Let modeling command perform operation on multiple objects if the command can only perform operation on single object.
//
//		string $objects[] = `ls -sl`;
//		string $resultantSelection[] = rearrangeSelection($objects);
//		if (size($resultantSelection) > 1)
//		{
//			int $i;
//          for($i = 0; $i < size($resultantSelection);$i++)
//			{
//				polyFlipUV -flipType 0 -local on $resultantSelection[$i];
//			}
//		}
//

global proc string[] rearrangeSelection(string $totalSelected[])
{
	string $beforeDot[];
	string $resultantSelection[];

	for( $i = 0; $i < size($totalSelected); $i++ )
	{
		string $buffer[];
		tokenize($totalSelected[$i], ".", $buffer);

		int $index = -1;
		for( $j = 0; $j < size($beforeDot); $j++ )
		{
			if($beforeDot[$j] == $buffer[0])
			{
				$index = $j;
				break;
			}
		}

		if($index == -1)
		{
			$beforeDot[size($beforeDot)] = $buffer[0];
			$resultantSelection[size($resultantSelection)] = $totalSelected[$i];
		}
		else
		{
			$resultantSelection[$index] = $resultantSelection[$index] + " " + ($totalSelected[$i]);
		}
	}

	return $resultantSelection;
}