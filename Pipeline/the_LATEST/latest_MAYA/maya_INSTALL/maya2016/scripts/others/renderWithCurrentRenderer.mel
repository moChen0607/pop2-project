// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

// 
// Render with current renderer to the editor.
// Resolution and camera name is given. 
// This procedure finds the interactive render command for the current renderer
// and renders into the editor.
// The full path to the image file name is returned.
// This function is evoked from renderWindowPanel.mel
// 
// NOTE: 
// for the image to be recycled later, the renderer should write the
// tmp image in the disk
//
global proc string renderWithCurrentRenderer(
	string $editor,
	string $camera,
	int $resolution[], 
	int $doShadows, 
	int $doGlowPass,
	string $option )
{
	global string $gBeforeFrameRenderCallbacks[];
	global string $gAfterFrameRenderCallbacks[];

	string $feature = "render";
	string $renderer = currentRenderer();
	
	string $command;
	int $err = 0;
	string $result = "";

	if (`renderer -query -renderProcedure $renderer` != "") 
	{
		$command = `renderer -query -renderProcedure $renderer`;

		// Suspend material view renderer while frame rendering is running
		renderer -materialViewRendererSuspend true;

		for($cmd in $gBeforeFrameRenderCallbacks)
		{
			eval($cmd);
		}

		float $startTime = `timerX`;
		$err = catch($result = 
				`eval 
				$command 
				$resolution[0] 
				$resolution[1] 
				$doShadows 
				$doGlowPass 
				$camera
				$option`);
		float $renderTime = `timerX -startTime $startTime`;
		
		for($cmd in $gAfterFrameRenderCallbacks)
		{
			eval($cmd);
		}

		// Resume material view renderer
		renderer -materialViewRendererSuspend false;

		if( $err ) $result = "";

        string $currentRendererName = currentRenderer();
        string $renUIName = renderWindowCaption("", $renderTime);
		renderWindowEditor -edit -pca $renUIName $editor;
    }
    else
    {
        string $renUIName = `renderer -query -rendererUIName $renderer`;
		string $msg = (uiRes("m_renderWithCurrentRenderer.kCannotRender"));
		warning (`format -stringArg $renUIName $msg`);
	}

	return $result;
}

