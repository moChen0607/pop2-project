// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  March, 2005
//
//  Description:
//     This is the script used to implement menus and option boxes for
//  the makeCollideNCloth menu.
//  
//		Arguments:
//			$flag		0 = execute the command
//						1 = bring up the option box
//						2 = dragging to shelf; just return the command string
//
//		Return Value:
//			String corresponding to the command (to be) executed.
//




//
//  Procedure Name:
//      makeCollideNClothOptions
//
//  Description:
//		Construct the option box UI.  Involves accessing the standard option
//		box and customizing the UI accordingly.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
proc makeCollideNClothOptions()
{
	//	Name of the command for this option box.
	//
	string $commandName = "performMakeCollideNCloth";

	//	Build the option box actions.
	//

	string $layout = getOptionBox();
	setParent $layout;
	
	setUITemplate -pushTemplate DefaultTemplate;

	tabLayout -tv false -scr true;
	
	string $parent = `columnLayout -adjustableColumn 1`;
	string $nucleusButton = nucleusSolverButton("");
	optionMenuGrp -e -cw 1 50 $nucleusButton;

	//	'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-label (uiRes("m_performMakeCollideNCloth.kMakeCollideCloth"))
		-command ("performMakeCollideNCloth 0" )
		$applyBtn;

	//	Set the option box title.
	//
	setOptionBoxTitle((uiRes("m_performMakeCollideNCloth.kMakeCollideOptions")));
	setOptionBoxCommandName($commandName);
	setOptionBoxHelpTag( "MakeCollideNCloth" );

	// Pop the UI template
	//
	setUITemplate -popTemplate;

	//	Set the current values of the option box.
	//
	
	//	Show the option box.
	//
	showOptionBox();
}


global proc string performMakeCollideNCloth( int $flag)
{	
	if( !nClothEditLicenseFound() ) {
		error(uiRes("m_createNCloth.kNoNClothLicense"));
		return "";
	}
	string $cmd = "makeCollideNCloth";
	switch ($flag) {

		//	Execute the command from option settings.
		//
		case 0:
			evalEcho($cmd);
			break;

		//	Show the option box.
		//
		case 1:
			makeCollideNClothOptions();
			break;

		//	Return the command string.
		//
		case 2:
			break;
	}
	return $cmd;
}
