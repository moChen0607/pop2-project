// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//==================================================================
// Object Type Filters
//==================================================================

// Description:
// This is the object type filter localized names array, standard and UI objects
global string $gObjTypeFiltersLocalized[];
global string $gUIObjTypeFiltersLocalized[];

// Description:
// This is the UI filter localized name, if turned on, UI filter filters all UI objects
global string $gUIFiltersLocalized;

// Description:
// This is the total object type filter localized names array containing standard ObjFilters names and UIFilters names
global string $gTotalObjTypeFiltersLocalized[];

// Description:
// This is the total object type filter names to be saved in maya file.
global string $gTotalObjTypeFilters[];

// Description:
// This function is to setup localized name array.
proc setupLocalizedNameArray()
{
	// declare global parameters
	global string $gObjTypeFiltersLocalized[];
	global string $gUIObjTypeFiltersLocalized[];
	global string $gTotalObjTypeFiltersLocalized[];
	global string $gUIFiltersLocalized;

	global string $gTotalObjTypeFilters[]; 

	$gTotalObjTypeFilters[0] = "NURBS Curves";
	$gTotalObjTypeFilters[1] = "NURBS Surfaces";
	$gTotalObjTypeFilters[2] = "Polygons";
	$gTotalObjTypeFilters[3] = "Subdiv Surface";
	$gTotalObjTypeFilters[4] = "Particles";
	$gTotalObjTypeFilters[5] = "Particle Instance";
	$gTotalObjTypeFilters[6] = "Fluids";
	$gTotalObjTypeFilters[7] = "Strokes";
	$gTotalObjTypeFilters[8] = "Image Planes";
	$gTotalObjTypeFilters[9] = "UI";
	$gTotalObjTypeFilters[10] = "Lights";
	$gTotalObjTypeFilters[11] = "Cameras";
	$gTotalObjTypeFilters[12] = "Locators";
	$gTotalObjTypeFilters[13] = "Joints";
	$gTotalObjTypeFilters[14] = "IK Handles";
	$gTotalObjTypeFilters[15] = "Deformers";
	$gTotalObjTypeFilters[16] = "Motion Trails";
	$gTotalObjTypeFilters[17] = "Components";
	$gTotalObjTypeFilters[18] = "Hair Systems";
	$gTotalObjTypeFilters[19] = "Follicles";
	$gTotalObjTypeFilters[20] = "Misc. UI";
	$gTotalObjTypeFilters[21] = "Ornaments";


	// manully setting localized string
	// names for standard object type filter
	$gObjTypeFiltersLocalized[0] = (uiRes("m_createObjectTypeFilters.kNurbsCurves"));
	$gObjTypeFiltersLocalized[1] = (uiRes("m_createObjectTypeFilters.kNurbsSurfaces"));
	$gObjTypeFiltersLocalized[2] = (uiRes("m_createObjectTypeFilters.kPolygons"));
	$gObjTypeFiltersLocalized[3] = (uiRes("m_createObjectTypeFilters.kSubdivSurfaces"));
	$gObjTypeFiltersLocalized[4] = (uiRes("m_createObjectTypeFilters.kParticles"));
	$gObjTypeFiltersLocalized[5] = (uiRes("m_createObjectTypeFilters.kParticlesInstancers"));
	$gObjTypeFiltersLocalized[6] = (uiRes("m_createObjectTypeFilters.kFluids"));
	$gObjTypeFiltersLocalized[7] = (uiRes("m_createObjectTypeFilters.kStrokes"));
	$gObjTypeFiltersLocalized[8] = (uiRes("m_createObjectTypeFilters.kImagePlanes"));

	// manully setting UI localized string
	// names for UI type filter, it 
	$gUIFiltersLocalized = (uiRes("m_createObjectTypeFilters.kUIs"));

	// manully setting sub-UI localized string
	// names for UI sub-object type filter
	$gUIObjTypeFiltersLocalized[0] = (uiRes("m_createObjectTypeFilters.kLights"));
	$gUIObjTypeFiltersLocalized[1] = (uiRes("m_createObjectTypeFilters.kCameras"));
	$gUIObjTypeFiltersLocalized[2] = (uiRes("m_createObjectTypeFilters.kLocators"));
	$gUIObjTypeFiltersLocalized[3] = (uiRes("m_createObjectTypeFilters.kJoints"));
	$gUIObjTypeFiltersLocalized[4] = (uiRes("m_createObjectTypeFilters.kIkHandles"));
	$gUIObjTypeFiltersLocalized[5] = (uiRes("m_createObjectTypeFilters.kDeformers"));
	$gUIObjTypeFiltersLocalized[6] = (uiRes("m_createObjectTypeFilters.kMotionTrails"));
	$gUIObjTypeFiltersLocalized[7] = (uiRes("m_createObjectTypeFilters.kComponents"));
	$gUIObjTypeFiltersLocalized[8] = (uiRes("m_createObjectTypeFilters.kHairSystems"));
	$gUIObjTypeFiltersLocalized[9] = (uiRes("m_createObjectTypeFilters.kFollicles"));
	$gUIObjTypeFiltersLocalized[10] = (uiRes("m_createObjectTypeFilters.kMiscUI"));
	$gUIObjTypeFiltersLocalized[11] = (uiRes("m_createObjectTypeFilters.kOrnaments"));

	string $objTypeFilters [] = $gObjTypeFiltersLocalized;
	$objTypeFilters[size($gObjTypeFiltersLocalized)] = $gUIFiltersLocalized;
	$gTotalObjTypeFiltersLocalized = linkedStringArray( $objTypeFilters, $gUIObjTypeFiltersLocalized );

	
}


// Description:
// This is the object type filter value array preset 1.
// Length of this array must match the length of Object Type Filter Name array.
global int $gObjTypeFilterValuePreset1[] =
{
	// for objTypefilters
	0,  // "NURBS Curves"
	1,  // "NURBS Surfaces"
	1,  // "Polygons"	
	1,  // "Subdiv Surfaces"
	1,  // "Particles"	
	1,  // "Particles Instancers"	
	1,  // "Fluids"	
	1,  // "Strokes"
	1,  // "Image Planes"

	// for UI filter
	0,	 // "UI:"

	// for UI sub-objTypefilters
	0,   // "Lights"	
	0,	 // "Cameras"
	0,	 // "Locators"	
	0,   // "Joints"
	0,   // "IK Handles"	
	0,   // "Deformers"	
	0,   // "Motion Trails"	
	0,   // "Components"
	0,	 // "Hair Systems"
	0,	 // "Follicles"
	0,   // "Misc. UI"
	0    // "Ornaments"
};

global int $gObjTypeFilterValuePresetAll[] =
{
	// for objTypefilters
	1,  // "NURBS Curves"
	1,  // "NURBS Surfaces"
	1,  // "Polygons"	
	1,  // "Subdiv Surfaces"
	1,  // "Particles"
	1,  // "Particles Instancers"		
	1,  // "Fluids"	
	1,  // "Strokes"
	1,  // "Image Planes"

	// for UI filter
	1,	 // "UI:"

	// for UI sub-objTypefilters
	1,   // "Lights"	
	1,	 // "Cameras"
	1,	 // "Locators"	
	1,   // "Joints"
	1,   // "IK Handles"	
	1,   // "Deformers"	
	1,   // "Motion Trails"	
	1,   // "Components"
	1,	 // "Hair Systems"
	1,	 // "Follicles"
	1,   // "Misc. UI"
	1    // "Ornaments"
};

global int $gObjTypeFilterValuePresetNone[] =
{
	// for objTypefilters
	0,  // "NURBS Curves"
	0,  // "NURBS Surfaces"
	0,  // "Polygons"	
	0,  // "Subdiv Surfaces"
	0,  // "Particles"
	0,  // "Particles Instancers"		
	0,  // "Fluids"	
	0,  // "Strokes"
	0,  // "Image Planes"

	// for UI filter
	0,	 // "UI:"

	// for UI sub-objTypefilters
	0,   // "Lights"	
	0,	 // "Cameras"
	0,	 // "Locators"	
	0,   // "Joints"
	0,   // "IK Handles"	
	0,   // "Deformers"	
	0,   // "Motion Trails"	
	0,   // "Components"
	0,	 // "Hair Systems"
	0,	 // "Follicles"
	0,   // "Misc. UI"
	0    // "Ornaments"
};



// Description:
// This array store all the check box paths in attribute editor
global string $gEditorCheckBoxPaths[];


// Description:
// This array store all the check box paths in batch render tab
global string $gTabCheckBoxPaths[];

// Description:
// This array stores the direct parent control of the plugin check boxes.
global string $gPluginObjectTypeFilterParents[];


// Description:
// This is the function to get obj type preset value array by preset id and value array id
proc int[] getPresetValueArray(int $presetId)
{
	// declare global parameters
	global int $gObjTypeFilterValuePreset1[];
	global int $gObjTypeFilterValuePresetAll[];
	global int $gObjTypeFilterValuePresetNone[];

	switch($presetId)
	{
		case 0:
			return $gObjTypeFilterValuePreset1;
		case 1:
			return $gObjTypeFilterValuePresetAll;
		case 2:
			return $gObjTypeFilterValuePresetNone;
		default:
			error (uiRes("m_createObjectTypeFilters.kNoPresetIdWarning"));
			return $gObjTypeFilterValuePreset1;
	}
}


// Despcription:
// This is for resetting attribute array by mel arrays
global proc resetObjectTypeFilterArrays(int $valueArray[], string $nameArray[])
{
	int $arraySize = size($valueArray);
	if($arraySize != size($nameArray))
	{
		error (uiRes("m_createObjectTypeFilters.kSizeError"));
	}

	// create cmd to set name&value array
	int		$i;
	string	$cmdForName 	= "setAttr hardwareRenderingGlobals.objectTypeFilterNameArray -type stringArray " + $arraySize;
	string	$cmdForValue	= "setAttr hardwareRenderingGlobals.objectTypeFilterValueArray -type Int32Array " + $arraySize;

	for($i = 0; $i < $arraySize; $i++)
	{
		// copy obj type filter name source
		string	$name	=	$nameArray[$i];
		$cmdForName		+=	" ";
		$cmdForName		+=	"\"";
		$cmdForName		+=	$name;
		$cmdForName		+=	"\"";

		// copy preset value
		int	$value		=	$valueArray[$i];
		$cmdForValue	+=	" ";
		$cmdForValue	+=	$value;
	}

	$cmdForName		+= ";";
	$cmdForValue	+= ";";

	eval($cmdForName);
	eval($cmdForValue);
}


// Description:
// Entry function.
// This is the function to setup obj type filters.
global proc createObjectTypeFilters(int $presetId)
{
	// declare global parameters
	global string $gTotalObjTypeFilters[];

	// do localization
	setupLocalizedNameArray();

	// check inited or not
	string $nameArray[] = `getAttr hardwareRenderingGlobals.objectTypeFilterNameArray`;
	int    $valueArray[]= `getAttr hardwareRenderingGlobals.objectTypeFilterValueArray`;
	if (size($nameArray) == size($valueArray))
	{
		string $newNameArray[]  = $gTotalObjTypeFilters;
		int    $newValueArray[] = getPresetValueArray($presetId);

		// Map old name-value pairs
		for ($i = 0; $i < size($nameArray); $i++)
		{
			int $pos = stringArrayFind($nameArray[$i], 0, $newNameArray);
			if ($pos >= 0 && $pos < size($newNameArray))
			{
				// name match, copy the value
				$newValueArray[$pos] = $valueArray[$i];
			}
		}
			
		// Set the global node with new name/value array
		resetObjectTypeFilterArrays($newValueArray, $newNameArray);
	}
	else
	{
		// Bad data, reset all filter states
		resetObjectTypeFilterArrays(getPresetValueArray($presetId), $gTotalObjTypeFilters);
	}
}


// Description:
// This is to create check boxes for all the filters
// Return the check box path names list
global proc string[] createObjTypeFilterCheckBoxes(string $valueArrayName, string $nameArrayName)
{
	global	string	$gUIFiltersLocalized;
	global 	string 	$gObjTypeFiltersLocalized	[];
	global  string  $gUIObjTypeFiltersLocalized [];
	global  string  $gTotalObjTypeFiltersLocalized[];
			string 	$pathNames					[];

	int 	$valueArray[]	= `getAttr $valueArrayName`;

	// $i counts the Maya filter ordering
	int $i;

	rowLayout -numberOfColumns 3
				-rowAttach 1 "top" 0
				-rowAttach 2 "top" 0
				-rowAttach 3 "top" 0
				-columnWidth3 70 120 120;

		// 1st column: "UI:"
		$i = size($gObjTypeFiltersLocalized);
		columnLayout -adj 1 -rowSpacing 3;
			$pathNames[$i] = `checkBox
								-label $gTotalObjTypeFiltersLocalized[$i] 
								-value $valueArray[$i] 
								-onCommand ("OnUICallback " + $i) 
								-offCommand ("OffUICallback " + $i)`;
		setParent ..;

		// 2nd column: UI filters
		columnLayout -adj 1 -rowSpacing 3;
			int $uiState = $valueArray[$i];
			for ($i = size($gObjTypeFiltersLocalized) + 1; $i < size($gTotalObjTypeFiltersLocalized); $i++) {
				$pathNames[$i] = `checkBox
									-en $uiState 
									-label $gTotalObjTypeFiltersLocalized[$i] 
									-value $valueArray[$i] 
									-onCommand ("objectTypeFilterOnCallback " + $i) 
									-offCommand ("objectTypeFilterOffCallback " + $i)`;
			}
		setParent ..;

		// 3rd column: Standard object type filters
		columnLayout -adj 1 -rowSpacing 3;
			for ($i = 0; $i < size($gObjTypeFiltersLocalized); $i++) {
				$pathNames[$i] = `checkBox
									-label $gTotalObjTypeFiltersLocalized[$i] 
									-value $valueArray[$i] 
									-onCommand ("objectTypeFilterOnCallback " + $i) 
									-offCommand ("objectTypeFilterOffCallback " + $i)`;
			}
			
			// Create UI for plugin filters. The plugin filters are sorted by names.
			global string $gPluginObjectTypeFilterParents[];
			$gPluginObjectTypeFilterParents[size($gPluginObjectTypeFilterParents)] = `setParent -q`;

			string $pluginFilters[] = sort(`pluginDisplayFilter -q -listFilters`);

			string $filter;
			for ($filter in $pluginFilters) {
				string $label = `pluginDisplayFilter -q -label $filter`;
				checkBox
					-label $label
					-changeCommand ("pluginObjectTypeFilterCallback " + $filter + " #1")
					("pluginObjectTypeFilter_" + $filter);
			}
			pluginObjectTypeFilterSetup;

		setParent ..;
	setParent ..;

	rowLayout -numberOfColumns 2
				-columnAttach2 "right" "left"
				-columnWidth 1 200;
		button -width 70 -label (uiRes("m_createObjectTypeFilters.kAll")) -command "objectTypeFilterAllCallback";
		button -width 70 -label (uiRes("m_createObjectTypeFilters.kNone")) -command "objectTypeFilterNoneCallback";
	setParent ..;

	return $pathNames;
}


// Description:
// update single item in the attribute array
proc setObjTypeFilterValueArrayItem(int $id, int $value)
{
	int		$valueArray	[] 	= `getAttr "hardwareRenderingGlobals.objectTypeFilterValueArray"`;
	string	$nameArray	[]	= `getAttr "hardwareRenderingGlobals.objectTypeFilterNameArray"`;

	// name array needn't any change
	$valueArray[$id]	= $value;

	resetObjectTypeFilterArrays($valueArray, $nameArray);
}


// Description:
// Update all the obu type filter values to the related check box
proc updateObjTypeFilterValueToCheckBox()
{
	// declare global parameters
	global string $gEditorCheckBoxPaths	[];
	global string $gTabCheckBoxPaths	[];

	// get value array
	int	$valueArray	[]	= `getAttr "hardwareRenderingGlobals.objectTypeFilterValueArray"`;
	int	$valueArraySize	= size($valueArray);

	// safety check
	int	$editorCBArraySize	= size($gEditorCheckBoxPaths);
	int	$tabCBArraySize		= size($gTabCheckBoxPaths);
	if( ($editorCBArraySize == 0) && ($tabCBArraySize == 0) )
	{
		return;
	}
	if ( (($editorCBArraySize > 0) && ($editorCBArraySize != $valueArraySize))||
		 (($tabCBArraySize > 0) && ($tabCBArraySize != $valueArraySize)))
	{
		error (uiRes("m_createObjectTypeFilters.kErrorMessage"));
	}

	// Update the check box value for those in panel menu
	for( $j = 0; $j < $editorCBArraySize; $j++ )
	{
		if ( `checkBox -exists $gEditorCheckBoxPaths[$j]` )
		{
			checkBox -edit -value ($valueArray[$j] != 0) $gEditorCheckBoxPaths[$j];
		}
	}

	// Update check box value for thoses in render setting tab
	for( $j = 0; $j < $tabCBArraySize; $j++ )
	{
		if ( `checkBox -exists $gTabCheckBoxPaths[$j]` )
		{
			checkBox -edit -value ($valueArray[$j] != 0) $gTabCheckBoxPaths[$j];
		}
	}

}

// Description:
// Update all the obj type filter states to the related check box
proc updateObjTypeFilterStateToCheckBox()
{
	// declare global parameters
	global string $gEditorCheckBoxPaths	[];
	global string $gTabCheckBoxPaths	[];
	global 	string 	$gObjTypeFiltersLocalized	[];

	// get value array
	int	$valueArray	[]	= `getAttr "hardwareRenderingGlobals.objectTypeFilterValueArray"`;
	int	$valueArraySize	= size($valueArray);

	// safety check
	int	$editorCBArraySize	= size($gEditorCheckBoxPaths);
	int	$tabCBArraySize		= size($gTabCheckBoxPaths);
	if( ($editorCBArraySize == 0) && ($tabCBArraySize == 0) )
	{
		return;
	}
	if ( (($editorCBArraySize > 0) && ($editorCBArraySize != $valueArraySize))||
		 (($tabCBArraySize > 0) && ($tabCBArraySize != $valueArraySize)))
	{
		error (uiRes("m_createObjectTypeFilters.kArraySizeErrorMessage"));
	}

	int $indexUI = size($gObjTypeFiltersLocalized);
	int $state = $valueArray [$indexUI];

	// Update the check box state for those in panel menu
	for( $j = $indexUI + 1; $j < $editorCBArraySize; $j++ )
	{
		if ( `checkBox -exists $gEditorCheckBoxPaths[$j]` )
		{
			checkBox -edit -en $state $gEditorCheckBoxPaths[$j];
		}
	}

	// Update check box state for thoses in render setting tab
	for( $j = $indexUI + 1; $j < $tabCBArraySize; $j++ )
	{
		if ( `checkBox -exists $gTabCheckBoxPaths[$j]` )
		{
			checkBox -edit -en $state $gTabCheckBoxPaths[$j];
		}
	}
}


// Description:
// Callback for changing object type filter value set on
global proc objectTypeFilterOnCallback(int $id)
{
	setObjTypeFilterValueArrayItem($id, 1);
	updateObjTypeFilterValueToCheckBox();
}

// Description:
// Callback for changing object type filter value set off
global proc objectTypeFilterOffCallback(int $id)
{
	setObjTypeFilterValueArrayItem($id, 0);
	updateObjTypeFilterValueToCheckBox();
}

// Description:
// Set up the UI for plugin object type filter check boxes (Data -> UI)
global proc pluginObjectTypeFilterSetup()
{
	// Synchronize all check boxes (AE, batch render tab)
	global string $gPluginObjectTypeFilterParents[];
	string $pluginFilters[]    = `pluginDisplayFilter -q -listFilters`;
	string $pluginNameArray[]  = `getAttr hardwareRenderingGlobals.pluginObjectTypeFilterNameArray`;
	int    $pluginValueArray[] = `getAttr hardwareRenderingGlobals.pluginObjectTypeFilterValueArray`;

	string $layout, $filter;
	for ($layout in $gPluginObjectTypeFilterParents) {
		for ($filter in $pluginFilters) {
			string $checkBox = $layout + "|pluginObjectTypeFilter_" + $filter;

			if (`checkBox -exists $checkBox`) {
				// Determine the check box value
    			int $value = 1;
				int $index = stringArrayFind($filter, 0, $pluginNameArray);
				if ($index >= 0 && $index < size($pluginValueArray)) {
					$value = $pluginValueArray[$index];
				}

				// Set up check box state
				checkBox -e -value $value $checkBox;
			}
		}
	}
}

// Description:
// Callback for plugin object type filter check boxes (UI -> Data)
global proc pluginObjectTypeFilterCallback(string $pluginFilter, int $value)
{
    string $pluginFilters[]    = sort(`pluginDisplayFilter -q -listFilters`);
	string $pluginNameArray[]  = `getAttr hardwareRenderingGlobals.pluginObjectTypeFilterNameArray`;
	int    $pluginValueArray[] = `getAttr hardwareRenderingGlobals.pluginObjectTypeFilterValueArray`;

	// Check array size mismatch
	if (size($pluginNameArray) != size($pluginValueArray)) {
		$pluginNameArray  = {};
		$pluginValueArray = {};
	}

	// Remove unused filters
	for ($i = size($pluginNameArray)-1; $i >= 0; $i--) {
		if (stringArrayFind($pluginNameArray[$i], 0, $pluginFilters) == -1) {
			stringArrayRemoveAtIndex($i, $pluginNameArray);
			intArrayRemoveAtIndex($i, $pluginValueArray);
		}
	}

	// Add new filters
	string $filter;
	for ($filter in $pluginFilters) {
		if (stringArrayFind($filter, 0, $pluginNameArray) == -1) {
			$pluginNameArray[size($pluginNameArray)]   = $filter;
			$pluginValueArray[size($pluginValueArray)] = 1;
		}
	}

	// Set filter state on/off
	int $index = stringArrayFind($pluginFilter, 0, $pluginNameArray);
	if ($index >= 0) {
		$pluginValueArray[$index] = $value;
	}

	// Save to node
	string $setPluginNameCmd  = "setAttr hardwareRenderingGlobals.pluginObjectTypeFilterNameArray -type stringArray ";
	string $setPluginValueCmd = "setAttr hardwareRenderingGlobals.pluginObjectTypeFilterValueArray -type Int32Array ";
	$setPluginNameCmd  += size($pluginNameArray);
	$setPluginValueCmd += size($pluginValueArray);
	for ($i = 0; $i < size($pluginNameArray); $i++) {
		$setPluginNameCmd  += (" \"" + encodeString($pluginNameArray[$i]) + "\"");
		$setPluginValueCmd += (" " + $pluginValueArray[$i]);
	}
	eval($setPluginNameCmd);
	eval($setPluginValueCmd);

	// Synchronize UI (for other AE/batch render tab)
	pluginObjectTypeFilterSetup;
}

// Description:
// reset the state of UI sub-object filter
global proc resetSubUIState( int $start, int $state )
{
	// declare global parameters
	global string $gEditorCheckBoxPaths	[];
	global string $gTabCheckBoxPaths	[];

	// get value array
	int	$valueArray	[]	= `getAttr "hardwareRenderingGlobals.objectTypeFilterValueArray"`;
	int	$valueArraySize	= size($valueArray);

	// safety check
	int	$editorCBArraySize	= size($gEditorCheckBoxPaths);
	int	$tabCBArraySize		= size($gTabCheckBoxPaths);
	if( ($editorCBArraySize == 0) && ($tabCBArraySize == 0) )
	{
		return;
	}
	if ( (($editorCBArraySize > 0) && ($editorCBArraySize != $valueArraySize))||
		 (($tabCBArraySize > 0) && ($tabCBArraySize != $valueArraySize)))
	{
		error (uiRes("m_createObjectTypeFilters.kArraySizeNotMatchErrorMessage"));
	}

	// Update the check box state for those in panel menu
	for( $j = $start + 1; $j < $editorCBArraySize; $j++ )
	{
		if ( `checkBox -exists $gEditorCheckBoxPaths[$j]` )
		{
			checkBox -edit -en $state $gEditorCheckBoxPaths[$j];
		}
	}

	// Update check box state for thoses in render setting tab
	for( $j = $start + 1; $j < $tabCBArraySize; $j++ )
	{
		if ( `checkBox -exists $gTabCheckBoxPaths[$j]` )
		{
			checkBox -edit -en $state $gTabCheckBoxPaths[$j];
		}
	}

}

// Description:
// callback for UI checkbox is on
global proc OnUICallback(int $id)
{
	resetSubUIState( $id, 1 );
	setObjTypeFilterValueArrayItem($id, 1);
	updateObjTypeFilterValueToCheckBox();
}

// Description:
// callback for UI checkbox is off
global proc OffUICallback(int $id)
{
	resetSubUIState( $id, 0 );
	setObjTypeFilterValueArrayItem($id, 0);
	updateObjTypeFilterValueToCheckBox();
}

// Description:
//		Callback for All button
global proc objectTypeFilterAllCallback()
{
	global string $gTotalObjTypeFilters[];
	global string $gObjTypeFiltersLocalized[];

	// Reset values to their default (All)
	resetObjectTypeFilterArrays(getPresetValueArray(1), $gTotalObjTypeFilters);

	// Update UI
	resetSubUIState( size($gObjTypeFiltersLocalized), 1 );
	updateObjTypeFilterValueToCheckBox();

	string $pluginNameArray[] = `pluginDisplayFilter -q -listFilters`;
	for ($i = 0; $i < size($pluginNameArray); $i++) {
		pluginObjectTypeFilterCallback($pluginNameArray[$i], 1);
	}
	pluginObjectTypeFilterSetup;
}

// Description:
//		Callback for None button
global proc objectTypeFilterNoneCallback()
{
	global string $gTotalObjTypeFilters[];
	global string $gObjTypeFiltersLocalized[];

	// Reset values to their default (None)
	resetObjectTypeFilterArrays(getPresetValueArray(2), $gTotalObjTypeFilters);

	// Update UI
	resetSubUIState( size($gObjTypeFiltersLocalized), 0 );
	updateObjTypeFilterValueToCheckBox();

	string $pluginNameArray[] = `pluginDisplayFilter -q -listFilters`;
	for ($i = 0; $i < size($pluginNameArray); $i++) {
		pluginObjectTypeFilterCallback($pluginNameArray[$i], 0);
	}
	pluginObjectTypeFilterSetup;
}

// Description:
// return a linked string array
global proc string[] linkedStringArray(string $stringArray1[], string $stringArray2[])
{
	string $linkedStringArray [];
	int $i;
	int $j;
	for( $i = 0, $j = 0; $j < size( $stringArray1 ); $i++, $j++ )
	{
		$linkedStringArray[$i] = $stringArray1[$j];
	}
	for(  $j = 0; $j < size( $stringArray2 ); $i++, $j++ )
	{
		$linkedStringArray[$i] = $stringArray2[$j];
	}
	return $linkedStringArray;
}

// Description:
// Update all checkBox states and values
global proc updateObjTypeFilterToCheckBox()
{
	// Values must be flushed first because states are flushed according to the values
	updateObjTypeFilterValueToCheckBox();
	updateObjTypeFilterStateToCheckBox();
}

// Description:
// reset all to default 
global proc resetObjFilterToDefault()
{
	global 	string 	$gObjTypeFiltersLocalized	[];

	// size($gObjTypeFiltersLocalized) should be the index of UI checkbox
	resetSubUIState( size($gObjTypeFiltersLocalized), 1 );
	updateObjTypeFilterValueToCheckBox();
}
