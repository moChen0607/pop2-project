// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  2003
//
// Description: Create hair constraint for selected hairs 
//	

global proc createHairConstraint(int $mode)
{
	string $hsys[];
	int $ind[] = selectedHairSystemIndices( $hsys );
	int $numInd = size($ind);
	if( $numInd == 0 ){
		warning( (uiRes("m_createHairConstraint.kNoHairCurvesSelected")));
		return;
	} 
	int $numPinInputs = `getAttr -size ($hsys[0] + ".inputHairPin" )`;
	float $bb[];
	int $positionAtMidpoint = true;
	if( $positionAtMidpoint ){
		string $htform[] = `listTransforms $hsys[0]`;
		if( size($htform) > 0 ){
			select -d $htform[0];
		}
		$bb= `exactWorldBoundingBox`;
	}
	string $hpin = `createNode hairConstraint`;
	if( $positionAtMidpoint ){
		move (($bb[0] + $bb[3])*0.5) 
			 (($bb[1] + $bb[4])*0.5) 
			 (($bb[2] + $bb[5])*0.5) $hpin;
	}
	setAttr ($hpin + ".constraintMethod") ($mode+1);
	int $ci;
	for( $ci = 0; $ci < $numInd; $ci++ ){
		setAttr ($hpin + ".curveIndices[" + $ci + "]") ($ind[ $ci ]);
	}
	int $pinInd;
	for( $pinInd = 0; $pinInd <= $numPinInputs; $pinInd++ ){
		string $input = ($hsys[0] + ".inputHairPin[" + $pinInd +"]");
		if( $pinInd < $numPinInputs ){
			string $con = `connectionInfo -sfd $input`;
			if( size( $con ) > 0 ){
				// already connected, keep looking
				continue;
			}
		}
		connectAttr ($hpin + ".outPin[0]") $input;
		break;
	}

}
