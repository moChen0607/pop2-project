// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  18 April 1997
//
//  Description:
//      directionalLight default options box.  The content for each tab 
//		is not created until it is accessed for the first time.
//
//////////////////////////////////////////////////////////////////////
//
//  Procedure Name:
//      setOptionVars
//
//  Description:
//		Initialize the option values.
//
//  Input Arguments:
//		Whether to set the options to default values.
//
//  Return Value:
//      None.
//
proc setOptionVars(int $forceFactorySettings)
{
	//	Intensity.
	//
	if ($forceFactorySettings || !`optionVar -exists directionalLightIntensity`) {
		optionVar -floatValue directionalLightIntensity 1;
	}

	//	Color.
	//
	if ($forceFactorySettings || !`optionVar -exists directionalLightColor`) {
		optionVar -floatValue directionalLightColor 1
			-floatValueAppend directionalLightColor 1
			-floatValueAppend directionalLightColor 1;
	}

	//	Exclusive.
	//
// 	if ($forceFactorySettings || !`optionVar -exists directionalLightExclusive`) {
// 		optionVar -intValue directionalLightExclusive false;
// 	}

	//	Shadows.
	//
	if ($forceFactorySettings || !`optionVar -exists directionalLightShadows`) {
		optionVar -intValue directionalLightShadows false;
	}

	//	Shadow Color.
	//
	if ($forceFactorySettings || !`optionVar -exists directionalLightShadowColor`) {
		optionVar -floatValue directionalLightShadowColor 0
			-floatValueAppend directionalLightShadowColor 0
			-floatValueAppend directionalLightShadowColor 0;
	}

	//	Interactive Placement.
	//
	if ($forceFactorySettings || !`optionVar -exists directionalLightInteractivePlacement`) {
		optionVar -intValue directionalLightInteractivePlacement 0;
	}
}

//
//  Procedure Name:
//      directionalLightSetup
//
//  Description:
//		Update the state of the option box UI to reflect the option values.
//
//  Input Arguments:
//      parent               - Top level parent layout of the option box UI.
//                             Required so that UI object names can be 
//                             successfully resolved.
//
//		forceFactorySettings - Whether the option values should be set to
//                             default values.
//
//  Return Value:
//      None.
//
global proc directionalLightSetup(string $parent, int $forceFactorySettings)
{
	//	Retrieve the option settings
	//
	setOptionVars($forceFactorySettings);

	setParent $parent;

	//	Query the optionVar's and set the values into the controls.

	//	Intensity.
	//
	if (`floatSliderGrp -exists directionalLightIntensity`) {
		floatSliderGrp -edit 
			-value `optionVar -query directionalLightIntensity`
			directionalLightIntensity;
	}

	//	Color.
	//
	if (`colorSliderGrp -exists directionalLightColor`) {
		float $rgb[3] = `optionVar -query directionalLightColor`;
		colorSliderGrp -edit 
			-rgb $rgb[0] $rgb[1] $rgb[2]
			directionalLightColor;
	}

// 	//	Exclusive.
// 	//
// 	if (`checkBoxGrp -exists directionalLightExclusive`) {
// 		checkBoxGrp -edit 
// 			-value1 `optionVar -query directionalLightExclusive`
// 			directionalLightExclusive;
// 	}
	
	//	Shadows.
	//
	if (`checkBoxGrp -exists directionalLightShadows`) {
		checkBoxGrp -edit
			-value1 `optionVar -query directionalLightShadows` 
			directionalLightShadows;
	}

	//	Shadow Color.
	//
	if (`colorSliderGrp -exists directionalLightShadowColor`) {
		float $shadow[3] = `optionVar -query directionalLightShadowColor`;
		colorSliderGrp -edit 
			-rgb $shadow[0] $shadow[1] $shadow[2]
			directionalLightShadowColor;
	}

	//	Interactive Placement.
	//
	if (`checkBoxGrp -exists directionalLightInteractivePlacement`) {
		checkBoxGrp -edit
			-value1 `optionVar -query directionalLightInteractivePlacement` 
			directionalLightInteractivePlacement;
	}
}

//
//  Procedure Name:
//      directionalLightCallback
//
//  Description:
//		Update the option values with the current state of the option box UI.
//
//  Input Arguments:
//      parent - Top level parent layout of the option box UI.  Required so
//               that UI object names can be successfully resolved.
//
//		doIt   - Whether the command should execute.
//
//  Return Value:
//      None.
//
global proc directionalLightCallback(string $parent, int $doIt)
{
    setParent $parent;
	float $rgb[3];
	
	//	Set the optionVar's from the control values, and then
	//	perform the command.

	//	Intensity.
	//
	if (`floatSliderGrp -exists directionalLightIntensity`) {
		optionVar -floatValue directionalLightIntensity		
			`floatSliderGrp -query -value directionalLightIntensity`;
	}

	//	Color.
	//
	if (`colorSliderGrp -exists directionalLightColor`) {
		$rgb = `colorSliderGrp -query -rgb directionalLightColor`;
		optionVar -floatValue directionalLightColor $rgb[0];
		optionVar -floatValueAppend directionalLightColor $rgb[1];
		optionVar -floatValueAppend directionalLightColor $rgb[2];
	}

// 	//	Exclusive.
// 	//
// 	if (`checkBoxGrp -exists directionalLightExclusive`) {
// 		optionVar -intValue directionalLightExclusive 
// 			`checkBoxGrp -query -value1 directionalLightExclusive`;
// 	}

	//	Shadow.
	//
	if (`checkBoxGrp -exists directionalLightShadows`) {
		optionVar -intValue directionalLightShadows
			`checkBoxGrp -query -value1 directionalLightShadows`;
	}

	//	Shadow Color.
	//
	if (`colorSliderGrp -exists directionalLightShadowColor`) {
		$rgb = `colorSliderGrp -query -rgb directionalLightShadowColor`;
		optionVar -floatValue directionalLightShadowColor $rgb[0];
		optionVar -floatValueAppend directionalLightShadowColor $rgb[1];
		optionVar -floatValueAppend directionalLightShadowColor $rgb[2];
	}

	//	Interactive Placement.
	//
	if (`checkBoxGrp -exists directionalLightInteractivePlacement`) {
		optionVar -intValue directionalLightInteractivePlacement
			`checkBoxGrp -query -value1 directionalLightInteractivePlacement`;
	}

	if ($doIt) {
		performDirectionalLight 0; 
		addToRecentCommandQueue "performDirectionalLight 0" "DirectionalLight";
	}
}

//
//  Procedure Name:
//      createDirectionalLightTabUI
//
//  Description:
//		Create the tab UI.  The contents of each tab are created only 
//		when it is required, ie. if the tab is initially visible or 
//		if the tab is selected by the user.
//
//  Input Arguments:
//      The name of the tab layout.
//
//  Return Value:
//      None.
//
global proc createDirectionalLightTabUI(string $tabLayout)
{
	string $tab[] = `tabLayout -query -childArray $tabLayout`;
	int $currentTabIndex = `tabLayout -query -selectTabIndex $tabLayout`;

	//	Determine if the UI for this tab has been created yet.
	//	This is accomplished by querying the number of children
	//	in the current tab.  If the tab has no children then the UI
	//	must be created.
	//
	if (0 == `columnLayout -query -numberOfChildren $tab[$currentTabIndex-1]`) {

		setParent $tab[$currentTabIndex-1];

		string $label;
		int $index;

		//	Activate the default UI template so that the layout of this 
		//	option box is consistent with the layout of the rest of the 
		//	application.
		//
		setUITemplate -pushTemplate DefaultTemplate;

		//	Turn on the wait cursor.
		//
		waitCursor -state 1;

		//	The current tab has no children.  Determine which tab is
		//	active and create its UI.
		//
		//	RECOMMENDATION:  Use the 'Grp' commands where possible because
		//	they obey the formatting specified in the default template.
		//	This will result in a more consistent look throughout the
		//	application.
		//	
		if (1 == $currentTabIndex) {
			
    		//	Create UI for the first tab.
    		//
    		floatSliderGrp -label (uiRes("m_performDirectionalLight.kIntensity"))  -fieldMaxValue 100
    			directionalLightIntensity;
	    
    		colorSliderGrp -label (uiRes("m_performDirectionalLight.kColor")) 
    			directionalLightColor;
	    		
// 	    		checkBoxGrp -ncb 1 -label1 "Exclusive" 
// 	    			directionalLightExclusive;
	    
			separator;

   			//	Create UI for the third tab.
   			//
   			checkBoxGrp -ncb 1 -label1 (uiRes("m_performDirectionalLight.kCastShadows")) 
				directionalLightShadows;
    
			colorSliderGrp -label (uiRes("m_performDirectionalLight.kShadowColor")) 
				directionalLightShadowColor;

			separator;

			//	Create UI for the fourth tab.
   			//
  			checkBoxGrp -ncb 1 -label1 (uiRes("m_performDirectionalLight.kInteractivePlacement")) 
				directionalLightInteractivePlacement;

			setParent ..;
	    		
		}

		//	Update the control values to match the options.
		//
		eval (("directionalLightSetup " + $tabLayout + " " + 0));	
	
		//	Turn off the wait cursor.
		//
		waitCursor -state 0;
		
		//	Deactivate the default UI template.
		//
		setUITemplate -popTemplate;
	}
}

//
//  Procedure Name:
//      directionalLightOptions
//
//  Description:
//		Construct the option box UI.  Involves accessing the standard option
//		box and customizing the UI accordingly.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
// ********* Change 'directionalLight' in this proc to be the name of your command
proc directionalLightOptions()
{
	//	Name of the command for this option box.
	//
	string $commandName = "directionalLight";

	//	Build the option box actions.
	//
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	//	STEP 1:  Get the option box.
	//	============================
	//
	//  The value returned is the name of the layout to be used as
	//	the parent for the option box UI.
	//
	string $layout = getOptionBox();
	setParent $layout;
	
	//	STEP 2:  Pass the command name to the option box.
	//	=================================================
	//
	//	Any default option box behaviour based on the command name is set 
	//	up with this call.  For example, updating the 'Help' menu item with
	//	the name of the command.
	//
	setOptionBoxCommandName($commandName);

	//	STEP 3:  Activate the default UI template.
	//	==========================================
	//
	//	Activate the default UI template so that the layout of this 
	//	option box is consistent with the layout of the rest of the 
	//	application.
	//
	//	Note: this option box example delays the creation of the UI
	//	until it's required.  Therefore this step is moved to the
	//	procedure where the UI is actually created. 
	//
	//setUITemplate -pushTemplate DefaultTemplate;

	//	STEP 4: Create option box contents.
	//	===================================
	//	
	//	This, of course, will vary from option box to option box.	
	
	//	Demonstrate the delaying of UI creation via tab layouts.
	//	Instead of creating all of the option box UI initially, only
	//	create that which is initially visible.  Wait, until the 
	//	other tabs are selected to create the remaining UI.
	//
	string $tabLayout = `tabLayout -scrollable 1`;

	//	Attach an action that will be invoked before a tab is selected.
	//	
	tabLayout -edit 
		-tabsVisible false
		-preSelectCommand ("createDirectionalLightTabUI " + $tabLayout)
		$tabLayout;

	//	Create just the immediate children of the tab layout so that
	//	the tabs appear.
	//
	columnLayout -adj true;
		setParent ..;
	
	//	Set the tab labels.
	//
	tabLayout -edit
		$tabLayout;

	//	Create the UI for the tab that is initially visible.
	//
	createDirectionalLightTabUI($tabLayout);

	//	Step 5: Deactivate the default UI template.
	//  ===========================================
	//
	//	Note: this option box example delays the creation of the UI
	//	until it's required.  Therefore this step is moved to the
	//	procedure where the UI is actually created.
	//
	//	See also Step 2. 
	//
	//setUITemplate -popTemplate;

	//	Step 6: Customize the buttons.  
	//	==============================
	//
	//	Provide more descriptive labels for the buttons.  This is not 
	//	necessary, but in some cases, for example, a button labelled 
	//	'Create' may be more meaningful to the user than one labelled
	//	'Apply'.
	//
	//  Disable those buttons that are not applicable to the option box.
	//
	//	Attach actions to those buttons that are applicable to the option
	//	box.  Note that the 'Close' button has a default action attached 
	//	to it that will hide the window.  If a a custom action is
	//	attached to the 'Close' button then be sure to call the 'hide the
	//	option box' procedure within the custom action so that the option
	//	box is hidden properly.

	//	'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-label (uiRes("m_performDirectionalLight.kCreate")) 
		-command ($callback + " " + $tabLayout + " " + 1)
		$applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $tabLayout + " " + 0 + "; hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $tabLayout + " " + 1)
		$resetBtn;

	//	Step 7: Set the option box title.
	//	=================================
	//
	setOptionBoxTitle (uiRes("m_performDirectionalLight.kCreateDirectionalLightOptions"));

	//	Step 8: Customize the 'Help' menu item text.
	//	============================================
	//
	setOptionBoxHelpTag( "DirectionalLight" );

	//	Step 9: Set the current values of the option box.
	//	=================================================
	//
	//	NOTE:  Can not do this here since we do not know what UI is
	//	currently visible.  This is moved to where the UI is created.
	//
	//eval (($setup + " " + $tabLayout + " " + 0));	
	
	//	Step 10: Show the option box.
	//	=============================
	//
	showOptionBox();
}

//
//  Procedure Name:
//      optionBoxExample1Help
//
//  Description:
//		Return a short description about this command.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      string.
//
proc string directionalLightHelp()
{
	return 
	"  Command: directionalLight - creates a directionalLight\n" +
	"Selection: None.";	
}

proc string getCmd()
{
	string $cmd = "defaultDirectionalLight(";

	$cmd = $cmd + `optionVar -query directionalLightIntensity`;
	float $rgb[3] = `optionVar -query directionalLightColor`;
	$cmd = $cmd + ", " + $rgb[0] + "," + $rgb[1] + "," + $rgb[2];
	$cmd = $cmd + ", \"" + `optionVar -query directionalLightShadows` + "\"";
	$rgb = `optionVar -query directionalLightShadowColor`;
	$cmd = $cmd + ", " + $rgb[0] + "," + $rgb[1] + "," + $rgb[2];
	$cmd = $cmd + ", " + `optionVar -query directionalLightInteractivePlacement`;
	$cmd = $cmd + ");";

	return $cmd;
}


//
//  Procedure Name:
//      performDirectionalLight
//
//  Description:
//		Perform the directionalLight command using the corresponding 
//		option values.  This procedure will also show the option box
//		window if necessary as well as construct the command string
//		that will invoke the directionalLight command with the current
//		option box values.
//
//  Input Arguments:
//      0 - Execute the command.
//      1 - Show the option box dialog.
//      2 - Return the command.
//
//  Return Value:
//      None.
//
global proc string performDirectionalLight(int $action)
{
	string $cmd = "";

	switch ($action) {

		//	Execute the command.
		//
		case 0:
			//	Retrieve the option settings
			//
			setOptionVars(false);

			//	Get the command.
			//
			$cmd = getCmd();

			//	Execute the command with the option settings.
			//
			evalEcho($cmd);

			break;

		//	Show the option box.
		//
		case 1:
			directionalLightOptions;
			break;

		//	Return the command string.
		//
		case 2:
			//	Retrieve the option settings.
			//
			setOptionVars (false);

			//	Get the command.
			//
			$cmd = getCmd();
			break;
	}
	return $cmd;
}

