// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  26 March 2003
//
//<doc>
//<name isValidString>
//
//<synopsis>
//		int isValidString(string $string, string $regularExpression)
//
//<description>
//		Return true if the string is valid according to the regular
//		expression argument.
//
//		Use "[a-zA-Z][a-zA-Z0-9_]*" as the regular expression
//		for strings that must begin with a letter and is followed by 
//		letters, digits, or underscores (no spaces allowed). Examples
//		of valid strings are: "Name", "New_Name", and "Name1".
//
//		Use "[a-zA-Z][a-zA-Z0-9_ ]*" as the regular expression
//		for strings that must begin with a letter and is followed by 
//		letters, digits, underscores, or spaces. Examples of valid
//		strings are: "Name", "New Name", and "Name 1".
//
//		Use "[0-9][0-9][0-9]\\\.[0-9][0-9][0-9]\\\.[0-9][0-9][0-9][0-9]"
//		as the regular expression for strings that are 10 digit phone
//		numbers. Periods must follow the area code and exchange, ie. the
//		exact format must be ddd.ddd.dddd where 'd' is a single digit.
//
//		The regular expression is implicitly bound to the start and end
//		of the string, so a pattern of "abcd" will give the same result as
//		a pattern of "^abcd$" although the latter may execute slightly
//		faster in some cases.
//
//      Note: isValidString is not reliable on strings containing
//      multibyte data.
//
//<flags>
//		string $string	The name string to test.
//		string $regularExpression	The regular expression.
//
//<returns>
//		int : True if the name is valid, false otherwise.
//
//<related isValidUiName isValidObjectName>
//
//<examples>
//	//	Regular expression does not allow spaces.
//	//
//	isValidString("Name1", "[a-zA-Z][a-zA-Z0-9_]*"); // Will succeed.
//
//	//	Regular expression does not allow spaces.
//	//
//	isValidString("My Name", "[a-zA-Z][a-zA-Z0-9_]*"); // Will fail.
//
//	//	Regular expression does allow spaces.
//	//
//	isValidString("My Name", "[a-zA-Z][a-zA-Z0-9_ ]*"); // Will succeed.
//
//	//	Regular expression must be a 10 digit phone number.
//	//
//	isValidString("204.555.9663",
//		"[0-9][0-9][0-9](\\\.)[0-9][0-9][0-9](\\\.)[0-9][0-9][0-9][0-9]"); // Will succeed.
//	isValidString("(204)555-9663",
//		"[0-9][0-9][0-9](\\\.)[0-9][0-9][0-9](\\\.)[0-9][0-9][0-9][0-9]"); // Will fail.
//	isValidString("204-555-9663",
//		"[0-9][0-9][0-9](\\\.)[0-9][0-9][0-9](\\\.)[0-9][0-9][0-9][0-9]"); // Will fail.
//
//</doc>
//

global proc int isValidString(string $string, string $regularExpression)
{
	int $result = false;

	if ("" != $string && "" != $regularExpression) {
		if ($string == match($regularExpression, $string)) {
			$result = true;
		}
	}

	return $result;
}
