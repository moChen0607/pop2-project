// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Description:
//      This procedure loads preferred render globals presets
//      for specified renderer.
//
//      The following table tells when the node presets are applied:
//
//      Renderer         Render globals nodes    When node presets are applied
//      ------------------------------------------------------------------------
//      mayaSoftware     defaultRenderGlobals    Maya startup/File->New
//      mayaSoftware     defaultResolution       Maya startup/File->New
//      mayaSoftware     defaultRenderQuality    Maya startup/File->New
//      mayaHardware     defaultRenderGlobals    Maya startup/File->New(If HW is the default)
//      mayaHardware     defaultResolution       Maya startup/File->New(If HW is the default)
//      mayaHardware     hardwareRenderGlobals   Maya startup/File->New
//      mayaVector       defaultRenderGlobals    Vector render is registered(If VR is the default)
//      mayaVector       defaultResolution       Vector render is registered(If VR is the default)
//      mayaVector       vectorRenderGlobals     Node is created(Click VectorRender Tab, ...)
//      mentalRay        defaultRenderGlobals    mental ray is registered(If MR is the default)
//      mentalRay        defaultResolution       mental ray is registered(If MR is the default)
//      mentalRay        miDefaultOpitons        Node is created(Click mentalRay Tabs, ...)
//      mentalRay        mentalrayGlobals        Node is created(Click mentalRay Tabs, ...)
//      mentalRay        miDefaultFramebuffer    Node is created(Click mentalRay Tabs, ...)
//
//  Input Arguments:
//      The name of the renderer
//
//  Return Value:
//      None
//

source "supportRenderers.mel";

global proc loadPreferredRenderGlobalsPreset(string $renderer)
{
    int $currentRendererOverrided = false;
    if(`renderer -exists $renderer`) {
        string $globalsNodes[] = `renderer -q -globalsNodes $renderer`;
        string $currentRenderer = currentRenderer();
        if ($renderer != $currentRenderer){
            if ($renderer != "mayaSoftware") {
                string $commonNodes[] = {"defaultRenderGlobals", "defaultResolution"};
                $globalsNodes = stringArrayRemove($commonNodes, $globalsNodes);
            }
            else
                $currentRendererOverrided = true;
        }
        for ($globalsNode in $globalsNodes)
        {
            if (!`objExists $globalsNode`)
                continue;
            loadPreferredPreset($renderer, $globalsNode);
        }
        if ($currentRendererOverrided)
            setAttr "defaultRenderGlobals.currentRenderer" -type "string" $currentRenderer;
    }
}

global proc loadPreferredPreset(string $renderer, string $globalsNode)
{
    string $preferredPresetOptVar = $renderer + $globalsNode + "PreferredPreset";
    if (`optionVar -exists $preferredPresetOptVar`)
    {
        string $pref = `optionVar -q $preferredPresetOptVar`;

        if (`nodePreset -exists $globalsNode $pref`)
        {
            nodePreset -load $globalsNode $pref;
        }
        else
        {
            // The users preferred preset does not exist. Warn the user and
            // delete the optionVar.
            //
            warning (uiRes("m_loadPreferredRenderGlobalsPreset.kPrefRenderGlobalsFailed"));;
            optionVar -remove $preferredPresetOptVar;
        }
    }
}