// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

// loadRelatedReference.mel
//
// If we have the locator or annotation associated with
// a reference node, we can unload the reference.
//
global proc string getRelatedReference ( string $relNode )
{
	if( `reference -q -isNodeReferenced $relNode`) {
		string $fileName = `reference -q -filename $relNode`;
		string $refNode = `file -q -rfn $fileName`;
		return $refNode;
	}

	// if we're lucky this is already the locator parent
	string $testNodes[] = `listConnections $relNode`;
	string $testNode;
	int $refFound = 0;
	for ($testNode in $testNodes) {
		if (`nodeType $testNode` == "reference" ) {
			return $testNode;
		}
	}

	string $testParents[];
	string $testChildren[] = `listRelatives -fullPath -shapes $relNode`;
	
	// We may have selected the main scene parent of an instanced
	// referenced shape.
	//
	for ( $testNode in $testChildren ) {
		if( `reference -q -isNodeReferenced $testNode`) {
			string $fileName = `reference -q -filename $testNode`;
			string $refNode = `file -q -rfn $fileName`;
			return $refNode;
		}
	}	


	// perhaps we were over the annotation instead
	// If this is a grouping structure like we created when
	// doing a reference with locator, this will find the right ref
	// If not, it will just muddle around the dg a bit more before failing

	if(size($testChildren) > 0) {
		if(`nodeType $testChildren[0]` == "annotationShape")
			$testParents = `listRelatives -fullPath -parent $relNode`;
	}

	if(size($testParents) > 0) {
		$testNodes = `listConnections $testParents[0]`;
		for ($testNode in $testNodes) {
			if (`nodeType $testNode` == "reference" ) {
				return $testNode;
			}
		}
	}

	// It's possible that the user had right moused over nothing 
	// with the locator or annotationshape already selected
	// but we'll worry about that later

	return "";
}
