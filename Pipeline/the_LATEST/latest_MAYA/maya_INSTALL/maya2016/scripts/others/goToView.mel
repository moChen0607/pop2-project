// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

// Description:  This procedure is called to take the panel in focus
//                  . back to its previous view 
//                    if the $direction is -1;
//                  . or go to its next view
//                    if the $direction is 1.
//
global proc goToView(int $direction)
{
    // Get the panel with focus.
    //
    string $panel = `getPanel -withFocus`;
    if ($panel == "")
    {
        // No panel is in focus.  Check which panel has the cursor
        // over it.
        //
        $panel = `getPanel -underPointer`;
    }
    if ($panel == "")
    {
        string $warningMessage = (uiRes("m_goToView.kDoNotKnowWhichPanel"));
        warning($warningMessage);
        return;
    }

    string $type = `getPanel -typeOf $panel`;
    // Model panel.
    //
    if ($type == "modelPanel")
    {
        if ($direction == -1)
        {
            viewSet -animate (`optionVar -q animateRollNextLastCameraView`) -pv `hotkeyCurrentCamera $panel`;
        }
        else
        {
            viewSet -animate (`optionVar -q animateRollNextLastCameraView`) -nv `hotkeyCurrentCamera $panel`;
        }
        return;
    }

    // Scripted panel.
    //
    if ($type == "scriptedPanel")
    {
        string $scriptedType = `scriptedPanel -query -type $panel`;
        int $isCustomView = 
            `scriptedPanelType -q -customView $scriptedType`; 
        
        //Custom panel
        if ( $isCustomView ) { 
            if ($direction == -1)
            {
                viewSet -animate (`optionVar -q animateRollNextLastCameraView`) -pv `hotkeyCurrentCamera $panel`;
            }
            else
            {
                viewSet -animate (`optionVar -q animateRollNextLastCameraView`) -nv `hotkeyCurrentCamera $panel`;
            }
            return;
        }
        else if ($scriptedType == "hyperShadePanel")
        {
            if ($direction == -1)
            {
                hyperShadePanelGraphCommand($panel, "showPreviousGraph");
            }
            else
            {
                hyperShadePanelGraphCommand($panel, "showNextGraph");
            }
            return;
        }
        
        if ($scriptedType == "graphEditor")
        {
			if ($direction == -1)
            {
				animView -edit -previousView ($panel+"GraphEd");
			}
			else
			{
				animView -edit -nextView ($panel+"GraphEd");
			}
        }
    }
}
