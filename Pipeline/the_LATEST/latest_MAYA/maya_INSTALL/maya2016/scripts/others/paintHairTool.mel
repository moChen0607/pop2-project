// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  2003 
//
//  Description:
//      setup Tool to paint dynamic hairs on objects 
//		
//


// This was copied from initContexts.mel
//
proc rememberCtxSettings( string $ctxName )
//
// This method sees if an optionVar has been defined
// for the tool.  If it has, the string it contains
// is evaluated to set the tool settings.  SuperContexts
// should not be saved this way, since they have no
// particular settings.
//
{
	if ( `optionVar -exists $ctxName` ){
		string $cmd = `optionVar -q $ctxName`;
		catch( `eval($cmd)` );
	} else {
		// create an empty option var so that this
		// will be saved.
		optionVar -sv $ctxName "";
	}
}

global string $gPaintHairAttrToolCtx = "";

global proc paintHairTool(
	int		$showToolProperties
)
{
	global string $gPaintHairAttrToolCtx;
	// we have to couch all uses of userPaintCtx within eval's since
	// the userPaintCtx command may not exist when this script is
	// interpreted
	//
	if ( $gPaintHairAttrToolCtx == "" ) {
		$gPaintHairAttrToolCtx=`eval "artUserPaintCtx -i1 \"hairPaint.png\" -cf false -whichTool \"userPaint\" -dl true -fp true hairPaintContext"`;
		rememberCtxSettings $gPaintHairAttrToolCtx;			
	}

	string	$cmd;

	$cmd  = "artUserPaintCtx -e";
	$cmd += " -tsc \"hairCurvePaint\"";
	$cmd += " -tcc \"cleanupHairPaint\"";
	$cmd += " -i1 \"hairPaint.png\"";
	$cmd += " -ic \"initHairPaint\"";
	$cmd += " -fc \"finishHairPaint\"";
	$cmd += " -svc \"setHairPaintValue\"";
	$cmd += " -gvc \"getHairPaintValue\"";
	$cmd += " -gac \"\" -cc \"\" -gsc \"\"";
	$cmd +=	$gPaintHairAttrToolCtx;
	eval $cmd;

	setToolTo $gPaintHairAttrToolCtx;
	if ( $showToolProperties ) {
		toolPropertyWindow;
	}
}


