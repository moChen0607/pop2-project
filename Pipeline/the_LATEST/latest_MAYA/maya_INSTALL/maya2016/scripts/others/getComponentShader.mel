// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//	Procedure Name:
//		getComponentShader  
//
//	Description:
//		this script returns the shader assigned to a given
//		poly, nurbs or subd face
//
//	Input Arguments: 
//		string $component: the component to get the shader for
// 
//	Returns:
//		string: the shader assigned to the given component

global proc string getComponentShader(string $component){
	
	// find the shape node
	string $shape[] = `listRelatives -parent $component`;
	
	// find the shading engine
	string $connections[] = `listConnections -source false -type 
		"shadingEngine" $shape[0]`;
	
	// there may be more than one shading group connected to the
	// geometry so find the exact one
	$connections = `stringArrayRemoveDuplicates $connections`;
	string $shadingGroup;//shadingGroup attached to component
	string $shader[];//shader attached to component via shadingGroup
	
	for ($connection in $connections){
		int $result = `sets -isMember $connection $component`;
		if ($result == 1) {$shadingGroup = $connection;}
	}

	// if no shading group has been found, the components must not be
	// mapped - this means the shape is mapped
	if ($shadingGroup == ""){
		for ($connection in $connections){
			int $result = `sets -isMember $connection $shape[0]`;
			if ($result == 1) {$shadingGroup = $connection;}
		}
	}

	if ($shadingGroup != ""){
		// find the shader connected to the shading group
		string $shaderConnection = `connectionInfo -sourceFromDestination 
			($shadingGroup + ".surfaceShader")`;
		
		tokenize $shaderConnection "." $shader;

	} else {
		string $msgFormat = (uiRes("m_getComponentShader.kNoShaderFound"));
		error (`format -s $component $msgFormat`);
	}
	
	return $shader[0];
	
}
