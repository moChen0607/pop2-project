// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//
//

source clipMenuCommands.mel;

//
//  Create context sensitive Hypergraph menu for clip nodes
//  This is displayed with RMB on clip nodes
//
proc createClipMenuItems( string $editor, string $menu )
{
	setParent -m $menu;
	
	menuItem ClipMenuTitleItem;
	menuItem -divider true;	
	menuItem -divider true;
	menuItem -l (uiRes("m_hypergraphAnimClipMenu.kCopyClip"))
		-annotation (uiRes("m_hypergraphAnimClipMenu.kCopyClipAnnot")) ClipCopyItem;
	menuItem -l (uiRes("m_hypergraphAnimClipMenu.kInstanceClip"))
		-annotation (uiRes("m_hypergraphAnimClipMenu.kInstanceClipAnnot")) ClipInstanceItem;
	menuItem -l (uiRes("m_hypergraphAnimClipMenu.kDuplicateClip"))
		-annotation (uiRes("m_hypergraphAnimClipMenu.kDuplicateClipAnnot")) ClipDuplicateItem;
	menuItem -l (uiRes("m_hypergraphAnimClipMenu.kExportClip"))
		-annotation (uiRes("m_hypergraphAnimClipMenu.kExportClipAnnot")) ClipExportItem;
	menuItem -divider true;
	menuItem -l (uiRes("m_hypergraphAnimClipMenu.kApplyPose"))
		-annotation (uiRes("m_hypergraphAnimClipMenu.kApplyPoseAnnot")) ClipApplyPoseItem;
	menuItem -divider true;
	string $menuItemFormat = (uiRes("m_hypergraphAnimClipMenu.kAttributeEditorMenuItem"));
	menuItem -l `format -s (localizedUIComponentLabel("Attribute Editor")) $menuItemFormat` ClipAttrEditorItem;
	menuItem -l (uiRes("m_hypergraphAnimClipMenu.kRenameClip"))
		-annotation (uiRes("m_hypergraphAnimClipMenu.kRenameClipAnnot")) ClipRenameItem;
}



//
// Define context sensitive Hypergraph menu for clip nodes
//
proc defineClipMenuCommands(string $editor, string $menu, string $node)
{
	// The visor uses a hyper graph panel, so the only way to tell
	// that we are in the visor is by the name
	//
	int $isVisor = gmatch( $editor, "*VisorEd" );

	menuItem -edit
		-l ("Clip: " + $node)
		ClipMenuTitleItem;

	menuItem -edit
		-c ("clipCopyMenuCommand " + $node) ClipCopyItem;

	menuItem -edit
		-c ("clipInstanceMenuCommand " + $node) ClipInstanceItem;

	menuItem -edit
		-c ("clipDuplicateMenuCommand " + $node) ClipDuplicateItem;

	menuItem -edit
		-c ("doExportClipArgList 2 { \"\", \"" + $node + "\"}") ClipExportItem;

	menuItem -edit
		-c ("clipApplyPoseMenuCommand " + $node) ClipApplyPoseItem;

	menuItem -edit -c 
		("hyperGraph -e -rename -useFeedbackList " + $editor) 
		ClipRenameItem;
	menuItem -edit -c 
		("hyperGraph -e -attributeEditor single -useFeedbackList " + $editor)
		ClipAttrEditorItem;
}

global proc hypergraphAnimClipMenu(string $editor, string $menu, string $node)
{
	createClipMenuItems($editor, $menu);
	defineClipMenuCommands($editor, $menu, $node);
}
