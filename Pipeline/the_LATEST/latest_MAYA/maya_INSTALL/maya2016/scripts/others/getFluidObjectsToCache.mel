// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  2007
//
//  Description:
//      Get a list of Fluid objects for caching.
//		
//
global proc string[] getFluidObjectsToCache(int $showError)
{
	string $objsToCache[] = `ls -sl -type fluidShape`;

	if (0 == size($objsToCache)) {
	    string $shapes[] = getGeometriesToCache();
		string $shape;
		for ($shape in $shapes) {
			string $fluidShape = findTypeInHistory($shape,"fluidShape", 0, 1);
			if (size($fluidShape)) {
				$objsToCache[size($objsToCache)] = $fluidShape;
			}
		}
	}

	// append any additional geometries that are in cache groups with
	// the specified geometries
	//
	int $ii, $objCount = size($objsToCache);
	for ($ii = 0; $ii < $objCount; $ii++) {
		string $caches[] = findExistingCaches($objsToCache[$ii]);
		for ($cache in $caches) {
			string $geoms[] = `cacheFile -q -geometry $cache`;
			for ($geom in $geoms) {
				string $isFluidShape[] = `ls -type fluidShape $geom`;
				if (size($isFluidShape) > 0) {
					if (0 == stringArrayCount($geom,$objsToCache)) {
						$objsToCache[size($objsToCache)] = $geom;
					}
				}
			}
		}
	}
	
	if ($showError && 0 == size($objsToCache)) {
		error((uiRes("m_getFluidObjectsToCache.kFluidSelectError")));
	}
	return $objsToCache;
}
