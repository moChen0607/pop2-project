// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//      contextPolyToolsMappingMM
//
//  Description:
//      This procedure creates the popup/marking menu
//      for poly mapping tools. See contextPolyToolsMM.
//
//  Input Arguments:
//      None
//
//  Return Value:
//      None.

global proc contextPolyToolsMappingMM(){

	menuItem
		-label (uiRes("m_contextPolyToolsMM.kMapping"))
		-subMenu 1
		-tearOff 0
		-allowOptionBoxes 1
		-postMenuCommandOnce 0
		;


	menuItem
		-label (uiRes("m_contextPolyToolsMM.kPlanarMapX"))
		-command "ConvertSelectionToFaces; polyProjection -ch 1 -type Planar -ibd on -icx 0.5 -icy 0.5 -ra 0 -isu 1 -isv 1 -md x ;setToolTo ShowManips" 
		-enableCommandRepeat 1
		-image "commandButton.png" 
		;

	menuItem
		-label (uiRes("m_contextPolyToolsMM.kPlanarMapY"))
		-command "ConvertSelectionToFaces; polyProjection -ch 1 -type Planar -ibd on -icx 0.5 -icy 0.5 -ra 0 -isu 1 -isv 1 -md y ;setToolTo ShowManips;" 
		-enableCommandRepeat 1
		-image "commandButton.png" 
		;

	menuItem
		-label (uiRes("m_contextPolyToolsMM.kPlanarMapZ"))
		-command "ConvertSelectionToFaces; polyProjection -ch 1 -type Planar -ibd on -icx 0.5 -icy 0.5 -ra 0 -isu 1 -isv 1 -md z ;setToolTo ShowManips;" 
		-enableCommandRepeat 1
		-image "commandButton.png" 
		;

	menuItem
		-label (uiRes("m_contextPolyToolsMM.kPlanarMap"))
		-command "performPolyProjectionArgList \"1\" {\"0\", \"Planar\", \"ls -sl\", \"0\"} \"\"" 
		-enableCommandRepeat 1
		;
	
	menuItem
		-label (uiRes("m_contextPolyToolsMM.kPlanarMapOptions"))
		-command "performPolyProjectionArgList \"1\" {\"1\", \"Planar\", \"ls -sl\", \"0\"} \"\"" 
		-optionBox 1
		-enableCommandRepeat 1
		;

	menuItem
		-divider 1
		;

	menuItem
		-label (uiRes("m_contextPolyToolsMM.kCylindricalMap"))
		-command "ConvertSelectionToFaces; polyProjection -ch 1 -type Cylindrical -ibd on -icx 0.5 -icy 0.5 -ra 0 -isu 1 -isv 1 -sf on ; setToolTo ShowManips;" 
		-enableCommandRepeat 1
		-image "polyCylProj.png" 
		;

	menuItem
		-label (uiRes("m_contextPolyToolsMM.kCylindricalMapOptions"))
		-command "performPolyProjectionArgList \"1\" {\"1\", \"Cylindrical\", \"ls -sl\", \"0\"} \"\"" 
		-optionBox 1
		-enableCommandRepeat 1
		;

	menuItem
		-label (uiRes("m_contextPolyToolsMM.kSphericalMap"))
		-command "ConvertSelectionToFaces; polyProjection -ch 1 -type Spherical -ibd on -icx 0.5 -icy 0.5 -ra 0 -isu 1 -isv 1 -sf on ; setToolTo ShowManips;" 
		-enableCommandRepeat 1
		-image "polySphereProj.png" 
		;

	menuItem
		-label (uiRes("m_contextPolyToolsMM.kSphericalMapOptions"))
		-command "performPolyProjectionArgList \"1\" {\"1\", \"Spherical\", \"ls -sl\", \"0\"} \"\"" 
		-optionBox 1
		-enableCommandRepeat 1
		;

	menuItem
		-divider 1
		;

	menuItem
		-label (uiRes("m_contextPolyToolsMM.kAutomaticMap"))
		-command "performPolyAutoProj 0" 
		-enableCommandRepeat 1
		-image "polyAutoProj.png" 
		;

	menuItem
		-label (uiRes("m_contextPolyToolsMM.kAutomaticMapOptions"))
		-command "performPolyAutoProj 1" 
		-optionBox 1
		-enableCommandRepeat 1
		;

	setParent -menu ..;

}



//
//  Procedure Name:
//      contextPolyToolsMM
//
//  Description:
//      This procedure creates the popup/marking menu
//      for poly tools. See ModelEdMenu.
//
//  Input Arguments:
//      The parent item to parent the popup menu to.
//
//  Return Value:
//      None.


global proc int contextPolyToolsMM(string $parent)
{
	if (`popupMenu -query -exists $parent`)
	{
		popupMenu -edit -deleteAllItems $parent;

		setParent -menu $parent;

		string $currentContext = `currentCtx`; 
		if (`contextInfo -exists $currentContext`)
		{
            string $ctx = `contextInfo -c $currentContext`; 
			if ($ctx == "sculptMeshCache")
			{
				sculptMeshCacheConvertMM();
				return 1;
			}
		}

		string $selection[] = `ls -long -selection`;

		if (0 == size( $selection ))
		{
			$selection = `ls -preSelectHilite`;
		}

		//
		// Poly vertex is selected.
		//
		string $vertexList[] = `filterExpand -expand false -selectionMask 31 $selection`;
		if (0 != `size($vertexList)`)
		{
			contextPolyToolsVertexMM;

			// allow user to define a proc with additional menu items
			if (`exists contextPolyToolsVertexUserMM`)
				contextPolyToolsVertexUserMM $parent;

			return 1;
		}

		//
		// Poly face is selected.
		//
		string $faceList[] = `filterExpand -expand false -selectionMask 34 $selection`;
		if (0 != `size($faceList)`)
		{
			contextPolyToolsFaceMM;

			// allow user to define a proc with additional menu items
			if (`exists contextPolyToolsFaceUserMM`)
				contextPolyToolsFaceUserMM $parent;

			return 1;
		}

		//
		// Poly edge is selected.
		//
		string $edgeList[] = `filterExpand -expand false -selectionMask 32 $selection`;
		if (0 != `size($edgeList)`)
		{
			contextPolyToolsEdgeMM;

			// allow user to define a proc with additional menu items
			if (`exists contextPolyToolsEdgeUserMM`)
				contextPolyToolsEdgeUserMM $parent;

			return 1;
		}

		//
		// Poly uv is selected.
		//
		string $uvList[] = `filterExpand -expand false -selectionMask 35 $selection`;
		if (0 != `size($uvList)`)
		{
			// allow user to define a proc with additional menu items
			if (`exists contextPolyToolsUVUserMM`)
				contextPolyToolsUVUserMM $parent;

			return 1;
		}

		//
		// Poly object is selected.
		//
		string $polyObjectList[] = `filterExpand -expand false -selectionMask 12 $selection`;
		if (0 != `size($polyObjectList)`)
		{
			contextPolyToolsObjectMM;

			// allow user to define a proc with additional menu items
			if (`exists contextPolyToolsObjectUserMM`)
				contextPolyToolsObjectUserMM $parent;

			return 1;
		}	
	}
	return 0;
}
