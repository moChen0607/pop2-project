// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//
//
//
//
//  Creation Date:  26 Jun 1996
//
//  Description:
//      This procedure sets the state of the object pick mask.
//
//  Input Arguments:
//		The flag for the pick mask setting to turn on/off,
//		and the state to set that pick mask setting to.
//
//  Return Value:
//		None
//

global proc setObjectPickMask( string $maskType, int $state ) {

	//
	// Set values, based on the state of the pick mask
	// type and state passed to the procedure
	//
	global string $gSelMarkerFilterTypeList[];
	global string $gSelJointFilterTypeList[];
	global string $gSelCurveFilterTypeList[];
	global string $gSelSurfaceFilterTypeList[];
	global string $gSelDeformerFilterTypeList[];
	global string $gSelDynamicFilterTypeList[];
	global string $gSelRenderingFilterTypeList[];
	global string $gSelOtherFilterTypeList[];

	switch ($maskType) {
		case "All":
			selectType -allObjects $state;
			//
			// Change the state of all the object
			// selection mask buttons in the infoBar
			//
			iconTextCheckBox -e -v $state objSelHandleBtn;
			iconTextCheckBox -e -v $state objSelJointBtn;
			iconTextCheckBox -e -v $state objSelCurveBtn;
			iconTextCheckBox -e -v $state objSelSurfaceBtn;
			iconTextCheckBox -e -v $state objSelDeformBtn;
			iconTextCheckBox -e -v $state objSelDynamicBtn;
			iconTextCheckBox -e -v $state objSelRenderBtn;
			break;
		case "Marker":
			string $selTypeName;
			for ($selTypeName in $gSelMarkerFilterTypeList)
				eval selectType -byName $selTypeName $state;
			selectType
				-handle $state
				-ikHandle $state;
			break;
		case "Joint":
			string $selTypeName;
			for ($selTypeName in $gSelJointFilterTypeList)
				eval selectType -byName $selTypeName $state;
			selectType
				-joint $state;
			break;
		case "Curve":
			string $selTypeName;
			for ($selTypeName in $gSelCurveFilterTypeList)
				eval selectType -byName $selTypeName $state;
			if (`isTrue MayaCreatorExists` && (`licenseCheck -m "edit" -typ "particlePaint"`) ) {
				selectType
					-nurbsCurve $state
					-cos $state
					-stroke $state;  // For Particle Paint
			}
			else {
				selectType
					-nurbsCurve $state
					-cos $state;
			}
			break;
		case "Surface":
			string $selTypeName;
			for ($selTypeName in $gSelSurfaceFilterTypeList)
				eval selectType -byName $selTypeName $state;
			selectType
				-nurbsSurface $state
				-polymesh $state
				-subdiv $state
				-plane $state;
			break;
		case "Deformer":
			string $selTypeName;
			for ($selTypeName in $gSelDeformerFilterTypeList)
				eval selectType -byName $selTypeName $state;
			selectType
				-lattice $state
				-cluster $state
				-sculpt $state
				-nonlinear $state;			
			break;
		case "Dynamic":
			string $selTypeName;
			for ($selTypeName in $gSelDynamicFilterTypeList)
				eval selectType -byName $selTypeName $state;
			selectType
				-particleShape $state
				-emitter $state
				-field $state
				-fluid $state
				-hairSystem $state
				-follicle $state
				-nCloth $state
				-nRigid $state
				-dynamicConstraint $state
				-spring $state
				-collisionModel $state
				-rigidBody $state
				-rigidConstraint $state;
			break;
		case "Rendering":
			string $selTypeName;
			for ($selTypeName in $gSelRenderingFilterTypeList)
				eval selectType -byName $selTypeName $state;
			selectType
				-light $state
				-camera $state
				-texture $state;
			break;
		case "Other":
			string $selTypeName;
			for ($selTypeName in $gSelOtherFilterTypeList)
				eval selectType -byName $selTypeName $state;
			selectType
				-ikEndEffector $state
				-locator $state
				-dimension $state;
			break;
	}
}
