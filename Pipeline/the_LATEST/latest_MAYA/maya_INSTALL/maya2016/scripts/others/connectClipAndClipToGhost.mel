// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//      connectClipAndClipToGhost
//
//  Description:
//      This function sets up connections between a clip node and
//      a clipToGhost node such that code responsible for adding/removing
//      clipGhostShapes works correctly.
//
// Input Arguments:
//      $clip/$clipToGhost : source and destination nodes for the connection
//      $scheduler         : The scheduler that manages the clip
//

// Private utility functions
proc connectIfNotConnected( string $src, string $dst )
{
    if ( `isConnected $src $dst` == false )
        connectAttr $src $dst;
}

// External entry point
global proc connectClipAndClipToGhost( string $clip, string $clipToGhost, string $scheduler )
{
    // Get a list of all clips connected to the scheduler
    string $clips[] = `clipSchedule -q -name $scheduler`;

    // Determine the logical index of the clip in the set of clips managed by the scheduler.
    int $i = stringArrayFind( $clip, 0, $clips );
    if ( $i < 0 )
    {
        string $msg = (uiRes("m_connectClipAndClipToGhost.kErrorUnManagedClip"));
        error ( `format -s $clip -s $scheduler $msg` );
    }

    // Setup needed connections and attributes between the clip and the clipToGhost node
    connectIfNotConnected ( $clip + ".sourceStart" ) ( $clipToGhost + ".clipSourceStart[" + $i + "]" );
    connectIfNotConnected ( $clip + ".sourceEnd"   ) ( $clipToGhost + ".clipSourceEnd[" + $i + "]" );
    connectIfNotConnected ( $clip + ".preCycle"    ) ( $clipToGhost + ".clipPreCycle[" + $i + "]" );
    connectIfNotConnected ( $clip + ".postCycle"   ) ( $clipToGhost + ".clipPostCycle[" + $i + "]" );
}