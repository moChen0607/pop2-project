// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc cteContextMenuBakeAndRemoveAnimations(int $id)
{
    cteBakeClips -rosterItem $id -removeRosterItem true;
}

global proc cteContextMenuDeleteSingleAnimations(int $id)
{
	string $rosterName = getRosterNodeName();
	string $rosterItemType = `cteRoster -q -rosterItemType $id`;

	if ($rosterItemType == "group"){
		cteRoster -e -removeGroup $id $rosterName;
	}
	else if ($rosterItemType == "object"){
		cteRoster -e -removeObject $id $rosterName;
	}
	else if ($rosterItemType == "attribute"){
		cteRoster -e -removeAttribute $id $rosterName;
	}
}

global proc cteBakeAndRemoveTEAnimations()
{
    cteBakeClips -allClips true -removeRosterItem true;
}

global proc cteDeleteAllTEAnimations()
{
	string $rosterName = getRosterNodeName();
	cteRoster -e -removeAll $rosterName;
}

global proc cteContextMenuMergeClips()
{
    string $mergedName = "Merged_Clips";
    cteBakeClips -bakeToClip $mergedName;
}

// find the roster node of the active composition
global proc string getRosterNodeName()
{
	string $activeCompositionRosterName = `cteComposition -q -active -rosterNode`;
	
	if ( $activeCompositionRosterName != "" )
		return $activeCompositionRosterName;
		
	// no compositions found, create a default
	cteComposition "Composition1";
	$activeCompositionRosterName = `cteComposition -q -active -rosterNode`;
	return $activeCompositionRosterName;
}

global proc string getAllowedSourceTypes()
{
	string $animCurveType = "-type animCurveTL -type animCurveTA -type animCurveTT -type animCurveTU ";
    string $constValueType = "-type \"\" ";
	string $populateType = "";
	
	int $checkboxUseAnimCurve = `menuItem -q -checkBox useAnimCurvesCheckBox`;
	int $checkboxUseNonCurve = `menuItem -q -checkBox useNonCurveAnimCheckBox`;
	int $checkboxUseConstantValues = `menuItem -q -checkBox useConstantValuesCheckBox`;
 
    if ( $checkboxUseAnimCurve == true && $checkboxUseNonCurve == true && $checkboxUseConstantValues == true) {
        // Everything
        $populateType = "";
    }
    else if ($checkboxUseNonCurve == true)
    {   
        if ( $checkboxUseAnimCurve == false ) {
            $populateType += $animCurveType;
        }
        if ( $checkboxUseConstantValues == false) {
            $populateType += $constValueType;
        }
        $populateType += "-exclusive";
    }
    else
    {    
        if ( $checkboxUseAnimCurve == true ) {
            // Anim curves only
            $populateType += $animCurveType;
        }
        if ( $checkboxUseConstantValues == true ) {
            // Const Values only
            $populateType += $constValueType;
        }
    }
	
	return $populateType;
}

global proc populateObjects(string $flags)
{
	// This function will formulate command for populating objects based on the
	// flags and based on user preferences (for example create clip checkbox)

	// Temp: find or create the global roster node
	string $rosterNodeName = getRosterNodeName();

	string $populateCmd = "cteRoster -e -aso ";
	
	// only below 4 types of animCurve based on time will be treated as fcurve animation
	int $checkboxUseAnimCurve = `menuItem -q -checkBox useAnimCurvesCheckBox`;
	int $checkboxUseNonCurve = `menuItem -q -checkBox useNonCurveAnimCheckBox`;
	int $checkboxUseConstantValues = `menuItem -q -checkBox useConstantValuesCheckBox`;
	int $checkboxCopyAnimation = `menuItem -q -checkBox copyAnimationCheckBox`;
	string $populateType = getAllowedSourceTypes();
    
    if ($checkboxUseAnimCurve || $checkboxUseNonCurve || $checkboxUseConstantValues) 
    {
        $populateCmd = $populateCmd + $populateType + $flags + " ";
		$populateCmd += "-copyAnimation " + $checkboxCopyAnimation + " ";
        
        // Query value of createClip checkbox
        $checkboxVal = `menuItem -q -checkBox createClipCheckBox`;
        if ($checkboxVal == false)
            $populateCmd = $populateCmd + " -createDefaultClip false ";

        $populateCmd = $populateCmd + $rosterNodeName;
            
        // Execute populate command and echoes the command string being executed.
        evalEcho ($populateCmd);
    }
}

global proc exportFbx()
{
	// Ask the user for destination folder for all exported FBX files, onefor each clip
	string $paths[] = `fileDialog2 -fileMode 3 -caption (uiRes("m_cteEdMenu.kCTEExportFBXCaption"))`;
	if ( size($paths) != 1 ) return;
	
	// Temp: find or create the global roster node
	string $rosterNodeName = getRosterNodeName();
	
	string $path = $paths[0];
	string $exportCmd = `cteRoster -e -exportFbx $path $rosterNodeName`;
	
	// Execute export command
	evalEcho ($exportCmd);
}

global proc cteToggleRippleEditMode()
{
	optionVar -iv cteRippleEditModeEnabled `menuItem -q -checkBox rippleEditModeCheckBox`;
}

global proc cteToggleImportOption()
{
	if ( `menuItem -q -radioButton importConnectRadioButton` )
		optionVar -sv cteImportOption "connect";
	else if ( `menuItem -q -radioButton importGenerateRadioButton` )
		optionVar -sv cteImportOption "generate";
}

global proc importSelection()
{
	string $populateType = getAllowedSourceTypes();
	string $rosterNodeName = getRosterNodeName();
	int $checkboxCopyAnimation = `menuItem -q -checkBox copyAnimationCheckBox`;
	string $importSelection = "cteRoster -e -importSelection " + $populateType + "-copyAnimation " + $checkboxCopyAnimation + " " + $rosterNodeName;
	evalEcho($importSelection);
}

global proc ghostSelected()
{
	string $rosterNodeName = getRosterNodeName();
	cteRoster -e -ghost true $rosterNodeName;
	string $unghostAll = "cteRoster -e -ghost false " + $rosterNodeName;
}

global proc unghostAll()
{
	string $rosterNodeName = getRosterNodeName();
	cteRoster -e -ghost false $rosterNodeName;
}

global proc onMuteChanged()
{
	int $isCteMuted = `cte -q -mute`;
	if (`menuItem -exists cteMenuCreateClipFromBaseLayer`)
	{
		menuItem -e -enable $isCteMuted cteMenuCreateClipFromBaseLayer;
	}
}

proc string cteEditorGraphEdName( string $whichPanel )
{
    return ( $whichPanel + "CTEEd" );
}

global proc buildCTEEditorEditMenu(string $editor, string $parent)
{	
	int $dimWhenNoSelect = 0;
	setParent -menu $parent;
	int $isCteMuted = `cte -q -mute`;
	
	if (`menu -query -numberOfItems $parent` != 0) return;
	
	menuItem -divider true -dividerLabel "Populate";

	string $populateCmd = "populateObjects(\"\") ";
	menuItem -label (uiRes("m_cteEdMenu.kCTEPopulate"))
		-annotation (uiRes("m_cteEdMenu.kCTEPopulateAnnot"))
		-command $populateCmd
		-dragMenuCommand $populateCmd;	
		
	string $populateAsHierarchyCmd = "populateObjects(\"-h\")";
	menuItem -label (uiRes("m_cteEdMenu.kCTEPopulateAsHier"))
		-annotation (uiRes("m_cteEdMenu.kCTEPopulateAsHierAnnot"))
		-command $populateAsHierarchyCmd
		-dragMenuCommand $populateAsHierarchyCmd;	
		
	string $populateKeyingGroupCmd = "populateObjects(\"-addRelatedKG true\")";
	menuItem -label (uiRes("m_cteEdMenu.kCTEPopulateKeyingGroup"))
		-annotation (uiRes("m_cteEdMenu.kCTEPopulateKeyingGroupAnnot"))
		-command $populateKeyingGroupCmd
		-dragMenuCommand $populateKeyingGroupCmd;

	menuItem -divider true -dividerLabel "Options for Populating";

	menuItem -label (uiRes("m_cteEdMenu.kCTEPopulateCreateClip"))
		-annotation (uiRes("m_cteEdMenu.kCTEPopulateCreateClipAnnot"))
		-checkBox on createClipCheckBox;
		
	menuItem -label (uiRes("m_cteEdMenu.kCTEPopulateCopyAnimation"))
		-annotation (uiRes("m_cteEdMenu.kCTEPopulateCopyAnimationAnnot"))
		-checkBox off copyAnimationCheckBox;
		
	menuItem -divider true -dividerLabel "Import Animation From Maya Scene";
		
	string $importSelection = "importSelection()";
	menuItem -label (uiRes("m_cteEdMenu.kCTECreateClipFromBaseLayer"))
		-annotation (uiRes("m_cteEdMenu.kCTECreateClipFromBaseLayerAnnot"))
		-enable $isCteMuted
		-command $importSelection
		cteMenuCreateClipFromBaseLayer;

	menuItem -divider true -dividerLabel "Options for Population and Clip Creation";

	menuItem -label (uiRes("m_cteEdMenu.kCTEUseConstantValues"))
		-annotation (uiRes("m_cteEdMenu.kCTEUseConstantValuesAnnot"))
		-checkBox off useConstantValuesCheckBox;

	menuItem -label (uiRes("m_cteEdMenu.kCTEUseAnimCurves"))
		-annotation (uiRes("m_cteEdMenu.kCTEUseAnimCurvesAnnot"))
		-checkBox on useAnimCurvesCheckBox;

	menuItem -label (uiRes("m_cteEdMenu.kCTEUseNonCurveAnim"))
		-annotation (uiRes("m_cteEdMenu.kCTEUseNonCurveAnimAnnot"))
		-checkBox off useNonCurveAnimCheckBox;
	
	menuItem -divider true -dividerLabel "Clip Editing Options";

	int $ripple = 0;
	if (`optionVar -exists cteRippleEditModeEnabled`)
		$ripple = `optionVar -q cteRippleEditModeEnabled`;
	else
		optionVar -iv cteRippleEditModeEnabled $ripple;

	menuItem -label (uiRes("m_cteEdMenu.kCTERippleEdit"))
		-annotation (uiRes("m_cteEdMenu.kCTERippleEditAnnot"))
		-checkBox $ripple
		-command ( "cteToggleRippleEditMode()" )
		rippleEditModeCheckBox;
		
	menuItem -divider true -dividerLabel "Export";
	
	string $exportFbxCmd = "exportFbx()";
	menuItem -label (uiRes("m_cteEdMenu.kCTEExportFBX"))
		-annotation (uiRes("m_cteEdMenu.kCTEExportFBXAnnot"))
		-command $exportFbxCmd
		-dragMenuCommand $exportFbxCmd;

	menuItem -divider true -dividerLabel "Options for importing Constraints";

	string $importOption = "generate";
	if ( `optionVar -exists cteImportOption` )
		$importOption = `optionVar -q cteImportOption`;
	else
		optionVar -sv cteImportOption $importOption;

	radioMenuItemCollection;

	int $rbCon = ( $importOption == "connect" );
	menuItem -label (uiRes("m_cteEdMenu.kCTEImportConnect"))
		-annotation (uiRes("m_cteEdMenu.kCTEImportConnectAnnot"))
		-radioButton $rbCon
		-command ( "cteToggleImportOption()" )
		importConnectRadioButton;

	int $rbCon = ( $importOption == "generate" );
	menuItem -label (uiRes("m_cteEdMenu.kCTEImportGenerate"))
		-annotation (uiRes("m_cteEdMenu.kCTEImportGenerateAnnot"))
		-radioButton $rbCon
		-command ( "cteToggleImportOption()" )
		importGenerateRadioButton;
		
	/*menuItem -divider true -dividerLabel "Ghosting";	
	
	menuItem -label (uiRes("m_cteEdMenu.kCTEGhostSelected"))
		-annotation (uiRes("m_cteEdMenu.kCTEGhostSelectedAnnot"))
		-command ("ghostSelected");
		
	menuItem -label (uiRes("m_cteEdMenu.kCTEUnghostAll"))
		-annotation (uiRes("m_cteEdMenu.kCTEUnghostAllAnnot"))
		-command ("unghostAll");*/

	// Obtain roster size and enable 'Bake Animation back to Scene' options if there is at least one roster
	int $numClipsInRoster = `cteRoster -q -numClips`;

	menuItem -divider true;
	menuItem -label (uiRes("m_cteEdMenu.kCTEBakeRemoveTEAnimation"))
		-annotation (uiRes("m_cteEdMenu.kCTEBakeRemoveTEAnimationAnnot"))
		-enable ($numClipsInRoster >= 1)
		-command ("cteBakeAndRemoveTEAnimations")
		BakeRemoveAllAnimationTE;

	menuItem -label (uiRes("m_cteEdMenu.kCTEDeleteAllTEAnimation"))
		-annotation (uiRes("m_cteEdMenu.kCTEDeleteAllTEAnimationAnnot"))
		-enable 1
		-command ("cteDeleteAllTEAnimations")
		DeleteAllAnimationTE;
		
	// register event listeners
	scriptJob -compressUndo true -permanent -parent $editor -event teMuteChanged ("onMuteChanged()");
	scriptJob -compressUndo true -permanent -parent $editor -event teClipModified ("onClipsModified()");
	scriptJob -compressUndo true -permanent -parent $editor -event teClipRemoved ("onClipsModified()");
	scriptJob -compressUndo true -permanent -parent $editor -event teClipAdded ("onClipsModified()");
	scriptJob -compressUndo true -permanent -parent $editor -event teCompositionAdded ("onClipsModified()");
	scriptJob -compressUndo true -permanent -parent $editor -event teCompositionRemoved ("onClipsModified()");
	scriptJob -compressUndo true -permanent -parent $editor -event teCompositionActiveChanged ("onClipsModified()");
	scriptJob -compressUndo true -permanent -parent $editor -event teCompositionNameChanged ("onClipsModified()");
}

global proc onClipsModified()
{
	int $numClipsInRoster = `cteRoster -q -numClips`;
	if ($numClipsInRoster <= 0)
	{
		menuItem -e -enable 0 BakeRemoveAllAnimationTE;
	}
	else{
		menuItem -e -enable 1 BakeRemoveAllAnimationTE;
	}
}

global proc buildCTEEditorViewMenu(string $editor, string $parent)
{	
	int $dimWhenNoSelect = 0;
	setParent -menu $parent;

	if (`menu -query -numberOfItems $parent` != 0)
		return;
		

	menuItem -label (uiRes("m_cteEdMenu.kFrameTools"))
		-subMenu true -tearOff true
		-allowOptionBoxes true frameAnimItem;

		menuItem -label (uiRes("m_cteEdMenu.kFrameAll")) 
			-annotation (uiRes("m_cteEdMenu.kFrameAllAnnot"))
			-ke "a"				
			-command ("cteEditor -edit -lookAt all " + $editor );

		menuItem -label (uiRes("m_cteEdMenu.kFrameSelection")) 
			-annotation (uiRes("m_cteEdMenu.kFrameSelectionAnnot"))
			-ke "f"
			-command ("cteEditor -edit -lookAt selected " + $editor );

		menuItem -label (uiRes("m_cteEdMenu.kFramePlaybackRange")) 
			-annotation (uiRes("m_cteEdMenu.kFramePlaybackRangeAnnot")) 
			-command (
				"$start = `playbackOptions -query -minTime`; $end = `playbackOptions -query -maxTime`; $buffer = ($end - $start) * 0.025; " +
				"animView " +
				"-startTime ($start - $buffer) " +
				"-endTime ($end + $buffer) " +
				 $editor
			);
			
	setParent -m ..;
			
	menuItem -label (uiRes("m_cteEdMenu.kCenterCurrentTime")) 
		-annotation (uiRes("m_cteEdMenu.kCenterCurrentTimeAnnot")) 
		-command ("cteEditor -edit -lookAt currentTime " + $editor);
}


global proc buildCTEEditorMenu(string $editor, string $parent, string $collectionName )
{	
	string $menu = `menu -label (uiRes("m_cteEdMenu.kEdit"))
		-tearOff true
		-familyImage "menuIconEdit.png"
		-allowOptionBoxes true`;

	menu -edit -postMenuCommand 
		("buildCTEEditorEditMenu " + $editor + " " + $menu) $menu;


	string $menu = `menu -label (uiRes("m_cteEdMenu.kView"))
		-tearOff true
		-familyImage "menuIconView.png"
		-allowOptionBoxes true`;

	menu -edit -postMenuCommand 
		("buildCTEEditorViewMenu " + $editor + " " + $menu) $menu;


	setParent -menu ..;
}

global proc buildCTEPopupMenuItems(string $editor, string $menu, string $collectionName)
{
	if (`popupMenu -edit -exists $menu`) 
	{
		setParent -menu $menu;
		
		menu -e -deleteAllItems $menu;
		
		// add context-based options
		string $menuContext[] = `cteEditor -query -contextMenu $editor`;
		
		if (size($menuContext) > 0)
		{
			string $context = $menuContext[0];		// first parameter is the context name			
			addCustomContextMenuOptions($context, $menuContext);
		}		
	}	
}

global proc addCustomContextMenuOptions(string $context, string $args[])
{
	if ($context == "track")
	{
		// Example:
		/*menuItem -label (uiRes("m_cteEdMenu.kCTETrackCustomOption"))
				-command ("")
				-enable 1;*/
	}
	else if ($context == "timeline")
	{
		// Example:
		/*menuItem -label (uiRes("m_cteEdMenu.kCTETimelineCustomOption"))
				-command ("")
				-enable 1;*/
	}

	else if ($context == "roster")
	{
		// Obtain roster size and enable 'Bake Animation back to Scene' options if there is at least one roster
		int $singleRosterSize = `cteRoster -q -numClips $args[1]`;

		menuItem -label (uiRes("m_cteEdMenu.kCTEBakeRemoveAnimation"))
				-enable $singleRosterSize
                -command ("cteContextMenuBakeAndRemoveAnimations " + $args[1])
				BakeRemoveSingleAnimationTE;

		menuItem -label (uiRes("m_cteEdMenu.kCTEDeleteAnimation"))
				-enable 1
                -command ("cteContextMenuDeleteSingleAnimations " + $args[1])
				DeleteSingleAnimationTE;
	}
    else if ($context == "clip")
    {
		menuItem -divider true -dividerLabel "Baking";
		menuItem -label (uiRes("m_cteEdMenu.kCTEMergeClipsOption"))
				-enable 1
                -command ("cteContextMenuMergeClips");
    }
}


global proc cteEdMenu(string $editor) 
{
	// Load in the common menu elements library
	//
	loadAnimMenuLibrary;
	string $collectionNameMenu = "Menu";
	string $collectionNamePopup = "Popup";
	string $parent = "CTEEditorMenu";
		
	buildCTEEditorMenu $editor $parent $collectionNameMenu;
	
	// create popup menu
	string $popupMenuName = ($editor + "PopupMenu");
	if (!`popupMenu -exists $popupMenuName`)
	{
		popupMenu
			-parent $editor
			-postMenuCommand ("buildCTEPopupMenuItems " + $editor + " " + $popupMenuName + " " + $collectionNamePopup)
			$popupMenuName;
	}
}
