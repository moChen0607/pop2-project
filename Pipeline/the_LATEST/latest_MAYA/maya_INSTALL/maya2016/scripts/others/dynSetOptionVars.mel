// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  April, 1997
//
//  Description:
//      This script contains code to create and/or set the default
//		values for the option vars for the Dynamics menus/option
//		boxes.
//
//  Input Arguments to dynCreateLayout():
//		int $theCmd -- the command for which the layout is being created
//		int $setFactorySettings -- whether to set the default values.
//
//
global proc dynSetOptionVars(string $theCmd, int $setFactorySettings)
{
	string $procName = ("set"+$theCmd+"OptionVars");
	eval ($procName+" "+$setFactorySettings);
}

global proc setParticleRenderCacheOptionVars( int $setFactorySettings )
{
	if( $setFactorySettings || !`optionVar -exists cacheForRenderGlobalsRange` ) 
	{
		optionVar -intValue cacheForRenderGlobalsRange 0; 
	}
	if( $setFactorySettings || !`optionVar -exists onlyUpdateParticles` ) 
	{
		optionVar -intValue onlyUpdateParticles 0; 
	}
	if( $setFactorySettings || !`optionVar -exists cacheAllParticleSystems` ) 
	{
		optionVar -intValue cacheAllParticleSystems 1; 
	}
}

proc setVolumeFieldOptionVars( string $field, int $setFactorySettings )
//
// Description:
//   set default values for volume field options.
{
	if ($field != "volumeAxis")
	{
		// For volume axis field, we don't want to set the default field
		// type here, because it's different from the others.
		// Also, volume exclusion does not apply.
		//
		if( $setFactorySettings || !`optionVar -exists ($field+"VolumeFieldTypesOM")` ) 
		{
			optionVar -intValue ($field+"VolumeFieldTypesOM") 1; 
		} 

		if( $setFactorySettings || !`optionVar -exists ($field+"VolumeExclusion")` ) 
		{
			optionVar -intValue ($field+"VolumeExclusion") 0; 
		} 
	}

	if( $setFactorySettings || !`optionVar -exists ($field+"VolumeOffsetX")` ) 
	{
		optionVar -floatValue ($field+"VolumeOffsetX") 0; 
	} 

	if( $setFactorySettings || !`optionVar -exists ($field+"VolumeOffsetY")` ) 
	{
		optionVar -floatValue ($field+"VolumeOffsetY") 0; 
	} 

	if( $setFactorySettings || !`optionVar -exists ($field+"VolumeOffsetZ")` ) 
	{
		optionVar -floatValue ($field+"VolumeOffsetZ") 0; 
	} 

	if( $setFactorySettings || !`optionVar -exists ($field+"VolumeSweep")` ) 
	{
		optionVar -floatValue ($field+"VolumeSweep") 360.0; 
	} 

	if( $setFactorySettings || !`optionVar -exists ($field+"TorusSectionRadius")` ) 
	{
		optionVar -floatValue ($field+"TorusSectionRadius") 0.5; 
	} 

}

global proc setAirOptionVars (int $setFactorySettings)
{
	
	if( $setFactorySettings || !`optionVar -exists airName` ) 
	{
		optionVar -stringValue airName ""; 
	} 
	if( $setFactorySettings || !`optionVar -exists airMagnitude` ) 
	{
		optionVar -floatValue airMagnitude 4.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists airAttenuation` ) 
	{
		optionVar -floatValue airAttenuation 1.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists airDirectionX` ) 
	{
		optionVar -floatValue airDirectionX 0.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists airDirectionY` ) 
	{
		optionVar -floatValue airDirectionY 1.0; 
	}
	if( $setFactorySettings || !`optionVar -exists airDirectionZ` ) 
	{
		optionVar -floatValue airDirectionZ 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists airSpeed` ) 
	{
		optionVar -floatValue airSpeed 5.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists airInheritVelocity` ) 
	{
		optionVar -floatValue airInheritVelocity 1.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists airInheritRotation` ) 
	{
		optionVar -intValue airInheritRotation 1; 
	}
	if( $setFactorySettings || !`optionVar -exists airComponent` ) 
	{
		optionVar -intValue airComponent 0; 
	}
	//if( $setFactorySettings || !`optionVar -exists airPerVertex` ) 
	//{
	//	optionVar -intValue airPerVertex 1; 
	//}
	if( $setFactorySettings || !`optionVar -exists airEnableSpread` ) 
	{
		optionVar -intValue airEnableSpread 0; 
	}
	if( $setFactorySettings || !`optionVar -exists airSpread` ) 
	{
		optionVar -floatValue airSpread 1.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists airMaxDistCBox` ) 
	{
		optionVar -intValue airMaxDistCBox 1; 
	}
	if( $setFactorySettings || !`optionVar -exists airMaxDistance` ) 
	{
		optionVar -floatValue airMaxDistance 20.0; 
	}  
	// Fix problem of reading old prefs files where
	// MaxDistCBox means "infinite distance". Now it means
	// Use Max Distance.
	if( `optionVar -q airMaxDistCBox` == 1 &&
	    `optionVar -q airMaxDistance` == 0 )
	{
		optionVar -intValue airMaxDistCBox 0;
	}

	setVolumeFieldOptionVars( "air", $setFactorySettings );
}


global proc setDragOptionVars (int $setFactorySettings)
{
	
	if( $setFactorySettings || !`optionVar -exists dragName` ) 
	{
		optionVar -stringValue dragName ""; 
	} 
	if( $setFactorySettings || !`optionVar -exists dragMagnitude` ) 
	{
		optionVar -floatValue dragMagnitude 0.05; 
	} 
	if( $setFactorySettings || !`optionVar -exists dragAttenuation` ) 
	{
		optionVar -floatValue dragAttenuation 1.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists dragDirectionX` ) 
	{
		optionVar -floatValue dragDirectionX 0.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists dragDirectionY` ) 
	{
		optionVar -floatValue dragDirectionY 0.0; 
	}
	if( $setFactorySettings || !`optionVar -exists dragDirectionZ` ) 
	{
		optionVar -floatValue dragDirectionZ 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists dragUseDirection` ) 
	{
		optionVar -intValue dragUseDirection 0; 
	}
	//if( $setFactorySettings || !`optionVar -exists dragPerVertex` ) 
	//{
	//	optionVar -intValue dragPerVertex 1; 
	//}
	if( $setFactorySettings || !`optionVar -exists dragMaxDistCBox` ) 
	{
		optionVar -intValue dragMaxDistCBox 0; 
	}  
	if( $setFactorySettings || !`optionVar -exists dragMaxDistance` ) 
	{
		optionVar -floatValue dragMaxDistance 0.0; 
	}  

	setVolumeFieldOptionVars( "drag", $setFactorySettings );
}

global proc setGravityOptionVars (int $setFactorySettings)
{
	
	if( $setFactorySettings || !`optionVar -exists gravityName` ) 
	{
		optionVar -stringValue gravityName ""; 
	} 
	if( $setFactorySettings || !`optionVar -exists gravityMagnitude` ) 
	{
		optionVar -floatValue gravityMagnitude 9.8; 
	} 
	if( $setFactorySettings || !`optionVar -exists gravityAttenuation` ) 
	{
		optionVar -floatValue gravityAttenuation 0.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists gravityDirectionX` ) 
	{
		optionVar -floatValue gravityDirectionX 0.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists gravityDirectionY` ) 
	{
		optionVar -floatValue gravityDirectionY -1.0; 
	}
	if( $setFactorySettings || !`optionVar -exists gravityDirectionZ` ) 
	{
		optionVar -floatValue gravityDirectionZ 0.0; 
	}  
	//if( $setFactorySettings || !`optionVar -exists gravityPerVertex` ) 
	//{
	//	optionVar -intValue gravityPerVertex 1; 
	//}
	if( $setFactorySettings || !`optionVar -exists gravityMaxDistCBox` ) 
	{
		optionVar -intValue gravityMaxDistCBox 0; 
	}  
	if( $setFactorySettings || !`optionVar -exists gravityMaxDistance` ) 
	{
		optionVar -floatValue gravityMaxDistance 0.0; 
	}  

	setVolumeFieldOptionVars( "gravity", $setFactorySettings );
}

global proc setNewtonOptionVars (int $setFactorySettings)
{
	
	if( $setFactorySettings || !`optionVar -exists newtonName` ) 
	{
		optionVar -stringValue newtonName ""; 
	} 
	if( $setFactorySettings || !`optionVar -exists newtonMagnitude` ) 
	{
		optionVar -floatValue newtonMagnitude 5.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists newtonAttenuation` ) 
	{
		optionVar -floatValue newtonAttenuation 1.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists newtonMinDistance` ) 
	{
		optionVar -floatValue newtonMinDistance 0.2; 
	}  
	//if( $setFactorySettings || !`optionVar -exists newtonPerVertex` ) 
	//{
	//	optionVar -intValue newtonPerVertex 1; 
	//}
	if( $setFactorySettings || !`optionVar -exists newtonMaxDistCBox` ) 
	{
		optionVar -intValue newtonMaxDistCBox 0; 
	}  
	if( $setFactorySettings || !`optionVar -exists newtonMaxDistance` ) 
	{
		optionVar -floatValue newtonMaxDistance 0.0; 
	}  
	// Fix problem of reading old prefs files where
	// MaxDistCBox means "infinite distance". Now it means
	// Use Max Distance.
	if( `optionVar -q newtonMaxDistCBox` == 1 &&
	    `optionVar -q newtonMaxDistance` == 0 )
	{
		optionVar -intValue newtonMaxDistCBox 0;
	}

	setVolumeFieldOptionVars( "newton", $setFactorySettings );
}


global proc setRadialOptionVars (int $setFactorySettings)
{
	
	if( $setFactorySettings || !`optionVar -exists radialName` ) 
	{
		optionVar -stringValue radialName ""; 
	} 
	if( $setFactorySettings || !`optionVar -exists radialMagnitude` ) 
	{
		optionVar -floatValue radialMagnitude 5.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists radialAttenuation` ) 
	{
		optionVar -floatValue radialAttenuation 1.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists radialType` ) 
	{
		optionVar -floatValue radialType 0.0; 
	}
	//if( $setFactorySettings || !`optionVar -exists radialPerVertex` ) 
	//{
	//	optionVar -intValue radialPerVertex 1; 
	//}
	if( $setFactorySettings || !`optionVar -exists radialMaxDistCBox` ) 
	{
		optionVar -intValue radialMaxDistCBox 1; 
	}  
	if( $setFactorySettings || !`optionVar -exists radialMaxDistance` ) 
	{
		optionVar -floatValue radialMaxDistance 20.0; 
	}  
	// Fix problem of reading old prefs files where
	// MaxDistCBox means "infinite distance". Now it means
	// Use Max Distance.
	if( `optionVar -q radialMaxDistCBox` == 1 &&
	    `optionVar -q radialMaxDistance` == 0 )
	{
		optionVar -intValue radialMaxDistCBox 0;
	}

	setVolumeFieldOptionVars( "radial", $setFactorySettings );
}


global proc setTurbulenceOptionVars (int $setFactorySettings)
{
	
	if( $setFactorySettings || !`optionVar -exists turbulenceName` ) 
	{
		optionVar -stringValue turbulenceName ""; 
	} 
	if( $setFactorySettings || !`optionVar -exists turbulenceMagnitude` ) 
	{
		optionVar -floatValue turbulenceMagnitude 5.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists turbulenceAttenuation` ) 
	{
		optionVar -floatValue turbulenceAttenuation 1.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists turbulenceFrequency` ) 	{
		optionVar -floatValue turbulenceFrequency 1.0; 
	}
	if( $setFactorySettings || !`optionVar -exists turbulencePhaseX` ) 
	{
		optionVar -floatValue turbulencePhaseX 0.0; 
	}
	if( $setFactorySettings || !`optionVar -exists turbulencePhaseY` ) 
	{
		optionVar -floatValue turbulencePhaseY 0.0; 
	}
	if( $setFactorySettings || !`optionVar -exists turbulencePhaseZ` ) 
	{
		optionVar -floatValue turbulencePhaseZ 0.0; 
	}
	if( $setFactorySettings || !`optionVar -exists turbulenceNoiseLevel` ) 
	{
		optionVar -intValue turbulenceNoiseLevel 0; 
	}
	if( $setFactorySettings || !`optionVar -exists turbulenceNoiseRatio` ) 
	{
		optionVar -floatValue turbulenceNoiseRatio 0.707; 
	}
	if( $setFactorySettings || !`optionVar -exists turbulenceMaxDistCBox` ) 
	{
		optionVar -intValue turbulenceMaxDistCBox 0; 
	}  
	if( $setFactorySettings || !`optionVar -exists turbulenceMaxDistance` ) 
	{
		optionVar -floatValue turbulenceMaxDistance 0.0; 
	}  

	// Fix problem of reading old prefs files where
	// MaxDistCBox means "infinite distance". Now it means
	// Use Max Distance.
	if( `optionVar -q turbulenceMaxDistCBox` == 1 &&
	    `optionVar -q turbulenceMaxDistance` == 0 )
	{
		optionVar -intValue turbulenceMaxDistCBox 0;
	}

	setVolumeFieldOptionVars( "turbulence", $setFactorySettings );
}

global proc setUniformOptionVars (int $setFactorySettings)
{
	
	if( $setFactorySettings || !`optionVar -exists uniformName` ) 
	{
		optionVar -stringValue uniformName ""; 
	} 
	if( $setFactorySettings || !`optionVar -exists uniformMagnitude` ) 
	{
		optionVar -floatValue uniformMagnitude 5.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists uniformAttenuation` ) 
	{
		optionVar -floatValue uniformAttenuation 1.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists uniformDirectionX` ) 
	{
		optionVar -floatValue uniformDirectionX 1.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists uniformDirectionY` ) 
	{
		optionVar -floatValue uniformDirectionY 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists uniformDirectionZ` ) 
	{
		optionVar -floatValue uniformDirectionZ 0.0; 
	}  
	//if( $setFactorySettings || !`optionVar -exists uniformPerVertex` ) 
	//{
	//	optionVar -intValue uniformPerVertex 1; 
	//}
	if( $setFactorySettings || !`optionVar -exists uniformMaxDistCBox` ) 
	{
		optionVar -intValue uniformMaxDistCBox 0; 
	}  
	if( $setFactorySettings || !`optionVar -exists uniformMaxDistance` ) 
	{
		optionVar -floatValue uniformMaxDistance 0.0; 
	}  
	// Fix problem of reading old prefs files where
	// MaxDistCBox means "infinite distance". Now it means
	// Use Max Distance.
	if( `optionVar -q uniformMaxDistCBox` == 1 &&
	    `optionVar -q uniformMaxDistance` == 0 )
	{
		optionVar -intValue uniformMaxDistCBox 0;
	}

	setVolumeFieldOptionVars( "uniform", $setFactorySettings );
}


global proc setVortexOptionVars (int $setFactorySettings)
{
	
	if( $setFactorySettings || !`optionVar -exists vortexName` ) 
	{
		optionVar -stringValue vortexName ""; 
	} 
	if( $setFactorySettings || !`optionVar -exists vortexMagnitude` ) 
	{
		optionVar -floatValue vortexMagnitude 5.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists vortexAttenuation` ) 
	{
		optionVar -floatValue vortexAttenuation 1.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists vortexAxisX` ) 
	{
		optionVar -floatValue vortexAxisX 0.0; 
	}
	if( $setFactorySettings || !`optionVar -exists vortexAxisY` ) 
	{
		optionVar -floatValue vortexAxisY 1.0; 
	}
	if( $setFactorySettings || !`optionVar -exists vortexAxisZ` ) 
	{
		optionVar -floatValue vortexAxisZ 0.0; 
	}
	//if( $setFactorySettings || !`optionVar -exists vortexPerVertex` ) 
	//{
	//	optionVar -intValue vortexPerVertex 1; 
	//}
	if( $setFactorySettings || !`optionVar -exists vortexMaxDistCBox` ) 
	{
		optionVar -intValue vortexMaxDistCBox 0; 
	}  
	if( $setFactorySettings || !`optionVar -exists vortexMaxDistance` ) 
	{
		optionVar -floatValue vortexMaxDistance 0.0; 
	}  
	// Fix problem of reading old prefs files where
	// MaxDistCBox means "infinite distance". Now it means
	// Use Max Distance.
	if( `optionVar -q vortexMaxDistCBox` == 1 &&
	    `optionVar -q vortexMaxDistance` == 0 )
	{
		optionVar -intValue vortexMaxDistCBox 0;
	}

	setVolumeFieldOptionVars( "vortex", $setFactorySettings );
}


global proc setVolumeAxisOptionVars (int $setFactorySettings)
{
	if( $setFactorySettings || !`optionVar -exists volumeAxisName` ) 
	{
		optionVar -stringValue volumeAxisName ""; 
	} 
	if( $setFactorySettings || !`optionVar -exists volumeAxisMagnitude` ) 
	{
		optionVar -floatValue volumeAxisMagnitude 5.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists volumeAxisAttenuation` ) 
	{
		optionVar -floatValue volumeAxisAttenuation 0.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists volumeAxisInvertAttenuation` ) 
	{
		optionVar -floatValue volumeAxisInvertAttenuation 0; 
	} 
	if( $setFactorySettings || !`optionVar -exists volumeAxisMaxDistCBox` ) 
	{
		optionVar -intValue volumeAxisMaxDistCBox 0; 
	}  
	if( $setFactorySettings || !`optionVar -exists volumeAxisMaxDistance` ) 
	{
		optionVar -floatValue volumeAxisMaxDistance 0.0; 
	}  

	setVolumeFieldOptionVars( "volumeAxis", $setFactorySettings );

	// Set the default for volume shape to cube.
	//
	if( $setFactorySettings || !`optionVar -exists volumeAxisVolumeFieldTypesOM` ) 
	{
		optionVar -intValue volumeAxisVolumeFieldTypesOM 2; 
	} 


	if( $setFactorySettings || !`optionVar -exists volumeAxisDirectionX` ) 
	{
		optionVar -floatValue volumeAxisDirectionX 1.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists volumeAxisDirectionY` ) 
	{
		optionVar -floatValue volumeAxisDirectionY 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists volumeAxisDirectionZ` ) 
	{
		optionVar -floatValue volumeAxisDirectionZ 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists volumeAxisAwayFromCenter` ) 
	{
		optionVar -floatValue volumeAxisAwayFromCenter 1.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists volumeAxisAwayFromAxis` ) 
	{
		optionVar -floatValue volumeAxisAwayFromAxis 1.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists volumeAxisAlongAxis` ) 
	{
		optionVar -floatValue volumeAxisAlongAxis 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists volumeAxisAroundAxis` ) 
	{
		optionVar -floatValue volumeAxisAroundAxis 0.0; 
	}  
	//if( $setFactorySettings || !`optionVar -exists volumeAxisRandomSpread` ) 
	//{
	//	optionVar -floatValue volumeAxisRandomSpread 0.0; 
	//}  
	if( $setFactorySettings || !`optionVar -exists volumeAxisDirectionalSpeed` ) 
	{
		optionVar -floatValue volumeAxisDirectionalSpeed 0.0; 
	}  

	if( $setFactorySettings || !`optionVar -exists volumeAxisTurbulence` ) 
	{
		optionVar -floatValue volumeAxisTurbulence 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists volumeAxisTurbulenceSpeed` ) 
	{
		optionVar -floatValue volumeAxisTurbulenceSpeed 0.2; 
	}  

	if( $setFactorySettings || !`optionVar -exists volumeAxisTurbulenceFrequencyX` ) 
	{
		optionVar -floatValue volumeAxisTurbulenceFrequencyX 1.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists volumeAxisTurbulenceFrequencyY` ) 
	{
		optionVar -floatValue volumeAxisTurbulenceFrequencyY 1.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists volumeAxisTurbulenceFrequencyZ` ) 
	{
		optionVar -floatValue volumeAxisTurbulenceFrequencyZ 1.0; 
	}  

	if( $setFactorySettings || !`optionVar -exists volumeAxisTurbulenceOffsetX` ) 
	{
		optionVar -floatValue volumeAxisTurbulenceOffsetX 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists volumeAxisTurbulenceOffsetY` ) 
	{
		optionVar -floatValue volumeAxisTurbulenceOffsetY 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists volumeAxisTurbulenceOffsetZ` ) 
	{
		optionVar -floatValue volumeAxisTurbulenceOffsetZ 0.0; 
	}  

	if( $setFactorySettings || !`optionVar -exists volumeAxisDetailTurbulence` ) 
	{
		optionVar -floatValue volumeAxisDetailTurbulence 0.0; 
	}  
		
}

global proc setEmitterOptionVars (int $setFactorySettings)
{
	
	if( $setFactorySettings || !`optionVar -exists emitterName` ) 
	{
		optionVar -stringValue emitterName ""; 
	} 

	if( $setFactorySettings || !`optionVar -exists emitterTypesOM` ) 
	{
		optionVar -intValue emitterTypesOM 1; 
	} 
	if( $setFactorySettings || !`optionVar -exists emitterRate` ) 
	{
		optionVar -floatValue emitterRate 100.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterScaleRateByObjectSize` ) 
	{
		optionVar -intValue emitterScaleRateByObjectSize 0; 
	} 
	if( $setFactorySettings || !`optionVar -exists emitterNeedParentUV` ) 
	{
		optionVar -intValue emitterNeedParentUV 0; 
	} 
	if( $setFactorySettings || !`optionVar -exists emitterCycleOM` ) 
	{
		optionVar -intValue emitterCycleOM 1; 
	} 
	if( $setFactorySettings || !`optionVar -exists emitterCycleInterval` ) 
	{
		optionVar -intValue emitterCycleInterval 1; 
	} 

	if( $setFactorySettings || !`optionVar -exists emitterMaxDistance` ) 
	{
		optionVar -floatValue emitterMaxDistance 0.0; 
	}
	if( $setFactorySettings || !`optionVar -exists emitterMinDistance` ) 
	{
		optionVar -floatValue emitterMinDistance 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterDirectionX` ) 
	{
		optionVar -floatValue emitterDirectionX 1.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterDirectionY` ) 
	{
		optionVar -floatValue emitterDirectionY 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterDirectionZ` ) 
	{
		optionVar -floatValue emitterDirectionZ 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterSpread` ) 
	{
		optionVar -floatValue emitterSpread 0.0; 
	}  

	if( $setFactorySettings || !`optionVar -exists emitterSpeed` ) 
	{
		optionVar -floatValue emitterSpeed 1.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterSpeedRandomRange` ) 
	{
		optionVar -floatValue emitterSpeedRandomRange 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterNormalSpeed` ) 
	{
		optionVar -floatValue emitterNormalSpeed 1.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterTangentSpeed` ) 
	{
		optionVar -floatValue emitterTangentSpeed 0.0; 
	}  

	if( $setFactorySettings || !`optionVar -exists emitterVolumeShapeOM` ) 
	{
		optionVar -intValue emitterVolumeShapeOM 1; 
	} 
	if( $setFactorySettings || !`optionVar -exists emitterVolumeOffsetX` ) 
	{
		optionVar -floatValue emitterVolumeOffsetX 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterVolumeOffsetY` ) 
	{
		optionVar -floatValue emitterVolumeOffsetY 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterVolumeOffsetZ` ) 
	{
		optionVar -floatValue emitterVolumeOffsetZ 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterVolumeSweep` ) 
	{
		optionVar -floatValue emitterVolumeSweep 360.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterTorusSectionRadius` ) 
	{
		optionVar -floatValue emitterTorusSectionRadius 0.5; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterAwayFromCenter` ) 
	{
		optionVar -floatValue emitterAwayFromCenter 1.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterAwayFromAxis` ) 
	{
		optionVar -floatValue emitterAwayFromAxis 1.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterAlongAxis` ) 
	{
		optionVar -floatValue emitterAlongAxis 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterAroundAxis` ) 
	{
		optionVar -floatValue emitterAroundAxis 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterRandomSpread` ) 
	{
		optionVar -floatValue emitterRandomSpread 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterDirectionalSpeed` ) 
	{
		optionVar -floatValue emitterDirectionalSpeed 0.0; 
	}  
	if( $setFactorySettings || !`optionVar -exists emitterScaleSpeedBySize` ) 
	{
		optionVar -intValue emitterScaleSpeedBySize 0; 
	} 
	if( $setFactorySettings || !`optionVar -exists emitterDieOnExit` ) 
	{
		optionVar -intValue emitterDieOnExit 0; 
	} 
}

global proc setCollisionOptionVars (int $setFactorySettings)
{
	if( $setFactorySettings || !`optionVar -exists collisionResilience` )
	{
		optionVar -floatValue collisionResilience 1.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists collisionFriction` ) 
	{
		optionVar -floatValue collisionFriction 0.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists collisionOffset` ) 
	{
		optionVar -floatValue collisionOffset 0.01; 
	} 
}


global proc setGoalOptionVars (int $setFactorySettings)
{
	if( $setFactorySettings || !`optionVar -exists goalWeight` )
	{
		optionVar -floatValue goalWeight 0.5; 
	} 
	if( $setFactorySettings || !`optionVar -exists goalUseTransform` )
	{
		optionVar -intValue goalUseTransform 0; 
	} 
}


global proc setRigidOptionVars (int $setFactorySettings)
{

	if( $setFactorySettings || !`optionVar -exists rigidName` ) 
	{
		optionVar -stringValue rigidName ""; 
	} 

	if( $setFactorySettings || !`optionVar -exists rigidCollide` ) 
	{
		optionVar -intValue rigidCollide 0; 
	}  

    if( $setFactorySettings || !`optionVar -exists rigidMass` ) 
	{
        optionVar -floatValue rigidMass 1.00;
    }

	if( $setFactorySettings || !`optionVar -exists rigidComCBox` ) 
	{
		optionVar -intValue rigidComCBox 0; 
	}  

    if( $setFactorySettings || !`optionVar -exists rigidComX` ) 
	{
        optionVar -floatValue rigidComX 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidComY` ) 
	{
        optionVar -floatValue rigidComY 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidComZ` ) 
	{
        optionVar -floatValue rigidComZ 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidStatFriction` ) 
	{
        optionVar -floatValue rigidStatFriction 0.200;
    }

    if( $setFactorySettings || !`optionVar -exists rigidDynFriction` ) 
	{
        optionVar -floatValue rigidDynFriction 0.200;
    }

    if( $setFactorySettings || !`optionVar -exists rigidBounciness` ) 
	{
        optionVar -floatValue rigidBounciness 0.600;
    }

    if( $setFactorySettings || !`optionVar -exists rigidDamping` ) 
	{
        optionVar -floatValue rigidDamping 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidImpulseX` ) 
	{
        optionVar -floatValue rigidImpulseX 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidImpulseY` ) 
	{
        optionVar -floatValue rigidImpulseY 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidImpulseZ` ) 
	{
        optionVar -floatValue rigidImpulseZ 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidImpulsePosX` ) 
	{
        optionVar -floatValue rigidImpulsePosX 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidImpulsePosY` ) 
	{
        optionVar -floatValue rigidImpulsePosY 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidImpulsePosZ` ) 
	{
        optionVar -floatValue rigidImpulsePosZ 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidSpinImpulseX` ) 
	{
        optionVar -floatValue rigidSpinImpulseX 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidSpinImpulseY` ) 
	{
        optionVar -floatValue rigidSpinImpulseY 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidSpinImpulseZ` ) 
	{
        optionVar -floatValue rigidSpinImpulseZ 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidAngVelocityX` ) 
	{
        optionVar -floatValue rigidAngVelocityX 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidAngVelocityY` ) 
	{
        optionVar -floatValue rigidAngVelocityY 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidAngVelocityZ` ) 
	{
        optionVar -floatValue rigidAngVelocityZ 0.0;
    }

	if( $setFactorySettings || !`optionVar -exists rigidPosCBox` ) 
	{
		optionVar -intValue rigidPosCBox 0; 
	}  

    if( $setFactorySettings || !`optionVar -exists rigidPosX` ) 
	{
        optionVar -floatValue rigidPosX 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidPosY` ) 
	{
        optionVar -floatValue rigidPosY 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidPosZ` ) 
	{
        optionVar -floatValue rigidPosZ 0.0;
    }

	if( $setFactorySettings || !`optionVar -exists rigidOrCBox` ) 
	{
		optionVar -intValue rigidOrCBox 0; 
	}  

    if( $setFactorySettings || !`optionVar -exists rigidOrX` ) 
	{
        optionVar -floatValue rigidOrX 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidOrY` ) 
	{
        optionVar -floatValue rigidOrY 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidOrZ` ) 
	{
        optionVar -floatValue rigidOrZ 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidInitVelocityX` ) 
	{
        optionVar -floatValue rigidInitVelocityX 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidInitVelocityY` ) 
	{
        optionVar -floatValue rigidInitVelocityY 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidInitVelocityZ` ) 
	{
        optionVar -floatValue rigidInitVelocityZ 0.0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidStandInType` ) 
	{
		optionVar -intValue rigidStandInType 1;
	}

    if( $setFactorySettings || !`optionVar -exists rigidLayer` ) 
	{
        optionVar -intValue rigidLayer 0;
    }

    if( $setFactorySettings || !`optionVar -exists rigidTesselation` ) 
	{
        optionVar -intValue rigidTesselation 200;
    }

	if( $setFactorySettings || !`optionVar -exists rigidCacheCBox` ) 
	{
		optionVar -intValue rigidCacheCBox 0; 
	}  

}

global proc setActiveRigidOptionVars (int $setFactorySettings)
{
    if( $setFactorySettings || !`optionVar -exists rigidCollisionType` ) 
	{
		optionVar -intValue rigidCollisionType 1;
	}
	setRigidOptionVars($setFactorySettings);
}

global proc setPassiveRigidOptionVars (int $setFactorySettings)
{
    if( $setFactorySettings || !`optionVar -exists rigidCollisionType` ) 
	{
		optionVar -intValue rigidCollisionType 0;
	}
	setRigidOptionVars($setFactorySettings);
}

global proc setSoftOptionVars (int $setFactorySettings)
{
	
    if( $setFactorySettings || !`optionVar -exists softCreationOption` ) 
	{
		optionVar -intValue softCreationOption 1;
	}

	if( $setFactorySettings || !`optionVar -exists softGoal` ) 
	{
		optionVar -intValue softGoal 0; 
	}
	if( $setFactorySettings || !`optionVar -exists softHide` ) 
	{
		optionVar -intValue softHide 0; 
	}
	if( $setFactorySettings || !`optionVar -exists softHistory` ) 
	{
		optionVar -intValue softHistory 0; 
	}

	if( $setFactorySettings || !`optionVar -exists softWeight` ) 
	{
		optionVar -floatValue softWeight 0.5; 
	} 
}

global proc setNSoftOptionVars (int $setFactorySettings)
{
	setSoftOptionVars ($setFactorySettings);
}

global proc setConstrainOptionVars (int $setFactorySettings)
{
	
	if( $setFactorySettings || !`optionVar -exists constrainName` ) 
	{
		optionVar -stringValue constrainName ""; 
	} 

	if( $setFactorySettings || !`optionVar -exists constrainTypesOM` ) 
	{
		optionVar -intValue constrainTypesOM 1; 
	}

	if( $setFactorySettings || !`optionVar -exists constrainInterCB` ) 
	{
		optionVar -intValue constrainInterCB 0; 
	}

	if( $setFactorySettings || !`optionVar -exists constrainPosCBox` ) 
	{
		optionVar -intValue constrainPosCBox 0; 
	}  

	if( $setFactorySettings || !`optionVar -exists constrainPosX` ) 
	{
		optionVar -floatValue constrainPosX 0.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists constrainPosY` ) 
	{
		optionVar -floatValue constrainPosY 0.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists constrainPosZ` ) 
	{
		optionVar -floatValue constrainPosZ 0.0; 
	} 

	if( $setFactorySettings || !`optionVar -exists constrainOrientX` ) 
	{
		optionVar -floatValue constrainOrientX 0.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists constrainOrientY` ) 
	{
		optionVar -floatValue constrainOrientY 0.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists constrainOrientZ` ) 
	{
		optionVar -floatValue constrainOrientZ 0.0; 
	} 

	if( $setFactorySettings || !`optionVar -exists constrainSpringStiffness` ) 
	{
		optionVar -floatValue constrainSpringStiffness 5.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists constrainSpringDamping` ) 
	{
		optionVar -floatValue constrainSpringDamping 0.1; 
	} 

	if( $setFactorySettings || !`optionVar -exists constrainSpringRestLengthCBox` ) 
	{
		optionVar -intValue constrainSpringRestLengthCBox 0; 
	}  

	if( $setFactorySettings || !`optionVar -exists constrainSpringRestLength` ) 
	{
		optionVar -floatValue constrainSpringRestLength 1.0; 
	} 
}


global proc setSpringOptionVars (int $setFactorySettings)
{
	
	if( $setFactorySettings || !`optionVar -exists springName` ) 
	{
		optionVar -stringValue springName ""; 
	} 
	if( $setFactorySettings || !`optionVar -exists springAdd` ) 
	{
		optionVar -intValue springAdd 0; 
	} 
	if( $setFactorySettings || !`optionVar -exists springNoDuplicate` ) 
	{
		optionVar -intValue springNoDuplicate 0; 
	} 
	if( $setFactorySettings || !`optionVar -exists springExclusive` ) 
	{
		optionVar -intValue springExclusive 0; 
	} 

	if( $setFactorySettings || !`optionVar -exists springMethodsOM` ) 
	{
		optionVar -intValue springMethodsOM 1; 
	} 
	if( $setFactorySettings || !`optionVar -exists springMinDistance` ) 
	{
		optionVar -floatValue springMinDistance 0.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists springMaxDistance` ) 
	{
		optionVar -floatValue springMaxDistance 0.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists springWireWalkLength` ) 
	{
		optionVar -intValue springWireWalkLength 1; 
	} 

	if( $setFactorySettings || !`optionVar -exists springUseStiffnessPS` ) 
	{
		optionVar -intValue springUseStiffnessPS 0; 
	} 
	if( $setFactorySettings || !`optionVar -exists springUseDampingPS` ) 
	{
		optionVar -intValue springUseDampingPS 0; 
	} 
	if( $setFactorySettings || !`optionVar -exists springUseRestLengthPS` ) 
	{
		optionVar -intValue springUseRestLengthPS 1; 
	} 

	if( $setFactorySettings || !`optionVar -exists springStiffness` ) 
	{
		optionVar -floatValue springStiffness 1.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists springDamp` ) 
	{
		optionVar -floatValue springDamp 0.2; 
	} 
	if( $setFactorySettings || !`optionVar -exists springRestLength` ) 
	{
		optionVar -floatValue springRestLength 0; 
	} 
	if( $setFactorySettings || !`optionVar -exists springStartForceWeight` ) 
	{
		optionVar -floatValue springStartForceWeight 1.0; 
	} 
	if( $setFactorySettings || !`optionVar -exists springEndForceWeight` ) 
	{
		optionVar -floatValue springEndForceWeight 1.0; 
	} 
}

global proc setDynamicAttributeOptionVars( string $attributeName, int $setFactorySettings, 
										   string $default ) 
{
    string $omName = $attributeName + "OM";
    
    if(!`exists instancerOptionsValues_melToUI`){	
		 source "dynCreateLayout.mel";
	}	 

	if ( $setFactorySettings || (! `optionVar -exists $omName`) ) 
	{
		optionVar -stringValue $omName (instancerOptionsValues_melToUI($default)); 
	} 
}

global proc setParticleInstancerOptionVars (int $setFactorySettings)
{
	if(!`exists instancerOptionsValues_melToUI`){	
		 source "dynCreateLayout.mel";
	}		 
	if ( $setFactorySettings || ! `optionVar -exists particleInstancerName` ) 
	{
		optionVar -stringValue particleInstancerName ""; 
	} 
	if ( $setFactorySettings || ! `optionVar -exists PIautoCycleOM` ) 
	{
		optionVar -stringValue PIautoCycleOM (instancerOptionsValues_melToUI("None")); 
	} 
	if ( $setFactorySettings || ! `optionVar -exists PIautoCycleStepSize` ) 
	{
		optionVar -floatValue PIautoCycleStepSize 1.0; 
	} 
	if ( $setFactorySettings || ! `optionVar -exists PIautoCycleStepUnitsOM` ) 
	{
		optionVar -stringValue PIautoCycleStepUnitsOM (instancerOptionsValues_melToUI("Frames")); 
	} 
	if ( $setFactorySettings || ! `optionVar -exists PIlevelOfDetailOM` ) 
	{
		optionVar -stringValue PIlevelOfDetailOM (instancerOptionsValues_melToUI("Geometry")); 
	} 
	if ( $setFactorySettings || ! `optionVar -exists PIrotationUnitsOM` ) 
	{
		optionVar -stringValue PIrotationUnitsOM (instancerOptionsValues_melToUI("Degrees")); 
	} 
	if ( $setFactorySettings || ! `optionVar -exists PIrotationOrderOM` ) 
	{
		optionVar -stringValue PIrotationOrderOM (instancerOptionsValues_melToUI("XYZ")); 
	} 

	if ( $setFactorySettings || ! `optionVar -exists PIdisplayAllTypes` ) 
	{
		optionVar -intValue PIdisplayAllTypes 0; 
	} 
	
	setDynamicAttributeOptionVars( "Position",		 $setFactorySettings, "worldPosition" );
	setDynamicAttributeOptionVars( "Rotation",       $setFactorySettings, "None" );
	setDynamicAttributeOptionVars( "AimDirection",   $setFactorySettings, "None" );
	setDynamicAttributeOptionVars( "AimPosition",    $setFactorySettings, "None" );
	setDynamicAttributeOptionVars( "AimAxis",        $setFactorySettings, "None" );
	setDynamicAttributeOptionVars( "AimUpAxis",      $setFactorySettings, "None" );
	setDynamicAttributeOptionVars( "AimWorldUp",     $setFactorySettings, "None" );
	setDynamicAttributeOptionVars( "Scale",          $setFactorySettings, "None" );
	setDynamicAttributeOptionVars( "Shear",          $setFactorySettings, "None" );
	setDynamicAttributeOptionVars( "RotationType",   $setFactorySettings, "None" );
	setDynamicAttributeOptionVars( "ObjectIndex", 	 $setFactorySettings, "None" );
	setDynamicAttributeOptionVars( "Visibility", 	 $setFactorySettings, "None" );
	setDynamicAttributeOptionVars( "CycleStartObject",$setFactorySettings, "None" );
	setDynamicAttributeOptionVars( "Age", 	  		 $setFactorySettings, "age" );
}



