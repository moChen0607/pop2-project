// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//	Procedure Name:
//		getFileRuleDirectory  
//
//	Description:
//		This script returns the full directory path of the location
//		set for the given file rule. If multiple existing paths are
//		set, the first one is used. If none of the paths exist, the
//		first one is created.
//
//	Input Arguments: 
//		string $fileRule: the file rule to get the location path for
// 
//	Returns:
//		string: the full directory location path
//
global proc string getFileRuleDirectory(string $fileRule)
{
	string $subdir = `workspace -fre $fileRule`;
	string $buffer[];
	int $numTokens = `tokenize $subdir ";" $buffer`;
	int $i;
	string $dir = "";
	int $foundExistingDir = 0;
	for($i = 0; $i < $numTokens; $i++) {
		string $nextDir = `workspace -expandName $buffer[$i]`;
		$foundExistingDir = `filetest -d $nextDir`;
		if($i == 0 || $foundExistingDir) {
			$dir = $nextDir;
			if($foundExistingDir) {
				break;
			}
		}
	}
	if(!$foundExistingDir) {
		sysFile -makeDir $dir;
	}
	return $dir;
}
