// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
// Creation Date: Oct 19, 1998
//<doc>
//<name objectLayer>
//<synopsis>
//    string objectLayer( string )
//<keywords>
//		DAG displayLayer layer member
//
//<description>
//      All eligible objects (ie. DAG objects) must be in exactly one layer.
//      This script returns the layer to which the given object belongs.
//
//<flags>
//      string $object
//          The name of the object who's layer is to be found.
//
//<examples>
//      // Create an object, which will automatically go into the defaultLayer
//      createNode transform -n father;
//      objectLayer father;
//      // Result : defaultLayer //
//
//      // Put the object into a layer and verify membership
//      createDisplayLayer -e -n fatherLayer;
//      editDisplayLayerMembers fatherLayer father;
//      objectLayer father;
//      // Result : fatherLayer //
//
//      // The time node is not a DAG node and so has no layer
//      objectLayer time1;
//
//      // The above blank line indicates that there was no return value
//
//<returns>
//      string: The layer the object belongs to.  NULL if the object is
//              not eligible for layer membership.
//</doc>
//

global proc string objectLayer(string $object)
{
	// First determine that the object is a legal layer member.
	string $drawOvr = ($object + ".drawOverride");
	if( ! `objExists $drawOvr` )
	{
		return "";
	}

	// Now look across the draw override connection to find the layer it
	// belongs to.
	string $connList[] = `listConnections -t displayLayer -d false $drawOvr`;
	if( size($connList) == 1 )
	{
		return $connList[0];
	}
	return "defaultLayer";
}
