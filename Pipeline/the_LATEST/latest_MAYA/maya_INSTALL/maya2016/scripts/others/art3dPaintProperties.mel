// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  June 2000
//
//  Description:
//      Option tool property window for 3d Paint tool.
//
//
//  Procedure Name:
//      art3dPaintProperties 
//
//  Description:
//      Set up the the option values.
//
//  Input Arguments:
//
//  Return Value:
//      None.
//

proc art3dCreateBrushFrame(
	string	$parent
)
//
//	Description:
//		Deal with stamp properties: radius, opacity, profiles.
//
{
	setUITemplate -pushTemplate OptionsTemplate;
	setParent $parent;

	columnLayout;
		floatSliderGrp  -field true -label (uiRes("m_art3dPaintProperties.kRadiusU"))  
			-annotation (uiRes("m_art3dPaintProperties.kBrushRadiusAnnot"))
			-precision 4 
			-min 0.0 -max 50.0 
			-fieldMaxValue 500.0
			-step 0.05  
		art3dUppRadiusSlider;

		floatSliderGrp -field true -label (uiRes("m_art3dPaintProperties.kRadiusL"))   
			-annotation (uiRes("m_art3dPaintProperties.kRadiusLimitAnnot"))
			-precision 4 
			-min 0.0 -max 50.0 
			-fieldMaxValue 500.0
			-step 0.05  
		art3dLowRadiusSlider;

		separator -h 10 -style "none";

		rowColumnLayout -nc 7 
				-cw 1 100 -cw 2 35 -cw 3 35 
				-cw 4 35  -cw 5 35 -cw 6 35 
				-cs 6 10  -cw 7 26 -cs 7 10;

			text -al "right" 
				 -label (uiRes("m_art3dPaintProperties.kArtisan")) 
				 -annotation (uiRes("m_art3dPaintProperties.kArtisanAnnot"))
				art3dProfileText;

			symbolCheckBox -w 33 -h 36 -i "circleGaus.png"  
				-annotation (uiRes("m_art3dPaintProperties.kGaussianAnnot")) art3dGaussianChBx;
			symbolCheckBox -w 33 -h 36 -i "circlePoly.png" 
				-annotation (uiRes("m_art3dPaintProperties.kSoftBrushAnnot")) art3dPolyBrushChBx;
			symbolCheckBox -w 33 -h 36 -i "circleSolid.png" 
				-annotation (uiRes("m_art3dPaintProperties.kSolidBrushAnnot")) art3dSolidChBx;
			symbolCheckBox -w 33 -h 36 -i "rect.png"
				-annotation (uiRes("m_art3dPaintProperties.kSquareBrushAnnot")) art3dRectBrushChBx;
			symbolCheckBox -w 33 -h 36 -i "file.png"
				-annotation (uiRes("m_art3dPaintProperties.kShapeBrushAnnot")) art3dFileBrushChBx;
			symbolButton -w 26 -h 26 -image "navButtonBrowse.png"  
				-annotation (uiRes("m_art3dPaintProperties.kFileAnnot")) art3dShapeButton;
		setParent ..;

		separator -h 5 -style "none";

		rowColumnLayout -nc 4 
				-cw 1 100 -cw 2 35 
				-cs 3 35  -cw 3 35 -cw 4 35; 

			text -al "right" 
				 -label (uiRes("m_art3dPaintProperties.kPaintEffects")) 
				 -annotation (uiRes("m_art3dPaintProperties.kPaintAnnot"))
				art3dProfileText;

			symbolCheckBox -w 33 -h 36 -i "lastPFXBrush.png"  
				-annotation (uiRes("m_art3dPaintProperties.kLastBrushAnnot"))
				art3dLastPFXBrush;
			symbolCheckBox -w 33 -h 36 -i "templateBrushSettings.png"  
				-annotation (uiRes("m_art3dPaintProperties.kEditTemplateBrushAnnot"))
				art3dPFXBrushEditor;
			symbolCheckBox -w 33 -h 36 -i "paintEffectsBrushesLarge.png" 
				-annotation (uiRes("m_art3dPaintProperties.kGetBrushAnnot"))
				art3dVisorEditor;
		setParent ..;
		separator -h 10 -style "none";

		checkBoxGrp
			-label "" -label1 (uiRes("m_art3dPaintProperties.kRotateToStroke")) 
			-annotation (uiRes("m_art3dPaintProperties.kBrushAlignmentAnnot"))
		art3dPaintBrushAlignmentChkBox;

		separator -h 5 -style "none";
	setParent ..;

	setUITemplate -popTemplate;
}

proc art3dCreateColorFrame( 
	string 	$parent
)
//
//	Description:
//		Create a 3d paint color options UI.
//
{
	setUITemplate -pushTemplate OptionsTemplate;
	setParent $parent;

	columnLayout;
		rowColumnLayout -nc 2 -cw 1 330 -cw 2 20;
			// Paint Color.
			colorSliderGrp -label (uiRes("m_art3dPaintProperties.kColorValue"))  
				-annotation (uiRes("m_art3dPaintProperties.kPaintColorAnnot"))
                -cw 3 100
			art3dColorSlider;

			symbolButton -image "eyeDropper.png" art3dPaintColorPick;
		setParent .. ;

		floatSliderGrp -field true -label (uiRes("m_art3dPaintProperties.kOpacity"))  
			-annotation (uiRes("m_art3dPaintProperties.kBrushOpacityAnnot"))
			-precision 4 
			-min 0.0 -max 1.0 
			-step 0.05 
		art3dOpacitySlider;
   
		separator -h 15 -style "none";
	setParent ..;

	setUITemplate -popTemplate;
}


proc art3dCreateFloodFrame( 
	string 	$parent
)
//
//	Description:
//		Create a 3d paint Flood options UI.
//
{
	setUITemplate -pushTemplate OptionsTemplate;
	setParent $parent;

	columnLayout;
		// Flood Color.
		colorSliderGrp -label (uiRes("m_art3dPaintProperties.kFloodColor"))  
			-annotation (uiRes("m_art3dPaintProperties.kFloodColorAnnot"))
		art3dFloodColorSlider;

		floatSliderGrp -field true -label (uiRes("m_art3dPaintProperties.kFloodOpacity"))  
			-annotation (uiRes("m_art3dPaintProperties.kFloodOpacityAnnot"))
			-precision 4 
			-min 0.0 -max 1.0 
			-step 0.05 
		art3dFloodOpacitySlider;
   
		separator -h 15 -style "none";

		// Flood Buttons.
		rowColumnLayout -nc 2 
						-cs 1 45 
						-cw 1 120 -cs 2 40 
						-cw 2 120;

			button -label (uiRes("m_art3dPaintProperties.kFloodPaint"))  
				-width 120  
				-annotation (uiRes("m_art3dPaintProperties.kFloodPaintAnnot"))
			art3dFloodPaintButton; // Flood Paint

			button -label (uiRes("m_art3dPaintProperties.kFloodErase"))  
				-width 120  
				-annotation (uiRes("m_art3dPaintProperties.kFloodEraseAnnot"))
			art3dFloodEraseButton; // Flood Erase
		setParent ..;
		separator -h 5 -style "none";
		
		// Flood Option.
		radioButtonGrp -nrb 2 -sl 1
				-label (uiRes("m_art3dPaintProperties.kFlood")) 
				-label1 (uiRes("m_art3dPaintProperties.kAll")) 
				-label2 (uiRes("m_art3dPaintProperties.kSelectedFaces")) 
				-annotation (uiRes("m_art3dPaintProperties.kFloodingOptionAnnot"))
		art3dFloodOption;
	setParent ..;

	setUITemplate -popTemplate;
}


proc art3dCreateOperationFrame( 
	string 	$parent
)
//
//	Description:
//		Create a 3d paint operation options UI.
//
{
	setUITemplate -pushTemplate OptionsTemplate;
	setParent $parent;
	
	columnLayout;
	string $paint = (uiRes("m_art3dPaintProperties.kPaint"));
		// Paint Operation.
		radioButtonGrp -nrb 3 
				-label (uiRes("m_art3dPaintProperties.kRadioBtnGroupArtisan")) 
				-label1 $paint 
				-label2 (uiRes("m_art3dPaintProperties.kErase")) 
				-label3 (uiRes("m_art3dPaintProperties.kClone"))  
				-annotation (uiRes("m_art3dPaintProperties.kAttributePaintAnnot"))
		art3dPaintOperation0;

		radioButtonGrp -shareCollection art3dPaintOperation0 
				-nrb 3
                -label (uiRes("m_art3dPaintProperties.kRadioBtnGroupPaintEffects"))  
                -label1 $paint  
                -label2 (uiRes("m_art3dPaintProperties.kSmear"))  
                -label3 (uiRes("m_art3dPaintProperties.kBlur"))  
		art3dPaintOperation1;
		
		 rowColumnLayout -nc 1 -cs 1 135 -cw 1 134;
         button -label (uiRes("m_art3dPaintProperties.kSetEraseImage"))  -c ("art3dPaintCtx -e -updateEraseTex `currentCtx`") 
				-annotation (uiRes("m_art3dPaintProperties.kSetUpdateAnnot")) art3dEraseUpdateButton;
    	 setParent ..;

		separator -h 5 -style "none";

		rowColumnLayout -nc 1 -cs 1 135  -cw 1 134;
			button -label (uiRes("m_art3dPaintProperties.kResetBrushes"))  
					-annotation (uiRes("m_art3dPaintProperties.kResetAnnot"))
				art3dResetBrushesButton;
		setParent ..;

		separator -h 5 -style "none";

		// Alpha blend mode.
		optionMenuGrp -label (uiRes("m_art3dPaintProperties.kBlendMode"))  
			-annotation (uiRes("m_art3dPaintProperties.kBlendModeAnnot")) art3dBlendModeOptionMenu;
			menuItem -label (uiRes("m_art3dPaintProperties.kDefault")) 	artBlendModeMenuItem0;
			menuItem -label (uiRes("m_art3dPaintProperties.kLighten")) 	artBlendModeMenuItem1;
			menuItem -label (uiRes("m_art3dPaintProperties.kDarken")) 	artBlendModeMenuItem2;
			menuItem -label (uiRes("m_art3dPaintProperties.kMultiply")) 	artBlendModeMenuItem3;
			menuItem -label (uiRes("m_art3dPaintProperties.kScreen")) 	artBlendModeMenuItem4;
			menuItem -label (uiRes("m_art3dPaintProperties.kOverlay")) 	artBlendModeMenuItem5;
			menuItem -label (uiRes("m_art3dPaintProperties.kConstant")) 	artBlendModeMenuItem6;

		separator -h 10 -style "none";

		radioButtonGrp -nrb 2
			-label (uiRes("m_art3dPaintProperties.kCloneBrushMode"))  
			-label1 (uiRes("m_art3dPaintProperties.kDynamic"))  
			-label2 (uiRes("m_art3dPaintProperties.kStatic")) 
			-annotation (uiRes("m_art3dPaintProperties.kCloneBrushModeAnnot"))
		art3dCloneMode;

		rowColumnLayout -nc 1 -cs 1 135  -cw 1 134;
			button -label (uiRes("m_art3dPaintProperties.kSetCloneSource"))  
				-annotation (uiRes("m_art3dPaintProperties.kSwitchtoCloneAnnot"))
			art3dCloneSourceSelectionButton;
		setParent ..;

		separator -h 5 -style "none";

		intSliderGrp -field true -label (uiRes("m_art3dPaintProperties.kBlurIntensity")) 
			-annotation (uiRes("m_art3dPaintProperties.kControltheIntensityAnnot"))
			-minValue 1 -maxValue 20 
			-value 8
		art3dBlurIntSlider;

		separator -h 5 -style "none";

	setParent ..;

	setUITemplate -popTemplate;
}


proc art3dCreateFileTextureFrame( 
	string 	$parent
)
//
//	Description:
//		Create a 3d paint file texture options UI.
//
{
	global int $gTextFieldHeight ;
	global int $gOptionFieldHeight ;
	global string $g3dPaintAttrName ;
	
	setUITemplate -pushTemplate OptionsTemplate;
	setParent $parent;

	columnLayout -adj false;
	string $attributetopaint = (uiRes("m_art3dPaintProperties.kAttributeToPaint"));
		// Texture Attribute to paint.
		optionMenuGrp -label $attributetopaint  
				-annotation (uiRes("m_art3dPaintProperties.kShaderAnnot"))
				art3dPaintAttrOptionMenu;

		// bug 227512 
		// for paint hair/toon attributes 
		textFieldGrp -label $attributetopaint -enable false -editable false -text $g3dPaintAttrName art3dPaintHairAttr;
		
		$gTextFieldHeight = `textFieldGrp -q -height art3dPaintHairAttr` ;
		$gOptionFieldHeight = `optionMenuGrp -q -height art3dPaintAttrOptionMenu` ;
		
		// bug 227512 
		// if we are in a context different than normal 3dPaint context
		// then hide the attribute list and display a read only text box
		// The value displayed in the text box is set in art3dPaintValues
		if( `currentCtx` == "art3dPaintContext" )
		{	
			textFieldGrp -e -visible false -height 1 art3dPaintHairAttr;
			optionMenuGrp -e -visible true  art3dPaintAttrOptionMenu ;
		}
		else
		{
			textFieldGrp -e -visible true art3dPaintHairAttr;
			optionMenuGrp -e -visible false -height 1 art3dPaintAttrOptionMenu ;
		}

		separator -h 5 -style "none";

		// Assign Textures button.
		rowColumnLayout -nc 1 -cs 1 135;
			button  -label (uiRes("m_art3dPaintProperties.kAssignEditTextures")) 
				-annotation (uiRes("m_art3dPaintProperties.kAssignEditTexturesAnnot"))
				-c ("art3dPaintAssignFileTexture( \"" + $parent + "\")")
			art3dAssignTexturesButton;

			separator -h 5 -style "none";

			button  -label (uiRes("m_art3dPaintProperties.kSaveTextures")) 
				-annotation (uiRes("m_art3dPaintProperties.kSaveTexturesAnnot"))				-c ("art3dPaintSaveFileTextures( \"" + $parent + "\")")
			art3dSaveTexturesButton;
            
            separator -h 5 -style "none";

			button  -label (uiRes("m_art3dPaintProperties.kReloadFileTextures")) 
				-annotation (uiRes("m_art3dPaintProperties.kReloadFileTexturesAnnot"))
			art3dReloadTexturesButton;
		setParent ..;

		separator -h 5 -style "none";

		// Update on each stroke.
		checkBoxGrp -ncb 1 
			-label "" -label1 (uiRes("m_art3dPaintProperties.kUpdateOnStroke")) 
			-annotation (uiRes("m_art3dPaintProperties.kUpdateOnStrokeAnnot"))
		art3dSaveOnStrokeChkBox;

		// Save texture on each stroke.
		checkBoxGrp -ncb 1 
			-label "" -label1 (uiRes("m_art3dPaintProperties.kSaveTextureOnStroke")) 
			-annotation (uiRes("m_art3dPaintProperties.kSaveTextureOnStrokeAnnot"))
		art3dSaveTextureOnStrokeChkBox;

		// Fill in the background color.
		checkBoxGrp -ncb 1 
			-label "" -label1 (uiRes("m_art3dPaintProperties.kExtendSeamColor")) 
			-annotation (uiRes("m_art3dPaintProperties.kExtendSeamColorAnnot"))
		art3dExtendFillColorChkBox;

		// Solo the texture as a diffuse texture.
		checkBoxGrp -ncb 1 
			-label "" -label1 (uiRes("m_art3dPaintProperties.kSoloAsDiffuse")) 
			-annotation (uiRes("m_art3dPaintProperties.kSoloAsDiffuseAnnot"))
		art3dSoloAsDiffuseChkBox;

	setParent ..;

	setUITemplate -popTemplate;
}
	

global proc art3dPressureMappings()
{
	menuItem -label (uiRes("m_art3dPaintProperties.kOff"))  		aOff;
	menuItem -label (uiRes("m_art3dPaintProperties.kScale"))  	aScale;
	menuItem -label (uiRes("m_art3dPaintProperties.kWidth"))  	aWidth;
	menuItem -label (uiRes("m_art3dPaintProperties.kSoftness")) 	aSoftness;
	menuItem -label (uiRes("m_art3dPaintProperties.kMenuItemColor"))  	aColor;
	menuItem -label (uiRes("m_art3dPaintProperties.kMenuItemTransparency")) 	aTransparency;
	menuItem -label (uiRes("m_art3dPaintProperties.kTubeWidth"))  	aTubeWidth;
	menuItem -label (uiRes("m_art3dPaintProperties.kTubeLength")) 	aTubeLength;
	menuItem -label (uiRes("m_art3dPaintProperties.kMenuItemIncandescence")) 	aIncandescence;
	menuItem -label (uiRes("m_art3dPaintProperties.kGlowSpread")) 	aGlowSpread;
	menuItem -label (uiRes("m_art3dPaintProperties.kTubesPerStep"))  aTubesPerStep;
	menuItem -label (uiRes("m_art3dPaintProperties.kElevation"))  	aElevation;
	menuItem -label (uiRes("m_art3dPaintProperties.kAzimuth"))  		aAzimuth;
	menuItem -label (uiRes("m_art3dPaintProperties.kPathFollow"))  	aPathFollow;
	menuItem -label (uiRes("m_art3dPaintProperties.kPathAttract"))  	aPathAttract;
	menuItem -label (uiRes("m_art3dPaintProperties.kRandom"))  		aRandom;
	menuItem -label (uiRes("m_art3dPaintProperties.kWiggle"))  		aWiggle;
	menuItem -label (uiRes("m_art3dPaintProperties.kCurl"))  			aCurl;
	menuItem -label (uiRes("m_art3dPaintProperties.kNoise"))  		aNoise;
	menuItem -label (uiRes("m_art3dPaintProperties.kTurbulence"))  aTurbulence;
	menuItem -label (uiRes("m_art3dPaintProperties.kNumTwigs"))   aNumTwigs;
	menuItem -label (uiRes("m_art3dPaintProperties.kNumLeaves"))  aNumLeaves;
	menuItem -label (uiRes("m_art3dPaintProperties.kNumPetals"))  aNumPetals;
	menuItem -label (uiRes("m_art3dPaintProperties.kSurfaceOffset"))  aSurfaceOffset;
}

proc art3dCreateStrokeFrame( 
	string 	$parent 
)
//
//	Description:
//		Create a 3d Paint Stroke UI.
//
{
	setUITemplate -pushTemplate OptionsTemplate;
	setParent $parent;

	columnLayout;
		// Projective Paint Mode checkbox.
		checkBoxGrp 
			-label "" -label1 (uiRes("m_art3dPaintProperties.kScreenProjection"))  
			-annotation (uiRes("m_art3dPaintProperties.kPaintModeAnnot"))
		art3dProjectionModeChkBox;

		// Reflection Mode.
		checkBoxGrp 
			-label "" -label1 (uiRes("m_art3dPaintProperties.kReflection"))  
			-annotation (uiRes("m_art3dPaintProperties.kReflectionAnnot"))
		art3dReflectionModeChkBox;
			
		// Reflection Axis
		string $x = (uiRes("m_art3dPaintProperties.kX"));
		string $y = (uiRes("m_art3dPaintProperties.kY"));
		radioButtonGrp -nrb 3 -cw4 131 50 50 50
			-label (uiRes("m_art3dPaintProperties.kReflectionAxis")) 
			-labelArray3 $x $y (uiRes("m_art3dPaintProperties.kZ"))
			-annotation (uiRes("m_art3dPaintProperties.kReflectionAxisAnnot"))
		art3dReflectionRadBtn;

		separator -h 10 -style "none";
		separator -h 10 -style "single";
		separator -h 10 -style "none";
	
		// Stamp Quality Sliders.
		floatSliderGrp -field true -label (uiRes("m_art3dPaintProperties.kStampSpacing"))  
			-annotation (uiRes("m_art3dPaintProperties.kStampSpacingAnnot"))
			-precision 4 
			-min 0.01 -max 10.0 
			-fieldMinValue 0.001 -fieldMaxValue 100.0
			-v 1.0 
			-step 0.01
		art3dStampSpacingSlider;

		floatSliderGrp -field true -label (uiRes("m_art3dPaintProperties.kStampDepth"))  
			-annotation (uiRes("m_art3dPaintProperties.kStampDepthAnnot"))
			-precision 4 
			-min 0.01 -max 10.0
			-fieldMinValue 0.001 -fieldMaxValue 100.0
			-v 1.0 
			-step 0.01
		art3dStampDepthSlider;
    setParent ..;

	setUITemplate -popTemplate;
}


proc art3dCreatePressureFrame( 
	string 	$parent 
)
//
//	Description:
//		Create a 3d Paint Stylus Pressure UI.
//
{
	setUITemplate -pushTemplate OptionsTemplate;
	setParent $parent;

	columnLayout;
		// Tablet Pressure.
		checkBoxGrp 
			-label "" -label1 (uiRes("m_art3dPaintProperties.kStylusPressure"))  
			-annotation (uiRes("m_art3dPaintProperties.kStylusPressureAnnot"))
		art3dStylusPressureChkBox;

		columnLayout art3dArtisanPressure;
			optionMenuGrp -label (uiRes("m_art3dPaintProperties.kArtisanPressure"))   
					-cal 1 "right" 
					-annotation (uiRes("m_art3dPaintProperties.kMappingAnnot"))
				art3dArtisanPressure;
				menuItem -label (uiRes("m_art3dPaintProperties.kMenuItemOpacity"))	art3dMapOpacity;
				menuItem -label (uiRes("m_art3dPaintProperties.kRadius")) 	art3dMapRadius;
				menuItem -label (uiRes("m_art3dPaintProperties.kBoth")) 		art3dMapBoth;
		setParent ..;


		separator -h 10 -style "none";

		// Paint Effects Pressure.
		columnLayout art3dPaintEffectPressure;
                text -al "left" 
                    -label (uiRes("m_art3dPaintProperties.kPaintEffectsPressure")) 
                    art3dPaintEffectsPressureText;
       
			optionMenuGrp -label (uiRes("m_art3dPaintProperties.kPressureMap1"))   -cal 1 "right"
				art3dPressureMap1;
				art3dPressureMappings();

			floatSliderGrp -field true -label (uiRes("m_art3dPaintProperties.kPressureMin1"))  
				-precision 4
				-min 0.0 -max 1.0
				-fmn -10000.0 -fmx 10000.0
				-v 0.0
			art3dPressureMin1;

			floatSliderGrp -field true -label (uiRes("m_art3dPaintProperties.kPressureMax1"))  
				-precision 4
				-min 0.0 -max 1.0
				-fmn -10000.0 -fmx 10000.0
				-v 1.0
			art3dPressureMax1;

			optionMenuGrp -label (uiRes("m_art3dPaintProperties.kPressureMap2"))   -cal 1 "right"
				art3dPressureMap2;
				art3dPressureMappings();

			floatSliderGrp -field true -label (uiRes("m_art3dPaintProperties.kPressureMin2"))  
				-precision 4
				-min 0.0 -max 1.0
				-fmn -10000.0 -fmx 10000.0
				-v 0.0
			art3dPressureMin2;

			floatSliderGrp -field true -label (uiRes("m_art3dPaintProperties.kPressureMax2"))  
				-precision 4
				-min 0.0 -max 1.0
				-fmn -10000.0 -fmx 10000.0
				-v 1.0
			art3dPressureMax2;

			optionMenuGrp -label (uiRes("m_art3dPaintProperties.kPressureMap3"))   -cal 1 "right"
				art3dPressureMap3;
				art3dPressureMappings();
	
			floatSliderGrp -field true -label (uiRes("m_art3dPaintProperties.kPressureMin3"))  
				-precision 4
				-min 0.0 -max 1.0
				-fmn -10000.0 -fmx 10000.0
				-v 0.0
			art3dPressureMin3;
	
			floatSliderGrp -field true -label (uiRes("m_art3dPaintProperties.kPressureMax3"))  
				-precision 4
				-min 0.0 -max 1.0
				-fmn -10000.0 -fmx 10000.0
				-v 1.0
			art3dPressureMax3;
    	setParent ..;
		separator -h 5 -style "none";

    setParent ..;

	setUITemplate -popTemplate;
}


proc art3dCreateDisplayFrame( 
	string 	$parent 
)
//
//	Description:
//		Create a 3d paint display opitons.
//
{
	setUITemplate -pushTemplate OptionsTemplate;
	setParent $parent;

	columnLayout;
		checkBoxGrp 
			-label ""
			-label1 (uiRes("m_art3dPaintProperties.kDrawOutline"))  
			-annotation (uiRes("m_art3dPaintProperties.kDrawOutlineAnnot"))
		art3dDrawOutlineChkBox;

		checkBoxGrp -ncb 1 
			-label ""
			-label1 (uiRes("m_art3dPaintProperties.kDrawOutlineWhilePainting"))  
			-annotation (uiRes("m_art3dPaintProperties.kDrawOutlineWhilePaintingAnnot"))
		art3dBrushWhilePaintingChkBox;

		checkBoxGrp -ncb 1 
			-label ""
			-label1 (uiRes("m_art3dPaintProperties.kDrawBrushFeedback"))  
			-annotation (uiRes("m_art3dPaintProperties.kDrawBrushFeedbackAnnot"))
		art3dBrushFeedbackChkBox;

		checkBoxGrp 
			-label ""
			-label1 (uiRes("m_art3dPaintProperties.kShowWireframe"))  
			-annotation (uiRes("m_art3dPaintProperties.kShowWireframeAnnot"))
		art3dShowActiveLinesChkBox;
    setParent ..;

	setUITemplate -popTemplate;
}



// =======================================================
// Main Procedure.
// =======================================================
global proc art3dPaintProperties()
{
	source "art3dPaintCallback.mel";
	source "art3dPaintValues.mel";

	setUITemplate -pushTemplate DefaultTemplate;

	string $parent = `toolPropertyWindow -q -location`;
	setParent $parent;

	columnLayout -adj true art3dPaint;
		
	// Brush options.
	frameLayout	-label (uiRes("m_art3dPaintProperties.kBrush"))  
		-collapsable true -collapse false 
		art3dBrushFrame;

		// Create brush option menu.
		art3dCreateBrushFrame("art3dBrushFrame");
	setParent ..;

	// Color options.
	frameLayout -label (uiRes("m_art3dPaintProperties.kColorOptions"))   
		-collapsable true -collapse false 
		art3dColorFrame;

		// Create the color options.
		art3dCreateColorFrame( "art3dColorFrame" );
	setParent ..;

	// Flood options.
	frameLayout -label (uiRes("m_art3dPaintProperties.kFloodOptions"))   
		-collapsable true -collapse false 
		art3dFloodFrame;

		// Create the Flood options.
		art3dCreateFloodFrame( "art3dFloodFrame" );
	setParent ..;

	// 3d Paint operations options.
	frameLayout -label (uiRes("m_art3dPaintProperties.kPaintOperations"))   
		-collapsable true -collapse false 
		art3dOperationFrame;

		// Create paint operation options.
		art3dCreateOperationFrame( "art3dOperationFrame" );
	setParent ..;
	
	// File Texture options.
	frameLayout -label (uiRes("m_art3dPaintProperties.kFileTextures"))   
		-collapsable true -collapse false 
		art3dFileTextureFrame;

		// Create file texture options.
		art3dCreateFileTextureFrame( "art3dFileTextureFrame" );
	setParent ..;
	
	// Stroke options.
	frameLayout -label (uiRes("m_art3dPaintProperties.kStroke"))   
		-collapsable true -collapse true
		art3dStrokeFrame;

		// Create stroke options.
		art3dCreateStrokeFrame( "art3dStrokeFrame" );
	setParent ..;
	
	// Stylus Pressure options.
	frameLayout -label (uiRes("m_art3dPaintProperties.kStylusPressureOptions"))   
		-collapsable true -collapse true
		art3dPressureFrame;

		// Create stroke options.
		art3dCreatePressureFrame( "art3dPressureFrame" );
	setParent ..;
	
	// Display options.
	frameLayout -label (uiRes("m_art3dPaintProperties.kDisplay"))   
		-collapsable true -collapse true
		art3dDisplayFrame;

		// Create stroke options.
		art3dCreateDisplayFrame( "art3dDisplayFrame" );
	setParent ..;

	setParent ..;		// columnLayout art3dPaint;

	setUITemplate -popTemplate;

	// Define the callbacks.
	art3dPaintCallback( "art3dPaintCtx" );
}

global proc string alphaBlend_melToUI(string $mel)
{
	string $result = $mel;
	
    if ($mel == "Default") {
		$result  = uiRes("m_art3dPaintProperties.kDefault");
	} else if ($mel == "Lighten") {
		$result  = uiRes("m_art3dPaintProperties.kLighten");
	} else if ($mel == "Darken") {
		$result  = uiRes("m_art3dPaintProperties.kDarken");
	} else if ($mel == "Multiply") {
		$result  = uiRes("m_art3dPaintProperties.kMultiply");
	} else if ($mel == "Screen") {
		$result  = uiRes("m_art3dPaintProperties.kScreen");
	} else if ($mel == "Overlay") {
		$result  = uiRes("m_art3dPaintProperties.kOverlay");
	} else if ($mel == "Constant") {
		$result  = uiRes("m_art3dPaintProperties.kConstant");
	} else {
 		uiToMelMsg( "alphaBlend_melToUI", $mel, 1 );
    }

	return $result;
}

global proc string alphaBlend_uiToMel(string $ui)
{
	string $result = $ui;

    if( $ui == (uiRes("m_art3dPaintProperties.kDefault")) ) {
        $result = "Default";
    } else if ( $ui == (uiRes("m_art3dPaintProperties.kLighten")) ) {
        $result = "Lighten";
    } else if ( $ui == (uiRes("m_art3dPaintProperties.kDarken")) ) {
        $result = "Darken";
    } else if ( $ui == (uiRes("m_art3dPaintProperties.kMultiply")) ) {
        $result = "Multiply";
    } else if ( $ui == (uiRes("m_art3dPaintProperties.kScreen")) ) {
        $result = "Screen";
    } else if ( $ui == (uiRes("m_art3dPaintProperties.kOverlay")) ) {
        $result = "Overlay";
    } else if ( $ui == (uiRes("m_art3dPaintProperties.kConstant")) ) {
        $result = "Constant";
    } else {
		uiToMelMsg( "alphaBlend_uiToMel", $ui, 1 );
    }
    
    return $result;    	
}

global proc string attributeToPaint_uiToMel(string $ui)
{
	python("import maya.app.general.art3dPaintGetPaintableAttr");
	string $result = `python("maya.app.general.art3dPaintGetPaintableAttr.attributeToPaint_uiToMel('"+$ui+"')")`;
	return $result;
}

global proc string artisanPressureValue_uiToMel(string $ui)
{
	string $result = $ui;

    if( $ui == (uiRes("m_art3dPaintProperties.kMenuItemOpacity")) ) {
        $result = "Opacity";
    } else if ( $ui == (uiRes("m_art3dPaintProperties.kRadius")) ) {
        $result = "Radius";
    } else if ( $ui == (uiRes("m_art3dPaintProperties.kBoth")) ) {
        $result = "Both";
    } else {
		uiToMelMsg( "artisanPressureValue_uiToMel", $ui, 1 );
    }

    return $result;	
}

global proc string attributeToPaint_melToUI(string $mel)
{
	python("import maya.app.general.art3dPaintGetPaintableAttr");
	string $result = `python("maya.app.general.art3dPaintGetPaintableAttr.attributeToPaint_melToUI('"+$mel+"')")`;
	return $result;
}


global proc string artisanPressure_melToUI(string $mel)
{
	string $result = $mel;

	if ($mel == "Opacity") {
		$result = uiRes("m_art3dPaintProperties.kMenuItemOpacity");
	} else if ($mel == "Radius") {
		$result = uiRes("m_art3dPaintProperties.kRadius");
	} else if ($mel == "Both") {
		$result = uiRes("m_art3dPaintProperties.kBoth");
	} else {
		uiToMelMsg( "artisanPressure_melToUI", $mel, 1 );
	}

	return $result;
}
