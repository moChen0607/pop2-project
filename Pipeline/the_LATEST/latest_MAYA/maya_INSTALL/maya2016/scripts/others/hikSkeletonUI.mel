// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
// hikSkeletonUI.mel
//
// Description:
//		Methods for creating and updating the skeleton generator UI
//


////////////////////////////////////////////////////////////////////////
// Local methods...
////////////////////////////////////////////////////////////////////////


proc syncUIFromSkeletonGenerator()
{
	string $currentName = hikGetCurrentCharacter();
	string $skeletonGeneratorNode="";
	
	if($currentName != "")
		$skeletonGeneratorNode = hikGetSkeletonGeneratorNode($currentName);
	
	if($skeletonGeneratorNode != "")
	{
	
		string $plug;
		int $val;

		// Shoulders
		$plug = $skeletonGeneratorNode + ".ShoulderCount";
		$val = `getAttr $plug`;
		intSliderGrp -e -value $val hikSkeletonGeneratorShouldersCount;
		
		// Roll-Bones
		
		$plug = $skeletonGeneratorNode + ".WantUpperArmRollBone";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value1 $val hikSkeletonGeneratorArmRollsCheck;


		$plug = $skeletonGeneratorNode + ".WantLowerArmRollBone";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value2 $val hikSkeletonGeneratorArmRollsCheck;


		$plug = $skeletonGeneratorNode + ".WantUpperLegRollBone";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value1 $val hikSkeletonGeneratorLegRollsCheck;


		$plug = $skeletonGeneratorNode + ".WantLowerLegRollBone";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value2 $val hikSkeletonGeneratorLegRollsCheck;


		$plug = $skeletonGeneratorNode + ".SpineCount";
		$val = `getAttr $plug`;
		intSliderGrp -e -value $val hikSkeletonGeneratorSpineCount;


		$plug = $skeletonGeneratorNode + ".NeckCount";
		$val = `getAttr $plug`;
		intSliderGrp -e -value $val hikSkeletonGeneratorNeckCount;


		$plug = $skeletonGeneratorNode + ".FingerJointCount";
		$val = `getAttr $plug`;
		intSliderGrp -e -value $val hikSkeletonGeneratorFingerJointsCount;

		$plug = $skeletonGeneratorNode + ".WantMiddleFinger";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value2 $val hikSkeletonGeneratorFingersCheck1;

		$plug = $skeletonGeneratorNode + ".WantIndexFinger";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value1 $val hikSkeletonGeneratorFingersCheck1;


		$plug = $skeletonGeneratorNode + ".WantRingFinger";	
		$val = `getAttr $plug`;
		checkBoxGrp -e -value1 $val hikSkeletonGeneratorFingersCheck2;


		$plug = $skeletonGeneratorNode + ".WantPinkyFinger";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value2 $val hikSkeletonGeneratorFingersCheck2;

		$plug = $skeletonGeneratorNode + ".WantThumb";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value1 $val hikSkeletonGeneratorThumbsCheck;

		$plug = $skeletonGeneratorNode + ".WantExtraFinger";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value2 $val hikSkeletonGeneratorThumbsCheck;

		$plug = $skeletonGeneratorNode + ".ToeJointCount";
		$val = `getAttr $plug`;
		intSliderGrp -e -value $val hikSkeletonGeneratorToeJointsCount;

		$plug = $skeletonGeneratorNode + ".WantIndexToe";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value1 $val hikSkeletonGeneratorToesCheck1;

		$plug = $skeletonGeneratorNode + ".WantMiddleToe";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value2 $val hikSkeletonGeneratorToesCheck1;

		$plug = $skeletonGeneratorNode + ".WantRingToe";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value1 $val hikSkeletonGeneratorToesCheck2;

		$plug = $skeletonGeneratorNode + ".WantPinkyToe";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value2 $val hikSkeletonGeneratorToesCheck2;

		$plug = $skeletonGeneratorNode + ".WantBigToe";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value1 $val hikSkeletonGeneratorFeetThumbsCheck;

		$plug = $skeletonGeneratorNode + ".WantFootThumb";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value2 $val hikSkeletonGeneratorFeetThumbsCheck;

		$plug = $skeletonGeneratorNode + ".WantFingerBase";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value1 $val hikSkeletonGeneratorFingerExtrasCheck;	

		$plug = $skeletonGeneratorNode + ".WantToeBase";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value1 $val hikSkeletonGeneratorToeExtrasCheck;

		$plug = $skeletonGeneratorNode + ".WantInHandJoint";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value2 $val hikSkeletonGeneratorFingerExtrasCheck;

		$plug = $skeletonGeneratorNode + ".WantInFootJoint";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value2 $val hikSkeletonGeneratorToeExtrasCheck;

		$plug = $skeletonGeneratorNode + ".WantHipsTranslation";
		$val = `getAttr $plug`;
		checkBoxGrp -e -value1 $val hikSkeletonGeneratorHipsTranslationCheck;
	}
}

proc updateSkeletonButtonState()
{
	string $character = hikGetCurrentCharacter();
	iconTextCheckBox -e 
		-enable ($character != "") 
		-value `hikIsDefinitionLocked($character)`
		hikSkeletonGeneratorLockButton;

	iconTextButton -e -enable ($character != "") hikSkeletonGeneratorDeleteButton;
}


////////////////////////////////////////////////////////////////////////
// Global methods...
////////////////////////////////////////////////////////////////////////


global proc hikBuildSkeletonUI()
{
	string $labelSpineCount = (uiRes("m_hikSkeletonUI.kSpineCount"));
	string $labelCharacterScale = (uiRes("m_hikSkeletonUI.kCharacterScale"));
	string $labelNeckCount = (uiRes("m_hikSkeletonUI.kNectCount"));
	string $labelShoulderCount = (uiRes("m_hikSkeletonUI.kShoulderCount"));
	string $labelRollBones = (uiRes("m_hikSkeletonUI.kRollBones"));    
	string $labelFingers = (uiRes("m_hikSkeletonUI.kFingers"));
	string $labelFingerJointsCount = (uiRes("m_hikSkeletonUI.kFingerJointsCount"));
	string $labelExtras = (uiRes("m_hikSkeletonUI.kExtras"));
	string $labelToes = (uiRes("m_hikSkeletonUI.kToes"));
	string $labelToesJointsCount = (uiRes("m_hikSkeletonUI.kToesJoints"));

	global int $gHIKSeparatorWidth;

	// Skeleton Generator controls
	columnLayout -adjustableColumn true;
	text -label "";
		
	string $lowArmsLabel = 	(uiRes("m_hikSkeletonUI.kLowArms"));
	string $lowLegsLabel = (uiRes("m_hikSkeletonUI.kLowLegs"));
	string $middleFingerLabel = (uiRes("m_hikSkeletonUI.kMiddleFinger"));
	string $pinkyFingerLabel  = (uiRes("m_hikSkeletonUI.kPinkyFinger"));
	string $efingerLabel = (uiRes("m_hikSkeletonUI.kExtraFinger"));
	string $ihjLabel = (uiRes("m_hikSkeletonUI.kInHandJts"));
	string $fthumbLabel = (uiRes("m_hikSkeletonUI.kFootThumb"));
	string $ifjLabel = (uiRes("m_hikSkeletonUI.kInFootJts"));
	string $middleToeLabel    = (uiRes("m_hikSkeletonUI.kMiddleToe"));
	string $pinkyToeLabel     = (uiRes("m_hikSkeletonUI.kPinkyToe"));
		
	separator -w $gHIKSeparatorWidth;
	
	floatSliderGrp
		-label $labelCharacterScale -field true
		-minValue 0.5 -maxValue 2		
		-fieldMinValue 0.01 -fieldMaxValue 100
		-value 1
		-precision 2
		-cc ("hikUpdateSkeletonGeneratorCharacterScale()")
		hikSkeletonGeneratorCharacterScale;

	separator -w $gHIKSeparatorWidth;
	
	intSliderGrp
		-label $labelSpineCount -field true
		-minValue 1 -maxValue 10
		-fieldMinValue 1 -fieldMaxValue 10
		-value 3
		-cc ("hikSyncSkeletonGeneratorFromUI()")
		hikSkeletonGeneratorSpineCount;

	intSliderGrp	
		-label $labelNeckCount -field true
		-minValue 0 -maxValue 10
		-fieldMinValue 0 -fieldMaxValue 10
		-value 1
		-cc ("hikSyncSkeletonGeneratorFromUI()")
		hikSkeletonGeneratorNeckCount;

	intSliderGrp	
		-label $labelShoulderCount -field true
		-minValue 0 -maxValue 2
		-fieldMinValue 0 -fieldMaxValue 2
		-value 1
		-cc ("hikSyncSkeletonGeneratorFromUI()")
		hikSkeletonGeneratorShouldersCount;

	checkBoxGrp
		-numberOfCheckBoxes 2
		-label $labelRollBones
		-labelArray2 (uiRes("m_hikSkeletonUI.kUpArms")) $lowArmsLabel
		-cc ("hikSyncSkeletonGeneratorFromUI()")
		hikSkeletonGeneratorArmRollsCheck;

	checkBoxGrp
		-numberOfCheckBoxes 2
		-label ""
		-labelArray2 (uiRes("m_hikSkeletonUI.kUpLegs")) $lowLegsLabel
		-cc ("hikSyncSkeletonGeneratorFromUI()")
		hikSkeletonGeneratorLegRollsCheck;
	

	// FINGERS
	separator -w $gHIKSeparatorWidth;

	checkBoxGrp
		-numberOfCheckBoxes 2
		-label $labelFingers
		-labelArray2 (uiRes("m_hikSkeletonUI.kIndex")) $middleFingerLabel
		-value1 1
		-value2 1
		-cc ("hikSyncSkeletonGeneratorFromUI()")
		hikSkeletonGeneratorFingersCheck1;

	checkBoxGrp
		-numberOfCheckBoxes 2
		-label ""
		-labelArray2 (uiRes("m_hikSkeletonUI.kRing")) $pinkyFingerLabel
		-value1 1
		-value2 1
		-cc ("hikSyncSkeletonGeneratorFromUI()")
		hikSkeletonGeneratorFingersCheck2;

	checkBoxGrp
		-numberOfCheckBoxes 2
		-label ""
		-labelArray2 (uiRes("m_hikSkeletonUI.kThumb")) $efingerLabel
		-value1 1
		-cc ("hikSyncSkeletonGeneratorFromUI()")
		hikSkeletonGeneratorThumbsCheck;

	intSliderGrp	
		-label $labelFingerJointsCount -field true
		-minValue 1 -maxValue 3
		-fieldMinValue 1 -fieldMaxValue 3
		-value 3
		-cc ("hikSyncSkeletonGeneratorFromUI()")
		hikSkeletonGeneratorFingerJointsCount;

	checkBoxGrp
		-numberOfCheckBoxes 2
		-label $labelExtras
		-labelArray2 (uiRes("m_hikSkeletonUI.kFingerBase")) $ihjLabel
		-cc ("hikSyncSkeletonGeneratorFromUI()")
		hikSkeletonGeneratorFingerExtrasCheck;

	// TOES
	separator -w $gHIKSeparatorWidth;

	checkBoxGrp
		-numberOfCheckBoxes 2
		-label $labelToes
		-labelArray2 (uiRes("m_hikSkeletonUI.kIndexToe")) $middleToeLabel
		-value1 1
		-value2 1
		-cc ("hikSyncSkeletonGeneratorFromUI()")
		hikSkeletonGeneratorToesCheck1;

	checkBoxGrp
		-numberOfCheckBoxes 2
		-label ""
		-labelArray2 (uiRes("m_hikSkeletonUI.kRingToe")) $pinkyToeLabel
		-value1 1
		-value2 1
		-cc ("hikSyncSkeletonGeneratorFromUI()")
		hikSkeletonGeneratorToesCheck2;

	checkBoxGrp
		-numberOfCheckBoxes 2
		-label ""
		-labelArray2 (uiRes("m_hikSkeletonUI.kBigToe")) $fthumbLabel
		-value1 1
		-cc ("hikSyncSkeletonGeneratorFromUI()")
		hikSkeletonGeneratorFeetThumbsCheck;

	intSliderGrp	
		-label $labelToesJointsCount -field true
		-minValue 1 -maxValue 3
		-fieldMinValue 1 -fieldMaxValue 3
		-value 3
		-cc ("hikSyncSkeletonGeneratorFromUI()")
		hikSkeletonGeneratorToeJointsCount;

	checkBoxGrp
		-numberOfCheckBoxes 2
		-label $labelExtras
		-labelArray2 (uiRes("m_hikSkeletonUI.kToeBase")) $ifjLabel
		-cc ("hikSyncSkeletonGeneratorFromUI()")
		hikSkeletonGeneratorToeExtrasCheck;

	separator -w $gHIKSeparatorWidth;

	checkBoxGrp
		-numberOfCheckBoxes 1
		-label ""
		-label1 (uiRes("m_hikSkeletonUI.kHipTranslation")) 
		-cc ("hikSyncSkeletonGeneratorFromUI()")
		hikSkeletonGeneratorHipsTranslationCheck;

	separator -w $gHIKSeparatorWidth;
	setParent ..;
}

global proc hikBuildSkeletonButtons()
{
	rowLayout -numberOfColumns 4 hikSkeletonButtons;
	
	iconTextButton
		-image "HIKcreateSkel.png"
		-command "hikCreateSkeleton"
		-annotation (uiRes("m_hikSkeletonUI.kCreateSkeleton"))
		hikSkeletonGeneratorNewButton;
	
	iconTextButton
		-ltVersion "2015"
		-image "HIKmirrorSkel.png"
		-command "hikMirrorSkeleton"
		-annotation (uiRes("m_hikSkeletonUI.kMirrorSkeleton"))
		hikSkeletonGeneratorMirrorButton;

	iconTextCheckBox
		-changeCommand "hikToggleLockDefinition"
		-selectionImage "HIKCharacterization_lock.png"
		-annotation (uiRes("m_hikSkeletonUI.kHIKCharacterizationLock"))
		-image1 "HIKCharacterization_unlock.png"
		hikSkeletonGeneratorLockButton;
	
	iconTextButton
		-image "HIKCharacterization_ToolBar_Delete.png"
		-command "hikDeleteSkeleton" 
		-annotation (uiRes("m_hikSkeletonUI.kHIKDeleteSkeleton"))
		hikSkeletonGeneratorDeleteButton;

	setParent ..;
}



global proc hikUpdateSkeletonUI()
{
	if( !hikIsSkeletonTabSelected() )
		return;

//	print _NOL10N("---> hikUpdateSkeletonUI\n");
	// TODO:
	// If character has a Rig, we want to prevent the skeleton from being modified for now.

	int $enabled = 0;

	string $currCharacter = hikGetCurrentCharacter();
	if($currCharacter != "")
	{
		// The skeleton generator will be disabled if this is a referenced skeleton.
		// This is because it does joint reparenting when editing the skeleton configuration
		// which is something we cannot do in the case of a reference.
		int $isReference = `referenceQuery -isNodeReferenced $currCharacter`;
		if ( $isReference ) {
			warning (uiRes("m_hikSkeletonUI.kSkeletonGeneratorToolReferencedEditWarning"));
		}

		int $hasARig = hikHasControlRig($currCharacter); 
		int $hasDefinition = hikHasDefinition($currCharacter);
		int $lockState = hikIsDefinitionLocked( $currCharacter );
		$enabled = !$lockState;
		if( $hasDefinition && !$hasARig && !$isReference ) {
			syncUIFromSkeletonGenerator();
		}
	}

	hikSetSkeletonGeneratorEnabled($enabled);
	updateSkeletonButtonState();
}

global proc hikUpdateCurrentSkeleton()
{
	string $currCharacter = hikGetCurrentCharacter();
	if($currCharacter != "")
	{
		int $isReference = `referenceQuery -isNodeReferenced $currCharacter`;
		int $hasARig = hikHasControlRig($currCharacter); 
		int $hasDefinition = hikHasDefinition($currCharacter);
		int $lockState = hikIsDefinitionLocked( $currCharacter );
		
		if( $hasDefinition && !$hasARig && !$isReference ) 
		{
			if( !$lockState ) 
			{
				hikUpdateSkeletonFromSkeletonGeneratorNode( $currCharacter, 1.0 );
			}
		}
	}
}

global proc hikSyncSkeletonGeneratorFromUI()
{
//
// Description:
//		Sync the skeleton generator node settings from the UI
//
	string $currentName = hikGetCurrentCharacter();
	string $skeletonGeneratorNode="";

	if($currentName != "") {
		$skeletonGeneratorNode = hikGetSkeletonGeneratorNode($currentName);
	}

	// enable/disable lock and delete buttons
	updateSkeletonButtonState();

	if($skeletonGeneratorNode != "")
	{
		
		hikSyncCurrentPoseToSkeletonGenerator($currentName,$skeletonGeneratorNode);
		
		string $plug;
		int $val;
		int $ltmpCheckVal;
		
		// Shoulders
		$plug = $skeletonGeneratorNode + ".ShoulderCount";
		int $lShouldersVal = `intSliderGrp -query -value hikSkeletonGeneratorShouldersCount`;
		setAttr $plug $lShouldersVal;

		// Roll-Bones
		$ltmpCheckVal = `checkBoxGrp -query -value1 hikSkeletonGeneratorArmRollsCheck`;
		$plug = $skeletonGeneratorNode + ".WantUpperArmRollBone";
		setAttr $plug $ltmpCheckVal;
		
		$ltmpCheckVal = `checkBoxGrp -query -value2 hikSkeletonGeneratorArmRollsCheck`;
		$plug = $skeletonGeneratorNode + ".WantLowerArmRollBone";
		setAttr $plug $ltmpCheckVal;

		$ltmpCheckVal = `checkBoxGrp -query -value1 hikSkeletonGeneratorLegRollsCheck`;
		$plug = $skeletonGeneratorNode + ".WantUpperLegRollBone";
		setAttr $plug $ltmpCheckVal;

		$ltmpCheckVal = `checkBoxGrp -query -value2 hikSkeletonGeneratorLegRollsCheck`;
		$plug = $skeletonGeneratorNode + ".WantLowerLegRollBone";
		setAttr $plug $ltmpCheckVal;

		int $lSpineVal = `intSliderGrp -query -value hikSkeletonGeneratorSpineCount`;
		$plug = $skeletonGeneratorNode + ".SpineCount";
		setAttr $plug $lSpineVal;

		int $lNeckVal = `intSliderGrp -query -value hikSkeletonGeneratorNeckCount`;
		$plug = $skeletonGeneratorNode + ".NeckCount";
		setAttr $plug $lNeckVal;

		int $lFingerJointsCountVal = `intSliderGrp -query -value hikSkeletonGeneratorFingerJointsCount`;
		$plug = $skeletonGeneratorNode + ".FingerJointCount";
		setAttr $plug $lFingerJointsCountVal;

		$val = `checkBoxGrp -query -value2 hikSkeletonGeneratorFingersCheck1`;
		$plug = $skeletonGeneratorNode + ".WantMiddleFinger";
		setAttr $plug $val;

		$val = `checkBoxGrp -query -value1 hikSkeletonGeneratorFingersCheck1`;
		$plug = $skeletonGeneratorNode + ".WantIndexFinger";
		setAttr $plug $val;	

		$val = `checkBoxGrp -query -value1 hikSkeletonGeneratorFingersCheck2`;
		$plug = $skeletonGeneratorNode + ".WantRingFinger";
		setAttr $plug $val;

		$val = `checkBoxGrp -query -value2 hikSkeletonGeneratorFingersCheck2`;
		$plug = $skeletonGeneratorNode + ".WantPinkyFinger";
		setAttr $plug $val;

		$val = `checkBoxGrp -query -value1 hikSkeletonGeneratorThumbsCheck`;
		$plug = $skeletonGeneratorNode + ".WantThumb";
		setAttr $plug $val;	

		$val = `checkBoxGrp -query -value2 hikSkeletonGeneratorThumbsCheck`;
		$plug = $skeletonGeneratorNode + ".WantExtraFinger";
		setAttr $plug $val;

		int $lToeJointsCountVal = `intSliderGrp -query -value hikSkeletonGeneratorToeJointsCount`;
		$plug = $skeletonGeneratorNode + ".ToeJointCount";
		setAttr $plug $lToeJointsCountVal;

		$val = `checkBoxGrp -query -value1 hikSkeletonGeneratorToesCheck1`;
		$plug = $skeletonGeneratorNode + ".WantIndexToe";
		setAttr $plug $val;

		$val = `checkBoxGrp -query -value2 hikSkeletonGeneratorToesCheck1`;
		$plug = $skeletonGeneratorNode + ".WantMiddleToe";
		setAttr $plug $val;

		$val = `checkBoxGrp -query -value1 hikSkeletonGeneratorToesCheck2`;
		$plug = $skeletonGeneratorNode + ".WantRingToe";
		setAttr $plug $val;

		$val = `checkBoxGrp -query -value2 hikSkeletonGeneratorToesCheck2`;
		$plug = $skeletonGeneratorNode + ".WantPinkyToe";
		setAttr $plug $val;

		$val = `checkBoxGrp -query -value1 hikSkeletonGeneratorFeetThumbsCheck`;
		$plug = $skeletonGeneratorNode + ".WantBigToe";
		setAttr $plug $val;
		
		$val = `checkBoxGrp -query -value2 hikSkeletonGeneratorFeetThumbsCheck`;
		$plug = $skeletonGeneratorNode + ".WantFootThumb";
		setAttr $plug $val;	

		$val = `checkBoxGrp -query -value1 hikSkeletonGeneratorFingerExtrasCheck`;	
		$plug = $skeletonGeneratorNode + ".WantFingerBase";
		setAttr $plug $val;

		$val = `checkBoxGrp -query -value1 hikSkeletonGeneratorToeExtrasCheck`;
		$plug = $skeletonGeneratorNode + ".WantToeBase";
		setAttr $plug $val;

		$val = `checkBoxGrp -query -value2 hikSkeletonGeneratorFingerExtrasCheck`;
		$plug = $skeletonGeneratorNode + ".WantInHandJoint";
		setAttr $plug $val;	

		$val = `checkBoxGrp -query -value2 hikSkeletonGeneratorToeExtrasCheck`;
		$plug = $skeletonGeneratorNode + ".WantInFootJoint";
		setAttr $plug $val;

		$val = `checkBoxGrp -query -value1 hikSkeletonGeneratorHipsTranslationCheck`;
		$plug = $skeletonGeneratorNode + ".WantHipsTranslation";
		setAttr $plug $val;

		hikUpdateSkeletonFromSkeletonGeneratorNode( $currentName, 1.0 );

		// Update the bones in the characterization tool after we
		// update the skeleton
		hikRebuildBoneAssignments( $currentName );
	}
}



global proc hikSetSkeletonGeneratorEnabled(int $state)
{
	floatSliderGrp -e -enable $state hikSkeletonGeneratorCharacterScale;
	intSliderGrp -e -enable $state hikSkeletonGeneratorSpineCount;
	intSliderGrp -e -enable $state hikSkeletonGeneratorNeckCount;
	intSliderGrp -e -enable $state hikSkeletonGeneratorShouldersCount;
	checkBoxGrp -e -enable $state hikSkeletonGeneratorArmRollsCheck;
	checkBoxGrp -e -enable $state hikSkeletonGeneratorLegRollsCheck;
	checkBoxGrp -e -enable $state hikSkeletonGeneratorFingersCheck1;
	checkBoxGrp -e -enable $state hikSkeletonGeneratorFingersCheck2;
	checkBoxGrp -e -enable $state hikSkeletonGeneratorThumbsCheck;
	intSliderGrp -e -enable $state hikSkeletonGeneratorFingerJointsCount;
	checkBoxGrp -e -enable $state hikSkeletonGeneratorFingerExtrasCheck;
	checkBoxGrp -e -enable $state hikSkeletonGeneratorToesCheck1;
	checkBoxGrp -e -enable $state hikSkeletonGeneratorToesCheck2;
	checkBoxGrp -e -enable $state hikSkeletonGeneratorFeetThumbsCheck;
	intSliderGrp -e -enable $state hikSkeletonGeneratorToeJointsCount;
	checkBoxGrp -e -enable $state hikSkeletonGeneratorToeExtrasCheck;
	checkBoxGrp -e -enable $state hikSkeletonGeneratorHipsTranslationCheck;
}

global proc hikUpdateSkeletonGeneratorCharacterScale()
// Description:
//		Updates the skeleton's character scale value based on the UI setting
//
{
	float $scale = `floatSliderGrp -q -v hikSkeletonGeneratorCharacterScale`;
	string $currentName = hikGetCurrentCharacter();

	string $skeletonGeneratorNode="";
	if($currentName != "")
		$skeletonGeneratorNode = hikGetSkeletonGeneratorNode($currentName);
	
	if($skeletonGeneratorNode != "")
	{
		
		hikSyncCurrentPoseToSkeletonGenerator($currentName,$skeletonGeneratorNode);
		hikUpdateSkeletonFromSkeletonGeneratorNode( $currentName, $scale );
	}

	floatSliderGrp -e -v 1 hikSkeletonGeneratorCharacterScale;
}

// Select Skeleton Nodes of a Character
global proc hikSelectSkeletonNodes(string $pCharacter)
{
	string $lSKNodes[] = hikGetSkeletonNodes($pCharacter);

	for($lElement in $lSKNodes)
		if( $lElement != "" )
			select -add $lElement;
}
