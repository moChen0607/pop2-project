// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Nov, 1999
//
//	Procedure Name:
//		doCopyClipArgList
//
//	Description:
//		Copy a clip
//
//	Input Arguments:
//	$version: The version of this option box.  Used to know how to 
//	interpret the $args array.
//  
//	$args
//	Version 1
//	[0]		$name :  name of the clip window
//  Version 2
//  [1]     $clip :  specific clip to cut
//
global proc
doCopyClipArgList( string $version, string $args[] )
{
	int $versionNo			= $version;
	string $clipWnd     	= $args[0];

	string $selClips[];
	if (($versionNo >= 2) && ($args[1] != "")) {
		$selClips[0] = $args[1];
	}
	else {
		$selClips = getSelectedClips("noOptions");
	}
	string $copiedClips[];
	int $copyCount = 0;
	int $nclips = size($selClips);
	if ($nclips == 0) {
		error( (uiRes("m_doCopyClipArgList.kSelectTheClipsErr")) );
	} else {
		string $selChar = "";
		string $clip;
		for ($clip in $selClips)
		{
			string $sch = getClipScheduler($clip);
			int $clipIndex = getClipIndex($clip, $sch);
			string $clipName = `clipSchedule -ci $clipIndex -q -n $sch`;
			string $clipSourceName = `clipSchedule -ci $clipIndex -q -scn $sch`;
			string $character[] = `listConnections -type character $sch`;
			if (($selChar != "") && ($selChar != $character[0])) {
				error( (uiRes("m_doCopyClipArgList.kAllClipsErr")) );
			} else {
				$selChar = $character[0];
			}
			if (size($clipName) && size($character)) {
				int $copyIt = 1;
				for ($cclip in $copiedClips) {
					if ($cclip == $clipSourceName || $cclip == $clipName) {
						$copyIt = 0;
					}
				}
				if ($copyIt) {
					$copiedClips[size($copiedClips)] = $clipName;
				}
			}
		}

		if ("" != $selChar) {
			string $cmdString = "clip -copy";
			for ($cclip in $copiedClips) {
				$cmdString += (" -name "+$cclip);
			}
			$cmdString += (" "+$selChar);
			evalEcho($cmdString);
			
			string $selBlends[] = getSelectedBlends();
			int $nblends = size($selBlends);
			if ($nblends != 0) {
				warning( (uiRes("m_doCopyClipArgList.kSelectedBlends")) );
			}
		}
	}
}
