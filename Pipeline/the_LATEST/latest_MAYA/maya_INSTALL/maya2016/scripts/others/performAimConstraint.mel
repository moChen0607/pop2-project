// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  24 April 1997
//
//  Description:
//		This script provides an option box dialog for the aimConstraint command.
//
//	Input Arguments:
//		boolean showOptionBox	true - show the option box dialog
//								false - just execute the command
//

//
//  Procedure Name:
//      setOptionVars
//
//  Description:
//		Initialize the option values.
//
//  Input Arguments:
//		Whether to set the options to default values.
//
//  Return Value:
//      None.
//
proc setOptionVars(int $forceFactorySettings)
{
	//	weight
	//
	if ($forceFactorySettings || !`optionVar -exists aimConstraintWeight`) {
		optionVar -floatValue aimConstraintWeight 1.0;
	}

	//	aimVector.
	//
	if ($forceFactorySettings || !`optionVar -exists aimConstraintAimVector`) {
		optionVar -floatValue aimConstraintAimVector 1.0
			-floatValueAppend aimConstraintAimVector 0.0
			-floatValueAppend aimConstraintAimVector 0.0;
	}

	//	upVector.
	//
	if ($forceFactorySettings || !`optionVar -exists aimConstraintUpVector`) {
		optionVar -floatValue aimConstraintUpVector 0.0
			-floatValueAppend aimConstraintUpVector 1.0
			-floatValueAppend aimConstraintUpVector 0.0;
	}

	// World up

	if ($forceFactorySettings || !`optionVar -exists aimConstraintWorldUpType`) {
		optionVar -stringValue aimConstraintWorldUpType "vector";
	}

	if ($forceFactorySettings || !`optionVar -exists aimConstraintWorldUpVector`) {
		optionVar -floatValue aimConstraintWorldUpVector 0.0
			-floatValueAppend aimConstraintWorldUpVector 1.0
			-floatValueAppend aimConstraintWorldUpVector 0.0;
	}

	if ($forceFactorySettings || !`optionVar -exists aimConstraintWorldUpObject`) {
		optionVar -stringValue aimConstraintWorldUpObject "";
	}

	// offset x,y,z
	//
	if ($forceFactorySettings || 
		!`optionVar -exists aimConstOffsetX`) {
		optionVar -floatValue aimConstOffsetX 0.0;
	}
	if ($forceFactorySettings || 
		!`optionVar -exists aimConstOffsetY`) {
		optionVar -floatValue aimConstOffsetY 0.0;
	}
	if ($forceFactorySettings || 
		!`optionVar -exists aimConstOffsetZ`) {
		optionVar -floatValue aimConstOffsetZ 0.0;
	}

	// maintain existing offset
	//
	if ($forceFactorySettings || 
		!`optionVar -exists aimConstMaintainOffset`) {
		optionVar -intValue aimConstMaintainOffset 0;
	}
	
	// Constraint Axes
	//
	if ($forceFactorySettings ||
		!`optionVar -exists  aimConstraintAxisX`) {
		optionVar -intValue aimConstraintAxisX true;
	}
	if ($forceFactorySettings ||
		!`optionVar -exists  aimConstraintAxisY`) {
		optionVar -intValue aimConstraintAxisY true;
	}
	if ($forceFactorySettings ||
		!`optionVar -exists  aimConstraintAxisZ`) {
		optionVar -intValue aimConstraintAxisZ true;
	}
	
	// AnimLayer
	if ($forceFactorySettings ||
		!`optionVar -exists  constraintAnimLayer`) {
		optionVar -stringValue constraintAnimLayer	""; 
	}
	
	if ($forceFactorySettings ||
		!`optionVar -exists  aimConstraintAnimLayerToOverride`) {
		optionVar -intValue aimConstraintAnimLayerToOverride	true; 
	}	
}

//
//  Procedure Name:
//      aimConstraintSetup
//
//  Description:
//		Update the state of the option box UI to reflect the option values.
//
//  Input Arguments:
//      parent               - Top level parent layout of the option box UI.
//                             Required so that UI object names can be 
//                             successfully resolved.
//
//		forceFactorySettings - Whether the option values should be set to
//                             default values.
//
//  Return Value:
//      None.
//
global proc aimConstraintSetup(string $parent, int $forceFactorySettings)
{
	//	Retrieve the option settings
	//
	setOptionVars($forceFactorySettings);

	setParent $parent;

	//	Query the optionVar's and set the values into the controls.

	//	weight
	//
	floatSliderGrp -edit 
		-value `optionVar -query aimConstraintWeight`
		aimConstraintWeight;

	//	aimVector.
	//
	float $aimVector[] = `optionVar -query aimConstraintAimVector`;
	floatFieldGrp -edit 
		-value1 $aimVector[0]
		-value2 $aimVector[1]
		-value3 $aimVector[2]
		aimConstraintAimVector;

	//	upVector.
	//
	float $upVector[] = `optionVar -query aimConstraintUpVector`;
	floatFieldGrp -edit 
		-value1 $upVector[0]
		-value2 $upVector[1]
		-value3 $upVector[2]
		aimConstraintUpVector;

	// World up

	string $worldUpType = `optionVar -query aimConstraintWorldUpType`;
	switch ( $worldUpType )
	{
	case "scene":
		optionMenuGrp -edit -select 1 aimConstraintWorldUpType;
		break;
	case "object":
		optionMenuGrp -edit -select 2 aimConstraintWorldUpType;
		break;
	case "objectrotation":
		optionMenuGrp -edit -select 3 aimConstraintWorldUpType;
		break;
	case "vector":
		optionMenuGrp -edit -select 4 aimConstraintWorldUpType;
		break;
	case "none":
		optionMenuGrp -edit -select 5 aimConstraintWorldUpType;
		break;
	}

	float $worldUpVector[] = `optionVar -query aimConstraintWorldUpVector`;
	floatFieldGrp -edit 
		-value1 $worldUpVector[0]
		-value2 $worldUpVector[1]
		-value3 $worldUpVector[2]
		aimConstraintWorldUpVector;

	textFieldGrp -edit
		-text `optionVar -query aimConstraintWorldUpObject`
		aimConstraintWorldUpObject;

	//	Offset values
	//
	float $rx = `optionVar -query aimConstOffsetX`;
	float $ry = `optionVar -query aimConstOffsetY`;
	float $rz = `optionVar -query aimConstOffsetZ`;
	if (`optionVar -query aimConstMaintainOffset`) {
		checkBoxGrp -edit -value1 1 aimConstraintMaintainWidget;
		floatFieldGrp -edit -enable 0 offsetField;
	} else {
		checkBoxGrp -edit -value1 0 aimConstraintMaintainWidget;
		floatFieldGrp -edit -enable 1 offsetField;
	}
	floatFieldGrp -e -v1 $rx -v2 $ry -v3 $rz offsetField;
	
	// AnimLayer
	string $animLayer = `optionVar -query constraintAnimLayer`;
	
	optionMenuGrp -edit -select 1 aimConstraintAnimLayerWidget;

	if( size( $animLayer ) > 0 )
	{
 		if( size( `ls $animLayer` ) > 0 )
		{
			if( `objectType $animLayer` == "animLayer" )
			{
				optionMenuGrp -edit -value $animLayer aimConstraintAnimLayerWidget;
			}
		}
	}

	int $overrideAnimLayer = `optionVar -query aimConstraintAnimLayerToOverride`;
	checkBoxGrp -edit -value1 $overrideAnimLayer aimConstraintOverrideAnimLayer;
	
	//  Axis values
	//
	int $axisX = `optionVar -query aimConstraintAxisX`;
	int $axisY = `optionVar -query aimConstraintAxisY`;
	int $axisZ = `optionVar -query aimConstraintAxisZ`;
	// if all axes are on, select the all box and dim the individual axes
	if ($axisX && $axisY && $axisZ) {
		checkBoxGrp -edit -value1 true axesAll;
		checkBoxGrp -edit -value1 false -value2 false -value3 false axesXYZ;
	}
	// otherwise just select those boxes corresponding to 'on' axes
	else {
		checkBoxGrp -edit -value1 false axesAll;
		checkBoxGrp -edit -value1 $axisX -value2 $axisY -value3 $axisZ axesXYZ;
	}

	aimConstraintEnabling $parent;
}

//
//  Procedure Name:
//      aimConstraintCallback
//
//  Description:
//		Update the option values with the current state of the option box UI.
//
//  Input Arguments:
//      parent - Top level parent layout of the option box UI.  Required so
//               that UI object names can be successfully resolved.
//
//		doIt   - Whether the command should execute.
//
//  Return Value:
//      None.
//
global proc aimConstraintCallback(string $parent, int $doIt)
{
    setParent $parent;

	//	Set the optionVar's from the control values, and then
	//	perform the command.

	//	weight
	//
	optionVar -floatValue aimConstraintWeight
		`floatSliderGrp -query -value aimConstraintWeight`;

	//	aimVector.
	//
	optionVar -floatValue aimConstraintAimVector
		`floatFieldGrp -query -value1 aimConstraintAimVector`
		-floatValueAppend aimConstraintAimVector
		`floatFieldGrp -query -value2 aimConstraintAimVector`
		-floatValueAppend aimConstraintAimVector
		`floatFieldGrp -query -value3 aimConstraintAimVector`;

	//	upVector.
	//
	optionVar -floatValue aimConstraintUpVector
		`floatFieldGrp -query -value1 aimConstraintUpVector`
		-floatValueAppend aimConstraintUpVector
		`floatFieldGrp -query -value2 aimConstraintUpVector`
		-floatValueAppend aimConstraintUpVector
		`floatFieldGrp -query -value3 aimConstraintUpVector`;

	// World up

	int $state = `optionMenuGrp -query -select aimConstraintWorldUpType`;
	switch ( $state )
	{
	case 1:
		optionVar -stringValue aimConstraintWorldUpType "scene";
		break;
	case 2:
		optionVar -stringValue aimConstraintWorldUpType "object";
		break;
	case 3:
		optionVar -stringValue aimConstraintWorldUpType "objectrotation";
		break;
	case 4:
		optionVar -stringValue aimConstraintWorldUpType "vector";
		break;
	case 5:
		optionVar -stringValue aimConstraintWorldUpType "none";
		break;
	}

	optionVar -floatValue aimConstraintWorldUpVector
		`floatFieldGrp -query -value1 aimConstraintWorldUpVector`
		-floatValueAppend aimConstraintWorldUpVector
		`floatFieldGrp -query -value2 aimConstraintWorldUpVector`
		-floatValueAppend aimConstraintWorldUpVector
		`floatFieldGrp -query -value3 aimConstraintWorldUpVector`;

	optionVar -stringValue aimConstraintWorldUpObject
		`textFieldGrp -query -text aimConstraintWorldUpObject`;

	// Maintain offset 
	//
	optionVar -intValue aimConstMaintainOffset `checkBoxGrp  -query -value1 aimConstraintMaintainWidget`;
	
	//	Offset values
	//
	optionVar -floatValue aimConstOffsetX
		`floatFieldGrp -query -v1 offsetField`;
	optionVar -floatValue aimConstOffsetY
		`floatFieldGrp -query -v2 offsetField`;
	optionVar -floatValue aimConstOffsetZ
		`floatFieldGrp -query -v3 offsetField`;
		
	// AnimLayer
	if( `optionMenuGrp -query -select aimConstraintAnimLayerWidget` > 1 ) 
	{ 
		optionVar -stringValue constraintAnimLayer
			`optionMenuGrp -query -value aimConstraintAnimLayerWidget`; 	
	}
	else
	{
		// First Item Selected, None
		// Save an empty fied in the fconfig file
		optionVar -stringValue constraintAnimLayer	""; 	
		
	}
	
	optionVar -intValue aimConstraintAnimLayerToOverride
		`checkBoxGrp -q -value1 aimConstraintOverrideAnimLayer`;

	// Axis values
	//

	// Either the 'All' box is checked (and so all axes are on) ...
	if ( `checkBoxGrp -query -value1 axesAll` ) {
		optionVar -intValue aimConstraintAxisX true;
		optionVar -intValue aimConstraintAxisY true;
		optionVar -intValue aimConstraintAxisZ true;
	} else {
		// ... Or only those axes specifically selected are on
		optionVar -intValue aimConstraintAxisX
			`checkBoxGrp -query -value1 axesXYZ`;
		optionVar -intValue aimConstraintAxisY
			`checkBoxGrp -query -value2 axesXYZ`;
		optionVar -intValue aimConstraintAxisZ
			`checkBoxGrp -query -value3 axesXYZ`;
	}

	if ($doIt) {
		performAimConstraint 0; 
		addToRecentCommandQueue "performAimConstraint 0" "AimConstraint";
	}
}

// Callbacks to dim/undim different widget
//
global proc aimConstraintEnabling(string $parent)
{
	setParent $parent;

	int $state = `optionMenuGrp -query -select aimConstraintWorldUpType`;
	switch ( $state )
	{
	case 1: // Scene Up
	case 5: // None
		floatFieldGrp -edit -enable false aimConstraintWorldUpVector;
		textFieldGrp -edit -enable false aimConstraintWorldUpObject;
		break;
	case 2: // Object Up
		floatFieldGrp -edit -enable false aimConstraintWorldUpVector;
		textFieldGrp -edit -enable true aimConstraintWorldUpObject;
		break;
	case 3: // Object Rotation Up
		floatFieldGrp -edit -enable true aimConstraintWorldUpVector;
		textFieldGrp -edit -enable true aimConstraintWorldUpObject;
		break;
	case 4: // Vector
		floatFieldGrp -edit -enable true aimConstraintWorldUpVector;
		textFieldGrp -edit -enable false aimConstraintWorldUpObject;
		break;
	}
}

//
//  Procedure Name:
//      aimConstraintOptions
//
//  Description:
//		Construct the option box UI.  Involves accessing the standard option
//		box and customizing the UI accordingly.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
proc aimConstraintOptions()
{
	//	Name of the command for this option box.
	//
	string $commandName = "aimConstraint";

	//	Build the option box actions.
	//
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	//	Get the option box.
	//
	string $layout = getOptionBox();
	setParent $layout;
	
	//	Pass the command name to the option box.
	//
	setOptionBoxCommandName($commandName);
	
	//	Activate the default UI template.
	//
	setUITemplate -pushTemplate DefaultTemplate;

	//	Turn on the wait cursor.
	//
	waitCursor -state 1;

	tabLayout -scr true -tv false;
	string $parent = `columnLayout -adjustableColumn 1`;

	checkBoxGrp
		-label (uiRes("m_performAimConstraint.kMaintainOffset")) 
		-label1 " "
		-annotation (uiRes("m_performAimConstraint.kMaintainOffsetAnnot")) 
		-numberOfCheckBoxes 1
		-cc ("floatFieldGrp -edit -enable (! #1) offsetField;")
		aimConstraintMaintainWidget;
	
	floatFieldGrp -label (uiRes("m_performAimConstraint.kOffset")) 
		-numberOfFields 3
		offsetField;

	// AnimLayer field
	string $lLayers[] = `ls -type animLayer`;
	optionMenuGrp -label (uiRes("m_performAimConstraint.kAnimLayer")) aimConstraintAnimLayerWidget;

	menuItem -label (uiRes("m_performAimConstraint.kNoneLayer"));

	for ($layer in $lLayers) 
		menuItem -label $layer;

	checkBoxGrp
		-label (uiRes("m_performAimConstraint.kAimConstraintAnimLayerToOverride"))
		-annotation (uiRes("m_performAimConstraint.kAimConstraintAnimLayerToOverrideAnnot")) 
		-numberOfCheckBoxes 1
		aimConstraintOverrideAnimLayer;

	separator;
	floatFieldGrp -label (uiRes("m_performAimConstraint.kAimVector")) 
		-numberOfFields 3
		aimConstraintAimVector;

	floatFieldGrp -label (uiRes("m_performAimConstraint.kUpVector")) 
		-numberOfFields 3
		aimConstraintUpVector;

	optionMenuGrp -label (uiRes("m_performAimConstraint.kWorldUpType")) 
		-cc ("aimConstraintEnabling " + $parent)
		aimConstraintWorldUpType;
		menuItem -label (uiRes("m_performAimConstraint.kSceneUp"))                    aimConstraintUpDirMI1;
		menuItem -label (uiRes("m_performAimConstraint.kObjectUp"))                  aimConstraintUpDirMI2;
		menuItem -label (uiRes("m_performAimConstraint.kObjectRotationUp")) aimConstraintUpDirMI3;
		menuItem -label (uiRes("m_performAimConstraint.kVector"))                       aimConstraintUpDirMI4;
		menuItem -label (uiRes("m_performAimConstraint.kNone"))                           aimConstraintUpDirMI5;

	floatFieldGrp -label (uiRes("m_performAimConstraint.kWorldUpVector"))  -nf 3 aimConstraintWorldUpVector;

	textFieldGrp -label (uiRes("m_performAimConstraint.kWorldUpObject"))  aimConstraintWorldUpObject;

	separator;

	//  Constraint Axes Selection Boxes
	//

	// The 'axesAll' checkBoxGrp and the 'axesXYZ' checkBoxGrp are linked
	// such that when 'axesAll' is selected, all the 'axesXYZ' boxes are
	// unselected. And when any 'axesXYZ' box is selected the 'axesAll'
	// box is deselected.
	checkBoxGrp -numberOfCheckBoxes 1 -label (uiRes("m_performAimConstraint.kConstraintAxes")) 
		-label1 (uiRes("m_performAimConstraint.kAll")) 
		-onCommand ("checkBoxGrp -edit " +
					"-value1 false " +
					"-value2 false " +
					"-value3 false " +
					"axesXYZ")
		axesAll;
		
	checkBoxGrp -numberOfCheckBoxes 3
		-label1 (uiRes("m_performAimConstraint.kX")) 
		-label2 (uiRes("m_performAimConstraint.kY")) 
		-label3 (uiRes("m_performAimConstraint.kZ")) 
		-onCommand ("checkBoxGrp -edit " +
					"-value1 false " +
					"axesAll;")
		axesXYZ;

	separator;
	
	floatSliderGrp -label (uiRes("m_performAimConstraint.kWeight")) 
		-field true -min 0.0 -max 1.0 
		aimConstraintWeight;

	//	Turn off the wait cursor.
	//
	waitCursor -state 0;
	
	//	Deactivate the default UI template.
	//
	setUITemplate -popTemplate;

	//	'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-label (uiRes("m_performAimConstraint.kAddButton")) 
		-command ($callback + " " + $parent + " " + 1)
		$applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;

	//	Set the option box title.
	//
	setOptionBoxTitle (uiRes("m_performAimConstraint.kAimConstraintOptions"));

	//	Customize the 'Help' menu item text.
	//
	setOptionBoxHelpTag( "Aim" );

	//	Set the current values of the option box.
	//
	eval (($setup + " " + $parent + " " + 0));	
	
	//	Show the option box.
	//
	showOptionBox();
}


//
//  Procedure Name:
//      assembleCmd
//
//  Description:
//		Construct the command that will apply the option box values.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
proc string assembleCmd()
{
	string $cmd;

	setOptionVars(false);

	int $maintainOffset = `optionVar -query aimConstMaintainOffset`;
	float $rx = `optionVar -query aimConstOffsetX`;
	float $ry = `optionVar -query aimConstOffsetY`;
	float $rz = `optionVar -query aimConstOffsetZ`;		
	
	float $aimVector[] = `optionVar -query aimConstraintAimVector`;
	float $upVector[] = `optionVar -query aimConstraintUpVector`;
	float $weight = `optionVar -query aimConstraintWeight`;
		
	// world up related options
	
	string $worldUpType = `optionVar -query aimConstraintWorldUpType`;
	string $worldUpObject = `optionVar -query aimConstraintWorldUpObject`;
	float $worldUpVector[] = `optionVar -query aimConstraintWorldUpVector`;		
		
	// AnimLayer
    string $animLayer = `optionVar -query constraintAnimLayer`;
    int	   $overrideAnimLayer = `optionVar -query aimConstraintAnimLayerToOverride`;
	
	// Axis values
	//

	// The axis values are inverted so that they represent
	// which axes to *skip* as opposed to which axes are on.
	int $axisX = !`optionVar -query aimConstraintAxisX`;
	int $axisY = !`optionVar -query aimConstraintAxisY`;
	int $axisZ = !`optionVar -query aimConstraintAxisZ`;

	$cmd =	"doCreateAimConstraintArgList 1 { " +		
	    "\"" + $maintainOffset + "\"" +
		",\"" + $rx + "\"" +				
		",\"" + $ry + "\"" +				
		",\"" + $rz + "\"" +					
		",\"" + $aimVector[0] + "\"" +				
		",\"" + $aimVector[1] + "\"" +				
		",\"" + $aimVector[2] + "\"" +					
		",\"" + $upVector[0] + "\"" +				
		",\"" + $upVector[1] + "\"" +				
		",\"" + $upVector[2] + "\"" +					
		",\"" + $worldUpVector[0] + "\"" +				
		",\"" + $worldUpVector[1] + "\"" +				
		",\"" + $worldUpVector[2] + "\"" +					
		",\"" + $weight + "\"" +				
		",\"" + $worldUpType + "\"" +				
		",\"" + $worldUpObject + "\"" +					
		",\"" + $axisX + "\"" +				
		",\"" + $axisY + "\"" +				
		",\"" + $axisZ + "\"" +				
		",\"" + $animLayer + "\"" +				
		",\"" + $overrideAnimLayer + "\"" +						
		" };";    

	return $cmd;
}

//
//  Procedure Name:
//      performAimConstraint
//
//  Description:
//		Perform the aimConstraint command using the corresponding 
//		option values.  This procedure will also show the option box
//		window if necessary as well as construct the command string
//		that will invoke the aimConstraint command with the current
//		option box values.
//
//  Input Arguments:
//      0 - Execute the command.
//      1 - Show the option box dialog.
//      2 - Return the command.
//
//  Return Value:
//      None.
//
global proc string performAimConstraint(int $action)
{
	string $cmd = "";

	switch ($action) {

		//	Execute the command.
		//
		case 0:
			//	Retrieve the option settings
			//
			setOptionVars(false);

			//	Get the command.
			//
			$cmd = `assembleCmd`;

			//	Execute the command with the option settings.
			//
			evalEcho($cmd);

			break;

		//	Show the option box.
		//
		case 1:
			aimConstraintOptions;
			break;

		//	Return the command string.
		//
		case 2:
			//	Retrieve the option settings.
			//
			setOptionVars (false);

			//	Get the command.
			//
			$cmd = `assembleCmd`;
			break;
	}
	return $cmd;	
}

