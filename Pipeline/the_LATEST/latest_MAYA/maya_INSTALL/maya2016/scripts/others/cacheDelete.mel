// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//

proc int dynSettingsInList(string $list[], string $name)
//
// Return whether $name is in $list.
//
{
	int $inList = 0;
	for ($i = 0; $i < size($list); $i++)
	{
		if ($name == $list[$i])
		{
			$inList = 1;
			break;
		}
	}
	return $inList;
}


global proc cacheDelete()
//
// Deletes the cache for all the selected dynamic objects.
{
	string $selectedParticles[] = `ls -sl -type particle`;
	string $selectedRigidBodies[] = `ls -sl -type rigidBody`;
	string $selectedTransforms[] = `ls -sl -transforms`;

	for ($i = 0; $i < size($selectedTransforms); $i++)
	{
		string $kidShapes[] = `listRelatives -s $selectedTransforms[$i]`;
		string $particleKids[] = `ls -type particle $kidShapes`;
		int $count = size($selectedParticles);
		for ($j = 0; $j < size($particleKids); $j++)
		{
			if (!dynSettingsInList($selectedParticles, $particleKids[$j]))
			{
				$selectedParticles[$count] = $particleKids[$j];
				$count++;
			}
		}
	}

	for ($i = 0; $i < size($selectedTransforms); $i++)
	{
		string $kidShapes[] = `listRelatives -s $selectedTransforms[$i]`;
		string $rigidBodyKids[] = `ls -type rigidBody $kidShapes`;
		int $count = size($selectedRigidBodies);
		for ($j = 0; $j < size($rigidBodyKids); $j++)
		{
			if (!dynSettingsInList($selectedRigidBodies, $rigidBodyKids[$j]))
			{
				$selectedRigidBodies[$count] = $rigidBodyKids[$j];
				$count++;
			}
		}
	}

	string $cmd;
	string $names;
	string $printMsg = (uiRes("m_cacheDelete.kResultCacheDelete")) ;
	
	int $particleCount = size($selectedParticles);

	for ($i = 0; $i < $particleCount; $i++)
	{
		$names = $names + " " + $selectedParticles[$i];
		$cmd = "particle -e -deleteCache " + $selectedParticles[$i];
		evalEcho $cmd;
	}
	if ($particleCount > 0)
	{	
		print `format -stringArg $names $printMsg` ;
	}
	$names = "";

	int    $rigidBodyCount = size($selectedRigidBodies);

	for ($i = 0; $i < $rigidBodyCount; $i++)
	{
		$names = $names + " " + $selectedRigidBodies[$i];
		$cmd = "rigidBody -e -deleteCache " + $selectedRigidBodies[$i];
		evalEcho $cmd;
	}
	if ($rigidBodyCount > 0)
	{
		print `format -stringArg $names $printMsg` ;
	}
}
