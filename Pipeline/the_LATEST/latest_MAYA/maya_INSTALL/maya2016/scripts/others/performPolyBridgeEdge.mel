// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

proc setOptionVars ( int $forceFactorySettings )
{
	// Divisions
	if ($forceFactorySettings || !`optionVar -exists PolyBridgeEdgeDivisionsOption`)
		optionVar -intValue PolyBridgeEdgeDivisionsOption 5;

	// Twist
	if ($forceFactorySettings || !`optionVar -exists PolyBridgeEdgeTwistOption`)
		optionVar -floatValue PolyBridgeEdgeTwistOption 0.0;

	// Taper
	if ($forceFactorySettings || !`optionVar -exists PolyBridgeEdgeTaperOption`)
		optionVar -floatValue PolyBridgeEdgeTaperOption 1.0;
		
	// Divisions
	if ($forceFactorySettings || !`optionVar -exists PolyBridgeEdgeCurveTypeOption`)
		optionVar -intValue PolyBridgeEdgeCurveTypeOption 0;
	
	// Smoothing Angle
	if ($forceFactorySettings || !`optionVar -exists PolyBridgeEdgeSmoothAngleOption`)
		optionVar -floatValue PolyBridgeEdgeSmoothAngleOption 30.0;
}

proc string assembleBridgeEdgeCmd ( )
{
	setOptionVars (false);

	int $doHistory = `constructionHistory -q -toggle`;

	string $cmd = ("polyBridgeEdge -ch " + $doHistory);

	int $divisions;
	$divisions = `optionVar -query PolyBridgeEdgeDivisionsOption`;

	float $twist;
	$twist = `optionVar -query PolyBridgeEdgeTwistOption`;

	float $taper;
	$taper = `optionVar -query PolyBridgeEdgeTaperOption`;

	int $curveType;
	$curveType = `optionVar -query PolyBridgeEdgeCurveTypeOption`;

	float $smoothingAngle;
	$smoothingAngle = `optionVar -query PolyBridgeEdgeSmoothAngleOption`;
	
	$cmd += " -divisions " + $divisions;
	$cmd += " -twist " + $twist;
	$cmd += " -taper " + $taper;
	$cmd += " -curveType " + $curveType;
	$cmd += " -smoothingAngle " + $smoothingAngle;
	
	return $cmd;	
}

global proc updatePolyBridgeEdgeUI()
{
	int $cType = `radioButtonGrp -query -select PolyBridgeEdgeCurveTypeRadioGrp`;

	int $enableTwistTaper = ($cType != 1);

	floatSliderGrp -edit -enable $enableTwistTaper PolyBridgeEdgeTwistOptionSlider;
	floatSliderGrp -edit -enable $enableTwistTaper PolyBridgeEdgeTaperOptionSlider;
}

global proc performPolyBridgeEdgeSetup (string $parent, int $forceFactorySettings)
{
	setOptionVars($forceFactorySettings);
	setParent $parent;

	int $ival;
	float $fval;
	
	$ival = `optionVar -query PolyBridgeEdgeDivisionsOption`;
	intSliderGrp -edit -value $ival PolyBridgeEdgeDivisionsOptionSlider;

	$fval = `optionVar -query PolyBridgeEdgeTwistOption`;
	floatSliderGrp -edit -value $fval PolyBridgeEdgeTwistOptionSlider;

	$fval = `optionVar -query PolyBridgeEdgeTaperOption`;
	floatSliderGrp -edit -value $fval PolyBridgeEdgeTaperOptionSlider;
	
	$ival = `optionVar -query PolyBridgeEdgeCurveTypeOption`;
	
	// Bridge flag is 0-based...optionMenuGrp select flag is 1-based.
	$ival++;
	
	radioButtonGrp -edit -select $ival -changeCommand "updatePolyBridgeEdgeUI" PolyBridgeEdgeCurveTypeRadioGrp;
	
	float $fval = `optionVar -query PolyBridgeEdgeSmoothAngleOption`;
	floatSliderGrp -edit -value $fval PolyBridgeEdgeSmoothAngleSlider;
}

global proc performPolyBridgeEdgeCallback (string $parent, int $doIt)
{
	setParent $parent;

	optionVar -intValue PolyBridgeEdgeDivisionsOption
		`intSliderGrp -query -value PolyBridgeEdgeDivisionsOptionSlider`;

	optionVar -floatValue PolyBridgeEdgeTwistOption
		`floatSliderGrp -query -value PolyBridgeEdgeTwistOptionSlider`;

	optionVar -floatValue PolyBridgeEdgeTaperOption
		`floatSliderGrp -query -value PolyBridgeEdgeTaperOptionSlider`;

	optionVar -floatValue PolyBridgeEdgeSmoothAngleOption
		`floatSliderGrp -query -value PolyBridgeEdgeSmoothAngleSlider`;

	int $cType = `radioButtonGrp -query -select PolyBridgeEdgeCurveTypeRadioGrp`;
	$cType--;
	
	optionVar -intValue PolyBridgeEdgeCurveTypeOption $cType;

	if ($doIt) 
	{
		performPolyBridgeEdge 0;
		addToRecentCommandQueue "performPolyBridgeEdge 0" "PolyBridgeEdge";
	}
}

proc createCmdOptionsUI()
{
	// Global template variables for form spacing
	global int $gOptionBoxTemplateDescriptionMarginWidth;
	global int $gOptionBoxTemplateFrameSpacing;
	
	string $layout = getOptionBox();
	setParent $layout;
	setUITemplate -pushTemplate OptionBoxTemplate;
	waitCursor -state 1;

	string $commandName = "performPolyBridgeEdge";
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");
	
	// Form layout
	string $parent = `formLayout polyBridgeEdgeOptions`;
	
		// Description frame
		string $descriptionFrame = 
		`frameLayout -label (uiRes("m_performPolyBridgeEdge.kDescriptionFrame")) -mw $gOptionBoxTemplateDescriptionMarginWidth`;	
			text (uiRes("m_performPolyBridgeEdge.kDescription"));
		setParent $parent;

		// Settings frame
		string $settingsFrame = 
		`frameLayout -label (uiRes("m_performPolyBridgeEdge.kSettingsFrame"))`;
			columnLayout;

			string $linearLabel = (uiRes("m_performPolyBridgeEdge.kLinearPathType"));
			string $smoothLabel  = (uiRes("m_performPolyBridgeEdge.kSmoothPathType"));
			string $curveLabel  = (uiRes("m_performPolyBridgeEdge.kSmoothPathPlusCurveType"));

			radioButtonGrp -label (uiRes("m_performPolyBridgeEdge.kBridgeType")) 
				-numberOfRadioButtons 3
				-vertical
				-labelArray3 $linearLabel $smoothLabel $curveLabel
				PolyBridgeEdgeCurveTypeRadioGrp;
				
			floatSliderGrp 
				-label (uiRes("m_performPolyBridgeEdge.kTwist")) 
				-minValue -180.0 
				-maxValue 180.0 
				PolyBridgeEdgeTwistOptionSlider;
				
			floatSliderGrp 
				-label (uiRes("m_performPolyBridgeEdge.kTaper")) 
				-minValue 0.0 
				-maxValue 15.0 
				PolyBridgeEdgeTaperOptionSlider;
				
			intSliderGrp 
				-label (uiRes("m_performPolyBridgeEdge.kDivisions")) 
				-minValue 0 
				-maxValue 25 
				PolyBridgeEdgeDivisionsOptionSlider;

			floatSliderGrp -field true 
					-label (uiRes("m_performPolyBridgeEdge.kSmoothingAngle"))
					-min 0.0 -max 180.0 -value 30.0 
					PolyBridgeEdgeSmoothAngleSlider;

		setParent $parent;	
		
	setParent ..;

	// Attach Description/Settings frames to form layout
	formLayout -e
		-af $descriptionFrame "top" $gOptionBoxTemplateFrameSpacing
		-af $descriptionFrame "left" $gOptionBoxTemplateFrameSpacing
		-af $descriptionFrame "right" $gOptionBoxTemplateFrameSpacing
		-an $descriptionFrame "bottom"

		-ac $settingsFrame "top" $gOptionBoxTemplateFrameSpacing $descriptionFrame
		-af $settingsFrame "left" $gOptionBoxTemplateFrameSpacing
		-af $settingsFrame "right" $gOptionBoxTemplateFrameSpacing
		-an $settingsFrame "bottom" 

	$parent;

	waitCursor -state 0;
	setUITemplate -popTemplate;

	string $applyClose = getOptionBoxApplyAndCloseBtn();
	button -edit -label (uiRes("m_performPolyBridgeEdge.kBridgeBtn")) $applyClose;

	string $applyBtn = getOptionBoxApplyBtn();
	button -edit -command ($callback + " " + $parent + " " + 1) $applyBtn;

	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;

	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1) $resetBtn;

	setOptionBoxTitle( (uiRes("m_performPolyBridgeEdge.kBridgeOptions")));
	setOptionBoxHelpTag("PolyBridge");

	eval (($setup + " " + $parent + " " + 0));

	updatePolyBridgeEdgeUI();
}

proc polyBridgeEdgeOptions ( )
{
	createCmdOptionsUI();

	showOptionBox();
}

global proc string performPolyBridgeEdge ( int $option )
{
	string $cmd="";

	switch ($option) 
	{
		case 0:
		
			string $edges[] = `filterExpand -sm 32 -ex 1`;
			string $faces[] = `filterExpand -sm 34 -ex 1`;
			
			string $res[];
			if (size($edges) != 0 || size($faces) == 0){
				//check for edges first
				string $cmd=`assembleBridgeEdgeCmd `;
				$res = `evalEcho $cmd`;
			} else { 
				string $cmd = "polyBridgeFaces;";
				$res = `evalEcho $cmd`;
			}
		
			if (size($res) > 0) 
			{
				select -add $res;
				setToolTo ShowManips;
			}
		break;

		case 1:
			polyBridgeEdgeOptions();
			break;

		case 2:
			$cmd = "performPolyBridgeEdge 0";
			break;
	}
	return $cmd;
}
