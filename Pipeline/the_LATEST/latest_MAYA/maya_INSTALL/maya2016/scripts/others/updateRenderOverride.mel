// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


global string $gBatchRenderOverrideMenu = "batchRenderOverideMenu";

// Update the state of the Render Override menu

global proc updateRenderOverride()
{
    global string $gBatchRenderOverrideMenu;

    // Check existance
    if ( !`optionMenuGrp -q -exists $gBatchRenderOverrideMenu`)
    {
        return;
    }

    // Save current parent
    string $oldParent = `setParent -query`;
    // Set override menu as parent
    setParent -menu ($gBatchRenderOverrideMenu + "|OptionMenu");

    // Remove all the existing menu items
    string $existingMenuItems[] = `optionMenuGrp -q -itemListLong $gBatchRenderOverrideMenu`;
    string $menuItem;
    for( $menuItem in $existingMenuItems )
    {
        deleteUI -menuItem $menuItem;
    }

    // Build the menu
    // Make first menu item as "no render item" and select it
    menuItem -label (uiRes("m_updateRenderOverride.kNoRenderOverride"));
    optionMenuGrp -edit -select 1 $gBatchRenderOverrideMenu;

    // Create menu items with valuse queried from the ogsRender
    string $override;
    string $overrides[] = `ogsRender -q -availableRenderOverrides`;
    for( $override in $overrides )
    {
        menuItem -label $override;
    }

    // Select the menu item with the active render override
    string $activeOverride = `ogsRender -q -activeRenderOverride`;
    if( $activeOverride != "" )
    {
        // If there is valid render override, select it
        optionMenuGrp -edit -value $activeOverride $gBatchRenderOverrideMenu;
    }

    // Register selection command
    optionMenuGrp -edit -changeCommand "activateRenderOverride" $gBatchRenderOverrideMenu;

    setParent $oldParent;
}

global proc activateRenderOverride()
{
    global string $gBatchRenderOverrideMenu;
    // Check existance
    if ( !`optionMenuGrp -q -exists $gBatchRenderOverrideMenu`)
    {
        return;
    }

    string $selectedOverride = `optionMenuGrp -q -value $gBatchRenderOverrideMenu`;
    if( $selectedOverride == (uiRes("m_updateRenderOverride.kNoRenderOverride")) )
    {
        $selectedOverride = "";
    }
    ogsRender -e -activeRenderOverride $selectedOverride;
}

