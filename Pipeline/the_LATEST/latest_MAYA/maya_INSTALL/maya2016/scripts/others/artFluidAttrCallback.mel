// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  June 2000
//
//  Description:
//      Option tool callbacks for Artisan Select Paint tool.
//
//
//  Procedure Name:
//     	artSelectCallback 
//
//  Description:
//      Initialize the option values.
//
//  Input Arguments:
//
//  Return Value:
//      None.
//
// 
// =======================================================
// Attribute Paint Specific callbacks.
// =======================================================

global proc artFluidAttrAutoSave( string $artCommand )
{
	string $autoSaveCmd;
	int $autoSave = `checkBoxGrp -q -v1 artFluidAutoSave`;

	if( $autoSave ) {
		$autoSaveCmd = "artFluidAttrAutoSaveInitialState `currentCtx`";
	} else {
		$autoSaveCmd = "artFluidAttrConfirmPaintLoss";
	}

	eval( $artCommand + " -e -as \"" + $autoSaveCmd + "\" `currentCtx`" );
}

global proc artFluidAttrUpdateColor( string $artCommand )
{
	float $c[3] = `colorSliderGrp -q -rgb artFluidColorSlider`;

	if( eval( $artCommand + " -q -exists `currentCtx` " ) ) {
		eval( $artCommand + " -e -rgb " + $c[0] + " " + $c[1] + " " + $c[2] + 
			  " `currentCtx`" );
	}
}

global proc artFluidAttrUpdateVelocity( string $artCommand )
{
	float $vx = `floatFieldGrp -q -v1 artFluidSpecifiedVelocity`;
	float $vy = `floatFieldGrp -q -v2 artFluidSpecifiedVelocity`;
	float $vz = `floatFieldGrp -q -v3 artFluidSpecifiedVelocity`;
					
	eval( $artCommand + " -e -v " + $vx + " " + $vy + " " + $vz + 
		  " `currentCtx`" );
}

global proc artFluidAttrUpdateUseStroke( string $artCommand )
{
	int $select = `radioButtonGrp -q -sl artFluidStrokeDirection`;
	int $useIt = $select == 1;
	eval( $artCommand + " -e -usd " + $useIt + " `currentCtx`" );
	floatFieldGrp -e -enable ($select == 2) artFluidSpecifiedVelocity;
}

global proc artFluidAttrAttributeCallback( string $artCommand, string $currTool )
{
	checkBoxGrp -e -cc ( "artFluidAttrAutoSave " + $artCommand ) artFluidAutoSave;	

	radioButtonGrp -e 
		-cc ( $artCommand + " -e -dar " + 
			  "(`radioButtonGrp -q -sl artFluidDisplayAsRender` - 1) " + 
			  "`currentCtx`; " )
		artFluidDisplayAsRender;

	checkBoxGrp -e 
		-cc ( $artCommand + " -e -dv #1 `currentCtx`; " )
		artFluidDisplayVelocity;

	optionMenuGrp -e -cc ( "artFluidAttrPaintMenu " + $artCommand )
		artAttrListOptionMenu;	

	colorSliderGrp -e -cc ( "artFluidAttrUpdateColor " + $artCommand )
		artFluidColorSlider;

	radioButtonGrp -e -cc ( "artFluidAttrUpdateUseStroke " + $artCommand )
		artFluidStrokeDirection;

	floatFieldGrp -e -cc ( "artFluidAttrUpdateVelocity " + $artCommand )
		artFluidSpecifiedVelocity;
}

// =======================================================
// Main Procedure.
// =======================================================

global proc artFluidAttrCallback(
	string	$artCommand
)
{
	source "artisanCallback.mel";
	source "artAttrCallback.mel";

	string $currContext = `currentCtx`;
	string $currTool	= `contextInfo -c $currContext`;

	// Basic Brush frameLayout.
	artisanBrushCallback( $artCommand, $currTool );

	// Attribute Paint frameLayout.
	artAttrCommonCallback( $artCommand, $currTool );

	// Attribute Paint frameLayout.
	artFluidAttrAttributeCallback( $artCommand, $currTool );

	// Stroke frameLayout.
	artisanStrokeCallback( $artCommand, $currTool );

	// Stroke frameLayout.
	artisanPressureCallback( $artCommand, $currTool );

	// Attribute Maps frameLayout.
	artisanAttrMapCallback( $artCommand, $currTool );

	// Display frameLayout.
	artisanDisplayCallback( $artCommand, $currTool );

}

