// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  20 Feb 2002
//
//  Description:
//      Delete Fluids Cache
//		
//
proc string clearFluidPBCache( string $fluid, int $deleteCacheFile )
{
	string $dskC;
	if(`connectionInfo -id ($fluid + ".diskCache")` > 0 ) {
		string $src = `connectionInfo -sfd ($fluid + ".diskCache")`;
		string $buffer[];
		tokenize($src, ".", $buffer);
		$dskC = $buffer[0];
		deleteFluidCache( $dskC, $deleteCacheFile );
	}
	return $dskC;
}

proc clearActiveFluidPBCaches( int $deleteFile )
{
	string $fluidShapes[] = `getActiveFluidShapes`;	
	for( $fluid in $fluidShapes ) {
		clearFluidPBCache( $fluid, $deleteFile );
	}
}

global proc doDeleteFluidsPB( int $version, string $args[] )
//
// Description:
//	
//	
{
	if(( $version < 1 ) || ( size( $args ) < 1 )) {
		error(uiRes("m_doAppendHairCache.kIncorrectVersion"));
		return;
	}
	int $deleteFile_unused = $args[0];

	// Make sure that we have a fluid selected
	// or warn the user and fail
	//
	string $fluidShapes[] = getActiveFluidShapes();
	if( size($fluidShapes) == 0 )
	{
		error((uiRes("m_doDeleteFluidsPB.kNoFluidsSelected")));
		return;
	}

	clearActiveFluidPBCaches false;
}
