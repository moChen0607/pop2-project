// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
// Return the caption string that should be used to identify an image
// in the renderview
global proc string renderWindowCaption(string $mode, 
									   float $renderTime)
{
	string $result = "";
	string $fmt, $msg;	
	// Add the renderer and the mode, onthe first line
	string $renderer = currentRenderer();
	string $renUIName = `renderer -query -rendererUIName $renderer`;
	$fmt = (uiRes("m_renderWindowCaption.kRenderer"));
    $msg = `format -s $renUIName -s $mode $fmt`;
    $result = $result + $msg;

	// Second line, add the frame number
	if (`optionVar -query renderViewShowFrameNumber`)
	{
		$frame = `currentTime -q`;
		$fmt = (uiRes("m_renderWindowCaption.kFrame"));
		$msg = `format -s $frame $fmt`;
        $result = $result + $msg;
	}

	// Add the computation time. Round time up, and format it.
	if (`optionVar -query renderViewShowRenderTime` && ($renderTime > 0.)) {
		$renderTime += .99;
		int $time = $renderTime;
		int $sec = `fmod $time 60`; $time -= $sec; $time /= 60;
		int $min = `fmod $time 60`; $time -= $min; $time /= 60;
		int $hour = `fmod $time 60`;
		string $timeString = $sec;
		if ($sec<10) $timeString = "0"+$timeString;
		if ($min>0) {
			$timeString = $min+":"+$timeString;
			if ($min<10) $timeString = " "+$timeString;
			if ($hour>0) {
				$timeString = $hour+":"+$timeString;
			}
		}
		else {
			$timeString = "0:"+$timeString;
		}

		$fmt =  (uiRes("m_renderWindowCaption.kRenderTime"));
	    $msg = `format -s $timeString $fmt`;
        $result = $result + $msg;
	}

	// Add the camera name
	if (`optionVar -query renderViewShowCameraName`) {
		string $cameraRig = getCurrentCameraRig();
		if (size($cameraRig))
		{
			$fmt = (uiRes("m_renderWindowCaption.kCameraRigCaption"));
			$msg = `format -s $cameraRig $fmt`;
		}
		else
		{
			$fmt = (uiRes("m_renderWindowCaption.kCameraCaption"));
			$msg = `format -s (getCurrentCamera()) $fmt`;
		}
        $result = $result + $msg;
	}
	
	// Add the layer name
	if (`optionVar -query renderViewShowLayerName`) {
		$fmt = (uiRes("m_renderWindowCaption.kLayers"));
		$renderLayers = `listConnections renderLayerManager.renderLayerId`;
		int $numLayers = size($renderLayers);
		if ($numLayers>1) {
			$layer = `editRenderLayerGlobals -q -currentRenderLayer`;
			if (`getAttr ($layer+".identification")` == 0) {
				$layer = "masterLayer";
			}
			$msg =  `format -s $layer $fmt`;
            $result = $result + $msg;
		}
	}
	
	// Add the render target name
	if (`optionVar -query renderViewShowRenderTargetName`) {
		string $renderTarget = getRenderViewRenderTarget();
		if ($renderTarget == "") {
		  $renderTarget = (uiRes("m_renderWindowCaption.kRenderTargetNone"));
        }
        $fmt = (uiRes("m_renderWindowCaption.kRenderTarget"));
        $msg = `format -s $renderTarget $fmt`;
        $result = $result + $msg;
	}
	
    // No custom comment at rendering time.  
    // Leave a new empty line in render view permanent caption so
    // that we can add custom comment to it later.
    //
	$result = $result + "\n";
	
    return $result;
}
