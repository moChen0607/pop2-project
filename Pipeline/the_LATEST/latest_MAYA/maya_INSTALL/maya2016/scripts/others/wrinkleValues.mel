// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//
//  Creation Date:  April 12 1996
//
//  Description:
//		These procs sets the state of controls in the property sheet.
//		See also wrinkleProperties.mel which constructs the property
//		sheet.
//
//  Input Arguments:
//      $toolName		- this is the name of the instance of the tool
//						  that the property sheet is modifying.
//
//  Return Value:
//      None.
//

global proc wrinkleValues ( string $toolName ) {
//
//  Description:
//		Sets the state of the property sheet based on the values
//		in the tool context.
//

	// set my top layout to be the current parent
	//
    string $parent = (`toolPropertyWindow -q -location` + "|wrinkle");
	setParent $parent;

	// set property sheet label and icon
	//
	string $icon= "wrinkle.png";
	string $helpTag = "WrinkleTool";

	toolPropertySetCommon $toolName $icon $helpTag;


	intSliderGrp -e -v `wrinkleContext -q -wc $toolName` wrcntSlider;
	floatSliderGrp -e -v `wrinkleContext -q -rnd $toolName` randomSlider;
   	floatSliderGrp -e -v `wrinkleContext -q -th $toolName` thickSlider;
	floatSliderGrp -e -v `wrinkleContext -q -wi $toolName` wrinkleSlider;
	intSliderGrp -e -v `wrinkleContext -q -brc $toolName` branchSlider;
	intSliderGrp -e -v `wrinkleContext -q -bd $toolName` depthSlider;
	

	// Set wrinkle type
	//
	int $en=0;
	string $isUniform = `wrinkleContext -q -st $toolName`;
	if ( $isUniform=="lines" ) { 
		radioButtonGrp -e -sl 1 wrinkleTypeRadio1;
		wrinkleWiresCreatedMsg;
	}
	else if ( $isUniform=="custom" ) { 
		radioButtonGrp -e -sl 3 wrinkleTypeRadio1;
		text -e -enable 0 wrinkleMsg;
	}	
	else { 
		radioButtonGrp -e -sl 2 wrinkleTypeRadio1;
		wrinkleWiresCreatedMsg;
		$en=1;
	}

	intSliderGrp -e -enable $en branchSlider;
	intSliderGrp -e -enable $en depthSlider;

	toolPropertySelect wrinkle;
}
