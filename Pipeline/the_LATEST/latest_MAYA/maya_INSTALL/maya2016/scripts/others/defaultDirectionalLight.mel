// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//      defaultDirectionalLight
//
//  Description:
//		Create a default directional light
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
global proc defaultDirectionalLight(
	float $intensity,
	float $colorR,
	float $colorG,
	float $colorB,
	string $useShadows,
	float $shadowColorR,
	float $shadowColorG,
	float $shadowColorB,
	int	  $interactive
	)
{
	// get selected objects in case user wants interactive placement
	// light will be framed on objects
	string $selection[] = `ls -sl`;
	
	string $lightName = `shadingNode -asLight directionalLight`;

	// setOptionVars(false);

	$cmd = ("setAttr " + $lightName + ".intensity " + $intensity);
	eval $cmd;

	$cmd = ("setAttr " + $lightName + ".colorR " + $colorR);
	eval $cmd;
	$cmd = ("setAttr " + $lightName + ".colorG " + $colorG);
	eval $cmd;
	$cmd = ("setAttr " + $lightName + ".colorB " + $colorB);
	eval $cmd;

	// cant do exclusive, not in directionalLight command!!!!!

	$cmd = ("setAttr " + $lightName	+ ".useDepthMapShadows " + $useShadows);
	eval $cmd;

	$cmd = ("setAttr " + $lightName + ".shadColorR " + $shadowColorR);
	eval $cmd;
	$cmd = ("setAttr " + $lightName + ".shadColorG " + $shadowColorG);
	eval $cmd;
	$cmd = ("setAttr " + $lightName + ".shadColorB " + $shadowColorB);
	eval $cmd;

	select -r $lightName;

	objectMoveCommand;

	if ($interactive){
		string $panel = `getPanel -withFocus`;
		if (`getPanel -typeOf $panel` == "modelPanel"){
			select -replace $lightName;
			lookThroughSelected 0 $panel;
			// lookThroughSelected makes camera orthographic for directional
			// light which messes up the fitPanel command so change to a
			// persp cam
			string $cameraShape[] = `listRelatives -c -type camera $lightName`;
			setAttr ($cameraShape[0] + ".orthographic") 0;
			if (`size $selection`){
								select -replace $selection;
				fitPanel -selected;
			} else {
				fitPanel -all;
			}

		} else {
			warning((uiRes("m_defaultDirectionalLight.kNotAModelingPanel")));
		}
	}
}
