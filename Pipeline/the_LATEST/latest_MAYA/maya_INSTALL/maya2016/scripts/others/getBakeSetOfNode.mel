// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Description:
//      This script provides high level operations used by 
//      various forms of baking using various renderers.
//



global proc string getBakeSetOfNode( string $node, int $skipInitialSets )
{
	string $initialBakeSet;
	string $bakeSetType;

	if( `optionVar -query v_mrBakeTo` == "Texture" )
	{
		$initialBakeSet = "initialTextureBakeSet";
		$bakeSetType = "textureBakeSet";
	}
	else
	{
		$initialBakeSet = "initialVertexBakeSet";
		$bakeSetType = "vertexBakeSet";
	}

	string $sets[] = `listSets -ets -o $node`;
	int $numSets = size( $sets );
	if( $numSets > 0 )
	{
		string $set;
		for( $set in $sets )
		{
			if( `nodeType $set` == $bakeSetType )
			{
				// An object can be in an initialBakeSet either
				// explicitly or implicitly (by not being a member
				// of any bake set).  This is the explicit case.
				if( ($set == $initialBakeSet) && $skipInitialSets )
					continue;

				return $set;
			}
		}
	}

	// If we're here, it means the object is not explicitly 
	// in any bake set of the relevant kind.

	if( ! $skipInitialSets )
	{
		// An object can be in an initialBakeSet either
		// explicitly or implicitly (by not being a member
		// of any bake set).  This is the implicit case.
		//
		// The relationship becomes explicit immediately,
		// so that the user can see and navigate the 
		// relationship in the UI.
		string $shapes[] = `ls -dag -objectsOnly -geometry $node`;
		sets -add $initialBakeSet $shapes;

 		return $initialBakeSet;
	}

	return "";
}



global proc string getBakeSetFileFormatSuffix( string $bakeSet )
{
	int $formatNum = `getAttr ($bakeSet + ".fileFormat")`;

	if ($formatNum == 1)
		return "tif";
	else if ($formatNum == 2)
		return "iff";
	else if ($formatNum == 3)
		return "jpg";
	else if ($formatNum == 4)
		return "rgb";
	else if ($formatNum == 5)
		return "rla";
	else if ($formatNum == 6)
		return "tga";
	else if ($formatNum == 7)
		return "bmp";
	else if ($formatNum == 8)
		return "als";
	else if ($formatNum == 9)
		return "gif";
	else if ($formatNum == 10)
		return "pic";
	else if ($formatNum == 11)
		return "sgi";
	else if ($formatNum == 12)
		return "png";
	else if ($formatNum == 13)
		return "psd"; // Photoshop
	else if ($formatNum == 14)
		return "pntg"; // MacPaint

    // Some file formats are still suported but are now unavailable
    // in the UI.  Quantel is no longer supported.  (BUG 163640)
	return "iff";
}


