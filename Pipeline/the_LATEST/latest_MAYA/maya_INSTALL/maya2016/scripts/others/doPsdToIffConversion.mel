// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


// Given the psdFileTex node $node, convert the corresponding PSD file to
// IFF and return the full path of the new file. If this is for export,
// store the file in the project directory, otherwise, store in the disk
// cache to be deleted after maya exits
//

global proc string doPsdToIffConversion(string $node, int $isExport) {
	string $format = "iff";

	string $fileName = `getAttr ($node + ".fileTextureName")`;
	// If the file name is empty, psdExport will crash.
	// Prevent the crash and return early.
	if ($fileName == "")
		return "";

	// expand environment variables and check for existence
	$fileName = `file -q -expandName $fileName`;
	if (!`file -q -exists $fileName`)
		return "";

	// for .mi export we write and retain iff file on disk(under "projects/mentalRay/")
	//
	string $outDir = "";
	if ($isExport == true) {
		$outDir = miGetRootDir();
	} else {
		// non UI mode(batch rendering) also creates tmpDiskCache folder 
		// in tmp folder, so it should be available all the time
		// we delete these files after maya quits
		$outDir = `diskCache -tempDir`;
	}
	if ($outDir == "")
		return "";

	if ($isExport == true ) { // .mi export
		$outDir += "/psdExport/";
	} else  { // Interactive, non UI(batch rendering) or IMR 
		$outDir += "/tempPsd/";
	}				

	string $inFileName = $fileName;
	string $outFileName = basenameEx($fileName);
	string $lsn = `getAttr ($node + ".layerSetName")`;

	// Bug #203143
	// Because mental ray for maya does not support psd directly,
	// mental ray for maya does not detect changes in layer and alpha settings in the psd node during imr.
	// We want to include the alpha settings in the file name
	// so that imr can detect the psd node changes through the file name.
	string $alphaChannelName = `getAttr ($node + ".alpha")`;

	// Photoshop starts "Additional Alpha Channels at index 0, unlike the
	// psdFileTextureNode which starts them at 2, also, default is -1 in PS
	int $acidx = -1;
	if ($alphaChannelName != "Default") {
		string $channels[] = `getAttr ($node + ".alphaList")`;
		for ($i=0; $i<size($channels); $i++) {
			if ($alphaChannelName == $channels[$i]) {
				$acidx = $i;
				break;
			}
		}
	}

	string $finalFileName = ($outDir + $outFileName + "." + $lsn + "_" + $alphaChannelName + "." + $format);

	if (`file -q -exists $finalFileName`) { // check if file exists
		// return iff file name if psd is not updated
		// after previous iff generation
		//
		python("import os");
		if (python("os.path.getmtime(\"" + $inFileName + "\") < os.path.getmtime(\"" + $finalFileName + "\")"))
			return $finalFileName;
	}

	string $cmd = "psdExport ";
	$cmd += ("-ifn \"" + $inFileName + "\" ");
	$cmd += ("-ofn \"" + $finalFileName + "\" ");
	$cmd += ("-lsn \"" + $lsn + "\" ");
	$cmd += ("-for \"" + $format + "\" ");
	if ($acidx > -1) {
		$cmd += ("-aci " + $acidx);
	}

	if (catch(eval($cmd)))
		return "";

	return $finalFileName;
}
