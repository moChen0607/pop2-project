// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//	Creation Date:	Nov 4, 1999
//
//	Procedure:
//	    subdIntoPolyMode
//
//	Description:
//	    Given a subdivision surface (with no construction history),
//      create a polygon.  For more details see the description
//      with "subdiIntoPolyMode" function below.
//

global proc subdIntoPolyMode( int $hookAsHistory, int $allowHistory,
							  int $templateSubd )
//
// Description:
//     If $allowHistory is set, we will try and find a polygon in the
//     history of this object, delete that polygon's blind data of
//     the "hierarchical edits" type and put the new blind data on
//     the polygon shape.  If $allowHistory is not set, we will fail
//     if the subd has history in the first place.  If there is no
//     history on the subd, $allowHistory is ignored.  In that case,
//     we will make a new polygon (using "point position" option and
//     the base mesh on the subd -> poly conversion) and give it the blind
//     data that represents the hierarchical edits.  If $hookAsHistory is
//     set, we will then plug everything through polyToSubdiv node into
//     the subd we started with.  Otherwise, we just leave it be.  Note
//     that subd -> poly must be done without history, or we can end up
//     with a loop.
{
	global int $gSelectSubdivSurface;

	string $list[] = `filterExpand -ex 1 -fp 1 -sm $gSelectSubdivSurface`;
	int $len = size($list);

	if( 0 == $len ) {
		string $msg = (uiRes("m_subdIntoPolyMode.kSelectError"));
		error($msg);
		return;
	}

	// Do each one in turn...
	int $i;
	for( $i=0; $i<$len; $i+=1 ) {
		subdGivenIntoPolyMode( $list[$i], $hookAsHistory,
							   $allowHistory, $templateSubd, 0 );
	}
}
