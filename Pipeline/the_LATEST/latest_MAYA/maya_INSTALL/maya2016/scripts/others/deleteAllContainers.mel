// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  July 30, 1997
//
//<doc>
//<name deleteAllContainers>
//<owner "Autodesk Unsupported">
//
//<synopsis>
//		deleteAllContainers
//
//<arguments>
//		int $selectedOnly
//
//<returns>
//		None
//
//<description>
//      Deletes all containers (or all selected containers) in the scene
//      other than those that are locked or in referenced files. The
//      contents of the container will remain in the scene.
//
//<flags>
//      None
//
//<examples>
//  // To delete all containers
// 	deleteAllContainers;
//
//
//</doc>
/////////////////////////////////////////////////////////////////////////

global proc deleteAllContainers(int $selectedOnly)
{
	int $count = 0;
	string $allContainers[];
	if ($selectedOnly) {
		$allContainers = `ls -sl -containers`;
	} else {
		$allContainers = `ls -containers`;
	}

	for ($container in $allContainers) {
		if (`objectType -isa "transform" $container`) {
			// remove descendents so that deleting the container
			// doesn't automatically delete the children
			//
			ungroup $container;
		}
	}
	
	int $skipped = 0;
	for ($container in $allContainers) {
		if (! `objExists $container`) {
			continue;
		}
		
		// do not delete it if it's from a referenced file
		string $readOnly[] = `ls -readOnly $container`;
		if (size($readOnly) == 0) {
			// do not delete it if it's locked
			int $isLocked[] = `lockNode -q $container`;
			if (0 == $isLocked[0]) {
				container -e -removeContainer $container;
				$count++;
			} else {
				$skipped++;
			}
		} else {
			$skipped++;
		}
	}
	if ($count == 0) {
		if ($skipped > 0) {
			error( (uiRes("m_deleteAllContainers.kContainersLockedOrReferenced")));
		} else {
			print( (uiRes("m_deleteAllContainers.kNoContainersToDelete")) );
		}
	} else {
		string $deleteContainers = (uiRes("m_deleteAllContainers.kDeletedContainers"));
		string $info = `format -stringArg $count $deleteContainers`;
		print( $info );
	}
}
