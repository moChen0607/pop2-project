// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc performPolySpinEdge( int $op )
{
	string $editor = `getPanel -withFocus`;
	if ($editor == "" || "modelPanel" != `getPanel -typeOf $editor`) 
	{
		return;
	}

	string $cmd;
	string $splitNodes[] = `ls -selection -type "polySpinEdge"`;
	if (size($splitNodes) > 0)
	{
		for ($node in $splitNodes)
		{
			string $offsetAttr = ($node + ".offset");
			int $currentOffset = `getAttr $offsetAttr`;
			if ($op == 0)
				$currentOffset++;
			else
				$currentOffset--;

			$cmd += ("setAttr " + $offsetAttr + " " + $currentOffset + ";");
		}

		evalEcho $cmd;
	}
	else
	{
		string $edgeList[] = `filterExpand -expand false -selectionMask 32`;
		if(size($edgeList) != 0)
		{
			int $offset = ($op == 0 ? 1 : -1);
			int $doHistory = `constructionHistory -q -toggle`;
			$cmd = ("polySpinEdge -ch " + $doHistory + " -offset " + $offset);

			string $negEdges[];
		    int $symEnabled = `symmetricModelling -q -symmetry`;
			if ($symEnabled) {
			   $negEdges = `filterExpand -expand false -selectionMask 32 -symNegative`;
			}

			if (size($negEdges) == 0) {
			   	// No symmetry
				$res =`evalEcho $cmd`;
				if (size($res) > 0)
					select -add $res;
			} else {
			  	// Symmetry
				string $posEdges[] = `filterExpand -expand false -selectionMask 32 -symPositive -symSeam`;

			  	// Spin negative edges
				string $negCmd = ($cmd + " -reverse true " + stringArrayToString($negEdges, " "));
				$res1 =`evalEcho $negCmd`;
				if (size($res1) > 0)
					select -add $res1;

			  	// Spin positive edges
				if (size($posEdges) != 0) {
					string $posCmd = ($cmd + " " + stringArrayToString($posEdges, " "));
					$res2 =`evalEcho $posCmd`;
					if (size($res2) > 0)
						select -add $res2;
				}

				// Select original edges
				select -add $edgeList;
			}
		}
		else
		{
			warning( (uiRes("m_performPolySpinEdge.kWarningNoEdgesOrNodeSelected")) );
		}
	}
}
