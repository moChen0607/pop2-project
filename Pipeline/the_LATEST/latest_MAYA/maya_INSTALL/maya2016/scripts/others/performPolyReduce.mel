// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Creation Date: June 9, 1999
//  Major update:  February, 2012
//
//
//  Procedure Name:
//
//      performPolyReduce (UI interface to polyReduce)
//
//		Input Arguments:
//		Returns:
//			Reduce command
//
//  Description:
//
//      Perform a a poly reduction
//
//
//////////////////////////////////////////////////////////////////////

proc setOptionVars (int $forceFactorySettings)
//
// Description:
//		Set user definable options
// Arguments:
//		forceFactorySettings : use defaults
// Returns:
//
//
{
    ////////////////////////////// Termination conditions

	// Termination type, see TdnPolyReduce.attr for values.
    // Note that the optionVar and the internal values are 0,1,2 whereas
    // in the corresponding option menu the values are     1,2,3.
    // That's all sorts of fun to deal with.
	if ($forceFactorySettings || !`optionVar -exists polyReduceTermination`)
		optionVar -intValue polyReduceTermination 0;

	// Percentage of vertices to remove
	if ($forceFactorySettings || !`optionVar -exists polyReducePercent`)
		optionVar -floatValue polyReducePercent 50.0;

	// Number of vertices to keep
	if ($forceFactorySettings || !`optionVar -exists polyReduceVertexCount`)
		optionVar -intValue polyReduceVertexCount 0;

	// Number of triangles to keep
	if ($forceFactorySettings || !`optionVar -exists polyReduceTriangleCount`)
		optionVar -intValue polyReduceTriangleCount 0;


    ////////////////////////////// Shape

	// How hard to try keeping quad lines.  1 means use global reduction,
    // which is the fastest and best option for a quad mesh.
	if ($forceFactorySettings || !`optionVar -exists polyKeepQuadsWeight`)
		optionVar -floatValue polyKeepQuadsWeight 1;

	// Sharpness coefficient
	if ($forceFactorySettings || !`optionVar -exists polyReduceSharpness`)
		optionVar -floatValue polyReduceSharpness 0.0;

	// What kind of symmetry do we use?
    // default = none, 2 = auto, 3 = plane
	if ($forceFactorySettings || !`optionVar -exists polyReduceSymmetryType`)
		optionVar -intValue polyReduceSymmetryType 1;

	// The tolerance for symmetry maintenance.
	if ($forceFactorySettings || !`optionVar -exists polyReduceSymmetryTolerance`)
		optionVar -floatValue polyReduceSymmetryTolerance 0.01;

    // Symmetry plane.  1 = XZ, 2 = XY, 3 = YZ.
	if ($forceFactorySettings || !`optionVar -exists polyReduceSymmetryPlane`)
		optionVar -floatValue polyReduceSymmetryPlane 1;

    ////////////////////////////// Feature Preservation
    // Default value is 0.5 meaning make some effort; 1.0 means
    // pin the vertices.

	// Maintain geometric borders and the border of the selection.
	if ($forceFactorySettings || !`optionVar -exists polyReduceKeepBorder`)
		optionVar -intValue polyReduceKeepBorder 1;
	if ($forceFactorySettings || !`optionVar -exists polyReduceKeepBorderWeight`)
		optionVar -floatValue polyReduceKeepBorderWeight 0.5;

	// Maintain uv borders
	if ($forceFactorySettings || !`optionVar -exists polyReduceKeepMapBorder`)
		optionVar -intValue polyReduceKeepMapBorder 1;
	if ($forceFactorySettings || !`optionVar -exists polyReduceKeepMapBorderWeight`)
		optionVar -floatValue polyReduceKeepMapBorderWeight 0.5;

	// Maintain color borders
	if ($forceFactorySettings || !`optionVar -exists polyReduceKeepColorBorder`)
		optionVar -intValue polyReduceKeepColorBorder 1;
	if ($forceFactorySettings || !`optionVar -exists polyReduceKeepColorBorderWeight`)
		optionVar -floatValue polyReduceKeepColorBorderWeight 0.5;

	// Maintain material borders
	if ($forceFactorySettings || !`optionVar -exists polyReduceKeepMaterialBorder`)
		optionVar -intValue polyReduceKeepMaterialBorder 1;
	if ($forceFactorySettings || !`optionVar -exists polyReduceKeepMaterialBorderWeight`)
		optionVar -floatValue polyReduceKeepMaterialBorderWeight 0.5;

	// Maintain hard edges
	if ($forceFactorySettings || !`optionVar -exists polyReduceKeepHardEdge`)
		optionVar -intValue polyReduceKeepHardEdge 1;
	if ($forceFactorySettings || !`optionVar -exists polyReduceKeepHardEdgeWeight`)
		optionVar -floatValue polyReduceKeepHardEdgeWeight 0.5;

	// Maintain crease edges
	if ($forceFactorySettings || !`optionVar -exists polyReduceKeepCreaseEdge`)
		optionVar -intValue polyReduceKeepCreaseEdge 1;
	if ($forceFactorySettings || !`optionVar -exists polyReduceKeepCreaseEdgeWeight`)
		optionVar -floatValue polyReduceKeepCreaseEdgeWeight 0.5;

    ////////////////////////////// Advanced options
	if ($forceFactorySettings || !`optionVar -exists polyReduceVertexMapName`)
		optionVar -stringValue polyReduceVertexMapName "";

    ////////////////////////////// Command options (no effect on node)

	// Keep Original setting
	if ($forceFactorySettings || !`optionVar -exists polyKeepOriginal`)
		optionVar -intValue polyKeepOriginal 0;

}

//////////////////////////////
// For termination type, the optionVar and internal code use:
//  0 - percentage
//  1 - vertex count
//  2 - triangle count
// The optionMenu uses 1-based indexing, so add one to those.
// These two functions help avoid thinking too much about this problem
// later: they always return 0/1/2.
//
proc int polyReduceTerminationTypeFromMenu (string $parent)
{
    // optionMenu uses 1-based indexing, so the values are
    // 1(percent), 2(vertex), 3(triangle) which we have to convert
    // to 0/1/2.
    setParent $parent;

    int $termItem = `optionMenuGrp -q -sl polyReduceTermination`;
    if ($termItem == 2) {
        return 1;
    } else if ($termItem == 3) {
        return 2;
    } else {
        return 0;
    }
}

proc int polyReduceTerminationTypeFromOptionVar ()
{
	return `optionVar -q polyReduceTermination`;
}


global proc OBpolyReduceCheckBoxSliderEnable(string $parentPath)
//
// Enable or disable parentPath|field and parentPath|slider.
// See the equivalent in AEpolyReduceTemplate.mel
//
{
    string $oldParent = `setParent -q`;
    setParent $parentPath;
        int $enable = `checkBox -q -v box`;
        floatField  -e -en $enable field;
        floatSlider -e -en $enable slider;
    setParent $oldParent;
}

global proc OBpolyReduceCBSGrpSliderChanged(string $parentPath)
{
    string $oldParent = `setParent -q`;
    setParent $parentPath;
    float $fval = `floatSlider -q -v slider`;
    if($fval != `floatField -q -v field`) {
        floatField -e -v $fval field;
    }
    setParent $oldParent;
}

global proc OBpolyReduceCBSGrpFieldChanged(string $parentPath)
{
    string $oldParent = `setParent -q`;
    setParent $parentPath;
    float $fval = `floatField -q -v field`;
    if($fval != `floatSlider -q -v slider`) {
        floatSlider -e -v $fval slider;
    }
    setParent $oldParent;
}

proc checkBoxSliderGrp(
        string  $label,
        string  $annotation,
        int     $boolVal,
        float   $floatVal,
        string  $shortName )
//
// This is a checkBox and slider.
// See also AEpolyReduceTemplate.mel attrCheckBoxSliderGrp().
//
{
    // Edits to the setup here must be reflected in
    // checkBoxSliderGrpEdit below.
    // The rowLayout column widths are carefully eyeballed to make the
    // control line up with an attrFieldSliderGrp
    $parent = `rowLayout -nc 4 -cw 2 15 -cw 3 53 -cat 4 right 4 -adj 4 $shortName`;
        string $enableCallback = ("OBpolyReduceCheckBoxSliderEnable " + $parent);
        string $fieldCB  = ("OBpolyReduceCBSGrpFieldChanged "  + $parent);
        string $sliderCB = ("OBpolyReduceCBSGrpSliderChanged " + $parent);
        text -al right -l $label;
        checkBox -l "" -cc $enableCallback -v $boolVal
            box;
        floatField -ann $annotation -cc $fieldCB -min 0 -max 1 -en $boolVal -v $floatVal
            field;
        floatSlider -ann $annotation -cc $sliderCB -dc $sliderCB -min 0 -max 1 -en $boolVal -v $floatVal
            slider;
    setParent ..;
}

proc checkBoxSliderGrpEdit(
        int     $boolVal,
        float   $floatVal,
        string  $shortName )
{
    setParent $shortName;
        checkBox    -e -v  $boolVal box;
        floatField  -e -en $boolVal -v $floatVal field;
        floatSlider -e -en $boolVal -v $floatVal slider;
    setParent ..;
}


//
// Test whether the symmetry type has a tolerance.
//
proc int symmetryTypeHasTolerance(int $symType)
{
    return $symType > 1;
}

// Test whether the symmetry type has a plane.
proc int symmetryTypeHasPlane(int $symType)
{
    return $symType == 3;
}

//
// When the symmetry type changes, enable/disable related controls.
//
global proc OBpolyReduceUpdateSymmetryType (string $parent)
{
    string $oldParent = `setParent -q`;
    setParent $parent;
		int $quads = (`floatSliderGrp -query -value polyKeepQuadsWeight` == 1.0);
        int $type = `optionMenuGrp -q -sl symmetryType`;
        floatFieldGrp -e -en (!$quads && symmetryTypeHasTolerance($type)) symmetryTolerance;
        optionMenuGrp  -e -en (!$quads && symmetryTypeHasPlane($type)) symmetryPlane;
    setParent $oldParent;
}


//
// When the quad weight changes, enable/disable related controls.
//
global proc OBpolyReduceUpdateQuadsWeight (string $parent)
{
    string $oldParent = `setParent -q`;
    setParent $parent;
		int $quads = (`floatSliderGrp -query -value polyKeepQuadsWeight` == 1.0);
		optionMenuGrp -e -en (!$quads) symmetryType;
    setParent $oldParent;
	OBpolyReduceUpdateSymmetryType $parent;
}


global proc updatePolyReduceTerminationCallback (string $parent)
//
// Description:
//      When the termination condition option changes, update the
//      enable/disable status of the termination conditions.
//
{
    int $termType = `polyReduceTerminationTypeFromMenu $parent`;
    floatSliderGrp -e -vis ($termType == 0) polyReducePercent;
    intFieldGrp    -e -vis ($termType == 1) polyReduceVertexCount;
    intFieldGrp    -e -vis ($termType == 2) polyReduceTriangleCount;
}

global proc performPolyReduceSetup( string $parent, int $forceFactorySettings )
//
// Description:
//		Do the setup of widget states
// Arguments:
//		parent : parent widget
//		forceFactorySettings : set to defaults
// Returns:
//		none
//
{
	setOptionVars($forceFactorySettings);
	setParent $parent;

	int $ival;
	float $fval;
	string $sval;

    setParent constructionOptions;
        $ival = `optionVar -query polyKeepOriginal`;
        checkBoxGrp -edit -value1 $ival polyKeepOriginal;
    setParent ..;

    setParent terminationConditions;
        $ival = `polyReduceTerminationTypeFromOptionVar`;
        optionMenuGrp -e -sl ($ival+1) polyReduceTermination;

        $fval = `optionVar -query polyReducePercent`;
        floatSliderGrp -edit -value $fval polyReducePercent;

        $ival = `optionVar -query polyReduceVertexCount`;
        intFieldGrp -e -v1 $ival polyReduceVertexCount;

        $ival = `optionVar -query polyReduceTriangleCount`;
        intFieldGrp -e -v1 $ival polyReduceTriangleCount;
    setParent ..;

    setParent shape;
        $fval = `optionVar -query polyKeepQuadsWeight`;
		int $quads = ($fval == 1.0); // Symmetry only works for quads < 1.0
        floatSliderGrp -edit -value $fval
			polyKeepQuadsWeight;

        $fval = `optionVar -query polyReduceSharpness`;
        floatSliderGrp -edit -value $fval polyReduceSharpness;

        int $symmetryType = `optionVar -q polyReduceSymmetryType`;
        optionMenuGrp -e -en (!$quads) -sl $symmetryType symmetryType;

        $fval = `optionVar -query polyReduceSymmetryTolerance`;
        floatFieldGrp -e -en (!$quads && symmetryTypeHasTolerance($symmetryType)) -v1 $fval symmetryTolerance;

        $ival = `optionVar -q polyReduceSymmetryPlane`;
        optionMenuGrp -e -en (!$quads && symmetryTypeHasPlane($symmetryType)) -sl $ival symmetryPlane;
    setParent ..;

    setParent features;
        $ival = `optionVar -query polyReduceKeepBorder`;
        $fval = `optionVar -query polyReduceKeepBorderWeight`;
        checkBoxSliderGrpEdit $ival $fval polyReduceKeepBorder;

        $ival = `optionVar -query polyReduceKeepMapBorder`;
        $fval = `optionVar -query polyReduceKeepMapBorderWeight`;
        checkBoxSliderGrpEdit $ival $fval polyReduceKeepMapBorder;

        $ival = `optionVar -query polyReduceKeepColorBorder`;
        $fval = `optionVar -query polyReduceKeepColorBorderWeight`;
        checkBoxSliderGrpEdit $ival $fval polyReduceKeepColorBorder;

        $ival = `optionVar -query polyReduceKeepMaterialBorder`;
        $fval = `optionVar -query polyReduceKeepMaterialBorderWeight`;
        checkBoxSliderGrpEdit $ival $fval polyReduceKeepMaterialBorder;

        $ival = `optionVar -query polyReduceKeepHardEdge`;
        $fval = `optionVar -query polyReduceKeepHardEdgeWeight`;
        checkBoxSliderGrpEdit $ival $fval polyReduceKeepHardEdge;

        $ival = `optionVar -query polyReduceKeepCreaseEdge`;
        $fval = `optionVar -query polyReduceKeepCreaseEdgeWeight`;
        checkBoxSliderGrpEdit $ival $fval polyReduceKeepCreaseEdge;
    setParent ..;

    setParent advancedOptions;
        $sval = `optionVar -q polyReduceVertexMapName`;
        textFieldGrp -e -text $sval polyReduceVertexMapName;
    setParent ..;

    // Disable termination options depending on termination type.
    updatePolyReduceTerminationCallback $parent;
}

global proc performPolyReduceCallback (string $parent, int $doIt)
//
// Description:
//		Save option variables before application or save.
// Arguments:
//		parent : parent widget
//		doIt : perform action
// Returns:
//		none
//
{
    string $oldParent = `setParent -q`;

	setParent $parent;

        setParent constructionOptions;
            optionVar -intValue polyKeepOriginal
                `checkBoxGrp -query -value1 polyKeepOriginal`;
        setParent ..;

        setParent terminationConditions;
            optionVar -intValue polyReduceTermination
                `polyReduceTerminationTypeFromMenu $parent`;
            optionVar -floatValue polyReducePercent
                `floatSliderGrp -query -value polyReducePercent`;
            optionVar -intValue polyReduceVertexCount
                `intFieldGrp -query -v1 polyReduceVertexCount`;
            optionVar -intValue polyReduceTriangleCount
                `intFieldGrp -query -v1 polyReduceTriangleCount`;
        setParent ..;

        setParent shape;
            optionVar -floatValue polyKeepQuadsWeight
                `floatSliderGrp -query -value polyKeepQuadsWeight`;
            optionVar -floatValue polyReduceSharpness
                `floatSliderGrp -query -value polyReduceSharpness`;
            optionVar -intValue polyReduceSymmetryType
                `optionMenuGrp -q -sl symmetryType`;
            optionVar -floatValue polyReduceSymmetryTolerance
                `floatFieldGrp -q -v1 symmetryTolerance`;
            optionVar -intValue polyReduceSymmetryPlane
                `optionMenuGrp -q -sl symmetryPlane`;
        setParent ..;

        setParent features;
            setParent polyReduceKeepBorder;
                optionVar -intValue polyReduceKeepBorder
                    `checkBox -q -v box`;
                optionVar -floatValue polyReduceKeepBorderWeight
                    `floatSlider -q -v slider`;
            setParent ..;

            setParent polyReduceKeepMapBorder;
                optionVar -intValue polyReduceKeepMapBorder
                    `checkBox -q -v box`;
                optionVar -floatValue polyReduceKeepMapBorderWeight
                    `floatSlider -q -v slider`;
            setParent ..;

            setParent polyReduceKeepColorBorder;
                optionVar -intValue polyReduceKeepColorBorder
                    `checkBox -q -v box`;
                optionVar -floatValue polyReduceKeepColorBorderWeight
                    `floatSlider -q -v slider`;
            setParent ..;

            setParent polyReduceKeepMaterialBorder;
                optionVar -intValue polyReduceKeepMaterialBorder
                    `checkBox -q -v box`;
                optionVar -floatValue polyReduceKeepMaterialBorderWeight
                    `floatSlider -q -v slider`;
            setParent ..;

            setParent polyReduceKeepHardEdge;
                optionVar -intValue polyReduceKeepHardEdge
                    `checkBox -q -v box`;
                optionVar -floatValue polyReduceKeepHardEdgeWeight
                    `floatSlider -q -v slider`;
            setParent ..;

            setParent polyReduceKeepCreaseEdge;
                optionVar -intValue polyReduceKeepCreaseEdge
                    `checkBox -q -v box`;
                optionVar -floatValue polyReduceKeepCreaseEdgeWeight
                    `floatSlider -q -v slider`;
            setParent ..;
        setParent ..;

        setParent advancedOptions;
            optionVar -stringValue polyReduceVertexMapName
                `textFieldGrp -q -text polyReduceVertexMapName`;
        setParent ..;

    setParent $oldParent;

	if ($doIt) {
		performPolyReduce 0;
		addToRecentCommandQueue "performPolyReduce 0" "PolyReduce";
	}
}

proc performPolyReduceOptions()
//
// Description:
//		Options for poly Reduce
// Arguments:
//		none
// Returns:
//		none
//
{
	string $commandName = "performPolyReduce";
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	string $layout = getOptionBox();
	setParent $layout;
	setUITemplate -pushTemplate OptionBoxTemplate;

	waitCursor -state 1;

    scrollLayout;
        string $parent = `columnLayout`;

            frameLayout
                -l (uiRes("m_performPolyReduce.kConstructionOptions"))
                -collapsable 1 -collapse 0
                constructionOptions;

                checkBoxGrp
                    -label1 (uiRes("m_performPolyReduce.kKeepOriginal"))
					-ann (uiRes("m_performPolyReduce.kKeepOiginalTooltip"))
                    polyKeepOriginal;
            setParent ..;

            frameLayout
                -l (uiRes("m_performPolyReduce.kTerminationConditions"))
				-ann (uiRes("m_performPolyReduce.kTerminationTooltip"))
                -collapsable 1 -collapse 0
                terminationConditions;

                optionMenuGrp
                    -label (uiRes("m_performPolyReduce.kTermination"))
                    -cc ("updatePolyReduceTerminationCallback " + $parent)
                    polyReduceTermination;

                    menuItem -label (uiRes("m_performPolyReduce.kPercentage"));
                    menuItem -label (uiRes("m_performPolyReduce.kVertexCount"));
                    menuItem -label (uiRes("m_performPolyReduce.kTriangleCount"));

                floatSliderGrp -label (uiRes("m_performPolyReduce.kReduceBy"))
                    -minValue 0.0
                    -maxValue 100.0
                    -fieldMinValue 0.0
                    -fieldMaxValue 100.0
                    polyReducePercent;

                // Target vertex and triangle counts don't have sliders since
                // we have no good way of putting a max on them in the option
                // box.
                intFieldGrp
                    -l (uiRes("m_performPolyReduce.kTargetVertexCount"))
                    polyReduceVertexCount;

                intFieldGrp
                    -l (uiRes("m_performPolyReduce.kTargetTriangleCount"))
                    polyReduceTriangleCount;
            setParent ..;

            frameLayout
                -l (uiRes("m_performPolyReduce.kShape"))
                -collapsable 1 -collapse 0
                shape;

                floatSliderGrp -l (uiRes("m_performPolyReduce.kPolyKeepQuadsWeight"))
					-ann (uiRes("m_performPolyReduce.kKeepQuadWeightTooltip"))
                    -minValue 0.0
                    -maxValue 1.0
                    -fieldMinValue 0.0
                    -fieldMaxValue 1.0
                    -cc ("OBpolyReduceUpdateQuadsWeight " + $parent)
                    polyKeepQuadsWeight;

                floatSliderGrp -l (uiRes("m_performPolyReduce.kSharpness"))
					-ann (uiRes("m_performPolyReduce.kReduceSharpnessTooltip"))
                    -minValue 0.0
                    -maxValue 1.0
                    -fieldMinValue 0.0
                    -fieldMaxValue 1.0
                    polyReduceSharpness;

                optionMenuGrp
                        -l (uiRes("m_performPolyReduce.kSymmetry"))
						-ann (uiRes("m_performPolyReduce.kReduceSymmetryTooltip"))
                        -cc ("OBpolyReduceUpdateSymmetryType " + `setParent -q`)
                        symmetryType;
                    menuItem -l (uiRes("m_performPolyReduce.kSymmetryTypeNone"));      // 1
                    menuItem -l (uiRes("m_performPolyReduce.kSymmetryTypeAuto")); // 2
                    menuItem -l (uiRes("m_performPolyReduce.kSymmetryTypePlanar"));    // 3

                floatFieldGrp -l (uiRes("m_performPolyReduce.kSymmetryTolerance"))
					-ann (uiRes("m_performPolyReduce.kReduceSymmetryToleranceTooltip"))
                    symmetryTolerance;

                optionMenuGrp -l (uiRes("m_performPolyReduce.kSymmetryPlane"))
						-ann (uiRes("m_performPolyReduce.kReduceSymmetryPlaneTooltip"))
                        symmetryPlane;
                    menuItem -l (uiRes("m_performPolyReduce.kSymmetryPlaneXZ")); // 1
                    menuItem -l (uiRes("m_performPolyReduce.kSymmetryPlaneXY")); // 2
                    menuItem -l (uiRes("m_performPolyReduce.kSymmetryPlaneYZ")); // 3

				rowLayout -nc 2 -adj 2 symmetryHint;
					text -l "";
					text -al left -l (uiRes("m_performPolyReduce.kSymmetryHint"));
				setParent ..;

            setParent ..;

            frameLayout
                -l (uiRes("m_performPolyReduce.kFeaturePreservation"))
                -collapsable 1 -collapse 0
                features;

                checkBoxSliderGrp (uiRes("m_performPolyReduce.kKeepBorder"))
					(uiRes("m_performPolyReduce.kReduceBorderTooltip"))
                    false 0.0 polyReduceKeepBorder;
                checkBoxSliderGrp (uiRes("m_performPolyReduce.kKeepMapBorder"))
					(uiRes("m_performPolyReduce.kReduceBorderUVTooltip"))
                    false 0.0 polyReduceKeepMapBorder;
                checkBoxSliderGrp (uiRes("m_performPolyReduce.kKeepColorBorder"))
					(uiRes("m_performPolyReduce.kReduceColorTooltip"))
                    false 0.0 polyReduceKeepColorBorder;
                checkBoxSliderGrp (uiRes("m_performPolyReduce.kKeepMaterialBorder"))
					(uiRes("m_performPolyReduce.kReduceMaterialTooltip"))
                    false 0.0 polyReduceKeepMaterialBorder;
                checkBoxSliderGrp (uiRes("m_performPolyReduce.kKeepHardEdge"))
					(uiRes("m_performPolyReduce.kReduceHardEdgeTooltip"))
                    false 0.0 polyReduceKeepHardEdge;
                checkBoxSliderGrp (uiRes("m_performPolyReduce.kKeepCreaseEdge"))
					(uiRes("m_performPolyReduce.kReduceCreaseEdgeTooltip"))
                    false 0.0 polyReduceKeepCreaseEdge;

            setParent ..;

            frameLayout
                -l (uiRes("m_performPolyReduce.kAdvancedOptions"))
                -collapsable 1 -collapse 1
                advancedOptions;

                textFieldGrp -l (uiRes("m_performPolyReduce.kVertexMapName"))
					-ann (uiRes("m_performPolyReduce.kReduceVertexMapTooltip"))
                    polyReduceVertexMapName;
            setParent ..;
        setParent ..;
    setParent ..;

	//
	// Standard template stuff
	//
	waitCursor -state 0;
    setUITemplate -popTemplate;

    string $applyBtn = getOptionBoxApplyBtn();
    button -edit -label (uiRes("m_performPolyReduce.kReduceButton"))
           -command ($callback + " " + $parent + " " + 1)
        $applyBtn;

    string $saveBtn = getOptionBoxSaveBtn();
    button -edit
        -command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
        $saveBtn;

    string $resetBtn = getOptionBoxResetBtn();
    button -edit
        -command ($setup + " " + $parent + " " + 1)
        $resetBtn;

    setOptionBoxTitle( (uiRes("m_performPolyReduce.kReduceOptions")) );

	//	Customize the 'Help' menu item text.
	//
	setOptionBoxHelpTag( "Reduce" );

    eval (($setup + " " + $parent + " " + 0));
    showOptionBox();
}

proc string assembleCmd()
//
// Description:
//		Build a command based on the current option variables.
// Arguments:
//		None.
// Returns:
//		string command
//
{
	int $ival;
	float $fval;

	string $cmd = "polyReduce";

    // Always use Softimage algorithm
    $cmd = ($cmd + " -ver 1" );

	$ival = `polyReduceTerminationTypeFromOptionVar`;
	$cmd = ($cmd + " -trm " + $ival);
	$fval = `optionVar -query polyReducePercent`;
	$cmd = ($cmd + " -p " + $fval);
	$ival = `optionVar -query polyReduceVertexCount`;
	$cmd = ($cmd + " -vct " + $ival);
	$ival = `optionVar -query polyReduceTriangleCount`;
	$cmd = ($cmd + " -tct " + $ival);

	$fval = `optionVar -query polyReduceSharpness`;
	$cmd = ($cmd + " -shp " + $fval);

	$ival = `optionVar -query polyReduceKeepBorder`;
	$cmd = ($cmd + " -keepBorder " + $ival);
	$ival = `optionVar -query polyReduceKeepMapBorder`;
	$cmd = ($cmd + " -keepMapBorder " + $ival );
	$ival = `optionVar -query polyReduceKeepColorBorder`;
	$cmd = ($cmd + " -keepColorBorder " + $ival );
	$ival = `optionVar -query polyReduceKeepMaterialBorder`;
	$cmd = ($cmd + " -keepFaceGroupBorder " + $ival );
	$ival = `optionVar -query polyReduceKeepHardEdge`;
	$cmd = ($cmd + " -keepHardEdge " + $ival);
	$ival = `optionVar -query polyReduceKeepCreaseEdge`;
	$cmd = ($cmd + " -keepCreaseEdge " + $ival);

	$fval = `optionVar -query polyReduceKeepBorderWeight`;
	$cmd = ($cmd + " -keepBorderWeight " + $fval);
	$fval = `optionVar -query polyReduceKeepMapBorderWeight`;
	$cmd = ($cmd + " -keepMapBorderWeight " + $fval );
	$fval = `optionVar -query polyReduceKeepColorBorderWeight`;
	$cmd = ($cmd + " -keepColorBorderWeight " + $fval );
	$fval = `optionVar -query polyReduceKeepMaterialBorderWeight`;
	$cmd = ($cmd + " -keepFaceGroupBorderWeight " + $fval );
	$fval = `optionVar -query polyReduceKeepHardEdgeWeight`;
	$cmd = ($cmd + " -keepHardEdgeWeight " + $fval);
	$fval = `optionVar -query polyReduceKeepCreaseEdgeWeight`;
	$cmd = ($cmd + " -keepCreaseEdgeWeight " + $fval);

	$ival = `optionVar -query polyReduceSymmetryType`;
    switch($ival) {
        // Menus start at 1, internally we start at 0.
        case 2: $ival = 1; break;    // auto
        case 3: $ival = 2; break;    // plane
        default: $ival= 0; break;    // none
    }
	$cmd = ($cmd + " -useVirtualSymmetry " + $ival );

    $fval = `optionVar -query polyReduceSymmetryTolerance`;
    $cmd = ($cmd + " -symmetryTolerance " + $fval);

    $ival = `optionVar -q polyReduceSymmetryPlane`;
    switch($ival) {
        // Convert to a plane normal.
        case 2: $cmd = ($cmd + " -sx 0 -sy 0 -sz 1 -sw 0"); break; // XY
        case 3: $cmd = ($cmd + " -sx 1 -sy 0 -sz 0 -sw 0"); break; // YZ
        default:$cmd = ($cmd + " -sx 0 -sy 1 -sz 0 -sw 0"); break; // XZ
    }

	$cmd = ($cmd + " -preserveTopology 1");
	$fval = `optionVar -query polyKeepQuadsWeight`;
	$cmd = ($cmd + " -keepQuadsWeight " + $fval);

    $sval = `optionVar -q polyReduceVertexMapName`;
    $cmd = ($cmd + " -vertexMapName \"" + $sval + "\"");

	$ival = !`optionVar -query polyKeepOriginal`;
	$cmd = ($cmd + " -replaceOriginal " + $ival);

	$cmd = ($cmd + " -cachingReduce 1");

	// Check if construction history is on
	//
	int $doHistory = `constructionHistory -q -toggle`;
	$cmd = ($cmd + " -ch " + $doHistory);

	return $cmd;
}

global proc string performPolyReduce(int $option)
//
// Description:
//		Polygon Reduce (UI wrapper)
// Arguments:
//
// Returns:
//
//
{
	string $cmd = "waitCursor -state on; ";

	switch ($option)
	{
	  case 1:
		// Just show the option box
		performPolyReduceOptions();
		break;

	  case 2:
		// Placing on to the shelf, just return the command.
		$cmd = $cmd + " " + assembleCmd();
		$cmd = ($cmd + "; waitCursor -state off;");
		break;

	  default:
		// Build a new command based on current
		// option variables.
		//
		setOptionVars(false);
		string $sel[];
		$cmd = "";

		$sel = `ls -sl`;
		int $index = 0;

		if ( size($sel) == 0 ) {
			error (uiRes("m_performPolyReduce.kInvalidSelection"));
		} else {
			while (size($sel) > $index) {
				string $cursel[];
				int $i;

				// if multiple objects/components are selected, this returns
				// batches of same object selections (i.e. all faces from
				// the same object, or an object itself, etc...)
				$index=`polyNextSelectionBatch $sel $cursel $index`;

				// find out which object is selected
				string $buf[2];
				tokenize $cursel[0] "." $buf;
				string $selObject = ("\"" + $buf[0] + "\"");

				string $selComponents = "";

				// build the command flags
				string $cmd=`assembleCmd`;

				int $areComponentsSelected = 0;

				// if components are selected (i.e. there was a "." in one
				// of the cursel elements), collate them all into 1 string.
				if ( size($buf) > 1 ) {
					$areComponentsSelected = 1;
					for ($i=0; $i<size($cursel); $i++)
						$selComponents=($selComponents + " " + $cursel[$i]);
				}

				if ( $areComponentsSelected ) {
					$cmd = ($cmd + " " + $selComponents);
				} else {
					$cmd = ($cmd + " " + $selObject);
				}

				catch(`evalEcho $cmd`);
			}

			// make sure node is selected when there is history
			if ( 0 != size(`ls -sl`) || (0 != size(`ls -hl`)) ) {
				string $tmp[] = `listHistory`;
				string $totalSel[];
				for ($opNode in $tmp) {
					if (`nodeType $opNode` == "polyReduce") {
						$totalSel[size($totalSel)] = $opNode;
					}
				}
			
 				if (size($totalSel) > 0) 
 					select -add $totalSel[0];
			}

			setToolTo ShowManips;
		}
		break;
	}
	return $cmd;
}

