// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  30 January 2001
//
//  Description:
//      Script to compute the best tessellation settings.
//

proc float min(float $a, float $b)
{
    if ($a < $b)
        return $a;
    else
        return $b;
}
    
//
//  Procedure Name:
//      runupTessellation
//
//  Description:
//      Procedure to runup the tessellation for each frame specified by
//      render globals and compute the nurb surface chord height based
//      on the camera projection.
//
global proc runupTessellation(string $camera, float $start, float $end, float $by, string $surfaces[])
{
    float $ftols[];
    
    int $isFtolsInitialized = false;

	// setup progress bar
	global string $gMainProgressBar;
	int $numFrames = ($end - $start + 1) / $by;
	progressBar -edit
		-beginProgress
        -isInterruptable true
        -status "Evaluating Tessellation ..."
        -maxValue $numFrames
        $gMainProgressBar;

    for ($i = $start; $i <= $end; $i += $by) {
		if (`progressBar -query -isCancelled $gMainProgressBar`) break;
		progressBar -edit -step 1 $gMainProgressBar;

        currentTime -edit $i;

        if ($camera != "-allCameras")
            convertTessellation -camera $camera $surfaces;
        else
            convertTessellation -allCameras $surfaces;

        if ($isFtolsInitialized) {
            float $newFtol;

            for ($j = 0; $j < size($surfaces); $j = $j + 1) {
                $newFtol = `getAttr ($surfaces[$j]+".chordHeight")`;
                $ftols[$j] = min($newFtol, $ftols[$j]);
            }
        }
        else {
            for ($j = 0; $j < size($surfaces); $j = $j + 1) {
                $ftols[$j] = `getAttr ($surfaces[$j]+".chordHeight")`;
            }

            $isFtolsInitialized = true;
        }
    }

	progressBar -edit
		-endProgress
		$gMainProgressBar;

    if ($isFtolsInitialized) {
        for ($j = 0; $j < size($surfaces); $j = $j + 1) {
            setAttr ($surfaces[$j]+".chordHeight") $ftols[$j];
        }
    }
}
