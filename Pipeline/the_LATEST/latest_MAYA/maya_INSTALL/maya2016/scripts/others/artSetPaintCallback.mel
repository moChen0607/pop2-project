// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  May 2003
//
//  Description:
//      Option tool callbacks for Paint Set Membership tool.
//
//
//  Procedure Name:
//     	artSetPaintCallback 
//
//  Description:
//      Initialize the option values.
//
//  Input Arguments:
//
//  Return Value:
//      None.
//
// 

global proc artSetPaintOperationCallback(
	string 	$artCommand
)
{
	string $currContext = `currentCtx`;
	//
	//	Set Memebrship operation frameLayout
	//
	radioButtonGrp -e
		-on1 ($artCommand + " -e -setopertype \"add\" " + $currContext)
		-on2 ($artCommand + " -e -setopertype \"transfer\" " + $currContext)
		-on3 ($artCommand + " -e -setopertype \"remove\" " + $currContext)
		artSetPaintOperationRadio;
	
	// 
	// 	Set Membership flag frameLayout
	//
	textScrollList -e
		-sc ("artSetScrollListClick " + $artCommand ) 
	artSetPaintScrollList;

	textFieldGrp -e 
		-cc ($artCommand + " -e -settomodify \"#1\" " + $currContext)
		objectSetNameField;
}


global proc artSetScrollListClick(
	string $artCommand
)
{
	string $currContext = `currentCtx`;

	string $setNames[] = eval("textScrollList -q -si artSetPaintScrollList");
	string $name = $setNames[0];

	string $cmd = $artCommand + " -e -settomodify " + $name + " " + $currContext;
	eval( $cmd );

	$cmd = $artCommand + " -q -settomodify " + $currContext;
    textFieldGrp -e -text `eval $cmd` objectSetNameField;
}


// =======================================================
// Main Procedure.
// =======================================================

global proc artSetPaintCallback(
	string	$artCommand
)
{
	source "artisanCallback.mel";

	string $currContext = `currentCtx`;
	string $currTool	= `contextInfo -c $currContext`;

	// Basic Brush frameLayout.
	artisanBrushCallback( $artCommand, $currTool );

	// Set Paint Operation frameLayout.
	artSetPaintOperationCallback( $artCommand );

	// Stroke frameLayout.
	artisanStrokeCallback( $artCommand, $currTool );

	// Pressure frameLayout.
	artisanPressureCallback( $artCommand, $currTool );

	// Display frameLayout.
	artisanDisplayCallback( $artCommand, $currTool );
}
