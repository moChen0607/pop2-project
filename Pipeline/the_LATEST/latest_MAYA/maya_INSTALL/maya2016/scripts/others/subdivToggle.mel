// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Dec 10, 1998
//
//
//  Description:
//      This implements subdiv toggles for mesh points and mesh edges
//
// 
// 
//

proc string dosubdivToggleMeshPointDisplay(string $subdiv)
{
	if( `getAttr ($subdiv + ".dispVertices")` > 0 ) {
		setAttr ($subdiv + ".dispVertices") 0;
	} else {
		setAttr ($subdiv + ".dispVertices") 1;
	}
	return $subdiv;
}

proc string dosubdivToggleMeshEdgeDisplay(string $subdiv)
{
	if( `getAttr ($subdiv + ".dispEdges")` > 0 ) {
		setAttr ($subdiv + ".dispEdges") 0;
	} else {
		setAttr ($subdiv + ".dispEdges") 1;
	}
	return $subdiv;
}

proc string dosubdivToggleMeshFaceDisplay(string $subdiv)
{
	if( `getAttr ($subdiv + ".dispFaces")` > 0 ) {
		setAttr ($subdiv + ".dispFaces") 0;
	} else {
		setAttr ($subdiv + ".dispFaces") 1;
	}
	return $subdiv;
}

proc string dosubdivToggleMeshMapDisplay(string $subdiv)
{
	if( `getAttr ($subdiv + ".dispMaps")` > 0 ) {
		setAttr ($subdiv + ".dispMaps") 0;
	} else {
		setAttr ($subdiv + ".dispMaps") 1;
	}
	return $subdiv;
}

proc string dosubdivToggleUVBorderDisplay(string $subdiv)
{
	if( `getAttr ($subdiv + ".dispUVBorder")` > 0 ) {
		setAttr ($subdiv + ".dispUVBorder") 0;
	} else {
		setAttr ($subdiv + ".dispUVBorder") 1;
	}
	return $subdiv;
}

proc string dosubdivToggleCreaseDisplay(string $subdiv)
{
	if( `getAttr ($subdiv + ".dispCreases")` > 0 ) {
		setAttr ($subdiv + ".dispCreases") 0;
	} else {
		// If displaying edges is also off, turn it on
		if( `getAttr ($subdiv + ".dispEdges")` == 0 ) {
			setAttr ($subdiv + ".dispEdges") 1;
		}
		setAttr ($subdiv + ".dispCreases") 1;
	}
	return $subdiv;
}

proc int findInList( string $list[], string $searchString) 
{
	// Returns 1 if the given string was found in the list, otherwise 0
	// Performs a linear search.
	//
	int $len = size($list);
	int $i;
	for( $i = 0; $i < $len; $i ++ ) {
		if( $list[$i] == $searchString ) {
			return 1;
		}
	}
	return 0;
}

global proc subdivToggle(int $item) 
{
	// Get all selected subdiv surfaces
	//
	string $subdivList[] = `filterExpand -ex true -sm 68`;

	// Get all subdiv surfaces with components selected
	//
	string $subdivCompList[] = `filterExpand -ex true -sm 36 -sm 37 -sm 38`; 
	int $len = size($subdivCompList);
	string $subdivSh;
	string $buffer[];
	for( $i = 0; $i < $len; $i ++ ) {

		// Get the shape name without the components
		//
		tokenize($subdivCompList[$i], ".", $buffer );
		$subdivSh = $buffer[0];
		if( size($subdivSh) == 0 ) continue;

		// If the shape is unique then add it to the subdivList
		//
		if( findInList($subdivList, $subdivSh) == 0 ) {
			$subdivList[size($subdivList)] = $subdivSh;
		}
	}

	// for each subdiv in $subdivList, toggle its component display state
	//
	$len = size($subdivList);
	for($i = 0; $i < $len; $i++) {

		if( `getAttr ($subdivList[$i] + ".visibility")` == 0 ) {
			continue;
		}

		switch ($item) {

			// toggle Mesh Points
			case 1:
				string $subdiv = dosubdivToggleMeshPointDisplay($subdivList[$i]);
			break;

			// toggle Mesh Edges
			case 2:
				string $subdiv = dosubdivToggleMeshEdgeDisplay($subdivList[$i]);
			break;

			// toggle Mesh Faces
			case 3:
				string $subdiv = dosubdivToggleMeshFaceDisplay($subdivList[$i]);
			break;

			// toggle Mesh Maps
			case 4:
				string $subdiv = dosubdivToggleMeshMapDisplay($subdivList[$i]);
			break;

			// toggle UV Border
			case 5:
				string $subdiv = dosubdivToggleUVBorderDisplay($subdivList[$i]);
			break;

			// toggle Creases
			case 6:
				string $subdiv = dosubdivToggleCreaseDisplay($subdivList[$i]);
			break;
		}
	}

}
