// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//	Procedure: 	polyRotateUVs(float angle)
//
//	Description:        
//
//		The UVs are rotated about the center of the bBox
//
//  Input arguments
//
//		Angle by which the rotation has to be done.
//
//		The selection list should contain poly components
//
//	Return value
//		None
//

proc rotateUVAbout(float $pu, float $pv, float $angle)
{
	string $cmd="polyEditUV ";
	$cmd += "-pu " + $pu + " ";
	$cmd += "-pv " + $pv + " ";
	$cmd += "-a "  + $angle;

	eval($cmd);
}

global proc polyRotateUVs(float $angle)
{	
	string $inList[]=`ls -sl`;

	if (size($inList) == 0) {
		error((uiRes("m_polyRotateUVs.kEmptySelection")));
		return;
	}

	// Get selected uvs.
	string $map[] = `filterExpand -ex false -sm 35`;
	if (size($map) == 0) {
		// No UVs selected for rotation. If Convert Selection
		// in ON, try to conver the current selection to uvs.
		int $val = `optionVar -q polyAutoConvertAction`;
		if ( 1 == $val ) {
			PolySelectConvert 4;
			$map = `filterExpand -ex false -sm 35`;
		}

		// Check if the set of uvs is still empty.
		if (size($map) == 0) {
			error((uiRes("m_polyRotateUVs.kNoUVsSelected")));
			return;
		}
	}


	// Rotate the uvs now.
	float $UVs[] = `polyEvaluate -bc2`;
	float $U = ($UVs[0] + $UVs[1])/2;
	float $V = ($UVs[2] + $UVs[3])/2;
	float $pu = $U;
	float $pv = $V;
	rotateUVAbout($pu, $pv, $angle);
}


