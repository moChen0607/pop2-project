// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Oct 12 1996
//
//  Major modifaction Date:  8 Nov 1996
//
//
//  Description:
//	  Creates a window to allow editting of the 
//	display colors and the display background colors.
// 

proc string rgbSliderWidget(string $colorName) {
	return ($colorName + "RGBColorSlider");
}
proc string opacitySliderWidget(string $colorName) {
	return ($colorName + "OPACITYColorSlider");
}
proc string dormantSliderWidget(string $colorName) {
	return ("dormant" + $colorName + "ColorSlider");
}
proc string activeSliderWidget(string $colorName) {
	return ("active" + $colorName + "ColorSlider");
}

proc updateRGBSlider( string $colorName ) {
	string $widgetName = rgbSliderWidget($colorName);
	if ( `colorSliderGrp -exists $widgetName` ) {
		float $rgb[] = `displayRGBColor -q $colorName`;
		colorSliderGrp -edit -rgb $rgb[0] $rgb[1] $rgb[2] $widgetName;
	}
}

proc updateOPACITYSlider( string $colorName ) {
	string $widgetName = opacitySliderWidget($colorName);
	if ( `floatSliderGrp -exists $widgetName` ) {
		float $rgb[] = `displayRGBColor -q $colorName`;
		floatSliderGrp -edit -value $rgb[0] $widgetName;
	}
}

proc updateDormantColorIndexSlider (string $colorName)
{
	string $widgetName = dormantSliderWidget($colorName);
	if ( `colorIndexSliderGrp -exists $widgetName` ) {
    	int $col = `displayColor -q -dormant $colorName`;
		colorIndexSliderGrp -edit -value ($col + 1) $widgetName;
	}
	
	// We've duplicated the grid colours in the grid option box.
	// Check to see if it is up and update it's colours too.
	//
	global string $gOptionBox;
	if (`colorIndexSliderGrp -exists GridOptionsAxesColor`) {
		gridSetup($gOptionBox, false);
	}
}

proc updateActiveColorIndexSlider (string $colorName)
{
	string $widgetName = activeSliderWidget($colorName);
	if ( `colorIndexSliderGrp -exists $widgetName` ) {
    	int $col = `displayColor -q -active $colorName`;
		colorIndexSliderGrp -edit -value ($col + 32) $widgetName;
	}	
}

global proc changeColorIndex (string $widgetID) {
	int $c = `palettePort -q -scc $widgetID`;
	if ( $c < 30 ) {
		float $rgb[];
		$rgb = `palettePort -q -rgb $widgetID`;
		colorIndex ($c+1) $rgb[0] $rgb[1] $rgb[2];
	}
}

global proc updateActiveIndexColor (string $colorName) {
	string $widgetName = activeSliderWidget($colorName);
	int $col=`colorIndexSliderGrp -q -value $widgetName`;
	displayColor -active $colorName ($col - 32);
	if ( ( ($col - 33) < 23 ) &&
		 ( ($col - 33) >= 0 ) )
	{
		palettePort -e -scc ($col - 33) activePalette;
	}
}

global proc updateDormantIndexColor (string $colorName) {
	string $widgetName = dormantSliderWidget($colorName);
	int $col =`colorIndexSliderGrp -q -value $widgetName`;
	displayColor -dormant $colorName ($col - 1);
	if ( ( ($col - 2) < 23 ) &&
		 ( ($col - 2) >= 0 ) )
	{
		palettePort -e -scc ($col - 2) dormantPalette;
	}
	
	// We've duplicated the grid colours in the grid option box.
	// Check to see if it is up and update it's colours too.
	//
	global string $gOptionBox;
	if (`colorIndexSliderGrp -exists GridOptionsAxesColor`) {
		gridSetup($gOptionBox, false);
	}
}

global proc updateColorIndexColor (string $colorName) {
	string $widgetName = dormantSliderWidget($colorName);
	int $col =`colorIndexSliderGrp -q -value $widgetName`;
	displayColor -dormant $colorName ($col - 1);
}

global proc updateRGBColor (string $colorName) {
	string $widgetName = rgbSliderWidget($colorName);
	float $col[];
	$col=`colorSliderGrp -q -rgb $widgetName`;
	displayRGBColor $colorName $col[0] $col[1] $col[2];
		
	// If the User Defined Color Palette window is up, update it
	// We don't check what colour is being updated here because
	// the checking is slower than actually doing the work
	//
	global string $gObjColorPalette;
	if (`palettePort -exists $gObjColorPalette`) {
		initObjColorPalette();
	}
}

global proc updateOPACITYColor (string $colorName) {
	string $widgetName = opacitySliderWidget($colorName);
	float $op;
	$op=`floatSliderGrp -q -value $widgetName`;
	displayRGBColor $colorName $op $op $op;
}

proc createRGBSlider( string $label, string $colorName ) {
	float $rgb[];
    if ( !catch($rgb = `displayRGBColor -q $colorName`) ) {
		string $widgetName = rgbSliderWidget($colorName);
		colorSliderGrp -label $label
					   -rgb $rgb[0] $rgb[1] $rgb[2]
					   -cc ("updateRGBColor " + $colorName)
					   $widgetName;
	}
}

proc createOPACITYSlider( string $label, string $colorName ) {
	float $rgb[];
    if ( !catch($rgb = `displayRGBColor -q $colorName`) ) {
		string $widgetName = opacitySliderWidget($colorName);
		floatSliderGrp  -label $label
				-precision 2
				-minValue 0.0 -maxValue 1.0
				-value $rgb[0]
				-cc ("updateOPACITYColor " + $colorName)
				 $widgetName;
	}
}

proc createActiveColorIndexSlider( string $label, string $colorName ) {
	int $c;
    if ( !catch ($c = `displayColor -q -active $colorName`) ) {
		string $widgetName = activeSliderWidget($colorName);
		colorIndexSliderGrp -label $label
	        -min 33 -max 55 -value ($c+32)
			-cc ("updateActiveIndexColor " + $colorName)
			$widgetName;
	}
}

proc createDormantColorIndexSlider( string $label, string $colorName ) {
	int $c;
    if ( !catch( $c = `displayColor -q -dormant $colorName`) )  {
		string $widgetName = dormantSliderWidget($colorName);
		colorIndexSliderGrp -label $label
	        -min 2 -max 24 -value ($c+1)
			-cc ("updateDormantIndexColor " + $colorName)
			$widgetName;
	}
}

proc initPalette( string $palette )
{
    if (`palettePort -exists $palette`) {
		for ($i=1; $i<=23; $i++ ) {
			float $tmp[] = `colorIndex -q $i`;
			palettePort -e -r -rgb ($i-1) $tmp[0] $tmp[1] $tmp[2] $palette;
		}
	}
}

//////////////////////////////////////////////////////////////////////

global proc colorPrefUpdateGeneral(string $parent)
{
	setParent $parent;

	// 3d views
	updateRGBSlider "background";
	updateRGBSlider "backgroundTop";
	updateRGBSlider "backgroundBottom";
	// updateRGBSlider "template";
	
	// user defined
	updateRGBSlider "userDefined1";
	updateRGBSlider "userDefined2";
	updateRGBSlider "userDefined3";
	updateRGBSlider "userDefined4";
	updateRGBSlider "userDefined5";
	updateRGBSlider "userDefined6";
	updateRGBSlider "userDefined7";
	updateRGBSlider "userDefined8";

	// ghosts
	updateDormantColorIndexSlider "ghostsBefore";
	updateDormantColorIndexSlider "ghostsAfter";	

	updateDormantColorIndexSlider "blendJoints";
	updateDormantColorIndexSlider "fkJoints";
	
	updateDormantColorIndexSlider "headsUpDisplayLabels";
	updateDormantColorIndexSlider "headsUpDisplayValues";
	updateDormantColorIndexSlider "headsUpDisplayButtons";
	updateDormantColorIndexSlider "headsUpDisplaySliders";

	// animation
	updateRGBSlider "currentTime";
	updateRGBSlider "timeSliderKey";
	updateRGBSlider "timeSliderBreakdown";
	updateRGBSlider "timeSliderTickDrawSpecial";
	updateRGBSlider "timeSliderCurrentFrame";
	updateOPACITYSlider "timeSliderCurrentFrameOPACITY";
	updateRGBSlider "timeSliderForeground";
	updateRGBSlider "timeSliderBackground";
	updateRGBSlider "transformX";
	updateRGBSlider "transformY";
	updateRGBSlider "transformZ";
	updateRGBSlider "colorR";
	updateRGBSlider "colorG";
	updateRGBSlider "colorB";
	updateRGBSlider "transformNodes";
	updateRGBSlider "cameraNodes";
	updateRGBSlider "historyNodes";
	updateRGBSlider "polygonNodes";
	updateRGBSlider "otherNodes";
	updateRGBSlider "sound";
	updateRGBSlider "curveTemplate";

	// animation editors
	updateRGBSlider "summaryObject";
	updateRGBSlider "object";
	updateRGBSlider "compoundAttribute";
	updateRGBSlider "timeLabel";
	updateRGBSlider "animationRange";
	updateRGBSlider "graphEditorGridAxis";
	updateRGBSlider "graphEditorGrid";
	updateRGBSlider "graphEditorBackground";
	updateRGBSlider "graphEditorRegionSelectBackground";
	updateRGBSlider "graphEditorRetimeMarkerBar";
	updateRGBSlider "graphEditorRetimeHandle";
	updateRGBSlider "graphEditorRetimeMarkerOver";
	updateRGBSlider "graphEditorRetimeMarkerSelected";
	updateRGBSlider "graphEditorRetimeMarkerSelectedOver";
	updateRGBSlider "dopeSheetBackground";
	updateRGBSlider "stackedBackground";
	updateRGBSlider "stackedGutter";
	updateRGBSlider "preSelectHighlight";

	// multi-lister
	updateRGBSlider "listerNormalBackground";
	updateRGBSlider "listerNetworkBox1";
	updateRGBSlider "listerNetworkBox2";
	updateRGBSlider "listerHighlightForeground";
	updateRGBSlider "listerHighlightBackground";
	updateRGBSlider "listerSelectForeground";

	// render view
	updateRGBSlider "renderViewBackground";
	updateRGBSlider "renderViewCaption";
	updateRGBSlider "renderViewActionCaption";

	// hypergraph
	updateRGBSlider "hyperBackgroundColor";
	updateRGBSlider "hyperNormalColor";
	updateRGBSlider "hyperNormalLineColor";
	updateRGBSlider "hyperSelectedColor";
	updateRGBSlider "hyperHighlightColor";
	updateRGBSlider "hyperDimColor";
	updateRGBSlider "hyperSelectedHighlightColor";
	updateRGBSlider "hyperTemplatedColor";
	updateRGBSlider "hyperInstancedColor";
	updateRGBSlider "hyperIconShadowColor";
	updateRGBSlider "hyperIconOutlineColor";
	updateRGBSlider "hyperLabelColor";
	updateRGBSlider "hyperLine1Color";
	updateRGBSlider "hyperLine2Color";
	updateRGBSlider "hyperLine3Color";
	updateRGBSlider "hyperLine4Color";
	updateRGBSlider "hyperLine5Color";

	updateRGBSlider "hyperSingleAttrColor";
	updateRGBSlider "hyperDoubleAttrColor";
	updateRGBSlider "hyperTripleAttrColor";
	updateRGBSlider "hyperDataAttrColor";
	updateRGBSlider "hyperArrayAttrColor";

	updateRGBSlider "hyperMaterialColor";
	updateRGBSlider "hyperTextureColor";
	updateRGBSlider "hyperUtilityColor";

	updateRGBSlider "hyperCachedPlugColor";

	updateRGBSlider "hyperHeatMapLineColor";
	updateRGBSlider "hyperHeatMap0Color";
	updateRGBSlider "hyperHeatMap1Color";
	updateRGBSlider "hyperHeatMap2Color";
	updateRGBSlider "hyperHeatMap3Color";
	updateRGBSlider "hyperHeatMap4Color";
	updateRGBSlider "hyperHeatMap5Color";
	updateRGBSlider "hyperHeatMap6Color";
	updateRGBSlider "hyperHeatMap7Color";
	
	// node editor
	updateRGBSlider "nodeEditorGrid";
	updateRGBSlider "nodeEditorBackground";
	updateRGBSlider "nodeEditorUnconnectedMasterPort";

	updateRGBSlider "nodeEditorAnimationNode";
	updateRGBSlider "nodeEditorGeometryNode";
	updateRGBSlider "nodeEditorDeformerNode";
	updateRGBSlider "nodeEditorShaderNode";
	updateRGBSlider "nodeEditorCacheNode";
	updateRGBSlider "nodeEditorAssetNode";
	updateRGBSlider "nodeEditorDynamicNode";
	updateRGBSlider "nodeEditorCameraNode";
	updateRGBSlider "nodeEditorJointNode";
	updateRGBSlider "nodeEditorLightingNode";
	updateRGBSlider "nodeEditorUtilityNode";
	updateRGBSlider "nodeEditorTimeNode";
	updateRGBSlider "nodeEditorOtherNode";

	updateRGBSlider "nodeEditorBooleanAttribute";
	updateRGBSlider "nodeEditorIntegerAttribute";
	updateRGBSlider "nodeEditorStringAttribute";
	updateRGBSlider "nodeEditorQuaternionAttribute";
	updateRGBSlider "nodeEditorTwoDVectorAttribute";
	updateRGBSlider "nodeEditorThreeDVectorAttribute";
	updateRGBSlider "nodeEditorNumericAttribute";
	updateRGBSlider "nodeEditorRotationAttribute";
	updateRGBSlider "nodeEditorMatrixAttribute";
	updateRGBSlider "nodeEditorColorAttribute";
	updateRGBSlider "nodeEditorCurveAttribute";
	updateRGBSlider "nodeEditorArrayAttribute";
	updateRGBSlider "nodeEditorInOutMeshAttribute";
	updateRGBSlider "nodeEditorMultiAmbiguousAttribute";
	
	// outliner
	updateRGBSlider "outlinerInvisibleColor";
	updateRGBSlider "outlinerTemplatedColor";
	updateRGBSlider "outlinerTemplInvisColor";
	updateRGBSlider "outlinerHilightColor";
	updateRGBSlider "outlinerChildHilightColor";

    // script editor syntax highlighting
	updateRGBSlider "syntaxText";
    updateRGBSlider "syntaxKeywords";
    updateRGBSlider "syntaxStrings";
    updateRGBSlider "syntaxComments";
    updateRGBSlider "syntaxCommands";
    updateRGBSlider "syntaxBackground";
}


global proc createGeneral3dViewsColorsUI(string $parent)
{
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
        createRGBSlider (uiRes("m_colorPrefWnd.kBackground")) "background";
        createRGBSlider (uiRes("m_colorPrefWnd.kBackgroundTop")) "backgroundTop";
        createRGBSlider (uiRes("m_colorPrefWnd.kBackgroundBot")) "backgroundBottom";
			// createRGBSlider "Template:" "template";
		setUITemplate -popTemplate;
    }
}

global proc createGeneralUserDefinedColorsUI(string $parent)
{
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
        createRGBSlider (uiRes("m_colorPrefWnd.kUserDefined1")) 
            "userDefined1";
        createRGBSlider (uiRes("m_colorPrefWnd.kUserDefined2"))
            "userDefined2";
        createRGBSlider (uiRes("m_colorPrefWnd.kUserDefined3"))
            "userDefined3";
        createRGBSlider (uiRes("m_colorPrefWnd.kUserDefined4"))
            "userDefined4";
        createRGBSlider (uiRes("m_colorPrefWnd.kUserDefined5"))
            "userDefined5";
        createRGBSlider (uiRes("m_colorPrefWnd.kUserDefined6"))
            "userDefined6";
        createRGBSlider (uiRes("m_colorPrefWnd.kUserDefined7"))
            "userDefined7";
        createRGBSlider (uiRes("m_colorPrefWnd.kUserDefined8"))
                "userDefined8";
		setUITemplate -popTemplate;
    }
}

global proc createGhostColorsUI(string $parent)
{
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
		int $c;
	    if ( !catch( $c = `displayColor -q -dormant "ghostsBefore"`) )  {
			string $widgetName = dormantSliderWidget("ghostsBefore");
            colorIndexSliderGrp 
                -label (uiRes("m_colorPrefWnd.kGhostsBefore"))
		        -min 2 -max 24 -value ($c+1)
				-cc ("updateColorIndexColor ghostsBefore")
				$widgetName;
		}
	    if ( !catch( $c = `displayColor -q -dormant "ghostsAfter"`) )  {
			string $widgetName = dormantSliderWidget("ghostsAfter");
            colorIndexSliderGrp 
                -label (uiRes("m_colorPrefWnd.kGhostsAfter"))
		        -min 2 -max 24 -value ($c+1)
				-cc ("updateColorIndexColor ghostsAfter")
				$widgetName;
		}
		setUITemplate -popTemplate;
    }
}

global proc createIKFKBlendingColorsUI(string $parent)
{
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
		int $c;
	    if ( !catch( $c = `displayColor -q -dormant "fkJoints"`) )  {
			string $widgetName = dormantSliderWidget("fkJoints");
            colorIndexSliderGrp -label (uiRes("m_colorPrefWnd.kFKJoints"))
		        -min 2 -max 24 -value ($c+1)
				-cc ("updateColorIndexColor fkJoints")
				$widgetName;
		}
	    if ( !catch( $c = `displayColor -q -dormant "blendJoints"`) )  {
			string $widgetName = dormantSliderWidget("blendJoints");
			colorIndexSliderGrp 
                -label (uiRes("m_colorPrefWnd.kIKFKBlendedJoints"))
		        -min 2 -max 24 -value ($c+1)
				-cc ("updateColorIndexColor blendJoints")
				$widgetName;
		}
		setUITemplate -popTemplate;
    }
}

global proc createHeadsUpDisplayColorsUI(string $parent)
{
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
		int $c;
	    if( !catch($c = `displayColor -q -dormant "headsUpDisplayLabels"`) ) {
			string $widgetName = dormantSliderWidget( "headsUpDisplayLabels" );
            colorIndexSliderGrp -label (uiRes("m_colorPrefWnd.kLabels"))
		        -min 2 -max 24 -value ($c+1)
				-cc ("updateColorIndexColor headsUpDisplayLabels")
				$widgetName;
		}
	    if( !catch($c = `displayColor -q -dormant "headsUpDisplayValues"`) ) {
			string $widgetName = dormantSliderWidget("headsUpDisplayValues" );
            colorIndexSliderGrp -label (uiRes("m_colorPrefWnd.kValues"))
		        -min 2 -max 24 -value ($c+1)
				-cc ("updateColorIndexColor headsUpDisplayValues")
				$widgetName;
		}
		if( !catch($c = `displayColor -q -dormant "headsUpDisplayButtons"`) ) {
			string $widgetName = dormantSliderWidget( "headsUpDisplayButtons" );
            colorIndexSliderGrp -label (uiRes("m_colorPrefWnd.kButtons"))
		        -min 2 -max 24 -value ($c+1)
				-cc ("updateColorIndexColor headsUpDisplayButtons")
				$widgetName;
		}
		if( !catch($c = `displayColor -q -dormant "headsUpDisplaySliders"`) ) {
			string $widgetName = dormantSliderWidget( "headsUpDisplaySliders" );
            colorIndexSliderGrp -label (uiRes("m_colorPrefWnd.kSliders"))
		        -min 2 -max 24 -value ($c+1)
				-cc ("updateColorIndexColor headsUpDisplaySliders")
				$widgetName;
		}
		setUITemplate -popTemplate;
    }
}

global proc createGeneralAnimationColorsUI(string $parent)
{
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
        createRGBSlider (uiRes("m_colorPrefWnd.kCurrentTime")) "currentTime";
        createRGBSlider (uiRes("m_colorPrefWnd.kTimeSliderKey")) "timeSliderKey";
			createRGBSlider 
                (uiRes("m_colorPrefWnd.kTimeSliderBreakDown")) "timeSliderBreakdown";
			createRGBSlider 
                (uiRes("m_colorPrefWnd.kTimeSliderTickSpecial")) "timeSliderTickDrawSpecial";
			createRGBSlider (uiRes("m_colorPrefWnd.kTimeSliderCurrentFrame")) "timeSliderCurrentFrame";
			createOPACITYSlider (uiRes("m_colorPrefWnd.kTimeSliderCurrentFrameOPACITY")) "timeSliderCurrentFrameOPACITY";
			createRGBSlider (uiRes("m_colorPrefWnd.kTimeSliderForeground")) "timeSliderForeground";
			createRGBSlider (uiRes("m_colorPrefWnd.kTimeSliderBackground")) "timeSliderBackground";
            createRGBSlider (uiRes("m_colorPrefWnd.kXTransform")) "transformX";
            createRGBSlider (uiRes("m_colorPrefWnd.kYTransform")) "transformY";
            createRGBSlider (uiRes("m_colorPrefWnd.kZTransform")) "transformZ";
            createRGBSlider (uiRes("m_colorPrefWnd.kRedColor")) "colorR";
            createRGBSlider (uiRes("m_colorPrefWnd.kGreenColor")) "colorG";
            createRGBSlider (uiRes("m_colorPrefWnd.kBlueColor")) "colorB";
            createRGBSlider (uiRes("m_colorPrefWnd.kTransformNodes")) "transformNodes";
            createRGBSlider (uiRes("m_colorPrefWnd.kCameraNodes")) "cameraNodes";
            createRGBSlider (uiRes("m_colorPrefWnd.kHistoryNodes")) "historyNodes";
            createRGBSlider (uiRes("m_colorPrefWnd.kPolygonNodes")) "polygonNodes";
            createRGBSlider (uiRes("m_colorPrefWnd.kOtherNodes")) "otherNodes";
            createRGBSlider (uiRes("m_colorPrefWnd.kSound")) "sound";
			createRGBSlider (uiRes("m_colorPrefWnd.kTemplatedCurves")) "curveTemplate";		
			
		setUITemplate -popTemplate;
    }
}

global proc createGeneralAnimationEditorColorsUI(string $parent)
{
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
		createRGBSlider (uiRes("m_colorPrefWnd.kSummaryObject")) "summaryObject";
		createRGBSlider (uiRes("m_colorPrefWnd.kObject")) "object";
		createRGBSlider (uiRes("m_colorPrefWnd.kCompoundAttribute")) "compoundAttribute";
		createRGBSlider (uiRes("m_colorPrefWnd.kTimeLabel")) "timeLabel";
		createRGBSlider (uiRes("m_colorPrefWnd.kAnimationRange")) "animationRange";

		separator -style "none" -height 2;
		createRGBSlider (uiRes("m_colorPrefWnd.kGraphEditorGridAxes")) "graphEditorGridAxis";
		createRGBSlider (uiRes("m_colorPrefWnd.kGraphEditorGridLines")) "graphEditorGrid";
		createRGBSlider (uiRes("m_colorPrefWnd.kGraphEditorBackground")) "graphEditorBackground";
		createRGBSlider (uiRes("m_colorPrefWnd.kGraphEditorRegionSelectBackground")) "graphEditorRegionSelectBackground";
		createRGBSlider (uiRes("m_colorPrefWnd.kGraphEditorRetimeMarkerBar")) "graphEditorRetimeMarkerBar";
		createRGBSlider (uiRes("m_colorPrefWnd.kGraphEditorRetimeHandle")) "graphEditorRetimeHandle";
		createRGBSlider (uiRes("m_colorPrefWnd.kGraphEditorRetimeMarkerOver")) "graphEditorRetimeMarkerOver";
		createRGBSlider (uiRes("m_colorPrefWnd.kGraphEditorRetimeMarkerSelected")) "graphEditorRetimeMarkerSelected";
		createRGBSlider (uiRes("m_colorPrefWnd.kGraphEditorRetimeMarkerSelectedOver")) "graphEditorRetimeMarkerSelectedOver";
		separator -style "none" -height 2;

		createRGBSlider (uiRes("m_colorPrefWnd.kDopeSheetBackground")) "dopeSheetBackground";
		createRGBSlider (uiRes("m_colorPrefWnd.kStackedBackground")) "stackedBackground";
		createRGBSlider (uiRes("m_colorPrefWnd.kStackedGutter")) "stackedGutter";
		createRGBSlider (uiRes("m_colorPrefWnd.kAnimPreSelectHighlight")) "preSelectHighlight";
		setUITemplate -popTemplate;
	}
}

global proc createRenderViewColorsUI(string $parent)
{
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
        createRGBSlider (uiRes("m_colorPrefWnd.kBackgroundRenderView")) "renderViewBackground";
            createRGBSlider (uiRes("m_colorPrefWnd.kCaption")) "renderViewCaption";
            createRGBSlider (uiRes("m_colorPrefWnd.kRenderCaption")) "renderViewActionCaption";
		setUITemplate -popTemplate;
    }
}

global proc createGeneralHypergraphColorsUI(string $parent)
{
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
        createRGBSlider (uiRes("m_colorPrefWnd.kBackgroundHyperGraph")) "hyperBackgroundColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kForeground")) "hyperNormalColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kLine")) "hyperNormalLineColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kSelected")) "hyperSelectedColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kHighlight")) "hyperHighlightColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kInvisible")) "hyperDimColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kSelectedHighlight")) "hyperSelectedHighlightColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kTemplated")) "hyperTemplatedColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kInstanced")) "hyperInstancedColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kIconShadow")) "hyperIconShadowColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kIconOutline")) "hyperIconOutlineColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kLabel")) "hyperLabelColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kExpressionLines")) "hyperLine1Color";
        createRGBSlider (uiRes("m_colorPrefWnd.kConstraintLines")) "hyperLine2Color";
        createRGBSlider (uiRes("m_colorPrefWnd.kDeformedLines")) "hyperLine3Color";
        createRGBSlider (uiRes("m_colorPrefWnd.kReserved")) "hyperLine4Color";
		createRGBSlider (uiRes("m_colorPrefWnd.kReserved")) "hyperLine5Color";
        createRGBSlider (uiRes("m_colorPrefWnd.kSingleAttributes")) "hyperSingleAttrColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kDoubleAttributes")) "hyperDoubleAttrColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kTripleAttributes")) "hyperTripleAttrColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kDataAttributes")) "hyperDataAttrColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kArrayAttributes")) "hyperArrayAttrColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kMaterial")) "hyperMaterialColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kTexture")) "hyperTextureColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kUtility")) "hyperUtilityColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kCachedPlug")) "hyperCachedPlugColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kHeatMapLine"))	"hyperHeatMapLineColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kHeatMap0"))	"hyperHeatMap0Color";
        createRGBSlider (uiRes("m_colorPrefWnd.kHeatMap1"))		"hyperHeatMap1Color";
        createRGBSlider (uiRes("m_colorPrefWnd.kHeatMap2"))			"hyperHeatMap2Color";
        createRGBSlider (uiRes("m_colorPrefWnd.kHeatMap3"))		"hyperHeatMap3Color";
        createRGBSlider (uiRes("m_colorPrefWnd.kHeatMap4"))			"hyperHeatMap4Color";
        createRGBSlider (uiRes("m_colorPrefWnd.kHeatMap5"))			"hyperHeatMap5Color";
        createRGBSlider (uiRes("m_colorPrefWnd.kHeatMap6"))			"hyperHeatMap6Color";
        createRGBSlider (uiRes("m_colorPrefWnd.kHeatMap7"))			"hyperHeatMap7Color";

		setUITemplate -popTemplate;
    }
}

global proc createGeneralNodeEditorColorsNodeTypesUI(string $parent)
{
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount)
	{
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
		
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorAnimationNode")) "nodeEditorAnimationNode";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorGeometryNode")) "nodeEditorGeometryNode";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorDeformerNode")) "nodeEditorDeformerNode";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorShaderNode")) "nodeEditorShaderNode";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorCacheNode")) "nodeEditorCacheNode";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorAssetNode")) "nodeEditorAssetNode";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorDynamicNode")) "nodeEditorDynamicNode";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorCameraNode")) "nodeEditorCameraNode";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorJointNode")) "nodeEditorJointNode";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorLightingNode")) "nodeEditorLightingNode";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorUtilityNode")) "nodeEditorUtilityNode";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorTimeNode")) "nodeEditorTimeNode";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorOtherNode")) "nodeEditorOtherNode";
		
		setUITemplate -popTemplate;
	}
}

global proc createGeneralNodeEditorColorsAttributeTypesUI(string $parent)
{
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount)
	{
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
		
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorBooleanAttribute")) "nodeEditorBooleanAttribute";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorIntegerAttribute")) "nodeEditorIntegerAttribute";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorStringAttribute")) "nodeEditorStringAttribute";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorQuaternionAttribute")) "nodeEditorQuaternionAttribute";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorTwoDVectorAttribute")) "nodeEditorTwoDVectorAttribute";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorThreeDVectorAttribute")) "nodeEditorThreeDVectorAttribute";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorNumericAttribute")) "nodeEditorNumericAttribute";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorRotationAttribute")) "nodeEditorRotationAttribute";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorMatrixAttribute")) "nodeEditorMatrixAttribute";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorColorAttribute")) "nodeEditorColorAttribute";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorCurveAttribute")) "nodeEditorCurveAttribute";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorArrayAttribute")) "nodeEditorArrayAttribute";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorInOutMeshAttribute")) "nodeEditorInOutMeshAttribute";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorMultiAmbiguousAttribute")) "nodeEditorMultiAmbiguousAttribute";
		
		setUITemplate -popTemplate;
	}
}

global proc createGeneralNodeEditorColorsUI(string $parent)
{
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) 
	{
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;

		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorGrid")) "nodeEditorGrid";
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorBackground")) "nodeEditorBackground";
		separator -style "none" -height 2;
		createRGBSlider (uiRes("m_colorPrefWnd.kNodeEditorUnconnectedMasterPorts")) "nodeEditorUnconnectedMasterPort";
		separator -style "none" -height 2;
		
		string $nodeFrame = `frameLayout -label (uiRes("m_colorPrefWnd.kNodeEditorNodeTypes"))`;
		frameLayout -edit
			-preExpandCommand ("createGeneralNodeEditorColorsNodeTypesUI \"" + $nodeFrame + "\";")
			$nodeFrame;
		setParent $parent;

		string $attrFrame = `frameLayout -label (uiRes("m_colorPrefWnd.kNodeEditorAttributeTypes"))`;
		frameLayout -edit
			-preExpandCommand ("createGeneralNodeEditorColorsAttributeTypesUI \"" + $attrFrame + "\";")
			$attrFrame;
		setParent $parent;
		setUITemplate -popTemplate;
    }
}

global proc createGeneralOutlinerColorsUI(string $parent)
{
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
        createRGBSlider (uiRes("m_colorPrefWnd.kInvisibleOutliner")) "outlinerInvisibleColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kTemplatedOutliner")) "outlinerTemplatedColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kTemplatedInvisible")) "outlinerTemplInvisColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kHighlightOutliner")) "outlinerHilightColor";
        createRGBSlider (uiRes("m_colorPrefWnd.kChildSelectedHighlight")) "outlinerChildHilightColor";
		setUITemplate -popTemplate;
    }
}

global proc createGeneralScriptEditorColorsUI(string $parent)
{
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
		createRGBSlider (uiRes("m_colorPrefWnd.kText")) "syntaxText";
        createRGBSlider (uiRes("m_colorPrefWnd.kKeywords")) "syntaxKeywords";
        createRGBSlider (uiRes("m_colorPrefWnd.kStrings")) "syntaxStrings";
        createRGBSlider (uiRes("m_colorPrefWnd.kComments")) "syntaxComments";
        createRGBSlider (uiRes("m_colorPrefWnd.kFunctions")) "syntaxCommands";
        createRGBSlider (uiRes("m_colorPrefWnd.kBackticks")) "syntaxBackground";
		setUITemplate -popTemplate;
    }
}



proc colorPrefCreateGeneral(string $parent) 
{
	if (`separator -exists ($parent+"|tstSep")`) {
		colorPrefUpdateGeneral $parent;
		return;
	}

    setParent $parent;

	//
	// Create the UI.
	//
	setUITemplate -pushTemplate DefaultTemplate;
	separator -style "none" -height 1 tstSep;

    string $frame;
	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kThreeDViews"))`;
	frameLayout -edit
		-preExpandCommand ("createGeneral3dViewsColorsUI \"" + $frame + "\"")
		$frame;
    setParent $parent;

	
	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kUserDefined"))`;
	frameLayout -edit
		-preExpandCommand ("createGeneralUserDefinedColorsUI \"" + $frame + "\"")
		$frame;
    setParent $parent;

	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kGhosts"))`;
	frameLayout -edit
		-preExpandCommand ("createGhostColorsUI \"" + $frame + "\"")
		$frame;
    setParent $parent;
	
	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kIKFKBlending"))`;
	frameLayout -edit
		-preExpandCommand ("createIKFKBlendingColorsUI \"" + $frame + "\"")
		$frame;
	setParent $parent;
	
	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kHeadsUpDisplay"))`;
	frameLayout -edit
		-preExpandCommand ("createHeadsUpDisplayColorsUI \"" + $frame + "\"")
		$frame;
    setParent $parent;

	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kAnimation"))`;
	frameLayout -edit
		-preExpandCommand ("createGeneralAnimationColorsUI \"" + $frame + "\"")
		$frame;
    setParent $parent;

	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kAnimationEditors"))`;
	frameLayout -edit
		-preExpandCommand ("createGeneralAnimationEditorColorsUI \"" + $frame + "\"")
		$frame;
    setParent $parent;

	$frame = `frameLayout -label (localizedPanelLabel("Render View"))`;
	frameLayout -edit
		-preExpandCommand ("createRenderViewColorsUI \"" + $frame + "\"")
		$frame;
    setParent $parent;

	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kHypergraphHypershade"))`;
	frameLayout -edit
		-preExpandCommand ("createGeneralHypergraphColorsUI \"" + $frame + "\"")
		$frame;
    setParent $parent;

	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kNodeEditor"))`;
	frameLayout -edit
		-preExpandCommand ("createGeneralNodeEditorColorsUI \"" + $frame + "\"")
		$frame;
    setParent $parent;

	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kOutliner"))`;
	frameLayout -edit
		-preExpandCommand ("createGeneralOutlinerColorsUI \"" + $frame + "\"")
		$frame;
    setParent $parent;

	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kScriptEditor"))`;
	frameLayout -edit
		-preExpandCommand ("createGeneralScriptEditorColorsUI \"" + $frame + "\"")
		$frame;
    setParent $parent;

	setUITemplate -popTemplate;
}

//////////////////////////////////////////////////////////////////////

proc	colorPrefUpdateActive (string $parent)
{
    setParent $parent;

	initPalette activePalette;

    setParent $parent;

	// general
	updateActiveColorIndexSlider "active";
	updateActiveColorIndexSlider "activeTemplate";
	updateActiveColorIndexSlider "hilite";
	updateActiveColorIndexSlider "hiliteComponent";
	updateActiveColorIndexSlider "regionOfEffect";
	updateActiveColorIndexSlider "lead";
	updateActiveColorIndexSlider "activeAffected";
	updateRGBSlider "preSelectHilite";

	// objects
	if (`isTrue "SurfaceUIExists"`) {
		updateActiveColorIndexSlider "surface";
		updateActiveColorIndexSlider "trimmedSurface";
	}
	updateActiveColorIndexSlider "curve";
	if (`isTrue "SurfaceUIExists"`) {
		updateActiveColorIndexSlider "curveOnSurface";
	}
	updateActiveColorIndexSlider "polymesh";
	if (`isTrue "SubdivUIExists"`) {
	  updateActiveColorIndexSlider "subdiv";
	}
	updateActiveColorIndexSlider "camera";
	updateActiveColorIndexSlider "light";
	updateActiveColorIndexSlider "plane";
	updateActiveColorIndexSlider "dimension";
	updateActiveColorIndexSlider "locator";
	updateActiveColorIndexSlider "annotationShape";
	updateActiveColorIndexSlider "positionMarker";
	updateActiveColorIndexSlider "orientationMarker";
	updateActiveColorIndexSlider "placement";
	updateActiveColorIndexSlider "ikHandle";
	updateActiveColorIndexSlider "joint";
	updateActiveColorIndexSlider "ikEffector";
	updateActiveColorIndexSlider "segment";
	updateActiveColorIndexSlider "air";
	updateActiveColorIndexSlider "drag";
	updateActiveColorIndexSlider "emitter";
	updateActiveColorIndexSlider "gravity";
	updateActiveColorIndexSlider "newton";
	updateActiveColorIndexSlider "particle";
	updateActiveColorIndexSlider "radial";
	updateActiveColorIndexSlider "volumeAxis";
	updateActiveColorIndexSlider "rigidBody";
	updateActiveColorIndexSlider "rigidConstraint";
	updateActiveColorIndexSlider "spring";
	updateActiveColorIndexSlider "turbulence";
	updateActiveColorIndexSlider "uniform";
	updateActiveColorIndexSlider "vortex";

	// component
	updateActiveColorIndexSlider "component";
	updateActiveColorIndexSlider "cv";
	updateActiveColorIndexSlider "ep";
	updateActiveColorIndexSlider "hull";
	if (`isTrue "SurfaceUIExists"`) {
		updateActiveColorIndexSlider "surfaceOriginU";
		updateActiveColorIndexSlider "surfaceOriginV";
		updateActiveColorIndexSlider "surfaceOriginNormal";
	}
	updateActiveColorIndexSlider "polyVertex";
	updateActiveColorIndexSlider "polyEdge";
	updateActiveColorIndexSlider "polyFace";
	updateActiveColorIndexSlider "polyUV";
	if (`isTrue "SubdivUIExists"`) {
	  updateActiveColorIndexSlider "subdivCV";
	  updateActiveColorIndexSlider "subdivEdge";
	  updateActiveColorIndexSlider "subdivFacet";
	  updateActiveColorIndexSlider "subdivUV";
	}
	updateActiveColorIndexSlider "pivots";

	// deformer
	updateActiveColorIndexSlider "lattice";
	updateActiveColorIndexSlider "baseLattice";
	updateActiveColorIndexSlider "latticePoints";
	updateActiveColorIndexSlider "sculpt";

	// manipulator
	updateActiveColorIndexSlider "manipHandle";
	updateRGBSlider              "manipHighlight";
	updateActiveColorIndexSlider "manipGesture";
	updateActiveColorIndexSlider "manipPrevious";
	updateActiveColorIndexSlider "manipLine";
	updateActiveColorIndexSlider "manipDisabled";
	updateActiveColorIndexSlider "manipCurrent";
	updateActiveColorIndexSlider "manipSlaveHandle";
	updateActiveColorIndexSlider "manipLabel";

	// Animation
	updateRGBSlider "activeCurve";
	updateRGBSlider "activeKeyframe";
	updateRGBSlider "activeBreakdown";
	updateRGBSlider "activeTangent";
	updateRGBSlider "activeUnlockedTangent";
	updateRGBSlider "curveHighlight";
	updateRGBSlider "tangentHighlight";

	// Artisan
	updateActiveColorIndexSlider "artBrushFeedback";

	// Fluids
	if( fluidEditLicenseFound() ) {
		updateActiveColorIndexSlider "fluidsVelocity";
		updateActiveColorIndexSlider "fluidsNumeric";
		updateActiveColorIndexSlider "fluidsForce";
	}

	// Smooth Mesh Preview
	updateActiveColorIndexSlider "SMP";
	updateActiveColorIndexSlider "HSMP";
	updateActiveColorIndexSlider "HSMPC";
	updateActiveColorIndexSlider "SMPFace";
	updateActiveColorIndexSlider "SMPVertex";
	updateActiveColorIndexSlider "SMPEdge";
}

global proc createActiveSMPColorsUI(string $parent) {
    int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
			createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kHighlightSMPActive")) "HSMP";
			createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kHighlightCompSMPActive")) "HSMPC";
			createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kSMPFaces")) "SMPFace";
			createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kSMPVertices")) "SMPVertex";
			createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kSMPEdges")) "SMPEdge";
		setUITemplate -popTemplate;
	}
}

global proc createDormantSMPColorsUI(string $parent) {
    int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kSMPSurfaces")) "SMP";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kSMPFaces")) "SMPFace";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kSMPVertices")) "SMPVertex";
		setUITemplate -popTemplate;
	}
}

global proc createActiveGeneralColorsUI(string $parent) {
    int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kObjects")) "active";
			createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kTemplate")) "activeTemplate";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kHighlightActive")) "hilite";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kHighlightComponents")) "hiliteComponent";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kRegionofEffect")) "regionOfEffect";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kLeadObject")) "lead";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kActiveAffected")) "activeAffected";
			createRGBSlider (uiRes("m_colorPrefWnd.kPreSelectHighlight")) "preSelectHilite";
		setUITemplate -popTemplate;
	}
}

global proc createActiveObjectColorsUI(string $parent) {
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
			if( `isTrue "SurfaceUIExists"` ) {
                createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kNURBSSurfaces")) "surface";
                createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kTrimmedSurfaces")) "trimmedSurface";
			}
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kNURBSCurves")) "curve";
			if( `isTrue "SurfaceUIExists"` ) {
                createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kCurvesOnSurfaces")) "curveOnSurface";
			}
			separator -style "none" -height 2;
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kPolygonSurfaces")) "polymesh";
			separator -style "none" -height 2;
			if (`isTrue "SubdivUIExists"`){
                createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kSubDivSurface")) "subdiv";
			  separator -style "none" -height 2;
			}
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kCameras")) "camera";
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kLights")) "light";
			separator -style "none" -height 2;
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kConstructionObject")) "plane";
			separator -style "none" -height 2;
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kDimensions")) "dimension";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kAnnotations")) "annotationShape";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kLocators")) "locator";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kPositionMarkers")) "positionMarker";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kOrientationMarkers")) "orientationMarker";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kTexturePlacements")) "placement";
			separator -style "none" -height 2;
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kIKHandles")) "ikHandle";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kIKJoints")) "joint";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kIKEndEffectors")) "ikEffector";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kSegments")) "segment";
			separator -style "none" -height 2;
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kAir")) "air";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kDrag")) "drag";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kEmitters")) "emitter";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kGravity")) "gravity";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kNewton")) "newton";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kParticles")) "particle";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kRigidBody")) "rigidBody";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kRigidConstraint")) "rigidConstraint";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kRadial")) "radial";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kSpring")) "spring";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kTurbulence")) "turbulence";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kUniform")) "uniform";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kVortex")) "vortex";
            createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kVolumeAxis")) "volumeAxis";
		setUITemplate -popTemplate;
	}
}

global proc createActiveComponentColorsUI(string $parent) {
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kComponents")) "component";
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kNURBSCVs")) "cv";
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kEditPoints")) "ep";
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kHulls")) "hull";
			if( `isTrue "SurfaceUIExists"` ) {
                createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kSurfaceOriginU")) "surfaceOriginU";
                createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kSurfaceOriginV")) "surfaceOriginV";
                createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kSurfaceOriginNormal")) "surfaceOriginNormal";
			}
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kPolygonVertices")) "polyVertex";
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kPolygonEdges")) "polyEdge";
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kPolygonFaces")) "polyFace";
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kPolygonUVs")) "polyUV";
			if (`isTrue "SubdivUIExists"`) {
                createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kSubdivVertices")) "subdivCV";
                createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kSubdivEdges")) "subdivEdge";
                createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kSubdivFaces")) "subdivFacet";
                createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kSubdivUVs")) "subdivUV";
			}
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kPivots")) "pivots";

			// Fluids
			if( fluidEditLicenseFound() ) {
                createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kFluidVelocity")) "fluidsVelocity";
				createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kFluidNumeric")) "fluidsNumeric";
                createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kFluidForce")) "fluidsForce";
			}
		setUITemplate -popTemplate;
	}
}

global proc createActiveDeformerColorsUI(string $parent) {
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kLattices")) "lattice";
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kBaseLattices")) "baseLattice";
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kLatticePoints")) "latticePoints";
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kSculpt")) "sculpt";
		setUITemplate -popTemplate;
	}
}

global proc createActiveManipulatorColorsUI(string $parent) {
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kHandles")) "manipHandle";
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kGestures")) "manipGesture";
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kPrevious")) "manipPrevious";
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kLines")) "manipLine";
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kDisabled")) "manipDisabled";
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kCurrent")) "manipCurrent";
        createRGBSlider              (uiRes("m_colorPrefWnd.kManipHighlight")) "manipHighlight";
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kSlaveHandles")) "manipSlaveHandle";
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kLabelsManipulator")) "manipLabel";
		setUITemplate -popTemplate;
	}
}

global proc createActiveAnimationColorsUI(string $parent) {
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
			//
			// ACTIVE Graph Editor
			//
        createRGBSlider (uiRes("m_colorPrefWnd.kCurves")) "activeCurve";
        createRGBSlider (uiRes("m_colorPrefWnd.kKeys")) "activeKeyframe";
        createRGBSlider (uiRes("m_colorPrefWnd.kBreakdown")) "activeBreakdown";
        createRGBSlider (uiRes("m_colorPrefWnd.kTangents")) "activeTangent";
        createRGBSlider (uiRes("m_colorPrefWnd.kUnlockedTangents")) "activeUnlockedTangent";
			//
			// Highlight Graph Editor
			//
        createRGBSlider (uiRes("m_colorPrefWnd.kCurveHighlights")) "curveHighlight";
        createRGBSlider (uiRes("m_colorPrefWnd.kTangentHighlights")) "tangentHighlight";
		setUITemplate -popTemplate;
	}
}


// Artisan Brush Feedback Color 
global proc createActiveArtisanColorsUI(string $parent) {
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
			// 
			//	Brush Feedback outline colors
			// 
        createActiveColorIndexSlider (uiRes("m_colorPrefWnd.kBrushFeedback")) "artBrushFeedback";
		setUITemplate -popTemplate;
	}
}

proc colorPrefCreateActive(string $parent) {

	if (`separator -exists ($parent+"|tstSep")`) {
		colorPrefUpdateActive $parent;
		return;
	}

	setParent $parent;

	//
	// Create the UI.
	//
	setUITemplate -pushTemplate DefaultTemplate;
	separator -style "none" -height 1 tstSep;

	columnLayout;
    text -label (uiRes("m_colorPrefWnd.kActiveIndexpalette"));

		int $rows = 1, $columns = 23;
		int $cellWidth = 20, $cellHeight = 20;

		frameLayout -labelVisible false 
			-collapsable false -collapse false;
    	// create and initialize palette
    	palettePort -dimensions $columns $rows
			-width ($cellWidth * $columns)
			-height $cellHeight
			-setCurCell 0 activePalette;

		initPalette activePalette;
    	palettePort -edit -colorEdited "changeColorIndex activePalette" activePalette ;
	
	setParent $parent;

	separator -style "none" -height 10;

	string $frame = `frameLayout -label (uiRes("m_colorPrefWnd.kGeneral"))`;
	frameLayout -edit 
		-preExpandCommand ("createActiveGeneralColorsUI \"" + $frame + "\"")
		$frame;
	setParent $parent;

	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kObjectsTitle"))`;
	frameLayout -edit
		-preExpandCommand ("createActiveObjectColorsUI \"" + $frame + "\"")
		$frame;
	setParent $parent;

	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kComponentsTitle"))`;
	frameLayout -edit
		-preExpandCommand ("createActiveComponentColorsUI \"" + $frame + "\"")
		$frame;
	setParent $parent;

	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kDeformers"))`;
	frameLayout -edit
		-preExpandCommand ("createActiveDeformerColorsUI \"" + $frame + "\"")
		$frame;
	setParent $parent;

	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kManipulators"))`;
	frameLayout -edit
		-preExpandCommand ("createActiveManipulatorColorsUI \"" + $frame + "\"")
		$frame;
	setParent $parent;

	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kAnimation"))`;
	frameLayout -edit
		-preExpandCommand ("createActiveAnimationColorsUI \"" + $frame + "\"")
		$frame;
	setParent $parent;

	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kArtisanBruhes"))`;
	frameLayout -edit
		-preExpandCommand ("createActiveArtisanColorsUI \"" + $frame + "\"")
		$frame;
	setParent $parent;

	string $frame = `frameLayout -label (uiRes("m_colorPrefWnd.kSMPGeneral"))`;
	frameLayout -edit 
		-preExpandCommand ("createActiveSMPColorsUI \"" + $frame + "\"")
		$frame;
	setParent $parent;

	setUITemplate -popTemplate;
					
}

//////////////////////////////////////////////////////////////////////

proc	colorPrefUpdateDormant (string $parent)
{
    setParent $parent;

	initPalette dormantPalette;

    setParent $parent;

	// general
	updateDormantColorIndexSlider "pivots";
    updateRGBSlider "template";
	updateDormantColorIndexSlider "selectHandle";
	updateDormantColorIndexSlider "manipulator";
	updateDormantColorIndexSlider "objectEdit";
	updateDormantColorIndexSlider "referenceLayer";

	// Modeling
	updateDormantColorIndexSlider "live";
	updateDormantColorIndexSlider "liveAxis";
	updateDormantColorIndexSlider "liveHighlight";
	updateDormantColorIndexSlider "grid";
	updateDormantColorIndexSlider "gridAxis";
	updateDormantColorIndexSlider "gridHighlight";
	updateDormantColorIndexSlider "Xaxis";
	updateDormantColorIndexSlider "Yaxis";
	updateDormantColorIndexSlider "Zaxis";

	// object
	if( `isTrue "SurfaceUIExists"` ) {
		updateDormantColorIndexSlider "surface";
		updateDormantColorIndexSlider "trimmedSurface";
	}
	updateDormantColorIndexSlider "curve";
	if( `isTrue "SurfaceUIExists"` ) {
		updateDormantColorIndexSlider "curveOnSurface";
	}
	updateDormantColorIndexSlider "polymesh";
	if (`isTrue "SubdivUIExists"`) {
	  updateDormantColorIndexSlider "subdiv";
	}
	updateDormantColorIndexSlider "camera";
	updateDormantColorIndexSlider "light";
	updateDormantColorIndexSlider "plane";
	updateDormantColorIndexSlider "dimension";
	updateDormantColorIndexSlider "locator";
	updateDormantColorIndexSlider "annotationShape";
	updateDormantColorIndexSlider "positionMarker";
	updateDormantColorIndexSlider "orientationMarker";
	updateDormantColorIndexSlider "placement";
	updateDormantColorIndexSlider "ikHandle";
	updateDormantColorIndexSlider "joint";
	updateDormantColorIndexSlider "ikEffector";
	updateDormantColorIndexSlider "segment";
	updateDormantColorIndexSlider "air";
	updateDormantColorIndexSlider "drag";
	updateDormantColorIndexSlider "emitter";
	updateDormantColorIndexSlider "gravity";
	updateDormantColorIndexSlider "newton";
	updateDormantColorIndexSlider "particle";
	updateDormantColorIndexSlider "radial";
	updateDormantColorIndexSlider "volumeAxis";
	updateDormantColorIndexSlider "rigidBody";
	updateDormantColorIndexSlider "rigidConstraint";
	updateDormantColorIndexSlider "spring";
	updateDormantColorIndexSlider "turbulence";
	updateDormantColorIndexSlider "uniform";
	updateDormantColorIndexSlider "vortex";

	// component
	updateDormantColorIndexSlider "cv";
	updateDormantColorIndexSlider "ep";
	updateDormantColorIndexSlider "hull";
	if( `isTrue "SurfaceUIExists"` ) {
		updateDormantColorIndexSlider "surfaceOriginU";
		updateDormantColorIndexSlider "surfaceOriginV";
		updateDormantColorIndexSlider "surfaceOriginNormal";
	}
	updateDormantColorIndexSlider "polyVertex";
	updateDormantColorIndexSlider "polyEdge";
	updateDormantColorIndexSlider "polyFace";
	updateDormantColorIndexSlider "polyUV";
	if (`isTrue "SubdivUIExists"`) {
	  updateDormantColorIndexSlider "subdivCV";
	  updateDormantColorIndexSlider "subdivEdge";
	  updateDormantColorIndexSlider "subdivFacet";
	  updateDormantColorIndexSlider "subdivUV";
	}

	// deformer
	updateDormantColorIndexSlider "lattice";
	updateDormantColorIndexSlider "baseLattice";
	updateDormantColorIndexSlider "latticePoints";
	updateDormantColorIndexSlider "sculpt";

	// animation
	
	updateRGBSlider "dormantCurve";
	updateRGBSlider "dormantBufferCurve";
	updateRGBSlider "dormantKeyframe";
	updateRGBSlider "dormantBreakdown";
	updateRGBSlider "keyframeHighlight";
	updateRGBSlider "dormantTangent";
	updateRGBSlider "dormantUnlockedTangent";

	// Fluids
	if( fluidEditLicenseFound() ) {
		updateDormantColorIndexSlider "fluidsVelocity";
		updateDormantColorIndexSlider "fluidsNumeric";
		updateDormantColorIndexSlider "fluidsForce";
	}

	updateDormantColorIndexSlider "SMP";
	updateDormantColorIndexSlider "SMPFace";
	updateDormantColorIndexSlider "SMPVertex";

	//updateRGBSlider "lockedVertices";
	updateRGBSlider "freezeVertex";
	updateRGBSlider "pinUV";
}

global proc createDormantGeneralColorsUI(string $parent) {
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
		createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kPivots")) "pivots";
        createRGBSlider (uiRes("m_colorPrefWnd.kTemplate")) "template";
        createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kHandles")) "selectHandle";
        createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kManipulatorsSlider")) "manipulator";
        createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kObjectEdit")) "objectEdit";
        createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kRefernceLayer")) "referenceLayer";
		setUITemplate -popTemplate;
	}
}

global proc createDormantModelingColorsUI(string $parent) {
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
        createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kLive")) "live";
        createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kLiveAxis")) "liveAxis";
        createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kLiveHighlight")) "liveHighlight";
			separator -style "none" -height 2;
            createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kGridAxes")) "gridAxis";
            createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kGridLinesNumbers")) "gridHighlight";
            createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kGridSubdivisionLines")) "grid";
			separator -style "none" -height 2;
            createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kXAxis")) "Xaxis";
            createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kYAxis")) "Yaxis";
            createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kZAxis")) "Zaxis";
		setUITemplate -popTemplate;
	}
}

global proc createDormantObjectColorsUI(string $parent) {
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
			if( `isTrue "SurfaceUIExists"` ) {
                createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kNURBSSurfaces")) "surface";
                createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kTrimmedSurfaces")) "trimmedSurface";
			}
        createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kNURBSCurves")) "curve";
			if( `isTrue "SurfaceUIExists"` ) {
                createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kCurvesOnSurfaces")) "curveOnSurface";
			}
			separator -style "none" -height 2;
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kPolygonSurfaces")) "polymesh";
			separator -style "none" -height 2;
			if (`isTrue "SubdivUIExists"`) {
			  createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kSubDivSurface")) "subdiv";
			  separator -style "none" -height 2;
			}
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kCameras")) "camera";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kLights")) "light";
			separator -style "none" -height 2;
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kConstructionObject")) "plane";
			separator -style "none" -height 2;
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kDimensions")) "dimension";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kLocators")) "locator";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kAnnotations")) "annotationShape";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kPositionMarkers")) "positionMarker";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kOrientationMarkers")) "orientationMarker";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kTexturePlacements")) "placement";
			separator -style "none" -height 2;
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kIKHandles")) "ikHandle";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kIKJoints")) "joint";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kIKEndEffectors")) "ikEffector";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kSegment")) "segment";
			separator -style "none" -height 2;
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kAir")) "air";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kDrag")) "drag";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kEmitters")) "emitter";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kGravity")) "gravity";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kNewton")) "newton";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kParticles")) "particle";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kRadial")) "radial";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kRigidBody")) "rigidBody";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kRigidConstraint")) "rigidConstraint";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kSpring")) "spring";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kTurbulence")) "turbulence";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kUniform")) "uniform";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kVortex")) "vortex";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kVolumeAxis")) "volumeAxis";
		setUITemplate -popTemplate;
	}
}

global proc createDormantComponentColorsUI(string $parent) {
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kNURBSCVs")) "cv";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kEditPoints")) "ep";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kHulls")) "hull";
			if( `isTrue "SurfaceUIExists"` ) {
				createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kSurfaceOriginU")) "surfaceOriginU";
				createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kSurfaceOriginV")) "surfaceOriginV";
				createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kSurfaceOriginNormal")) "surfaceOriginNormal";
			}
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kPolygonVertices")) "polyVertex";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kPolygonEdges")) "polyEdge";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kPolygonFaces")) "polyFace";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kPolygonUVs")) "polyUV";

			if (`isTrue "SubdivUIExists"`){
			  createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kSubdivVertices")) "subdivCV";
			  createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kSubdivEdges")) "subdivEdge";
			  createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kSubdivFaces")) "subdivFacet";
			  createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kSubdivUVs")) "subdivUV";
			}
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kPivots")) "pivots";

			// Fluids
			if( fluidEditLicenseFound() ) {
				createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kFluidVelocity")) "fluidsVelocity";
				createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kFluidNumeric")) "fluidsNumeric";
				createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kFluidForce")) "fluidsForce";
			}
        //createRGBSlider _L10N(kLockedVertex,"Locked vertex:") "lockedVertex";
        createRGBSlider (uiRes("m_colorPrefWnd.kFreezeVertex")) "freezeVertex";
		createRGBSlider (uiRes("m_colorPrefWnd.kPinUV")) "pinUV";
		setUITemplate -popTemplate;
	}
}

global proc createDormantDeformerColorsUI(string $parent) {
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kLattices")) "lattice";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kBaseLattices")) "baseLattice";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kLatticePoints")) "latticePoints";
			createDormantColorIndexSlider (uiRes("m_colorPrefWnd.kSculpt")) "sculpt";
		setUITemplate -popTemplate;
	}
}

global proc createDormantAnimationColorsUI(string $parent) {
	int $childCount = `frameLayout -query -numberOfChildren $parent`;
	if (0 == $childCount) {
		setParent $parent;
		setUITemplate -pushTemplate DefaultTemplate;
		columnLayout -adjustableColumn true;
			// Dormant Graph Editor
			createRGBSlider (uiRes("m_colorPrefWnd.kCurves")) "dormantCurve";
            createRGBSlider (uiRes("m_colorPrefWnd.kBufferCurves")) "dormantBufferCurve";
			createRGBSlider (uiRes("m_colorPrefWnd.kKeys")) "dormantKeyframe";
			createRGBSlider (uiRes("m_colorPrefWnd.kBreakdown")) "dormantBreakdown";
            createRGBSlider (uiRes("m_colorPrefWnd.kZeroValueKeys")) "keyframeHighlight";
			createRGBSlider (uiRes("m_colorPrefWnd.kTangents")) "dormantTangent";
			createRGBSlider (uiRes("m_colorPrefWnd.kUnlockedTangents")) "dormantUnlockedTangent";
		setUITemplate -popTemplate;
	}
}

proc colorPrefCreateDormant(string $parent)
{
	if (`separator -exists ($parent+"|tstSep")`) {
		colorPrefUpdateDormant $parent;
		return;
	}

	setParent $parent;

	//
	// Create the UI.
	//
	setUITemplate -pushTemplate DefaultTemplate;
	separator -style "none" -height 1 tstSep;

	columnLayout;
    	text -label (uiRes("m_colorPrefWnd.kInactiveIndexpalette"));

		int $rows = 1, $columns = 23;
		int $cellWidth = 20, $cellHeight = 20;

		frameLayout -labelVisible false 
			-collapsable false -collapse false;
		// create and initialize palette
    	palettePort -dimensions $columns $rows
			-width ($cellWidth * $columns)
			-height $cellHeight
			-setCurCell 0 dormantPalette;

		initPalette dormantPalette;
		palettePort -edit -colorEdited "changeColorIndex dormantPalette" dormantPalette ;

	setParent $parent;

	separator -style "none" -height 10;

	string $frame = `frameLayout -label (uiRes("m_colorPrefWnd.kGeneral"))`;
	frameLayout -edit
		-preExpandCommand ("createDormantGeneralColorsUI \"" + $frame + "\"")
		$frame;
    setParent $parent;

    $frame = `frameLayout -label (uiRes("m_colorPrefWnd.kModeling"))`;
	frameLayout -edit
		-preExpandCommand ("createDormantModelingColorsUI \"" + $frame + "\"")
		$frame;
    setParent $parent;

	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kObjectsTitle")) -collapse true`;
	frameLayout -edit
		-preExpandCommand ("createDormantObjectColorsUI \"" + $frame + "\"")
		$frame;
    setParent $parent;

	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kComponentsTitle"))`;
	frameLayout -edit
		-preExpandCommand ("createDormantComponentColorsUI \"" + $frame + "\"")
		$frame;
    setParent $parent;

	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kDeformers"))`;
	frameLayout -edit
		-preExpandCommand ("createDormantDeformerColorsUI \"" + $frame + "\"")
		$frame;
    setParent $parent;

	$frame = `frameLayout -label (uiRes("m_colorPrefWnd.kAnimation"))`;
	frameLayout -edit
		-preExpandCommand ("createDormantAnimationColorsUI \"" + $frame + "\"")
		$frame;
    setParent $parent;

	string $frame = `frameLayout -label (uiRes("m_colorPrefWnd.kSMPGeneral"))`;
	frameLayout -edit 
		-preExpandCommand ("createDormantSMPColorsUI \"" + $frame + "\"")
		$frame;
	setParent $parent;


	setUITemplate -popTemplate;

}

//////////////////////////////////////////////////////////////////////

//
// As the procedure name implies it creates tabs and loads
// just the active tab with UI widgets
//
proc string colorPrefCreateTabLayout(string $parent) {
	setParent $parent;

	string $tabs = `tabLayout 
		-scrollable true -childResizable true
		-verticalScrollBarThickness 18
		-preSelectCommand "colorPrefCreateTabs" tabs`;

	//	General colors tab.
	//
	frameLayout -lv false -mw 10 -mh 10 -bv false genFrame;
		columnLayout -adjustableColumn true generalColors;
	setParent $tabs;

	//	Active colors.
	//
	frameLayout -lv false -mw 10 -mh 10 -bv false activeFrame;
		columnLayout -adjustableColumn true activeColors;
	setParent $tabs;

	//	Dormant colors tab.
	//
	frameLayout -lv false -mw 10 -mh 10 -bv false dormantFrame;
		columnLayout -adjustableColumn true dormantColors;
	setParent $tabs;

	//	Give the tabs labels.
	//
	tabLayout -edit
		-tabLabel genFrame		(uiRes("m_colorPrefWnd.kGeneralTab"))
		-tabLabel activeFrame	(uiRes("m_colorPrefWnd.kActive"))
		-tabLabel dormantFrame	(uiRes("m_colorPrefWnd.kInactive"))
		$tabs;

	return $tabs;
}


//
// Creates the buttons at the bottom of the window
// Angus Reset need additional capabilites
// Reset button MUST reset ALL colors back to the factory
// defaults.
//
proc string colorPrefCreateButtons(string $parentLayout) 
{
	global string $gColorPrefWnd;

	setParent $parentLayout;
	string $buttonForm = `formLayout`;


	string $resetSavedButton = `button -label (uiRes("m_colorPrefWnd.kResettoSaved"))
		-c "displayColor -rs; colorIndex -rs; displayRGBColor -rs"`;

	string $saveButton = `button -label (uiRes("m_colorPrefWnd.kSave"))
		-c "savePrefs -colors; window -e -visible false $gColorPrefWnd"`;

	string $closeButton = `button -label (uiRes("m_colorPrefWnd.kClose"))
		-command "window -edit -visible false $gColorPrefWnd"`;

	formLayout -edit
		-af $saveButton "bottom" 5
		-af $saveButton "left" 5
		-ap $saveButton "right" 3 33

		-af $resetSavedButton "bottom" 5 
		-ap $resetSavedButton "left" 2 33
		-ap $resetSavedButton "right" 3 66

		-af $closeButton "bottom" 5
		-ap $closeButton "left" 2 66
		-af $closeButton "right" 5

		$buttonForm;

	return $buttonForm;
}


proc string colorPrefGetParent(string $tab)
{
	global string $gColorPrefForm;
	string $parent;

	if ($tab == "genFrame") {
		$parent = $gColorPrefForm+"|tabs|genFrame|generalColors";
	} else if ($tab == "activeFrame"){
		$parent = $gColorPrefForm+"|tabs|activeFrame|activeColors";
	} else if ($tab == "dormantFrame"){
		$parent = $gColorPrefForm+"|tabs|dormantFrame|dormantColors";
	} else { 
		error (uiRes("m_colorPrefWnd.kTabChildError"));
	}
	
	return $parent;
}

global proc colorPrefCreateTabs ()
{
	global string $gColorPrefForm;
	setParent $gColorPrefForm;
	
	string $tab = `tabLayout -q -st tabs`;
	string $parent = `colorPrefGetParent $tab`;

    setParent $parent;
	if ($tab == "genFrame") {
		colorPrefCreateGeneral $parent;
	} else if ($tab == "activeFrame"){
		colorPrefCreateActive $parent;
	} else if ($tab == "dormantFrame"){
		colorPrefCreateDormant $parent;
	} else { 
		error (uiRes("m_colorPrefWnd.kTabChildError"));
	}
}

proc colorPrefSelectTab(string $whichTab)
{
	global string $gColorPrefForm;
	
	string $tab;

	if ($whichTab == "general") {
		$tab = "genFrame";
	} else if ($whichTab == "active"){
		$tab = "activeFrame";
	} else if ($whichTab == "dormant"){
		$tab = "dormantFrame";
	} else { 
    string $fmt = (uiRes("m_colorPrefWnd.kTabSelectionError"));
	error `format -s $whichTab $fmt`;
       return;
   	}

	tabLayout -e -st $tab ($gColorPrefForm+"|tabs");
}


global proc colorPrefWnd () 
{
	global string $gColorPrefWnd = "colorPreferenceWindow";
	global string $gColorPrefForm;
	
	if (`window -exists $gColorPrefWnd`) {
	//
	//	This next call generates an error if the
	//	window is already open - stubbing it out
	//	- jb.
	//
	//	createColorPrefTabs;
		showWindow $gColorPrefWnd;
		return;
	}

	setUITemplate -pushTemplate DefaultTemplate;

	window
		-menuBar true
		-title (uiRes("m_colorPrefWnd.kColors"))
		-iconName (uiRes("m_colorPrefWnd.kColors"))
		-widthHeight 525 350
		$gColorPrefWnd;

	// Create the menu entries
	//
	menu -label (uiRes("m_colorPrefWnd.kEdit"));
		menuItem -label (uiRes("m_colorPrefWnd.kResetDefaults"))
			-c "displayColor -rf; colorIndex -rf; displayRGBColor -rf";

	menu -label (uiRes("m_colorPrefWnd.kHelp")) -helpMenu true;
		menuItem -label (uiRes("m_colorPrefWnd.kHelpColorPreferences"))
			-enableCommandRepeat false
			-command "showHelp ColorPreferencesWindow";	setParent -m ..;

	setParent -m ..;

	// Create the form which will hold ALL widgets
	//
	$gColorPrefForm = `formLayout form`;

		string $tabs = `colorPrefCreateTabLayout $gColorPrefForm`;
    	string $buttons	= `colorPrefCreateButtons $gColorPrefForm`;

	//	Set up the attachment for the formLayout.
	//
	int $spacing = 5;
	formLayout -edit
		-af	$tabs		"top"	 $spacing
		-af	$tabs		"left"	 $spacing
		-af	$tabs		"right"	 $spacing
		-ac	$tabs		"bottom" $spacing $buttons

		-af	$buttons	"left"   0
		-af	$buttons	"bottom" 0
		-af	$buttons	"right"  0

		$gColorPrefForm;

	setUITemplate -popTemplate;

    colorPrefSelectTab "general";
	colorPrefCreateTabs;

	scriptJob -protected
		-parent $gColorPrefForm 
		-event "ColorIndexChanged" updateColorPrefUI;
	scriptJob  -protected
		-parent $gColorPrefForm 
		-event "DisplayColorChanged" updateColorPrefUI;
	scriptJob  -protected
		-parent $gColorPrefForm 
		-event "DisplayRGBColorChanged" updateColorPrefUI;

	showWindow $gColorPrefWnd;
}

global proc updateColorPrefUI()
{
	global string $gColorPrefWnd;

	if (`window -exists $gColorPrefWnd` &&
		`window -q -visible $gColorPrefWnd`)
	{
        colorPrefCreateTabs;
	}
}
