// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//
//
///////////////////////////////////////////////////////////////////////////////
//
//  Description:
//  UI hooks for the Automatic mapping plug-in
//
///////////////////////////////////////////////////////////////////////////////
//
//  Procedure Name:
//      bevelPlusToolScript
//
//  Description:
//	create wrapper around the bevelPlus command
//
//  Input Arguments:
//		0 ==> do the command.
//		1 ==> show the tool/action option box
//		2 ==> return the command
//		3 ==> show tool/action option box
//		4 ==> enter the tool
//
//  Return Value:
//      None.
//

global int $bevelPlusUIActive = false;

global proc bevelPlusToolSetup( int $forceFactorySettings, string $goToTool )
{
	global int $gStartWithAutoComplete;
	if( $forceFactorySettings || !`optionVar -ex bevelPlusEuc` ) {
		optionVar -iv bevelPlusEuc 0;
	}
	if( $forceFactorySettings || !`optionVar -ex bevelPlusLac` ) {
		optionVar -iv bevelPlusLac $gStartWithAutoComplete;
	}
	if( "" != $goToTool ) {
		scriptCtx -e -euc `optionVar -q bevelPlusEuc` $goToTool;
		scriptCtx -e -lac `optionVar -q bevelPlusLac` $goToTool;
	}
}

global proc bevelPlusValues ( string $toolName ) 
{
	performBevelPlus 3 $toolName;
	scriptCtxCommonValues( $toolName );
}

global proc bevelPlusProperties()
{
	scriptCtxCommonProperties;
}

proc createBevelPlusContext( string $tool )
{
	if( ! `scriptCtx -exists $tool` ) {
		bevelPlusToolSetup( 0, "" );
		scriptCtx -i1 "bevelPlus.png"
		  -title (uiRes("m_bevelPlusToolScript.kBevelPlusTool"))
		  -bcn "bevelPlus"

		  -exitUponCompletion `optionVar -q bevelPlusEuc`
		  -toolCursorType "edit"
		  -totalSelectionSets 1
		  -expandSelectionList true
		  -fcs ("bevelPlusToolScript 0")

		  -setNoSelectionPrompt (uiRes("m_bevelPlusToolScript.kSelect"))
		  -setSelectionPrompt (uiRes("m_bevelPlusToolScript.kComputeBevelPlus"))

		  -setAutoToggleSelection true
		  -setAutoComplete `optionVar -q bevelPlusLac`
		  -setAllowExcessCount true
		  -showManipulators true

		  -setSelectionCount 0
		  -nurbsCurve true
		  -isoparm true
		  -curveOnSurface true
		  -surfaceEdge true
		  -polymeshEdge true
		$tool;
	}
}

global proc string bevelPlusToolScript( int $setToTool )
//
//	Description :
//		0 ==> do the command.
//		1 ==> show the action option box
//		2 ==> return the command
//		3 ==> show tool/action option box
//		4 ==> enter the tool/do the command
{
	string $tool = "";
	if( $setToTool > 2 ) {
		if( !`optionVar -q modelWithToolBevelPlus` ) {
			$setToTool = 4 - $setToTool;
		}
		else {
			$tool = "bevelPlusContext";
			createBevelPlusContext $tool;
		}
	}
	return scriptToolScript( "performBevelPlus", $setToTool, $tool );
}
