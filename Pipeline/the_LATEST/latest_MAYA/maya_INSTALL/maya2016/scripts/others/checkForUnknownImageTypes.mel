// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  17.Mar.2004
//
//  Procedure Name:
//      checkForUnknownImageTypes
//
//  Description:
//		Check the scene for unknown output image formats. 
//		If unknown image format is found, convert it to Maya iff.
//		Image format becomes unknown to a platform 
//		due to IMF/Quicktime differences or unavailable imf plugins.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//

proc int checkForValidImfKey(int $imageformat, string $imfPluginKey )
{
	global string $imfKey[];  // This is the unique imf keyword

	if (size($imfKey) == 0) {
		// If the file format array has not been initialized yet, do so.
		//
		createImageFormats();
	}

	int $unknownFormat = 1;
	if ($imageformat == 50) {
		// new imf plugin
		//
		global string $imfPlugInKey[];
		int $i;
		for ($i=0; $i<size($imfPlugInKey); $i++) {
			if ($imfPluginKey == $imfPlugInKey[$i]) {
				$unknownFormat = 0;
				break;
			}
		}
	}
	else {
		// Make sure the the format is availave on this platform. 
		// Flash formats, above 60 have no $imfKey set, but are
		// valid.
		if (($imfKey[$imageformat] != "") || 
			($imageformat == 51) || ($imageformat >= 60))
			$unknownFormat = 0;
	}
	
	return $unknownFormat;
}

global proc checkForUnknownImageTypes()
{
	// check whether software render globals image format is unknown
	//
	int $imageformat  = `getAttr defaultRenderGlobals.imageFormat`;
	string $imfPluginKey = `getAttr defaultRenderGlobals.imfkey`;

	int $unknownFormat = checkForValidImfKey($imageformat, $imfPluginKey);
	if ($unknownFormat) {
		warning (uiRes("m_checkForUnknownImageTypes.kUnknownImageFormat"));

		setAttr defaultRenderGlobals.imageFormat 7;
		setAttr defaultRenderGlobals.imfkey -type "string" "";
	}
}
