// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//	Procedure Name:
//		doDelete
//
//	Description:
//      First, perform any commands that want to prepare for the deletion.
//      For example, if skin influence objects are deleted, remove them
//      as influences so that the skin in that area will not pop to zero
//      when the object is deleted.
//      Then, perform the delete operation.
//
//	Return Value:
//		none
//

proc skinClusterPreDelete(string $objs[])
//      If skin influence objects are deleted, remove them
//      as influences so that the skin in that area will not pop to zero
//      when the object is deleted.
{
	// build list of skinClusters that can be ignored
	//
	string $skinNodesToSkip[];
	
	for ($obj in $objs) {
		// check if the object is referenced.
		// if so, we can simply ignore this object.
		//
		if (`referenceQuery -inr $obj` != 1) {

			// check if the object is a skin influence
			//
			string $skins[] = `listConnections -s 0 -d 1 -type skinCluster ($obj+".worldMatrix")`;
			for ($skinNode in $skins) {
				if (0 == AWNumberOfOccurrencesInStringArray($skinNode,
													   	$skinNodesToSkip)) {
					int $removeIt = 1;
				
					// Check if the skin itself if also being deleted.
					// If so, we don't need to remove the influence object.
					//
					string $skinGeom[] = `skinCluster -q -g $skinNode`;
					if (size($skinGeom) > 0) {
						if (AWNumberOfOccurrencesInStringArray($skinGeom[0],
														  $objs)) {
							$skinNodesToSkip[size($skinNodesToSkip)] = $skinNode;
							$removeIt = 0;
						}
					}

					if ($removeIt) {
						// Check if all the influences will be deleted.
						// If so, we don't need to remove the influence object.
						//
						int $allInfsDeleted = 1;
						string $infs[] = `skinCluster -q -inf $skinNode`;
						for ($inf in $infs) {
							if (0 == AWNumberOfOccurrencesInStringArray($inf,
																   $objs)) {
								$allInfsDeleted = 0;
								break;
							}
						}
						if ($allInfsDeleted) {
							$skinNodesToSkip[size($skinNodesToSkip)] = $skinNode;
							$removeIt = 0;
						}
					}

					if ($removeIt) {
						skinCluster -e -removeInfluence $obj $skinNode;
					}
				}
			}
		}
	}
}


global proc
doDelete()
{
	string $sel[] = `ls -sl -dag`;
	if (0 < size($sel))
	{
		skinClusterPreDelete($sel);
	}
	else
	{
		$sel = `ls -sl`;
		if (0 == size($sel))
		{
			$sel = `ls -preSelectHilite`;
			if (0 < size($sel))
			{
				delete $sel;
			}

			return;
		}
	}

	delete;
}
