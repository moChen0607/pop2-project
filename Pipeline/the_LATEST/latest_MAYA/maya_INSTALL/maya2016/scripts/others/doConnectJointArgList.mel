// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Mar, 2007
//
//	Procedure Name:
//		doConnectJointArgList
//
//	Description:
//		connect one joint hierarchy to another
//
//	Input Arguments:
//	$version: The version of this option box.  Used to know how to 
//	interpret the $args array.
//		"1" : first verison of connect joint
//  
//	$args
//	Version 1
//	[0]		$mode : -cm or -pm, -pm causes the 1 hierarchy to be parented to another
//
//	Return Value:
//		$string: The command string
//

global proc
doConnectJointArgList( string $version, string $args[] )
{    
    string $currentSelection[] = `ls -selection`;
    string $mode = $args[0];
    	
    string $cmd = "connectJoint ";
    $cmd += $mode;
    evalEcho($cmd);	
    
    if(size($currentSelection) < 2) {
        error( (uiRes("m_doConnectJointArgList.kSelectJointsForConnect")));
        return;
    }
    
    string $jointToConnectFrom = $currentSelection[0];
    string $jointToConnectTo = $currentSelection[1];    
    
    string $allChildren[] = `listRelatives -path -children -type joint $jointToConnectFrom`;
    string $bindPoses[] = `dagPose -q -name -bp $jointToConnectTo`;
    if(size($bindPoses)>0) 
    {
        for($bindPose in $bindPoses) {
            select -r $jointToConnectFrom;
            dagPose -bp -addToPose -name $bindPose;	    
            for($child in $allChildren) {
                select -r $child;
                dagPose -bp -addToPose -name $bindPose;
            }
        }
    }        	
}
