// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

// centerReferencePivot.mel
//
// Callback to be used when creating a reference
// Assumes message connections and an parenting have been done already
// just does the final positioning
// indicating the reference node
//
global proc centerReferencePivot (string $refNode)
{

	$testNodes = eval("listConnections " + $refNode + ".associatedNode");

	string $grpNode;
	string $locParent;

	// if we didn't group, nothing to do here
	if(size($testNodes) == 0) {
		select -cl;
		return;
	}
	
	// if there's 2 nodes, it's locator and group
	// and since we're doing this right after creation, we
	// think we know which is which

	if(size($testNodes) == 2) {
		$grpNode = $testNodes[0];
		$locParent = $testNodes[1];		
	} else {
		$grpNode = $testNodes[0];
		select -r $grpNode;
	}

	// center pivot on the grouped reference nodes
	xform -cp $grpNode;

	// if there was a locator, position it appropritately
	if(size($locParent) > 0) {
		string $locNodes[] = `listRelatives -typ locator $locParent`;
		string $locNode = $locNodes[0];
	
		float $grpPivot[] =  `xform -q -rp $grpNode`;
		setAttr ($locNode+".localPositionX") $grpPivot[0];
		setAttr ($locNode+".localPositionY") $grpPivot[1];
		setAttr ($locNode+".localPositionZ") $grpPivot[2];
	
		xform -cp $locParent;
		string $actualAnnName = $refNode + "annotation";
		string $actualTransform = `annotateLocator $locParent $refNode $actualAnnName`;
		
		// Indexes on the associatedNode attribute are used to make specific associations,	
		// index 2 is reserved for the annotation node.
		connectAttr ($actualTransform + ".message") ($refNode+".associatedNode[2]");
		select -r $locParent;
	}
}
