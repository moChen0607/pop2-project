// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//	Creation Date:	Nov 4, 1999
//
//	Procedure:
//	    doSubdCrease
//
//	Description:
//	    Crease edge/vertex.
//

global proc doSubdCrease( int $state, int $full )
//
// Description:
//     full (=1) or simple (=0)
//     state is sharp (=1) or not (=0)
{
	// check that the user has a component on a subd selected
	string $activeSubdsNow[] = `ls -sl -objectsOnly -type subdiv`;
	if( 0 == size($activeSubdsNow) ) {
		string $currSel[] = `ls -sl -showType -objectsOnly`;
		if ( 0 == size($currSel) ) {
			string $msg = (uiRes("m_doSubdCrease.kNothingSelected"));
			error($msg);
		} else {
			string $msg = (uiRes("m_doSubdCrease.kInvalidSelection"));
			error (`format -stringArg $currSel[1] $msg`);
		}
	}

	subdivCrease -sh $state;
	if( $state && !$full ) {
		// Perform the partial crease by going down
		// to the next level and uncreasing.  Calling
		// subdivCreateRegion will change the display
		// level, so keep track of the levels so you can
		// reset them afterward.
		//
		string $activeSubds[] = `ls -sl -objectsOnly -type subdiv`;
		int    $oldLevels[], $i;

		for( $i = 0; $i < size( $activeSubds ); $i++ ) {
			$oldLevels[$i] = `getAttr ($activeSubds[$i] + ".displayLevel")`;
		}

		subdivCreateRegion;
		subdivCrease -sh off;

		for( $i = 0; $i < size( $activeSubds ); $i++ ) {
			setAttr ($activeSubds[$i] + ".displayLevel") $oldLevels[$i];
		}
	}
}
