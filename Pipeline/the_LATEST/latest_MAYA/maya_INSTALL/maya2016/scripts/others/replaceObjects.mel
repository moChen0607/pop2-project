// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Procedure Name:
//			replaceObjects
//
//  Description:
//			this command replaces selected objects with the lead object.
//         
//  Input Arguments:
//			int $rot: copy objects rotate values
//			int $scale: copy object's scale value
//			int $inst: make the copy a copy, instance or reference
//			int $keepOriginal: keep the original object
//  Return Value:
//			None
//

global proc replaceObjects( int $rot, int $scale, int $inst, int $keepOriginal )
{
	string $list[] = `ls -sl -tr`;
	int $size = `size $list`;
	
	if ($size<2){
		error (uiRes("m_replaceObjects.kReplaceObjectsErrorInvalid")) ;
	}

	int $i = 0;

	while ($i < ($size-1))
	{
		select -r ($list[$size-1]);
		if ($inst == 1){
			duplicate -rr; 
		}else if ($inst == 2){
			instance; 
		}else{
			//confirm object is a reference
			int $reference = `reference -q -isNodeReferenced`;
			if ($reference){
				duplicateReference 0 "";
			} else {
				error (uiRes("m_replaceObjects.kReplaceObjectsErrorReference")) ;
			}
		}
		
		string $new[] = `ls -sl`;

		//Get and set Worldspace values	- use rotate pivot in case translate has been frozen	
		float $trans[] = `xform -q -ws -rotatePivot $list[$i]`; 	
		xform -a -ws -t $trans[0] $trans[1] $trans[2] $new[0];

		if ($rot) 
		{
			float $rotate[] = `getAttr ($list[$i]+".r")`; 	
			setAttr ($new[0]+".r") 	$rotate[0] $rotate[1] $rotate[2];
		}

		if ($scale)
		{
			float $scale[] = `getAttr ($list[$i]+".s")`; 	
			setAttr ($new[0]+".s") 	$scale[0] $scale[1] $scale[2];
		}

		string $parent[] = `listRelatives -parent $list[$i]`;
		
		if ($parent[0] != ""){

			string $selection[] = `ls -sl`;
			parent $selection[0] $parent[0];			
		}
		
		delete $list[$i];

		$i++;
	}

	// if copy or instance
	if (($inst != 3) && ($keepOriginal == 0))
		delete ($list[$size-1]);
	select -cl;
}
