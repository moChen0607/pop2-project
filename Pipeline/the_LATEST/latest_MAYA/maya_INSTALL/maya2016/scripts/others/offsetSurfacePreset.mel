// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  April 28, 1997
//
//  Description:
//      The offsetSurfacePreset() procedure executes a offset surface operation on 
//      a surface based on the offset option vars.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//

proc string pieceTogetherOffsetSurfaceCmd(
 	int $history,
	int $method,
	float $distance)
//
//	Description :
//		Piece together a offsetSurface command.
//
{
	string $cmd;
	$cmd = "offsetSurface ";

	// construction history
	$cmd = $cmd + " -ch ";
	if ( $history == 1 ) $cmd = $cmd + "on";
	else  $cmd = $cmd + "off";

	// method and distance
	$cmd = $cmd + " -m " + $method;
	$cmd = $cmd + " -d " + $distance;

	return $cmd;

}

global proc offsetSurfacePreset(
 	int $history,
	int $method,
	float $distance)
//
//	offsetSurface with the preset options.
//	Use this proc when operation dragged to Shelf.
//
{
	// Get the list of nurbs surfaces selected.  Do this here because
	// addViewNormal creates a node which will blow away the selection
	// list
	//
	global int $gSelectNurbsSurfacesBit;
	string $surfacesList[] = `filterExpand -ex true -sm $gSelectNurbsSurfacesBit`;

	// build the command
	string $cmd = pieceTogetherOffsetSurfaceCmd($history, $method, $distance);

	// placeholder for one selection item
	int $nitems = 1;
	$cmd = appendToCmdPlaceHoldersForSelectionItems( $cmd, $nitems );

	int $numSurfaces = size($surfacesList) ;
	if( $numSurfaces < 1 ) {
		error (uiRes("m_offsetSurfacePreset.kInvalidSelection")); 
	} else {

		// compute each offset in turn
		string $offsetResults[];
		string $surface[1];
		for( $i = 0 ; $i < $numSurfaces ; $i++ ) {
			$surface[0] = $surfacesList[$i];
			string $results[] = executeCmdOnItems( $cmd, $surface );	
			$offsetResults = stringArrayCatenate($offsetResults, $results);
		}

		// select the results.
		select -r $offsetResults;
	}
}
