// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Feb 2002
//
//  Description:
//
//  Option box routines for the fluidOceanAddSurfaceLocator command 
//  This code is used by several different option boxes that invoke this
//  mel script from the fluids ocean menu. A type flag is used to determine
//  which option box is to be generated.
//

// This returns the name for this particular item on the fluids menu
// This is used as a base name for option variables.
proc string itemName( int $type )
{
	if( $type == 0 ){
		return "oceanLocator";
	} else if( $type ==1 ){
		return "oceanDynamicLocator";
	} else if( $type ==2 ){
		return "dynamicBuoy";
	} else if( $type ==3 ){
		return "boatLocator";
	} else if( $type ==4 ){
		return "floatObjects";
	} else if( $type ==5 ){
		return "makeBoats";
	} else if( $type ==6 ){
		return "makeMotorBoats";
	}
}

// This returns the create function label for this option box.
// This is also used for the option box title.
proc string actionName( int $type )
{
	if( $type == 0 ){
		return (uiRes("m_performOceanLocator.kCreateOceanLocator"));
	} else if( $type ==1 ){
		return (uiRes("m_performOceanLocator.kCreateDynamicLocator"));
	} else if( $type ==2 ){
		return (uiRes("m_performOceanLocator.kCreateDynamicBuoy"));
	} else if( $type ==3 ){
		return (uiRes("m_performOceanLocator.kCreateBoatLocator"));
	} else if( $type ==4 ){
		return (uiRes("m_performOceanLocator.kFloatSelectedObjects"));
	} else if( $type ==5 ){
		return (uiRes("m_performOceanLocator.kMakeBoats"));
	} else if( $type ==6 ){
		return (uiRes("m_performOceanLocator.kMakeMotorBoats"));
	}
}

proc string helpTag( int $type )
{
	if( $type == 0 ){
		return "OceanLocator";
	} else if( $type ==1 ){
		return "CreateDynamicLocator";
	} else if( $type ==2 ){
		return "CreateDynamicBuoy";
	} else if( $type ==3 ){
		return "CreateBoatLocator";
	} else if( $type ==4 ){
		return "FloatSelectedObjects";
	} else if( $type ==5 ){
		return "MakeBoats";
	} else if( $type ==6 ){
		return "MakeMotorBoats";
	}
}


//
//  Procedure Name:
//      setOptionVars
//
//  Description:
//		Initialize the option values.
//
//  Input Arguments:
//		Whether to set the options to default values.
//
//  Return Value:
//      None.
//
proc setOptionVars(int $forceFactorySettings, string $name)
{
	string $varName = ($name +"FreeTransform");
	if ($forceFactorySettings||!`optionVar -exists $varName`) {
		optionVar -intValue $varName 0;
	}
}

//
//  Procedure Name:
//      oceanLocatorSetup
//
//  Description:
//		Update the state of the option box UI to reflect the option values.
//
//  Input Arguments:
//      parent               - Top level parent layout of the option box UI.
//                             Required so that UI object names can be 
//                             successfully resolved.
//
//	forceFactorySettings - Whether the option values should be set to
//                             default values.
//
//  Return Value:
//      None.
//
global proc oceanLocatorSetup(string $parent, int $forceFactorySettings, string $name )
{
	//	Retrieve the option settings
	//
	setOptionVars($forceFactorySettings, $name);

	setParent $parent;

	//	Query the optionVar's and set the values into the controls.
	string $varName = ($name +"FreeTransform");
	checkBoxGrp -edit 
		-value1 `optionVar -query $varName` 
		$varName;

}

//
//  Procedure Name:
//      oceanLocatorCallback
//
//  Description:
//		Update the option values with the current state of the option box UI.
//
//  Input Arguments:
//      parent - Top level parent layout of the option box UI.  Required so
//               that UI object names can be successfully resolved.
//
//	doIt   - Whether the command should execute.
//
//  Return Value:
//      None.
//
global proc oceanLocatorCallback(string $parent, int $doIt, int $type)
{
    setParent $parent;

	//	Set the optionVar's from the control values, and then
	//	perform the command.
	string $name = itemName( $type );
	string $varName = ($name+ "FreeTransform");
	optionVar -intValue $varName
		`checkBoxGrp -query -value1 $varName`;

	if ($doIt) {
		performOceanLocator 0 $type;
	}
}

//
//  Procedure Name:
//      oceanLocatorOptions
//
//  Description:
//		Construct the option box UI.  Involves accessing the standard option
//		box and customizing the UI accordingly.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
proc oceanLocatorOptions( int $type )
{
	//	Name of the command for this option box.
	//
	string $commandName = "fluidOceanAddSurfaceLocator";

	//	Build the option box actions.
	//
	string $callback = "oceanLocatorCallback";
	string $setup = "oceanLocatorSetup";

	string $layout = getOptionBox();
	setParent $layout;
	
	setUITemplate -pushTemplate DefaultTemplate;

	waitCursor -state 1;

	tabLayout -tabsVisible 0 -scrollable 1;
	
	string $parent = `columnLayout -adjustableColumn 1`;


	string $name = itemName( $type );
	string $varName = ($name+ "FreeTransform");
	checkBoxGrp -ncb 1 
				-label1 (uiRes("m_performOceanLocator.kFreeTransform")) 
				-annotation (uiRes("m_performOceanLocator.kFreeTransformAnnot")) 
			$varName;

	waitCursor -state 0;
	
	setUITemplate -popTemplate;

	//	'Create' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	string $createLabel = actionName( $type );
	button -edit
		-label $createLabel 
		-command ($callback + " " + $parent + " " + 1 + " " + $type)
		$applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + " " + $type + "; hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1 + " " + $name)
		$resetBtn;

	setOptionBoxTitle($createLabel);

	//	Customize the 'Help' menu item text.  Set the command name
	//  *after* setting the box title, otherwise the help menu item
	//  gets the wrong label.
	//
	setOptionBoxCommandName($commandName);
	setOptionBoxHelpTag( helpTag( $type ) );

	eval (($setup + " " + $parent + " " + 0 + " " + $name));	
	
	showOptionBox();
}

//
//  Procedure Name:
//      oceanLocatorHelp
//
//  Description:
//		Return a short description about this command.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      string.
//
proc string oceanLocatorHelp()
{
	return 
	"  Command: fluidOceanAddSurfaceLocator Create a floating object.\n" +
	"Selection: None, or the current ocean surface if there exists more than one ocean shader";
}

//
//  Procedure Name:
//      assembleCmd
//
//  Description:
//		Construct the command that will apply the option box values.
//
//  Input Arguments:
//      None.
//
proc string assembleCmd( int $type )
{
	string $cmd = "fluidOceanAddSurfaceLocator";
	string $name = itemName( $type );

	setOptionVars(false, $name);

	$cmd = ($cmd
		+ " " + `optionVar -query ($name+"FreeTransform")` 
		+ " " + $type 
		+ " 0"
		);

	return $cmd;
}

//
//  Procedure Name:
//      performOceanLocator
//
//  Description:
//		Perform the oceanLocator command using the corresponding 
//		option values.
//
//  Input Arguments:
//      0 - Execute the command.
//      1 - Show the option box dialog.
//      2 - Return the command.
//
global proc string performOceanLocator(int $action, int $type)
{
	string $cmd = "";

	switch ($action) {

		//	Execute the command.
		//
		case 0:
			$cmd = `assembleCmd $type`;
			eval($cmd);
			break;

		//	Show the option box.
		//
		case 1:
			oceanLocatorOptions $type;
			break;

		//	Return the command string.
		//
		case 2:
			//	Get the command.
			//
			$cmd = `assembleCmd $type`;
			break;
	}
	return $cmd;
}

