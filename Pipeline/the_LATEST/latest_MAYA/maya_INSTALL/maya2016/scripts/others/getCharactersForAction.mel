// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc string[] getHighlightedCharacters(string $editor)
{
    string $hiConn = `clipEditor -query -highlightConnection $editor`;
    return `selectionConnection -query -object $hiConn`;
}


proc
string[] findCharactersForSelection()
{
	string $sel[] = `ls -sl`;
	string $characters[];
	for ($obj in $sel) {
		string $isChar[] = `listConnections -type character $obj`;
		string $isCharNoDup[] = stringArrayRemoveDuplicates($isChar);
		for ($ch in $isCharNoDup) {
			$characters[size($characters)] = $ch;
		}
	}

	string $charReturn[] = stringArrayRemoveDuplicates($characters);
	return $charReturn;
}

global proc
string[] getCharactersForAction()
//
// Description:
//   Find the character to operate on. The priority is:
//    1) Highlighted character(s) in the trax window
//	  2) Selected character(s)
//    3) Character(s) related to the selected object(s)
//    4) Current character(s)
//
{
	string $characters[];
	// Is a character highlighted?
	//
	string $panel = `getPanel -underPointer`;
	if( $panel == "" ) {
		$panel = `getPanel -withFocus`;
	}
	if( $panel != "" ) {
		if ( "scriptedPanel" == `getPanel -typeOf $panel`) {
			if ( "clipEditorPanel" == `scriptedPanel -q -type $panel`) {				
				$characters = getHighlightedCharacters (clipEditorNameFromPanel($panel));
			}
		}
	}
	if (size($characters) == 0) {
		$characters = `ls -sl -type character`;
	}
	if (size($characters) == 0) {
		$characters = findCharactersForSelection();
	}
	if (size($characters) == 0) {
		$characters = `currentCharacters`;
	}
	return $characters;
}
