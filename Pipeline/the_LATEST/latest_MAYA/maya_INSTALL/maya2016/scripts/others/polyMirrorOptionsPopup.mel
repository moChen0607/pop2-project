// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc polyMirrorOptionsPopup( string $node )
{
	int $directionValue = `getAttr ($node + ".direction")`;

	menuItem 
		-label (uiRes("m_polyMirrorOptionsPopup.kDirectionLabel"))
		-subMenu 1
		-radialPosition	"E";

		menuItem 
			-label (uiRes("m_polyMirrorOptionsPopup.kPlusX"))
			-radialPosition	"N"
			-checkBox (0 == $directionValue)
			-command ("setAttr " + $node + ".direction 0");

		menuItem 
			-label (uiRes("m_polyMirrorOptionsPopup.kMinuxX"))
			-radialPosition	"NE"
			-checkBox (1 == $directionValue)
			-command ("setAttr " + $node + ".direction 1");

		menuItem 
			-label (uiRes("m_polyMirrorOptionsPopup.kPlusY"))
			-radialPosition	"E"
			-checkBox (2 == $directionValue)
			-command ("setAttr " + $node + ".direction 2");

		menuItem 
			-label (uiRes("m_polyMirrorOptionsPopup.kMinuxY"))
			-radialPosition	"SE"
			-checkBox (3 == $directionValue)
			-command ("setAttr " + $node + ".direction 3");

		menuItem 
			-label (uiRes("m_polyMirrorOptionsPopup.kPlusZ"))
			-radialPosition	"S"
			-checkBox (4 == $directionValue)
			-command ("setAttr " + $node + ".direction 4");

		menuItem 
			-label (uiRes("m_polyMirrorOptionsPopup.kMinuxZ"))
			-radialPosition	"SW"
			-checkBox (5 == $directionValue)
			-command ("setAttr " + $node + ".direction 5");

	setParent -m ..;


	int $mergeModeValue = `getAttr ($node + ".mergeMode")`;

	menuItem 
		-label (uiRes("m_polyMirrorOptionsPopup.kMergeModeLabel"))
		-subMenu 1
		-radialPosition	"W";

		menuItem 
			-label (uiRes("m_polyMirrorOptionsPopup.kDontMerge"))
			-radialPosition	"N"
			-checkBox (0 == $mergeModeValue)
			-command ("setAttr " + $node + ".mergeMode 0");

		menuItem 
			-label (uiRes("m_polyMirrorOptionsPopup.kMergeVertices"))
			-radialPosition	"W"
			-checkBox (1 == $mergeModeValue)
			-command ("setAttr " + $node + ".mergeMode 1");

		menuItem 
			-label (uiRes("m_polyMirrorOptionsPopup.kConnectBorderEdges"))
			-radialPosition	"S"
			-checkBox (2 == $mergeModeValue)
			-command ("setAttr " + $node + ".mergeMode 2");

	setParent -m ..;
}
