// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


//
//  Description:
// 		Apply/Save hypergraph panel settings
//

global string $savedHypergraphPanelStates[] = {};
global string $savedHypergraphPanelNames[] = {};
global int $doRestoreHypergraphSettings[] = {};
//  Procedure Name:
//      findSavedHypergraphPanelName
//
//  Description:
//		Find the index of the first occurance of $thePanel in $savedHypergraphPanelNames
//
//  Input Arguments:
//		None.
//
//  Return Value:
//      index of name or -1 if name does not occur in $savedHypergraphPanelNames
//
global proc int 
findSavedHypergraphPanelName( string $thePanel )
{
	global string $savedHypergraphPanelNames[];

	int $i;
	for ( $i = 0; $i < size($savedHypergraphPanelNames); $i++ ) {
		if ( $thePanel == $savedHypergraphPanelNames[$i] ) {
			return $i;
		}
	}
	return -1;
}

//  Procedure Name:
//      saveHypergraphSettings
//
//  Description:
//		Save settings for all hypergraph panels, used to ensure that
//		creating a new scene does not lose any unsaved settings changes.
//
//  Input Arguments:
//		None.
//
//  Return Value:
//      None.
//
global proc 
saveHypergraphSettings( )
{
	global string $savedHypergraphPanelNames[];
	global string $savedHypergraphPanelStates[];
	global int $doRestoreHypergraphSettings[];

	string $panels[] = `getPanel -scriptType hyperGraphPanel`;
	string $callback = `scriptedPanelType -query -saveStateCallback hyperGraphPanel`;
	string $panel;
	for ($panel in $panels) {
		string $stateString = `eval ($callback + " "+ $panel)`;
		int $i = `findSavedHypergraphPanelName $panel`;
		if ($i == -1) {
			$i = `size $savedHypergraphPanelNames`;
		}
		$savedHypergraphPanelNames[$i] = $panel;
		$savedHypergraphPanelStates[$i] = $stateString;
		//
		// We are saving the settings, set flag so that 
		// next init of a panel with this name will restore settings
		$doRestoreHypergraphSettings[$i] = 1;
	}
}
