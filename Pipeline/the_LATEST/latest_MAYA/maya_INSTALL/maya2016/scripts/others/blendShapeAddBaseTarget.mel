// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Jan, 1999
//
//  Description:
//      This script adds the selected shape as a target for the
//		specified blendShape node.
//


global proc
blendShapeAddBaseTarget(string $bsNode)
//
//	Description:
//		Add selected item as a target to the blendShape node.
//
{
	string $sel[]=`ls -sl -tr`;

	if (size($sel) != 1)
		error((uiRes("m_blendShapeAddBaseTarget.kSelectOneBase")));

	if ("blendShape" != nodeType($bsNode)) {
		error((uiRes("m_blendShapeAddBaseTarget.kArgumentBlend")));
	}

	string $resel[]=`duplicate $sel[0]`;
	
	
	if (size($resel))  {
		// Find a multiIndex for the new target
		//
		int $wc = `blendShape -q -wc $bsNode`;
		int $mi = bsMultiIndexForTarget($bsNode,$wc-1);

		if (-1 == $mi) {
			$mi = $wc;
		} else {
			$mi = $mi+1;
		}

		if (catch(`blendShape -e -t $sel[0] $mi $resel[0] 1 $bsNode`)) {
			delete($resel[0]);
		}

		// we also have to check the weightCount to see if it succeeded
		// since under some conditions the blendShape -e command does not
		// throw during errors.
		//
		int $newwc = `blendShape -q -wc $bsNode`;
		if ($newwc == $wc) {
			delete($resel[0]);
		}
	}
}
