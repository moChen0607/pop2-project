// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Oct, 2003
//
//	Procedure Name:
//		assumeRetargetRestPose
//
//	Description:
//		Restore a dagPose which stores the neutral position of a skeleton
//      hierarchy.
//
//	Return Value:
//		none
//
proc
int assumeTheRestPose(string $obj)
{
	string $foundPose;
	string $previousPoses[] = `listConnections -type dagPose $obj`;
	for ($ppose in $previousPoses) {
		string $attrExists[] = `ls ($ppose+".currentRestPose")`;
		if (size($attrExists)) {
			$foundPose = $ppose;
			break;
		}
	}

	if (size($foundPose) == 0) {
		string $errMsg = (uiRes("m_assumeRetargetRestPose.kNoNeutralPose"));
		$errMsg = `format -s $obj $errMsg`;
		error($errMsg);
	}

	string $cmd = ("dagPose -restore -global -name "+$ppose);
	evalEcho $cmd;
	return 1;
}

global proc
assumeRetargetRestPose()
{
	string $sl[] = `ls -sl -type transform`;
	string $errMsg = (uiRes("m_assumeRetargetRestPose.kSelectRootNodeError"));
	if (size($sl) == 0) {
		error($errMsg);
	}

	int $count = 0;
	for ($obj in $sl) {
		$count += assumeTheRestPose($obj);
	}

	if ($count == 0) {
		error($errMsg);
	}
}
