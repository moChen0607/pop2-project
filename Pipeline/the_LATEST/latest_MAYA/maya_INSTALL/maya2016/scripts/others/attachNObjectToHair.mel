// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  2012
//
//  Description:
//	     Routine to attach mesh to nHair system, creating nRigid object if needed
//

global proc attachNObjectToHair( string $hsys, string $mesh, int $collide)
{
	if(size($mesh) < 1){
		return;
	}

	if(nodeType($mesh) != "mesh"){
		// warning here if collide == true
			return;
	}

	// cache selection
	string $sl[] = `ls -sl`;
	string $nObject = "";

	// check if mesh is already an nRigid or nCloth
	string $objs[] =`listConnections -type nBase -sh 1 ($mesh +".worldMesh[0]")`;
	if( size($objs) > 0 ){
		$nObject = $objs[0];
	} else {
		$objs =`listConnections -type nCloth -sh 1 ($mesh +".inMesh")`;
	}

	if( size($objs) > 0 ){
		$nObject = $objs[0];
		if( nodeType($nObject) == "nCloth") {
			$objs = `listConnections -type mesh -sh 1 ($nObject+".outputStartMesh")`;
			string $startMesh;
			if( size($objs) > 0 ){
				$startMesh = $objs[0];
			} else {
				string $meshTforms[] = `listTransforms $mesh`;
				string $tform = $meshTforms[0];
				string $startMeshName = "outputStartCloth#";
				int $worldspace = getAttr( $nObject + ".localSpaceOutput" );
				if( $worldspace ){
					$startMesh = `createNode mesh -parent $tform -name ($startMeshName)`;
				} else {
					$startMesh = `createNode mesh -name ($startMeshName)`;
				}
				connectAttr ($nObject+".outputStartMesh") ($startMesh + ".inMesh");
				setAttr ($startMesh + ".intermediateObject") true;
			}
			if( size($startMesh) > 0 && $startMesh != $mesh ){
				select -r $mesh;
				select -add $startMesh;
				transplantHair 1 0;
			}
		}
	} else {
		if( !$collide ){
			return;
		}
		// If it is not yet an nObject create an nRigid
		select -r $mesh;
		makeCollideNCloth();
		string $rigids[] = `ls -sl`;
		if( size( $rigids ) > 0 ){
			$nObject = $rigids[0];
			if( !$collide ){
				setAttr ($nObject + ".collide") false;
			}
		}
	}
	if(size($nObject) != 0 ){
		connectAttr ( $nObject + ".nucleusId" ) ($hsys+".attachObjectId");
	}

	// restore selection;
	select -r $sl;
}


