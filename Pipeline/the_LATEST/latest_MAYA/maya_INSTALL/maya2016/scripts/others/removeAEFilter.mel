// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc removeAEFilter( string $nodeType )
//
//	Description:
//		A callback to remove a type based filter for the AE
//
{
	string $badFilterType = (uiRes("m_removeAEFilter.kBadFilterType"));
	if( !`optionVar -exists activeAEShowFilterTypes` ){
		warning($badFilterType);
		return;
	}
	if( $nodeType == "" ){
		// Is user sure she wants to remove all filter types?
		//
		string $yes = (uiRes("m_removeAEFilter.kYes"));
		string $cancel = (uiRes("m_removeAEFilter.kCancel"));
		string $result =  `confirmDialog -message (uiRes("m_removeAEFilter.kRemoveAll"))
			-button $yes -button $cancel -defaultButton $yes`;
		if( $result == $yes ){
			optionVar -remove activeAEShowFilterTypes;
			optionVar -remove activeAEShowFilterStates;
		}
	} else {
		string $filterTypes[] = `optionVar -query activeAEShowFilterTypes`;
		if( !stringArrayContains( $nodeType, $filterTypes ) ){
			warning($badFilterType);
			return;
		}
		// Remove from filter list
		//
		int $numFilterTypes = size($filterTypes);
		int $numFilterStates = 0;
		if( `optionVar -exists activeAEShowFilterStates` ){
			$numFilterStates = `optionVar -arraySize activeAEShowFilterStates`;
		}
		int $filterIndex = 1;
		while( $filterIndex < $numFilterTypes ){
			if( $filterTypes[$filterIndex] == $nodeType ){
				optionVar -removeFromArray activeAEShowFilterTypes $filterIndex;
				if( $filterIndex < $numFilterStates ){
					optionVar -removeFromArray activeAEShowFilterStates $filterIndex;
				}
				if( $numFilterTypes == 2 ){
					// This is the last remaining filter type, remove "other", aka
					// entry 0, as well
					//
					optionVar -removeFromArray activeAEShowFilterTypes 0;
					if( $numFilterStates > 0 ){
						optionVar -removeFromArray activeAEShowFilterStates 0;
					}
				}
				break;
			}
			$filterIndex++;
		}
	}
	updateAEshowAllButton();
	global string $gAEFocusNode;
	if( $gAEFocusNode != "" ){
		updateAE $gAEFocusNode;
	}
}

