// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc int reflectionIsSupported()
{
	// Symmetry is currently not supported when using global or object soft select
	return (!`softSelect -q -softSelectEnabled` || `softSelect -q -softSelectFalloff` < 2);
}

global proc string reflectionGetModeString()
{
	int $symOn = `symmetricModelling -q -symmetry`;
	if ($symOn) {
		string $sym = `symmetricModelling -q -about`;
		if ($sym == "object") {
			return uiRes("m_reflectionProperties.kSymObject" + `symmetricModelling -q -axis`);
		} else if ($sym == "world") {
			return uiRes("m_reflectionProperties.kSymWorld" + `symmetricModelling -q -axis`);
		} else if ($sym == "topo") {
			string $object = `symmetricModelling -q -topoSymmetry`;
			if ($object != "") return $object;
		}
	}
	return uiRes("m_reflectionProperties.kSymOff");
}


global proc reflectionValues ( ) 
{
	string $parent = `setParent -q`;
	
	// Check whether symmetry is supported based on the current tool/settings
	int $allow = reflectionIsSupported();

	// Symmetry Mode.
	iconTextButton -e -en $allow CommonReflectionOptionsButton;
	textField -e -tx `reflectionGetModeString` CommonReflectionOptionsText;

	// Symmetry Tolerance.
	floatSliderGrp -edit 
		-enable $allow
		-value `symmetricModelling -q -tolerance`
         -cc ("symmetricModelling -e -tolerance #1")
        CommonReflectionOptionsTol_FS;
	
	// Symmetry seam
	checkBoxGrp -edit 
		-enable $allow
		-value1 `symmetricModelling -q -preserveSeam`
		-cc1 "symmetricModelling -e -preserveSeam #1" 
		CommonReflectionOptionsSeam_CB; 

	int $seamEnabled = ($allow && `symmetricModelling -q -preserveSeam`);
	
	// Seam Tolerance.
	floatSliderGrp -edit 
		-enable $seamEnabled
		-value `symmetricModelling -q -seamTolerance`
         -cc ("symmetricModelling -e -seamTolerance #1")
        CommonReflectionOptionsTol_ST;

	// Seam falloff curve
	gradientControlNoAttr -e
		-enable $seamEnabled
		 -asString `symmetricModelling -q -seamFalloffCurve`
		 -cc "symmetricModelling -e -seamFalloffCurve \"#1\""
		CommonReflectionOptionsSeam_SF;
	text -e -enable $seamEnabled CommonReflectionOptionsSeam_FT;
	
	// Topological symmetry options
	checkBoxGrp -edit 
		-enable $allow
		-value1 `symmetricModelling -q -allowPartial`
		-cc1 "symmetricModelling -e -allowPartial #1" 
		CommonReflectionOptionsAllowPartial_CB; 
		
}
