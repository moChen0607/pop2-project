// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  1/13/06
//
//
//  Description:
//      This creates a window with a slider for the performPolySoftEdge command
//		under the "Normals" menu on the "Polygons" menubar.
//


global proc polySoftEdgeReset()
{
	optionVar -floatValue polySoftEdge 30.0;
    floatSliderGrp -edit -value 30.0 polySoftEdgeFltSlider;
}

global proc setPolySoftEdge( float $fval )
{
	optionVar -floatValue polySoftEdge $fval;
	polyPerformAction ("polySoftEdge -angle " + $fval) e 0;
}

global proc setPolySoftEdgeCallback ( string $fltSlider )
{
	if (`floatSliderGrp -exists $fltSlider`)
	{
		setPolySoftEdge(`floatSliderGrp -query -v $fltSlider`);
	}
}

global proc polySoftEdgeWin()
{
	string $layout = getOptionBox();
	setParent $layout;

	string $commandName = "polySoftEdge";
	setOptionBoxCommandName($commandName);

	float $fval = 30.0;
	if( `optionVar -exists polySoftEdge` )
		$fval = `optionVar -query polySoftEdge`;

	waitCursor -state 1;
	setUITemplate -pushTemplate OptionBoxTemplate;
	formLayout polySoftEdgeOptionsLayout;	
	
		string $slider = `floatSliderGrp 
								-field true
								-label (uiRes("m_polySoftEdgeWin.kAngle"))
								-minValue 0.0 
								-maxValue 180.0	
								-fieldMinValue 0.0 
								-fieldMaxValue 180.0 
								-value $fval
								-rowAttach 1 "top" 4
							polySoftEdgeFltSlider`;				
	setParent ..;

	setUITemplate -popTemplate;
	waitCursor -state 0;

	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-command ("setPolySoftEdgeCallback(\"" + $slider + "\")")
		$applyBtn;

	string $applyAndCloseBtn = getOptionBoxApplyAndCloseBtn();
	button -edit 
		-command ("setPolySoftEdgeCallback(\"" + $slider + "\"); hideOptionBox")
		$applyAndCloseBtn;

	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ("polySoftEdgeReset")
		$resetBtn;

	string $closeBtn = getOptionBoxCloseBtn();
	button -edit 
		-command ("hideOptionBox")
		$closeBtn;

	setOptionBoxTitle (uiRes("m_polySoftEdgeWin.kSetNormalAngle"));
	
	showOptionBox();
}
