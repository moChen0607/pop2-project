// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Nov, 2003
//
//<doc>
//<name searchReplaceNames>
//
//<synopsis>
//		searchReplaceNames(string $searchString, string $replaceString, string $onString)
//
//<description>
//		This script can be used to search for names that contain the specified
//      search string, and replacing that string with the specified replace string.
//		Note that referenced nodes cannot be renamed, so referenced nodes are
//		skipped by this method.
//
//<flags>
//		string $searchString The string to search for
// 		string $replaceString The string to replace it
//		string $onString: What to rename: "all", "selected", "hierarchy"
//
//<returns>
//		An array of the objects names which were modified.
//
//<examples>
//
//	//	In the hierarchy below the selection, teplace all objects containing the 
//  //  string "george" with the string "jim".
//	//
//	searchReplaceNames("george","jim","hierarchy");
//
//</doc>

global proc searchReplaceNames(
	string $searchString,
	string $replaceString,
	string $onString)
{
	if ($searchString == $replaceString) {
		return;
	}

	string $getObjCmd = "ls";
	if ($onString == "all") {
		// nothing
	} else if ($onString == "selected") {
		$getObjCmd += " -sl";
	} else if ($onString == "hierarchy") {
		$getObjCmd += " -sl -dag";		
	} else {
		string $fmtString = (uiRes("m_searchReplaceNames.kInvalidArgument"));
		string $errMsg = `format -s $onString $fmtString`;
		error($errMsg);
	}

	string $nameList[];
	string $allNames[] = `eval $getObjCmd`;

	int $count = 0;
	int $renamedCount = 0;
	for ($name in $allNames) {
		// strip off any path and namespace info
		//
		string $pathless = match("[a-zA-Z0-9_]*$",$name);

		if (! `objExists $name`) {
			// renaming must have modified the parent names
			//
			$nameList = `eval $getObjCmd`;
			$name = $nameList[$count];
		}

		if (`reference -q -isNodeReferenced $name`) {
			// referenced nodes cannot be renamed
			//
			$count++;
			continue;
		}

		string $newName = `substitute $searchString $pathless $replaceString`;
		if ($newName != $pathless) {
			rename $name $newName;
			$renamedCount++;
		}
		$count++;		
	}
	string $formatString = (uiRes("m_searchReplaceNames.kReplacedNumberNames"));   
    print `format -s $renamedCount $formatString`;
}

