// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

	//
//
//  Creation Date:  Oct, 2000
//
//	Procedure Name:
//		copyCachedClipData
//
//	Description:
//		Callback used after moving attributes from a character
//      to another character. Before removing the attributes from
//		the first character, the "cacheClipData" mel script should
//		have been used to isolate the clips from the original character.
//		The result argument from cacheClipData is then passed to this
//		mel script after the new attributes have been added to another
//		character.
//
//	Input Arguments:
//  $cache : 		result argument returned earlier by "cacheClipData"
//	$destChar :		new character to receive the clips
//
//	Return Value:
//		none
//

global proc 
copyCachedClipData(string $cache[], string $destChar)
{
	string $library = $cache[0];
	if (nodeType($library) != "clipLibrary") {
		error( (uiRes("m_copyCachedClipData.kNoSourceLibErr")) );
		return;
	}
	
	string $clipsToCopy[];
	int $ii;
	for ($ii = 1; $ii < size($cache); $ii++) {
		string $res = $cache[$ii];
		if (nodeType($res) == "animClip") {
			int $instanced = `getAttr ($res+".clipInstance")`;
			if ($instanced) {
				$clipsToCopy[size($clipsToCopy)] = $res;
			}
		}
	}
	if (size($clipsToCopy) > 0) {
		string $copyCmd = "clip -copy ";
		
		for ($clip in $clipsToCopy) {
			$copyCmd += (" -name "+$clip);
		}
		
		$copyCmd += (" "+$library);
		eval $copyCmd;
		
		string $pasteCmd = ("clip -pi -mm \"byNodeName\" -sc 1");
		$pasteCmd += (" "+$destChar);
		catch(`eval $pasteCmd`);
		delete $library;
	}
}
