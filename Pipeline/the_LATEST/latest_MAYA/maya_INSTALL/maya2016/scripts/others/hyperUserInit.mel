// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  21 Jan. 1997
//
//
//  Procedure Name:
//
//      hyperUserInit.mel 
//
//  Description:
//              
//		If this script is in your script path, this will allow for simple
//		hypergraph editing. This will work in the "DG" mode of the hypergraph
//		and will allow the ability to build shader networks and other graph 
//		editing for 1.0.  Have fun.....  corban
//
//  Input Arguments:
//      
//  Return Value:
//      

global proc nodePressCallback(string $editor, string $node)
{
//
//  Description:
//		Callback when node is pressed
}

global proc nodeReleaseCallback(string $editor, string $node, string $mod)
{
//
//  Description:
//		Callback when node is released
}

global proc nodeDropCallback(string $editor, string $srcNode, string $dstNode, string $mod)
{
//
//  Description:
//		Callback when node is dropped on another node

		string $graphType = `hyperGraph -q -graphType $editor`;

		if ($mod == "shift") {
			connectWindowWith $srcNode $dstNode;	
		} else {
			defaultNavigation -f true -ce -s $srcNode -d $dstNode;
		}
}

global proc nodeDblClickCallback(string $editor, string $node)
{
//
//  Description:
//		Callback when node is double clicked

	hyperGraph -e -attributeEditor single $editor;
}

global proc edgePressCallback(string $editor, string $edge)
{
//
//  Description:
//		Callback when edge is pressed
}

global proc edgeReleaseCallback(string $editor, string $edge)
{
//
//  Description:
//		Callback when edge is released
}

global proc edgeDropCallback(string $editor, string $edge)
{
//
//  Description:
//		Callback when edge is dropped on another edge
}

global proc edgeDblClickCallback(string $editor, string $edge)
{
//
//  Description:
//		Callback when edge is double clicked

	global string $fromAttr;
	$fromAttr = `hyperGraph -q -fromAttr $editor`;
	global string $toAttr;
	$toAttr = `hyperGraph -q -toAttr $editor`;

	connectWindowWith $fromAttr $toAttr;
	
}

global proc edgeDimmedDblClickCallback(string $editor, string $edge)
{
//
//  Description:
//		Callback when a dimmed edge is double clicked

	minorNodesWindow;;
}


global proc nodeConnectCallback(string $editor, string $srcNode, string $dstNode, string $direction, string $mod)
{
//
//  Description:
//		Callback when connect request is made by connecting edge

	global string $fromAttr;
	$fromAttr = `hyperGraph -q -fromAttr $editor`;
	global string $toAttr;
	$toAttr = `hyperGraph -q -toAttr $editor`;

	global string $outliner;


	if ($direction == "from")
	{
		if (!`window -exists hyperConnectWin`)
		{
			window -ret -title ($srcNode + " -->") -wh 200 450 hyperConnectWin;
			formLayout myForm;

			$outliner = `nodeOutliner`;

			formLayout -e
				-af $outliner top 0
				-af $outliner left 0
				-af $outliner right 0
				-af $outliner bottom 0
				myForm;
		}
		else
		{
			window -e -title ($srcNode + " -->") hyperConnectWin;
			nodeOutliner -e -rma $outliner;
		}

		showWindow hyperConnectWin;
		nodeOutliner -e -sh true -snk true -si true -connectivity $toAttr -a $srcNode -so true -snk true $outliner;
		nodeOutliner -e -sc "outSelected" $outliner;


	}
	else
	{
		if (!`window -exists hyperConnectWin`)
		{	
			window -ret -title ("--> " + $dstNode) -wh 200 450 hyperConnectWin;
			formLayout myForm;

			$outliner = `nodeOutliner`;

			formLayout -e
				-af $outliner top 0
				-af $outliner left 0
				-af $outliner right 0
				-af $outliner bottom 0
				myForm;
		}
		else
		{
			window -e -title ("--> " + $dstNode)  hyperConnectWin;	
			nodeOutliner -e -rma $outliner;
		}

		showWindow hyperConnectWin;
		nodeOutliner -e -sh true -snk true -si true -connectivity $fromAttr -a $dstNode -so true -snk true $outliner;
		nodeOutliner -e -sc "inSelected" $outliner;
	}
}

global proc disconnectCallback(string $editor, string $srcAttr, string $dstAttr)
{
//
//  Description:
//		Callback when delete connection request is made
	evalEcho ("disconnectAttr " + $srcAttr + " " + $dstAttr);
}


// global proc used for the above proc. (nodeConnectCallback)
// Called from nodeConnectCallback.
//

global proc inSelected ()
{
        global string $outliner;
        global string $fromAttr;
        global string $toAttr;
        string $inAttrSelected[0]; 
        $inAttrSelected = `nodeOutliner -q -cs $outliner`;
        disconnectAttr $fromAttr $toAttr;
        
	string $msg = (uiRes("m_hyperUserInit.kResultDisconect")) ;
	print `format -stringArg $fromAttr -stringArg $toAttr $msg` ;

        int $length = `size $inAttrSelected`;
        if( $length > 0 ) {
                connectAttr $fromAttr $inAttrSelected[0];
		
		$msg = (uiRes("m_hyperUserInit.kResultConnect")) ;
		print `format -stringArg $fromAttr -stringArg $inAttrSelected[0] $msg` ;
        }
        window -e -visible false hyperConnectWin;

}

global proc outSelected ()
{
        global string $outliner;
        global string $fromAttr;
        global string $toAttr;
        string $outAttrSelected[0]; 
        $outAttrSelected = `nodeOutliner -q -cs $outliner`;
        disconnectAttr $fromAttr $toAttr;
	
	string $msg = uiRes("m_hyperUserInit.kResultDisconect") ;
	print `format -stringArg $fromAttr -stringArg $toAttr $msg` ;


        int $length = `size $outAttrSelected`;
        if( $length > 0 ) {
                connectAttr $outAttrSelected[0] $toAttr;
		$msg = uiRes("m_hyperUserInit.kResultConnect") ;
		print `format -stringArg $outAttrSelected[0] -stringArg $toAttr $msg` ;
        }
        window -e -visible false hyperConnectWin;

}

global proc
hyperUserInit ( string $editor )
{
	hyperGraph -e 
		-nodePressCommand		nodePressCallback 
		-nodeReleaseCommand 	nodeReleaseCallback
		-nodeDropCommand 		nodeDropCallback
		-edgePressCommand 		edgePressCallback 
		-edgeReleaseCommand 	edgeReleaseCallback
		-edgeDropCommand 		edgeDropCallback
		-edgeDblClickCommand 	edgeDblClickCallback
		-edgeDimmedDblClickCommand 	edgeDimmedDblClickCallback
		-nodeConnectCommand		nodeConnectCallback
		-breakConnectionCommand disconnectCallback
		$editor;
		
	// only put the double-click event on HyperShade and Visor
	//
	string $type = `hyperGraph -query -graphType $editor`;
	if ( $type != "DAG" && $type != "DG" ){
		hyperGraph -e
			-nodeDblClickCommand nodeDblClickCallback
			$editor;
	}		
}



