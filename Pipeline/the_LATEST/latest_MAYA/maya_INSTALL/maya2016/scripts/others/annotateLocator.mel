// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//
//
// Creation Date:  	October 2003
//
// Written by:	jpakalns
//
//  Procedure Name:
//      annotateLocator
//
//  Description:
//		Add annotation to an existing locator. Annotation transform
//		is parented under the locators transform.
//
//  Input Arguments:
//		locator - transform node of existing locator
//		annotation - string to annotate
//
//  Return Value:
//      None.

global proc string annotateLocator(string $locator, string $annotationText, string $annotationName)
{
	
	// add annotation, right on top of the locator
	// see annotateNode.mel for how to place annotation
	// near edge of bounding box, if it turns out we want that
	

	select -r $locator;
	string $locShape[] = `listRelatives -shapes $locator`;
	float $locPos[] =  `getAttr ($locShape[0]+".localPosition")`;
	$annotationNode = `annotate -tx $annotationText
		-p $locPos[0] $locPos[1] $locPos[2]`;
	setAttr ($annotationNode + ".displayArrow") 0;

	//	get parent transform of annotation
	string $transform[] = `listRelatives -parent $annotationNode`;

	string $actualTransform = $transform[0];
	if(size ($annotationName) > 0) {
		$actualTransform = `rename $transform[0] $annotationName`;
	}

	//	parent annotation to locator
	parent $actualTransform $locator;
	return $actualTransform;
}
