// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  2005
//
//
//<doc>
//<name randomizeFollicles>
//
//<synopsis>
//      randomizeFollicles range 
//
//<returns>
//      None.
//
//<description>
// This mel procedure randomizes the positions of selected follicles in uv space.
// The passed in range value controls the scale of the randomization applied in
// normalized uv space.
//
//<flags>
//  None.
//
//<examples>
//
// randomizeFollicles 0.1;
//
//</doc>

global proc randomizeFollicles( float $range )
{
	string $follicles[] = `ls -sl -dag -type follicle`;
	int $numSelectedFollicles = size($follicles);
	if( $numSelectedFollicles > 0 ){
		string $follicle;
		for( $follicle in $follicles ){
			float $oldU = getAttr( $follicle + ".parameterU" );
			float $oldV = getAttr( $follicle + ".parameterV" );

			int $valid = false;
			int $tries = /*max tries*/8;
			while ($tries > 0) {
				float $u = $oldU + rand( $range ) - ($range*0.5);
				float $v = $oldV + rand( $range ) - ($range*0.5);
				setAttr ($follicle + ".parameterU") $u;
				setAttr ($follicle + ".parameterV") $v;
				if (getAttr($follicle + ".validUv")) {
					$valid = true;
					break;
				}
				$tries--; // roll again...
			}
			if (!$valid) {
				// reset the UV if we didn't find a valid one
				setAttr ($follicle + ".parameterU") $oldU;
				setAttr ($follicle + ".parameterV") $oldV;
			}
		}
	} else {
		warning((uiRes("m_randomizeFollicles.kNoFollicles")) );
	}
}
