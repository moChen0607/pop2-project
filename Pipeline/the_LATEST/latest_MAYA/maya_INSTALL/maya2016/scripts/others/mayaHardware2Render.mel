// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc string mayaHardware2Render(int $width, int $height, int $doShadows,
        int $doGlowPass, string $camera, string $option)
{
    //global string $hardwareRenderSelectedFlag;
    string $result = "";

    // OGS_TODO: we will implement this later
    // If the useRenderRegion attribute is set, then
    // we need to pass the render region to the "hwRender"
    // command through its "-renderRegion" flag.
    //
//     if (useRenderRegion())
//     {
//
//         int $left = `getAttr defaultRenderGlobals.left`;
//         int $right = `getAttr defaultRenderGlobals.rght`;
//         int $bottom = `getAttr defaultRenderGlobals.bot`;
//         int $top = `getAttr defaultRenderGlobals.top`;
//
//         // Check if the region is within the boundary.
//         //
//         if( $left < 0 )
//         {
//             $left = 0;
//         }
//         if( $bottom < 0 )
//         {
//             $bottom = 0;
//         }
//
//         catch($result =
//             `eval
//                 hwRender $hardwareRenderSelectedFlag
//                     -width $width -height $height
//                     -camera $camera -cf -notWriteToFile 0 -renderRegion
//                     $left $right $bottom $top`);
//     }
//     else
//     {
//         // If useRenderRegion is false, we do regular hardware
//         // rendering.
//         //
//         $result = `eval hwRender $hardwareRenderSelectedFlag
//                         -camera $camera -cf -notWriteToFile 0
//                         -width $width -height $height $option`;
//     }

        $result  = `eval ogsRender
				-camera $camera -cf -width $width -height $height $option`;

    return $result;
}
