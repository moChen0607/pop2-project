// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Feb. 2007, Stephen Edwards
//  Modified Date:  May. 2007, Patrick Weekes
//
//  Description:
//

global proc polyBridgeFaces ()
{
	// Check if the selection is valid (1 object) before deleting any faces.
	// NOTE: Other invalid selections (such us unequal edge selection sizes) 
	//       will not be caught until after the faces are deleted.
	//       They are simply too complex to be caught in this MEL script.
	string $objects[] = `ls -sl -o`;
	if (`size $objects` == 1) {

		string $selectedFaces[] = `filterExpand -sm 34 -ex 1`;

	// get just outer edges of each selected area
		ConvertSelectionToEdges;
		string $edges[] = `ls -sl`;
		select $selectedFaces;
		ConvertSelectionToContainedEdges;
		string $inEdges[] = `ls -sl`;
		select $edges;
		select -tgl $inEdges;
	
	// save outer edges in a set since IDs may change when faces are deleted
		string $edgeSet;
		$edgeSet = `sets -name $edgeSet`;

	// delete the faces and perform the bridge on the appropriate edges
		delete $selectedFaces;
		select -r $edgeSet;
		
		BridgeEdge;

	// check if any of the selected edges are still border edges since
	// this means the face was deleted but not used in the bridge
		string $outEdges[] = `sets -q $edgeSet`;
		int $borderFound = 0;

		int $i = 0;
		while($i < `size $outEdges` && ! $borderFound) {
			string $faces[] = `polyInfo -ef $outEdges[$i]`;
			string $buffer[];
			$borderFound = `tokenize $faces[0] $buffer` < 4;
			$i = $i + 1;
		}
		if ($borderFound) {
			warning (uiRes("m_polyBridgeFaces.kWarningExtraFaces"));
		}

	// cleanup: re-select the edges and delete the set
		select -add $outEdges;
		delete $edgeSet;
		
	}

	else {
		error (uiRes("m_polyBridgeFaces.kErrorTooManyObjects"));
	}

}
