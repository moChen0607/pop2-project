// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


global proc createPolyPrismValues(string $toolName)
{
	string $name = "createPolyPrism";
	string $parent = (`toolPropertyWindow -q -location` + "|" + $name);
	setParent $parent;

	int $numSides = `createPolyPrismCtx -q -ns $toolName`;
	int $hDiv = `createPolyPrismCtx -q -sh $toolName`;
	int $cDiv = `createPolyPrismCtx -q -sc $toolName`;
	float $len = `createPolyPrismCtx -q -length $toolName`;
	float $slen = `createPolyPrismCtx -q -sideLength $toolName`;

	int $uvSetting = `createPolyPrismCtx -q -createUVs $toolName`;
	
	int $createUV = 0;
	int $normalize = 0;
	int $preserveAR = 0;

	if ($uvSetting == 3){
		$createUV = 1;
		$normalize = 1;
		$preserveAR = 1;
	} else if ($uvSetting == 2){
		$createUV = 1;
		$normalize = 1;
	} else if ($uvSetting == 1){
		$createUV = 1;
	}
	
	int $axis = `createPolyPrismCtx -q -axis $toolName`;

	int $dragEdit = `createPolyPrismCtx -q -doDragEdit $toolName`;
	int $dragEditCaps = `createPolyPrismCtx -q -doSubdivisionsCapsEdit $toolName`;
	
	intSliderGrp -e 
		-v $numSides
		-cc ("createPolyPrismCtx -e -ns #1 " + $toolName)
		createPolyPrismNumSidesSlider;

	intSliderGrp -e 
		-v $hDiv
		-cc ("createPolyPrismCtx -e -sh #1 " + $toolName)
		createPolyPrismHeightDivisionsSlider;

	intSliderGrp -e 
		-v $cDiv
		-cc ("createPolyPrismCtx -e -sc #1 " + $toolName)
		createPolyPrismCapDivisionsSlider;

	floatSliderGrp -e
		-v $len
		-cc ("createPolyPrismCtx -e -length #1 " + $toolName)
		createPolyPrismLengthSlider;
	
	floatSliderGrp -e
		-v $slen
		-cc ("createPolyPrismCtx -e -sideLength #1 " + $toolName)
		createPolyPrismSideLengthSlider;
	
	radioButtonGrp -e
		-sl ($axis + 1)
		-cc ("changePrismAxisSetting(\"" + $toolName+ "\")")
		createPolyPrismAxisRadioButton;

	checkBoxGrp -e
		-v1 $createUV
		-cc1 ("changePrismUVSettings(\"" + $toolName+ "\")")
		createPolyPrismCreateUVCheckBox;
		
	checkBoxGrp -e
		-v1 $normalize
		-cc1 ("changePrismUVSettings(\"" + $toolName+ "\")")
		createPolyPrismNormalizeCheckBox;
		
	checkBoxGrp -e
		-v1 $preserveAR
		-cc1 ("changePrismUVSettings(\"" + $toolName+ "\")")
		createPolyPrismPreserveAspectRatioCheckBox;
		
	checkBoxGrp -e
		-v1 $dragEdit
		-cc1 ("createPolyPrismCtx -e -doDragEdit " + !$dragEdit + " " + $toolName)
		createPolyPrismDragEditCheckBox;

	int $doDrag = `checkBoxGrp -q -v1 createPolyPrismDragEditCheckBox`;
	
	if ($doDrag)
		checkBoxGrp -edit -enable true createPolyPrismCapsDragEditCheckBox;
	else
		checkBoxGrp -edit -enable false createPolyPrismCapsDragEditCheckBox;
		
	checkBoxGrp -e
		-v1 $dragEditCaps
		-cc1 ("createPolyPrismCtx -e -doSubdivisionsCapsEdit " + !$dragEditCaps + " " + $toolName)
		createPolyPrismCapsDragEditCheckBox;

	string $icon = "polyPrism.png";
	string $helpTag= "CreatePolyPrismTool";
	toolPropertySetCommon $toolName $icon $helpTag;
	toolPropertySelect $name;
	
	changePrismUVSettings($toolName);
}


global proc changePrismAxisSetting(string $toolName){
	
	int $axisSetting = 0;
	
	if (`radioButtonGrp -exists createPolyPrismAxisRadioButton`){
		$axisSetting = (`radioButtonGrp -q -sl createPolyPrismAxisRadioButton` - 1);
	}	
	
	if ($axisSetting < 0){
		$axisSetting = 0;
	}
	
	string $cmd = "createPolyPrismCtx -e -axis " + $axisSetting + " " + $toolName;
	
	eval($cmd);
}


global proc changePrismUVSettings(string $toolName)
{
	int $value = 0;
	int $createUVVal;
	int $normalizeVal;
	int $preserveARVal;
	
	if (`checkBoxGrp -exists createPolyPrismCreateUVCheckBox`){
		 $createUVVal = `checkBoxGrp -q -v1 createPolyPrismCreateUVCheckBox`;
	}
	
	if (`checkBoxGrp -exists createPolyPrismNormalizeCheckBox`){
		 $normalizeVal = `checkBoxGrp -q -v1 createPolyPrismNormalizeCheckBox`;
	}
	
	if (`checkBoxGrp -exists createPolyPrismPreserveAspectRatioCheckBox`){
		 $preserveARVal = `checkBoxGrp -q -v1 createPolyPrismPreserveAspectRatioCheckBox`;
	}
	
	if (!$createUVVal){
		checkBoxGrp -edit -enable false createPolyPrismNormalizeCheckBox;
		checkBoxGrp -edit -enable false createPolyPrismPreserveAspectRatioCheckBox;
	}else {
		checkBoxGrp -edit -enable true createPolyPrismNormalizeCheckBox;
		if (!$normalizeVal){
			checkBoxGrp -edit -enable false createPolyPrismPreserveAspectRatioCheckBox;
		}else {
			checkBoxGrp -edit -enable true createPolyPrismPreserveAspectRatioCheckBox;
		}
	}	
	
	if($createUVVal && $normalizeVal && $preserveARVal){
		$value = 3;
	} else if ($createUVVal && $normalizeVal){
		$value = 2;
	} else if ($createUVVal){
		$value = 1;
	}
		
	string $cmd = ("createPolyPrismCtx -edit -cuv " + $value + " " + $toolName);

	eval($cmd);
}

