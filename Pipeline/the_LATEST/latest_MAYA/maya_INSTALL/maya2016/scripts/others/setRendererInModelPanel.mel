// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

proc setOGSRendererInModelPanel(string $overrideName, string $panel)
{
	int $consolidate = checkMemoryForConsolidatedWorld();
	if ($consolidate)
	{
		if( catchQuiet(`modelEditor -edit -rnm "vp2Renderer" -rom $overrideName $panel`) ) {
			print( "setOGSRendererInModelPanel failed for panel: " + $panel + "\n" );
		}
	}
}

global proc setRendererInModelPanel( string $rendererName, string $panel )
{
	if ($rendererName == "hwRender_OpenGL_Renderer")
	{
		// Switch to shaded mode if we are not already..
		string $shadeMode = `modelEditor -q -displayAppearance $panel`;
		if ($shadeMode == "wireframe" ||
			$shadeMode == "boundingBox" ||
			$shadeMode == "points")
		{
			modelEditor -edit -displayAppearance smoothShaded -activeOnly false $panel;
		}		
		modelEditor -edit -rnm "hwRender_OpenGL_Renderer" $panel;
	}
	else if ($rendererName == "vp2Renderer")
	{
		setOGSRendererInModelPanel("", $panel);
	}
	else
	{
		modelEditor -edit -rnm $rendererName $panel;
	}

	if ( `getenv MAYA_DISABLE_VP2_WHEN_POSSIBLE` == 1 ) 
	{		
		// When this env var is set, if no modeling panel is in VP2, do a ogs reset (which will also stop listening)
		string $vp2Panels[] = `ogs -reset -q`;
		if (size($vp2Panels) == 0)
		{	
			ogs -reset;
		}
	}
}

global proc setRendererAndOverrideInModelPanel( string $rendererName, string $overrideName, string $panel )
{
	if ($rendererName == "vp2Renderer")
	{
		setOGSRendererInModelPanel($overrideName, $panel);
	}
}

