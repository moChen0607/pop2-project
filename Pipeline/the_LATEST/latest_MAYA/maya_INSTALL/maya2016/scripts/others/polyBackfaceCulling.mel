// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

proc setOptionVars(int $forceFactorySettings)
{
	if ($forceFactorySettings || !`optionVar -exists polyBackfaceCullValue`)
		optionVar -intValue polyBackfaceCullValue 1;
}

proc polyBackfaceCullingSetupOption()
{
	// Global template variables for form spacing
	global int $gOptionBoxTemplateFrameSpacing;
	
	//	Name of the command for this option box.
	string $commandName = "polyBackfaceCulling";

	//	Build the option box actions.
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	//	STEP 1:  Get the option box.
	string $layout = getOptionBox();
	setParent $layout;
	
	//	STEP 2:  Pass the command name to the option box.
	string $optionBoxTitle = (uiRes("m_polyBackfaceCulling.kCustomPolygonOptions"));
	setOptionBoxTitle($optionBoxTitle);
	
	//	STEP 3:  Activate the option box UI template.
	setUITemplate -pushTemplate OptionBoxTemplate;

	//	STEP 4: Create option box contents.
	waitCursor -state 1;
	
	// Form layout
	string $parent = `formLayout polyBackfaceCullingOptions`;

		// Settings frame
		string $settingsFrame = 
		`frameLayout -label (uiRes("m_polyBackfaceCulling.kSettingsFrame"))`;
		
			radioButtonGrp 
				-numberOfRadioButtons 3 
				-select 1 
				-vertical
				-label1 (uiRes("m_polyBackfaceCulling.kFull"))  
				-label2 (uiRes("m_polyBackfaceCulling.kShowWire"))  
				-label3 (uiRes("m_polyBackfaceCulling.kShowHardEdges"))  
				polyObjBackfaceCullRadio;
						
		setParent $parent; // frameLayout
		
	setParent ..; // formLayout
				
	// Attach Description/Settings frames to form layout
	formLayout -edit
		-attachForm $settingsFrame "top" $gOptionBoxTemplateFrameSpacing
		-attachForm $settingsFrame "left" $gOptionBoxTemplateFrameSpacing
		-attachForm $settingsFrame "right" $gOptionBoxTemplateFrameSpacing
		-attachNone $settingsFrame "bottom"
	$parent;
				
	//	Turn off the wait cursor.
	//
	waitCursor -state 0;
	
	//	Step 5: Deactivate the default UI template.
	setUITemplate -popTemplate;

	//	Step 6: Customize the buttons.  
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit 
	       -command ($callback + " " + $parent + " " + 1)
		$applyBtn;
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;
			 
	//	Step 7: Set the option box title.
	setOptionBoxTitle($optionBoxTitle);

	//	Step 8: Customize the 'Help' menu item text.
	setOptionBoxHelpTag( "BackfaceCulling" );

	//	Step 9: Set the current values of the option box.
	eval (($setup + " " + $parent + " " + 0));	
	
	//	Step 10: Show the option box.
	showOptionBox();
}

global proc polyBackfaceCullingSetup(string $parent, int $forceFactorySettings)
{
	setOptionVars($forceFactorySettings);
	setParent $parent;
	
	radioButtonGrp -edit -select `optionVar -query polyBackfaceCullValue`  polyObjBackfaceCullRadio;				
}

global proc polyBackfaceCullingCallback(string $parent, int $doIt)
{
	setParent $parent;
	
	optionVar -intValue polyBackfaceCullValue `radioButtonGrp -query -select polyObjBackfaceCullRadio`;
		
	if ($doIt) {
		polyBackfaceCulling 0;
		addToRecentCommandQueue "polyBackfaceCulling 0" "polyOptions";
	}
}
global proc string polyBackfaceCulling(int $option)
{
	string $cmd="";
	string $backFaceCull[] = {"-bc","-fb","-wbc","-hb"};
	switch ($option) {
	case 0:
		setOptionVars(false);
		int $ival = `optionVar -query polyBackfaceCullValue`;
		$cmd =("polyOptions " + $backFaceCull[$ival]);
		eval($cmd);
		break;
	case 1: polyBackfaceCullingSetupOption; break;
	default:
		setOptionVars(false);
		int $ival = `optionVar -query polyBackfaceCullValue`;
		$cmd =("polyOptions " + $backFaceCull[$ival]);
		eval($cmd);
	}
	return $cmd;		
}