// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//<doc>
//<name lsType>
//<owner "Unsupported">
//
//<synopsis>
//		string[] lsType( string $type )
//
//<description>
//		Return object names of the given type.
//		The end of the return array is marked with the special
//		string "<<done>>" for two reasons. There is no way to 
//		return an empty array, and the array values are not
//		cleared from call to call. This means that values from
//		a previous call will be returned on the next call.
//
//<flags>
//		string	$type	Type of object to look for
//
//<returns>
//		string[] : List of all objects of the named type, terminated with
//				   an entry with the string "<<done>>".
//
//<examples>
//
//	sphere -n sphere1;
//	sphere -n sphere2;
//	lsType("nurbsSurface");
//	// Result: sphere1Shape sphere2Shape //
//
//</doc>
//
global proc string[] lsType( string $type )
{
	int		$i, $count;
    string	$list[];
	string	$names[];

	$list = `ls -showType`;

	for ($i = 1, $count = 0; $i < size( $list ); $i += 2 )
	{
		if ($list[$i] == $type)
		{
			$names[$count] = $list[$i-1];
			$count++;
		}
	}

    $names[$count] = "<done>";

	return( $names );


}  // lsType //
