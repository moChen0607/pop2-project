// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc polyGridUV(int $gridU, int $gridV,
				   int $toCenters)
{
  string $selectedItems[];
  $selectedItems = `filterExpand -ex true -sm 35`;

  if (size($selectedItems) == 0)
	return;

  $gridU = `abs $gridU`;
  if ($gridU == 0)
	$gridU = 1;
  $gridV = `abs $gridV`;
  if ($gridV == 0)
	$gridV = 1;  

  float $uv[2], $olduv[2];
  float $igridU = 1.0 / (float)$gridU;
  float $igridV = 1.0 / (float)$gridV;

  string $uvStr;

  int $i=0;
  float $gridValue, $gridMin, $gridMax;
  while (size($selectedItems) > $i)
  {
	$uvStr = $selectedItems[$i];

	$cmd = ("polyEditUV -q -u -v " + $uvStr + ";");
	$uv = `eval $cmd`;

	$olduv = $uv;

	// Stretch to cell boundaries
	//
	$gridValue = $uv[0] / $igridU;
	$gridMin = `floor $gridValue`;
	$gridMin = $gridMin * $igridU;
	$gridMax = `ceil $gridValue`;
	$gridMax = $gridMax * $igridU;
	if (($uv[0]- $gridMin) <
		($gridMax - $uv[0]))
	  {
		$uv[0] = $gridMin;
		if ($toCenters != 0)
		  $uv[0] = $uv[0] + ($igridU * 0.5);
	  }
	else
	  {
		$uv[0] = $gridMax;
		if ($toCenters != 0)
		  $uv[0] = $uv[0] - ($igridU * 0.5);
	  }

	$gridValue = $uv[1] / $igridV;
	$gridMin = `floor $gridValue`;
	$gridMin = $gridMin * $igridV;
	$gridMax = `ceil $gridValue`;
	$gridMax = $gridMax * $igridV;

	if (($uv[1]- $gridMin) ==
		($gridMax - $uv[1]))
	  {
		$uv[1] = $gridMin;
		if ($toCenters != 0)
		  $uv[1] = $uv[1] + ($igridV * 0.5);
	  }
	else
	  {
		if (($uv[1]- $gridMin) <
			($gridMax - $uv[1]))
		  {
			$uv[1] = $gridMin;
			if ($toCenters != 0)
			  $uv[1] = $uv[1] + ($igridV * 0.5);
		  }
		else
		  {
			$uv[1] = $gridMax;
			if ($toCenters != 0)
			  $uv[1] = $uv[1] - ($igridV * 0.5);
		  }
	  }

	//print ("old uv = " + $olduv[0] + " " + $olduv[1] + "\n");
	//print ("new uv = " + $uv[0] + " " + $uv[1] + "\n");

	polyEditUV -r off -u $uv[0] -v $uv[1] $uvStr;

	$i++;
  }
}

