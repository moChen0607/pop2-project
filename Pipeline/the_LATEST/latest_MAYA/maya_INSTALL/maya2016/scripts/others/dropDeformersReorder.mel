// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  26 Feb 1996
//
//  Description:
//      This procedure is a callback for the drag/drop on deformers

global proc dropDeformersReorder( string $dragged, string $drop, string $msgs[],
								  int $x, int $y, int $type )
{
	if( $dragged == $drop ) return;
	if( size($msgs) < 1 ) return;
	if( "deformersReorder" != $msgs[0] ) return;

	global string $gHistoryWindowNode;

	string $nameDragged = "";
	string $nameDropped = "";
	string $annDragged = "";
	string $annDropped = "";
	string $object = "";
	string $tmpobj = "";
	int $future = false;
	string $tmp[];
	int $n;

	if( "staticText" == `objectTypeUI $dragged` ) {
		$annDragged = `text -q -ann $dragged`;
	}
	if( "staticText" == `objectTypeUI $drop` ) {
		$annDropped = `text -q -ann $drop`;
	}

	if( ("" != $annDragged) && ("" != $annDropped) ) {
		tokenize( $annDropped, "|", $tmp );
		$n = size($tmp);
		if( $n > 2 ) {
			$object = $tmp[0];
			for( $i=1; $i<($n-2); $i+=1 ) {
				$object = $object + "|" + $tmp[$i];
			}
			if( "future" == $tmp[$n-2] ) {
				$future = true;
			}
			$nameDropped = $tmp[$n-1];

			tokenize( $annDragged, "|", $tmp );
			$n = size($tmp);
			if( $n > 2 ) {
				$tmpobj = $tmp[0];
				for( $i=1; $i<($n-2); $i+=1 ) {
					$tmpobj = $tmpobj + "|" + $tmp[$i];
				}

				$nameDragged = $tmp[$n-1];

				if( $tmpobj != $object ) {
					warning( (uiRes("m_dropDeformersReorder.kWarningMismatchedTargets")) );
				}
			}
			else {
				error( (uiRes("m_dropDeformersReorder.kErrorBadDragName")) );
			}
		}
		else {
			error( (uiRes("m_dropDeformersReorder.kErrorBadDropName")) );
		}
	}

	if( ("" != $nameDragged) && ("" != $nameDropped) ) {
		// Force the window to rebuild itself even though the selection
		// has not changed
		$gHistoryWindowNode = "";
		
		evalEcho( "reorderDeformers \"" + $nameDropped +
				  "\" \"" + $nameDragged + "\" \"" + $object + "\"" );
		evalDeferred( "historyPopupFill \"" + $object + "\" " + $future + " 2");
	}
}

