// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc bakeCustomToolPivot()
{
	// Check 1) must have an object(s) selected
	string $objects[] = `ls -sl -transforms`;
	string $shapes[] = `ls -sl -shapes`;
	if (size($shapes) > 0) {
		string $transforms[] = `listRelatives -path -parent -type transform`;
		appendStringArray($objects, $transforms, size($transforms));
	}
	if (size($objects) == 0) {
	  	error((uiRes("m_bakeCustomToolPivot.kNoObjectsSelectedError")));
		return;
	}

	// Check 2) must be in the move/rotate/scale tool
	string $currentCtx = `currentCtx`;
	if ($currentCtx != "moveSuperContext"   && $currentCtx != "manipMoveContext" &&
		$currentCtx != "RotateSuperContext" && $currentCtx != "manipRotateContext" &&
		$currentCtx != "scaleSuperContext"  && $currentCtx != "manipScaleContext")
	{
	  	error((uiRes("m_bakeCustomToolPivot.kWrongToolError")));
		return;
	}

	// Check 3) must be in custom orientation mode
	float $customOri[];
	int $pivotModeActive = 0;
	int $customModeActive = 0;
	if ($currentCtx == "moveSuperContext"   || $currentCtx == "manipMoveContext") {
		$customOri = `manipMoveContext -q -orientAxes Move`;
		$pivotModeActive = `manipMoveContext -q -editPivotMode Move`;
		$customModeActive = (`manipMoveContext -q -mode Move` == /*custom*/6);
	} else if ($currentCtx == "RotateSuperContext" || $currentCtx == "manipRotateContext") {
		$customOri = `manipRotateContext -q -orientAxes Rotate`;
		$pivotModeActive = `manipRotateContext -q -editPivotMode Rotate`;
		$customModeActive = (`manipRotateContext -q -mode Rotate` == /*custom*/3);
	} else if ($currentCtx == "scaleSuperContext"  || $currentCtx == "manipScaleContext") {
		$customOri = `manipScaleContext -q -orientAxes Scale`;
		$pivotModeActive = `manipScaleContext -q -editPivotMode Scale`;
		$customModeActive = (`manipScaleContext -q -mode Scale` == /*custom*/6);
	}
	if (!$customModeActive) {
	  	error((uiRes("m_bakeCustomToolPivot.kWrongAxisOriModeError")));
		return;
	}

	// Get custom orientation
	$customOri[0] = rad_to_deg($customOri[0]);
	$customOri[1] = rad_to_deg($customOri[1]);
	$customOri[2] = rad_to_deg($customOri[2]);

	// Set object(s) rotation to the custom one (preserving child transform positions and geometry positions)
	rotate -a -pcp -pgp -ws -fo $customOri[0] $customOri[1] $customOri[2] $objects;

	// Exit pivot mode
	if ($pivotModeActive) ctxEditMode;

	// Set the axis orientation mode back to object
	if ($currentCtx == "moveSuperContext"   || $currentCtx == "manipMoveContext") {
		manipMoveContext -e -mode 0 Move;
	} else if ($currentCtx == "RotateSuperContext" || $currentCtx == "manipRotateContext") {
		manipRotateContext -e -mode 0 Rotate;
	} else if ($currentCtx == "scaleSuperContext"  || $currentCtx == "manipScaleContext") {
		manipScaleContext -e -mode 0 Scale;
	}
}
