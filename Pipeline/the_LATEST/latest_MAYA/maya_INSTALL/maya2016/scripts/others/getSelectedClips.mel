// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
// Returns an array of the selected instance clips in the trax editor
//

proc string []
removeSourceClips(string $clipList[])
// Strips source clips out of the supplied clip list leaving
// only the instance clips
{
	string $instanceList[];
	string $clip;
	int $numInstances = 0;
	for ($clip in $clipList)
	{
		int $instancedClip = `getAttr ($clip+".clipInstance")`;
		if ($instancedClip)
		{
			$instanceList[$numInstances] = $clip;
			$numInstances++;
		}
	}
	return $instanceList;
}

global proc string [] getSelectedClips(string $options)
{
	string $selClips[] = `ls -sl -type animClip`;
	$selClips = removeSourceClips($selClips);
	string $selAudio[];
	string $selCache[];
	if (size($selClips) == 0 && (match ("includeCache", $options) != "includeCache")) {
		if (match ("allowAudioCache", $options) != "allowAudioCache") {
			if (match ("allowAudio", $options) != "allowAudio")
				$selAudio = `ls -sl -type audio`;
			if (match ("allowCache", $options) != "allowCache")
				$selCache = `ls -sl -type cacheFile`;			
					
			// error message
			if (size($selAudio) > 0 && size($selCache) > 0)
					error( (uiRes("m_getSelectedClips.kOperationNotValid")) );
			else if (size($selAudio) > 0)
					error( (uiRes("m_getSelectedClips.kOperationNotValidAudio")) );		
			else if (size($selCache) > 0)
				error( (uiRes("m_getSelectedClips.kOperationNotValidCache")) );
		}
	}
	else{
		$selCache = `ls -sl -type cacheFile`;
		for ($clip in $selCache)
			$selClips[size($selClips)] = $clip;
	}
	return $selClips;
}
