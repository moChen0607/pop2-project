// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  20 Feb 2002
//
//  Description:
//      This is a helper script to set fluid gradient types
//		using the corresponding option box values.
//
global proc doFluidGradients( int $version, string $args[] ) 
{
	if(( $version < 1 ) || ( size( $args ) < 8 )) {
		error(uiRes("m_doAppendHairCache.kIncorrectVersion"));
		return;
	}

	if( !`exists getActiveFluidShapes` ) {
		source getFluidShape.mel;
	}
	string $fluids[] = getActiveFluidShapes();
	if( size( $fluids ) == 0 ) {
		error(uiRes("m_doDeleteFluidsPB.kNoFluidsSelected"));
		return;
	}

	int $doDensity = $args[0];
	int $densityType = $args[1];

	int $doVelocity = $args[2];
	int $velocityType = $args[3];

	int $doTemperature = $args[4];
	int $temperatureType = $args[5];

	int $doFuel = $args[6];
	int $fuelType = $args[7];
	
	if( !( $doFuel || $doTemperature || $doVelocity || $doDensity ) ) {
		error((uiRes("m_doFluidGradients.kSelectFluidProperty")));
		return;
	}

	string $densityValues, $densityEnables;
	string $velocityValues, $velocityEnables;
	string $temperatureValues, $temperatureEnables;
	string $fuelValues, $fuelEnables;

	// Have enough values for the setAttr cmd to work on 
	// all active fluids.
	//
	for( $f in $fluids ) {
		// "3" is the setAttr value for gradient.
		//
		$densityEnables += "3 ";
		$velocityEnables += "3 ";
		$temperatureEnables += "3 ";
		$fuelEnables += "3 ";

		// Have to add three since the option box values
		// are 1-based and the first gradient method ATTR
		// value is 4...
		//
		$densityValues += ($densityType + 3) + " ";
		$velocityValues += ($velocityType + 3) + " ";
		$temperatureValues += ($temperatureType + 3) + " ";
		$fuelValues += ($fuelType + 3) + " ";
	}

	if( $doDensity ) {
		evalEcho( "setAttr \".densityMethod\" " + $densityEnables );
		evalEcho( "setAttr \".densityGradient\" " + $densityValues );
	}
	if( $doVelocity ) {
		evalEcho( "setAttr \".velocityMethod\" " + $velocityEnables );
		evalEcho( "setAttr \".velocityGradient\" " + $velocityValues );
	}
	if( $doTemperature ) {
		evalEcho( "setAttr \".temperatureMethod\" " + $temperatureEnables );
		evalEcho( "setAttr \".temperatureGradient\" " + $temperatureValues );
	}
	if( $doFuel ) {
		evalEcho( "setAttr \".fuelMethod\" " + $fuelEnables );
		evalEcho( "setAttr \".fuelGradient\" " + $fuelValues );
	}
}
