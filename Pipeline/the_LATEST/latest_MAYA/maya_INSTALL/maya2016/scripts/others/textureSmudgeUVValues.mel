// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Description:
//		This script sets the values for the specified smudge
//	context within the tool property sheet. 
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//

proc string smudge_uiToMel(string $ui)
{
	string $result = $ui;

	if($ui == (uiRes("m_textureSmudgeUVProperties.kFixed")) )
	{
		$result = "fixed"; 
	}
	else if( $ui == (uiRes("m_textureSmudgeUVProperties.kSmudge")) )
	{
		$result = "smudge";
	}
	else if( $ui == (uiRes("m_textureSmudgeUVProperties.kExponential")) ){
	    $result = "exponential";
	}
	else if( $ui == (uiRes("m_textureSmudgeUVProperties.kLinear")) ){
	    $result = "linear";
	}
	else if( $ui == (uiRes("m_textureSmudgeUVProperties.kConstant")) ){
	    $result = "constant";
	}
	else{
		uiToMelMsg( "smudge_uiToMel", $ui, 1 );
	}

	return $result;
}

proc string smudge_melToUI(string $mel)
{
	string $result = $mel;

	if ( $mel == "fixed") {
	    $result = uiRes("m_textureSmudgeUVProperties.kFixed");
	}
	else if( $mel == "smudge"){
	    $result = uiRes("m_textureSmudgeUVProperties.kSmudge");
	}
	else if( $mel == "exponential"){
	    $result = uiRes("m_textureSmudgeUVProperties.kExponential");
	}
	else if( $mel == "linear"){
	    $result = uiRes("m_textureSmudgeUVProperties.kLinear");
	}
	else if( $mel == "constant"){
	    $result = uiRes("m_textureSmudgeUVProperties.kConstant");
	}
	else{
		uiToMelMsg( "smudge_melToUI", $mel, 1 );
	}

	return $result;
}
global proc texSmudgeUVEffectTypeCB( string $parent, string $context )
{
	setParent $parent;
	string $et = `optionMenuGrp -query -value textureSmudgeEffectType`;
	string $et1 = `smudge_uiToMel($et)`;
	
	texSmudgeUVContext -edit -effectType $et1 $context;

	if ( $et == (uiRes("m_textureSmudgeUVProperties.kSmudge")) ) { 
		floatSliderGrp -edit -en true textureSmudgePressure; 
	} else { 
		floatSliderGrp -edit -en false textureSmudgePressure; 
	}
}

global proc texSmudgeUVFunctionTypeCB( string $parent, string $context )
{
	setParent $parent; 
	string $ft = `optionMenuGrp -query -value textureSmudgeFunctionType`;
	string $ft1 = `smudge_uiToMel($ft)`;
	texSmudgeUVContext -edit -functionType $ft1 $context;
}

global proc texSmudgeUVRadiusCB( string $parent, string $context )
{
	setParent $parent;
	float $ss = `floatSliderGrp -query -value textureSmudgeSmudgeSize`;
	texSmudgeUVContext -edit -radius $ss $context;
}

global proc texSmudgeUVPressureCB( string $parent, string $context )
{
	setParent $parent;
	float $pres = `floatSliderGrp -query -value textureSmudgePressure`;
	texSmudgeUVContext -edit -pressure $pres $context;
}

global proc texSmudgeUVMiddleCB( string $parent, string $context )
{
	setParent $parent; 
	int $mm = `checkBoxGrp -query -value1 textureSmudgeMiddleButton`;
	texSmudgeUVContext -edit -smudgeIsMiddle $mm $context; 
}

global proc textureSmudgeUVValues( string $context ) 
{
	string $parent = `toolPropertyWindow -query -location`;
	setParent $parent;
	
	string $type = `texSmudgeUVContext -query -effectType $context`; 
	string $ftype = `texSmudgeUVContext -query -functionType $context`; 
	float $ss = `texSmudgeUVContext -query -radius $context`;
	float $pp = `texSmudgeUVContext -query -pressure $context`;
	int $mm = `texSmudgeUVContext -query -smudgeIsMiddle $context`;
	
	$type = `smudge_melToUI($type)`;
	$ftype = `smudge_melToUI($ftype)`;

	optionMenuGrp -edit 
		-changeCommand ("texSmudgeUVEffectTypeCB " + $parent + " " + $context)
		-value $type textureSmudgeEffectType; 

	optionMenuGrp -edit 
		-changeCommand ("texSmudgeUVFunctionTypeCB " + $parent + " " + $context)
		-value $ftype textureSmudgeFunctionType; 
	
	floatSliderGrp -edit 
		-changeCommand ("texSmudgeUVRadiusCB " + $parent + " " + $context)
		-value $ss textureSmudgeSmudgeSize;

	if ( $type == (uiRes("m_textureSmudgeUVProperties.kSmudge")) ) { 
		floatSliderGrp -edit 
			-changeCommand ("texSmudgeUVPressureCB " + $parent + " " + $context)
			-en true -value $pp textureSmudgePressure; 
	} else { 
		floatSliderGrp -edit 
			-changeCommand ("texSmudgeUVPressureCB " + $parent + " " + $context)
			-en false -value $pp textureSmudgePressure; 
	}

	checkBoxGrp -edit 
		-changeCommand ("texSmudgeUVMiddleCB " + $parent + " " + $context)
		-value1 $mm textureSmudgeMiddleButton ;

	string $helpTag = "textureSmudgeUVTool";
	toolPropertySetCommon $context "textureEditorSmudgeUV.png" $helpTag; 
	toolPropertySelect "textureSmudgeUV";
}
