// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  April 12 1996
//
//  Description:
//      These procs helps to create the controls for Sketch,
//      wrinkle with CVs and wrinkle with EPs tools.
//      property sheet.  See also wrinkleValues.mel for procs that set 
//      the state of the property sheet.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//


global proc wrinkleWiresCreatedMsg()
{
	int $wc=0;
	int $isUniform = `radioButtonGrp -q -sl wrinkleTypeRadio1`;
	if ( $isUniform==1 ) {
		$wc=`intSliderGrp -q -v wrcntSlider`;
	}
	else if  ( $isUniform==2 ) {
		$wc =`intSliderGrp -q -v wrcntSlider`;
		int $bc= `intSliderGrp -q -v branchSlider`;
		int $bd= `intSliderGrp -q -v depthSlider`;
		int $res= `pow $bc $bd`;
		$wc*=$res;
	}

	string $msg = (uiRes("m_wrinkleProperties.kCurrentSettings"));
	string $str = `format -s $wc $msg`;
	text -e -label $str -enable 1 wrinkleMsg;
}


proc wrinkleSetCallbacks (string $parent) {
//
//  Description:
//		Set the callbacks for all of the controls in the dialog.
//		Modifying the context will force wrinkleValues() to be called
//		to update the state of the property sheet.
//
//
	setParent $parent;

	radioButtonGrp -e 
		-on1 "wrinkleContext -e -st lines `currentCtx`;intSliderGrp -e -enable 0 branchSlider;intSliderGrp -e -enable 0 depthSlider; wrinkleWiresCreatedMsg"
		-on2 "wrinkleContext -e -st radial `currentCtx`;intSliderGrp -e -enable 1 branchSlider;intSliderGrp -e -enable 1 depthSlider;wrinkleWiresCreatedMsg"
		-on3 "wrinkleContext -e -st custom `currentCtx`;intSliderGrp -e -enable 0 branchSlider;intSliderGrp -e -enable 0 depthSlider;"
		wrinkleTypeRadio1;

	intSliderGrp -e
		-cc "wrinkleContext -e -wc #1 `currentCtx`;wrinkleWiresCreatedMsg" wrcntSlider;
	floatSliderGrp -e
		-cc "wrinkleContext -e -th #1 `currentCtx`" thickSlider;
	floatSliderGrp -e
		-cc "wrinkleContext -e -rnd #1 `currentCtx`" randomSlider;
	floatSliderGrp -e
		-cc "wrinkleContext -e -wi #1 `currentCtx`" wrinkleSlider;
	intSliderGrp -e
		-cc "wrinkleContext -e -brc #1 `currentCtx`;wrinkleWiresCreatedMsg" branchSlider;
	intSliderGrp -e
		-cc "wrinkleContext -e -bd #1 `currentCtx`;wrinkleWiresCreatedMsg" depthSlider;
}


global proc wrinkleProperties ( ) {
//
//  Description:
//      This procedure builds the property sheet and assigns callbacks to
//      its controls.  The state of the controls are set in wrinkleValues().
//
//

	setUITemplate -pushTemplate OptionsTemplate;

	string $parent = `toolPropertyWindow -q -location`;
	setParent $parent;

		columnLayout -adj true wrinkle;
			frameLayout  -collapsable true -collapse false
				-label (uiRes("m_wrinkleProperties.kWrinkleSettings"))   knotFrame;
				columnLayout  styleLayout;
					$parent = `toolPropertyWindow -q -location`;
					radioButtonGrp -nrb 3 
						-label (uiRes("m_wrinkleProperties.kType")) 
						-label1 (uiRes("m_wrinkleProperties.kTangential"))  
						-label2 (uiRes("m_wrinkleProperties.kRadial")) 
						-label3 (uiRes("m_wrinkleProperties.kCustom")) 
						wrinkleTypeRadio1;
					intSliderGrp -field true  -max 20 
						-label (uiRes("m_wrinkleProperties.kAmount")) 
						wrcntSlider;
					floatSliderGrp -field true -max 2.0 
						-label (uiRes("m_wrinkleProperties.kThickness")) 
						thickSlider;
					floatSliderGrp -field true 
						-label (uiRes("m_wrinkleProperties.kRandomness")) 
						randomSlider;
					floatSliderGrp -field true 
						-label (uiRes("m_wrinkleProperties.kIntensity")) 
						wrinkleSlider;
						intSliderGrp -field true -max 10 
						-label (uiRes("m_wrinkleProperties.kRadialBranchAmt")) 
						branchSlider;
					intSliderGrp -field true -max 4 
						-label (uiRes("m_wrinkleProperties.kRadialBranchDepth")) 
						depthSlider;
					separator -h 20 ;
					text wrinkleMsg;
					wrinkleSetCallbacks $parent;
				setParent ..;
			setParent ..;

		setParent ..;

	setUITemplate -popTemplate;
}

