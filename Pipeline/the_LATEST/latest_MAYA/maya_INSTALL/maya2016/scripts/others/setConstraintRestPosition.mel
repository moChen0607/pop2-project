// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  Dec, 2002
//
//<doc>
//<name setConstraintRestPosition>
//
//<synopsis>
//		setConstraintRestPosition
//
//<returns>
//		None
//
//<description>
//      Script for setting the rest position of a constrained object.
//
//	    The rest position is where a constrained object goes to when
//      the constraint is disabled (i.e. all weights equal zero).
//
//      Say you have a cup constrained to a skeleton. At frame 10, you
//      want the skeleton to set the object on the table, where it will remain.
//      Go to frame 10, select the cup and call this method to set the
//      rest position.
//
//      The constraint can now be disabled by setting its weight to 0,
//      and the cup will stay at its rest position.
//<examples>
//setConstraintRestPosition;
//</doc>
/////////////////////////////////////////////////////////////////////////

global proc setConstraintRestPosition()
{
	string $sels[] = `ls -sl`;

	int $counter = 0;

	string $constraintTypes[] = { "pointConstraint", "aimConstraint", "orientConstraint", "scaleConstraint", "tangentConstraint", "normalConstraint", "parentConstraint" };
	for ($constrainedObj in $sels) {
		// Find the constraint
		//
		for ($constraintType in $constraintTypes) {
			string $constrainAttr = ".rotate";
			string $restAttr = ".restRotate";

			string $queryCmd = ($constraintType + " -q "+$constrainedObj);
			string $constraint = `eval $queryCmd`;
			if ($constraintType == "pointConstraint") {
				$constrainAttr = ".translate";
				$restAttr = ".restTranslate";
			} else if ($constraintType == "scaleConstraint") {
				$constrainAttr = ".scale";
				$restAttr = ".restScale";
			}
			
			if (size($constraint)) {
				if ($constraintType != "parentConstraint") {
					float $currVal[] = `getAttr ($constrainedObj+$constrainAttr)`;
					string $cmd = ("setAttr " + $constraint+$restAttr + " ");
					$cmd += ($currVal[0] + " " + $currVal[1] + " " + $currVal[2]);
					evalEcho $cmd;
					setAttr ($constrainedObj+$constrainAttr) $currVal[0] $currVal[1] $currVal[2];
					$counter++;
				} else {
					float $currPos[] = `getAttr ($constrainedObj+".translate")`;
					float $currRot[] = `getAttr ($constrainedObj+".rotate")`;
					string $cmd = ("setAttr "+$constraint+".restTranslate ");
					$cmd += ($currPos[0] + " " + $currPos[1] + " " + $currPos[2]);
					evalEcho $cmd;			
					string $cmd = ("setAttr "+$constraint+".restRotate ");
					$cmd += ($currRot[0] + " " + $currRot[1] + " " + $currRot[2]);
					evalEcho $cmd;
					setAttr ($constrainedObj+".translate") $currPos[0] $currPos[1] $currPos[2];
					setAttr ($constrainedObj+".rotate") $currRot[0] $currRot[1] $currRot[2];
					$counter++;
				}
			}
		}
	}
	if (0 == $counter) {
		error( (uiRes("m_setConstraintRestPosition.kAConstrainedObject")) );
	}
}
