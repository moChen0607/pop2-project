// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Description:
//      Functions called from "Subdiv to NURBS conversion".
//

//
//  Procedure Name:
//      doSubdivToNurbs
//
//  Description:
//		This is the actual function that gets called from "Subdiv to NURBS" 
//      option box.
//
//  Input Arguments:
//	  None.
//
//  Return Value:
//      None.
//
//  Note:
//
global proc int doSubdivToNurbs( string $args[] )
{
	int $status = 0;

	if( size($args) < 1 ) {
		error (uiRes("m_doSubdivToNurbs.kTooFewArgs"));
		return $status;
	}

	global int $gSelectSubdivSurface;

	// convert all subd's
	string $list[] = `filterExpand -ex 1 -fp 1 -sm $gSelectSubdivSurface`; 
	int $len = size($list);

	if ($len == 0) {
		error (uiRes("m_doSubdivToNurbs.kInvalidSelection"));
		return $status;
	}

	int $globalHist = $args[0];
	int $origObjectAction = $args[1];
	int $outputType = $args[2];

	string $cmd = "subdToNurbs";

	switch ($origObjectAction) {
	  case 1:
		// replace original object, forces history off, but delete
		// will take care of that...
		$cmd = $cmd + " -ch off -aut on ";
		break;

	  case 2:
		// hide original object, forces history on
		$cmd = $cmd + " -ch on -aut on ";
		if( !$globalHist ) {
			warning (uiRes("m_doSubdivToNurbs.kForceConstructionHist"));
		}
		break;

	  case 3:
	  default:
		// show original object, respects global construction history
		$cmd = $cmd + " -ch " + $globalHist + " -aut on";
		break;
	}

	// output type
	$cmd = $cmd + " -ot " + $outputType + " ";

	//  Convert each subdiv, one at a time so we can catch errors
	//
  	string $nurbsRes[];
	string $selList = "";

	for($i = 0; $i < $len; $i++) {
		int $vis = `getAttr  ($list[$i] + ".visibility")`;
		if (!$vis) continue;
		$retVal = catch ($nurbsRes = evalEcho ($cmd + $list[$i]));

		// if there's no error, do post work and add results 
		if ($retVal != 1){
			switch ($origObjectAction){
			  case 1:
				evalEcho ("delete "  + $list[$i]);
				break;
			  case 2:
				evalEcho ("hide " + $list[$i]);	  
				break;
			  default:
				break;
			}

			for ($s in $nurbsRes) {
				$selList += ($s + " ");
			}
		}
	}

	if (size($selList) > 0){
  		$selList += ";";
		eval ("select -r " + $selList);
	}

	return $status;
}


