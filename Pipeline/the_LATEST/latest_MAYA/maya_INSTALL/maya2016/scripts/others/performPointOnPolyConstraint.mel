// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//  Description:
//		This script provides an option box dialog for the pointOnPolyConstraint command.
//
//	Input Arguments:
//		boolean showOptionBox	true - show the option box dialog
//								false - just execute the command
//

//
//  Procedure Name:
//      setOptionVars
//
//  Description:
//		Initialize the option values.
//
//  Input Arguments:
//		Whether to set the options to default values.
//
//  Return Value:
//      None.
//
proc setOptionVars(int $forceFactorySettings)
{
	//	weight
	//
	if ($forceFactorySettings || !`optionVar -exists pointOnPolyConstraintWeight`) {
		optionVar -floatValue pointOnPolyConstraintWeight 1.0;
	}

	// constraint axes
	//
	if ($forceFactorySettings ||
		!`optionVar -exists  pointOnPolyConstraintAxisX`) {
		optionVar -intValue pointOnPolyConstraintAxisX true;
	}
	if ($forceFactorySettings ||
		!`optionVar -exists  pointOnPolyConstraintAxisY`) {
		optionVar -intValue pointOnPolyConstraintAxisY true;
	}
	if ($forceFactorySettings ||
		!`optionVar -exists  pointOnPolyConstraintAxisZ`) {
		optionVar -intValue pointOnPolyConstraintAxisZ true;
	}

	// AnimLayer
	if ($forceFactorySettings ||
		!`optionVar -exists  constraintAnimLayer`) {
		optionVar -stringValue constraintAnimLayer	""; 
	}	
	
	if ($forceFactorySettings ||
		!`optionVar -exists  pointOnPolyConstraintAnimLayerToOverride`) {
		optionVar -intValue pointOnPolyConstraintAnimLayerToOverride true; 
	}

	// maintain existing offset
	//
	if ($forceFactorySettings || 
		!`optionVar -exists pointOnPolyConstraintMaintainOffset`) {
		optionVar -intValue pointOnPolyConstraintMaintainOffset 0;
	}

}

//
//  Procedure Name:
//      pointOnPolyConstraintSetup
//
//  Description:
//		Update the state of the option box UI to reflect the option values.
//
//  Input Arguments:
//      parent               - Top level parent layout of the option box UI.
//                             Required so that UI object names can be 
//                             successfully resolved.
//
//		forceFactorySettings - Whether the option values should be set to
//                             default values.
//
//  Return Value:
//      None.
//
global proc pointOnPolyConstraintSetup(string $parent, int $forceFactorySettings)
{
	//	Retrieve the option settings
	//
	setOptionVars($forceFactorySettings);

	setParent $parent;

	//	Query the optionVar's and set the values into the controls.

	//	weight
	//
	floatSliderGrp -edit 
		-value `optionVar -query pointOnPolyConstraintWeight`
		pointOnPolyConstraintWeight;

	if (`optionVar -query pointOnPolyConstraintMaintainOffset`) {
		checkBoxGrp -edit -value1 1 pointOnPolyConstraintMaintainWidget;
		floatFieldGrp -edit -enable 0 offsetField;
	} else {
		checkBoxGrp -edit -value1 0 pointOnPolyConstraintMaintainWidget;
		floatFieldGrp -edit -enable 1 offsetField;
	}

	// AnimLayer
	string $animLayer = `optionVar -query constraintAnimLayer`;
	
	optionMenuGrp -edit -select 1 pointOnPolyConstraintAnimLayerWidget;

	if( size( $animLayer ) > 0 )
	{
 		if( size( `ls $animLayer` ) > 0 )
		{
			if( `objectType $animLayer` == "animLayer" )
			{
				optionMenuGrp -edit -value $animLayer pointOnPolyConstraintAnimLayerWidget;
			}
		}		
	}
	
	int $overrideAnimLayer = `optionVar -query pointOnPolyConstraintAnimLayerToOverride`;
	checkBoxGrp -edit -value1 $overrideAnimLayer pointOnPolyConstraintOverrideAnimLayer;

	//  Axis values
	//
	int $axisX = `optionVar -query pointOnPolyConstraintAxisX`;
	int $axisY = `optionVar -query pointOnPolyConstraintAxisY`;
	int $axisZ = `optionVar -query pointOnPolyConstraintAxisZ`;
	// if all axes are on, select the all box and dim the individual axes
	if ($axisX && $axisY && $axisZ) {
		checkBoxGrp -edit -value1 true axesAll;
		checkBoxGrp -edit -value1 false -value2 false -value3 false axesXYZ;
	}
	// otherwise just select those boxes corresponding to 'on' axes
	else {
		checkBoxGrp -edit -value1 false axesAll;
		checkBoxGrp -edit -value1 $axisX -value2 $axisY -value3 $axisZ axesXYZ; 	}
}

//
//  Procedure Name:
//      pointOnPolyConstraintCallback
//
//  Description:
//		Update the option values with the current state of the option box UI.
//
//  Input Arguments:
//      parent - Top level parent layout of the option box UI.  Required so
//               that UI object names can be successfully resolved.
//
//		doIt   - Whether the command should execute.
//
//  Return Value:
//      None.
//
global proc pointOnPolyConstraintCallback(string $parent, int $doIt)
{
	setParent $parent;

	//	Set the optionVar's from the control values, and then
	//	perform the command.

	//	weight
	//
	optionVar -floatValue pointOnPolyConstraintWeight
		`floatSliderGrp -query -value pointOnPolyConstraintWeight`;

	// maintain offset
	//
	optionVar -intValue pointOnPolyConstraintMaintainOffset
		`checkBoxGrp  -query -value1 pointOnPolyConstraintMaintainWidget`;

	//	Offset values
	//
	optionVar -floatValue pointOnPolyConstraintOffsetX `floatFieldGrp -query -v1 offsetField`;
	optionVar -floatValue pointOnPolyConstraintOffsetY `floatFieldGrp -query -v2 offsetField`;
	optionVar -floatValue pointOnPolyConstraintOffsetZ `floatFieldGrp -query -v3 offsetField`;

	// AnimLayer
	if( `optionMenuGrp -query -select pointOnPolyConstraintAnimLayerWidget` > 1 ) 
	{ 
		optionVar -stringValue constraintAnimLayer
			`optionMenuGrp -query -value pointOnPolyConstraintAnimLayerWidget`;
	}
	else
	{
		// First Item Selected, None
		// Save an empty fied in the fconfig file
		optionVar -stringValue constraintAnimLayer	"";
		
	}

	optionVar -intValue pointOnPolyConstraintAnimLayerToOverride
		`checkBoxGrp -q -value1 pointOnPolyConstraintOverrideAnimLayer`;

	// Axis values
	//

	// Either the 'All' box is checked (and so all axes are on) ...
	if ( `checkBoxGrp -query -value1 axesAll` ) {
		optionVar -intValue pointOnPolyConstraintAxisX true;
		optionVar -intValue pointOnPolyConstraintAxisY true;
		optionVar -intValue pointOnPolyConstraintAxisZ true;
	} else {
		// ... Or only those axes specifically selected are on
		optionVar -intValue pointOnPolyConstraintAxisX
			`checkBoxGrp -query -value1 axesXYZ`;
		optionVar -intValue pointOnPolyConstraintAxisY
			`checkBoxGrp -query -value2 axesXYZ`;
		optionVar -intValue pointOnPolyConstraintAxisZ
			`checkBoxGrp -query -value3 axesXYZ`;
	}

	if ($doIt) {
		performPointOnPolyConstraint 0; 
		addToRecentCommandQueue "performPointOnPolyConstraint 0" "PointOnPolyConstraint";
	}
}

//
//  Procedure Name:
//      pointOnPolyConstraintOptions
//
//  Description:
//		Construct the option box UI.  Involves accessing the standard option
//		box and customizing the UI accordingly.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
proc pointOnPolyConstraintOptions()
{
	//	Name of the command for this option box.
	//
	string $commandName = "pointOnPolyConstraint";

	//	Build the option box actions.
	//
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	//	Get the option box.
	//
	string $layout = getOptionBox();
	setParent $layout;
	
	//	Pass the command name to the option box.
	//
	setOptionBoxCommandName($commandName);
	
	//	Activate the default UI template.
	//
	setUITemplate -pushTemplate DefaultTemplate;

	//	Turn on the wait cursor.
	//
	waitCursor -state 1;

	tabLayout -scr true -tv false;
	string $parent = `columnLayout -adjustableColumn 1`;

	checkBoxGrp
		-label (uiRes("m_performPointOnPolyConstraint.kMaintainOffset")) 
		-label1 " "
		-annotation (uiRes("m_performPointOnPolyConstraint.kMaintainOffsetAnnot")) 
		-numberOfCheckBoxes 1
		-cc ("floatFieldGrp -edit -enable (! #1) offsetField;")
		pointOnPolyConstraintMaintainWidget;

	floatFieldGrp -label (uiRes("m_performPointOnPolyConstraint.kOffset")) 
		-numberOfFields 3
		offsetField;

	// AnimLayer field
	string $lLayers[] = `ls -type animLayer`;
	optionMenuGrp -label (uiRes("m_performPointOnPolyConstraint.kAnimLayer")) pointOnPolyConstraintAnimLayerWidget;

	menuItem -label (uiRes("m_performPointOnPolyConstraint.kNone"));

	for ($layer in $lLayers) 
	{
		menuItem -label $layer;
	}

	checkBoxGrp
		-label (uiRes("m_performPointOnPolyConstraint.kPointOnPolyConstraintAnimLayerToOverride"))
		-annotation (uiRes("m_performPointOnPolyConstraint.kPointOnPolyConstraintAnimLayerToOverrideAnnot")) 
		-numberOfCheckBoxes 1
		pointOnPolyConstraintOverrideAnimLayer;
	separator;

	//	  Constraint Axes Selection Boxes
	//

	// The 'axesAll' checkBoxGrp and the 'axesXYZ' checkBoxGrp are linked
	// such that when 'axesAll' is selected, all the 'axesXYZ' boxes are
	// unselected. And when any 'axesXYZ' box is selected the 'axesAll'
	// box is deselected.
	checkBoxGrp -numberOfCheckBoxes 1 -label (uiRes("m_performPointOnPolyConstraint.kConstraintAxes")) 
		-label1 (uiRes("m_performPointOnPolyConstraint.kAll")) 
		-onCommand ("checkBoxGrp -edit " +
					"-value1 false " +
					"-value2 false " +
					"-value3 false " +
					"axesXYZ")
		axesAll;
		
	checkBoxGrp -numberOfCheckBoxes 3
		-label1 (uiRes("m_performPointOnPolyConstraint.kX")) 
		-label2 (uiRes("m_performPointOnPolyConstraint.kY")) 
		-label3 (uiRes("m_performPointOnPolyConstraint.kZ")) 
		-onCommand ("checkBoxGrp -edit " +
					"-value1 false " +
					"axesAll;")
		axesXYZ;

	separator;

	floatSliderGrp -label (uiRes("m_performPointOnPolyConstraint.kWeight")) 
		-field true -min 0.0 -max 1.0 
		pointOnPolyConstraintWeight;

	//	Turn off the wait cursor.
	//
	waitCursor -state 0;
	
	//	Deactivate the default UI template.
	//
	setUITemplate -popTemplate;

	//	'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-label (uiRes("m_performPointOnPolyConstraint.kAddButton")) 
		-command ($callback + " " + $parent + " " + 1)
		$applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;

	//	Set the option box title.
	//
	setOptionBoxTitle (uiRes("m_performPointOnPolyConstraint.kPointOnPolyConstraintOptions"));

	//	Customize the 'Help' menu item text.
	//
	setOptionBoxHelpTag( "PointOnPoly" );

	//	Set the current values of the option box.
	//
	eval (($setup + " " + $parent + " " + 0));

	//	Show the option box.
	//
	showOptionBox();
}

//
//  Procedure Name:
//      pointOnPolyConstraintHelp
//
//  Description:
//      Return a short description about this command.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      string.
//
proc string pointOnPolyConstraintHelp()
{
	// ******** Example
	// "  Command: Extrude - create a surface using extrusion.\n" +
	// "Selection: curves and isoparms."

	return 
	"  Command: pointOnPolyConstraint - <what it does.>\n" +
	"Selection: <A list of things that can be selected>";
}

//
//  Procedure Name:
//      assembleCmd
//
//  Description:
//      Construct the command that will apply the option box values.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
proc string assembleCmd()
{
	string $cmd;

	setOptionVars(false);

	// AnimLayer
	string $animLayer = `optionVar -query constraintAnimLayer`;
	int $overrideMode = `optionVar -query pointOnPolyConstraintAnimLayerToOverride`;

	int   $maintainOffset = `optionVar -query pointOnPolyConstraintMaintainOffset`;
	float $tx           = `optionVar -query pointOnPolyConstraintOffsetX`;
	float $ty           = `optionVar -query pointOnPolyConstraintOffsetY`;
	float $tz           = `optionVar -query pointOnPolyConstraintOffsetZ`;

	// Axis values
	//
	// The axis values are inverted so that they represent
	// which axes to *skip* as opposed to which axes are on.
	int $axisX = !`optionVar -query pointOnPolyConstraintAxisX`;
	int $axisY = !`optionVar -query pointOnPolyConstraintAxisY`;
	int $axisZ = !`optionVar -query pointOnPolyConstraintAxisZ`;

	float $weight = `optionVar -query pointOnPolyConstraintWeight`;	

	$cmd =	"doCreatePointOnPolyConstraintArgList 2 { " +
		"  \"" + $axisX + "\"" +
		" ,\"" + $axisY + "\"" +
		" ,\"" + $axisZ + "\"" +
		" ,\"" + $weight + "\"" +
		" ,\"" + $animLayer + "\"" +
		" ,\"" + $overrideMode + "\"" +
		" ,\"" + $maintainOffset + "\"" +
		" ,\"" + $tx + "\"" +
		" ,\"" + $ty + "\"" +
		" ,\"" + $tz + "\"" +
		" };";

	return $cmd;
}

//
//  Procedure Name:
//      performPointOnPolyConstraint
//
//  Description:
//		Perform the pointOnPolyConstraint command using the corresponding 
//		option values.  This procedure will also show the option box
//		window if necessary as well as construct the command string
//		that will invoke the pointOnPolyConstraint command with the current
//		option box values.
//
//  Input Arguments:
//      0 - Execute the command.
//      1 - Show the option box dialog.
//      2 - Return the command.
//
//  Return Value:
//      None.
//
global proc string performPointOnPolyConstraint(int $action)
{
	string $cmd = "";

	switch ($action) {

		//	Execute the command.
		//
		case 0:
			//	Retrieve the option settings
			//
			setOptionVars(false);

			//	Get the command.
			//
			$cmd = `assembleCmd`;

			//	Execute the command with the option settings.
			//
			evalEcho($cmd);

			break;

		//	Show the option box.
		//
		case 1:
			pointOnPolyConstraintOptions;
			break;

		//	Return the command string.
		//
		case 2:
			//	Retrieve the option settings.
			//
			setOptionVars (false);

			//	Get the command.
			//
			$cmd = `assembleCmd`;
			break;
	}
	return $cmd;
}

