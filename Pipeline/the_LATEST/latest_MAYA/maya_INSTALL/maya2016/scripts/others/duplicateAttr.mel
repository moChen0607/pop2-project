// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


//
//  Procedure Name:
//      duplicateAttrMain
//
//  Description:
//      This procedure duplicates attrs from the source node to the destination
//		node.
//
//  Input Arguments:
//      string $objList[]: list of objects - source first, destination second
//		string $attrList[]: list of attrs to copy
//
//  Return Value:
//      None.
//
global proc duplicateAttrMain( string $objList[], string $attrList[] ){
	string $objSource = $objList[0];
	string $objDest = $objList[1];
	
	for ($attr in $attrList){
		
		//get attr setting
		float $default = `addAttr -q -defaultValue ($objSource + "." + $attr)`;
		float $min = `addAttr -q -minValue ($objSource + "." + $attr)`;
		float $max = `addAttr -q -maxValue ($objSource + "." + $attr)`;
		string $nice = `addAttr -q -niceName ($objSource + "." + $attr)`;

		//create new attr on destination
		addAttr -longName $attr
			-niceName $nice
			-defaultValue $default
			-minValue $min
			-maxValue $max
			$objDest;
		
		//make it keyable
		//*** should query original attr to see if it is keyable and set accordingly
		setAttr -k 1 ($objDest + "." + $attr);
	}
}


//  Procedure Name:
//      copyAttrValues
//
//  Description:
//      This procedure gets the selected channels from the channelBox. It then 
//		sends those lists to duplicateAttrMain for copying the selected
//		attributes between nodes.
//
//  Input Arguments:
//      None
//
//  Return Value:
//      None.
//
global proc duplicateAttr(){
	// process selected objects
	string $objList[] = `channelBox -q -mainObjectList mainChannelBox`;
	string $attrList[] = `channelBox -q -selectedMainAttributes mainChannelBox`;
	duplicateAttrMain $objList $attrList; 
	
	// now process history nodes
	$attrList = `channelBox -q -selectedHistoryAttributes mainChannelBox`;
	$objList = `channelBox -q -historyObjectList mainChannelBox`;
	duplicateAttrMain $objList $attrList; 
}


