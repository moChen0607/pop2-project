// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
// Creation Date:  14 January 1999
//
//
//  Procedure Name:
//      intersectCurveToolScript
//
//  Description:
//	create wrapper around the intersectCurve command
//
//  Input Arguments:
//		0 ==> do the command.
//		1 ==> show the action option box
//		2 ==> return the command
//		3 ==> show tool option box
//		4 ==> enter the tool
//
//  Return Value:
//      None.
//

global proc intersectCurveToolSetup( int $forceFactorySettings, string $goToTool )
{
	if( $forceFactorySettings || !`optionVar -ex intersectCurveEuc` ) {
		optionVar -iv intersectCurveEuc 1;
	}
	if( $forceFactorySettings || !`optionVar -ex intersectCurveLac` ) {
		optionVar -iv intersectCurveLac 0;
	}
	if( "" != $goToTool ) {
		scriptCtx -e -euc `optionVar -q intersectCurveEuc` $goToTool;
		scriptCtx -e -lac `optionVar -q intersectCurveLac` $goToTool;
	}
}

global proc intersectCurveValues ( string $toolName ) 
{
	performIntersectCrv 3 $toolName;
	scriptCtxCommonValues( $toolName );
}

global proc intersectCurveProperties()
{
	scriptCtxCommonProperties;
}

proc createIntersectCurveContext( string $tool )
{
	if( ! `scriptCtx -exists $tool` ) {
		intersectCurveToolSetup( 0, "" );
		int $n = 0;
		if( `optionVar -q intersectCurveLac` ) {
			$n = 2;
		}
		scriptCtx -i1 "intersectCurves.png"
			-title (uiRes("m_intersectCurveToolScript.kIntersectCurvesTool"))
			-bcn "intersectCurve"

			-exitUponCompletion `optionVar -q intersectCurveEuc`
			-totalSelectionSets 1
			-expandSelectionList true
			-fcs ("intersectCurveToolScript 0")

			-setNoSelectionPrompt (uiRes("m_intersectCurveToolScript.kSelectTwoCurves"))
			-setSelectionPrompt (uiRes("m_intersectCurveToolScript.kSelectSecondCurve"))

			-setAutoToggleSelection true
			-setAutoComplete `optionVar -q intersectCurveLac`
			-showManipulators true
			-setSelectionCount $n

			-nurbsCurve true
		$tool;
	}
}

global proc string intersectCurveToolScript( int $setToTool )
//
//	Description :
//		0 ==> do the command.
//		1 ==> show the action option box
//		2 ==> return the command
//		3 ==> show tool/action option box
//		4 ==> enter the tool/do the command
{
	string $tool = "";
	if( $setToTool > 2 ) {
		if( !`optionVar -q modelWithToolIntersectCurve` ) {
			$setToTool = 4 - $setToTool;
		}
		else {
			$tool = "intersectCurveContext";
			createIntersectCurveContext $tool;
		}
	}
	return scriptToolScript( "performIntersectCrv", $setToTool, $tool );
}
