// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  May 30, 2005
//
//	Procedure Name:
//		doTogglePinFBIKEffectors
//
//	Description:
//		First determines what the pinning state is for the majority
//		of the selected effectors, then sets all of them to the
//		opposite of that state.
//
//	Input Arguments:
//	$version: The version of this option box.  Used to know how to 
//	interpret the $args array.
//	
//	$args
//	Version 1
//	[0]		$pinState 0/1/2 :       if 0, pins translation,
//                                  if 1, pins rotation.
//                                  if 2, pins both translation and rotation 
//
//	Return Value:
//		none
//

global proc doTogglePinFBIKEffectors( string $version, string $args[] )
{
	int		$versionNum				= $version;    
	int		$pinWhich       		= $args[0];	
		        	   
	int $effectorsPinned = 0; 
	int $effectorsTranslatePinned = 0; 
	int $effectorsRotatePinned = 0; 
	int $totalEffectorsCount = 0; 

	string $selItems[];    
    $selItems = `ls -sl`;            

	// Determine how many effectors and their current overall pinned/unpinned state

	source loadFullBodyIKFunctions.mel;

    for ($item in $selItems)
	{
        if (`objectType $item` == "hikEffector")
        {
			$totalEffectorsCount++;
			if (getEffectorTranslatePinState($item))
			{
				$effectorsTranslatePinned++;
			}
			if (getEffectorRotatePinState($item))
			{
				$effectorsRotatePinned++;
			}
		}	
	}

	//print ("Translate pinned " + $effectorsTranslatePinned + "\n");
	//print ("Rotate pinned " + $effectorsRotatePinned + "\n");
	//print ("Total effector count " + $totalEffectorsCount + "\n");

	int $effectorsTranslateUnpinned = $totalEffectorsCount - $effectorsTranslatePinned; 
	int $effectorsRotateUnpinned    = $totalEffectorsCount - $effectorsRotatePinned; 
	
	// Toggle pinning to the opposite of the current majority
	int $pinAllTranslates = ($effectorsTranslatePinned < $effectorsTranslateUnpinned);
	int $pinAllRotates = ($effectorsRotatePinned < $effectorsRotateUnpinned);

	// Unpin if everything is currently pinned, otherwise pin everything
	int $pinBoth = !(($effectorsTranslateUnpinned == 0) && ($effectorsRotateUnpinned == 0));

    for ($item in $selItems)
	{
        if (`objectType $item` == "hikEffector")
        {
			switch ($pinWhich)
			{
				case 0:
					setEffectorTranslatePinState($item, $pinAllTranslates);
					break;
			
				case 1:
					setEffectorRotatePinState($item, $pinAllRotates);
					break;
			
				case 2:
					setEffectorTranslatePinState($item, $pinBoth);
					setEffectorRotatePinState($item, $pinBoth);
					break;
			
				default:
				    string $printMsg = (uiRes("m_doTogglePinFBIKEffectors.kUnexpectedValue"));
				    $printMsg = `format -s $pinWhich $printMsg`;
					print $printMsg;
					break;
			}
		}	
	}
}
