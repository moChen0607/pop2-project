// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

// groupLocatorReference.mel
//
// Callback to be used when loading a reference
// Assumes top level nodes in reference are selected when this script is called,
// groups top level nodes in file with a locator and annotation
// indicating the reference node
//
global proc string groupLocatorReference (string $refNode,  string $grpName )
{

	// if there is a non empty group name, then exactly that name is used
	// otherwise we use the reference node name with the "group" suffix
	// the other nodes still get their node types tacked on in eityher case

	string $actualName = $grpName;
	string $actualGrpName = $grpName;
	
	if( size($actualName) == 0 ) {
		$actualName = $refNode;
		$actualGrpName = $refNode + "group";
	}
	string $actualLocName = $actualName + "locatorShape";
	
	string $grpNode = `createNode transform -n $actualGrpName`;

	string $locNode = `createNode locator -n $actualLocName`;

	string $locParent[] = `listRelatives -parent $locNode`;
	string $grpNames[] = `parent $grpNode $locParent[0]`;
	// Indexes on the associatedNode attribute are used to make specific associations, 
	// index 0 is reserved for the group node,
    // index 1 is reserved for the locator node.
	connectAttr ($grpNames[0] + ".message") ($refNode+".associatedNode[0]");
	connectAttr ($locParent[0]+ ".message") ($refNode+".associatedNode[1]");
	
	select -r $locParent[0];

	return $locNode;
}
