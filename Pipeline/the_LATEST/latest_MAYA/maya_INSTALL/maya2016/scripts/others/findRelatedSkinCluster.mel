// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//
//
/////////////////////////////////////////////////////////////////////////
//
//  Creation Date:  September, 1999
//
//<doc>
//<name findRelatedSkinCluster>
//
//<synopsis>
//		findRelatedSkinCluster (string $skinObj)
//
//<returns>
//		None
//
//<description>
//      Script for finding a skin cluster that deforms the specified skin.
//
//<examples>
// // To find the skinCluster for a skin called "johnBoy", type:
//
// findRelatedSkinCluster("johnBoy");
//
//</doc>
/////////////////////////////////////////////////////////////////////////
//
global proc string findRelatedSkinCluster(string $skinObj)
{
	string $skinShape;
	string $skinShapeWithPath;
	string $hiddenShape;
	string $hiddenShapeWithPath;
	string $cpTest[] = `ls -type controlPoint $skinObj`;
	if (size($cpTest)) {
		$skinShape = $skinObj;
	} else {
		string $rels[] = `listRelatives $skinObj`;
		for ($r in $rels) {
			$cpTest = `ls -type controlPoint ($skinObj+"|"+$r)`;
			if (0 == size($cpTest)) {
				continue;
			}
			int $io = `getAttr ($skinObj+"|"+$r+".io")`;
			if ($io) {
				continue;
			}

			int $visible = `getAttr ($skinObj+"|"+$r+".v")`;
			if (! $visible) {
				$hiddenShape = $r;
				$hiddenShapeWithPath = ($skinObj+"|"+$r);
				continue;
			}

			$skinShape = $r;
			$skinShapeWithPath = ($skinObj+"|"+$r);
			break;
		}
	}

	if (0 == size($skinShape)) {
		if (0 == size($hiddenShape)) {
			return "";
		} else {
			$skinShape = $hiddenShape;
			$skinShapeWithPath = $hiddenShapeWithPath;
		}
	}

	string $clusters[] = `ls -type skinCluster`;
	for ($c in $clusters) {
		string $geom[] = `skinCluster -q -g $c`;
		for ($g in $geom) {
			if ($g == $skinShape || $g == $skinShapeWithPath) {
				return $c;
			}
		}
	}
	return "";
}
