<?xml version="1.0"?>
<!DOCTYPE renderer SYSTEM "renderer.dtd">
<!--
  Top level tag, mandatory:
    <renderer>: "desc" gives a one line description.

  Header tags, not mandatory, must be specified only once.
    <melheader>: "s" is a mel script executed just after the file is read 
    <meltrailer>: "s" is a mel script executed after all flags are converted
        to mel. Should contain at least the rendering command.

  Other tags:
    <sep>: "desc" produces a line in the help. Blank if desc is missing.
    <attr>: produces a setAttr line.
        "n" is the flag name.
        "s" the attribute name.
        "t" the parameter type, used in help description.
        "h" the help description.
    <attrString>: produces a setAttr line for a string attribute.
        Same parameters as <attr>, but for string attributes.
    <mel>: Calls a mel script.
        "n" is the flag name.
        "p" the number of parameters.
        "s" the string defining the action %1 ... %p are replaced with values
                read after the flag.
        "t" the parameter types, used in help description.
        "h" the help description.
-->
<renderer desc="Mentalray renderer">
	<melheader s='string $opt=""; string $rl=""; string $rp=""; int $renderThreads = 2; float $resize=-1.; int $interactive=0; miLoadMayatomr; miCreateDefaultNodes(); select defaultRenderGlobals; setAttr .renderAll 1'/>
	<meltrailer s='setMayaSoftwareLayers($rl, $rp); miCreateMentalJobs(); setImageSizePercent($resize); mayaBatchRenderProcedure($interactive, "", "", "mentalRay", $opt); '/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="General purpose flags:"/>
	<mel n="rd" p="1" s='workspace -fr "images" "%1";workspace -fr "depth" "%1";' t="path" h="Directory in which to store image files"/>
	<attrString n="im" s=".imageFilePrefix" t="filename" h="Image file output name"/>
	<mel n="of" s='setMentalRayImageFormat("%1")' p="1" t="string" h="Output image file format. See the Render Settings window\n\tto find available formats"/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Frame numbering options"/>
	<mel n="s" p="1" t="float" s="removeRenderLayerAdjustmentAndUnlock .animation; setAttr .animation 1; removeRenderLayerAdjustmentAndUnlock .startFrame; setAttr .startFrame %1" h="Starting frame for an animation sequence"/>
	<mel n="e" p="1" t="float" s="removeRenderLayerAdjustmentAndUnlock .animation; setAttr .animation 1; removeRenderLayerAdjustmentAndUnlock .endFrame; setAttr .endFrame %1" h="End frame for an animation sequence"/>
	<attr n="b" s=".byFrameStep" t="float" h="By frame (or step) for an animation sequence"/>
	<attr n="skipExistingFrames" s=".skipExistingFrames" t="boolean" h="Skip frames that are already rendered (if true) or force rendering all frames (if false)"/>
	<attr n="pad" s=".extensionPadding" t="int" h="Number of digits in the output image frame file name\n\textension"/>
	<mel n="rfs" p="1" t="int" s="removeRenderLayerAdjustmentAndUnlock .modifyExtension; setAttr .modifyExtension 1; removeRenderLayerAdjustmentAndUnlock .startExtension; setAttr .startExtension %1" h="Renumber Frame Start: number for the first image when\n\trenumbering frames"/>
	<attr n="rfb" s=".byExtension" t="int" h="Renumber Frame By (or step) used for renumbering frames"/>
	<mel n="fnc" s='setMayaSoftwareFrameExt("%1", 1)' p="1" t="int" h="File Name Convention: any of name, name.ext, ... See the\n\tRender Settings window to find available options. Use namec and\n\tnamec.ext for Multi Frame Concatenated formats. As a shortcut,\n\tnumbers 1, 2, ... can also be used"/>
	<mel n="perframe" p="0" t="" s='print("flag -perframe is used.\n");' h="Renders animation per-frame, without incremental change"/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Camera options"/>
	<mel n="cam" s='makeCameraRenderable("%1")' p="1" t="name" h="Specify which camera to be rendered"/>
	<mel n="rgb" s='applyOnCameras("image", "%1")' p="1" t="boolean" h="Turn RGB output on or off"/>
	<mel n="alpha" s='applyOnCameras("mask", "%1")' p="1" t="boolean" h="Turn Alpha output on or off"/>
	<mel n="depth" s='applyOnCameras("depth", "%1")' p="1" t="boolean" h="Turn Depth output on or off"/>
	<mel n="iip" s="disableImagePlanes" p="0" t="" h="Ignore Image Planes. Turn off all image planes before\n\trendering"/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Resolution options"/>
	<attr n="x" s="defaultResolution.width" t="int" h="Set X resolution of the final image"/>
	<attr n="y" s="defaultResolution.height" t="int" h="Set Y resolution of the final image"/>
	<mel n="percentRes" s="$resize=%1" p="1" t="float" h="Renders the image using percent of the resolution"/>
	<attr n="ard" s="defaultResolution.deviceAspectRatio" t="float" h="Device aspect ratio for the rendered image"/>
	<attr n="par" s="defaultResolution.pixelAspectRatio" t="float" h="Pixel aspect ratio for the rendered image"/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Render Layers and Passes:"/>
	<mel n="rl" s='$rl="%1"' p="1" t="boolean|name(s)" h="Render each render layer separately"/>
	<mel n="rp" s='$rp="%1"' p="1" t="boolean|name(s)" h="Render passes separately. 'all' will render all passes"/>
	<mel n="sel" p="1" s="select -add %1; removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.renderAll; setAttr defaultRenderGlobals.renderAll 0" t="boolean|name(s)" h="Selects which objects, groups and/or sets to render"/>
	<mel n="l" p="1" s="selectLayerMembers %1; removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.renderAll; setAttr defaultRenderGlobals.renderAll 0" t="boolean|name(s)" h="Selects which display and render layers to render"/>
	<mel n="rat" ln="allRenderable" p="0" s="setAttr defaultRenderGlobals.renderedOutput 0" t="" h="Render all renderable (2D and 3D)"/>
	<mel n="rto" ln="renderTargetsOnly" p="0" s="setAttr defaultRenderGlobals.renderedOutput 1" t="" h="Render target (2D) only rendering"/>
	<mel n="ort" ln="omitRenderTargets" p="0" s="setAttr defaultRenderGlobals.renderedOutput 2" t="" h="Omit render targets and render 3D only"/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Mel callbacks"/>
	<attrString n="preRender" s="defaultRenderGlobals.preMel" t="string" h="Mel code executed before rendering"/>
	<attrString n="postRender" s="defaultRenderGlobals.postMel" t="string" h="Mel code executed after rendering"/>
	<attrString n="preLayer" s="defaultRenderGlobals.preRenderLayerMel" t="string" h="Mel code executed before each render layer"/>
	<attrString n="postLayer" s="defaultRenderGlobals.postRenderLayerMel" t="string" h="Mel code executed after each render layer"/>
	<attrString n="preFrame" s="defaultRenderGlobals.preRenderMel" t="string" h="Mel code executed before each frame"/>
	<attrString n="postFrame" s="defaultRenderGlobals.postRenderMel" t="string" h="Mel code executed after each frame"/>
	<mel n="pre" s='print("WARNING: flag -pre is obsolete. Use -preRender, -preLayer, -preFrame\n");' p="1" t="string" h="Obsolete flag"/>
	<mel n="post" s='print("WARNING: flag -post is obsolete. Use -postRender, -postLayer, -postFrame\n");' p="1" t="string" h="Obsolete flag"/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Other:"/>
	<mel n="v" ln="verbose" p="1" s="global int $g_mrBatchRenderCmdOption_VerbosityOn = true; global int $g_mrBatchRenderCmdOption_Verbosity = %1" t="int" h="Set the verbosity level.\n\t0 to turn off messages\n\t1 for fatal errors only\n\t2 for all errors\n\t3 for warnings\n\t4 for informational messages\n\t5 for progress messages\n\t6 for detailed debugging messages"/>
	<mel n="rt" ln="renderThreads" p="1" s="global int $g_mrBatchRenderCmdOption_NumThreadOn = true; global int $g_mrBatchRenderCmdOption_NumThread = %1" t="int" h="Specify the number of rendering threads."/>
	<mel n="art" ln="autoRenderThreads" p="0" s="global int $g_mrBatchRenderCmdOption_NumThreadAutoOn = true; global int $g_mrBatchRenderCmdOption_NumThreadAuto = true" t="" h="Automatically determine the number of rendering threads."/>
	<mel n="mem" ln="memory" p="1" s="global int $g_mrBatchRenderCmdOption_MemLimitOn = true; global int $g_mrBatchRenderCmdOption_MemLimit = %1" t="int" h="Set the memory limit (in MB)."/>
	<mel n="aml" ln="autoMemoryLimit" p="0" s="global int $g_mrBatchRenderCmdOption_MemLimitAutoOn = true; global int $g_mrBatchRenderCmdOption_MemLimitAuto = true" t="" h="Compute the memory limit automatically."/>
	<mel n="ts" ln="taskSize" p="1" s="global int $g_mrBatchRenderCmdOption_TaskSizeOn = true; global int $g_mrBatchRenderCmdOption_TaskSize = %1" t="int" h="Set the pixel width/height of the render tiles."/>
	<mel n="at" ln="autoTiling" p="0" s="global int $g_mrBatchRenderCmdOption_TaskSizeAutoOn = true; global int $g_mrBatchRenderCmdOption_TaskSizeAuto = true" t="" h="Automatically determine optimal tile size."/>
	<mel n="fbm" ln="frameBufferMode" p="1" s="global int $g_mrBatchRenderCmdOption_FBModeOn = true; global int $g_mrBatchRenderCmdOption_FBMode = %1" t="int" h="Set the frame buffer mode.\n\t0 in-memory framebuffers\n\t1 memory mapped framebuffers\n\t2 cached framebuffers"/>
	<mel n="rnm" s='if(%1) $opt += " -renderNoMaster ";' p="1" t="boolean" h="Network rendering option. If true, mental ray renders\n\talmost everything on slave machines, thus reducing the workload on the\n\tmaster machine"/>
	<mel n="lic" s='$opt += " -lic %1";' p="1" t="string" h="Specify satellite licensing option. mu/unlimited or\n\tmc/complete."/>
	<mel n="reg" s="setMentalRayRenderRegion(%1,%2,%3,%4)" t="int int int int" p="4" h="Set sub-region pixel boundary of the final image:\n\tleft, right, bottom, top"/>
	<mel n="sa" ln="sampling" s="setAttr miDefaultOptions.miRenderUsing %1; miSetRenderUsingValue();" p="1" t="int" h="Render the scene using the legacy sampling scheme.\n\t0 Unified Sampling Mode\n\t1 Legacy Rasterizer Mode\n\t2 Legacy Sampling Mode"/>
	<mel n="uq" ln="unifiedQuality" s="setAttr miDefaultOptions.miSamplesQualityR %1;" p="1" t="float" h="Set the Unified Sampling quality (only meaningful when using the Unified Sampling mode)."/>    
<!-- ______________________________________________________________ -->
	<sep desc=" *** Remember to place a space between option flags and their arguments. ***"/>
	<sep desc="Any boolean flag will take the following values as TRUE: on, yes, true, or 1."/>
	<sep desc="Any boolean flag will take the following values as FALSE: off, no, false, or 0."/>
	<sep/>
	<sep desc="    e.g. -s 1 -e 10 -x 512 -y 512 -cam persp -of jpg file."/>
</renderer>
