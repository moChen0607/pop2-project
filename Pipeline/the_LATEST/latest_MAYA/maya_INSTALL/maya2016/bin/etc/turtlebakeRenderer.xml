<?xml version="1.0"?>
<!DOCTYPE renderer SYSTEM "renderer.dtd">
<!--
  Top level tag, mandatory:
    <renderer>: "desc" gives a one line description.

  Header tags, not mandatory, must be specified only once.
    <melheader>: "s" is a mel script executed just after the file is read 
    <meltrailer>: "s" is a mel script executed after all flags are converted
        to mel. Should contain at least the rendering command.

  Other tags:
    <sep>: "desc" produces a line in the help. Blank if desc is missing.
    <attr>: produces a setAttr line.
        "n" is the flag name.
        "s" the attribute name.
        "t" the parameter type, used in help description.
        "h" the help description.
    <attrString>: produces a setAttr line for a string attribute.
        Same parameters as <attr>, but for string attributes.
    <mel>: Calls a mel script.
        "n" is the flag name.
        "p" the number of parameters.
        "s" the string defining the action %1 ... %p are replaced with values
                read after the flag.
        "t" the parameter types, used in help description.
        "h" the help description.
-->
<renderer desc="TURTLE surface transfer renderer">
	<melheader s='ilrLoadTurtle; string $overrideLayer = ilrCreateBakeLayer("",0); string $extraOptions=""; string $rl=""; string $bl=""; string $cbl=$overrideLayer; int $all=0; int $override=0'/>
	<meltrailer s='ilrSetBatchBakeLayers($all ? "all" : $bl); setAttr ($overrideLayer+".renderable") 1; ilrSetRenderLayersAndPasses($rl, ""); ilrTextureBakeCmdlineCallback($override, $overrideLayer, $extraOptions); '/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="*** General purpose flags ***"/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Resolution options:"/>
	<mel n="region" p="4" s='$extraOptions += " -region %1 %2 %3 %4"' t="int int int int" h="Renders a region of the image. The following syntax should be used; -region left bottom right top"/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Render Layers:"/>
	<mel n="rl" s='$rl = "%1"; $extraOptions += " -layer %1"' p="1" t="name" h="Specify which render layer to use."/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Mel callbacks:"/>
	<attrString n="preRender" s="defaultRenderGlobals.preMel" t="string" h="Mel code executed before rendering"/>
	<attrString n="postRender" s="defaultRenderGlobals.postMel" t="string" h="Mel code executed after rendering"/>
	<attrString n="preLayer" s="defaultRenderGlobals.preRenderLayerMel" t="string" h="Mel code executed before each render layer"/>
	<attrString n="postLayer" s="defaultRenderGlobals.postRenderLayerMel" t="string" h="Mel code executed after each render layer"/>
	<attrString n="preFrame" s="defaultRenderGlobals.preRenderMel" t="string" h="Mel code executed before each frame"/>
	<attrString n="postFrame" s="defaultRenderGlobals.postRenderMel" t="string" h="Mel code executed after each frame"/>
	<mel n="pre" p="1" s='print("WARNING: flag -pre is obsolete. Use -preRender, -preLayer, -preFrame\n");' t="string" h="Obsolete flag"/>
	<mel n="post" p="1" s='print("WARNING: flag -post is obsolete. Use -postRender, -postLayer, -postFrame\n");' t="string" h="Obsolete flag"/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="Verbosity:"/>
	<attr n="errorMsg" s="TurtleRenderOptions.errorPrint" t="boolean" h="Enable error messages"/>
	<attr n="warningMsg" s="TurtleRenderOptions.warningPrint" t="boolean" h="Enable warning messages"/>
	<attr n="benchmarkMsg" s="TurtleRenderOptions.benchmarkPrint" t="boolean" h="Enable benchmark messages"/>
	<attr n="progressMsg" s="TurtleRenderOptions.progressPrint" t="boolean" h="Enable progress messages"/>
	<attr n="infoMsg" s="TurtleRenderOptions.infoPrint" t="boolean" h="Enable info messages"/>
	<attr n="verboseMsg" s="TurtleRenderOptions.verbosePrint" t="boolean" h="Enable verbose messages"/>
	<attr n="debugMsg" s="TurtleRenderOptions.debugPrint" t="boolean" h="Enable debug messages"/>
	<attr n="saveMsg" s="TurtleRenderOptions.debugFile" t="boolean" h="Enable saving of messages to file"/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="*** Render option flags ***"/>
	<!-- ______________________________________________________________ -->
	<sep/>
	<sep desc="Memory and Performance Options:"/>
	<attr n="rtAlgorithm" s="TurtleRenderOptions.rtAlgorithm" t="int" h="Sets which ray tracing algorithm to use."/>
	<mel n="memLimit" p="1" s="TurtleRenderOptions.memLimit %1; setAttr TurtleRenderOptions.memLimitEnabled 1;" t="int" h="Sets the amount of memory to use for ray tracing if Large Scene algorithm is used."/>
	<attr n="useSSE" s="TurtleRenderOptions.useSSE" t="boolean" h="Sets usage of SSE instructions."/>
	<attr n="tileScheme" s="TurtleRenderOptions.tileScheme" t="int" h="Sets the render tile scheme."/>
	<attr n="tileSize" s="TurtleRenderOptions.tileSize" t="int" h="Sets the render tile size as a power of two (4 = 16x16, 5 = 32x32, 6 = 64x64, ...)"/>
	<mel n="renderThreads" P="1" s="TurtleRenderOptions.renderThreads %1; setAttr TurtleRenderOptions.autoThreads 0;" t="int" h="Sets the number of threads to use for rendering."/>
	<attr n="textureCache" s="TurtleRenderOptions.enableTextureCache" t="boolean" h="Enable the texture cache."/>
	<attr n="readOnlyCache" s="TurtleRenderOptions.readOnlyCache" t="boolean" h="Put the texture cache into read only mode."/>
	<attr n="textureTileSize" s="TurtleRenderOptions.textureTileSize" t="int" h="Set the texture cache tile size (16 = 16x16, 32 = 32x32, 64 = 64x64, ...)."/>
	<attr n="textureCacheSize" s="TurtleRenderOptions.textureCacheSize" t="int" h="Sets the total texture cache size (in MB)."/>
	<attr n="minimumTextureSize" s="TurtleRenderOptions.minimumTextureSize" t="int" h="Sets the min size of a texture to be cached (in MB). A smaller texture will not be put into the cache."/>
	<attr n="textureCompressionType" s="TurtleRenderOptions.textureCompressionType" t="int" h="Set the compression type to use in the cache."/>
	<attrString n="textureCacheDirectory" s="TurtleRenderOptions.textureCacheDirectory" t="string" h="Set the directory to store texture cache files."/>
	<sep/>
	<sep desc="Raytracing Options:"/>
	<attr n="rtMaxRayDepth" s="TurtleRenderOptions.rtMaxRayDepth" t="int" h="Sets the max depth for rays."/>
	<attr n="rtReflections" s="TurtleRenderOptions.rtReflections" t="int" h="Sets the max depth for reflection rays."/>
	<attr n="rtRefractions" s="TurtleRenderOptions.rtRefractions" t="int" h="Sets the max depth for refraction rays."/>
	<attr n="rtShadows" s="TurtleRenderOptions.rtShadows" t="int" h="Sets the max depth for shadow rays."/>
	<attr n="rtBias" s="TurtleRenderOptions.rtBias" t="int" h="Sets the bias for ray tracing."/>
	<sep/>
	<sep desc="Framebuffer:"/>
	<attr n="preMultiply" s="TurtleRenderOptions.preMultiply" t="boolean" h="Enables alpha premultiplication."/>
	<attr n="preMultiplyThreshold" s="TurtleRenderOptions.preMultiplyThreshold" t="float" h="Sets the premultiply threshold."/>
	<attr n="inputGammaCorrection" s="TurtleRenderOptions.inputGammaCorrection" t="boolean" h="Enables input gamma correction."/>
	<attr n="gammaInput" s="TurtleRenderOptions.gammaInput" t="float" h="Sets the input gamma."/>
	<attr n="outputGammaCorrection" s="TurtleRenderOptions.outputGammaCorrection" t="int" h="Enables output correction. 0=None, 1=Gamma, 2=sRGB"/>
	<attr n="gammaOutput" s="TurtleRenderOptions.gammaOutput" t="float" h="Sets the output gamma."/>
	<sep/>  <sep/>
	<sep desc="Override Options:"/>
	<attr n="ignoreLightLinks" s="TurtleRenderOptions.ignoreLightLinks" t="boolean" h="Disables all light linking."/>
	<attr n="rtQualityLimits" s="TurtleRenderOptions.rtQualityLimits" t="boolean" h="Enables ray tracing quality limits."/>
	<attr n="rtMaxShadowRays" s="TurtleRenderOptions.rtMaxShadowRays" t="int" h="Sets the max shadow rays if rtQualityLimits is enabled."/>
	<attr n="rtMaxGlossyRays" s="TurtleRenderOptions.rtMaxGlossyRays" t="int" h="Sets the max glossy rays if rtQualityLimits is enabled."/>
	<sep/>
  <sep/>
  <!-- ______________________________________________________________ -->
	<sep desc="*** Texture bake option flags ***"/>
	<!-- ______________________________________________________________ -->
	<sep/>
	<sep desc="Bake layers and objects:"/>
	<mel n="bakeLayer" p="1" s='if ("%1"=="all") {$all=1;} else {$cbl="%1"; $bl += "%1 ";}' t="name" h="Specifies which bake layer to bake. Can be used multiple times to bake multiple layers. Use 'all' to bake all layers"/>
	<sep/>
	<sep desc="Bake layer override settings:"/>
	<mel n="override" p="1" s='$override = "%1"' t="boolean" h="If enabled the override settings will be used instead of the bake layer settings."/>
	<attr n="width" s='($overrideLayer + ".tbResX")' t="int" h="The width of the texture."/>
	<attr n="height" s='($overrideLayer + ".tbResY")' t="int" h="The height of the texture."/>
	<attrString n="directory" s='($overrideLayer + ".tbDirectory")' t="string" h="Sets the directory where the textures will be saved."/>
	<attrString n="fileName" s='($overrideLayer + ".tbFileName")' t="string" h="Sets the file name of the texture."/>
	<attr n="imageFormat" s='($overrideLayer + ".tbImageFormat")' t="int" h="Sets which image format to use when saving the texture."/>
	<attr n="uvRange" s='($overrideLayer + ".tbUvRange")' t="int" h="Controls which uv range to bake."/>
	<attr n="uMin" s='($overrideLayer + ".tbUMin")' t="float" h="Sets the minimum u-value to bake."/>
	<attr n="uMax" s='($overrideLayer + ".tbUMax")' t="float" h="Sets the maximum u-value to bake."/>
	<attr n="vMin" s='($overrideLayer + ".tbVMin")' t="float" h="Sets the minimum v-value to bake."/>
	<attr n="vMax" s='($overrideLayer + ".tbVMax")' t="float" h="Sets the maximum v-value to bake."/>
	<attrString n="uvSet" s='($overrideLayer + ".tbUvSet")' t="string" h="Sets which uv-set to use when baking."/>
	<attr n="lua" s='($overrideLayer + ".lua")' t="boolean" h="Enables a lua scripted output pass."/>
	<attr n="luaFile" s='($overrideLayer + ".luaFile")' t="string" h="Sets the lua script file to use."/>
	<sep/>
	<!-- ______________________________________________________________ -->
	<sep desc="*** Remember to place a space between option flags and their arguments ***"/>
	<sep desc="Any boolean flag will take the following values as TRUE: on, yes, true, or 1."/>
	<sep desc="Any boolean flag will take the following values as FALSE: off, no, false, or 0."/>
</renderer>
