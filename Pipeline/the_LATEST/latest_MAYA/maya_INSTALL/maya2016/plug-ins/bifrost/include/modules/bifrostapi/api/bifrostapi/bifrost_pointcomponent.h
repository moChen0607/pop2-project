//*****************************************************************************
/*!
   \file bifrost_pointcomponent.h
   \brief PointComponent class declaration.

	Copyright 2014 Autodesk, Inc. All rights reserved.

	Use of this software is subject to the terms of the Autodesk
	license agreement provided at the time of installation or download,
	or which otherwise accompanies this software in either electronic
	or hard copy form.
*/
//*****************************************************************************

#ifndef _BIFROST_POINTCOMPONENT_H_
#define _BIFROST_POINTCOMPONENT_H_

#include "bifrostapi/bifrost_component.h"

namespace Bifrost {
namespace API {


//*****************************************************************************
/*! \class PointComponent bifrost_pointcomponent.h
	\brief %PointComponent is a specialized class for point component types.

	\sa Component
	\sa PointChannel
	\sa PointComponentType
	\sa StateServer
*/
//*****************************************************************************

class BIFROST_API_DECL PointComponent : public Component
{
	public:
	/*! Default constructor. */
	PointComponent();

	/*! Default destructor. */
	~PointComponent();

	/*! Constructor. 
	*/
	PointComponent(const Ref& ref);

	/*! Copy constructor.
	\param obj constant class object.
	*/
	PointComponent(const PointComponent& obj);

	/*! Constructor.
	\param obj constant Component class object.
	*/
	PointComponent(const Component& obj);

	/*! Creates an object from another object. The newly created object is set to
	empty if the input object is not compatible.
	\param obj constant class object.
	\return The new %PointComponent object.
	*/
	PointComponent& operator=(const PointComponent& obj);

	/*! Creates an object from a reference object. The newly created object is
	set to empty if the input reference object is not compatible.
	\param ref constant class object.
	\return The new %PointComponent object.
	*/
	PointComponent& operator=(const Ref& ref);

	/*! Creates an object from another component. The newly created object is set to
	empty if the input object is not compatible.
	\param obj constant class object.
	\return The new %PointComponent object.
	*/
	PointComponent& operator=(const Component& obj);

	/*! Returns the highest point identifier generated by this component.
	\return Point identifier.
	*/
	PointID maxPointID() const;

	/*! Converts from tile coordinates to world coordinates.
	\return Point in world space coordinates.
	*/
    amino::Math::vec3f toWorldSpace( const amino::Math::vec3f& tileCoord ) const;

	/*! Converts from world coordinates to tile coordinates.
	\return Point in tile space coordinates.
	*/
    amino::Math::vec3f toTileSpace( const amino::Math::vec3f& worldCoord ) const;
};

}
}

#endif // _BIFROST_BASE_H_