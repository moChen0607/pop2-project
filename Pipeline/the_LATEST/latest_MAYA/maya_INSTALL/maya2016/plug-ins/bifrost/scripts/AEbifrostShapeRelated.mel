// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//	Procedure Name:
//	AEbifrostShapeRelated
//

global proc string[] AEbifrostShapeRelated(string $nodeName)
{
	string $result[];

	// Get standard related nodes
	string $relatedNodes[] = `defaultNavigation -ren -d $nodeName`;
	appendStringArray($result, $relatedNodes, size($relatedNodes));

	string $nodes[] = `listHistory -future false $nodeName`;
	string $hNode;

	// Check the src connections for bifrostContainers first
	for( $hNode in $nodes ) {
		string $nType = `nodeType $hNode`;
		if( $nType == "bifrostContainer" ){
			$result[size($result)] = $hNode;
			break;
		}

	}

    // Add assigned shaders but not the shading group
	string $plugs[] = `listConnections -s false -sh true -d true $nodeName`;
	for ($plug in $plugs)
	{
		string $nType = `nodeType $plug`;
		if ($nType == "shadingEngine")
		{
			string $shaders[] = `listConnections ($plug + ".surfaceShader")`;
			appendStringArray($result, $shaders, size($shaders));
		}
	}

	// Set preferred node
	string $preferredNode = `defaultNavigation -dwn -d $nodeName`;
	if ($preferredNode == "")
	{
		$preferredNode = $nodeName;
	}
	$result[size($result)] = $preferredNode;

	return $result;
}

