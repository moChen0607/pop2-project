// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

proc int[] getCounts(string $type)
{
	// Get selected nodes
	string $selection[] = `ls -selection -type "dagNode"`;
	string $selectedBifrostNodes[];
	for ($n in $selection)
	{
		if (`nodeType $n` == "bifrostShape")
		{
			$selectedBifrostNodes[size($selectedBifrostNodes)] = $n;
		}
		else
		{
			string $childNodes[] = `listRelatives -allDescendents -type "bifrostShape" $n`;
			for ($bf in $childNodes)
			{
				$selectedBifrostNodes[size($selectedBifrostNodes)] = $bf;
			}
		}
	}

	// Compute counts
	int $counts[] = {0, 0};
	string $bifrostNodes[] = `ls -type "bifrostShape"`;
	for ($bf in $bifrostNodes)
	{
		// Pull output attributes
		int $count = 0;
		if ($type == "particle")
		{
			$count = `getAttr ($bf + ".outNumParticles")`;
		}
		else if ($type == "voxel")
		{
			$count = `getAttr ($bf + ".outNumVoxels")`;
		}

		// Accumulate value
		$counts[0] += $count;
		if (stringArrayContains($bf, $selectedBifrostNodes))
		{
			$counts[1] += $count;
		}
	}
	return $counts;
}

global proc int[] bifrostParticleCounts()
{
	return getCounts("particle");
}

global proc int[] bifrostVoxelCounts()
{
	return getCounts("voxel");
}

proc string[] bifrostCounts_format( int $counts[] ) 
{
	string $result[];
	int $count;
	for( $count in $counts ) {
		string $pycmd = "'{:,}'.format(" + $count + ").replace(',',' ')";
		$result[size($result)]=`python $pycmd`;
	}
	return $result;

}

global proc string[] bifrostParticleCounts_format()
{
	return bifrostCounts_format( `bifrostParticleCounts` );
}

global proc string[] bifrostVoxelCounts_format() 
{
	return bifrostCounts_format( `bifrostVoxelCounts` );
}

global proc MakeBifrostHUD()
{
	// Particle counts
	headsUpDisplay
		-section 0
		-block `headsUpDisplay -nextFreeBlock 0`
		-visible (`optionVar -q bifrostHUDVisibility`)
		-label (uiRes("m_MakeBifrostHUD.kBifrostParticles"))
		-labelWidth 100
		-dataWidth 65
		-dataAlignment "right"
		-command "bifrostParticleCounts_format()"
		-attachToRefresh
		HUDBifrostParticleCount;

	// Voxel counts
	headsUpDisplay
		-section 0
		-block `headsUpDisplay -nextFreeBlock 0`
		-visible (`optionVar -q bifrostHUDVisibility`)
		-label (uiRes("m_MakeBifrostHUD.kBifrostVoxels"))
		-labelWidth 100
		-dataWidth 65
		-dataAlignment "right"
		-command "bifrostVoxelCounts_format()"
		-attachToRefresh
		HUDBifrostVoxelCount;

	// Add the above commands to Maya command echo filter so that
	// they don't get printed when "Echo All Commands" is on.
	//
	string $echoFilter[] = `commandEcho -q -filter`;

	if (!stringArrayContains("bifrostParticleCounts", $echoFilter))
	{
		commandEcho -addFilter "bifrostParticleCounts";
	}

	if (!stringArrayContains("bifrostVoxelCounts", $echoFilter))
	{
		commandEcho -addFilter "bifrostVoxelCounts";
	}

	if (!stringArrayContains("'{:,}'.format", $echoFilter))
	{
		commandEcho -addFilter "'{:,}'.format";
	}
}

global proc RemoveBifrostHUD()
{
	if (`headsUpDisplay -exists HUDBifrostParticleCount`)
	{
		headsUpDisplay -remove HUDBifrostParticleCount;
	}
	if (`headsUpDisplay -exists HUDBifrostVoxelCount`)
	{
		headsUpDisplay -remove HUDBifrostVoxelCount;
	}
}
