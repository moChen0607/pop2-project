// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//	Procedure Name:
//	bifrostvispluginInitStrings
//
//	Description Name;
//	Register string resources for plugin
//

global proc bifrostvispluginInitStrings()
{
	// Shared AE strings
	registerPluginResource("bifrostvisplugin", "kColor", "Color");
	registerPluginResource("bifrostvisplugin", "kWeight", "Weight");
	registerPluginResource("bifrostvisplugin", "kTransparency", "Transparency");
	registerPluginResource("bifrostvisplugin", "kRoughness", "Roughness");
	registerPluginResource("bifrostvisplugin", "kMax", "Max");
	registerPluginResource("bifrostvisplugin", "kMin", "Min");
	registerPluginResource("bifrostvisplugin", "kOffset", "Offset");
	registerPluginResource("bifrostvisplugin", "kParticle", "Particle");
	registerPluginResource("bifrostvisplugin", "kScale", "Scale");
	registerPluginResource("bifrostvisplugin", "kThreshold", "Threshold");
	registerPluginResource("bifrostvisplugin", "kVoxel", "Voxel");
	registerPluginResource("bifrostvisplugin", "kColorRemapChannel", "Color Remap Channel");
	registerPluginResource("bifrostvisplugin", "kWeightRemapChannel", "Weight Remap Channel");
	registerPluginResource("bifrostvisplugin", "kTransparencyRemapChannel", "Transparency Remap Channel");

	// Shape AE strings
	registerPluginResource("bifrostvisplugin", "kDisplay", "Display");
	registerPluginResource("bifrostvisplugin", "kRender", "Render");
	registerPluginResource("bifrostvisplugin", "kParticleDisplay", "Particle Display");
	registerPluginResource("bifrostvisplugin", "kParticleType", "Type");
	registerPluginResource("bifrostvisplugin", "kRenderType", "Type");
	registerPluginResource("bifrostvisplugin", "kRenderHardVoxelThreshold", "Threshold");
	registerPluginResource("bifrostvisplugin", "kRenderSharpenFilterStrength", "Filter");
	registerPluginResource("bifrostvisplugin", "kRenderParticleSize", "Size");
	registerPluginResource("bifrostvisplugin", "kRenderParticleFaceCamera", "Face Camera");
	registerPluginResource("bifrostvisplugin", "kColorChannel", "Color Channel");
	registerPluginResource("bifrostvisplugin", "kOpacityChannel", "Opacity Channel");
	registerPluginResource("bifrostvisplugin", "kNumericChannel", "Numeric Channel");
	registerPluginResource("bifrostvisplugin", "kVectorChannel", "Vector Channel");
	registerPluginResource("bifrostvisplugin", "kColorRemap", "Color Channel Remap");
	registerPluginResource("bifrostvisplugin", "kColorRemapMin", "Color Channel Min");
	registerPluginResource("bifrostvisplugin", "kColorRemapMax", "Color Channel Max");
	registerPluginResource("bifrostvisplugin", "kOpacityRemap", "Opacity Channel Remap");
	registerPluginResource("bifrostvisplugin", "kOpacityRemapMin", "Opacity Channel Min");
	registerPluginResource("bifrostvisplugin", "kOpacityRemapMax", "Opacity Channel Max");
	registerPluginResource("bifrostvisplugin", "kShowParticleColor", "Color");
	registerPluginResource("bifrostvisplugin", "kShowParticleOpacity", "Opacity");
	registerPluginResource("bifrostvisplugin", "kShowParticleNumeric", "Numeric");
	registerPluginResource("bifrostvisplugin", "kShowParticleVector", "Vector");
	registerPluginResource("bifrostvisplugin", "kVoxelDisplay", "Voxel Display");
	registerPluginResource("bifrostvisplugin", "kVoxelType", "Type");
	registerPluginResource("bifrostvisplugin", "kShowVoxelColor", "Color");
	registerPluginResource("bifrostvisplugin", "kBifrostControls", "Bifrost Controls");
	registerPluginResource("bifrostvisplugin", "kClipping", "Clipping");
	registerPluginResource("bifrostvisplugin", "kClipInputMesh", "Clip Input Mesh");
	registerPluginResource("bifrostvisplugin", "kClipUseSelected", "Use Selected");
	registerPluginResource("bifrostvisplugin", "kClipUseSelectedExactOneError", "More than one node is selected.");
	registerPluginResource("bifrostvisplugin", "kClipUseSelectedNotMeshError", "^1s is not a mesh.");
	registerPluginResource("bifrostvisplugin", "kComponentDisplay", "Component Display");

	// Channel strings
	registerPluginResource("bifrostvisplugin", "kChannelNiceName_none", "None");
	registerPluginResource("bifrostvisplugin", "kChannelNiceName_density", "Density");
	registerPluginResource("bifrostvisplugin", "kChannelNiceName_droplet", "Droplet");
	registerPluginResource("bifrostvisplugin", "kChannelNiceName_position", "Position");
	registerPluginResource("bifrostvisplugin", "kChannelNiceName_stictionBandwidth", "Stickiness Bandwidth");
	registerPluginResource("bifrostvisplugin", "kChannelNiceName_stictionStrength", "Stickiness Strength");
	registerPluginResource("bifrostvisplugin", "kChannelNiceName_velocity", "Velocity");
	registerPluginResource("bifrostvisplugin", "kChannelNiceName_vorticity", "Vorticity");
	registerPluginResource("bifrostvisplugin", "kChannelNiceName_distance", "Distance");
	registerPluginResource("bifrostvisplugin", "kChannelNiceName_id64", "Id64");
	registerPluginResource("bifrostvisplugin", "kChannelNiceName_distance_mrsharp", "Distance (MR Sharpen)");
	registerPluginResource("bifrostvisplugin", "kChannelNiceName_smoke", "Smoke");
	registerPluginResource("bifrostvisplugin", "kChannelNiceName_expansionRate", "Expansion Rate");
	registerPluginResource("bifrostvisplugin", "kChannelNiceName_uv", "UV");
	registerPluginResource("bifrostvisplugin", "kChannelNiceName_split_count", "Split count");
	registerPluginResource("bifrostvisplugin", "kChannelNiceName_transition", "Transition");
	registerPluginResource("bifrostvisplugin", "kChannelNiceName_temperature", "Temperature");


	// Tile View strings
	registerPluginResource("bifrostvisplugin", "kTileView", "Tile View");
	registerPluginResource("bifrostvisplugin", "kTileViewEnable", "Enable");
	registerPluginResource("bifrostvisplugin", "kTileViewMinLevel", "Min Level");
	registerPluginResource("bifrostvisplugin", "kTileViewMaxLevel", "Max Level");
	registerPluginResource("bifrostvisplugin", "kTileViewFocusLevel", "Focus Level");
	registerPluginResource("bifrostvisplugin", "kTileViewFocusFalloff", "Focus Falloff");

	// Meshing control strings
	registerPluginResource("bifrostvisplugin", "kBifrostMeshingControls", "Bifrost Meshing");	
	registerPluginResource("bifrostvisplugin", "kMeshingEnable",				"Enable");					
	registerPluginResource("bifrostvisplugin", "kMeshingDropletRevealFactor",	"Droplet Reveal Factor");	
	registerPluginResource("bifrostvisplugin", "kMeshingSurfaceRadius",			"Surface Radius" );			
	registerPluginResource("bifrostvisplugin", "kMeshingDropletRadius",			"Droplet Radius");			
	registerPluginResource("bifrostvisplugin", "kMeshingKernelFactor",			"Kernel Factor");			
	registerPluginResource("bifrostvisplugin", "kMeshingSmoothing",				"Smoothing");				
	registerPluginResource("bifrostvisplugin", "kMeshingResolutionFactor",		"Resolution Factor");		
	registerPluginResource("bifrostvisplugin", "kMeshingFlipFaceNormals",		"Flip Face Normals");		 
	registerPluginResource("bifrostvisplugin", "kBifrostMeshingChannelTransferControls", "Channel Transfer");
	registerPluginResource("bifrostvisplugin", "kMeshingChannelTransferVelocityScale", "Velocity Scale");	

	// Ramp control strings
	registerPluginResource("bifrostvisplugin", "kRampSelectedPosition", "Selected Position");
	registerPluginResource("bifrostvisplugin", "kRampSelectedColor", "Selected Color");
	registerPluginResource("bifrostvisplugin", "kRampSelectedValue", "Selected Value");
	registerPluginResource("bifrostvisplugin", "kRampInterpolation", "Interpolation");

	// Aero material AE strings
	registerPluginResource("bifrostvisplugin", "kDensityControls", "Density");
	registerPluginResource("bifrostvisplugin", "kEmissionControls", "Emission");
	registerPluginResource("bifrostvisplugin", "kAbsorptionControls", "Absorption");
	registerPluginResource("bifrostvisplugin", "kScatteringControls", "Scattering");
	registerPluginResource("bifrostvisplugin", "kDisplayControls", "Display");
	registerPluginResource("bifrostvisplugin", "kIntensity", "Intensity");
	registerPluginResource("bifrostvisplugin", "kIntensityUnits", "Intensity Units");
	registerPluginResource("bifrostvisplugin", "kDensityRemap", "Density Remap");
	registerPluginResource("bifrostvisplugin", "kEmissionColorRemapChannel", "Color Remap Channel");
	registerPluginResource("bifrostvisplugin", "kEmissionColorRemapControls", "Emission Color Remap");
	registerPluginResource("bifrostvisplugin", "kDensityCutoff", "Density Cutoff");
	registerPluginResource("bifrostvisplugin", "kDirectionality", "Directionality");

	// Foam material AE strings
	registerPluginResource("bifrostvisplugin", "kFoamDiffuse", "Diffuse");
	registerPluginResource("bifrostvisplugin", "kFoamDiffuseColorRemap", "Diffuse Color Remap");
	registerPluginResource("bifrostvisplugin", "kFoamScatter", "Scatter");
	registerPluginResource("bifrostvisplugin", "kFoamScatterWeightRemap", "Scatter Weight Remap");
	registerPluginResource("bifrostvisplugin", "kFoamReflection", "Reflection");
	registerPluginResource("bifrostvisplugin", "kFoamReflectionWeightRemap", "Reflection Weight Remap");
	registerPluginResource("bifrostvisplugin", "kFoamTransparency", "Transparency");
	registerPluginResource("bifrostvisplugin", "kFoamTransparencyWeightRemap", "Transparency Weight Remap");
	registerPluginResource("bifrostvisplugin", "kFoamUseDiffuseColor", "Use Diffuse Color");


	// Liquid material AE strings
	registerPluginResource("bifrostvisplugin", "kLiquidDiffuse", "Diffuse");
	registerPluginResource("bifrostvisplugin", "kLiquidDiffuseColorRemap", "Diffuse Color Remap");
	registerPluginResource("bifrostvisplugin", "kLiquidReflection", "Reflection");
	registerPluginResource("bifrostvisplugin", "kLiquidReflectionColorRemap", "Reflection Color Remap");
	registerPluginResource("bifrostvisplugin", "kLiquidReflectionWeightRemap", "Reflection Weight Remap");
	registerPluginResource("bifrostvisplugin", "kLiquidRefractionTransmission", "Refraction/Transmission");
	registerPluginResource("bifrostvisplugin", "kLiquidRefractionColorRemap", "Refraction Color Remap");
	registerPluginResource("bifrostvisplugin", "kLiquidTransparencyWeightRemap", "Transparency Weight Remap");
	registerPluginResource("bifrostvisplugin", "kLiquidFresnelControls", "Fresnel");
	registerPluginResource("bifrostvisplugin", "kLiquidFresnelIOR", "Index of Refraction");
	registerPluginResource("bifrostvisplugin", "kLiquidFresnel", "Use Fresnel Reflection");
	registerPluginResource("bifrostvisplugin", "kLiquidZeroDegree", "0 Degree Reflection");
	registerPluginResource("bifrostvisplugin", "kLiquidNinetyDegree", "90 Degree Reflection");
	registerPluginResource("bifrostvisplugin", "kLiquidCurveExponent", "Curve Exponent");
	registerPluginResource("bifrostvisplugin", "kLiquidSurfaceFoam", "Surface Foam");
	registerPluginResource("bifrostvisplugin", "kLiquidSurfaceFoamColorRemap", "Foam Color Remap");
	registerPluginResource("bifrostvisplugin", "kLiquidSurfaceFoamWeightRemap", "Foam Weight Remap");
	registerPluginResource("bifrostvisplugin", "kLiquidUseColorAtMaxDistance", "Use Color at Max Distance");
	registerPluginResource("bifrostvisplugin", "kLiquidMaxDistance", "Max Distance");
	registerPluginResource("bifrostvisplugin", "kLiquidContribution", "Contribution");

	// Load any localized resources
    loadPluginLanguageResources("bifrostvisplugin", "plug-ins/bifrostvisplugin.pres.mel");
}
