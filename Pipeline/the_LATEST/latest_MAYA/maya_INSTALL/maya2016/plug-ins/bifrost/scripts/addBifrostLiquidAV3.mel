// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc setBifrostFoamToDefault( string $cont )
{
	if( objExists( $cont+".emissionRate") ){
		setAttr ($cont+".emissionRate") 1000;
		setAttr ($cont+".minLiquidSpeed") 0.2;
		setAttr ($cont+".minLiquidChurn") 1.0;
		setAttr ($cont+".minLiquidCurvature") 0.3;
		setAttr ($cont+".minLiquidDepth") 0.0;
		setAttr ($cont+".maxLiquidDepth") 3.0;
		setAttr ($cont+".maxSolidDepth") 0.3;
		setAttr ($cont+".inheritLiquidVelocity") 1.0;
		setAttr ($cont+".emitFlatnessToSurface") 0.0;
		setAttr ($cont+".dissipationRate") 5.0;
		setAttr ($cont+".killDensityThreshold") 0.05;
		setAttr ($cont+".buoyancy") 1.0;
		setAttr ($cont+".collideKillDepth") 0.0;
		setAttr ($cont+".windX") 0.0;
		setAttr ($cont+".windZ") 0.0;
		setAttr ($cont+".surfaceOffset") 0.0;
		setAttr ($cont+".snapToSurface") false;
		setAttr ($cont+".pointRadius") 0.2;
		setAttr ($cont+".preserveVolume") 0.5;
		setAttr ($cont+".cameraAdaptivity") 0.0;
		setAttr ($cont+".clipToCameraFrustum") false;
		setAttr ($cont+".cameraFov") 110.0;
		setAttr ($cont+".cameraAspect") 1.0;
		setAttr ($cont+".cameraBuffer") 1.0;
	}
}

global proc string[] addBifrostLiquidAV3(){
    undoInfo -cn "Liquid" -ock ;

    // Save selection
    string $sel[] = `ls -sl`;

    // Create Container node
    string $cont = `bifrost -c -g  "liquid" -rv "2.0"`;
	string $contParents[] = `listRelatives -fullPath -parent $cont`;
	string $contTform = $contParents[0];
	string $contTformBase[] = `ls $contTform`;
	string $baseName = $contTformBase[0];

	// remove namespace if exists from base name because rename adds the current namespace
	string $buffer[];
	int $nTokens = tokenize ($baseName, ":",  $buffer);
	if( $nTokens > 1 ){
		$baseName = $buffer[size($buffer)-1];
	}

    setAttr ($cont+".perFrameCaching") 1;
    if( `optionVar -exists bifrostScratchCacheVar`) {
	if( !`optionVar -query bifrostScratchCacheVar` ) {
		setAttr ($cont+".perFrameCaching") 0;
	}
    }

    setAttr ($cont+".masterVoxelSize") 0.5;

    setAttr ($cont+".vorticityEnable") 1;
    setAttr ($cont+".vorticityDecay") 20.0;
    setAttr ($cont+".vorticityMult") 1.0;
    setAttr ($cont+".vorticityMax") 100;

    setAttr ($cont+".gravityDirectionX	") 0;
    setAttr ($cont+".gravityDirectionY") -1;
    setAttr ($cont+".gravityDirectionZ") 0;
    setAttr ($cont+".gravityMagnitude") 9.8;

    setAttr ($cont+".surfaceTension") 0.072;

    setAttr ($cont+".solidVoxelScale") 1;
    setAttr ($cont+".forceVoxelScale") 1;

    setAttr ($cont+".transportStepAdaptivity") 0.32;
    addAttr -e -min -0 ($cont+".transportStepAdaptivity");
    addAttr -e -max 1 ($cont+".transportStepAdaptivity");

    setAttr ($cont+".enableSpatialAdapt") 1;
    setAttr ($cont+".deleteExceedingParticles") 1;

    setAttr ($cont+".transportTimeScale") 1;
    setAttr ($cont+".minSteps") 1;
    setAttr ($cont+".maxSteps") 1000;

    setAttr ($cont+".timeStepAdaptivity") 0.32;

    setAttr ($cont+".dropletThreshold") 0.97;
    setAttr ($cont+".dropletMergeBackDepth") 2;

    setAttr ($cont+".surfaceBandWidth") 1;
    setAttr ($cont+".interiorParticleDensity") 1;
    setAttr ($cont+".surfaceParticleDensity") 2;

	// guiding parameters on the container
    setAttr ($cont+".guideVoxelScale") 2.0;
    setAttr ($cont+".minSimulationDepth") 3.0;
    setAttr ($cont+".enableGuiding") 0;
    setAttr ($cont+".computeGuideFromHighResLiquid") 1;
    setAttr ($cont+".reseedParticleDensity") 1.0;
    setAttr ($cont+".reseedGuideOverlap") 1.0;
    setAttr ($cont+".reseedLiquidOverlap") 2.5;
    setAttr ($cont+".minReseedAirDistance") 1.0;
    setAttr ($cont+".computeGuideFromSimulationCache") 1;
    setAttr ($cont+".computeGuideFromMesh") 1;

	// foam defaults
	setBifrostFoamToDefault( $cont );

    // Create Shape connect it to the container
    string $shape = `createNode "bifrostShape"`;
    setAttr ($shape+".bifrostRenderType") 1;
    setAttr ($shape+".particles") 1;
    setAttr ($shape+".particleType") 0; // Point particles
    setAttr ($shape+".particleChannel") -type "string" "position";
    setAttr ($shape+".particleColorChannel") -type "string" "velocity";
    setAttr ($shape+".particleVectorChannel") -type "string" "velocity";
    setAttr ($shape+".particleNumericChannel") -type "string" "velocity";
    setAttr ($shape+".particleColorRemapMin") 0.0;
    setAttr ($shape+".particleColorRemapMax") 20.0;
    setAttr ($shape+".voxels") 0;
    setAttr ($shape+".voxelType") 1; // Hard Voxels
    setAttr ($shape+".voxelChannel") -type "string" "distance";
    setAttr ($shape+".voxelColorChannel") -type "string" "velocity";
    setAttr ($shape+".voxelColorRemapMin") 0.0;
    setAttr ($shape+".voxelColorRemapMax") 20.0;
    connectAttr -force ($cont+".Liquid") ($shape+".object");

    // Get transform
    string $parents[] = `listRelatives -fullPath -parent $shape`;
    string $transform = $parents[0];

    // Create the bifrost material shader
    string $shader = `shadingNode -asShader bifrostLiquidMaterial`;
    string $shaderStrs[];
    int $numStrs = `tokenize $shader ":" $shaderStrs`;
    string $shaderBase = $shaderStrs[$numStrs - 1];

    // Create Shading Group and connect shader to it
    string $SG = `createNode -n ($shaderBase+"SG") "shadingEngine"`;
    setAttr ".ihi" 0;
    setAttr -s 3 ".dsm";
    setAttr ".ro" true;
    relationship "link" ":lightLinker1" ($SG+".message") ":defaultLightSet.message";
    relationship "shadowLink" ":lightLinker1" ($SG+".message") ":defaultLightSet.message";
    connectAttr -na ($SG+".pa") ":renderPartition.st";
    connectAttr -f ($shader+".outColor") ($SG+".surfaceShader");

    // Apply the Shading Group on the transform
    select -r $transform;
    sets -e -forceElement $SG;

    // Set default meshing settings
    // Note: the bifrostShape node initialization also sets the defaults
    setAttr ($shape + ".meshingEnable") false  ;
    setAttr ($shape + ".meshingDropletRevealFactor") 3 ;
    setAttr ($shape + ".meshingSurfaceRadius") 1.4 ;
    setAttr ($shape + ".meshingDropletRadius") 1.2 ;
    setAttr ($shape + ".meshingKernelFactor")  2.0;
    setAttr ($shape + ".meshingSmoothing")  2;
    setAttr ($shape + ".meshingResolutionFactor")  1.0;
    setAttr ($shape + ".meshingFlipFaceNormals")  false;

    // create bifrost mesh shape for meshing output
    string $meshShape = `createNode "mesh" -n "bifrostMeshShape#"`;
    string $parents[] = `listRelatives -fullPath -parent $meshShape`;
    string $meshTransform = $parents[0];

    // Set the motion vector of a bifrostMeshShape to its  bifrost velocity CPV.
    setAttr -type "string" ($meshShape + ".motionVectorColorSet") "bifrostVelocity";

    // Connect bifrostShape output to bifrostMeshShape input
    connectAttr -force ($shape + ".meshingOutput") ($meshShape + ".inMesh");

    // Assign the shading group to the birostMeshShape
    select $meshShape;
    sets -e -forceElement $SG;

    // Add mental ray user data to the mesh
    if (`pluginInfo -q -l "Mayatomr"`)
    {
	    // Force Export of Vertex Colors for Bifrost Liquid Material to render properly on meshes
	    catchQuiet( `miCreateGlobalsNode` );
	    catchQuiet( `setAttr "mentalrayGlobals.exportVertexColors" 1` );
	    catchQuiet( `setAttr "miDefaultOptions.autoVolume" 1` );
	    catchQuiet( `setAttr "miDefaultOptions.shadowMethod" 3` );

	    // Add mental ray user data to the mesh
	    bifrostMRMeshUserData $meshTransform ($cont+".Liquid");
    }

    // if we had any meshes selected before creating the container, use them as emitters
    if(size($sel) > 0) {
	    select -r $transform;
	    select -add $sel;
	    addBifrostEmitter "Emitters";
    }

    // Restore selection
    select -r $transform;
    $result[0] = $cont;

	// get the numeric extension by subtracting the base name
	string $numericExtension = `substitute "bifrostLiquid" $baseName ""`;

	$transform = `rename $transform ("liquid"+$numericExtension)`;
	parent $transform $contTform;
	rename $meshTransform ($baseName + "Mesh");
	

    undoInfo -cck ;
    return $result;
}

