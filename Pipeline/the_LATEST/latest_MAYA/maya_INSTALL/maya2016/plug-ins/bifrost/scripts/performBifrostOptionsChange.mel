// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


proc setOptionVars(int $forceFactorySettings)
{
	if( $forceFactorySettings || !`optionVar -exists bifrostBackgroundProcessingVar` )
		optionVar -intValue bifrostBackgroundProcessingVar 1;

	if( $forceFactorySettings || !`optionVar -exists bifrostScratchCacheVar` )
		optionVar -intValue bifrostScratchCacheVar 1;

	if( $forceFactorySettings || !`optionVar -exists bifrostScratchMaxRamUsageVar` )
		optionVar -floatValue bifrostScratchMaxRamUsageVar 12.0;

	if( $forceFactorySettings || !`optionVar -exists bifrostScratchOverrideFolderVar` )
		optionVar -intValue bifrostScratchOverrideFolderVar 0;

	if( $forceFactorySettings || !`optionVar -exists bifrostScratchFolderVar` ) {
		string $tempDir = `internalVar -utd`;
		optionVar -stringValue bifrostScratchFolderVar $tempDir;
	}
}

global proc string assembleBifrostOptionsCmd()
{
	string $cmd = ( "bifrost -edit " +
				"-scratchMaxRAMUsage " + `optionVar -query bifrostScratchMaxRamUsageVar` );

	// query the controlling variable to make sure we need to 
	// set this
	//
	int $scratchOverride = `optionVar -query bifrostScratchOverrideFolderVar`;
	if ( $scratchOverride )
	{
		$cmd = $cmd + (" -overrideDiskLocation " + "\"" + `optionVar -query bifrostScratchFolderVar` + "\"" );
	}	

	$cmd = $cmd + ( " -backgroundProcessing " + `optionVar -query bifrostBackgroundProcessingVar` );
	$cmd = $cmd + ( " -scratchCache " + `optionVar -query bifrostScratchCacheVar` );	
	$cmd = $cmd + ( " -refreshUI" );	

	return $cmd;
}

global proc performBifrostOptionsChange()
{
	string $createMode = "0";
	createBifrostOptions($createMode);
}

global proc overrideDiskLocationUpdate()
{
	int $state = `checkBox -query -value overrideDiskLocationField`;
	// The state controls the other 2 widgets
	//
	textFieldGrp -edit -enable $state overrideDiskDirectoryField;
	symbolButton -edit -enable $state overrideDiskDirectorySelectionButton;
}

global proc backgroundProcessingUpdate()
{
	int $state = `checkBox -query -value backgroundProcessingField`;

	if ( $state ) {
		// force scratchCache to ON when BP is ON
		checkBox -edit -value true scratchCacheField;
		checkBox -edit -enable false scratchCacheField;
	}
	else {
		checkBox -edit -enable true scratchCacheField;
	}
}

global proc overrideDiskDirectorySelectionButtonCallback()
{
	int $fileMode = 3; // The name of a directory. Only directories are displayed in the dialog. 

	string $okCaption = (uiRes("m_performBifrostOptionsChange.kOkOverride"));
	string $result[] = 
		`fileDialog2 -fileMode $fileMode -dialogStyle 2 -okCaption $okCaption`;
	string $fileName = $result[0];

	if ( size($fileName) < 1 )
		return;

	textFieldGrp -edit -text $fileName overrideDiskDirectoryField;
}

global proc bifrostOptionsSetup (string $parent, int $forceFactorySettings)
{
	setOptionVars($forceFactorySettings);
	setParent $parent;

	int $backgroundProcessing = `optionVar -query bifrostBackgroundProcessingVar`;
	int $scratchCache = `optionVar -query bifrostScratchCacheVar`;
	float $scratchMaxRAMUsage = `optionVar -query bifrostScratchMaxRamUsageVar`;
	int $scratchOverride = `optionVar -query bifrostScratchOverrideFolderVar`;
	string $scratchFolder = `optionVar -query bifrostScratchFolderVar`;

	checkBox -edit -value $backgroundProcessing backgroundProcessingField;
	checkBox -edit -value $scratchCache scratchCacheField;
	floatFieldGrp -edit -value1 $scratchMaxRAMUsage scratchMaxRAMUsageField;
	checkBox -edit -value $scratchOverride overrideDiskLocationField;
	textFieldGrp -edit -text $scratchFolder overrideDiskDirectoryField;

	// Additional updating
	overrideDiskLocationUpdate();
	backgroundProcessingUpdate();
}

global proc bifrostOptionsCallback(string $parent, int $doIt, string $action)
{
	int $backgroundProcessing = `checkBox -query -value backgroundProcessingField`;
	int $scratchCache = `checkBox -query -value scratchCacheField`;
	float $scratchMaxRAMUsage = `floatFieldGrp -query -value1 scratchMaxRAMUsageField`;
	int $overrideDiskLocation = `checkBox -query -value overrideDiskLocationField`;
	string $overrideDiskDirectory = `textFieldGrp -query -text overrideDiskDirectoryField`;

	optionVar -iv bifrostBackgroundProcessingVar $backgroundProcessing;
	optionVar -iv bifrostScratchCacheVar $scratchCache;
	optionVar -fv bifrostScratchMaxRamUsageVar $scratchMaxRAMUsage;
	optionVar -iv bifrostScratchOverrideFolderVar $overrideDiskLocation;
	optionVar -sv bifrostScratchFolderVar $overrideDiskDirectory;

	if ($doIt)
	{
		string $cmd = assembleBifrostOptionsCmd();
		evalDeferred $cmd;
	}
}

global proc createBifrostOptions(string $action)
{
	// Global template variables for form spacing
	global int $gOptionBoxTemplateDescriptionMarginWidth;
	global int $gOptionBoxTemplateFrameSpacing;

	// Name of the command for this option box 
	//
	string $commandName = "bifrostOptions";

	// Build the option box "methods"
	//
	string $callback = ($commandName + "Callback ");
	string $setup = ($commandName + "Setup");
	
	//  STEP 1:  Get the option box.
	//  ============================
	//
	//  The value returned is the name of the layout to be used as
	//  the parent for the option box UI.
	//
	string $layout = getOptionBox();
	setParent $layout;

	//  STEP 2:  Pass the command name to the option box.
	//  =================================================
	//
	//  Any default option box behaviour based on the command name is set
	//  up with this call.  For example, updating the 'Help' menu item with
	//  the name of the command.
	//
	setOptionBoxCommandName($commandName);

	//  STEP 3:  Activate the default UI template.
	//  ==========================================
	//
	//  Activate the default UI template so that the layout of this
	//  option box is consistent with the layout of the rest of the
	//  application.
	//
	setUITemplate -pushTemplate OptionBoxTemplate;

    //  STEP 4: Create option box contents.
	//  ===================================
	//
	//  This, of course, will vary from option box to option box.

	string $parent = `formLayout`;

	string $processingFrame = 
	`frameLayout -collapsable false -label (uiRes("m_performBifrostOptionsChange.kBifrostOptionsProcessingOptions"))`; 
		columnLayout -columnAttach "left" 15;
			checkBox -label (uiRes("m_performBifrostOptionsChange.kBifrostOptionsEnableBP")) -changeCommand "backgroundProcessingUpdate" backgroundProcessingField; 
			setParent ..;
		setParent ..;

	string $memoryFrame = `frameLayout -collapsable false -label (uiRes("m_performBifrostOptionsChange.kScratchCacheManagement"))`;
		columnLayout  -columnAttach "left" 15;   		
			checkBox -label (uiRes("m_performBifrostOptionsChange.kBifrostOptionsEnableSC")) scratchCacheField; 
			floatFieldGrp -label (uiRes("m_performBifrostOptionsChange.kBifrostOptionsMaxRAM")) 
				-numberOfFields 1 -precision 2 scratchMaxRAMUsageField;
			checkBox -label (uiRes("m_performBifrostOptionsChange.kBifrostOptionsOverideLoc")) 
				-changeCommand "overrideDiskLocationUpdate" overrideDiskLocationField; 
			
            rowLayout -numberOfColumns 2
                -columnWidth2 425 40 -adjustableColumn 1
                -columnAlign2  "left" "right"
                -columnAttach2 "left" "left";
                textFieldGrp
					-label (uiRes("m_performBifrostOptionsChange.kOverrideDiskDirectory"))
					-tx ""
                    -columnWidth 1 60
                    -columnAlign2 "left" "left"
					overrideDiskDirectoryField;
                symbolButton -image "navButtonBrowse.png" -c ( "overrideDiskDirectorySelectionButtonCallback" ) overrideDiskDirectorySelectionButton;
		
			setParent ..;
	setParent ..; 

	// Attach Description/Settings frames to form layout
	formLayout -e
		-af $processingFrame "top" $gOptionBoxTemplateFrameSpacing
		-af $processingFrame "left" $gOptionBoxTemplateFrameSpacing
		-af $processingFrame "right" $gOptionBoxTemplateFrameSpacing
		-an $processingFrame "bottom"

		-ac $memoryFrame "top" $gOptionBoxTemplateFrameSpacing $processingFrame
		-af $memoryFrame "left" $gOptionBoxTemplateFrameSpacing
		-af $memoryFrame "right" $gOptionBoxTemplateFrameSpacing
		-an $memoryFrame "bottom"

	$parent;

	//	Step 5: Deactivate the default UI template.
	//  ===========================================
	//
	setUITemplate -popTemplate;

	//	Step 6: Customize the buttons.  
	//	==============================
	//

	// 'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-command ($callback + " " + $parent + " " + 1 + " " + $action)
		$applyBtn;

	//  'Save' button.
	//
    string $saveBtn = getOptionBoxSaveBtn();
    button -edit 
        -command ($callback + " " + $parent + " " + 0 + " " + $action +"; hideOptionBox")
        $saveBtn;

	// 'Reset' button
	string $resetBtn = getOptionBoxResetBtn();
	int $resetToDefaults = 1;
	button -edit 
		-command ($setup + " " + $parent + " " + $resetToDefaults)
		$resetBtn;

	//	Step 7: Set the option box title.
	//	=================================
	//
    setOptionBoxTitle(  (uiRes("m_performBifrostOptionsChange.kBifrostOptionsWindowName")) );

	//	Step 8: Customize the 'Help' menu item text.
	//	============================================
	//
	
	setOptionBoxHelpTag( "bifrostOptions" );
	
	//	Step 9: Set the current values of the option box.
	//	=================================================
	//
	eval ($setup + " " + $parent + " " + 0);
	
	//	Step 10: Show the option box.
	//	=============================
	//
	showOptionBox();
}

