// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//	Procedure Name:
//	AEbifrostContainerTemplate
//
//	Description Name;
//	Creates the attribute editor controls for the bifostContainer node
//


global proc int AEassignBiObjCacheFileCB( string $nodeName, string $cacheTypeCap,
									 string $filename,
									 string $fileType )
{
	source "currentProjectParentDir.mel";
		
	string $directory = getParentDir ( $filename );
 	if( !endsWith($directory, "/") ) { $directory += "/"; }

	// parse out the fixed 4 digit padding and filetype info  e.g._point.0001.bif or _voxel.0001.bif
	string $baseName = basename ( $filename, "_...........bif" ); 
	if(endsWith($baseName, "bif") ) {
		// didn't match expected suffix, maybe this is still an old V2 cache? e.g._p.0001.bif
		$baseName = basename ( $filename, "_.......bif" ); 
	}

	string $cacheType = `tolower($cacheTypeCap)`;
	
	// Set the cacheFile attribute
	string $cacheFileAttr = $nodeName + "." + $cacheType + "CacheFileName";
	setAttr $cacheFileAttr -type "string" $baseName;

	// Set the cachePath attribute

	string	$cachePathAttr = $nodeName + "." + $cacheType + "CachePath";
	setAttr $cachePathAttr -type "string" $directory;

	// The cache will be read on on the next actual time change
	string	$cacheControlAttr = $nodeName + "." + $cacheType + "CacheControl";
	setAttr $cacheControlAttr 1;

	// should really write a "capitalize" command
	string $cacheTypeCap = "Liquid";
	if($cacheType == "solid") {
		$cacheTypeCap = "Solid";
	} else if($cacheType == "foam") {
		$cacheTypeCap = "Foam";
	} else if($cacheType == "aero") {
		$cacheTypeCap = "Aero";
	}
	string	$enableCacheAttr = $nodeName + "." + "enable" + $cacheTypeCap + "Cache";
	setAttr $enableCacheAttr 1;

	string $selection[] = `ls -sl`;
	select -r $nodeName;
	bifrost -edit -flushScratchCache;
	select -r $selection;

	string $currentDir = `workspace -q -dir`;
	retainWorkingDirectory ($currentDir);

	return true;
}

global proc AEbiObjCacheFileBrowser( string $cmd, string $nodeName, string $cacheType )
{

	string	$cachePathAttr = $nodeName + "." + $cacheType + "CachePath";

	string $directory = `getAttr $cachePathAttr`;
	global string $gDefaultFileBrowserDir;

	if(($directory != "") && (`filetest -d $directory`) ) {
		$gDefaultFileBrowserDir = $directory;
	}

	string  $workspace = `workspace -q -fn`;
	setWorkingDirectory $workspace "bifrostCache" "cache/bifrost";
	if(!(`filetest -d $gDefaultFileBrowserDir`)) {
		$gDefaultFileBrowserDir = `workspace -q -dir`;
	}
	fileBrowser ($cmd, (uiRes("m_AEbifrostContainerTemplate.kAssignObjCacheFile")), "", 0);
}

global proc AEbilcNameNew(string $cacheName)
{
	setUITemplate -pst attributeEditorTemplate;
		columnLayout -adj true;
			rowLayout -nc 3 -adj 2 lcNameLayout;
        		text -label (uiRes("m_AEbifrostContainerTemplate.kLcCacheName")) lcNameText;
		        textField lcNameField;
		            symbolButton -image "navButtonBrowse.png" browser;
				setParent ..;
		setParent ..;

	setParent ..;

	setUITemplate -ppt;
	setParent ..;

	AEbilcNameReplace( $cacheName );
}


global proc AEbilcNameReplace(string $cacheName)
{
	string	$buffer[];
	tokenize($cacheName, ".", $buffer);
	string	$nodeName = $buffer[0];

	// Filename Attribute
	//
    connectControl -fileName lcNameField $cacheName;
    string $command = "AEassignBiObjCacheFileCB " + $nodeName + " Liquid";
    button -e -c ("AEbiObjCacheFileBrowser \"" + $command + "\" " + $nodeName + " liquid") browser;
}

global proc AEbilcPathNew(string $cachePath)
{

	setUITemplate -pst attributeEditorTemplate;
		columnLayout -adj true;
			rowLayout -nc 3 -adj 2 lcPathLayout;
        		text -label (uiRes("m_AEbifrostContainerTemplate.kLcDirectory")) lcPathText;
		        textField lcPathField;
				setParent ..;

		setParent ..;
	setParent ..;

	setUITemplate -ppt;
	setParent ..;

	AEbilcPathReplace( $cachePath );
}

global proc AEbilcPathReplace(string $cachePath)
{
	// cachePath Attribute
	//
    connectControl -fileName lcPathField $cachePath;

}

global proc AEbiscNameNew(string $cacheName)
{
	setUITemplate -pst attributeEditorTemplate;
		columnLayout -adj true;
			rowLayout -nc 3 -adj 2 scNameLayout;
        		text -label (uiRes("m_AEbifrostContainerTemplate.kScCacheName")) scNameText;
		        textField scNameField;
		            symbolButton -image "navButtonBrowse.png" browser;
				setParent ..;
		setParent ..;

	setParent ..;

	setUITemplate -ppt;
	setParent ..;

	AEbiscNameReplace( $cacheName );
}


global proc AEbiscNameReplace(string $cacheName)
{
	string	$buffer[];
	tokenize($cacheName, ".", $buffer);
	string	$nodeName = $buffer[0];

	// Filename Attribute
	//
    connectControl -fileName scNameField $cacheName;
    string $command = "AEassignBiObjCacheFileCB " + $nodeName + " Solid";
    button -e -c ("AEbiObjCacheFileBrowser \"" + $command + "\" " + $nodeName + " solid") browser;
}


global proc AEbiscPathNew(string $cachePath)
{

	setUITemplate -pst attributeEditorTemplate;
		columnLayout -adj true;
			rowLayout -nc 3 -adj 2 scPathLayout;
        		text -label (uiRes("m_AEbifrostContainerTemplate.kScDirectory")) scPathText;
		        textField scPathField;
				setParent ..;

		setParent ..;
	setParent ..;

	setUITemplate -ppt;
	setParent ..;

	AEbiscPathReplace( $cachePath );
}

global proc AEbiscPathReplace(string $cachePath)
{
	// cachePath Attribute
	//
    connectControl -fileName scPathField $cachePath;

}

global proc AEbifcNameNew(string $cacheName)
{
	setUITemplate -pst attributeEditorTemplate;
		columnLayout -adj true;
			rowLayout -nc 3 -adj 2 fcNameLayout;
        		text -label (uiRes("m_AEbifrostContainerTemplate.kFcCacheName")) fcNameText;
		        textField fcNameField;
		            symbolButton -image "navButtonBrowse.png" browser;
				setParent ..;
		setParent ..;

	setParent ..;

	setUITemplate -ppt;
	setParent ..;

	AEbifcNameReplace( $cacheName );
}


global proc AEbifcNameReplace(string $cacheName)
{
	string	$buffer[];
	tokenize($cacheName, ".", $buffer);
	string	$nodeName = $buffer[0];

	// Filename Attribute
	//
    connectControl -fileName fcNameField $cacheName;
    string $command = "AEassignBiObjCacheFileCB " + $nodeName + " Foam";
    button -e -c ("AEbiObjCacheFileBrowser \"" + $command + "\" " + $nodeName + " foam") browser;
}

global proc AEbifcPathNew(string $cachePath)
{

	setUITemplate -pst attributeEditorTemplate;
		columnLayout -adj true;
			rowLayout -nc 3 -adj 2 fcPathLayout;
        		text -label (uiRes("m_AEbifrostContainerTemplate.kFcDirectory")) fcPathText;
		        textField fcPathField;
				setParent ..;

		setParent ..;
	setParent ..;

	setUITemplate -ppt;
	setParent ..;

	AEbifcPathReplace( $cachePath );
}

global proc AEbifcPathReplace(string $cachePath)
{
	// cachePath Attribute
	//
    connectControl -fileName fcPathField $cachePath;

}

global proc AEbiacNameNew(string $cacheName)
{
	setUITemplate -pst attributeEditorTemplate;
		columnLayout -adj true;
			rowLayout -nc 3 -adj 2 acNameLayout;
        		text -label (uiRes("m_AEbifrostContainerTemplate.kAcCacheName")) acNameText;
		        textField acNameField;
		            symbolButton -image "navButtonBrowse.png" browser;
				setParent ..;
		setParent ..;

	setParent ..;

	setUITemplate -ppt;
	setParent ..;

	AEbiacNameReplace( $cacheName );
}


global proc AEbiacNameReplace(string $cacheName)
{
	string	$buffer[];
	tokenize($cacheName, ".", $buffer);
	string	$nodeName = $buffer[0];

	// Filename Attribute
	//
    connectControl -fileName acNameField $cacheName;
    string $command = "AEassignBiObjCacheFileCB " + $nodeName + " Aero";
    button -e -c ("AEbiObjCacheFileBrowser \"" + $command + "\" " + $nodeName + " aero") browser;
}

global proc AEbiacPathNew(string $cachePath)
{

	setUITemplate -pst attributeEditorTemplate;
		columnLayout -adj true;
			rowLayout -nc 3 -adj 2 acPathLayout;
        		text -label (uiRes("m_AEbifrostContainerTemplate.kAcDirectory")) acPathText;
		        textField acPathField;
				setParent ..;

		setParent ..;
	setParent ..;

	setUITemplate -ppt;
	setParent ..;

	AEbiacPathReplace( $cachePath );
}

global proc AEbiacPathReplace(string $cachePath)
{
	// cachePath Attribute
	//
    connectControl -fileName acPathField $cachePath;

}


global proc int AEassignBiGuidingCacheFileCB( string $cacheFileAttr,
					      string $filename,
					      string $fileType )
{
	source "currentProjectParentDir.mel";
		
	string $directory = getParentDir ( $filename );
 	if( !endsWith($directory, "/") ) { $directory += "/"; }

	// parse out the fixed 4 digit padding and filetype info  e.g._point.0001.bif or _voxel.0001.bif
	string $baseName = basename ( $filename, "_...........bif" ); 
	if(endsWith($baseName, "bif") ) {
		// didn't match expected suffix, maybe this is still an old V2 cache? e.g._p.0001.bif
		$baseName = basename ( $filename, "_.......bif" ); 
	}

	$baseName = $baseName + "_voxel";

	// Set the cacheFile attribute
	setAttr $cacheFileAttr -type "string" $baseName;

	// Set the cachePath attribute
	string	$buffer[];
	tokenize($cacheFileAttr, ".", $buffer);
	string	$cachePathAttr = $buffer[0] + ".simulationCachePath";
	setAttr $cachePathAttr -type "string" $directory;

	string $selection[] = `ls -sl`;
	select -r $selection;

	string $currentDir = `workspace -q -dir`;
	retainWorkingDirectory ($currentDir);

	return true;
}

global proc AEbiGuidingCacheFileBrowser( string $cmd, string $cacheName )
{
	string	$buffer[];
	tokenize($cacheName, ".", $buffer);
	string	$cachePathAttr = $buffer[0] + ".simulationCachePath";

	string $directory = `getAttr $cachePathAttr`;
	global string $gDefaultFileBrowserDir;

	if(($directory != "") && (`filetest -d $directory`) ) {
		$gDefaultFileBrowserDir = $directory;
	}

	string  $workspace = `workspace -q -fn`;
	setWorkingDirectory $workspace "bifrostCache" "cache/bifrost";
	if(!(`filetest -d $gDefaultFileBrowserDir`)) {
		$gDefaultFileBrowserDir = `workspace -q -dir`;
	}
	fileBrowser ($cmd, (uiRes("m_AEbifrostContainerTemplate.kAssignGuidingCacheFile")), "", 0);
}

global proc AEbiGuidingLowResCachePathNew(string $cachePath)
{

	setUITemplate -pst attributeEditorTemplate;
		columnLayout -adj true;
			rowLayout -nc 3 -adj 2 guidingLowResCachePathLayout;
        		text -label (uiRes("m_AEbifrostContainerTemplate.kGuidingLowResBaseDirectory")) guidingLowResCachePathText;
		        textField guidingLowResCachePathField;
				setParent ..;

		setParent ..;
	setParent ..;

	setUITemplate -ppt;
	setParent ..;

	AEbiGuidingLowResCachePathReplace( $cachePath );
}

global proc AEbiGuidingLowResCachePathReplace(string $cachePath)
{
	// cachePath Attribute
	//
    	connectControl -fileName guidingLowResCachePathField $cachePath;
}

global proc AEbiGuidingLowResBaseNameNew(string $baseName)
{
	setUITemplate -pst attributeEditorTemplate;
		columnLayout -adj true;
			rowLayout -nc 3 -adj 2 guidingLowResBaseNameLayout;
        		text -label (uiRes("m_AEbifrostContainerTemplate.kGuidingLowResBaseName")) guidingLowResBaseNameText;
		        textField guidingLowResBaseNameField;
		            symbolButton -image "navButtonBrowse.png" browser;
				setParent ..;
		setParent ..;

	setParent ..;

	setUITemplate -ppt;
	setParent ..;

	AEbiGuidingLowResBaseNameReplace( $baseName );
}

global proc AEbiGuidingLowResBaseNameReplace(string $baseName)
{
	string	$buffer[];
	tokenize($baseName, ".", $buffer);
	string	$nodeName = $buffer[0];

	// Filename Attribute
	//
    connectControl -fileName guidingLowResBaseNameField $baseName;
    string $command = "AEassignBiGuidingCacheFileCB " + " " + $baseName;
    button -e -c ("AEbiGuidingCacheFileBrowser \"" + $command + "\" " + $nodeName ) browser;
}



// AE dim and Channel Box remove attributes
global proc AEdimCBremoveContControls( string $nodeName, string $attrName, int $dim )
{
	editorTemplate -dimControl $nodeName $attrName					$dim;	
	int $keyable = !$dim; 
	//setAttr -keyable $keyable -channelBox $keyable ($nodeName + "." + $attrName);
    if(`attributeExists $attrName $nodeName`) {
	    setAttr -keyable $keyable ($nodeName + "." + $attrName);
    }
}

global proc AEdimBifrostEnableFoamControls( string $nodeName )
{
	if(!`exists addBifrostCollider`) {
		source "addBifrostCollider.mel";
	}

	if(`attributeExists "minLiquidChurn" $nodeName`) {
		int $dim = !`getAttr ($nodeName + ".enable")`;
		if( !$dim ){
			$dim = !`getAttr ($nodeName + ".enableFoam")`;
		}
		AEdimCBremoveContControls( $nodeName, "emissionRate", $dim );
		AEdimCBremoveContControls( $nodeName, "minLiquidSpeed", $dim );
		AEdimCBremoveContControls( $nodeName, "minLiquidChurn", $dim );
		AEdimCBremoveContControls( $nodeName, "minLiquidCurvature", $dim );
		AEdimCBremoveContControls( $nodeName, "minLiquidDepth", $dim );
		AEdimCBremoveContControls( $nodeName, "maxLiquidDepth", $dim );
		AEdimCBremoveContControls( $nodeName, "maxSolidDepth", $dim );
		AEdimCBremoveContControls( $nodeName, "inheritLiquidVelocity", $dim );
		AEdimCBremoveContControls( $nodeName, "emitFlatnessToSurface", $dim );
		AEdimCBremoveContControls( $nodeName, "cameraAdaptivity", $dim );
		AEdimCBremoveContControls( $nodeName, "clipToCameraFrustum", $dim );
		AEdimCBremoveContControls( $nodeName, "cameraFov", $dim );
		AEdimCBremoveContControls( $nodeName, "cameraAspect", $dim );
		AEdimCBremoveContControls( $nodeName, "cameraBuffer", $dim );
		AEdimCBremoveContControls( $nodeName, "dissipationRate", $dim );
		AEdimCBremoveContControls( $nodeName, "killDensityThreshold", $dim );
		AEdimCBremoveContControls( $nodeName, "buoyancy", $dim );
		AEdimCBremoveContControls( $nodeName, "collideKillDepth", $dim );
		AEdimCBremoveContControls( $nodeName, "windX", $dim );
		AEdimCBremoveContControls( $nodeName, "windZ", $dim );
		AEdimCBremoveContControls( $nodeName, "snapToSurface", $dim );
		AEdimCBremoveContControls( $nodeName, "surfaceOffset", $dim );
		AEdimCBremoveContControls( $nodeName, "preserveVolume", $dim );
		AEdimCBremoveContControls( $nodeName, "pointRadius", $dim );
	}
}

global proc AEdimBifrostEnableControls( string $nodeName )
{
	if(!`exists addBifrostCollider`) {
		source "addBifrostCollider.mel";
	}

	if(`attributeExists "masterVoxelSize" $nodeName`) {
		int $dim = !`getAttr ($nodeName + ".enable")`;
		string $graphType = bifrostGraphType( $nodeName );
		if ( $graphType == "aero" ) {
			AEdimCBremoveContControls( $nodeName, "startFrame", $dim );

			AEdimCBremoveContControls( $nodeName, "masterVoxelSize", $dim );
			AEdimCBremoveContControls( $nodeName, "masterVoxelSizeRenderFactor", $dim );

			AEdimCBremoveContControls( $nodeName, "gravityMagnitude", $dim );
			AEdimCBremoveContControls( $nodeName, "gravityDirection", $dim );
			AEdimCBremoveContControls( $nodeName, "gravityDirectionX", $dim );
			AEdimCBremoveContControls( $nodeName, "gravityDirectionY", $dim );
			AEdimCBremoveContControls( $nodeName, "gravityDirectionZ", $dim );

			AEdimCBremoveContControls( $nodeName, "perFrameCaching", $dim );
			AEdimCBremoveContControls( $nodeName, "enableDiskCache", $dim );
			AEdimEnableDiskCacheControls( $nodeName );

			AEdimCBremoveContControls( $nodeName, "enableSpatialAdapt", $dim );
	
			AEdimCBremoveContControls( $nodeName, "timeStepAdaptivity", $dim );
			AEdimCBremoveContControls( $nodeName, "minTimeSteps", $dim );
			AEdimCBremoveContControls( $nodeName, "maxTimeSteps", $dim );


			AEdimCBremoveContControls( $nodeName, "airDensity", $dim );
			AEdimCBremoveContControls( $nodeName, "airTemperature", $dim );
			AEdimCBremoveContControls( $nodeName, "smokeThreshold", $dim );

			AEdimCBremoveContControls( $nodeName, "flipParticleDensity", $dim );
			AEdimCBremoveContControls( $nodeName, "renderParticleDensity", $dim );
		} else {
			AEdimCBremoveContControls( $nodeName, "startFrame", $dim );

			AEdimCBremoveContControls( $nodeName, "masterVoxelSize", $dim );

			AEdimCBremoveContControls( $nodeName, "gravityMagnitude", $dim );
			AEdimCBremoveContControls( $nodeName, "gravityDirection", $dim );
			AEdimCBremoveContControls( $nodeName, "gravityDirectionX", $dim );
			AEdimCBremoveContControls( $nodeName, "gravityDirectionY", $dim );
			AEdimCBremoveContControls( $nodeName, "gravityDirectionZ", $dim );

			AEdimCBremoveContControls( $nodeName, "perFrameCaching", $dim );
			AEdimCBremoveContControls( $nodeName, "enableDiskCache", $dim );
			AEdimEnableDiskCacheControls( $nodeName );

			AEdimCBremoveContControls( $nodeName, "enableSpatialAdapt", $dim );
			AEdimCBremoveContControls( $nodeName, "deleteExceedingParticles", $dim );

			AEdimCBremoveContControls( $nodeName, "transportStepAdaptivity", $dim );
			AEdimCBremoveContControls( $nodeName, "minSteps", $dim );
			AEdimCBremoveContControls( $nodeName, "maxSteps", $dim );
			AEdimCBremoveContControls( $nodeName, "transportTimeScale", $dim );
	
			AEdimCBremoveContControls( $nodeName, "timeStepAdaptivity", $dim );
			AEdimCBremoveContControls( $nodeName, "minTimeSteps", $dim );
			AEdimCBremoveContControls( $nodeName, "maxTimeSteps", $dim );
	
			AEdimCBremoveContControls( $nodeName, "dropletThreshold", $dim );
			AEdimCBremoveContControls( $nodeName, "dropletMergeBackDepth", $dim );
	
			AEdimCBremoveContControls( $nodeName, "surfaceBandWidth", $dim );
			AEdimCBremoveContControls( $nodeName, "interiorParticleDensity", $dim );
			AEdimCBremoveContControls( $nodeName, "surfaceParticleDensity", $dim );

			AEdimCBremoveContControls( $nodeName, "solidVoxelScale", $dim );
		
			AEdimCBremoveContControls( $nodeName, "forceVoxelScale", $dim );
	
			AEdimCBremoveContControls( $nodeName, "vorticityEnable", $dim );
			AEdimCBremoveContControls( $nodeName, "vorticityDecay", $dim );
			AEdimCBremoveContControls( $nodeName, "vorticityMult", $dim );
			AEdimCBremoveContControls( $nodeName, "vorticityMax", $dim );
	
			AEdimCBremoveContControls( $nodeName, "surfaceTensionEnable", $dim );
			AEdimCBremoveContControls( $nodeName, "surfaceTension", $dim );

			AEdimCBremoveContControls( $nodeName, "enableGuiding", $dim );
			AEdimEnableGuidingControls( $nodeName );
			AEdimBifrostEnableFoamControls( $nodeName );
		}
	}
}

global proc AEdimVorticityEnableControls( string $nodeName )
{
	if(`attributeExists "masterVoxelSize" $nodeName`) {
		int $enable = `getAttr ($nodeName + ".enable")`;
		if(  $enable ){
			if(`attributeExists "vorticityEnable" $nodeName`) {
				int $dim = !`getAttr ($nodeName + ".vorticityEnable")`;

				AEdimCBremoveContControls( $nodeName, "vorticityDecay", $dim );
				AEdimCBremoveContControls( $nodeName, "vorticityMult", $dim );
				AEdimCBremoveContControls( $nodeName, "vorticityMax", $dim );
			}
		}
	}
}

global proc AEdimSurfaceTensionEnableControls( string $nodeName )
{
	if(`attributeExists "masterVoxelSize" $nodeName`) {
		int $enable = `getAttr ($nodeName + ".enable")`;
		if(  $enable ){
			if(`attributeExists "surfaceTensionEnable" $nodeName`) {
				int $dim = !`getAttr ($nodeName + ".surfaceTensionEnable")`;

				AEdimCBremoveContControls( $nodeName, "surfaceTension", $dim );
			}
		}
	}
}

global proc AEdimEnableDiskCacheControls( string $nodeName )
{
	int $dim = !`getAttr ($nodeName + ".enable")`;
	if( !$dim ){
		$dim = !`getAttr ($nodeName + ".enableDiskCache")`;
	}

	AEdimCBremoveContControls( $nodeName, "cachingControl", 1 );
	AEdimCBremoveContControls( $nodeName, "cacheDir", $dim );
	AEdimCBremoveContControls( $nodeName, "cacheName", $dim ); 
}

global proc AEdimEnableLiquidCacheControls( string $nodeName )
{
	if(`attributeExists "enableLiquidCache" $nodeName`) {
		int $dim = !`getAttr ($nodeName + ".enable")`;
		if( !$dim ){
			$dim = !`getAttr ($nodeName + ".enableLiquidCache")`;
		}

		AEdimCBremoveContControls( $nodeName, "liquidCacheControl", $dim);
		AEdimCBremoveContControls( $nodeName, "liquidCompressionQuality", $dim);
		AEdimCBremoveContControls( $nodeName, "liquidCachePath", $dim );
		AEdimCBremoveContControls( $nodeName, "liquidCacheFileName", $dim ); 
	}
}
global proc AEdimEnableAeroCacheControls( string $nodeName )
{
	if(`attributeExists "enableAeroCache" $nodeName`) {
		int $dim = !`getAttr ($nodeName + ".enable")`;
		if( !$dim ){
			$dim = !`getAttr ($nodeName + ".enableAeroCache")`;
		}

		AEdimCBremoveContControls( $nodeName, "aeroCacheControl", $dim);
		AEdimCBremoveContControls( $nodeName, "aeroCompressionQuality", $dim);
		AEdimCBremoveContControls( $nodeName, "aeroCachePath", $dim );
		AEdimCBremoveContControls( $nodeName, "aeroCacheFileName", $dim ); 
	}
}
global proc AEdimEnableSolidCacheControls( string $nodeName )
{
	if(`attributeExists "enableSolidCache" $nodeName`) {
		int $dim = !`getAttr ($nodeName + ".enable")`;
		if( !$dim ){
			$dim = !`getAttr ($nodeName + ".enableSolidCache")`;
		}

		AEdimCBremoveContControls( $nodeName, "solidCacheControl", $dim);
		AEdimCBremoveContControls( $nodeName, "solidCompressionQuality", $dim);
		AEdimCBremoveContControls( $nodeName, "solidCachePath", $dim );
		AEdimCBremoveContControls( $nodeName, "solidCacheFileName", $dim ); 
	}
}
global proc AEdimEnableFoamCacheControls( string $nodeName )
{
	if(`attributeExists "enableFoamCache" $nodeName`) {
		int $dim = !`getAttr ($nodeName + ".enable")`;
		if( !$dim ){
			$dim = !`getAttr ($nodeName + ".enableFoam")`;
			if( !$dim ){
				$dim = !`getAttr ($nodeName + ".enableFoamCache")`;
			}
		}

		AEdimCBremoveContControls( $nodeName, "foamCacheControl", $dim);
		AEdimCBremoveContControls( $nodeName, "foamCompressionQuality", $dim);
		AEdimCBremoveContControls( $nodeName, "foamCachePath", $dim );
		AEdimCBremoveContControls( $nodeName, "foamCacheFileName", $dim ); 
	}
}



global proc AEdimEnableGuidingControls( string $nodeName )
{
	int $dim = !`getAttr ($nodeName + ".enable")`;
	if( !$dim ){
	    if(`attributeExists "enableGuiding" $nodeName`) {
		$dim = !`getAttr ($nodeName + ".enableGuiding")`;
	    }
	}

	AEdimCBremoveContControls( $nodeName, "computeGuideFromSimulationCache", $dim );
	AEdimCBremoveContControls( $nodeName, "computeGuideFromMesh", $dim );
	AEdimCBremoveContControls( $nodeName, "computeGuideFromHighResLiquid", $dim );
	AEdimCBremoveContControls( $nodeName, "minSimulationDepth", $dim ); 
	AEdimCBremoveContControls( $nodeName, "reseedParticleDensity", $dim ); 
	AEdimCBremoveContControls( $nodeName, "reseedGuideOverlap", $dim ); 
	AEdimCBremoveContControls( $nodeName, "reseedLiquidOverlap", $dim ); 
	AEdimCBremoveContControls( $nodeName, "minReseedAirDistance", $dim );
	AEdimEnableGuidingLowresCacheControls( $nodeName );
	AEdimEnableGuidingMeshControls($nodeName );
}

global proc AEdimEnableGuidingLowresCacheControls( string $nodeName )
{
	int $dim = !`getAttr ($nodeName + ".enable")`;
	if( !$dim ){
	    if(`attributeExists "enableGuiding" $nodeName`) {
	    $dim = !`getAttr ($nodeName + ".enableGuiding")`;
	    if( !$dim ){
	    	if(`attributeExists "computeGuideFromSimulationCache" $nodeName`) {
		    $dim = !`getAttr ($nodeName + ".computeGuideFromSimulationCache")`;
	    	}
	    }
	    }
	}

	AEdimCBremoveContControls( $nodeName, "simulationCachePath", $dim ); 
	AEdimCBremoveContControls( $nodeName, "simulationCacheFilename", $dim ); 
}

global proc AEdimEnableGuidingMeshControls( string $nodeName )
{
	int $dim = !`getAttr ($nodeName + ".enable")`;
	if( !$dim ){
	    if(`attributeExists "enableGuiding" $nodeName`) {
	    $dim = !`getAttr ($nodeName + ".enableGuiding")`;
	    if( !$dim ){
	    	if(`attributeExists "computeGuideFromMesh" $nodeName`) {
		    $dim = !`getAttr ($nodeName + ".computeGuideFromMesh")`;
	    	}
	    }
	    }
	}

	AEdimCBremoveContControls( $nodeName, "guideVoxelScale", $dim );
}

global proc AEdimEnableSpatialAdaptivityControls( string $nodeName )
{
	int $dim = !`getAttr ($nodeName + ".enable")`;
	if( !$dim ){
	    if(`attributeExists "enableSpatialAdapt" $nodeName`) {
		$dim = !`getAttr ($nodeName + ".enableSpatialAdapt")`;
	    }
	}

	AEdimCBremoveContControls( $nodeName, "deleteExceedingParticles", $dim );
}

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Custom methods for the Clipping UI.
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
global proc AEbifrostContainerClippingNew(string $clipBBoxMin, string $clipBBoxMax, string $clipBBoxTransform)
{
	// Build control names from attributes
	string $clipInputMeshCtrl = "bifrostClipping";
	string $clipInputMeshFormLayout = ($clipInputMeshCtrl + "FormLayout");

	string $clipInputMeshLabel = ($clipInputMeshCtrl + "Label");
	string $clipInputMeshField = ($clipInputMeshCtrl + "Field");
	string $clipInputMeshUseSelected = ($clipInputMeshCtrl + "UseSelected");

	setUITemplate -pst attributeEditorTemplate;

	formLayout $clipInputMeshFormLayout;

		text
			-label (uiRes("m_AEbifrostContainerTemplate.kClipInputMeshLabel")) 
			-align left
			$clipInputMeshLabel;
		attrNavigationControlGrp
			-label (uiRes("m_AEbifrostContainerTemplate.kClipInputMeshField")) 
			-attribute $clipBBoxMin
			-enable 0
			-cw3 0 123 0
			$clipInputMeshField;
		button
			-label (uiRes("m_AEbifrostContainerTemplate.kClipInputMeshUseSelected")) 
			-command ("AEbifrostContainerClippingUseSelected " + $clipBBoxMin + " " + $clipBBoxMax + " " + $clipBBoxTransform )
			-height 20
			$clipInputMeshUseSelected;

		formLayout -edit
			-attachForm $clipInputMeshLabel "left" 44
			-attachNone $clipInputMeshLabel "right"
			-attachForm $clipInputMeshLabel "top" 4
			-attachNone $clipInputMeshLabel "bottom"

			-attachForm $clipInputMeshField "left" 40
			-attachControl $clipInputMeshField "right" 0 $clipInputMeshUseSelected
			-attachControl $clipInputMeshField "top" 4 $clipInputMeshLabel
			-attachNone $clipInputMeshField "bottom"

			-attachNone $clipInputMeshUseSelected "left"
			-attachForm $clipInputMeshUseSelected "right" 40
			-attachControl $clipInputMeshUseSelected "top" 4 $clipInputMeshLabel
			-attachNone $clipInputMeshUseSelected "bottom"

			$clipInputMeshFormLayout;

	setParent ..;

	setUITemplate -ppt;

	AEbifrostContainerClippingReplace($clipBBoxMin, $clipBBoxMax, $clipBBoxTransform);
}

global proc AEbifrostContainerClippingReplace(string $clipBBoxMin, string $clipBBoxMax, string $clipBBoxTransform)
{
	// Build control names from attributes
	string $clipInputMeshCtrl = "bifrostClipping";

	string $clipInputMeshLabel = ($clipInputMeshCtrl + "Label");
	string $clipInputMeshField = ($clipInputMeshCtrl + "Field");
	string $clipInputMeshUseSelected = ($clipInputMeshCtrl + "UseSelected");

	attrNavigationControlGrp -e -attribute $clipBBoxMin -enable 0 $clipInputMeshField;
	button -e -command ("AEbifrostContainerClippingUseSelected " + $clipBBoxMin + " " + $clipBBoxMax + " " + $clipBBoxTransform) $clipInputMeshUseSelected;
}

global proc AEbifrostContainerClippingUseSelected(string $clipBBoxMin, string $clipBBoxMax, string $clipBBoxTransform)
{
	// Make sure exactly one node is selected
	string $selectedNodes[] = `ls -sl`;
	if (size($selectedNodes) > 1)
		error (uiRes("m_AEbifrostContainerTemplate.kClipInputMeshMoreThanOne"));
	else if (size($selectedNodes) == 0)
	{
		// Disconnect the attribute if nothing is selected.
		string $sourceMin[] = `listConnections -plugs true $clipBBoxMin`;
		if (size($sourceMin) > 0)
			disconnectAttr $sourceMin[0] $clipBBoxMin;
		string $sourceMax[] = `listConnections -plugs true $clipBBoxMax`;
		if (size($sourceMax) > 0)
			disconnectAttr $sourceMax[0] $clipBBoxMax;
		string $sourceTransform[] = `listConnections -plugs true $clipBBoxTransform`;
		if (size($sourceTransform) > 0)
			disconnectAttr $sourceTransform[0] $clipBBoxTransform;

		// Reset to empty value
		setAttr $clipBBoxMin -type double3 0 0 0 ;
		setAttr $clipBBoxMax -type double3 0 0 0 ;

		return;
	}

	// Make sure that node is a mesh
	string $mesh;
	if (`objectType -isAType mesh $selectedNodes[0]`)
		$mesh = $selectedNodes[0];
	else
	{
		// Extend to shape
		string $shapes[] = `listRelatives -noIntermediate -shapes -type mesh $selectedNodes[0]`;
		if (size($shapes) == 0) 
		{
			string $tmpl = (uiRes("m_AEbifrostContainerTemplate.kClipInputMeshNotMesh"));
			string $str = `format -stringArg $selectedNodes[0] $tmpl`;
			error $str;
		}
		$mesh = $shapes[0];
	}

	connectAttr -force ($mesh + ".boundingBoxMin") $clipBBoxMin;
	connectAttr -force ($mesh + ".boundingBoxMax") $clipBBoxMax;
	connectAttr -force ($mesh + ".worldMatrix[0]") $clipBBoxTransform;
}

global proc AEbiGuidingLowResCacheEnableNew(string $baseName)
{
	// $baseName is the "nodeName.attributeName"
	string	$buffer[];
	tokenize($baseName, ".", $buffer);
	string	$nodeName = $buffer[0];

	setUITemplate -pst attributeEditorTemplate;
		      rowLayout -nc 2 -adj 2 guidingLowResCacheEnableLayout;
		      text -label (uiRes("m_AEbifrostContainerTemplate.kGuidingModeLabel"));
		      checkBox -label (uiRes("m_AEbifrostContainerTemplate.kGuidingLowResCache")) -changeCommand ( "AEdimEnableGuidingLowresCacheControls "+$nodeName ) computeGuideFromLowresCacheCheckBox;
	setParent ..;

	setUITemplate -ppt;
	setParent ..;

	AEbiGuidingLowResCacheEnableReplace( $baseName );
}

global proc AEbiGuidingLowResCacheEnableReplace(string $baseName)
{
	string	$buffer[];
	tokenize($baseName, ".", $buffer);
	string	$nodeName = $buffer[0];

    	connectControl computeGuideFromLowresCacheCheckBox $baseName;
	checkBox -e -changeCommand ( "AEdimEnableGuidingLowresCacheControls "+$nodeName ) computeGuideFromLowresCacheCheckBox;
}

global proc AEbifrostContainerTemplate(string $nodeName)
{
	editorTemplate -beginScrollLayout;
		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kLiquidSolverAttributes")) -collapse 0;
			editorTemplate -addControl enable "AEdimBifrostEnableControls";
			editorTemplate -addControl "startFrame";

			editorTemplate -addControl "gravityMagnitude";
			editorTemplate -addControl "gravityDirection";	
		editorTemplate -endLayout;
		AEshowBlockIfAttrExists {"gravityMagnitude"};

		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kResolution")) -collapse 0;
			editorTemplate -addControl "masterVoxelSize";
			string $vsrflabel = (uiRes("m_AEbifrostContainerTemplate.kAeroVoxelSizeRenderFactor"));
			editorTemplate -label $vsrflabel -addControl "masterVoxelSizeRenderFactor";
		editorTemplate -endLayout;
		AEshowBlockIfAttrExists {"masterVoxelSize"};
		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kFoam")) -collapse 1;
			editorTemplate -addControl "enableFoam" "AEdimBifrostEnableFoamControls";
			editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kFoamEmission")) -collapse 0;
				editorTemplate -addControl "emissionRate";
				editorTemplate -addControl "minLiquidSpeed";
				editorTemplate -addControl "minLiquidChurn";
				editorTemplate -addControl "minLiquidCurvature";	
				editorTemplate -addControl "minLiquidDepth";	
				editorTemplate -addControl "maxLiquidDepth";	
				editorTemplate -addControl "maxSolidDepth";	
				editorTemplate -addControl "inheritLiquidVelocity";
				editorTemplate -addControl "emitFlatnessToSurface";
				editorTemplate -addControl "cameraAdaptivity";
				editorTemplate -addControl "clipToCameraFrustum";
				editorTemplate -addControl "cameraFov";
				editorTemplate -addControl "cameraAspect";
				editorTemplate -addControl "cameraBuffer";
			editorTemplate -endLayout;

			editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kFoamPropagation")) -collapse 0;
				editorTemplate -addControl "dissipationRate";	
				editorTemplate -addControl "killDensityThreshold";
				editorTemplate -addControl "buoyancy";		
				editorTemplate -addControl "snapToSurface";
				editorTemplate -addControl "surfaceOffset";
				editorTemplate -addControl "preserveVolume";
				editorTemplate -addControl "pointRadius";
				editorTemplate -addControl "collideKillDepth";
				editorTemplate -addControl "windX";
				editorTemplate -addControl "windZ";
			editorTemplate -endLayout;
		editorTemplate -endLayout;
		AEshowBlockIfAttrExists {"minLiquidChurn"};

		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kCaching")) -collapse 0;
 
			editorTemplate -addControl perFrameCaching;
			
		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kLiquidCache")) -collapse 1;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kEnableLiquidCache")) enableLiquidCache "AEdimEnableLiquidCacheControls";
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kLiquidCacheControl")) liquidCacheControl;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kLiquidCompressionQuality")) liquidCompressionQuality;
			editorTemplate -callCustom AEbilcPathNew AEbilcPathReplace liquidCachePath;
			editorTemplate -callCustom AEbilcNameNew AEbilcNameReplace liquidCacheFileName;
		editorTemplate -endLayout;
		AEshowBlockIfAttrExists {"enableLiquidCache"};

		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kAeroCache")) -collapse 1;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kEnableAeroCache")) enableAeroCache "AEdimEnableAeroCacheControls";
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kAeroCacheControl"))aeroCacheControl;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kAeroCompressionQuality"))aeroCompressionQuality;
			editorTemplate -callCustom AEbiacPathNew AEbiacPathReplace aeroCachePath;
			editorTemplate -callCustom AEbiacNameNew AEbiacNameReplace aeroCacheFileName;
		editorTemplate -endLayout;
		AEshowBlockIfAttrExists {"enableAeroCache"};

		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kSolidCache")) -collapse 1;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kEnableSolidCache")) enableSolidCache "AEdimEnableSolidCacheControls";
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kSolidCacheControl"))solidCacheControl;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kSolidCompressionQuality"))solidCompressionQuality;
			editorTemplate -callCustom AEbiscPathNew AEbiscPathReplace solidCachePath;
			editorTemplate -callCustom AEbiscNameNew AEbiscNameReplace solidCacheFileName;
		editorTemplate -endLayout;
		AEshowBlockIfAttrExists {"enableSolidCache"};

		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kFoamCache")) -collapse 1;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kEnableFoamCache")) enableFoamCache "AEdimEnableFoamCacheControls";
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kFoamCacheControl"))foamCacheControl;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kFoamCompressionQuality")) foamCompressionQuality;
			editorTemplate -callCustom AEbifcPathNew AEbifcPathReplace foamCachePath;
			editorTemplate -callCustom AEbifcNameNew AEbifcNameReplace foamCacheFileName;
		editorTemplate -endLayout;
		AEshowBlockIfAttrExists {"enableFoamCache"};
					
		editorTemplate -endLayout;

		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kAdaptivity")) -collapse 0;
			editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kAdaptivitySpatial")) -collapse 0;
				editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kEnableSpatialAdaptivity")) enableSpatialAdapt "AEdimEnableSpatialAdaptivityControls";
    				if(`attributeExists "deleteExceedingParticles" $nodeName`) {
				         editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kEnableDeleteExceedingParticles")) deleteExceedingParticles;
				}
			editorTemplate -endLayout;
			editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kAdaptivityTransport")) -collapse 0;
				editorTemplate -addControl transportStepAdaptivity;
				editorTemplate -addControl minSteps;
				editorTemplate -addControl maxSteps;
				editorTemplate -addControl transportTimeScale;
			editorTemplate -endLayout;
			AEshowBlockIfAttrExists {"transportStepAdaptivity"};
			editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kAdaptivityTemporal")) -collapse 0;
				editorTemplate -addControl timeStepAdaptivity;
				editorTemplate -addControl minTimeSteps;
				editorTemplate -addControl maxTimeSteps;
			editorTemplate -endLayout;
		editorTemplate -endLayout;
		AEshowBlockIfAttrExists {"masterVoxelSize"};

		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kGuiding")) -collapse 1;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kEnableGuiding")) enableGuiding "AEdimEnableGuidingControls";
			editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kGuidingInput")) -collapse 1;
			      editorTemplate -callCustom AEbiGuidingLowResCacheEnableNew AEbiGuidingLowResCacheEnableReplace computeGuideFromSimulationCache;
			      editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kGuidingMesh")) computeGuideFromMesh "AEdimEnableGuidingMeshControls";
			      editorTemplate -callCustom AEbiGuidingLowResCachePathNew AEbiGuidingLowResCachePathReplace simulationCachePath;
			      editorTemplate -callCustom AEbiGuidingLowResBaseNameNew AEbiGuidingLowResBaseNameReplace simulationCacheFilename;			
			      editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kGuidingHighResLiquid")) "computeGuideFromHighResLiquid";
			      editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kGuidingLowresDx")) guideVoxelScale;
			      editorTemplate -addControl "minSimulationDepth";
			editorTemplate -endLayout;
			editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kGuidingReseed")) -collapse 1;
			      editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kParticleDensity")) reseedParticleDensity;
			      editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kReseedGuideOverlap")) reseedGuideOverlap;
			      editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kReseedLiquidOverlap")) reseedLiquidOverlap;
			      editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kReseedMinDistanceToAir")) minReseedAirDistance;
			editorTemplate -endLayout;
		editorTemplate -endLayout;
		AEshowBlockIfAttrExists {"enableGuiding"};

		// Clipping controls
		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kClipping"))  -collapse 1;
			editorTemplate -callCustom "AEbifrostContainerClippingNew" "AEbifrostContainerClippingReplace" "clipBBoxMin" "clipBBoxMax" "clipBBoxTransform";
		editorTemplate -endLayout;
		AEshowBlockIfAttrExists {"clipBBoxMin", "clipBBoxMax"};


		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kEmission")) -collapse 1;
			editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kDroplet")) -collapse 1;
				editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kThreshold")) dropletThreshold;
				editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kMergebackDepth")) dropletMergeBackDepth;
			editorTemplate -endLayout;
			editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kParticleDistribution")) -collapse 1;
				editorTemplate -addControl surfaceBandWidth;
				editorTemplate -addControl interiorParticleDensity;
				editorTemplate -addControl surfaceParticleDensity;
			editorTemplate -endLayout;
		editorTemplate -endLayout;
		AEshowBlockIfAttrExists {"dropletThreshold"};

		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kCollision")) -collapse 1;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kSolidVoxelScale")) solidVoxelScale;
		editorTemplate -endLayout;
		AEshowBlockIfAttrExists {"solidVoxelScale"};

		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kAcceleration")) -collapse 1;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kForceVoxelScale")) forceVoxelScale;
		editorTemplate -endLayout;
		AEshowBlockIfAttrExists {"forceVoxelScale"};

		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kVorticity")) -collapse 1;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kEnable")) vorticityEnable "AEdimVorticityEnableControls";
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kDecay")) vorticityDecay;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kMultiplier")) vorticityMult;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kMaximum")) vorticityMax;
		editorTemplate -endLayout;
		AEshowBlockIfAttrExists {"vorticityEnable"};

		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kSurfaceTension")) -collapse 1;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kSurfaceTensionEnable")) surfaceTensionEnable "AEdimSurfaceTensionEnableControls";
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kSurfaceTensionValue")) surfaceTension;
		editorTemplate -endLayout;
		AEshowBlockIfAttrExists {"surfaceTensionEnable"};


		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kViscosity")) -collapse 1;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kViscosityScale")) viscosityScale;
		editorTemplate -endLayout;
		AEshowBlockIfAttrExists {"viscosityScale"};

		//editorTemplate -beginLayout _L10N( kAeroSimulationParameters, "Simulation Parameters" ) -collapse 1;
			// Suppress minDepth and maxDepth for PR45
			//editorTemplate -addControl -label _L10N( kAeroMinDepth, "Min Depth" ) minDepth;
			//editorTemplate -addControl -label _L10N( kAeroMaxDepth, "Max Depth" ) maxDepth;
		//editorTemplate -endLayout;
		//AEshowBlockIfAttrExists {"minDepth"};

		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kAir")) -collapse 1;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kDensity")) airDensity;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kTemperature")) airTemperature;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kSmokeThreshold")) smokeThreshold;
		editorTemplate -endLayout;
		AEshowBlockIfAttrExists {"airDensity"};

		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kParticlDensity")) -collapse 1;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kFlip")) flipParticleDensity;
			editorTemplate -addControl -label (uiRes("m_AEbifrostContainerTemplate.kRender")) renderParticleDensity;
		editorTemplate -endLayout;
		AEshowBlockIfAttrExists {"flipParticleDensity"};

		// Add any missing controls
		editorTemplate -beginLayout (uiRes("m_AEbifrostContainerTemplate.kLocatorAttributes"));
		AElocatorCommon $nodeName;
		editorTemplate -endLayout;
		AElocatorInclude $nodeName;
		editorTemplate -addExtraControls;


	// Suppress attributes that are not directly editable

	editorTemplate -suppress "Emitters";
	editorTemplate -suppress "Guides";
	editorTemplate -suppress "Colliders";
	editorTemplate -suppress "Accelerators";
	editorTemplate -suppress "AdaptiveMeshes";
	editorTemplate -suppress "killplanes";
	editorTemplate -suppress "testReload";
	editorTemplate -suppress "currentTime";
	editorTemplate -suppress "adaptive";
	editorTemplate -suppress "transform";

	
	// old style global cache controls
	editorTemplate -suppress "enableDiskCache";
	editorTemplate -suppress cachingControl;
	editorTemplate -suppress cacheDir;
	editorTemplate -suppress cacheName;

	// Suppress minDepth and maxDepth for PR45
	editorTemplate -suppress "minDepth";
	editorTemplate -suppress "maxDepth";
	editorTemplate -suppress compressionQuality;
	editorTemplate -endScrollLayout;



}
