// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//	Procedure Name:
//	AEbifrostvisCommonTemplate
//
//	Description Name;
//	Common controls shared by AE templates in bifrostvis plug-in
//

// Local helper to get localized channel nice names
proc string getChannelNiceName(string $channel)
{
	string $resourceKey = "kChannelNiceName_" + $channel;
	string $resourceValue;
	if (catch($resourceValue = getPluginResource("bifrostvisplugin", $resourceKey)))
	{
		// Not localized yet.
		return $channel;
	}
	return $resourceValue;
}

// Local helper for sharing UI names
proc string getControlName(string $nodeAttr)
{
	string $nodeName = plugNode($nodeAttr);
	string $attrName = plugAttr($nodeAttr);
	return ("bifrostvis_" + nodeType($nodeName) + "_" + $attrName + "_Control");
}

// Local helper to get available channels, handles voxels and particles
proc string[] getAvailableChannelsInternal(string $nodeName, string $requireType)
{
	string $channels[];

	if ($requireType == "kParticle")
	{
		$channels = `getAttr ($nodeName + ".availableParticleChannels")`;
	}
	else if ($requireType == "kVoxel")
	{
		$channels = `getAttr ($nodeName + ".availableVoxelChannels")`;
	}
	else if ($requireType == "kParticleVector")
	{
		// Velocity is the only vector output to use currently
		string $possibleChannels[] = `getAttr ($nodeName + ".availableParticleChannels")`;
		if (stringArrayFind("velocity", 0, $possibleChannels) > 0)
			$channels[0] = "velocity";
	}

	return $channels;
}

// Local helper to get available channels, handles mesh
proc string[] getAvailableChannelsMeshInternal(string $nodeName, string $requireType)
{
	string $channels[];
	int $channelCount = 0;

	// Query the colorset names
	string $colorsets[] = `polyColorSet -q -allColorSets $nodeName`;

	// Convert to 
	for ($name in $colorsets)
	{
		int $nameSize = `size($name)`;
		if ($nameSize > 8 && `startsWith $name "bifrost"`)
		{
			string $part1 = `substring $name 8 8`;
			string $part2 = `substring $name 9 $nameSize`;
			$channels[$channelCount++] = (`tolower $part1`) + $part2;
		}
	}
	
	return $channels;
}

// Local helper to get available channels, handles different kind of source node
proc string[] getAvailableChannels(string $nodeName, string $requireType)
{
	// Type of the requiring node
	string $nodeType = nodeType($nodeName);

	string $channels[];
	
	if ($nodeType == "bifrostShape")
	{
		// Get available channels from bifrostShape directly
		$channels = getAvailableChannelsInternal($nodeName, $requireType);
	}
	else if ($nodeType == "bifrostAeroMaterial" ||
			 $nodeType == "bifrostLiquidMaterial" ||
			 $nodeType == "bifrostFoamMaterial" ||
			 `objectType -isAType shadingDependNode $nodeName`)
	{
		// This is a shading node. Search for the bifrostShape.
		//

		// Search for the shading group nodes
		string $futureNodes[] = `listHistory -future true -pruneDagObjects true $nodeName`;
		string $shadingGroupNodes[] = `ls -type shadingEngine $futureNodes`;

		// Search for bifrostShape in shading groups
		string $setMembers[] = `sets -q -nodesOnly $shadingGroupNodes`;
		string $bifrostShapes[] = `ls -type bifrostShape $setMembers`;

		if (size($bifrostShapes) == 1)
		{
			// Found 1 bifrostShape
			$channels = getAvailableChannelsInternal($bifrostShapes[0], $requireType);
		}
		else
		{
			// Found 1+ bifrostShape, find the union of available channels
			string $chIntersector = `stringArrayIntersector`;
			string $bifrostShapeNode;
			for ($bifrostShapeNode in $bifrostShapes)
			{
				string $bifrostShapeChannels[] = getAvailableChannelsInternal($bifrostShapeNode, $requireType);
				stringArrayIntersector -e -intersect $bifrostShapeChannels $chIntersector;
			}
			$channels = `stringArrayIntersector -q $chIntersector`;
			deleteUI $chIntersector;
		}

		// Search for mesh in shading groups
		string $meshChannels[];
		string $meshShapes[] = `ls -type mesh $setMembers`;

		if (size($meshShapes) == 1)
		{
			// Found 1 meshShape
			$meshChannels = getAvailableChannelsMeshInternal($meshShapes[0], $requireType);
		}
		else
		{
			// Found 1+ meshShape, find the union of available channels
			string $chIntersector = `stringArrayIntersector`;
			string $meshShapeNode;
			for ($meshShapeNode in $meshShapes)
			{
				string $meshShapeChannels[] = getAvailableChannelsMeshInternal($meshShapeNode, $requireType);
				stringArrayIntersector -e -intersect $meshShapeChannels $chIntersector;
			}
			$meshChannels = `stringArrayIntersector -q $chIntersector`;
			deleteUI $chIntersector;
		}

		// If there is only mesh, we use the channels from mesh
		if (size($bifrostShapes) == 0 && size($meshShapes) > 0)
		{
			$channels = $meshChannels;
		}
	}

	// Strip distance_mrsharp channel left by mentalray
	$channels = stringArrayRemove({"distance_mrsharp"}, $channels);

	return $channels;
}

// Update the layout to node name mapping
proc updateLayoutToNodeNameMapping(string $parent, string $nodeName)
{
    global string $gAEbifrostvisTopLayouts[];
    global string $gAEbifrostvisNodeNames[];

    int $i;
    for ($i = size($gAEbifrostvisTopLayouts)-1; $i >= 0; $i--)
    {
        if (!`layout -exists $gAEbifrostvisTopLayouts[$i]`)
        {
            stringArrayRemoveAtIndex($i, $gAEbifrostvisTopLayouts);
            stringArrayRemoveAtIndex($i, $gAEbifrostvisNodeNames);
        }
    }

    $i = stringArrayFind($parent, 0, $gAEbifrostvisTopLayouts);
    if ($i >= 0)
    {
        $gAEbifrostvisTopLayouts[$i] = $parent;
        $gAEbifrostvisNodeNames[$i]  = $nodeName;
    }
    else
    {
        appendStringArray($gAEbifrostvisTopLayouts, {$parent}, 1);
        appendStringArray($gAEbifrostvisNodeNames, {$nodeName}, 1);
    }
}

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Shared channel pulldown list control
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
global proc AEbifrostvisChannelListNew(
	string $nodeAttr,
	string $nodeLabelResourceKey,
	string $nodeRequireType,
	string $nodeCustomAttrChangeCommand)
{
	// Split up input string since the value is prefixed by the node name.
	string $labelResourceKey = plugAttr($nodeLabelResourceKey);

	// Begin UI creation
	//
	setUITemplate -pst attributeEditorTemplate;

	// Pulldown list of channel names
	//
	string $controlName = getControlName($nodeAttr);
	optionMenuGrp
		-label (getPluginResource("bifrostvisplugin", $labelResourceKey))
		$controlName;

	setUITemplate -ppt;

	AEbifrostvisChannelListReplace($nodeAttr, $nodeLabelResourceKey, $nodeRequireType, $nodeCustomAttrChangeCommand);
}

global proc AEbifrostvisChannelListReplace(
	string $nodeAttr,
	string $nodeLabelResourceKey,
	string $nodeRequireType,
	string $nodeCustomAttrChangeCommand)
{
	// Split up input string since the value is prefixed by the node name.
	string $nodeName	= plugNode($nodeAttr);
	string $requireType	= plugAttr($nodeRequireType);

    // Support for multiple AE tabs
    string $parent = `setParent -q`;
    string $setParentCmd = ("setParent " + $parent + ";");

	// Name of the pulldown list control
	string $controlName = getControlName($nodeAttr);

	// Clear old menu items
	string $existingMenuItems[] = `optionMenuGrp -q -itemListLong $controlName`;
	string $mi;
	for ($mi in $existingMenuItems)
	{
		deleteUI -menuItem $mi;
	}

	// Create new menu items
	// The label is the localized channel name. The actual channel name is stored
	// in command flag. Menu items in optionMenuGrp will not execute the commands.
	string $channels[] = getAvailableChannels($nodeName, $requireType);
	if (size($channels) > 0)
	{
		setParent -menu ($parent + "|" + $controlName + "|OptionMenu");
		menuItem -label (getPluginResource("bifrostvisplugin", "kChannelNiceName_none")) -command ""; // add an empty item first
		string $channel;
		for ($channel in $channels)
		{
			menuItem -label `getChannelNiceName($channel)` -command $channel;
		}
	}

	// Hook up callbacks
	optionMenuGrp -edit
		-changeCommand ($setParentCmd + "AEbifrostvisChannelListUIChanged " + $nodeAttr + " " + $nodeRequireType)
		$controlName;
	scriptJob
		-replacePrevious
		-parent $controlName
		-attributeChange $nodeAttr
		($setParentCmd + "AEbifrostvisChannelListAttrChanged " + $nodeAttr + " \"" + encodeString($nodeCustomAttrChangeCommand) + "\"");

	// Call attr changed to set UI to correct initial state
	AEbifrostvisChannelListAttrChanged($nodeAttr, $nodeCustomAttrChangeCommand);
}

global proc AEbifrostvisChannelListUIChanged(
	string $nodeAttr,
	string $nodeRequireType)
{
	// Split up input string since the value is prefixed by the node name.
	string $nodeName	= plugNode($nodeAttr);
	string $requireType	= plugAttr($nodeRequireType);

	// Name of the pulldown list control
	string $controlName = getControlName($nodeAttr);
	string $selected = "";

	// Retrieve the channel name from the optionMenuGrp control.
	string $existingMenuItems[] = `optionMenuGrp -q -itemListLong $controlName`;
	int $selectedMenuIndex = `optionMenuGrp -q -select $controlName`;  // 1-based
	if ($selectedMenuIndex > 0 && $selectedMenuIndex-1 < size($existingMenuItems))
	{
		// We don't want the localized channel name.
		string $menuItem = $existingMenuItems[$selectedMenuIndex-1];
		$selected = `menuItem -q -command $menuItem`;
	}

	// Revert the channel name to "" if the channel is not available
	string $channels[] = getAvailableChannels($nodeName, $requireType);
	if (!stringArrayContains($selected, $channels))
	{
		$selected = "";
	}

	// Construct the setAttr command and eval
	string $command = "setAttr -type \"string\" " + $nodeAttr + " \"" + encodeString($selected) + "\"";
	eval($command);
}

global proc AEbifrostvisChannelListAttrChanged(
	string $nodeAttr,
	string $nodeCustomAttrChangeCommand)
{
	// Split up input string since the value is prefixed by the node name.
	string $nodeName				= plugNode($nodeAttr);
	string $customAttrChangeCommand	= plugAttr($nodeCustomAttrChangeCommand);

	// Name of the pulldown list control
	string $controlName = getControlName($nodeAttr);

	string $attr = `getAttr $nodeAttr`;
	string $existingMenuItems[] = `optionMenuGrp -q -itemListLong $controlName`;
	if (size($existingMenuItems) > 0)
	{
		int $foundItem = 0;
		for ($mi in $existingMenuItems)
		{
			if (`menuItem -q -command $mi` == $attr)
			{
				break;
			}
			$foundItem++;
		}
		if ($foundItem >= size($existingMenuItems))
		{
			$foundItem = 0; // not found, set to empty string (#1 item)
		}
		optionMenuGrp -edit -select ($foundItem+1) $controlName;
	}

	// Trigger additional callbacks
	if ($customAttrChangeCommand != "")
	{
		eval($customAttrChangeCommand + " " + $nodeName);
	}
}


// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Shared remap curve and gradient control
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
global proc AEbifrostvisRemapNew(
	string $nodeRemapMinAttr,
	string $nodeRemapMaxAttr,
	string $nodeColorRemapAttr,
	string $nodeValueRemapAttr,
	string $nodeFrameLabelResourceKey,
	string $nodeMinLabelResourceKey,
	string $nodeMaxLabelResourceKey,
	string $nodeCustomEnableCommand)
{
	// Split up input string since the value is prefixed by the node name.
	string $colorRemapAttr			= plugAttr($nodeColorRemapAttr);
	string $valueRemapAttr			= plugAttr($nodeValueRemapAttr);
	string $frameLabelResourceKey	= plugAttr($nodeFrameLabelResourceKey);
	string $minLabelResourceKey		= plugAttr($nodeMinLabelResourceKey);
	string $maxLabelResourceKey		= plugAttr($nodeMaxLabelResourceKey);

	// Build control names from attributes
	string $remapMinCtrl = getControlName($nodeRemapMinAttr);
	string $remapMaxCtrl = getControlName($nodeRemapMaxAttr);

	string $remapFrameLayout;
	string $colorRampCtrl, $colorRampButtonCtrl;
	string $valueRampCtrl, $valueRampButtonCtrl;

	if ($valueRemapAttr != "")
	{
		$valueRampCtrl			= getControlName($nodeValueRemapAttr);
		$valueRampButtonCtrl	= ($valueRampCtrl + "RampButton");
		$remapFrameLayout		= ($valueRampCtrl + "FrameLayout");
	}

	if ($colorRemapAttr != "")
	{
		$colorRampCtrl			= getControlName($nodeColorRemapAttr);
		$colorRampButtonCtrl	= ($colorRampCtrl + "RampButton");
		$remapFrameLayout		= ($colorRampCtrl + "FrameLayout"); // override
	}

	// Begin UI creation
	//
	setUITemplate -pst attributeEditorTemplate;

	// Frame layout
	//
	frameLayout
		-label (getPluginResource("bifrostvisplugin", $frameLabelResourceKey))
		-collapsable true
		-collapse true
		$remapFrameLayout;
	columnLayout -adjustableColumn 1;

		// Min/Max controls
		//
		floatFieldGrp
			-numberOfFields 1
			-label (getPluginResource("bifrostvisplugin", $minLabelResourceKey))
			$remapMinCtrl;
		floatFieldGrp
			-numberOfFields 1
			-label (getPluginResource("bifrostvisplugin", $maxLabelResourceKey))
			$remapMaxCtrl;

		// Form layout for Color Ramp
		//
		if ($colorRemapAttr != "")
		{
			frameLayout 
				-labelVisible 0 -collapsable 0 -marginHeight 2 -marginWidth 2;
			string $colorRampFormLayout = `formLayout`;

				// Selected Position control
				string $colorRemapPosition = `attrFieldSliderGrp
					-label (getPluginResource("bifrostvisplugin", "kRampSelectedPosition"))
					-columnWidth 1 123`;
				
				// Selected Color control
				string $colorRemapColor = `attrColorSliderGrp
					-label (getPluginResource("bifrostvisplugin", "kRampSelectedColor"))
					-columnWidth 1 123
					-columnWidth 2 45
					-columnWidth 3 0 
					-showButton 0`;

				// Interpolation control
				string $colorRemapInterp = `attrEnumOptionMenuGrp
					-label (getPluginResource("bifrostvisplugin", "kRampInterpolation"))
					-columnWidth 1 123`;

				// ">" button control
				button
					-label ">"
					-width 23
					-command ("editRampAttribute " + $nodeColorRemapAttr)
					$colorRampButtonCtrl;

				// Gradient control
				string $colorRampFrameLayout = `frameLayout
					-labelVisible 0
					-collapsable 0`;

					gradientControl
						-attribute $nodeColorRemapAttr
						-staticNumberOfControls 0
						-staticPositions 0
						-width 135
						-height 74
						$colorRampCtrl;

				setParent ..;

				// Layout controls
				formLayout -edit
					-attachForm $colorRemapPosition "left"  0
					-attachNone $colorRemapPosition "right"
					-attachForm $colorRemapPosition "top" 0
					-attachNone $colorRemapPosition "bottom"

					-attachForm $colorRemapColor "left" 0
					-attachNone $colorRemapColor "right"
					-attachControl $colorRemapColor "top" 0 $colorRemapPosition
					-attachNone $colorRemapColor "bottom"

					-attachForm $colorRemapInterp "left" 0
					-attachNone $colorRemapInterp "right"
					-attachControl $colorRemapInterp "top" 0 $colorRemapColor
					-attachNone $colorRemapInterp "bottom"

					-attachControl $colorRampFrameLayout "left" 2 $colorRemapInterp
					-attachNone $colorRampFrameLayout "right"
					-attachForm $colorRampFrameLayout "top" 0
					-attachNone $colorRampFrameLayout "bottom"

					-attachForm $colorRampButtonCtrl "top" 0
					-attachForm $colorRampButtonCtrl "bottom" 0
					-attachControl $colorRampButtonCtrl "left" 5 $colorRampFrameLayout
					-attachNone $colorRampButtonCtrl "right"
					$colorRampFormLayout;

				gradientControl -edit -selectedColorControl $colorRemapColor $colorRampCtrl;
				gradientControl -edit -selectedPositionControl $colorRemapPosition $colorRampCtrl;
				gradientControl -edit -selectedInterpControl $colorRemapInterp $colorRampCtrl;
			setParent ..;
			setParent ..;
		}

		// Form layout for Value Ramp
		//
		if ($valueRemapAttr != "")
		{
			frameLayout 
				-labelVisible 0 -collapsable 0 -marginHeight 2 -marginWidth 2;
			string $valueRampFormLayout = `formLayout`;

				// Selected Position control
				string $valueRemapPosition = `attrFieldSliderGrp
					-label (getPluginResource("bifrostvisplugin", "kRampSelectedPosition"))
					-columnWidth 1 123`;

				// Selected value control
				string $valueRemapValue = `attrFieldSliderGrp
					-label (getPluginResource("bifrostvisplugin", "kRampSelectedValue"))
					-columnWidth 1 123`;

				// Interpolation control
				string $valueRemapInterp = `attrEnumOptionMenuGrp
					-label (getPluginResource("bifrostvisplugin", "kRampInterpolation"))
					-columnWidth 1 123`;

				// ">" button control
				button
					-label ">"
					-width 23
					-command ("editRampAttribute " + $nodeValueRemapAttr)
					$valueRampButtonCtrl;

				// Gradient control
				string $valueRampFrameLayout = `frameLayout 
					-labelVisible 0
					-collapsable 0`;

					gradientControl
						-attribute $nodeValueRemapAttr
						-staticNumberOfControls 0
						-staticPositions 0
						-width 135
						-height 74
						$valueRampCtrl;

				setParent ..;

				// Layout controls
				formLayout -edit
					-attachForm $valueRemapPosition "left"  0
					-attachNone $valueRemapPosition "right"
					-attachForm $valueRemapPosition "top" 0
					-attachNone $valueRemapPosition "bottom"

					-attachForm $valueRemapValue "left" 0
					-attachNone $valueRemapValue "right"
					-attachControl $valueRemapValue "top" 0 $valueRemapPosition
					-attachNone $valueRemapValue "bottom"

					-attachForm $valueRemapInterp "left" 0
					-attachNone $valueRemapInterp "right"
					-attachControl $valueRemapInterp "top" 0 $valueRemapValue
					-attachNone $valueRemapInterp "bottom"

					-attachControl $valueRampFrameLayout "left" 2 $valueRemapInterp
					-attachNone $valueRampFrameLayout "right"
					-attachForm $valueRampFrameLayout "top" 0
					-attachNone $valueRampFrameLayout "bottom"

					-attachForm $valueRampButtonCtrl "top" 0
					-attachForm $valueRampButtonCtrl "bottom" 0
					-attachControl $valueRampButtonCtrl "left" 5 $valueRampFrameLayout
					-attachNone $valueRampButtonCtrl "right"
					$valueRampFormLayout;

				gradientControl -edit -selectedColorControl $valueRemapValue $valueRampCtrl;
				gradientControl -edit -selectedPositionControl $valueRemapPosition $valueRampCtrl;
				gradientControl -edit -selectedInterpControl $valueRemapInterp $valueRampCtrl;
			setParent ..;
			setParent ..;
		}

	setParent ..;
	setParent ..;

	setUITemplate -ppt;

	AEbifrostvisRemapReplace(
		$nodeRemapMinAttr,
		$nodeRemapMaxAttr,
		$nodeColorRemapAttr,
		$nodeValueRemapAttr,
		$nodeFrameLabelResourceKey,
		$nodeMinLabelResourceKey,
		$nodeMaxLabelResourceKey,
		$nodeCustomEnableCommand);
}

global proc AEbifrostvisRemapReplace(
	string $nodeRemapMinAttr,
	string $nodeRemapMaxAttr,
	string $nodeColorRemapAttr,
	string $nodeValueRemapAttr,
	string $nodeFrameLabelResourceKey,
	string $nodeMinLabelResourceKey,
	string $nodeMaxLabelResourceKey,
	string $nodeCustomEnableCommand)
{
	// Split up input string since the value is prefixed by the node name.
	string $colorRemapAttr		= plugAttr($nodeColorRemapAttr);
	string $valueRemapAttr		= plugAttr($nodeValueRemapAttr);
	string $customEnableCommand	= plugAttr($nodeCustomEnableCommand);

	// Build control names from attributes
	string $remapMinCtrl = getControlName($nodeRemapMinAttr);
	string $remapMaxCtrl = getControlName($nodeRemapMaxAttr);

	string $remapFrameLayout;
	string $colorRampCtrl, $colorRampButtonCtrl;
	string $valueRampCtrl, $valueRampButtonCtrl;

	if ($valueRemapAttr != "")
	{
		$valueRampCtrl			= getControlName($nodeValueRemapAttr);
		$valueRampButtonCtrl	= ($valueRampCtrl + "RampButton");
		$remapFrameLayout		= ($valueRampCtrl + "FrameLayout");
	}

	if ($colorRemapAttr != "")
	{
		$colorRampCtrl			= getControlName($nodeColorRemapAttr);
		$colorRampButtonCtrl	= ($colorRampCtrl + "RampButton");
		$remapFrameLayout		= ($colorRampCtrl + "FrameLayout"); // override
	}

	// Update controls
	connectControl -index 2 $remapMinCtrl $nodeRemapMinAttr;
	connectControl -index 2 $remapMaxCtrl $nodeRemapMaxAttr;
	if ($valueRemapAttr != "")
	{
		gradientControl -edit -attribute $nodeValueRemapAttr $valueRampCtrl;
		button -edit -command ("editRampAttribute " + $nodeValueRemapAttr) $valueRampButtonCtrl;
	}
	if ($colorRemapAttr != "")
	{
		gradientControl -edit -attribute $nodeColorRemapAttr $colorRampCtrl;
		button -edit -command ("editRampAttribute " + $nodeColorRemapAttr) $colorRampButtonCtrl;
	}

    // Update frame layout to node name mapping
    updateLayoutToNodeNameMapping (`frameLayout -q -fullPathName $remapFrameLayout`) (`plugNode $nodeRemapMinAttr`);

	// Trigger additional callbacks
	if ($customEnableCommand != "")
	{
		eval($customEnableCommand + " " + plugNode($nodeCustomEnableCommand));
	}
}

global proc AEbifrostvisRemapEnable(
	string $nodeName,
	string $colorRemapAttr,
	string $valueRemapAttr,
	int    $enable)
{
    global string $gAEbifrostvisTopLayouts[];
    global string $gAEbifrostvisNodeNames[];

	if ($colorRemapAttr != "")
	{
		string $remapFrameLayout = (getControlName($nodeName + "." + $colorRemapAttr) + "FrameLayout");

        int $i;
        for ($i = 0; $i < size($gAEbifrostvisTopLayouts); $i++)
        {
            if ($gAEbifrostvisNodeNames[$i] == $nodeName &&
                `endsWith $gAEbifrostvisTopLayouts[$i] $remapFrameLayout` &&
                `frameLayout -q -exists $gAEbifrostvisTopLayouts[$i]`)
            {
                frameLayout -edit -enable $enable $gAEbifrostvisTopLayouts[$i];
            }
        }
	}

	if ($valueRemapAttr != "")
	{
		string $remapFrameLayout = (getControlName($nodeName + "." + $valueRemapAttr) + "FrameLayout");

        int $i;
        for ($i = 0; $i < size($gAEbifrostvisTopLayouts); $i++)
        {
            if ($gAEbifrostvisNodeNames[$i] == $nodeName &&
                `endsWith $gAEbifrostvisTopLayouts[$i] $remapFrameLayout` &&
                `frameLayout -q -exists $gAEbifrostvisTopLayouts[$i]`)
            {
                frameLayout -edit -enable $enable $gAEbifrostvisTopLayouts[$i];
            }
        }
	}
}


global proc AEbifrostvisCommonTemplate()
{
	// nop
}
