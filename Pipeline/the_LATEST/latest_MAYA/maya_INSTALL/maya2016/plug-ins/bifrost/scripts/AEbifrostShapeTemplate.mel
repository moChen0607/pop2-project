// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//	Procedure Name:
//	AEbifrostShapeTemplate
//
//	Description Name;
//	Creates the attribute editor controls for the bifostShape node
//

// Local helper for sharing UI creation methods between particles and voxels
proc string getDiagnosticControlName(string $attr)
{
	string $tokens[];
	tokenize($attr, ".", $tokens);
	string $attrName = $tokens[1];
	return ("bifrostShape" + $attrName + "Control");
}

// Local helper to get available channels, handles voxels and particles
proc string[] getAvailableChannels(string $attr)
{
	string $tokens[];
	tokenize($attr, ".", $tokens);
	string $nodeName = $tokens[0];
	string $attrName = $tokens[1];
	string $channels[];
	if ($attrName == "particleColorChannel" ||
		$attrName == "particleOpacityChannel" ||
		$attrName == "particleNumericChannel")
	{
		$channels = `getAttr ($nodeName + ".availableParticleChannels")`;
	}
	else if ($attrName == "particleVectorChannel")
	{
		// Velocity is the only vector output to use currently
		string $possibleChannels[] = `getAttr ($nodeName + ".availableParticleChannels")`;
		if (stringArrayFind("velocity", 0, $possibleChannels) > 0)
			$channels[0] = "velocity";
	}
	else if ($attrName == "voxelColorChannel")
	{
		$channels = `getAttr ($nodeName + ".availableVoxelChannels")`;
	}
	return $channels;
}

// Local helper to get localized channel nice names
proc string getChannelNiceName(string $channel)
{
	string $resourceKey = "kChannelNiceName_" + $channel;
	string $resourceValue;
	if (catch($resourceValue = getPluginResource("bifrostvisplugin", $resourceKey)))
	{
		// Not localized yet.
		return $channel;
	}
	return $resourceValue;
}

// Local helper to get available components, handles voxels and particles
proc string[] getAvailableComponents(string $attr)
{
	string $tokens[];
	tokenize($attr, ".", $tokens);
	string $nodeName = $tokens[0];
	string $attrName = $tokens[1];
	string $components[];
	if ($attrName == "particleComponent")
	{
		$components = `getAttr ($nodeName + ".availableParticleComponents")`;
	}
	else if ($attrName == "voxelComponent")
	{
		$components = `getAttr ($nodeName + ".availableVoxelComponents")`;
	}
	return $components;
}

// Local helper to get localized component nice names
proc string getComponentNiceName(string $component)
{
	string $resourceKey = "kComponentNiceName_" + $component;
	string $resourceValue;
	if (catchQuiet($resourceValue = getPluginResource("bifrostvisplugin", $resourceKey)))
	{
		// Not localized yet.
		return $component;
	}
	return $resourceValue;
}

// Local helper to check if the voxel type is diagnostic or display as render
proc int getDisplayAsRender(string $nodeName)
{
	int $displayAsRender;
	if (!catchQuiet($displayAsRender = getAttr($nodeName + ".displayAsRender")))
	{
		// displayAsRender dynamic attr override
		return $displayAsRender;
	}

	int $voxelType = `getAttr ($nodeName + ".voxelType")`;
	return $voxelType == 0; // Soft Voxels
}

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Custom methods for the diagnostic channel UI, shared by particles and voxels
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
global proc AEbifrostShapeDiagnosticChannelNew(
	string $diagnosticChannelAttr,
	string $lookupKey)
{
	// Split up input string since the value is prefixed by the node name.
	string $tokens[];
	$numTokens = `tokenize $lookupKey "." $tokens`;
	string $resourceKey = "kColorChannel";
	if ($numTokens > 0)
	{
		$resourceKey = 	$tokens[$numTokens-1];
	}

	setUITemplate -pst attributeEditorTemplate;

	string $controlName = getDiagnosticControlName($diagnosticChannelAttr);
	optionMenuGrp
		-label (getPluginResource("bifrostvisplugin", $resourceKey ))
		$controlName;

	setUITemplate -ppt;

	AEbifrostShapeDiagnosticChannelReplace($diagnosticChannelAttr, $lookupKey);
}

global proc AEbifrostShapeDiagnosticChannelReplace(
	string $diagnosticChannelAttr,
	string $lookupKey)
{
	string $controlName = getDiagnosticControlName($diagnosticChannelAttr);

	// Delete old menu items
	string $existingMenuItems[] = `optionMenuGrp -q -itemListLong $controlName`;
	string $mi;
	for ($mi in $existingMenuItems)
	{
		deleteUI -menuItem $mi;
	}

	// Create new menu items
	// The label is the localized channel name. The actual channel name is stored
	// in command flag. Menu items in optionMenuGrp will not execute the commands.
	string $channels[] = getAvailableChannels($diagnosticChannelAttr);
	if (size($channels) > 0)
	{
		setParent -menu ($controlName + "|OptionMenu");
		menuItem -label (getPluginResource("bifrostvisplugin", "kChannelNiceName_none")) -command ""; // add an empty item first
		string $channel;
		for ($channel in $channels)
		{
			menuItem -label `getChannelNiceName($channel)` -command $channel;
		}
	}

	// Hook up callbacks
	optionMenuGrp -edit
		-changeCommand ("AEbifrostShapeDiagnosticChannelUIChanged " + $diagnosticChannelAttr)
		$controlName;
	scriptJob
		-replacePrevious
		-parent $controlName
		-attributeChange $diagnosticChannelAttr
		("AEbifrostShapeDiagnosticChannelAttrChanged " + $diagnosticChannelAttr);

	// Call attr changed to set UI to correct initial state
	AEbifrostShapeDiagnosticChannelAttrChanged($diagnosticChannelAttr);
}

global proc AEbifrostShapeDiagnosticChannelUIChanged(
	string $diagnosticChannelAttr)
{
	string $controlName = getDiagnosticControlName($diagnosticChannelAttr);
	string $selected = "";

	// Retrieve the channel name from the optionMenuGrp control.
	string $existingMenuItems[] = `optionMenuGrp -q -itemListLong $controlName`;
	int $selectedMenuIndex = `optionMenuGrp -q -select $controlName`;  // 1-based
	if ($selectedMenuIndex > 0 && $selectedMenuIndex-1 < size($existingMenuItems))
	{
		// We don't want the localized channel name.
		string $menuItem = $existingMenuItems[$selectedMenuIndex-1];
		$selected = `menuItem -q -command $menuItem`;
	}

	string $channels[] = getAvailableChannels($diagnosticChannelAttr);
	if (!stringArrayContains($selected, $channels))
	{
		$selected = "";
	}
	setAttr $diagnosticChannelAttr -type "string" $selected;
}

global proc AEbifrostShapeDiagnosticChannelAttrChanged(
	string $diagnosticChannelAttr)
{
	string $controlName = getDiagnosticControlName($diagnosticChannelAttr);

	string $attr = `getAttr $diagnosticChannelAttr`;
	string $existingMenuItems[] = `optionMenuGrp -q -itemListLong $controlName`;
	if (size($existingMenuItems) > 0)
	{
		int $foundItem = 0;
		for ($mi in $existingMenuItems)
		{
			if (`menuItem -q -command $mi` == $attr)
			{
				break;
			}
			$foundItem++;
		}
		if ($foundItem >= size($existingMenuItems))
		{
			$foundItem = 0; // not found, set to empty string (#1 item)
		}
		optionMenuGrp -edit -select ($foundItem+1) $controlName;
	}

	// Trigger enable/disable UI update
	string $tokens[];
	tokenize($diagnosticChannelAttr, ".", $tokens);
	string $nodeName = $tokens[0];
	AEbifrostShapeCheckShowParticleColor($nodeName);
	AEbifrostShapeCheckShowParticleOpacity($nodeName);
	AEbifrostShapeCheckShowVoxelColor($nodeName);
}

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Custom methods for the component UI, shared by particles and voxels
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
global proc AEbifrostShapeComponentListNew(
	string $componentAttr,
	string $lookupKey)
{
	// Split up input string since the value is prefixed by the node name.
	string $resourceKey = plugAttr($lookupKey);

	setUITemplate -pst attributeEditorTemplate;

	string $controlName = getDiagnosticControlName($componentAttr);
	optionMenuGrp
		-label (getPluginResource("bifrostvisplugin", $resourceKey))
		$controlName;

	setUITemplate -ppt;

	AEbifrostShapeComponentListReplace($componentAttr, $lookupKey);
}

global proc AEbifrostShapeComponentListReplace(
	string $componentAttr,
	string $lookupKey)
{
	string $controlName = getDiagnosticControlName($componentAttr);

	// Delete old menu items
	string $existingMenuItems[] = `optionMenuGrp -q -itemListLong $controlName`;
	string $mi;
	for ($mi in $existingMenuItems)
	{
		deleteUI -menuItem $mi;
	}

	// Create new menu items
	// The label is the localized component name. The actual component name is stored
	// in command flag. Menu items in optionMenuGrp will not execute the commands.
	string $components[] = getAvailableComponents($componentAttr);
	if (size($components) > 0)
	{
		setParent -menu ($controlName + "|OptionMenu");
		string $component;
		for ($component in $components)
		{
			menuItem -label `getComponentNiceName($component)` -command $component;
		}
	}

	// Hook up callbacks
	optionMenuGrp -edit
		-changeCommand ("AEbifrostShapeComponentListUIChanged " + $componentAttr)
		$controlName;
	scriptJob
		-replacePrevious
		-parent $controlName
		-attributeChange $componentAttr
		("AEbifrostShapeComponentListAttrChanged " + $componentAttr);

	// Call attr changed to set UI to correct initial state
	AEbifrostShapeComponentListAttrChanged($componentAttr);
}

global proc AEbifrostShapeComponentListUIChanged(
	string $componentAttr)
{
	string $controlName = getDiagnosticControlName($componentAttr);
	string $selected = "";

	// Retrieve the component name from the optionMenuGrp control.
	string $existingMenuItems[] = `optionMenuGrp -q -itemListLong $controlName`;
	int $selectedMenuIndex = `optionMenuGrp -q -select $controlName`;  // 1-based
	if ($selectedMenuIndex > 0 && $selectedMenuIndex-1 < size($existingMenuItems))
	{
		// We don't want the localized component name.
		string $menuItem = $existingMenuItems[$selectedMenuIndex-1];
		$selected = `menuItem -q -command $menuItem`;
	}

	string $components[] = getAvailableComponents($componentAttr);
	if (!stringArrayContains($selected, $components))
	{
		$selected = "";
	}
	setAttr $componentAttr -type "string" $selected;
}

global proc AEbifrostShapeComponentListAttrChanged(
	string $componentAttr)
{
	string $controlName = getDiagnosticControlName($componentAttr);

	string $attr = `getAttr $componentAttr`;
	string $existingMenuItems[] = `optionMenuGrp -q -itemListLong $controlName`;
	if (size($existingMenuItems) > 0)
	{
		int $foundItem = 0;
		for ($mi in $existingMenuItems)
		{
			if (`menuItem -q -command $mi` == $attr)
			{
				break;
			}
			$foundItem++;
		}
		if ($foundItem >= size($existingMenuItems))
		{
			$foundItem = 0; // not found, set to default (#1 item)
		}
		optionMenuGrp -edit -select ($foundItem+1) $controlName;
	}
}

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Custom methods for the diagnostic channel remapping UI (i.e. ramp controls),
// shared by particles and voxels
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
global proc AEbifrostShapeDiagnosticRemapNew(
	string $diagnosticRemapMinAttr,
	string $diagnosticRemapMaxAttr,
	string $diagnosticRemapAttr,
	string $diagnosticValueRemapAttr,
	string $diagnosticRemapRes,
	string $diagnosticRemapMinRes,
	string $diagnosticRemapMaxRes)
{
	// Split up input string since the value is prefixed by the node name.
	$diagnosticRemapRes = plugAttr($diagnosticRemapRes);
	$diagnosticRemapMinRes = plugAttr($diagnosticRemapMinRes);
	$diagnosticRemapMaxRes = plugAttr($diagnosticRemapMaxRes);

	// Build control names from attributes
	string $remapMaxCtrl = getDiagnosticControlName($diagnosticRemapMaxAttr);
	string $remapMinCtrl = getDiagnosticControlName($diagnosticRemapMinAttr);
	string $diagnosticRampCtrl = getDiagnosticControlName($diagnosticRemapAttr);
	string $valueRampCtrl = getDiagnosticControlName($diagnosticValueRemapAttr);
	string $remapFrameLayout = ($diagnosticRampCtrl + "FrameLayout");
	string $diagnosticRampButtonCtrl = ($diagnosticRampCtrl + "RampButton");
	string $valueRampButtonCtrl = ($valueRampCtrl + "RampButton");

	setUITemplate -pst attributeEditorTemplate;

	frameLayout
		-label (getPluginResource("bifrostvisplugin", $diagnosticRemapRes))
		-collapsable true
		-collapse true
		$remapFrameLayout;
	columnLayout -adj 1;

		floatFieldGrp
			-numberOfFields 1
			-label (getPluginResource("bifrostvisplugin", $diagnosticRemapMinRes))
			$remapMinCtrl;
		floatFieldGrp
			-numberOfFields 1
			-label (getPluginResource("bifrostvisplugin", $diagnosticRemapMaxRes))
			$remapMaxCtrl;

		frameLayout 
			-lv 0 -cll 0 -mh 2 -mw 2;
		string $diagnosticRampForm = `formLayout`;
			string $diagnosticRemapPosition = `attrFieldSliderGrp -label (getPluginResource("bifrostvisplugin", "kRampSelectedPosition")) -cw 1 123`;
			string $diagnosticRemapColor = `attrColorSliderGrp -label (getPluginResource("bifrostvisplugin", "kRampSelectedColor")) -cw 1 123 -cw 2 45 -cw 3 0 -sb 0`;
			string $diagnosticRemapInterp = `attrEnumOptionMenuGrp -label (getPluginResource("bifrostvisplugin", "kRampInterpolation")) -cw 1 123`;
			button -l ">" -width 23 -c ("editRampAttribute " + $diagnosticRemapAttr) $diagnosticRampButtonCtrl;
			string $diagnosticRampFrameLayout = `frameLayout 
				-lv 0 -cll 0`;
				gradientControl -at $diagnosticRemapAttr -snc 0 -sp 0 -w 135 -h 74 $diagnosticRampCtrl;
 			setParent ..;

			formLayout -edit
				-attachForm $diagnosticRemapPosition "left"  0
				-attachNone $diagnosticRemapPosition "right"
				-attachForm $diagnosticRemapPosition "top" 0
				-attachNone $diagnosticRemapPosition "bottom"

				-attachForm $diagnosticRemapColor "left" 0
				-attachNone $diagnosticRemapColor "right"
				-attachControl $diagnosticRemapColor "top" 0 $diagnosticRemapPosition
				-attachNone $diagnosticRemapColor "bottom"

				-attachForm $diagnosticRemapInterp "left" 0
				-attachNone $diagnosticRemapInterp "right"
				-attachControl $diagnosticRemapInterp "top" 0 $diagnosticRemapColor
				-attachNone $diagnosticRemapInterp "bottom"

				-attachControl $diagnosticRampFrameLayout "left" 2 $diagnosticRemapInterp
				-attachNone $diagnosticRampFrameLayout "right"
				-attachForm $diagnosticRampFrameLayout "top" 0
				-attachNone $diagnosticRampFrameLayout "bottom"

				-attachForm $diagnosticRampButtonCtrl "top" 0
				-attachForm $diagnosticRampButtonCtrl "bottom" 0
				-attachControl $diagnosticRampButtonCtrl "left" 5 $diagnosticRampFrameLayout
				-attachNone $diagnosticRampButtonCtrl "right"
				$diagnosticRampForm;

			gradientControl -edit -scc $diagnosticRemapColor $diagnosticRampCtrl;
			gradientControl -edit -spc $diagnosticRemapPosition $diagnosticRampCtrl;
			gradientControl -edit -sic $diagnosticRemapInterp $diagnosticRampCtrl;
		setParent ..;
		setParent ..;

		frameLayout 
			-lv 0 -cll 0 -mh 2 -mw 2;
		string $valueRampForm = `formLayout`;
			string $diagnosticValueRemapPosition = `attrFieldSliderGrp -label (getPluginResource("bifrostvisplugin", "kRampSelectedPosition")) -cw 1 123`;
			string $diagnosticValueRemapValue = `attrFieldSliderGrp -label (getPluginResource("bifrostvisplugin", "kRampSelectedValue")) -cw 1 123`;
			string $diagnosticValueRemapInterp = `attrEnumOptionMenuGrp -label (getPluginResource("bifrostvisplugin", "kRampInterpolation")) -cw 1 123`;
			button -l ">" -width 23 -c ("editRampAttribute " + $diagnosticValueRemapAttr) $valueRampButtonCtrl;
			string $valueRampFrameLayout = `frameLayout 
				-lv 0 -cll 0`;
				gradientControl -at $diagnosticValueRemapAttr -snc 0 -sp 0 -w 135 -h 74 $valueRampCtrl;
 			setParent ..;

			formLayout -edit
				-attachForm $diagnosticValueRemapPosition "left"  0
				-attachNone $diagnosticValueRemapPosition "right"
				-attachForm $diagnosticValueRemapPosition "top" 0
				-attachNone $diagnosticValueRemapPosition "bottom"

				-attachForm $diagnosticValueRemapValue "left" 0
				-attachNone $diagnosticValueRemapValue "right"
				-attachControl $diagnosticValueRemapValue "top" 0 $diagnosticValueRemapPosition
				-attachNone $diagnosticValueRemapValue "bottom"

				-attachForm $diagnosticValueRemapInterp "left" 0
				-attachNone $diagnosticValueRemapInterp "right"
				-attachControl $diagnosticValueRemapInterp "top" 0 $diagnosticValueRemapValue
				-attachNone $diagnosticValueRemapInterp "bottom"

				-attachControl $valueRampFrameLayout "left" 2 $diagnosticValueRemapInterp
				-attachNone $valueRampFrameLayout "right"
				-attachForm $valueRampFrameLayout "top" 0
				-attachNone $valueRampFrameLayout "bottom"

				-attachForm $valueRampButtonCtrl "top" 0
				-attachForm $valueRampButtonCtrl "bottom" 0
				-attachControl $valueRampButtonCtrl "left" 5 $valueRampFrameLayout
				-attachNone $valueRampButtonCtrl "right"
				$valueRampForm;

			gradientControl -edit -scc $diagnosticValueRemapValue $valueRampCtrl;
			gradientControl -edit -spc $diagnosticValueRemapPosition $valueRampCtrl;
			gradientControl -edit -sic $diagnosticValueRemapInterp $valueRampCtrl;
		setParent ..;
		setParent ..;

	setParent ..;
	setParent ..;

	setUITemplate -ppt;

	AEbifrostShapeDiagnosticRemapReplace(
		$diagnosticRemapMinAttr,
		$diagnosticRemapMaxAttr,
		$diagnosticRemapAttr,
		$diagnosticValueRemapAttr,
		$diagnosticRemapRes,
		$diagnosticRemapMinRes,
		$diagnosticRemapMaxRes);
}

global proc AEbifrostShapeDiagnosticRemapReplace(
	string $diagnosticRemapMinAttr,
	string $diagnosticRemapMaxAttr,
	string $diagnosticRemapAttr,
	string $diagnosticValueRemapAttr,
	string $diagnosticRemapRes,
	string $diagnosticRemapMinRes,
	string $diagnosticRemapMaxRes)
{
	// Build control names from attributes
	string $remapMaxCtrl = getDiagnosticControlName($diagnosticRemapMaxAttr);
	string $remapMinCtrl = getDiagnosticControlName($diagnosticRemapMinAttr);
	string $diagnosticRampCtrl = getDiagnosticControlName($diagnosticRemapAttr);
	string $valueRampCtrl = getDiagnosticControlName($diagnosticValueRemapAttr);
	string $diagnosticRampButtonCtrl = ($diagnosticRampCtrl + "RampButton");
	string $valueRampButtonCtrl = ($valueRampCtrl + "RampButton");

	// Update controls
	connectControl -index 2 $remapMinCtrl $diagnosticRemapMinAttr;
	connectControl -index 2 $remapMaxCtrl $diagnosticRemapMaxAttr;
	gradientControl -edit -attribute $diagnosticRemapAttr $diagnosticRampCtrl;
	button -edit -c ("editRampAttribute " + $diagnosticRemapAttr) $diagnosticRampButtonCtrl;
	gradientControl -edit -attribute $diagnosticValueRemapAttr $valueRampCtrl;
	button -edit -c ("editRampAttribute " + $diagnosticValueRemapAttr) $valueRampButtonCtrl;
}

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Custom methods for the Tile View color UI (i.e. ramp controls),
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
global proc AEbifrostShapeTileViewColorNew(string $colorAttr)
{
	// Build control names from attributes
	string $colorRampCtrl = getDiagnosticControlName($colorAttr);
	string $colorRampFormLayout = ($colorRampCtrl + "FormLayout");

	setUITemplate -pst attributeEditorTemplate;

	formLayout $colorRampFormLayout;
		gradientControl -attribute $colorAttr -w 135 -h 74 $colorRampCtrl;
		string $colorRampColor = `attrColorSliderGrp -label (getPluginResource("bifrostvisplugin", "kRampSelectedColor")) -cw 1 123 -cw 2 60 -cw 3 0 -sb 0`;
		string $colorRampPosition = `attrFieldSliderGrp -label (getPluginResource("bifrostvisplugin", "kRampSelectedPosition")) -cw 1 123 -cw 2 60`;

		formLayout -edit
			-attachForm $colorRampCtrl "left" 40
			-attachForm $colorRampCtrl "right" 40
			-attachForm $colorRampCtrl "top" 0
			-attachNone $colorRampCtrl "bottom"

			-attachForm $colorRampColor "left" 40
			-attachNone $colorRampColor "right"
			-attachControl $colorRampColor "top" 0 $colorRampCtrl
			-attachNone $colorRampColor "bottom"

			-attachForm $colorRampPosition "left" 40
			-attachNone $colorRampPosition "right"
			-attachControl $colorRampPosition "top" 0 $colorRampColor
			-attachNone $colorRampPosition "bottom"

			$colorRampFormLayout;

		gradientControl -edit -scc $colorRampColor $colorRampCtrl;
		gradientControl -edit -spc $colorRampPosition $colorRampCtrl;
	setParent ..;

	setUITemplate -ppt;

	AEbifrostShapeTileViewColorReplace($colorAttr);
}

global proc AEbifrostShapeTileViewColorReplace(string $colorAttr)
{
	// Build control names from attributes
	string $colorRampCtrl = getDiagnosticControlName($colorAttr);

	// Update controls
	gradientControl -edit -attribute $colorAttr $colorRampCtrl;
}

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Custom methods for the Clipping UI.
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
global proc AEbifrostShapeClippingNew(string $clipInputMeshAttr)
{
	// Build control names from attributes
	string $clipInputMeshCtrl = getDiagnosticControlName($clipInputMeshAttr);
	string $clipInputMeshFormLayout = ($clipInputMeshCtrl + "FormLayout");

	string $clipInputMeshLabel = ($clipInputMeshCtrl + "Label");
	string $clipInputMeshField = ($clipInputMeshCtrl + "Field");
	string $clipInputMeshUseSelected = ($clipInputMeshCtrl + "UseSelected");

	setUITemplate -pst attributeEditorTemplate;

	formLayout $clipInputMeshFormLayout;

		attrNavigationControlGrp
			-label (getPluginResource("bifrostvisplugin", "kClipInputMesh"))
			-attribute $clipInputMeshAttr
			-cw3 123 0 0
			$clipInputMeshLabel;
		attrNavigationControlGrp
			-label (getPluginResource("bifrostvisplugin", "kClipInputMesh"))
			-attribute $clipInputMeshAttr
			-enable 0
			-cw3 0 123 0
			$clipInputMeshField;
		button
			-label (getPluginResource("bifrostvisplugin", "kClipUseSelected"))
			-command ("AEbifrostShapeClippingUseSelected " + $clipInputMeshAttr)
			-height 20
			$clipInputMeshUseSelected;

		formLayout -edit
			-attachForm $clipInputMeshLabel "left" 8
			-attachNone $clipInputMeshLabel "right"
			-attachForm $clipInputMeshLabel "top" 0
			-attachNone $clipInputMeshLabel "bottom"

			-attachForm $clipInputMeshField "left" 40
			-attachControl $clipInputMeshField "right" 0 $clipInputMeshUseSelected
			-attachControl $clipInputMeshField "top" 0 $clipInputMeshLabel
			-attachNone $clipInputMeshField "bottom"

			-attachNone $clipInputMeshUseSelected "left"
			-attachForm $clipInputMeshUseSelected "right" 40
			-attachControl $clipInputMeshUseSelected "top" 0 $clipInputMeshLabel
			-attachNone $clipInputMeshUseSelected "bottom"

			$clipInputMeshFormLayout;

	setParent ..;

	setUITemplate -ppt;

	AEbifrostShapeClippingReplace($clipInputMeshAttr);
}

global proc AEbifrostShapeClippingReplace(string $clipInputMeshAttr)
{
	// Build control names from attributes
	string $clipInputMeshCtrl = getDiagnosticControlName($clipInputMeshAttr);

	string $clipInputMeshLabel = ($clipInputMeshCtrl + "Label");
	string $clipInputMeshField = ($clipInputMeshCtrl + "Field");
	string $clipInputMeshUseSelected = ($clipInputMeshCtrl + "UseSelected");

	attrNavigationControlGrp -e -attribute $clipInputMeshAttr $clipInputMeshLabel;
	attrNavigationControlGrp -e -attribute $clipInputMeshAttr -enable 0 $clipInputMeshField;
	button -e -command ("AEbifrostShapeClippingUseSelected " + $clipInputMeshAttr) $clipInputMeshUseSelected;
}

global proc AEbifrostShapeClippingUseSelected(string $clipInputMeshAttr)
{
	// Make sure exactly one node is selected
	string $selectedNodes[] = `ls -sl`;
	if (size($selectedNodes) > 1)
	{
		error (getPluginResource("bifrostvisplugin", "kClipUseSelectedExactOneError"));
	}
	else if (size($selectedNodes) == 0)
	{
		// Disconnect the attribute if nothing is selected.
		string $source[] = `listConnections -plugs true $clipInputMeshAttr`;
		if (size($source) > 0)
		{
			disconnectAttr $source[0] $clipInputMeshAttr;
		}
		return;
	}

	// Make sure that node is a mesh
	string $mesh;
	if (`objectType -isAType mesh $selectedNodes[0]`)
	{
		$mesh = $selectedNodes[0];
	}
	else
	{
		// Extend to shape
		string $shapes[] = `listRelatives -noIntermediate -shapes -type mesh $selectedNodes[0]`;
		if (size($shapes) == 0)
		{
			string $str = `format -stringArg $selectedNodes[0] (getPluginResource("bifrostvisplugin", "kClipUseSelectedNotMeshError"))`;
			error $str;
		}
		$mesh = $shapes[0];
	}

	connectAttr -force ($mesh + ".worldMesh") $clipInputMeshAttr;
}

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Methods for managing the enable/disable state of controls
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------

proc bifrostMeshingDimMain( string $nodeName, int $dim )
{
	editorTemplate -dimControl $nodeName "meshingDropletRevealFactor" $dim;
	editorTemplate -dimControl $nodeName "meshingSurfaceRadius" $dim;
	editorTemplate -dimControl $nodeName "meshingDropletRadius" $dim;
	editorTemplate -dimControl $nodeName "meshingKernelFactor" $dim;
	editorTemplate -dimControl $nodeName "meshingSmoothing" $dim;
	editorTemplate -dimControl $nodeName "meshingResolutionFactor" $dim;
	editorTemplate -dimControl $nodeName "meshingFlipFaceNormals" $dim;

	editorTemplate -dimControl $nodeName "meshingChannelTransferVelocityScale" $dim;

	string $clipInputMeshCtrl = getDiagnosticControlName($nodeName + ".meshingClipInputMesh");
	string $clipInputMeshFormLayout = ($clipInputMeshCtrl + "FormLayout");
	if (`formLayout -exists $clipInputMeshFormLayout`)
	{
		formLayout -edit -enable (!$dim) $clipInputMeshFormLayout;
	}
}

global proc AEbifrostShapeCheckParticles(string $nodeName)
{
	int $dim = !(`getAttr ($nodeName + ".particles")`);
	editorTemplate -dimControl $nodeName "particleType" ($dim);
	editorTemplate -dimControl $nodeName "showParticleColor" ($dim);
	editorTemplate -dimControl $nodeName "showParticleOpacity" ($dim);
	editorTemplate -dimControl $nodeName "showParticleNumeric" ($dim);
	editorTemplate -dimControl $nodeName "showParticleVector" ($dim);
	AEbifrostShapeCheckParticleType($nodeName);
	AEbifrostShapeCheckShowParticleColor($nodeName);
	AEbifrostShapeCheckShowParticleOpacity($nodeName);
	AEbifrostShapeCheckShowParticleNumeric($nodeName);
	AEbifrostShapeCheckShowParticleVector($nodeName);
	AEbifrostShapeCheckParticleComponent($nodeName);
}

global proc AEbifrostShapeCheckVoxels(string $nodeName)
{
	int $displayAsRender = getDisplayAsRender($nodeName);
	int $dim = !(`getAttr ($nodeName + ".voxels")`);
	editorTemplate -dimControl $nodeName "showVoxelColor" ($displayAsRender || $dim);
	AEbifrostShapeCheckVoxelType($nodeName);
	AEbifrostShapeCheckShowVoxelColor($nodeName);
	AEbifrostShapeCheckVoxelComponent($nodeName);
}

global proc AEbifrostShapeCheckParticleType(string $nodeName)
{
	int $dimMaxParticleDisplayCount	= true;
	int $dimPointSize				= true;
	int $dimSphereRadius			= true;

	int $particles = `getAttr ($nodeName + ".particles")`;
	if ($particles)
	{
		$dimMaxParticleDisplayCount = false;
		int $type = `getAttr ($nodeName + ".particleType")`;
		if ($type == 0)
		{
			$dimPointSize = false;
		}
		else if ($type == 1)
		{
			$dimSphereRadius = false;
		}
	}

	editorTemplate -dimControl $nodeName "maxParticleDisplayCount" $dimMaxParticleDisplayCount;
	editorTemplate -dimControl $nodeName "pointSize" $dimPointSize;
	editorTemplate -dimControl $nodeName "sphereRadius" $dimSphereRadius;
}

global proc AEbifrostShapeCheckShowParticleColor(string $nodeName)
{
	string $controlName = getDiagnosticControlName($nodeName + ".particleColorChannel");
	string $remapFrameLayout = (getDiagnosticControlName($nodeName + ".particleColorRemap") + "FrameLayout");
	if (`optionMenuGrp -exists $controlName` &&
		`frameLayout -exists $remapFrameLayout`)
	{
		int $particles = `getAttr ($nodeName + ".particles")`;
		int $show = `getAttr ($nodeName + ".showParticleColor")`;
		int $numItems = `optionMenuGrp -q -numberOfItems $controlName`;
		int $enable = ($particles && $show && ($numItems > 0));
		optionMenuGrp -edit -enable $enable $controlName;

		string $channel = `getAttr ($nodeName + ".particleColorChannel")`;
		$enable = ($enable && size($channel) > 0);
		frameLayout -edit -enable $enable $remapFrameLayout;
		string $remapMinCtrl = getDiagnosticControlName($nodeName + ".particleColorRemapMin");
		floatFieldGrp -edit -enable $enable $remapMinCtrl;
		string $remapMaxCtrl = getDiagnosticControlName($nodeName + ".particleColorRemapMax");
		floatFieldGrp -edit -enable $enable $remapMaxCtrl;
	}
}

global proc AEbifrostShapeCheckShowParticleOpacity(string $nodeName)
{
	string $controlName = getDiagnosticControlName($nodeName + ".particleOpacityChannel");
	string $remapFrameLayout = (getDiagnosticControlName($nodeName + ".particleOpacityRemap") + "FrameLayout");
	if (`optionMenuGrp -exists $controlName` &&
		`frameLayout -exists $remapFrameLayout`)
	{
		int $particles = `getAttr ($nodeName + ".particles")`;
		int $show = `getAttr ($nodeName + ".showParticleOpacity")`;
		int $numItems = `optionMenuGrp -q -numberOfItems $controlName`;
		int $enable = ($particles && $show && ($numItems > 0));
		optionMenuGrp -edit -enable $enable $controlName;

		string $channel = `getAttr ($nodeName + ".particleOpacityChannel")`;
		$enable = ($enable && size($channel) > 0);
		frameLayout -edit -enable $enable $remapFrameLayout;
		string $remapMinCtrl = getDiagnosticControlName($nodeName + ".particleOpacityRemapMin");
		floatFieldGrp -edit -enable $enable $remapMinCtrl;
		string $remapMaxCtrl = getDiagnosticControlName($nodeName + ".particleOpacityRemapMax");
		floatFieldGrp -edit -enable $enable $remapMaxCtrl;
	}
}

global proc AEbifrostShapeCheckShowParticleNumeric(string $nodeName)
{
	int $particles = `getAttr ($nodeName + ".particles")`;
	int $show = `getAttr ($nodeName + ".showParticleNumeric")`;
	editorTemplate -dimControl $nodeName "particleNumericChannel" (!$particles || !$show);
}

global proc AEbifrostShapeCheckShowParticleVector(string $nodeName)
{
	int $particles = `getAttr ($nodeName + ".particles")`;
	int $show = `getAttr ($nodeName + ".showParticleVector")`;
	editorTemplate -dimControl $nodeName "particleVectorChannel" (!$particles || !$show);
}

global proc AEbifrostShapeCheckVoxelType(string $nodeName)
{
	int $dimQuality = true;

	int $displayAsRender = getDisplayAsRender($nodeName);
	if (!$displayAsRender)
	{
		int $voxels = `getAttr ($nodeName + ".voxels")`;
		if ($voxels)
		{
			int $type = `getAttr ($nodeName + ".voxelType")`;
			if ($type == 1)
			{
				$dimQuality = false;
			}
		}
	}

	editorTemplate -dimControl $nodeName "quality" $dimQuality;

	// Dim controls if there is no voxels
	int $noVoxels = (`getAttr ($nodeName + ".voxelType")` == 2);
	editorTemplate -dimControl $nodeName "voxels" $noVoxels;
	editorTemplate -dimControl $nodeName "tileView" $noVoxels;
	editorTemplate -dimControl $nodeName "meshingEnable" $noVoxels;
	bifrostMeshingDimMain($nodeName, $noVoxels);
}

global proc AEbifrostShapeCheckShowVoxelColor(string $nodeName)
{
	string $controlName = getDiagnosticControlName($nodeName + ".voxelColorChannel");
	string $remapFrameLayout = (getDiagnosticControlName($nodeName + ".voxelColorRemap") + "FrameLayout");
	if (`optionMenuGrp -exists $controlName` &&
		`frameLayout -exists $remapFrameLayout`)
	{
		int $displayAsRender = getDisplayAsRender($nodeName);
		int $voxels = `getAttr ($nodeName + ".voxels")`;
		int $show = `getAttr ($nodeName + ".showVoxelColor")`;
		int $numItems = `optionMenuGrp -q -numberOfItems $controlName`;
		int $enable = (!$displayAsRender && $voxels && $show && ($numItems > 0));
		optionMenuGrp -edit -enable $enable $controlName;

		string $channel = `getAttr ($nodeName + ".voxelColorChannel")`;
		$enable = ($enable && size($channel) > 0);
		frameLayout -edit -enable $enable $remapFrameLayout;
		string $remapMinCtrl = getDiagnosticControlName($nodeName + ".voxelColorRemapMin");
		floatFieldGrp -edit -enable $enable $remapMinCtrl;
		string $remapMaxCtrl = getDiagnosticControlName($nodeName + ".voxelColorRemapMax");
		floatFieldGrp -edit -enable $enable $remapMaxCtrl;
	}
}

global proc AEbifrostShapeCheckParticleComponent(string $nodeName)
{
	string $controlName = getDiagnosticControlName($nodeName + ".particleComponent");
	if (`optionMenuGrp -exists $controlName`)
	{
		int $particles = `getAttr ($nodeName + ".particles")`;
		optionMenuGrp -edit -enable $particles $controlName;
	}
}

global proc AEbifrostShapeCheckVoxelComponent(string $nodeName)
{
	string $controlName = getDiagnosticControlName($nodeName + ".voxelComponent");
	if (`optionMenuGrp -exists $controlName`)
	{
		int $voxels = `getAttr ($nodeName + ".voxels")`;
		optionMenuGrp -edit -enable $voxels $controlName;
	}
}

global proc AEbifrostShapeCheckCacheEnabled(string $nodeName)
{
	int $cache = `getAttr ($nodeName + ".cacheEnabled")`;
	if ($cache)
	{
		editorTemplate -dimControl $nodeName "volumeCacheDirectory" false;
	}
	else
	{
		editorTemplate -dimControl $nodeName "volumeCacheDirectory" true;
	}
}

global proc AEbifrostTileViewEnable( string $nodeName )
{
	int $tileView = `getAttr ($nodeName + ".tileView")`;

	editorTemplate -dimControl $nodeName "tileViewMinLevel" (!$tileView);
	editorTemplate -dimControl $nodeName "tileViewMaxLevel" (!$tileView);
	editorTemplate -dimControl $nodeName "tileViewFocusLevel" (!$tileView);
	editorTemplate -dimControl $nodeName "tileViewFocusFalloff" (!$tileView);

	string $faceColorFormLayout = (getDiagnosticControlName($nodeName + ".tileViewFaceColor") + "FormLayout");
	if (`formLayout -exists $faceColorFormLayout`)
	{
		formLayout -edit -enable ($tileView) $faceColorFormLayout;
	}

	string $clipInputMeshCtrl = getDiagnosticControlName($nodeName + ".tileViewClipInputMesh");
	string $clipInputMeshFormLayout = ($clipInputMeshCtrl + "FormLayout");
	if (`formLayout -exists $clipInputMeshFormLayout`)
	{
		formLayout -edit -enable ($tileView) $clipInputMeshFormLayout;
	}
}

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// The AE template for the bifrost shape
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
global proc AEbifrostShapeTemplate(string $nodeName)
{
	editorTemplate -beginScrollLayout;

		// Render type
		editorTemplate -beginLayout (getPluginResource("bifrostvisplugin", "kRender")) -collapse 0;
			//editorTemplate -label (getPluginResource("bifrostvisplugin", "kRenderType")) -addControl "bifrostRenderType";
			editorTemplate -addControl "renderQuality";
			//editorTemplate -label (getPluginResource("bifrostvisplugin", "kRenderHardVoxelThreshold")) -addControl "renderHardVoxelThreshold";
			editorTemplate -label (getPluginResource("bifrostvisplugin", "kRenderSharpenFilterStrength")) -addControl "renderSharpenFilterStrength";
			//editorTemplate -label (getPluginResource("bifrostvisplugin", "kRenderParticleSize")) -addControl "renderParticleSize";
			//editorTemplate -label (getPluginResource("bifrostvisplugin", "kRenderParticleFaceCamera")) -addControl "renderParticleFaceCamera";
		editorTemplate -endLayout;

		// Display type
		editorTemplate -beginLayout (getPluginResource("bifrostvisplugin", "kDisplay")) -collapse 0;
			editorTemplate -interruptOptimize;
			editorTemplate -addControl "particles" "AEbifrostShapeCheckParticles";
			editorTemplate -addControl "voxels" "AEbifrostShapeCheckVoxels";
			editorTemplate -addControl "displayBoundingBox";

			// Particle display controls
			editorTemplate -beginLayout (getPluginResource("bifrostvisplugin", "kParticleDisplay")) -collapse 0;
				editorTemplate -label (getPluginResource("bifrostvisplugin", "kParticleType")) -addControl "particleType" "AEbifrostShapeCheckParticleType";
				editorTemplate -addControl "maxParticleDisplayCount";
				editorTemplate -addControl "pointSize";
				editorTemplate -addControl "sphereRadius";

				editorTemplate -addSeparator;

				editorTemplate -label (getPluginResource("bifrostvisplugin", "kShowParticleColor")) -addControl "showParticleColor" "AEbifrostShapeCheckShowParticleColor";
				editorTemplate -callCustom "AEbifrostShapeDiagnosticChannelNew" "AEbifrostShapeDiagnosticChannelReplace" "particleColorChannel" "kColorChannel";
				editorTemplate -callCustom "AEbifrostShapeDiagnosticRemapNew" "AEbifrostShapeDiagnosticRemapReplace"
											"particleColorRemapMin" "particleColorRemapMax" "particleColorRemap" "particleColorValueRemap"
											"kColorRemap" "kColorRemapMin" "kColorRemapMax";

				editorTemplate -addSeparator;

				editorTemplate -label (getPluginResource("bifrostvisplugin", "kShowParticleOpacity")) -addControl "showParticleOpacity" "AEbifrostShapeCheckShowParticleOpacity";
				editorTemplate -callCustom "AEbifrostShapeDiagnosticChannelNew" "AEbifrostShapeDiagnosticChannelReplace" "particleOpacityChannel" "kOpacityChannel";
				editorTemplate -callCustom "AEbifrostShapeDiagnosticRemapNew" "AEbifrostShapeDiagnosticRemapReplace"
											"particleOpacityRemapMin" "particleOpacityRemapMax" "particleOpacityRemap" "particleOpacityValueRemap"
											"kOpacityRemap" "kOpacityRemapMin" "kOpacityRemapMax";

				editorTemplate -addSeparator;

				editorTemplate -label (getPluginResource("bifrostvisplugin", "kShowParticleNumeric")) -addControl "showParticleNumeric" "AEbifrostShapeCheckShowParticleNumeric";
				editorTemplate -callCustom "AEbifrostShapeDiagnosticChannelNew" "AEbifrostShapeDiagnosticChannelReplace" "particleNumericChannel" "kNumericChannel";

				editorTemplate -addSeparator;

				editorTemplate -label (getPluginResource("bifrostvisplugin", "kShowParticleVector")) -addControl "showParticleVector" "AEbifrostShapeCheckShowParticleVector";
				editorTemplate -callCustom "AEbifrostShapeDiagnosticChannelNew" "AEbifrostShapeDiagnosticChannelReplace" "particleVectorChannel" "kVectorChannel";
			editorTemplate -endLayout;

			// Voxel display controls
			editorTemplate -beginLayout (getPluginResource("bifrostvisplugin", "kVoxelDisplay")) -collapse 0;
				editorTemplate -addControl "quality";
				editorTemplate -addSeparator;

				editorTemplate -label (getPluginResource("bifrostvisplugin", "kShowVoxelColor")) -addControl "showVoxelColor" "AEbifrostShapeCheckShowVoxelColor";
				editorTemplate -callCustom "AEbifrostShapeDiagnosticChannelNew" "AEbifrostShapeDiagnosticChannelReplace" "voxelColorChannel" "kColorChannel";
				editorTemplate -callCustom "AEbifrostShapeDiagnosticRemapNew" "AEbifrostShapeDiagnosticRemapReplace"
											"voxelColorRemapMin" "voxelColorRemapMax" "voxelColorRemap" "voxelColorValueRemap"
											"kColorRemap" "kColorRemapMin" "kColorRemapMax";
			editorTemplate -endLayout;

			// Clipping controls
			editorTemplate -beginLayout (getPluginResource("bifrostvisplugin", "kClipping")) -collapse 1;
				editorTemplate -callCustom "AEbifrostShapeClippingNew" "AEbifrostShapeClippingReplace" "clipInputMesh";
			editorTemplate -endLayout;

		editorTemplate -endLayout;


		// Tile View controls
		editorTemplate -beginLayout (getPluginResource("bifrostvisplugin", "kTileView"));
			editorTemplate -beginLayout (getPluginResource("bifrostvisplugin", "kDisplay")) -collapse 0;
				editorTemplate -label (getPluginResource("bifrostvisplugin", "kTileViewEnable")) -addControl "tileView" "AEbifrostTileViewEnable";
				editorTemplate -label (getPluginResource("bifrostvisplugin", "kTileViewMinLevel")) -addControl "tileViewMinLevel";
				editorTemplate -label (getPluginResource("bifrostvisplugin", "kTileViewMaxLevel")) -addControl "tileViewMaxLevel";
				editorTemplate -label (getPluginResource("bifrostvisplugin", "kTileViewFocusLevel")) -addControl "tileViewFocusLevel";
				editorTemplate -label (getPluginResource("bifrostvisplugin", "kTileViewFocusFalloff")) -addControl "tileViewFocusFalloff";
			editorTemplate -endLayout;

			editorTemplate -beginLayout (getPluginResource("bifrostvisplugin", "kClipping")) -collapse 0;
				editorTemplate -callCustom "AEbifrostShapeClippingNew" "AEbifrostShapeClippingReplace" "tileViewClipInputMesh";
			editorTemplate -endLayout;

			editorTemplate -beginLayout (getPluginResource("bifrostvisplugin", "kColor")) -collapse 0;
				editorTemplate -callCustom "AEbifrostShapeTileViewColorNew" "AEbifrostShapeTileViewColorReplace" "tileViewFaceColor";
			editorTemplate -endLayout;

		editorTemplate -endLayout;


		// Meshing controls
		editorTemplate -beginLayout (getPluginResource("bifrostvisplugin", "kBifrostMeshingControls")) -collapse 1;
			editorTemplate -label (getPluginResource("bifrostvisplugin", "kMeshingEnable"))					-addControl		"meshingEnable";
			editorTemplate -label (getPluginResource("bifrostvisplugin", "kMeshingDropletRevealFactor"))	-addControl 	"meshingDropletRevealFactor";
			editorTemplate -label (getPluginResource("bifrostvisplugin", "kMeshingSurfaceRadius"))			-addControl 	"meshingSurfaceRadius";
			editorTemplate -label (getPluginResource("bifrostvisplugin", "kMeshingDropletRadius"))			-addControl 	"meshingDropletRadius";
			editorTemplate -label (getPluginResource("bifrostvisplugin", "kMeshingKernelFactor"))			-addControl 	"meshingKernelFactor";
			editorTemplate -label (getPluginResource("bifrostvisplugin", "kMeshingSmoothing"))				-addControl 	"meshingSmoothing";
			editorTemplate -label (getPluginResource("bifrostvisplugin", "kMeshingResolutionFactor"))		-addControl 	"meshingResolutionFactor";
			editorTemplate -label (getPluginResource("bifrostvisplugin", "kMeshingFlipFaceNormals"))		-addControl 	"meshingFlipFaceNormals";

			// Clipping controls
			editorTemplate -beginLayout (getPluginResource("bifrostvisplugin", "kClipping")) -collapse 1;
				editorTemplate -callCustom "AEbifrostShapeClippingNew" "AEbifrostShapeClippingReplace" "meshingClipInputMesh";
			editorTemplate -endLayout;

			editorTemplate -beginLayout (getPluginResource("bifrostvisplugin", "kBifrostMeshingChannelTransferControls" )) -collapse 1;
				editorTemplate -label (getPluginResource("bifrostvisplugin", "kMeshingChannelTransferVelocityScale"))	-addControl "meshingChannelTransferVelocityScale";
			editorTemplate -endLayout; 

		editorTemplate -endLayout;

		// Component Display
		editorTemplate -beginLayout (getPluginResource("bifrostvisplugin", "kComponentDisplay")) -collapse 1;
			editorTemplate -callCustom "AEbifrostShapeComponentListNew" "AEbifrostShapeComponentListReplace" "particleComponent" "kParticle";
			editorTemplate -callCustom "AEbifrostShapeComponentListNew" "AEbifrostShapeComponentListReplace" "voxelComponent" "kVoxel";
		editorTemplate -endLayout;

		// Simple render stats
		source AEgeometryShapeTemplate;
		editorTemplate -beginLayout (uiRes("m_AEbifrostShapeTemplate.kRenderStats"));
			editorTemplate -beginNoOptimize;
			editorTemplate -addControl "castsShadows";
			editorTemplate -addControl "receiveShadows";
			editorTemplate -addControl "motionBlur";
			editorTemplate -addControl "primaryVisibility";
			editorTemplate -addControl "visibleInReflections";
			editorTemplate -addControl "visibleInRefractions";
			editorTemplate -endNoOptimize;
		editorTemplate -endLayout;

		// Add controls for base class in Maya
		AEshapeTemplate $nodeName;

		// Add any missing controls
		editorTemplate -addExtraControls;

	editorTemplate -endScrollLayout;

	// Suppress meaningless attributes
	editorTemplate -suppress "voxelType";
	editorTemplate -suppress "density";
	editorTemplate -suppress "compInstObjGroups";
	editorTemplate -suppress "doubleSided";
	editorTemplate -suppress "opposite";
	editorTemplate -suppress "smoothShading";
	editorTemplate -suppress "ignoreSelfShadowing";
	editorTemplate -suppress "featureDisplacement";
	editorTemplate -suppress "initialSampleRate";
	editorTemplate -suppress "extraSampleRate";
	editorTemplate -suppress "textureThreshold";
	editorTemplate -suppress "normalThreshold";
	editorTemplate -suppress "boundingBoxScale";
	editorTemplate -suppress "shadingSamplesOverride";
	editorTemplate -suppress "shadingSamples";
	editorTemplate -suppress "maxShadingSamples";
	editorTemplate -suppress "volumeSamplesOverride";
	editorTemplate -suppress "volumeSamples";
	editorTemplate -suppress "maxVisibilitySamplesOverride";
	editorTemplate -suppress "maxVisibilitySamples";
	editorTemplate -suppress "geometryAntialiasingOverride";
	editorTemplate -suppress "antialiasingLevel";
	editorTemplate -suppress "depthJitter";
	editorTemplate -suppress "controlPoints";
	editorTemplate -suppress "weights";
	editorTemplate -suppress "tweak";
	editorTemplate -suppress "relativeTweak";
	editorTemplate -suppress "currentUVSet";
	editorTemplate -suppress "currentColorSet";
	editorTemplate -suppress "uvSet";
	editorTemplate -suppress "displayColors";
	editorTemplate -suppress "displayColorChannel";
	editorTemplate -suppress "displayImmediate";
	editorTemplate -suppress "colorSet";
	editorTemplate -suppress "featureDisplacement";
	editorTemplate -suppress "initialSampleRate";
	editorTemplate -suppress "extraSampleRate";
	editorTemplate -suppress "textureThreshold";
	editorTemplate -suppress "normalThreshold";
	editorTemplate -suppress "boundingBoxScale";
	editorTemplate -suppress "collisionOffsetVelocityIncrement";
	editorTemplate -suppress "collisionDepthVelocityIncrement";
	editorTemplate -suppress "collisionOffsetVelocityMultiplier";
	editorTemplate -suppress "collisionDepthVelocityMultiplier";
	editorTemplate -suppress "object";
	editorTemplate -suppress "particleChannel";
	editorTemplate -suppress "voxelChannel";
	editorTemplate -suppress "steps";
	editorTemplate -suppress "cacheEnabled";
	editorTemplate -suppress "volumeCacheDirectory";
	editorTemplate -suppress "bifrostRenderType";
	editorTemplate -suppress "renderHardVoxelThreshold";
	editorTemplate -suppress "renderParticleSize";
	editorTemplate -suppress "renderParticleFaceCamera";
	editorTemplate -suppress "meshingClipInputMesh";
}
