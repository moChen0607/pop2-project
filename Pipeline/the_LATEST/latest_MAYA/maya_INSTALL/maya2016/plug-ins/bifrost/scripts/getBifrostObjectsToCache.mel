// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

//
//
//  Creation Date:  2013
//
//  Description:
//      Get a list of Bifrost objects for caching.
//		
//
global proc string[] getBifrostObjectsToCache(int $showError)
{

	string $objsToCache[];

	// look for the xforms of bifrost containers as wellairs as well
	// because getGeometries to cache only gets deformable shapes
	string $obj;
 	string $sel[] = `ls -sl -type transform`;
 	for ($selObj in $sel) {
		string $objects[] = `listRelatives -pa -ni -shapes $selObj`;
 		for( $obj in $objects ) {
			string $nType = nodeType( $obj );
			if($nType == "bifrostContainer")
				$objsToCache[size($objsToCache)] = $obj;
			else if($nType == "bifrostShape") {
				string $containers[] = `listConnections -sh 1 ($obj+".object")`;
				if((size($containers) > 0) && (nodeType($containers[0]) =="bifrostContainer"))
	 				$objsToCache[size($objsToCache)] =  $containers[0];
			}
        	}
	}
	if(0 == size($objsToCache)) {
		$objsToCache = `ls -sl -type bifrostContainer`;
	}
	
	$objsToCache = stringArrayRemoveDuplicates( $objsToCache );
	
	if ($showError && 0 == size($objsToCache)) {
		error((uiRes("m_getBifrostObjectsToCache.kSelectBifrostError")));
	}
	return $objsToCache;
}
