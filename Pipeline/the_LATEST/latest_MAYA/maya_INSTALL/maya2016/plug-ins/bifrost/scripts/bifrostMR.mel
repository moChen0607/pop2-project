// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.


global proc string bifrostMR( string $SG, string $type )
/*
   Description:
        Modify the supplied shading group for mental ray rendering.

    Arguments:
        SG - name of the shading group to modify.
        type - type of shading group to create. isosurface, volume and particles

    Return Value:
        Shading Group name.
*/
{
    // Store original selection
    string $sel[] = `ls -selection`;

    string $mrPresets = `getenv "MENTALRAY_LOCATION"` + "/presets/attrPresets";

    // Create different shaders based on the requested type.
    if( $type=="isosurface" )
    {
        // bifrostLiquidMaterial now holds everything
    }
    else if( $type=="volume" )
    {
        // bifrostAeroMaterial now holds everything
    }
    else if( $type=="particles" ){
        // Create mia_material shader
        string $shader = `createNode "mia_material_x"`;
        connectAttr -na ($shader+".msg") ":defaultShaderList1.s";
        connectAttr ($shader+".msg") ($SG+".miMaterialShader");
        connectAttr ($shader+".msg") ($SG+".miShadowShader");
        connectAttr ($shader+".msg") ($SG+".miPhotonShader");
    }

    // Restore selection
    select -r $sel;

    return $SG;
}
