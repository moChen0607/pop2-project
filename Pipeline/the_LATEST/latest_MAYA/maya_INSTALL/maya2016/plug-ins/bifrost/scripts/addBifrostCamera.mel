// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global proc string[] addBifrostCamera( string $bifrostCamera )
{
	if(!`exists addBifrostCollider`) {
		// shared bifrost input  scripts here
		source "addBifrostCollider.mel";
	}
	string $result[];
	string $shell = "";
	string $selList[] = `ls -sl`;
	string $item;
	string $camera = "";
	string $cameras[];

	for( $item in $selList ) {
		// We will get the first container and first camera available in the selection list
 		if( size($shell) == 0 ) {
			$shell = filterBifrostInput( $item, "bifrostContainer" );
		}
		if( size($camera) == 0 ) {
			$cameras = `listRelatives -s  $item`;
			if(size( $cameras) > 0 && nodeType($cameras[0]) == "camera") {
				$camera = $cameras[0];
			}
		}
	}

	// if there is no selected camera, just use the 1st persp camera we find for now
	if(size($camera) == 0 ) {
		string $perspCameras[] = `listCameras -p`;
		$cameras = `listRelatives -s  $perspCameras[0]`;
		if( size( $cameras ) > 0 ){
			$camera = $cameras[0];
		}
	}	
	if( size($shell) > 1 && size( $camera ) > 0) {
		string $cameraAttr = $shell + "." + $bifrostCamera + "[0]";
		string $cameraMat = ($camera + ".worldMatrix[0]");

       	if(`objExists $cameraAttr`)
        {
			connectAttr -f $cameraMat $cameraAttr;
			string $adaptivityAttr = $shell + ".cameraAdaptivity";
			if( `objExists $adaptivityAttr`){
				if( getAttr( $adaptivityAttr) == 0 ){
					setAttr $adaptivityAttr 0.5; // enable some adaptivity so attaching camera has an effect
				}
			}
        } else {
			error (uiRes("m_addBifrostCamera.kNoCameraInput"));
		}
		// could set/connect additional camera attrs here, bake camera anim, etc. 
	}
	else {
		error (uiRes("m_addBifrostCamera.kCannotAddCamera"));
	}

	return $result;
}

