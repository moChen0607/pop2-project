{
    "header": {
        "metadata": [
            {
                "metaName": "adskGraphlibVersion",
                "metaType": "string",
                "metaValue": "1.0"
            },
            {
                "metaName": "adskFileFormatVersion",
                "metaValue": "100L"
            }
        ]
    },
    "dependencies": [
        {
            "uri": "file:///createAeroMeshes.json"
        },
        {
            "uri": "file:///keepAeroMeshes.json"
        },
        {
            "uri": "file:///solveAero.json"
        },
        {
            "uri": "file:///createObjectWhenCaching.json"
        },
        {
            "uri": "file:///scopeAero.json"
        },
        {
            "uri": "file:///scopeSolids.json"
        },
        {
            "uri": "file:///convertCelsiusToKelvin.json"
        },
        {
            "uri": "file:///updateSubStepIterator.json"
        },
        {
            "uri": "file:///createVoxelObject.json"
        },
        {
            "uri": "file:///basenodes.json"
        },
        {
            "uri": "file:///cacheObjectToDisk.json"
        },
        {
            "uri": "file:///createAeroMeshes.json"
        },
        {
            "uri": "file:///keepAeroMeshes.json"
        },
        {
            "uri": "file:///solveAero.json"
        },
        {
            "uri": "file:///createObjectWhenCaching.json"
        },
        {
            "uri": "file:///scopeAero.json"
        },
        {
            "uri": "file:///scopeSolids.json"
        },
        {
            "uri": "file:///convertCelsiusToKelvin.json"
        },
        {
            "uri": "file:///updateSubStepIterator.json"
        },
        {
            "uri": "file:///createVoxelObject.json"
        },
        {
            "uri": "file:///basenodes.json"
        },
        {
            "uri": "file:///cacheObjectToDisk.json"
        }
    ],
    "types": [],
    "operators": [],
    "compounds": [
        {
            "name": "aero",
            "ports": [
                {
                    "portName": "Emitters",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::IOMeshArray"
                },
                {
                    "portName": "Colliders",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::IOMeshArray"
                },
                {
                    "portName": "Accelerators",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::IOMeshArray"
                },
                {
                    "portName": "AdaptiveMeshes",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::IOMeshArray"
                },
                {
                    "portName": "masterVoxelSize",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "masterVoxelSizeRenderFactor",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "airDensity",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "airTemperature",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "killplanes",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::Mat44FloatArray"
                },
                {
                    "portName": "renderParticleDensity",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "clipBBoxMin",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::Vec3Float"
                },
                {
                    "portName": "clipBBoxMax",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::Vec3Float"
                },
                {
                    "portName": "clipBBoxTransform",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::Mat44Float"
                },
                {
                    "portName": "smokeThreshold",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "flipParticleDensity",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "gravityDirection",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::Vec3Float"
                },
                {
                    "portName": "AeroObject",
                    "portDirection": "output",
                    "portType": "Bifrost::Types::ObjectDescriptor"
                },
                {
                    "portName": "SolidObject",
                    "portDirection": "output",
                    "portType": "Bifrost::Types::ObjectDescriptor"
                },
                {
                    "portName": "gravityMagnitude",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "transform",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::Mat44Float"
                },
                {
                    "portName": "adaptive",
                    "portDirection": "input",
                    "portType": "bool"
                },
                {
                    "portName": "transportTimeScale",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "transportStepAdaptivity",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "minSteps",
                    "portDirection": "input",
                    "portType": "int"
                },
                {
                    "portName": "maxSteps",
                    "portDirection": "input",
                    "portType": "int"
                },
                {
                    "portName": "aeroCacheControl",
                    "portDirection": "input",
                    "portType": "int"
                },
                {
                    "portName": "aeroCompressionQuality",
                    "portDirection": "input",
                    "portType": "int"
                },
                {
                    "portName": "aeroCachePath",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::Filepath"
                },
                {
                    "portName": "aeroCacheFileName",
                    "portDirection": "input",
                    "portType": "string"
                },
                {
                    "portName": "enableAeroCache",
                    "portDirection": "input",
                    "portType": "bool"
                },
                {
                    "portName": "solidCacheControl",
                    "portDirection": "input",
                    "portType": "int"
                },
                {
                    "portName": "solidCompressionQuality",
                    "portDirection": "input",
                    "portType": "int"
                },
                {
                    "portName": "solidCachePath",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::Filepath"
                },
                {
                    "portName": "solidCacheFileName",
                    "portDirection": "input",
                    "portType": "string"
                },
                {
                    "portName": "enableSolidCache",
                    "portDirection": "input",
                    "portType": "bool"
                }
            ],
            "compounds": [
                {
                    "name": "subStepAero",
                    "ports": [
                        {
                            "portName": "gravityVector",
                            "portDirection": "input",
                            "portType": "Bifrost::Types::Vec3Float"
                        },
                        {
                            "portName": "masterVoxelSizeRender",
                            "portDirection": "input",
                            "portType": "float"
                        },
                        {
                            "portName": "bboxMin",
                            "portDirection": "input",
                            "portType": "Bifrost::Types::Vec3Float"
                        },
                        {
                            "portName": "bboxMax",
                            "portDirection": "input",
                            "portType": "Bifrost::Types::Vec3Float"
                        },
                        {
                            "portName": "transform",
                            "portDirection": "input",
                            "portType": "Bifrost::Types::Mat44Float"
                        },
                        {
                            "portName": "masterVoxelSize",
                            "portDirection": "input",
                            "portType": "float"
                        },
                        {
                            "portName": "flipPointDensity",
                            "portDirection": "input",
                            "portType": "float"
                        },
                        {
                            "portName": "renderPointDensity",
                            "portDirection": "input",
                            "portType": "float"
                        },
                        {
                            "portName": "smokeThreshold",
                            "portDirection": "input",
                            "portType": "float"
                        },
                        {
                            "portName": "killPlanes",
                            "portDirection": "input",
                            "portType": "Bifrost::Types::Mat44FloatArray"
                        },
                        {
                            "portName": "emitters",
                            "portDirection": "input",
                            "portType": "Bifrost::Types::IOMeshArray"
                        },
                        {
                            "portName": "solids",
                            "portDirection": "input",
                            "portType": "Bifrost::Types::IOMeshArray"
                        },
                        {
                            "portName": "accelerators",
                            "portDirection": "input",
                            "portType": "Bifrost::Types::IOMeshArray"
                        },
                        {
                            "portName": "adaptiveMeshes",
                            "portDirection": "input",
                            "portType": "Bifrost::Types::IOMeshArray"
                        },
                        {
                            "portName": "airDensity",
                            "portDirection": "input",
                            "portType": "float"
                        },
                        {
                            "portName": "airTemperature",
                            "portDirection": "input",
                            "portType": "float"
                        },
                        {
                            "portName": "isAdaptive",
                            "portDirection": "input",
                            "portType": "bool"
                        },
                        {
                            "portName": "transportTimeScale",
                            "portDirection": "input",
                            "portType": "float"
                        },
                        {
                            "portName": "transportStepAdaptivity",
                            "portDirection": "input",
                            "portType": "float"
                        },
                        {
                            "portName": "minSteps",
                            "portDirection": "input",
                            "portType": "int"
                        },
                        {
                            "portName": "maxSteps",
                            "portDirection": "input",
                            "portType": "int"
                        },
                        {
                            "portName": "solidObjectOut",
                            "portDirection": "output",
                            "portType": "Bifrost::Types::Object"
                        },
                        {
                            "portName": "aeroObjectOut",
                            "portDirection": "output",
                            "portType": "Bifrost::Types::Object"
                        },
                        {
                            "portName": "ittr_input",
                            "portDirection": "input",
                            "portType": "bool"
                        },
                        {
                            "portName": "ittr_output",
                            "portDirection": "output",
                            "portType": "bool"
                        }
                    ],
                    "compoundNodes": [
                        {
                            "nodeName": "solveAero",
                            "nodeType": "Bifrost::Nodes::Misc::solveAero"
                        },
                        {
                            "nodeName": "updateSubStepIterator",
                            "nodeType": "Bifrost::_private::updateSubStepIterator"
                        },
                        {
                            "nodeName": "AeroObject",
                            "nodeType": "Bifrost::Nodes::Misc::valueString"
                        },
                        {
                            "nodeName": "AeroObject-flipVolume",
                            "nodeType": "Bifrost::Nodes::Misc::valueString"
                        },
                        {
                            "nodeName": "valueBool",
                            "nodeType": "Bifrost::Nodes::Math::valueBool"
                        }
                    ],
                    "connections": [
                        {
                            "source": ".ittr_input",
                            "target": "valueBool.val"
                        },
                        {
                            "source": "valueBool.value",
                            "target": ".ittr_output"
                        },
                        {
                            "source": ".gravityVector",
                            "target": "solveAero.gravityVector"
                        },
                        {
                            "source": ".masterVoxelSizeRender",
                            "target": "solveAero.masterVoxelSizeRender"
                        },
                        {
                            "source": ".bboxMin",
                            "target": "solveAero.bboxMin"
                        },
                        {
                            "source": ".bboxMax",
                            "target": "solveAero.bboxMax"
                        },
                        {
                            "source": ".transform",
                            "target": "solveAero.transform"
                        },
                        {
                            "source": ".masterVoxelSize",
                            "target": "solveAero.masterVoxelSize"
                        },
                        {
                            "source": ".flipPointDensity",
                            "target": "solveAero.flipPointDensity"
                        },
                        {
                            "source": ".renderPointDensity",
                            "target": "solveAero.renderPointDensity"
                        },
                        {
                            "source": ".smokeThreshold",
                            "target": "solveAero.smokeThreshold"
                        },
                        {
                            "source": ".killPlanes",
                            "target": "solveAero.killPlanes"
                        },
                        {
                            "source": ".emitters",
                            "target": "solveAero.emitters"
                        },
                        {
                            "source": ".solids",
                            "target": "solveAero.solids"
                        },
                        {
                            "source": ".accelerators",
                            "target": "solveAero.accelerators"
                        },
                        {
                            "source": ".adaptiveMeshes",
                            "target": "solveAero.adaptiveMeshes"
                        },
                        {
                            "source": ".airDensity",
                            "target": "solveAero.airDensity"
                        },
                        {
                            "source": ".airTemperature",
                            "target": "solveAero.airTemperature"
                        },
                        {
                            "source": ".isAdaptive",
                            "target": "solveAero.isAdaptive"
                        },
                        {
                            "source": ".transportTimeScale",
                            "target": "solveAero.transportTimeScale"
                        },
                        {
                            "source": ".transportStepAdaptivity",
                            "target": "solveAero.transportStepAdaptivity"
                        },
                        {
                            "source": ".minSteps",
                            "target": "solveAero.minSteps"
                        },
                        {
                            "source": ".maxSteps",
                            "target": "solveAero.maxSteps"
                        },
                        {
                            "source": "solveAero.solidObjectOut",
                            "target": ".solidObjectOut"
                        },
                        {
                            "source": "solveAero.aeroObjectOut",
                            "target": ".aeroObjectOut"
                        },
                        {
                            "source": ".masterVoxelSize",
                            "target": "updateSubStepIterator.mvs"
                        },
                        {
                            "source": "solveAero.outLoopingCondition",
                            "target": ".looping_condition"
                        },
                        {
                            "source": "updateSubStepIterator.condition",
                            "target": "solveAero.loopingCondition"
                        },
                        {
                            "source": "AeroObject.value",
                            "target": "updateSubStepIterator.objectName"
                        },
                        {
                            "source": "AeroObject-flipVolume.value",
                            "target": "updateSubStepIterator.compName"
                        }
                    ],
                    "values": [
                        {
                            "valueName": "AeroObject.str",
                            "valueType": "string",
                            "value": "AeroObject"
                        },
                        {
                            "valueName": "AeroObject-flipVolume.str",
                            "valueType": "string",
                            "value": "AeroObject-flipVolume"
                        }
                    ],
                    "whileCompound": {
                        "ports": [
                            {
                                "portKind": "state",
                                "inputPortName": "ittr_input",
                                "outputPortName": "ittr_output"
                            }
                        ]
                    }
                }
            ],
            "compoundNodes": [
                {
                    "nodeName": "setDescriptorFromObject",
                    "nodeType": "Bifrost::Nodes::Object::setDescriptorFromObject"
                },
                {
                    "nodeName": "setDescriptorFromObject1",
                    "nodeType": "Bifrost::Nodes::Object::setDescriptorFromObject"
                },
                {
                    "nodeName": "keepAeroMeshes",
                    "nodeType": "Bifrost::_private::keepAeroMeshes"
                },
                {
                    "nodeName": "createAeroMeshes",
                    "nodeType": "Bifrost::Nodes::_private::createAeroMeshes"
                },
                {
                    "nodeName": "createObjectWhenCaching",
                    "nodeType": "Bifrost::Nodes::Misc::createObjectWhenCaching"
                },
                {
                    "nodeName": "createObjectWhenCaching1",
                    "nodeType": "Bifrost::Nodes::Misc::createObjectWhenCaching"
                },
                {
                    "nodeName": "AeroObject",
                    "nodeType": "Bifrost::Nodes::Misc::valueString"
                },
                {
                    "nodeName": "Solids",
                    "nodeType": "Bifrost::Nodes::Misc::valueString"
                },
                {
                    "nodeName": "scopeAero",
                    "nodeType": "Bifrost::Nodes::Misc::scopeAero"
                },
                {
                    "nodeName": "scopeSolids",
                    "nodeType": "Bifrost::Nodes::Misc::scopeSolids"
                },
                {
                    "nodeName": "mul",
                    "nodeType": "Bifrost::Nodes::Math::mul"
                },
                {
                    "nodeName": "rotateAndScale",
                    "nodeType": "Bifrost::Nodes::Math::rotateAndScale"
                },
                {
                    "nodeName": "convertCelsiusToKelvin",
                    "nodeType": "Bifrost::Nodes::Misc::convertCelsiusToKelvin"
                },
                {
                    "nodeName": "subStepAero",
                    "nodeType": "subStepAero"
                },
                {
                    "nodeName": "initTimestepCFL",
                    "nodeType": "Bifrost::Nodes::_private::initTimestepCFL"
                },
                {
                    "nodeName": "cacheObjectToDisk",
                    "nodeType": "Bifrost::Nodes::Misc::cacheObjectToDisk"
                },
                {
                    "nodeName": "cacheObjectToDisk1",
                    "nodeType": "Bifrost::Nodes::Misc::cacheObjectToDisk"
                },
                {
                    "nodeName": "getAeroCachepath",
                    "nodeType": "Bifrost::Nodes::Misc::getStringFromFilepath"
                },
                {
                    "nodeName": "getSolidsCachePath",
                    "nodeType": "Bifrost::Nodes::Misc::getStringFromFilepath"
                }
            ],
            "connections": [
                {
                    "source": "setDescriptorFromObject.value",
                    "target": ".AeroObject"
                },
                {
                    "source": "setDescriptorFromObject1.value",
                    "target": ".SolidObject"
                },
                {
                    "source": ".Emitters",
                    "target": "createAeroMeshes.inEmitters"
                },
                {
                    "source": ".Colliders",
                    "target": "createAeroMeshes.inColliders"
                },
                {
                    "source": ".Accelerators",
                    "target": "createAeroMeshes.inAccelerators"
                },
                {
                    "source": ".AdaptiveMeshes",
                    "target": "createAeroMeshes.inAdaptives"
                },
                {
                    "source": ".masterVoxelSizeRenderFactor",
                    "target": "mul.second"
                },
                {
                    "source": ".masterVoxelSize",
                    "target": "mul.first"
                },
                {
                    "source": ".gravityDirection",
                    "target": "rotateAndScale.vector"
                },
                {
                    "source": ".gravityMagnitude",
                    "target": "rotateAndScale.magnitude"
                },
                {
                    "source": ".transform",
                    "target": "rotateAndScale.transform"
                },
                {
                    "source": ".airTemperature",
                    "target": "convertCelsiusToKelvin.celsius"
                },
                {
                    "source": ".clipBBoxMin",
                    "target": "subStepAero.bboxMin"
                },
                {
                    "source": ".clipBBoxMax",
                    "target": "subStepAero.bboxMax"
                },
                {
                    "source": ".clipBBoxTransform",
                    "target": "subStepAero.transform"
                },
                {
                    "source": ".masterVoxelSize",
                    "target": "subStepAero.masterVoxelSize"
                },
                {
                    "source": ".flipParticleDensity",
                    "target": "subStepAero.flipPointDensity"
                },
                {
                    "source": ".renderParticleDensity",
                    "target": "subStepAero.renderPointDensity"
                },
                {
                    "source": ".smokeThreshold",
                    "target": "subStepAero.smokeThreshold"
                },
                {
                    "source": ".killplanes",
                    "target": "subStepAero.killPlanes"
                },
                {
                    "source": ".airDensity",
                    "target": "subStepAero.airDensity"
                },
                {
                    "source": ".adaptive",
                    "target": "subStepAero.isAdaptive"
                },
                {
                    "source": ".transportTimeScale",
                    "target": "subStepAero.transportTimeScale"
                },
                {
                    "source": ".transportStepAdaptivity",
                    "target": "subStepAero.transportStepAdaptivity"
                },
                {
                    "source": ".minSteps",
                    "target": "subStepAero.minSteps"
                },
                {
                    "source": ".maxSteps",
                    "target": "subStepAero.maxSteps"
                },
                {
                    "source": ".aeroCacheControl",
                    "target": "createObjectWhenCaching.cacheControl"
                },
                {
                    "source": ".solidCacheControl",
                    "target": "createObjectWhenCaching1.cacheControl"
                },
                {
                    "source": ".enableSolidCache",
                    "target": "createObjectWhenCaching1.enable"
                },
                {
                    "source": ".enableAeroCache",
                    "target": "createObjectWhenCaching.enable"
                },
                {
                    "source": ".aeroCompressionQuality",
                    "target": "cacheObjectToDisk.compressionQuality"
                },
                {
                    "source": ".aeroCacheFileName",
                    "target": "cacheObjectToDisk.cacheFileName"
                },
                {
                    "source": ".enableAeroCache",
                    "target": "cacheObjectToDisk.enable"
                },
                {
                    "source": ".enableSolidCache",
                    "target": "cacheObjectToDisk1.enable"
                },
                {
                    "source": ".solidCacheFileName",
                    "target": "cacheObjectToDisk1.cacheFileName"
                },
                {
                    "source": ".solidCompressionQuality",
                    "target": "cacheObjectToDisk1.compressionQuality"
                },
                {
                    "source": ".aeroCachePath",
                    "target": "getAeroCachepath.str"
                },
                {
                    "source": ".solidCachePath",
                    "target": "getSolidsCachePath.str"
                },
                {
                    "source": "scopeAero.outObject",
                    "target": "setDescriptorFromObject.object"
                },
                {
                    "source": "scopeSolids.outObject",
                    "target": "setDescriptorFromObject1.object"
                },
                {
                    "source": "createAeroMeshes.outEmitters",
                    "target": "keepAeroMeshes.emitters"
                },
                {
                    "source": "createAeroMeshes.outColliders",
                    "target": "keepAeroMeshes.colliders"
                },
                {
                    "source": "createAeroMeshes.outAccelerators",
                    "target": "keepAeroMeshes.accelerators"
                },
                {
                    "source": "createAeroMeshes.outAdaptives",
                    "target": "keepAeroMeshes.adpatives"
                },
                {
                    "source": "keepAeroMeshes.outObject",
                    "target": "cacheObjectToDisk.inObject"
                },
                {
                    "source": "createObjectWhenCaching.outObject",
                    "target": "keepAeroMeshes.inObject"
                },
                {
                    "source": "createAeroMeshes.outEmitters",
                    "target": "subStepAero.emitters"
                },
                {
                    "source": "createAeroMeshes.outColliders",
                    "target": "subStepAero.solids"
                },
                {
                    "source": "createAeroMeshes.outAccelerators",
                    "target": "subStepAero.accelerators"
                },
                {
                    "source": "createAeroMeshes.outAdaptives",
                    "target": "subStepAero.adaptiveMeshes"
                },
                {
                    "source": "AeroObject.value",
                    "target": "createObjectWhenCaching.name"
                },
                {
                    "source": "subStepAero.aeroObjectOut",
                    "target": "createObjectWhenCaching.inObject"
                },
                {
                    "source": "subStepAero.aeroObjectOut",
                    "target": "createObjectWhenCaching.newObject"
                },
                {
                    "source": "createObjectWhenCaching.outCacheControl",
                    "target": "cacheObjectToDisk.cacheControl"
                },
                {
                    "source": "Solids.value",
                    "target": "createObjectWhenCaching1.name"
                },
                {
                    "source": "subStepAero.solidObjectOut",
                    "target": "createObjectWhenCaching1.inObject"
                },
                {
                    "source": "createObjectWhenCaching1.outObject",
                    "target": "cacheObjectToDisk1.inObject"
                },
                {
                    "source": "createObjectWhenCaching1.outCacheControl",
                    "target": "cacheObjectToDisk1.cacheControl"
                },
                {
                    "source": "subStepAero.solidObjectOut",
                    "target": "createObjectWhenCaching1.newObject"
                },
                {
                    "source": "cacheObjectToDisk.outObject",
                    "target": "scopeAero.inObject"
                },
                {
                    "source": "cacheObjectToDisk1.outObject",
                    "target": "scopeSolids.inObject"
                },
                {
                    "source": "mul.value",
                    "target": "subStepAero.masterVoxelSizeRender"
                },
                {
                    "source": "rotateAndScale.value",
                    "target": "subStepAero.gravityVector"
                },
                {
                    "source": "convertCelsiusToKelvin.kelvin",
                    "target": "subStepAero.airTemperature"
                },
                {
                    "source": "initTimestepCFL.value",
                    "target": "subStepAero.ittr_input"
                },
                {
                    "source": "getAeroCachepath.value",
                    "target": "cacheObjectToDisk.cachePath"
                },
                {
                    "source": "getSolidsCachePath.value",
                    "target": "cacheObjectToDisk1.cachePath"
                }
            ],
            "values": [
                {
                    "valueName": "createObjectWhenCaching.cacheControl",
                    "value": "0L"
                },
                {
                    "valueName": "createObjectWhenCaching.compNameToTest",
                    "valueType": "string",
                    "value": "_voxel"
                },
                {
                    "valueName": "createObjectWhenCaching.filePath",
                    "valueType": "string",
                    "value": "putFilePathHere"
                },
                {
                    "valueName": "createObjectWhenCaching.fileName",
                    "valueType": "string",
                    "value": "putFileNameHere"
                },
                {
                    "valueName": "createObjectWhenCaching1.compNameToTest",
                    "valueType": "string",
                    "value": "_voxel"
                },
                {
                    "valueName": "createObjectWhenCaching1.filePath",
                    "valueType": "string",
                    "value": "putFilePathHere"
                },
                {
                    "valueName": "createObjectWhenCaching1.fileName",
                    "valueType": "string",
                    "value": "putFileNameHere"
                },
                {
                    "valueName": "AeroObject.str",
                    "valueType": "string",
                    "value": "AeroObject"
                },
                {
                    "valueName": "Solids.str",
                    "valueType": "string",
                    "value": "Solids"
                },
                {
                    "valueName": "cacheObjectToDisk.pointComponentName",
                    "valueType": "string",
                    "value": "AeroObject-particle"
                },
                {
                    "valueName": "cacheObjectToDisk.voxelComponentName",
                    "valueType": "string",
                    "value": "AeroObject-volume"
                },
                {
                    "valueName": "cacheObjectToDisk1.pointComponentName",
                    "valueType": "string",
                    "value": "none"
                },
                {
                    "valueName": "cacheObjectToDisk1.voxelComponentName",
                    "valueType": "string",
                    "value": "Solids-volume"
                }
            ]
        }
    ]
}