{
    "header": {
        "metadata": [
            {
                "metaName": "adskGraphlibVersion",
                "metaType": "string",
                "metaValue": "1.0"
            },
            {
                "metaName": "adskFileFormatVersion",
                "metaValue": "100L"
            }
        ]
    },
    "dependencies": [
        {
            "uri": "file:///basenodes.json"
        },
        {
            "uri": "file:///basenodes.json"
        }
    ],
    "types": [],
    "operators": [],
    "compounds": [
        {
            "name": "Bifrost::Nodes::Misc::solveAero",
            "ports": [
                {
                    "portName": "solidObjectOut",
                    "portDirection": "output",
                    "portType": "Bifrost::Types::Object"
                },
                {
                    "portName": "gravityVector",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::Vec3Float"
                },
                {
                    "portName": "masterVoxelSizeRender",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "bboxMin",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::Vec3Float"
                },
                {
                    "portName": "bboxMax",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::Vec3Float"
                },
                {
                    "portName": "transform",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::Mat44Float"
                },
                {
                    "portName": "aeroObjectOut",
                    "portDirection": "output",
                    "portType": "Bifrost::Types::Object"
                },
                {
                    "portName": "masterVoxelSize",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "flipPointDensity",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "renderPointDensity",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "smokeThreshold",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "killPlanes",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::Mat44FloatArray"
                },
                {
                    "portName": "emitters",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::IOMeshArray"
                },
                {
                    "portName": "solids",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::IOMeshArray"
                },
                {
                    "portName": "accelerators",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::IOMeshArray"
                },
                {
                    "portName": "adaptiveMeshes",
                    "portDirection": "input",
                    "portType": "Bifrost::Types::IOMeshArray"
                },
                {
                    "portName": "airDensity",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "airTemperature",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "isAdaptive",
                    "portDirection": "input",
                    "portType": "bool"
                },
                {
                    "portName": "transportTimeScale",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "transportStepAdaptivity",
                    "portDirection": "input",
                    "portType": "float"
                },
                {
                    "portName": "minSteps",
                    "portDirection": "input",
                    "portType": "int"
                },
                {
                    "portName": "maxSteps",
                    "portDirection": "input",
                    "portType": "int"
                },
                {
                    "portName": "loopingCondition",
                    "portDirection": "input",
                    "portType": "bool"
                },
                {
                    "portName": "outLoopingCondition",
                    "portDirection": "output",
                    "portType": "bool"
                }
            ],
            "compounds": [
                {
                    "name": "evaluateStep",
                    "ports": [
                        {
                            "portName": "condition",
                            "portDirection": "input",
                            "portType": "bool"
                        },
                        {
                            "portName": "outAeroObject",
                            "portDirection": "output",
                            "portType": "Bifrost::Types::Object"
                        },
                        {
                            "portName": "outSolidObject",
                            "portDirection": "output",
                            "portType": "Bifrost::Types::Object"
                        },
                        {
                            "portName": "aeroObject",
                            "portDirection": "input",
                            "portType": "Bifrost::Types::Object"
                        },
                        {
                            "portName": "solidObject",
                            "portDirection": "input",
                            "portType": "Bifrost::Types::Object"
                        },
                        {
                            "portName": "outCondition",
                            "portDirection": "output",
                            "portType": "bool"
                        }
                    ],
                    "compoundNodes": [
                        {
                            "nodeName": "ifAero",
                            "nodeType": "Bifrost::if"
                        },
                        {
                            "nodeName": "ifSolid",
                            "nodeType": "Bifrost::if"
                        },
                        {
                            "nodeName": "getObjectAero",
                            "nodeType": "Bifrost::Nodes::Object::getObject"
                        },
                        {
                            "nodeName": "getObjectSolid",
                            "nodeType": "Bifrost::Nodes::Object::getObject"
                        },
                        {
                            "nodeName": "solids",
                            "nodeType": "Bifrost::Nodes::Misc::valueString"
                        },
                        {
                            "nodeName": "aero",
                            "nodeType": "Bifrost::Nodes::Misc::valueString"
                        },
                        {
                            "nodeName": "valueBool",
                            "nodeType": "Bifrost::Nodes::Math::valueBool"
                        }
                    ],
                    "connections": [
                        {
                            "source": ".condition",
                            "target": "ifAero.condition"
                        },
                        {
                            "source": ".condition",
                            "target": "ifSolid.condition"
                        },
                        {
                            "source": "ifAero.output",
                            "target": ".outAeroObject"
                        },
                        {
                            "source": "ifSolid.output",
                            "target": ".outSolidObject"
                        },
                        {
                            "source": ".aeroObject",
                            "target": "ifAero.trueCase"
                        },
                        {
                            "source": ".solidObject",
                            "target": "ifSolid.trueCase"
                        },
                        {
                            "source": ".condition",
                            "target": "valueBool.val"
                        },
                        {
                            "source": "valueBool.value",
                            "target": ".outCondition"
                        },
                        {
                            "source": "getObjectAero.value",
                            "target": "ifAero.falseCase"
                        },
                        {
                            "source": "getObjectSolid.value",
                            "target": "ifSolid.falseCase"
                        },
                        {
                            "source": "aero.value",
                            "target": "getObjectAero.name"
                        },
                        {
                            "source": "solids.value",
                            "target": "getObjectSolid.name"
                        }
                    ],
                    "values": [
                        {
                            "valueName": "solids.str",
                            "valueType": "string",
                            "value": "ColliderObject"
                        },
                        {
                            "valueName": "aero.str",
                            "valueType": "string",
                            "value": "AeroObject"
                        }
                    ]
                }
            ],
            "compoundNodes": [
                {
                    "nodeName": "flipSimAero",
                    "nodeType": "Bifrost::Nodes::Misc::flipSimAero"
                },
                {
                    "nodeName": "renderSimAero",
                    "nodeType": "Bifrost::Nodes::Misc::renderSimAero"
                },
                {
                    "nodeName": "evaluateStep",
                    "nodeType": "evaluateStep"
                }
            ],
            "connections": [
                {
                    "source": ".emitters",
                    "target": "flipSimAero.emitters"
                },
                {
                    "source": ".emitters",
                    "target": "renderSimAero.emitters"
                },
                {
                    "source": ".gravityVector",
                    "target": "flipSimAero.gravityVector"
                },
                {
                    "source": ".masterVoxelSizeRender",
                    "target": "renderSimAero.masterVoxelSizeRender"
                },
                {
                    "source": ".bboxMin",
                    "target": "flipSimAero.bboxMin"
                },
                {
                    "source": ".bboxMax",
                    "target": "flipSimAero.bboxMax"
                },
                {
                    "source": ".transform",
                    "target": "flipSimAero.transform"
                },
                {
                    "source": ".bboxMin",
                    "target": "renderSimAero.bboxMin"
                },
                {
                    "source": ".bboxMax",
                    "target": "renderSimAero.bboxMax"
                },
                {
                    "source": ".transform",
                    "target": "renderSimAero.transform"
                },
                {
                    "source": ".solids",
                    "target": "flipSimAero.solids"
                },
                {
                    "source": ".masterVoxelSize",
                    "target": "flipSimAero.masterVoxelSize"
                },
                {
                    "source": ".flipPointDensity",
                    "target": "flipSimAero.flipPointDensity"
                },
                {
                    "source": ".renderPointDensity",
                    "target": "renderSimAero.renderPointDensity"
                },
                {
                    "source": ".smokeThreshold",
                    "target": "flipSimAero.smokeThreshold"
                },
                {
                    "source": ".killPlanes",
                    "target": "flipSimAero.killPlanes"
                },
                {
                    "source": ".accelerators",
                    "target": "flipSimAero.accelerators"
                },
                {
                    "source": ".airDensity",
                    "target": "flipSimAero.airDensity"
                },
                {
                    "source": ".airTemperature",
                    "target": "flipSimAero.airTemperature"
                },
                {
                    "source": ".adaptiveMeshes",
                    "target": "flipSimAero.adaptiveMeshes"
                },
                {
                    "source": ".isAdaptive",
                    "target": "renderSimAero.isAdaptive"
                },
                {
                    "source": ".isAdaptive",
                    "target": "flipSimAero.isAdaptive"
                },
                {
                    "source": ".transportTimeScale",
                    "target": "renderSimAero.transportTimeScale"
                },
                {
                    "source": ".transportStepAdaptivity",
                    "target": "renderSimAero.transportStepAdaptivity"
                },
                {
                    "source": ".minSteps",
                    "target": "renderSimAero.minSteps"
                },
                {
                    "source": ".maxSteps",
                    "target": "renderSimAero.maxSteps"
                },
                {
                    "source": ".transportTimeScale",
                    "target": "flipSimAero.transportTimeScale"
                },
                {
                    "source": ".transportStepAdaptivity",
                    "target": "flipSimAero.transportStepAdaptivity"
                },
                {
                    "source": ".minSteps",
                    "target": "flipSimAero.minSteps"
                },
                {
                    "source": ".maxSteps",
                    "target": "flipSimAero.maxSteps"
                },
                {
                    "source": ".killPlanes",
                    "target": "renderSimAero.killPlanes"
                },
                {
                    "source": ".loopingCondition",
                    "target": "evaluateStep.condition"
                },
                {
                    "source": "evaluateStep.outCondition",
                    "target": ".outLoopingCondition"
                },
                {
                    "source": "evaluateStep.outSolidObject",
                    "target": ".solidObjectOut"
                },
                {
                    "source": "evaluateStep.outAeroObject",
                    "target": ".aeroObjectOut"
                },
                {
                    "source": "flipSimAero.aeroObjectOut",
                    "target": "renderSimAero.aeroObject"
                },
                {
                    "source": "flipSimAero.solidObjectOut",
                    "target": "renderSimAero.solidObject"
                },
                {
                    "source": "flipSimAero.camObjectOut",
                    "target": "renderSimAero.camObject"
                },
                {
                    "source": "renderSimAero.aeroObjectOut",
                    "target": "evaluateStep.aeroObject"
                },
                {
                    "source": "renderSimAero.solidObjectOut",
                    "target": "evaluateStep.solidObject"
                }
            ],
            "values": []
        }
    ]
}