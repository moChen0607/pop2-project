<!-- FRAGMENT72 mayaPhongSpecular //////////////////////////////////////////////////// -->
<!--
Copyright 2013 Autodesk, Inc. All rights reserved. 

Use of this software is subject to the terms of the Autodesk 
license agreement provided at the time of installation or download, 
or which otherwise accompanies this software in either electronic 
or hard copy form.
-->
<fragment  uiName="xgenPhongSpecular" name="xgenPhongSpecular" type="plumbing" class="ShadeFragment" version="1.0" feature_level="0" >
    <description>
<![CDATA[
Computes phong specular component]]>
</description>
    <properties>
        <float3  name="specularI" />
        <float3  name="Nw" flags="varyingInputParam" />
        <float3  name="SLw" />
        <float3  name="Vw" flags="varyingInputParam" />
        <float3  name="cosinePower" />
        <float3  name="specular1" />
        <float3  name="specular2" />
        <float3  name="specular3" />
    </properties>
    <values>
<float3 name="specularI" value="0.000000,0.000000,0.000000"  />
<float3 name="SLw" value="0.000000,0.000000,0.000000"  />
<float3 name="cosinePower" value="20.000000,10.000000,5.000000"  />
<float3 name="specular1" value="1.000000,0.500000,0.500000"  />
<float3 name="specular2" value="0.500000,1.000000,0.500000"  />
<float3 name="specular3" value="0.000000,0.000000,0.000000"  />
    </values>
    <outputs>
        <float3  name="mayaPhongSpecular" />
    </outputs>
    <implementation  >
    <implementation  render="OGSRenderer" language="Cg" lang_version="2.100000" >
        <function_name val="xgenPhongSpecular" />
        <source>
            <![CDATA[
float3 xgenPhongSpecular(
	float3 specularI, 
	float3 N, 
	float3 L, 
	float3 V, 
	float3 cosinePower,
	float3 specular1,
	float3 specular2,
	float3 specular3) 
{ 
	float3 R = normalize((2.0f * dot(V, N)) * N - V); 
	float s0 = dot(L, R); 
	cosinePower *= log(s0);
	float3 expS = (s0 > 0.00001f) ? exp(cosinePower) : float3(0.0000454f); 
	return (dot(N, L) > 0.0f) ? specularI * ( expS.x*specular1 + expS.y*specular2 + expS.z*specular3 ) : float3(0.0f); 
} 
            ]]>
        </source>
    </implementation>
    <implementation  render="OGSRenderer" language="GLSL" lang_version="3.000000" >
        <function_name val="xgenPhongSpecular" />
        <source>
            <![CDATA[
vec3 xgenPhongSpecular(
	vec3 specularI, 
	vec3 N, 
	vec3 L, 
	vec3 V, 
	vec3 cosinePower,
	vec3 specular1,
	vec3 specular2,
	vec3 specular3) 
{ 
	vec3 R = normalize((2.0f * dot(V, N)) * N - V); 
	float s0 = dot(L, R); 
	cosinePower *= log(s0);
	vec3 expS = (s0 > 0.00001f) ? exp(cosinePower) : vec3(0.0000454f); 
	return (dot(N, L) > 0.0f) ? specularI * ( expS.x*specular1 + expS.y*specular2 + expS.z*specular3 ) : vec3(0.0f); 
} 
            ]]>
        </source>
    </implementation>
    <implementation  render="OGSRenderer" language="HLSL" lang_version="11.000000" >
        <function_name val="xgenPhongSpecular" />
        <source>
            <![CDATA[
float3 xgenPhongSpecular(
	float3 specularI, 
	float3 N, 
	float3 L, 
	float3 V, 
	float3 cosinePower,
	float3 specular1,
	float3 specular2,
	float3 specular3) 
{ 
	float3 R = normalize((2.0f * dot(V, N)) * N - V); 
	float s0 = dot(L, R); 
	cosinePower *= log(s0);
	float3 expS = (s0 > 0.00001f) ? float3(exp(cosinePower.x), exp(cosinePower.y), exp(cosinePower.z)) : float3(0.0000454f, 0.0000454f, 0.0000454f); 
	return (dot(N, L) > 0.0f) ? specularI * ( expS.x*specular1 + expS.y*specular2 + expS.z*specular3 ) : float3(0.0f,0.0f,0.0f); 
} 
            ]]>
        </source>
    </implementation>
    <implementation  render="OGSRenderer" language="HLSL" lang_version="10.000000" >
        <function_name val="xgenPhongSpecular" />
        <source>
            <![CDATA[
float3 xgenPhongSpecular(
	float3 specularI, 
	float3 N, 
	float3 L, 
	float3 V, 
	float3 cosinePower,
	float3 specular1,
	float3 specular2,
	float3 specular3) 
{ 
	float3 R = normalize((2.0f * dot(V, N)) * N - V); 
	float s0 = dot(L, R); 
	cosinePower *= log(s0);
	float3 expS = (s0 > 0.00001f) ? float3(exp(cosinePower.x), exp(cosinePower.y), exp(cosinePower.z)) : float3(0.0000454f, 0.0000454f, 0.0000454f); 
	return (dot(N, L) > 0.0f) ? specularI * ( expS.x*specular1 + expS.y*specular2 + expS.z*specular3 ) : float3(0.0f,0.0f,0.0f); 
} 
            ]]>
        </source>
    </implementation>
    </implementation>
</fragment>

