<!--
Copyright 2014 Autodesk, Inc. All rights reserved. 

Use of this software is subject to the terms of the Autodesk 
license agreement provided at the time of installation or download, 
or which otherwise accompanies this software in either electronic 
or hard copy form.
-->
<fragment  uiName="xgenVSBw" name="xgenVSBw" type="interpolant" class="ShadeFragment" version="1.0" feature_level="0" >
    <description>
        <![CDATA[
Generate normals for xgen splines.]]>
    </description>
    <properties>
        <float3  name="curveVec" semantic="TEXCOORD1" flags="varyingInputParam" />
        <float4x4 name="world" semantic="world" />
    </properties>
    <values>
    </values>
    <outputs>
        <float3  name="mayaBitangentIn" semantic="BITANGENT" />
    </outputs>
    <implementation>
        <implementation  render="OGSRenderer" language="Cg" lang_version="2.100000" >
            <function_name val="xgenVSBw" />
            <vertex_source>
                <![CDATA[
float3 ixgenVSBw(float3 curveVec, float4x4 world)
{
   float3 bw = mul(world, float4(curveVec, 1.0f)).xyz;
    return normalize(bw);
}
                ]]>
            </vertex_source>
            <source>
                <![CDATA[
float3 xgenVSBw(float3 iBw)
{
    return normalize( iBw );
}
               ]]>
             </source>
        </implementation>
		<implementation  render="OGSRenderer" language="GLSL" lang_version="3.000000" >
            <function_name val="xgenVSBw" />
            <vertex_source>
                <![CDATA[
vec3 ixgenVSBw(vec3 curveVec, mat4 world)
{
   vec3 bw = mul(world, vec4(curveVec, 1.0)).xyz;
   return normalize(bw);
}
                ]]>
            </vertex_source>
            <source>
                <![CDATA[
vec3 xgenVSBw(vec3 iBw)
{
    return normalize( iBw );
}
               ]]>
             </source>
        </implementation>
        <implementation  render="OGSRenderer" language="HLSL" lang_version="11.000000" >
            <function_name val="xgenVSBw" />
          <vertex_source>
            <![CDATA[
float3 ixgenVSBw(float3 curveVec, float4x4 world)
{
   float3 bw = mul(float4(curveVec, 1.0f), world).xyz;
   return normalize(bw);;
}
                ]]>
          </vertex_source>
          <source>
            <![CDATA[
float3 xgenVSBw(float3 iBw)
{
    return normalize( iBw );
}
               ]]>
          </source>        </implementation>
        <implementation  render="OGSRenderer" language="HLSL" lang_version="10.000000" >
            <function_name val="xgenVSBw" />
          <vertex_source>
            <![CDATA[
float3 ixgenVSBw(float3 curveVec, float4x4 world)
{
   float3 bw = mul(float4(curveVec, 1.0f), world).xyz;
   return normalize(bw);;
}
                ]]>
          </vertex_source>
          <source>
            <![CDATA[
float3 xgenVSBw(float3 iBw)
{
    return normalize( iBw );
}
               ]]>
          </source>
        </implementation>
    </implementation>
</fragment>