
# guard against multiple inclusions
$ifndef "xgen_mi_included"
set "xgen_mi_included" "true"

# xgen procedural
# A single procedural is needed per description.
declare shader
	geometry "xgen_geo" (
	string	"data",			# Argument string passed to the RenderAPI.
	string	"user",			# Key/Values string pairs representing the user attributes.
	string	"overrides",	# Key/Values string pairs representing expressions to override.
	scalar	"frame",		# Current animation frame. Usually driven by a time expression.
	string	"patches",		# List of geometry names separated by spaces.
	
	boolean "echo",			# Echo the whole geoshader content to an mi file. The echo_* parameters fills the miEchoOptions struct.
	string  "echo_filename",	# Filename where to echo.
	boolean "echo_ascii",				# non-binary output
	integer "echo_explode_objects",		# write objects to subfiles
	boolean "echo_verbatim_textures",	# dump textures verbatim ?
	integer "echo_dont",				# EO_* bitmap: omit these
	integer "echo_dont_recurse",		# EO_* bitmap: no prereqs
	integer "approx_degree" default 1, # linear=1, quad=2, cubic=3
	integer "approx_mode" default 1, # Default=0 Parametric=1 Fine=2
	integer "approx_parametric_subdivisions" default 3,
	scalar "approx_fine_sub_pixel_size" default 0.1,

	boolean "motion_blur" default off, #: hidden true
	integer "motion_blur_mode" default 0, #: hidden true # startFrame=0 middleFrame=1 endFrame=2
	integer "motion_blur_steps" default 5, #: hidden true # 1 to 15. Number of motion vectors to use.
	scalar  "motion_blur_factor" default 1.0, #: hidden true # Scale the motion blur time.
	scalar  "motion_blur_multiplier" default 1.0, #: hidden true # Multiplier on the motion blur vectors.

	scalar "max_displace" default 0.0, # Max displace for spheres and cards
    scalar "hair_object_size" default 1.0, # Multiplier for the default hair object size. Higher values may speed-up rendering but increase memory requirements.

    integer "sphere_subdiv_u" default 40, # Subdivision of sphere primitives
    integer "sphere_subdiv_v" default 40
	)
	version 2
	apply geometry
	#: nodeid 1476395797
end declare

# xgen SeExpr shader
# This shader evaluates SeExpr string at render time.
# The expression string is parsed during shader initialization.
# The shader should work with all XGen primitives.
#  - Splines, the variables are pushed as per hair textures. 
#    A per instance user data holds the texture offsets for each valid variable name.
#  - Cards, Spheres and Archives.
#    A per instance user data holds the values for each variables.
#
# The shader declares the named vector attributes as SeExpr expression variable.
#
# It also declares variable available or deduced from the miState.
#  bary, point,	normal, normal_geom, tex, 
#  derivs0..4, scalars0..9, tex_list0..9
#  hair_min_raster_size, hair_raster_area, hair_min_pixel_size, hair_pixel_area
#
# XGen Renderer attributes are also pushed as SeExpr variables if the checkboxes are checked.
# The shader can't detect automatically these variables since the information is stored on user data attached to instances.
# "customs" string attribute allows the registration of these variables.
#  width, widths , U, V, length, randomfloat
#  faceid, descid, geomid, stray, primid, randomint
#  dPdu, dPdug, dPduref, dPdurefg
#  dPdv, dPdvg, dPdvref, dPdvrefg
#  N, Ng, Nref, Nrefg
#  P, Pg, Pref, Prefg
#  T
#
# XGen Custom shader attributes are also pushed and are accessible as SeExpr variable.
#  
declare shader
	vector "xgen_seexpr" (
	string	"expression",	# SeExpr string to evaluate. Can be multi-line.

	# The SeExpr string can reference 8 vector attributes
	# 'name#' declares an SeExpr variable by name that can be referenced in the expression string. 
	string	"name0", vector	"vector0",
	string	"name1", vector	"vector1",
	string	"name2", vector	"vector2",
	string	"name3", vector	"vector3",
	string	"name4", vector	"vector4",	
	string	"name5", vector	"vector5",		
	string	"name6", vector	"vector6",	
	string	"name7", vector	"vector7",
	
	# Coma separated list of XGen variable names.
	string  "customs"
	)
	version 1
	apply texture
	#: nodeid 1476395799
end declare

declare shader
	integer "xgen_scalar_to_integer"( scalar input )
	version 1
	apply texture
	#: nodeid 1476395804
end declare

declare shader
	vector "xgen_integer_to_vector"( integer input )
	version 1
	apply texture
	#: nodeid 1476395807
end declare

declare shader
	vector "xgen_scalar_to_vector"( scalar input )
	version 1
	apply texture
	#: nodeid 1476395809
end declare

declare shader
	scalar "xgen_vector_to_scalar"( vector input, integer selector default 0 )
	version 1
	apply texture
	#: nodeid 1476395812
end declare

declare shader
	vector "xgen_boolean_to_vector"( boolean input )
	version 1
	apply texture
	#: nodeid 1476395808
end declare

declare shader
	color "xgen_boolean_switch"( boolean input, color colorOn, color colorOff  )
	version 1
	apply texture
	#: nodeid 1476395806
end declare

# A shader that modifies the normals before evaluating the inputs
# Two inputs are provided and added together.
# First is for the front face and second for the back face.
declare shader
	color "xgen_tube_normals"(
		color "input",
		boolean "enabled",
		scalar "tube_blend",
		scalar "flat_blend",
		color "input1",
		boolean "enabled1",
		scalar "tube_blend1",
		scalar "flat_blend1",
	)
	version 1
	apply texture
	#: nodeid 1476395805
end declare

# A simple non physical hair shader that uses the dual specular shader from the 
# subsurface.mi. Uses the xgen_tube_normals to make the hair look like tube
# and supports XGen custom shader parameters named root_color, tip_color, back_color, root_transp, tip_transp
declare phenomenon
    "xgen_hair_phen" (
        color "ambientColor" default 0.0 0.0 0.0,
        boolean "tubeShade" default on,
        color "diffuseColor" default 0.8 0.8 0.8,
        integer "diffuseRootTipInterp" default 0,
        scalar "diffuseRootTipGamma" default 1.0,
        scalar "cosinePower" default 2.0,
        color "specularColor" default 1.0 1.0 1.0,
        scalar "cosinePower2" default 15.0,
        color "specularColor2" default 0.0 0.0 0.0,
        color "backColor" default 0.0 0.0 0.0,
        scalar "backGamma" default 1.0,
        boolean "indirect" default on,
        #boolean "enableTransp" default off,
        #color "transpColor" default 1.0 1.0 1.0,
        #integer "transpRootTipInterp" default 0,
        #scalar "transpRootTipGamma" default 1.0,

        integer     "mode"              default 4, #: property "lightmode"
        array light "lights"            #: property "lightlink"
        )

        shader "diffuseRootTipInterpVector"
            "xgen_integer_to_vector" (
                "input" = interface "diffuseRootTipInterp"
                )

        shader "diffuseRootTipGammaVector"
            "xgen_scalar_to_vector" (
                "input" = interface "diffuseRootTipGamma"
                )

        shader "transpRootTipInterpVector"
            "xgen_integer_to_vector" (
                "input" = interface "transpRootTipInterp"
                )

        shader "transpRootTipGammaVector"
            "xgen_scalar_to_vector" (
                "input" = interface "transpRootTipGamma"
                )


        shader "xgen_hair_user_back_color"
            "xgen_seexpr" (
                "expression" "$ret = $back_color;\nif($ret==0){$ret=$default;}\n$ret",
                "name0" "default",
                "vector0" = interface "backColor",
                "name1" "",
                "vector1" 0. 0. 0.,
                "name2" "",
                "vector2" 0. 0. 0.,
                "name3" "",
                "vector3" 0. 0. 0.,
                "name4" "",
                "vector4" 0. 0. 0.,
                "name5" "",
                "vector5" 0. 0. 0.,
                "name6" "",
                "vector6" 0. 0. 0.,
                "name7" "",
                "vector7" 0. 0. 0.,
                "customs" "back_color"
                )

        shader "xgen_hair_back_diffuse"
            "misss_lambert_gamma" (
                "ambient" 0. 0. 0. 1.,
                "ambience" 0. 0. 0. 1.,
                "diffuse" = "xgen_hair_user_back_color",
                "indirect" off,
                "diffuse_curve" = interface "backGamma",
                "flip" 0,
                "mode" = interface "mode",
                "lights" = interface "lights"
                )

        shader "xgen_hair_dual_spec"
            "misss_skin_specular" (
                "overall_weight" 1.,
                "edge_factor" 0.,
                "primary_spec_color" = interface "specularColor",
                "primary_weight" 1.,
                "primary_edge_weight" 0.,
                "primary_shinyness" = interface "cosinePower",
                "secondary_spec_color" = interface "specularColor2",
                "secondary_weight" 1.,
                "secondary_edge_weight" 0.,
                "secondary_shinyness" = interface "cosinePower2",
                "reflect_weight" 0.,
                "reflect_edge_weight" 0.,
                "reflect_shinyness" 0.,
                "reflect_environment_only" off,
                "mode" = interface "mode",
                "lights" = interface "lights"
                )

        shader "xgen_hair_mix_dual_spec"
            "mib_color_mix" (
                "num" 2,
                "mode_0" 2,
                "mode_1" 2,
                "mode_2" 0,
                "mode_3" 0,
                "mode_4" 0,
                "mode_5" 0,
                "mode_6" 0,
                "mode_7" 0,
                "weight_0" 1.,
                "weight_1" 1.,
                "weight_2" 0.,
                "weight_3" 0.,
                "weight_4" 0.,
                "weight_5" 0.,
                "weight_6" 0.,
                "weight_7" 0.,
                "color_0" = interface "ambientColor",
                "color_1" = "xgen_hair_dual_spec",
                "color_2" 0. 0. 0. 1.,
                "color_3" 0. 0. 0. 1.,
                "color_4" 0. 0. 0. 1.,
                "color_5" 0. 0. 0. 1.,
                "color_6" 0. 0. 0. 1.,
                "color_7" 0. 0. 0. 1.,
                "color_base" 0. 0. 0. 1.
                )

            shader "xgen_hair_user_diffuse_color"
                "xgen_seexpr" (
                    "expression" "$ret = $default;\n    if( root_color!=0 && tip_color!=0 )\n    {\n    $mix = $bary[1]->gamma(gamma[0]);\n    if( mode[0]==1 ){\n        $ret = hsltorgb($mix*rgbtohsl($tip_color) + (1.0-$mix)*rgbtohsl($root_color));\n    }\n    else\n    {\n        $ret = $mix*$tip_color + (1.0-$mix)*$root_color;\n    }\n    }\n    else if(root_color!=0)\n    {\n    $ret = $root_color;\n    }\n    $ret",
                    "name0" "default",
                    "vector0" = interface "diffuseColor",
                    "name1" "gamma",
                    "vector1" = "diffuseRootTipGammaVector",
                    "name2" "mode",
                    "vector2" = "diffuseRootTipInterpVector",
                    "name3" "",
                    "vector3" 0. 0. 0.,
                    "name4" "",
                    "vector4" 0. 0. 0.,
                    "name5" "",
                    "vector5" 0. 0. 0.,
                    "name6" "",
                    "vector6" 0. 0. 0.,
                    "name7" "",
                    "vector7" 0. 0. 0.,
                    "customs" "root_color,tip_color"
                    )

            shader "xgen_hair_front_diffuse"
                "misss_lambert_gamma" (
                    "ambient" = "xgen_hair_mix_dual_spec",
                    "ambience" 1. 1. 1. 1.,
                    "diffuse" = "xgen_hair_user_diffuse_color",
                    "indirect" = interface "indirect",
                    "diffuse_curve" 1.0,
                    "flip" 0,
                    "mode" = interface "mode",
                    "lights" = interface "lights"
                    )

            shader "xgen_hair_eval_tube"
                "xgen_tube_normals" (
                    "input" = "xgen_hair_front_diffuse",
                    "enabled" = interface "tubeShade",
                    "tube_blend" 1.,
                    "flat_blend" 0.,
                    "input1" = "xgen_hair_back_diffuse",
                    "enabled1" = interface "tubeShade",
                    "tube_blend1" -1.,
                    "flat_blend1" 0.
                    )
    shader "xgen_hair_user_transp_color"
        "xgen_seexpr" (
            "expression" "$ret = $default;\nif( $root_transp )\n{\n    $mix = $bary[1]->gamma(gamma[0]);\n    if( mode[0]==1 ){\n        $ret = hsltorgb($mix*rgbtohsl($tip_transp) + (1.0-$mix)*rgbtohsl($root_transp));\n    }\n    else\n    {\n        $ret = $mix*$tip_transp + (1.0-$mix)*$root_transp;\n    }\n    $ret += cos( PI*$bary[0] );\n}\nelse if($root_transp)\n{\n    $ret=$root_transp;\n}\n$ret",
            "name0" "default",
            "vector0" = interface "transpColor",
            "name1" "gamma",
            "vector1" = interface "transpRootTipGammaVector",
            "name2" "mode",
            "vector2" = interface "transpRootTipInterpVector",
            "name3" "",
            "vector3" 0. 0. 0.,
            "name4" "",
            "vector4" 0. 0. 0.,
            "name5" "",
            "vector5" 0. 0. 0.,
            "name6" "",
            "vector6" 0. 0. 0.,
            "name7" "",
            "vector7" 0. 0. 0.,
            "customs" "root_transp,tip_transp"
            )

            shader "xgen_hair_trans"
                "mib_transparency" (
                    "input" = "xgen_hair_eval_tube",
                    "transp" = "xgen_hair_user_transp_color"
                    )

            shader "xgen_hair_transp_switch"
                "xgen_boolean_switch" (
                "input" = interface "enableTransp",
                "colorOn" = "xgen_hair_trans",
                "colorOff" = "xgen_hair_eval_tube"
                )

        root = "xgen_hair_eval_tube"
        apply material
        #: nodeid 1476395798

end declare

# A simple phenomenon to wrap a mib_ptex_lookup_x shader.
# The mib_ptex_lookup_x shader is driven by the current (U,V,faceid) coordinate.
declare phenomenon
	color "xgen_ptex_lookup" (
		string "fileName"		#: property "usedAsFilename"
		)

	shader "currentUVFaceId"
		"xgen_seexpr" (
			"expression" "[$U,$V,$faceid]",
			"name0" "",
			"vector0" 0. 0. 0.,
			"name1" "",
			"vector1" 0. 0. 0.,
			"name2" "",
			"vector2" 0. 0. 0.,
			"name3" "",
			"vector3" 0. 0. 0.,
			"name4" "",
			"vector4" 0. 0. 0.,
			"name5" "",
			"vector5" 0. 0. 0.,
			"name6" "",
			"vector6" 0. 0. 0.,
			"name7" "",
			"vector7" 0. 0. 0.,
			"customs" "U,V,faceid"
			)

	shader "currentU"
		"xgen_vector_to_scalar" (
			"input" = "currentUVFaceId",
			"selector" 0
			)

	shader "currentV"
		"xgen_vector_to_scalar" (
			"input" = "currentUVFaceId",
			"selector" 1
			)

	shader "currentFaceIdScalar"
		"xgen_vector_to_scalar" (
			"input" = "currentUVFaceId",
			"selector" 2
			)

	shader "currentFaceId"
		"xgen_scalar_to_integer" (
			"input" = "currentFaceIdScalar"
			)

	shader "lookupPtex"
		"mib_ptex_lookup_x" (
			"filename" = interface "fileName",
			"filtertype" 0,
			"bary_v0x" = "currentU",
			"bary_v1x" = "currentU",
			"bary_v2x" = "currentU",
			"bary_v0y" = "currentV",
			"bary_v1y" = "currentV",
			"bary_v2y" = "currentV",
			"face_index" = "currentFaceId"
			)

	root = "lookupPtex"
	apply texture
	#: nodeid 1476395811
end declare

# A simple phenomenon to blend root color and tip color.
declare phenomenon
	color "xgen_root_tip_color_blend" (
		color "rootColor" default 0.8 0.8 0.8,
		color "tipColor" default 0.8 0.8 0.8,
		integer "rootTipInterp" default 0,
		scalar "rootTipGamma" default 1.0
		)

	shader "rootTipInterpVector"
		"xgen_integer_to_vector" (
			"input" = interface "rootTipInterp"
			)

	shader "rootTipGammaVector"
		"xgen_scalar_to_vector" (
			"input" = interface "rootTipGamma"
			)

	shader "rootTipColorBlend"
		"xgen_seexpr" (
			"expression" "$mix = $bary[1]->gamma(gamma[0]);\nif( mode[0]==1 )\n{\n    $ret = hsltorgb($mix*rgbtohsl($tipColor) + (1.0-$mix)*rgbtohsl($rootColor));\n}\nelse\n{\n    $ret = $mix*$tipColor + (1.0-$mix)*$rootColor;\n}\n$ret",
			"name0" "rootColor",
			"vector0" = interface "rootColor",
			"name1" "tipColor",
			"vector1" = interface "tipColor",
			"name2" "gamma",
			"vector2" = "rootTipGammaVector",
			"name3" "mode",
			"vector3" = "rootTipInterpVector",
			"name4" "",
			"vector4" 0. 0. 0.,
			"name5" "",
			"vector5" 0. 0. 0.,
			"name6" "",
			"vector6" 0. 0. 0.,
			"name7" "",
			"vector7" 0. 0. 0.,
			"customs" ""
			)

	root = "rootTipColorBlend"
	apply texture
	#: nodeid 1476395813
end declare

# A helper phenomenon to provide a coordinate along the length of a hair (bary[1]).
declare phenomenon
	scalar "xgen_hair_length_mapping" (
		scalar "repeat" default 1.0
		)

	shader "repeatVector"
		"xgen_scalar_to_vector" (
			"input" = interface "repeat"
			)

	shader "hairLengthMappingVector"
		"xgen_seexpr" (
			"expression" "($bary[1]*$repeat[0]) - floor($bary[1]*$repeat[0])",
			"name0" "repeat",
			"vector0" = "repeatVector",
			"name1" "",
			"vector1" 0. 0. 0.,
			"name2" "",
			"vector2" 0. 0. 0.,
			"name3" "",
			"vector3" 0. 0. 0.,
			"name4" "",
			"vector4" 0. 0. 0.,
			"name5" "",
			"vector5" 0. 0. 0.,
			"name6" "",
			"vector6" 0. 0. 0.,
			"name7" "",
			"vector7" 0. 0. 0.,
			"customs" ""
			)

	shader "hairLengthMapping"
		"xgen_vector_to_scalar" (
			"input" = "hairLengthMappingVector"
			)

	root = "hairLengthMapping"
	apply texture
	#: nodeid 1476395814
end declare

# Hair phen based on mib_illum_hair_x.
# Supports XGen custom shader parameters named root_color, tip_color, back_color.
declare phenomenon
    "xgen_hair_physical" (

	
        boolean "tubeShade" default off,

        color  "color" 								default 0.725 0.318 0.114,
        scalar "roughness" 							default 0.7,
		scalar "weight" 							default 0.7,
        color "reflectionColor" 					default 1.0 1.0 1.0,
        scalar "reflectionWeight" 					default 1.0,
        scalar "reflectionRoughness" 				default 0.6,
		scalar "highlightSeparation" 				default 1.0,
	    color  "glintColor" 						default 0.725 0.318 0.114, 
        scalar "glintWeight" 					    default 1.0,
        scalar "glintRoughness" 					default 0.7,
		color  "transmissionColor" 					default 0.725 0.548 0.114,
        scalar "transmissionRoughness" 				default 0.4,
		scalar "transmissionWeight" 				default 0.4,
		
        boolean "indirect" default on,
  
        )
		
		 shader "xgen_hair_user_diffuse_color"
                "xgen_seexpr" (
                    "expression" "$ret = $default;\n    if( root_color!=0 && tip_color!=0 )\n    {\n    $mix = $bary[1]->gamma(gamma[0]);\n    if( mode[0]==1 ){\n        $ret = hsltorgb($mix*rgbtohsl($tip_color) + (1.0-$mix)*rgbtohsl($root_color));\n    }\n    else\n    {\n        $ret = $mix*$tip_color + (1.0-$mix)*$root_color;\n    }\n    }\n    else if(root_color!=0)\n    {\n    $ret = $root_color;\n    }\n    $ret",
                    "name0" "default",
                    "vector0" = interface "color",
                    "name1" "gamma",
                    "vector1" 1. 1. 1.,
                    "name2" "mode",
                    "vector2" 0. 0. 0.,
                    "name3" "",
                    "vector3" 0. 0. 0.,
                    "name4" "",
                    "vector4" 0. 0. 0.,
                    "name5" "",
                    "vector5" 0. 0. 0.,
                    "name6" "",
                    "vector6" 0. 0. 0.,
                    "name7" "",
                    "vector7" 0. 0. 0.,
                    "customs" "root_color,tip_color"
                    )
					
		shader "xgen_hair_user_back_color"
            "xgen_seexpr" (
                "expression" "$ret = $back_color;\nif($ret==0){$ret=$default;}\n$ret",
                "name0" "default",
                "vector0" = interface "transmissionColor",
                "name1" "",
                "vector1" 0. 0. 0.,
                "name2" "",
                "vector2" 0. 0. 0.,
                "name3" "",
                "vector3" 0. 0. 0.,
                "name4" "",
                "vector4" 0. 0. 0.,
                "name5" "",
                "vector5" 0. 0. 0.,
                "name6" "",
                "vector6" 0. 0. 0.,
                "name7" "",
                "vector7" 0. 0. 0.,
                "customs" "back_color"
            )
				
		shader "reflection_roughness_2_vector"
				"xgen_scalar_to_vector" (
					"input"  = interface "reflectionRoughness",
				)
		
		shader "hair_roughness_2_vector"
				"xgen_scalar_to_vector" (
					"input"  = interface "roughness",
				)
				
		shader "glint_roughness_2_vector"
				"xgen_scalar_to_vector" (
					"input"  = interface "glintRoughness",
				)
				
		shader "transmission_roughness_2_vector"
				"xgen_scalar_to_vector" (
					"input"  = interface "transmissionRoughness",
				)
				
		shader "hair_base" 
				"mib_illum_hair_x" (
		
					"diffuse_tint" 						= "xgen_hair_user_diffuse_color",
					"diffuse_weight" 					0.3,
					
					"primary_tint" 						= interface "reflectionColor",
					"primary_roughness"  				= "reflection_roughness_2_vector",
					"primary_weight" 					= interface "weight",
					"highlight_separation" 				= interface "highlightSeparation",
					"secondary_tint"					= "xgen_hair_user_diffuse_color",
					"secondary_roughness" 				= "hair_roughness_2_vector",
					"secondary_weight" 					= interface "reflectionWeight",
					"glint_tint" 						= interface "glintColor",
					"glint_roughness" 					= "glint_roughness_2_vector",
					"glint_weight" 						= interface "glintWeight",
					"glint_split_factor" 				1.,
					"transmission_tint"  				= "xgen_hair_user_back_color",
					"transmission_roughness" 			= "transmission_roughness_2_vector",
					"transmission_weight" 				= interface "transmissionWeight",
					"direct" 							1.,
					"indirect" 							1.,
                    "tubeshade"                        = interface "tubeShade",
			)
			
			
		
	root = "hair_base"
		
	apply material
    #: nodeid 1476395816
end declare

$endif
