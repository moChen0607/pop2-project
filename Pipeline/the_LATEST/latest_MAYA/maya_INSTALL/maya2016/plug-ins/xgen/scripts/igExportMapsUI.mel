// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

/**
 * @file igExportMapsUI.mel
 * @brief UI for exporting maps from iGroom for XGen use.
 *
 * <b>CONFIDENTIAL INFORMATION: This software is the confidential and
 * proprietary information of Walt Disney Animation Studios ("WDAS").
 * This software may not be used, disclosed, reproduced or distributed
 * for any purpose without prior written authorization and license
 * from WDAS. Reproduction of any section of this software must include
 * this legend and all copyright notices.
 * Copyright Disney Enterprises, Inc. All rights reserved.</b>
 *
 * @author Thomas V Thompson II
 *
 * @version tthompso  05/14/07  Initial Version
 * @version tthompso  07/27/07  Handle multiple descriptions in one ui
 * @version tthompso  08/17/07  Instancing method for texel values
 * @version tthompso  11/09/07  Switch to texels per unit
 */


/** Export maps representing iGroom for use in XGen */
global proc igExportMapsUI()
{
    global string $igNullDescriptionTag;

    if (`window -exists igExportMapsWindow`)
        deleteUI -window  igExportMapsWindow;

    window -sizeable false -minimizeButton false -maximizeButton false
	    -menuBar false -width 600 -height 230
            -title (uiRes("m_igExportMapsUI.kIgroomExportMaps")) igExportMapsWindow;

    columnLayout -adj on -rs 10;
    {
        formLayout igExportMapsDescLayout;
        {
            text -label (uiRes("m_igExportMapsUI.kDescription")) igExportMapsDescLabel;
            igCreateIconPopup( "igExportMapsDescMenu",
                               (uiRes("m_igExportMapsUI.kDescriptionToExport")),
                               (uiRes("m_igExportMapsUI.kDescAnnot")),
                               "" );
            string $descs[] = igAllDescriptions();
            for ( $desc in $descs ) {
                igAddDeepMenuItem( $desc, "igExportMapsDescMenu",
                                   "igExportMapsDescMenuCB" );
            }
            string $cdesc = igCurrentDescription();
            if ( $cdesc == "" ) 
                $cdesc = $igNullDescriptionTag;
            textField -edit -tx $cdesc igExportMapsDescMenuValue;
                
            setParent ..;
        }
        // Create a text field for the filename.
        $browser = "igFileBrowser \"iGroom Export\" igExportMapsPathField 1";
        textFieldButtonGrp -l (uiRes("m_igExportMapsUI.kMapPath"))
            -bl (uiRes("m_igExportMapsUI.kBrowse")) -bc $browser -cal 1 right -adj 2
            -ann (uiRes("m_igExportMapsUI.kBrowseAnnot"))
            igExportMapsPathField;

        floatSliderGrp -l (uiRes("m_igExportMapsUI.kTexelsPerUnit")) -f true -adj 3 -cw 2 70
            -min 0.001 -max 100.0 -fmx 10000.0 -pre 3 -step 0.001
            -ann (uiRes("m_igExportMapsUI.kTexelsAnnot"))
            igExportMapsTexelsPerUnitField;
        
        radioButtonGrp -l (uiRes("m_igExportMapsUI.kInstanceMethod")) -nrb 2 -sl 1
            -cw 2 100 -cw 3 100
            -ann (uiRes("m_igExportMapsUI.kMethodAnnot"))
            -la2 (uiRes("m_igExportMapsUI.kCopyNearest")) 
			(uiRes("m_igExportMapsUI.kInterpolate"))
            igExportMapsInstanceMethod;
        
        checkBoxGrp -l (uiRes("m_igExportMapsUI.kSyncToXgen")) -ncb 1 -l1 " " -v1 off
            -cc igSyncButtonCB
            -ann (uiRes("m_igExportMapsUI.kSyncAnnot"))
            igXGenSyncField;

        textFieldGrp -l (uiRes("m_igExportMapsUI.kXgenDescription")) -adj 2 -en false
            -ann (uiRes("m_igExportMapsUI.kXgenDescAnnot"))
            igXGenDescriptionField;

        rowLayout -numberOfColumns 3 -columnWidth3 130 130 130
            -columnAlign3 "center" "center" "center"
            -adjustableColumn3 1;
        {
            // Control over the dialog
            text -l "";
            button -label (uiRes("m_igExportMapsUI.kExport")) -w 130 
				-ann (uiRes("m_igExportMapsUI.kExportAnnot"))
                -c "igExportMaps; deleteUI igExportMapsWindow";
            button -label (uiRes("m_igExportMapsUI.kCancel")) -w 130 
                -ann (uiRes("m_igExportMapsUI.kCancelAnnot"))
                -c "deleteUI igExportMapsWindow";
            setParent ..;
        }

        // Attach the new layouts.
        formLayout -edit
            -attachForm igExportMapsDescLabel left 63
            -attachForm igExportMapsDescLabel top 8
            -attachNone igExportMapsDescLabel right
            -attachNone igExportMapsDescLabel bottom
            
            -attachForm    igExportMapsDescMenuValue top 8
            -attachControl igExportMapsDescMenuValue left 10 igExportMapsDescLabel
            -attachNone    igExportMapsDescMenuValue right
            -attachNone    igExportMapsDescMenuValue bottom
            
            -attachForm    igExportMapsDescMenuImage top 8
            -attachControl igExportMapsDescMenuImage left 3 igExportMapsDescMenuValue
            -attachNone    igExportMapsDescMenuImage right
            -attachNone    igExportMapsDescMenuImage bottom

            igExportMapsDescLayout;
        
        setParent ..;
    }

    igExportMapsFillFields;
    showWindow igExportMapsWindow;

    // Dont let the window pop-up the wrong size
    window -e -width 600 igExportMapsWindow;
    window -e -height 230 igExportMapsWindow;
}


global proc igExportMapsFillFields()
{
    global string $igBasepath;
    string $path = "";
    string $xdesc = "";
    float $tpu = 1.0;
    
    string $desc = `textField -q -tx igExportMapsDescMenuValue`;
    if ( `attributeQuery -ex -node $desc "mapPath"` ) {
        $path = `getAttr ($desc+".mapPath")`;
        $path = strip($path);
    }
    if ( `attributeQuery -ex -node $desc "xgenDesc"` ) {
        $xdesc = `getAttr ($desc+".xgenDesc")`;
    }
    if ( `attributeQuery -ex -node $desc "texelsPerUnit"` ) {
        $tpu = `getAttr ($desc+".texelsPerUnit")`;        
    } else if ( `attributeQuery -ex -node $desc "texelSize"` ) {
        $tpu = 1.0 / `getAttr ($desc+".texelSize")`;        
    }

    // Get the base for the path from the descriptions path. We will always
    // grab the first entry when multiples are present.
    $igBasepath = igOutputDir( $desc );
    if ( $path == "" ) {
        $path = $igBasepath + "igroom";
    }
    
    textFieldButtonGrp -e -tx $path igExportMapsPathField;
    floatSliderGrp -e -v $tpu igExportMapsTexelsPerUnitField;
    checkBoxGrp -e -v1 off igXGenSyncField;
    textFieldGrp -e -en false -tx $xdesc igXGenDescriptionField;
}


/** Allow editing multiple igDescriptions obejcts */ 
global proc igExportMapsDescMenuCB( string $desc, string $menu )
{
    string $menuValue = $menu + "Value";
    if (`textField -exists $menuValue`) {
        textField -e -tx $desc $menuValue;
    }
    igExportMapsFillFields;
}


global proc igSyncButtonCB()
{
    int $state = `checkBoxGrp -q -v1 igXGenSyncField`;
    if ( $state == on ) {
        textFieldGrp -e -en true igXGenDescriptionField;
    } else {
        textFieldGrp -e -en false igXGenDescriptionField;
    }
}


global proc igExportMaps()
{
    global string $igNullDescriptionTag;
    
    string $desc = `textField -q -tx igExportMapsDescMenuValue`;
    
    if ( $desc != $igNullDescriptionTag && $desc != "" ) {
        string $path = `textFieldButtonGrp -q -tx igExportMapsPathField`;
        float $tpu = `floatSliderGrp -q -v igExportMapsTexelsPerUnitField`;
        int $style = `radioButtonGrp -q -sl igExportMapsInstanceMethod`;
        string $xdesc = `textFieldGrp -q -tx igXGenDescriptionField`;
        int $xsync = `checkBoxGrp -q -v1 igXGenSyncField`;  

        waitCursor -state on;
        igExportMaps2( $desc, $path, $tpu, $style, $xdesc, $xsync );
        waitCursor -state off;
    }
}

global proc igExportMaps2( 
    string $desc,
    string $path,
    float $tpu,
    int $style,
    string $xdesc,
    int $xsync 
)
{
    global string $igBasepath;
    global string $igNullDescriptionTag;
    
    if ( $desc != $igNullDescriptionTag && $desc != "" ) {
        iGroom -xm $path -tpu $tpu -in $style -d $desc;

        // Get path to be relative to basepath
        $path = strip($path);
        if ( `startsWith $path "/"`){
            if ( `startsWith $igBasepath "./"`){
                string $pwd = `getenv "PWD"` + "/";
                $igBasepath = $pwd + $igBasepath;
                $igBasepath = `substitute "/./" $igBasepath "/"`;
            }
        }
        if ( `startsWith $path $igBasepath` ) {
            $path = `substitute $igBasepath $path ""`;
        }

        $path = igValidPath($path);

        // Remember what was entered before via attributes on the description
        if ( !`attributeQuery -ex -node $desc "mapPath"` ) {
            addAttr -ln "mapPath" -sn "mapPath" -dt "string" $desc;
        }
        if ( !`attributeQuery -ex -node $desc "xgenDesc"` ) {
            addAttr -ln "xgenDesc" -sn "xgenDesc" -dt "string" $desc;
        }
        if ( !`attributeQuery -ex -node $desc "texelsPerUnit"` ) {
            addAttr -ln "texelsPerUnit" -sn "texelsPerUnit" -at "float" $desc;
        }
        setAttr -type "string" ($desc+".mapPath") $path;
        setAttr -type "string" ($desc+".xgenDesc") $xdesc;
        setAttr ($desc+".texelsPerUnit") $tpu;

        // Remove old texelSize attribute
        if ( `attributeQuery -ex -node $desc "texelSize"` ) {
            deleteAttr -at "texelSize" $desc;
        }

        // Update the XGen description if requested
        if ( $xsync == on ) {
            igSyncMapsToXgen( $xdesc, $path );
        }        
    }
}

// sync xgen with exported maps
global proc igSyncMapsToXgen( string $xdesc, string $path )
{
    string $xpal = python("xg.palette(\""+$xdesc+"\")");
    string $prim = python("xg.getActive(\""+$xpal+"\",\""+$xdesc+"\",\"Primitive\")");

    // performs operation in one single undo chunk
    undoInfo -ock -cn "igSyncMapsToXgen";

    string $value = "map('"+$path+"length')";
    xgmSetAttr -a "length" -v $value -p $xpal -d $xdesc -o $prim;
            
    $value = "map('"+$path+"orient',0)";
    xgmSetAttr -a "offU" -v $value -p $xpal -d $xdesc -o $prim;
            
    $value = "map('"+$path+"orient',1)";
    xgmSetAttr -a "offV" -v $value -p $xpal -d $xdesc -o $prim;
            
    $value = "map('"+$path+"bend',0)";
    xgmSetAttr -a "bendParam[0]" -v $value -p $xpal -d $xdesc -o $prim;
            
    $value = "map('"+$path+"bend',1)";
    xgmSetAttr -a "bendU[0]" -v $value -p $xpal -d $xdesc -o $prim;
            
    $value = "map('"+$path+"bend',2)";
    xgmSetAttr -a "bendV[0]" -v $value -p $xpal -d $xdesc -o $prim;

    undoInfo -cck ;

    python("xgui.refreshDescriptionEditor()");
}
