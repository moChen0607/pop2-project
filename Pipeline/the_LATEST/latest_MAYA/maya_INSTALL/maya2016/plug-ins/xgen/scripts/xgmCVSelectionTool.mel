// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

/**
 * @file xgmCVSelectionTool.mel
 * @brief Contains the xgmCVSelectionTool MEL procedure.
 *
 * <b>CONFIDENTIAL INFORMATION: This software is the confidential and
 * proprietary information of Walt Disney Animation Studios ("WDAS").
 * This software may not be used, disclosed, reproduced or distributed
 * for any purpose without prior written authorization and license
 * from WDAS. Reproduction of any section of this software must include
 * this legend and all copyright notices.
 * Copyright Disney Enterprises, Inc. All rights reserved.</b>
 *
 * @author Thomas V Thompson II
 *
 * @version Created 07/28/08
 */

global proc xgmCVSelectionTool( string $parent )
{
    global string $xgmCVSToolCheckArray[];
    global int    $xgmCVSToolN;

    clear $xgmCVSToolCheckArray;

    string $buttForm1 = `formLayout -parent $parent`;
    {
        textFieldGrp -label (uiRes("m_xgmCVSelectionTool.kDescription")) -cw 1 80 -adj 2 
            -ann (uiRes("m_xgmCVSelectionTool.kDescriptionAnn"))
            -editable false xgmCVSToolDesc;

        button -label (uiRes("m_xgmCVSelectionTool.kAll")) -w 70 
            -ann (uiRes("m_xgmCVSelectionTool.kAllAnn"))
            -command "xgmCVSToolAll" xgmCVSToolAll;

        button -label (uiRes("m_xgmCVSelectionTool.kNone")) -w 70 
            -ann (uiRes("m_xgmCVSelectionTool.kNoneAnn"))
            -command "xgmCVSToolNone" xgmCVSToolNone;

        gridLayout -numberOfColumns 5 -cellWidthHeight 40 30 xgmCVSToolGridCV;
        {
            xgmCVSToolGetCount;
            for ( $i=0; $i<$xgmCVSToolN; $i++ )
                $xgmCVSToolCheckArray[$i] = 
                    `checkBox -label ($i+1) -ann (uiRes("m_xgmCVSelectionTool.kCvIndexAnn")) -v ($i==0)`;
            setParent ..;
        }

        button -label (uiRes("m_xgmCVSelectionTool.kCvSelect")) -w 130 
            -ann (uiRes("m_xgmCVSelectionTool.kCvSelectAnn"))
            -command "xgmCVSToolCVSelect" xgmCVSToolSelect;
        
        button -label (uiRes("m_xgmCVSelectionTool.kObjectMode")) -w 130
            -ann (uiRes("m_xgmCVSelectionTool.kObjectModeAnn"))
            -command "xgmCVSToolObjectMode;" xgmCVSToolObject;     
        setParent ..;
    }

    formLayout -edit
        -attachForm     xgmCVSToolDesc top   0
        -attachForm     xgmCVSToolDesc left  0
        -attachPosition xgmCVSToolDesc right 0 100
        -attachNone     xgmCVSToolDesc bottom

        -attachControl  xgmCVSToolGridCV top   0 xgmCVSToolDesc
        -attachForm     xgmCVSToolGridCV left  10
        -attachPosition xgmCVSToolGridCV right 0 50
        -attachNone     xgmCVSToolGridCV bottom

        -attachControl  xgmCVSToolAll top   0 xgmCVSToolDesc
        -attachControl  xgmCVSToolAll left  0 xgmCVSToolGridCV
        -attachPosition xgmCVSToolAll right 0 75
        -attachNone     xgmCVSToolAll bottom

        -attachControl  xgmCVSToolNone top    0 xgmCVSToolDesc
        -attachControl  xgmCVSToolNone left   0 xgmCVSToolAll
        -attachForm     xgmCVSToolNone right  0
        -attachNone     xgmCVSToolNone bottom

        -attachControl  xgmCVSToolObject top   0 xgmCVSToolAll
        -attachControl  xgmCVSToolObject left  0 xgmCVSToolGridCV
        -attachPosition xgmCVSToolObject right 0 75
        -attachNone     xgmCVSToolObject bottom

        -attachControl  xgmCVSToolSelect top   0 xgmCVSToolAll
        -attachControl  xgmCVSToolSelect left  0 xgmCVSToolObject
        -attachForm     xgmCVSToolSelect right 0
        -attachNone     xgmCVSToolSelect bottom
    $buttForm1;

    string $desc = python("xgui.currentDescription()");
    python("xg.registerCallback(\"CurrentDescriptionSet\",\"xgenm.xmaya.xgmCVSelectionTool.xgmCVSToolDescriptionChangedCB\")");

    xgmCVSToolDescriptionChangedCB $desc;
}


global proc xgmCVSToolAll()
{
    global string $xgmCVSToolCheckArray[];

    int $i;
    for ( $i=0; $i<size($xgmCVSToolCheckArray); $i++ )
        $xgmCVSToolCheckArray[$i] =
            `checkBox -e -v 1 $xgmCVSToolCheckArray[$i]`;
}


global proc xgmCVSToolNone()
{
    global string $xgmCVSToolCheckArray[];

    int $i;
    for ( $i=0; $i<size($xgmCVSToolCheckArray); $i++ )
        $xgmCVSToolCheckArray[$i] =
            `checkBox -e -v 0 $xgmCVSToolCheckArray[$i]`;
}


global proc xgmCVSToolGetCount()
{
    global int    $xgmCVSToolN;
    
    int $i;
    string $desc = python("xgui.currentDescription()");
    if ( $desc == "" ) {
        $xgmCVSToolN = 0;
        return;
    }
    string $guides[];
    clear $guides;
    catchQuiet ( $guides=python("xg.descriptionGuides(\""+$desc+"\")") );
    int $ncv[] = xgmGuideNcvArray( $guides );
    $xgmCVSToolN = 0;
    for ( $i=0; $i<size($ncv); $i++ )
        if ( $ncv[$i]>$xgmCVSToolN ) $xgmCVSToolN = $ncv[$i];
}


global proc xgmCVSToolRebuildCV()
{
    global int    $xgmCVSToolN;
    global string $xgmCVSToolCheckArray[];

    int $i;
    int $val[];

    // delete all checkboxes first
    for ( $i=0; $i<`size $xgmCVSToolCheckArray`; $i++ )
        if ( `checkBox -q -ex $xgmCVSToolCheckArray[$i]` ){
            $val[$i] = `checkBox -q -v $xgmCVSToolCheckArray[$i]`;
            deleteUI $xgmCVSToolCheckArray[$i];
        }

    // determine how many check boxes are needed
    xgmCVSToolGetCount;
    
    // make new checkboxes
    clear $xgmCVSToolCheckArray;
    for ( $i=0; $i<$xgmCVSToolN; $i++ )
        $xgmCVSToolCheckArray[$i] =
            `checkBox -label ($i+1) -v $val[$i] -p xgmCVSToolGridCV`;
}


global proc xgmCVSToolObjectMode()
{
    string $gList[] = `xgmSelectedGuides "" 1`; // object and component mode
    selectMode -object;
    select -add $gList;
}


global proc xgmCVSToolCVSelect()
{
    global int $xgmCVSToolN;
    global string $xgmCVSToolCheckArray[];

    // build cv selection strings
    string $cvList[];
    int $n=0;

    int $nLast = $xgmCVSToolN;
    int $i;

    int $i0,$i1;
    int $active = 0;
    for ( $i=0; $i<=$nLast; $i++ ){
        int $check = 0;
        if ($i<$nLast)
            $check = `checkBox -q -v $xgmCVSToolCheckArray[$i]`;

        // check for changes
        if ( !$active && $check ){ // start of new active list 
            $i0=$i+1;
            $active=1;
        }
        if ( $active && !$check ){ // end of active list
            $i1=$i;
            $active=0;
            if ( $i0==$i1 )
                $cvList[$n] = ( "[" + $i0 + "]" );
            else
                $cvList[$n] = ( "[" + $i0 + ":" + $i1 + "]" );
            $n++;
        }
    }

    string $gList[] = `xgmSelectedGuides "" 1`; // object and component mode

    select -clear;
    changeSelectMode -component;

    // guides
    for ( $i=0; $i<$n; $i++ )
        for ( $guide in $gList )
            select -add ( $guide + ".vtx" + $cvList[$i] ); 
}


global proc xgmCVSToolDescriptionChangedCB( string $desc )
{
    if ( `textFieldGrp -exists xgmCVSToolDesc` ) {
        if ( $desc == "" )  $desc = "<NONE>";
        textFieldGrp -e -text $desc xgmCVSToolDesc;
        xgmCVSToolRebuildCV;
    } else {
        python("xg.deregisterCallback(\"CurrentDescriptionSet\",\"xgenm.xmaya.xgmCVSelectionTool.xgmCVSToolDescriptionChangedCB\")");
    }
}
