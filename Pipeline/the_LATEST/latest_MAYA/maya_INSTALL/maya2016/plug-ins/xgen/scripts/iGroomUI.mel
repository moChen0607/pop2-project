// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

/**
 * @file iGroomUI.mel
 * @brief Basic UI methods for iGroom.
 *
 * <b>CONFIDENTIAL INFORMATION: This software is the confidential and
 * proprietary information of Walt Disney Animation Studios ("WDAS").
 * This software may not be used, disclosed, reproduced or distributed
 * for any purpose without prior written authorization and license
 * from WDAS. Reproduction of any section of this software must include
 * this legend and all copyright notices.
 * Copyright Disney Enterprises, Inc. All rights reserved.</b>
 *
 * @author Thomas V Thompson II
 *
 * @version tthompso  05/14/07  Initial Version
 * @version tthompso  07/20/07  Replace shelf buttons with icon buttons on ui
 * @version tthompso  08/17/07  Instancing style for count changes
 * @version tthompso  11/05/07  Create description from scratch
 *                              Modify face bindings for description
 * @version tthompso  11/08/07  Allow xuv file to specify point locations
 */


/**
 * Initialization procedure for the iGroom UI.
 */
global proc iGroomUI()
{
    global string $igActiveBrush = "Pose";
    global float $igBrushMagnitude0 = 0.5;
    global float $igBrushMagnitude1 = 0.5;
    global float $igBrushMagnitude2 = 1.0;
    global float $igBrushMagnitude3 = 1.0;
    global float $igBrushMagnitude4 = 1.0;
    global float $igBrushMagnitude5 = 1.0;
    global string $igIconDir;
    $igIconDir = `getenv "RP_iGroom"` + "/maya/icons/";

    nameCommand
        -annotation (uiRes("m_iGroomUI.kRaiseEditorAnnot"))
        -command "iGroomWindowUI"
        igKeyGEditor;
    hotkey -ctl -k "F7" -n "igKeyGEditor";
    
   /*if ( `shelfLayout -q -ex "XGen"` ) {
        igAddIGroomToShelf("XGen");
    }*/
}


/**
 * Main UI for editing properties of a igDescription and the brushes used to
 * groom it.
 */
global proc iGroomWindowUI()
{
    global string $igNullDescriptionTag;
    global string $igIconDir;
    warning (uiRes("m_iGroomUI.kDeprecatediGroomWindowUIWarning"));
    if (`window -exists iGroomWindow`) {
        deleteUI -window iGroomWindow;
    }
    
    window -title (uiRes("m_iGroomUI.kIgroom")) -menuBar true -rtf false iGroomWindow;

    // Overall form for the iGroom Window.
    formLayout igMainForm;
    {
        menu -label (uiRes("m_iGroomUI.kFile")) -parent iGroomWindow
            -allowOptionBoxes on
            -tearOff true
            igFileMenu;
        
        menuItem -label (uiRes("m_iGroomUI.kExportMaps"))
            -ann (uiRes("m_iGroomUI.kExportMapsAnnot"))
            -c "igExportMapsUI";
        menuItem -label (uiRes("m_iGroomUI.kImportMaps"))
            -ann (uiRes("m_iGroomUI.kImportMapAnnot"))
            -c "igImportMapsUI";
        
        menuItem -divider on;
        
        menuItem -label (uiRes("m_iGroomUI.kExportMask"))
            -ann (uiRes("m_iGroomUI.kExportAnnot"))
            -c "igExportMaskUI";
        menuItem -label (uiRes("m_iGroomUI.kImportMask"))
            -ann (uiRes("m_iGroomUI.kImportMaskAnnot"))
            -c "igImportMaskUI";
        
        menuItem -divider on;
        
        menuItem -label (uiRes("m_iGroomUI.kExportRegion"))
            -ann (uiRes("m_iGroomUI.kExportRegionAnnot"))
            -c "igExportRegionUI";
        menuItem -label (uiRes("m_iGroomUI.kImportRegion"))
            -ann (uiRes("m_iGroomUI.kImportRegionAnnot"))
            -c "igImportRegionUI";
            
        menuItem -divider on;
        
        menuItem -label (uiRes("m_iGroomUI.kExportColors"))
            -ann (uiRes("m_iGroomUI.kExportColorsAnnot"))
            -c "igExportColorsUI";
        menuItem -label (uiRes("m_iGroomUI.kExportUvs"))
            -ann (uiRes("m_iGroomUI.kExportUVsAnnot"))
            -c "igExportUVsUI";
        menuItem -label (uiRes("m_iGroomUI.kExport2dTexture"))
            -ann (uiRes("m_iGroomUI.kExport2dTextureAnnot"))
            -c "igExportTextureUI";
        
        menu -label (uiRes("m_iGroomUI.kDescription")) -parent iGroomWindow
            -allowOptionBoxes on
            -tearOff true
            igDescriptionMenu;
        menuItem -label (uiRes("m_iGroomUI.kNewDescription"))
            -ann (uiRes("m_iGroomUI.kNewDescriptionAnnot"))
            -c "igCreateDescriptionUI";
        menuItem -label (uiRes("m_iGroomUI.kBindGeometry")) -subMenu true -parent igDescriptionMenu;
        menuItem -label (uiRes("m_iGroomUI.kReplaceExisting"))
            -ann (uiRes("m_iGroomUI.kReplaceExistingAnnot"))
            -c "igBindFromSelection(1)";
        menuItem -label (uiRes("m_iGroomUI.kAddToExisting"))
            -ann (uiRes("m_iGroomUI.kAddToExistingAnnot"))
            -c "igBindFromSelection(0)";
        
        menu -label (uiRes("m_iGroomUI.kEdit")) -parent iGroomWindow
            -tearOff true
            igEditMenu;
        menuItem -label (uiRes("m_iGroomUI.kFlip")) -subMenu true;
        menuItem -label (uiRes("m_iGroomUI.kLeftToRight"))
            -ann (uiRes("m_iGroomUI.kFlipAnnot"))
            -c "igFlip 1";
        menuItem -label (uiRes("m_iGroomUI.kRightToLeft"))
            -ann (uiRes("m_iGroomUI.kRightToLeftAnnot"))
            -c "igFlip 0";
        setParent -m igEditMenu;
        menuItem -label (uiRes("m_iGroomUI.kSetLength"))
            -ann (uiRes("m_iGroomUI.kSetLengthAnnot"))
            -c "igSetLengthUI";
        menuItem -label (uiRes("m_iGroomUI.kSetWidth"))
            -ann (uiRes("m_iGroomUI.kSetWidthAnnot"))
            -c "igSetWidthUI";
        menuItem -label (uiRes("m_iGroomUI.kAutoTwist"))
            -ann (uiRes("m_iGroomUI.kAutotwistAnnot"))
            -c "igAutoTwist";
        menuItem -label (uiRes("m_iGroomUI.kConvertMaskToCurves"))
            -ann (uiRes("m_iGroomUI.kConvertMaskToCurvesAnnot"))
            -c "igMaskToCurvesUI";
        
        // TODO: help
//        menu -label "Help" -helpMenu true -parent iGroomWindow
//            -tearOff true
//            igHelpMenu;
//        menuItem -label "iGroom Help"
//            -ann "Go to iGroom project's main page."
//            -c "showHelp -a \"http://fawww/new/twiki/bin/view/SWProjects/IGroom\"";

        
        formLayout -parent igMainForm igDescLayout;
        {
            text -align "left" -label (uiRes("m_iGroomUI.kDescription2")) igDescLabel;
            igCreateIconPopup( "igDescMenu",
                               (uiRes("m_iGroomUI.kTheCurrentDescription")),
                               (uiRes("m_iGroomUI.kAllDescriptions")),
                               "igDescriptionRenameCB");
            string $descs[] = igAllDescriptions();
            for ( $desc in $descs ) {
                igAddDeepMenuItem( $desc, "igDescMenu",
                                   "igDescMenuCB" );
            }
            string $cdesc = igCurrentDescription();
            if ( $cdesc == "" ) 
                $cdesc = $igNullDescriptionTag;
            textField -edit -tx $cdesc igDescMenuValue;
            
            iconTextButton -style "iconOnly" -width 22 -height 22
                -ann (uiRes("m_iGroomUI.kToggleDescriptionVisibility"))
                -c "igToggleVisibility"
                -image ($igIconDir + "igVisible.xpm")
                igDescVisible;
            
            tabLayout -cr true -scr on igTabLayout;
            {
                string $brushLayout = `igBrushTabUI`;
                string $previewLayout = `igPreviewTabUI`;
                
                // Set all the labels.
                tabLayout -edit
                    -tabLabel $previewLayout (uiRes("m_iGroomUI.kPreview")) 
                    -tabLabel $brushLayout (uiRes("m_iGroomUI.kBrush"))	   
                    igTabLayout;
                setParent ..;                
            }
            setParent ..;
        }
        
        // Attach the new layouts.
        formLayout -edit
            -attachForm igDescLabel left 5
            -attachForm igDescLabel top 5
            -attachNone igDescLabel right
            -attachNone igDescLabel bottom
            
            -attachForm    igDescMenuValue top 5
            -attachControl igDescMenuValue left 5 igDescLabel
            -attachNone    igDescMenuValue right
            -attachNone    igDescMenuValue bottom
            
            -attachForm    igDescMenuImage top 5
            -attachControl igDescMenuImage left 3 igDescMenuValue
            -attachNone    igDescMenuImage right
            -attachNone    igDescMenuImage bottom

            -attachForm    igDescVisible top 4
            -attachControl igDescVisible left 3 igDescMenuImage
            -attachNone    igDescVisible right
            -attachNone    igDescVisible bottom

            -attachControl igTabLayout top 5 igDescMenuValue
            -attachForm    igTabLayout left 1
            -attachForm    igTabLayout right 1
            -attachForm    igTabLayout bottom 5
            
            igDescLayout;

        formLayout -edit
            -attachForm    igDescLayout top 5
            -attachForm    igDescLayout left 5
            -attachForm    igDescLayout right 5
            -attachForm    igDescLayout bottom 5

            igMainForm;

        setParent ..;
    }
    
    showWindow iGroomWindow;

    // Dont let the window pop-up the wrong size
    window -e -width 500 -height 495 iGroomWindow;
    
    igRefreshUI;
}


/** Fix maya bug with frames */
global proc igFixSizeCB()
{
    if ( `window -exists iGroomWindow` ) {
        int $width = `window -query -width iGroomWindow`;
        int $width2 = $width+2;
        $cmd = "window -edit -width " + $width2 + " iGroomWindow;";
        $cmd += "window -edit -width " + $width + " iGroomWindow;";
        evalDeferred($cmd);
    }
}


global proc string igBrushTabUI()
{
    global string $igIconDir;
    global string $igBrushList[];
    global string $igActiveBrush;
    global string $igNewActiveBrush;
    
    $desc = igCurrentDescription();
    string $brushFrame = `frameLayout -label ""
        -cll false -cl false -bv false
        -ec "igFixSizeCB" -cc "igFixSizeCB"`;
    {
        columnLayout -adj on igBrushColumn;
        {
            int $i=0;
            for ( $item in $igBrushList ) {
                if ( $i==0 || $i==8 ) {
                    rowLayout -nc 8 -parent igBrushColumn
                        -cat 1 "right" 4 -cat 2 "left" 0 -cat 3 "left" 0
                        -cat 4 "left" 0 -cat 5 "left" 0 -cat 6 "left" 0
                        -cat 7 "left" 0 -cat 8 "left" 0
                        -cw 1 60 -cw 2 55 -cw 3 55 -cw 4 55
                        -cw 5 55 -cw 6 55 -cw 7 55 -cw 8 55
                        -cal 1 "right" -cal 2 "right" -cal 3 "right"
                        -cal 4 "right" -cal 5 "right" -cal 6 "right"
                        -cal 7 "right" -cal 8 "right";
                }
                string $icon;
                string $label;
                $cmd = "$igNewActiveBrush=\""+$item+"\";";
                $cmd += "igRefreshBrushUI;";
                if ( $item == "Eraser" ) {
                    $icon = "igEraser";
                    $label = "Eraser";
                } else if ( $item == "Mask" ) {
                    $icon = "igMask";
                    $label = "Mask";
                } else if ( $item == "ClearMask" ) {
                    $icon = "igClearMask";
                    $label = "Clear";
                    $cmd = "iGroom -cm -d \""+$desc+"\"";
                } else {
                    $icon = "igBrush";
                    $label = $item;
                }
                if ( $item == $igActiveBrush ) $icon+="On.xpm";
                else $icon+="Off.xpm";
                $widget = "ig"+$item+"IconButton";
				string $itemAnnot = (uiRes("m_iGroomUI.kSwitchBrush"));
                iconTextButton -style "iconAndTextVertical" -w 46
                    -image1 ($igIconDir + $icon)
                    -c $cmd
                    -ann `format -s $item $itemAnnot`
                    -label $label
                    $widget;
                $i++;
            }
            $igNewActiveBrush = $igActiveBrush;
            setParent ..;
            
            frameLayout -parent igBrushColumn
                -label " " -cll false -cl false -bv false
                igBrushForm;
            {
                setParent ..;
            }
            setParent ..;
        }
        setParent ..;
    }
    return $brushFrame;
}


global proc string igPreviewTabUI()
{
    global string $igIconDir;

    string $previewFrame = `frameLayout -label ""
        -cll false -cl false -bv false
        -ec "igFixSizeCB" -cc "igFixSizeCB"`;
    {
        columnLayout -width 300 -adj on;
        {
            rowLayout -nc 2 -adj 1
                -ct2 "right" "left" -co2 1 1;
            {
                floatSliderGrp -label (uiRes("m_iGroomUI.kDensity")) -f true -pre 4 -cw 1 75
                    -min 0.001 -max 500.0 -fmx 25000.0 -step 0.02 
                    -ann (uiRes("m_iGroomUI.kDensityAnnot"))
                    igDensity;
                radioButtonGrp -label "" -nrb 3
                    -cw 1 0 -cw 2 65 -cw 3 65 -cw 4 68
                    -ann (uiRes("m_iGroomUI.kNewPrimAnnot"))
                    -la3 (uiRes("m_iGroomUI.kDefault")) 
					(uiRes("m_iGroomUI.kNearest")) 
					(uiRes("m_iGroomUI.kInterp"))
                    -data1 0 -data2 1 -data3 2
                    igInterpStyle;
                setParent ..;
            }
            rowLayout -nc 2 -adj 1
                -ct2 "right" "left" -co2 1 1;
            {
                textFieldGrp -label (uiRes("m_iGroomUI.kMask")) -adj 2 -cw 1 75
                    -ann (uiRes("m_iGroomUI.kMaskAnnot"))
                    igMask;
                iconTextButton -style "iconOnly" -width 22 -height 22
                    -ann (uiRes("m_iGroomUI.kRefreshAnnot"))
                    -c "igRefreshDensity(\"igMask\")"
                    -image ($igIconDir + "igRefresh.png");
                setParent ..;
            }
            rowLayout -nc 2 -adj 1
                -ct2 "right" "left" -co2 1 1;
            {
				$browserTitle = (uiRes("m_iGroomUI.kXuvDirectory"));
                $browser = "igFileBrowser \"" + $browserTitle + "\" igXUVDir 0";
                textFieldButtonGrp -label (uiRes("m_iGroomUI.kXuvDir")) -cw 1 75
                    -bl (uiRes("m_iGroomUI.kBrowse")) -bc $browser -cal 1 right -adj 2
                    -ann (uiRes("m_iGroomUI.kXUVDirAnnot"))
                    igXUVDir;
                iconTextButton -style "iconOnly" -width 22 -height 22
                    -ann (uiRes("m_iGroomUI.kRefreshAnnot2"))
                    -c "igRefreshXUV(\"igXUVDir\")"
                    -image ($igIconDir + "igRefresh.png");
                setParent..;
            }
            
            attrColorSliderGrp -label (uiRes("m_iGroomUI.kTipColor")) -adj 3 -cw 1 75
                -sb false -cw 4 2
                -ann (uiRes("m_iGroomUI.kTipAnnot"))
                igTipColor;
            attrColorSliderGrp -label (uiRes("m_iGroomUI.kBaseColor")) -adj 3 -cw 1 75
                -sb false -cw 4 2
                -ann (uiRes("m_iGroomUI.kBaseAnnot"))
                igBaseColor;
            radioButtonGrp -label (uiRes("m_iGroomUI.kDisplay")) -nrb 2 -cw 1 75
                -cw 2 60 -cw 3 60
                -ann ((uiRes("m_iGroomUI.kDisplayAnnot")))
                -la2 (uiRes("m_iGroomUI.kLines")) 
				(uiRes("m_iGroomUI.kCards"))
                -data1 0 -data2 1
                igDisplayType;
    
            setParent ..;
        }
        setParent ..;
    }
    return $previewFrame;
}


/** Allow editing multiple igDescriptions obejcts */ 
global proc igDescMenuCB( string $desc, string $menu )
{
    string $menuValue = $menu + "Value";
    if (`text -exists $menuValue`) {
        text -e -label $desc $menuValue;
    }
    igSetCurrentDescription($desc);
    igRefreshUI;    
}


/** Update the complete UI */
global proc igRefreshUIConnections( 
    string $desc, 
    string $density, 
    string $style, 
    string $mask, 
    string $xuvDir, 
    string $tipColor, 
    string $baseColor, 
    string $displayType )
{
    global string $igNullDescriptionTag;
    
    if (( $desc != "" ) && ( $desc != $igNullDescriptionTag)) {    
        connectControl -in 2 $density ($desc+".density");
        connectControl -in 3 $density ($desc+".density");
        connectControl $style ($desc+".interpStyle");
        connectControl -in 2 $mask ($desc+".mask");
        connectControl -in 2 $xuvDir ($desc+".xuvDir");
        attrColorSliderGrp -edit -at ($desc+".tipColor") $tipColor;
        attrColorSliderGrp -edit -at ($desc+".baseColor") $baseColor;
        connectControl $displayType ($desc+".displayType");
    }    
}

global proc igRefreshUI()
{
    global string $igNullDescriptionTag;
    string $desc;
    if ( `popupMenu -q -ni igDescMenu` > 0 ) {
        $desc = `textField -q -tx igDescMenuValue`;
    } else {
        $desc = igCurrentDescription();
    }
    
    igRefreshUIConnections( $desc, "igDensity", "igInterpStyle", "igMask", "igXUVDir", "igTipColor", "igBaseColor", "igDisplayType" );
    
    igRefreshBrushUI;
}

/** reset the geometry primitives **/
global proc igResetPrims( )
{
    string $desc = igCurrentDescription();

    if ( $desc == "" ) return;
    if ( !`objExists $desc` ) return;    

    undoInfo -ock -cn "igResetPrims";

    float $val = `getAttr($desc+".density")`;
    float $tempVal = $val - 0.001;
    setAttr ($desc+".density") $tempVal;
    int $style = `getAttr ($desc+".interpStyle")`;
    setAttr ($desc+".interpStyle") 0;
    setAttr ($desc+".tickle") on;
    setAttr ($desc+".density") $val;
    setAttr ($desc+".interpStyle") $style;

    undoInfo -cck ;
}

/** Reapply the density expression. */
global proc igRefreshDensity( string $control )
{
    string $desc = igCurrentDescription();
    string $val = `textFieldGrp -q -tx $control`;
    if ( endsWith($val," ") ) {
        int $len = `size $val`;
        $len--;
        $val = `substring $val 1 $len`;
    } else {
        $val = $val+" ";
    }
    setAttr -type "string" ($desc+".mask") $val;
}


/** Reapply the xuv directory to get fresh points. */
global proc igRefreshXUV( string $control )
{
    string $desc = igCurrentDescription();
    string $val = `textFieldGrp -q -tx $control`;
    if ( endsWith($val," ") ) {
        int $len = `size $val`;
        $len--;
        $val = `substring $val 1 $len`;
    } else {
        $val = $val+" ";
    }
    setAttr -type "string" ($desc+".xuvDir") $val;
}


/** Toggle the visibility of the current description. */
global proc igToggleVisibility()
{
    string $desc = igCurrentDescription();
    int $val = `getAttr ($desc+".visibility")`;
    setAttr ($desc+".visibility") (1-$val);
}


/** Get the visibility of the current description. */
global proc int igGetDescriptionVisibility()
{
    string $desc = igCurrentDescription();
    int $val = `getAttr ($desc+".visibility")`;
    return $val ;
}

/** Set the visibility of the current description. */
global proc igSetDescriptionVisibility( int $val )
{
    string $desc = igCurrentDescription();
    setAttr ($desc+".visibility") ($val);
}

global proc igSetAllDescriptionsVisibility( int $val )
{
    string $descs[] = igAllDescriptions();
    for ( $desc in $descs ) {
        setAttr ($desc+".visibility") ($val);
    }
}

/**
 * Flip the groom on one side of the description object to the other.
 */
global proc igFlip( int $leftToRight )
{
    string $desc = igCurrentDescription();
    waitCursor -state on;
    iGroom -flip $leftToRight -d $desc;
    waitCursor -state off;
}


/**
 * Autotwist the primitives for the best width cross section.
 */
global proc igAutoTwist()
{
    string $desc = igCurrentDescription();
    waitCursor -state on;
    iGroom -at -d $desc;
    waitCursor -state off;
}


global proc igDescriptionRenameCB()
{
    string $newName=`textField -q -tx igDescMenuValue`;
    string $descr=igCurrentDescription();
    if ( $newName == "" ) {
        textField -e -tx $descr igDescMenuValue;
        return;
    }
    if ( `objExists $descr` ) {
        rename $descr $newName;
        igRefreshUI;
    }
}


/** Return the current iGroom version from rapids. */
global proc string igVersion()
{
    string $version = `getenv "RP_iGroom"`;
    
    if ( `match "^/projects/iGroom*" $version` != "" ) {
        $version = "Workspace";
    } else {
        string $buffer[];
        int $numTokens = `tokenize $version "_" $buffer`;
        $version = $buffer[$numTokens - 1];
    }
    
    return $version;
}


/** Create a popup menu that activates when clicking on an image.  */
global proc igCreateIconPopup( string $menuName, string $textann,
                               string $menuann, string $renameCB )
{
    global string $igNullDescriptionTag;
    global string $igIconDir;

    string $label = $menuName + "Value"; 
    string $icon  = $menuName + "Image";

    if (! `textField -exists $label`) {
        textField -text $igNullDescriptionTag
            -ann $textann -cc $renameCB
            -width 180 -editable false $label;
    }

    if (! `image -exists $icon`) {
        image -w 17 -h 20 -ann $menuann
            -i ($igIconDir + "igPopup.gif") $icon;
    }

    if (! `popupMenu -exists $menuName`) {
        popupMenu -button 1 -p $icon $menuName;
    }
}


/** Add a submenu to the base */
global proc string igAddDeepMenu( string $baseMenu )
{
    return `menuItem -label "..." -sm true -p $baseMenu`;
}


/** Recursively determine the deepest submenu (subs are always at the end) */
global proc string igGetDeepestMenu( string $baseMenu )
{
    string $menu = $baseMenu;

    if ( `popupMenu -e $baseMenu` ) {
        string $items[] = `popupMenu -q -ia $baseMenu`;
        if ( size($items) > 0 ) {
            string $lastItem = $items[size($items)-1];
            if ( `menuItem -q -sm $lastItem` ) {
                $menu = igGetDeepestMenu( $lastItem );
            }
        }
    }

    return $menu;
}


/** Add the given item at the proper depth to baseMenu */
global proc igAddDeepMenuItem( string $itemName,
                               string $baseMenu,
                               string $callback )
{
    string $deepestMenu = igGetDeepestMenu( $baseMenu );
    if ( `popupMenu -q -ni $deepestMenu` >= 20 ) {
        $deepestMenu = igAddDeepMenu( $deepestMenu );
    }
    
    string $cmd = $callback + "( \"" +$itemName+ "\""+",\"" +$baseMenu+ "\");";

    menuItem -label $itemName -parent $deepestMenu -c $cmd;
}


/**  Recursively retrieve all the menu items for this menu and its submens */
global proc string[] igGetAllMenuItems( string $myMenu )
{
    string $items[] = `popupMenu -q -ia $myMenu`;
    string $menuItems[];
    string $item;

    for ( $item in $items ) {
        if ( `menuItem -q -sm $item` ) {
            string $subMenus[] = igGetAllMenuItems( $item );
            $menuItems = stringArrayCatenate( $menuItems, $subMenus );
        } else {
            $menuItems[size($menuItems)] = $item;
        }
    }

    return $menuItems;
}


