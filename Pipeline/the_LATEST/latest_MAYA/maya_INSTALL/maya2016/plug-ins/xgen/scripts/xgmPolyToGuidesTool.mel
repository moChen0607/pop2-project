// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

/**
 * @file xgmPolyToGuidesTool.mel
 * @brief Contains the XgmPolyToGuidesTool MEL procedure.
 *
 * <b>CONFIDENTIAL INFORMATION: This software is the confidential and
 * proprietary information of Walt Disney Animation Studios ("WDAS").
 * This software may not be used, disclosed, reproduced or distributed
 * for any purpose without prior written authorization and license
 * from WDAS. Reproduction of any section of this software must include
 * this legend and all copyright notices.
 * Copyright Disney Enterprises, Inc. All rights reserved.</b>
 *
 * @author Lawrence Chai
 * @author Thomas V Thompson II
 * @author Ying Liu
 *
 * @version Created 07/10/07
 */

global string $xgmRegionMapDir = "${DESC}/Region/";

proc xgmPTGTGuideSettingFrame()
{
    frameLayout -l "Guide Settings" -cll true -cl false -li 5
        -bv true -ec "xgmJiggleWindowCB" -cc "xgmJiggleWindowCB"; 
    {
        columnLayout -adj false -columnOffset left 5;
        {
            int $xgmPTGTextWidth = 110;
            int $xgmPTGTextFieldWidth = 60;
            int $xgmPTGSliderWidth = 170;

            float $xgmPTGTdistance = `optionVar -query xgmPTGTdistance`;
            if ($xgmPTGTdistance == 0) $xgmPTGTdistance = 0.2;
            floatSliderGrp -label (uiRes("m_xgmPolyToGuidesTool.kDistance")) 
                -cw3 $xgmPTGTextWidth $xgmPTGTextFieldWidth $xgmPTGSliderWidth
                -ann (uiRes("m_xgmPolyToGuidesTool.kMinimumGuideAnn"))
                -field true -minValue 0.0 -max 1.0 -fieldMaxValue 1000.0
                -value $xgmPTGTdistance -pre 3 xgmPTGTdistanceFSG;

            rowLayout -nc 3 -cw3 $xgmPTGTextWidth 110 110 
                -cl3 "center" "center" "center";
            {
                text "";

                button -label (uiRes("m_xgmPolyToGuidesTool.kTestSettings1")) -w 110
                    -ann (uiRes("m_xgmPolyToGuidesTool.kTestSettingsAnn"))
                    -c xgmPTGTCreateLocators;

                button -label (uiRes("m_xgmPolyToGuidesTool.kRemoveTest1")) -w 110 
					-ann (uiRes("m_xgmPolyToGuidesTool.kRemoveTestAnn"))
                    -c xgmPTGTDeleteLocators;

                setParent ..;
            }

            setParent ..;
        }

        setParent ..;
    }
}


proc xgmPTGTMapSettingFrame()
{
    frameLayout -label (uiRes("m_xgmPolyToGuidesTool.kMapSettings")) -cll true -cl false -li 5
        -bv true -ec "xgmJiggleWindowCB" -cc "xgmJiggleWindowCB"; 
    {
        columnLayout -adj 0 -columnOffset left 5 ;
        {
            float $xgmPTGTtexelsPerUnit = `optionVar -query xgmPTGTtexelsPerUnit`;
            if ( $xgmPTGTtexelsPerUnit == 0 ) {
                $xgmPTGTtexelsPerUnit = 0.01;
			}

            floatSliderGrp -label (uiRes("m_xgmPolyToGuidesTool.kTexelsPerUnit")) -cw3 110 60 230
                -field true -min 0.001 -max 100.0 -fieldMaxValue 10000.0
                -step 0.001 -pre 3 -v $xgmPTGTtexelsPerUnit 
                -ann ( (uiRes("m_xgmPolyToGuidesTool.kTexelsPerUnitAnn")) ) 
                xgmPTGTtexelsPerUnitFSG;

            rowLayout -nc 3 -cw3 110 110 110 -cl3 "center" "center" "center";
            {
                text "";

                button -label (uiRes("m_xgmPolyToGuidesTool.kTestSettings2")) -w 110
                    -ann (uiRes("m_xgmPolyToGuidesTool.kTestSettingsAnn2"))
                    -c xgmPTGTTestMapSettings;

                button -label (uiRes("m_xgmPolyToGuidesTool.kRemoveTest2")) -w 110 
					-ann (uiRes("m_xgmPolyToGuidesTool.kRemoveTestAnn2"))
                    -c xgmPTGTRemoveMapTest;

                setParent ..;
            }
       
            setParent ..;
        }

        setParent ..;
    }
}


/**
 * User interface for converting guides to a nurbsSurface and back.
 */
global proc xgmPolyToGuidesTool( string $parent )
{
    columnLayout -parent $parent -adj false -w 340;
    {
        textFieldGrp -label (uiRes("m_xgmPolyToGuidesTool.kDescription")) -cw2 115 225 
            -ann (uiRes("m_xgmPolyToGuidesTool.kDescriptionAnn"))
            -editable false xgmPTGTdescriptionTFG;

        rowLayout -nc 2 -cw2 115 225 -cl2 "center" "center";
	{
            text -l "";
	    setParent ..;
	}

        // Guide and Map Settings frame
        xgmPTGTGuideSettingFrame();
        xgmPTGTMapSettingFrame();

        button -l (uiRes("m_xgmPolyToGuidesTool.kGeneratesGuidesAndMaps")) -w 340 
            -ann ( (uiRes("m_xgmPolyToGuidesTool.kGenerateGuidesAndMapsAnn")) ) 
            -c xgmPTGTGeneratesGuidesAndMaps;
            
        setParent ..;
    }

    python( "xg.registerCallback(\"CurrentDescriptionSet\",\"xgenm.xmaya.xgmPolyToGuidesTool.xgmPolyToGuideToolDescChangedCB\")" );

    xgmPolyToGuideToolDescChangedCB();
}


/**
 * Create locators at guide positions.
 */
global proc xgmPTGTCreateLocators()
{
    string $desc = python( "xgui.currentDescription()" );
    if ( $desc == "" ) {
        warning ( (uiRes("m_xgmPolyToGuidesTool.kPolytoguideCurrentDescriptionIsNotSet1")) );
        return;
    }

    // Create new locators at guide locations
    string $command = "xgmPolyToGuide -createLocators -d ";
    $command += $desc;

    $command += " -distance ";
    float $xgmPTGTdistance = `floatSliderGrp -q -v xgmPTGTdistanceFSG`;
    optionVar -fv "xgmPTGTdistance" $xgmPTGTdistance;
    $command += $xgmPTGTdistance;
    
    eval( $command );
}


global proc xgmPTGTDeleteLocators()
{
    xgmPolyToGuide -deleteLocators;
}


global proc xgmPTGTRemoveMapTest()
{
    xgmLoadPtexToolCleanUp();
}


global proc xgmPTGTTestMapSettings()
{
    global string $xgmRegionMapDir;

    string $desc = python( "xgui.currentDescription()" );
    if ( $desc == "" ) {
        warning (uiRes("m_xgmPolyToGuidesTool.kPolytoguideCurrentDescriptionIsNotSet3"));
        return;
    }

    string $selection[] = `ls -sl`;

    string $command = "xgmPolyToGuide -testMap -d ";
    $command += $desc;

    $command += " -regionMapDir \"";
    $command += $xgmRegionMapDir;
    $command += "\"";

    $command += " -texelsPerUnit ";
    float $xgmPTGTtexelsPerUnit = `floatSliderGrp -q -v xgmPTGTtexelsPerUnitFSG`;
    optionVar -fv "xgmPTGTtexelsPerUnit" $xgmPTGTtexelsPerUnit;
    $command += $xgmPTGTtexelsPerUnit;

    print( eval( $command ) );

    // Restore the original selection
    select -r $selection;
}


global proc xgmPTGTGeneratesGuidesAndMaps()
{
    global string $xgmRegionMapDir;
    
    string $desc = python( "xgui.currentDescription()" );
    if ( $desc == "" ) {
        warning ( (uiRes("m_xgmPolyToGuidesTool.kPolytoguideCurrentDescriptionIsNotSet2")) );
        return;
    }

    waitCursor -state on;
    
    // Remove existing locators and ptex shaders
    xgmPTGTDeleteLocators();
    xgmPTGTRemoveMapTest();

    // Create guide, curves and maps
    string $command = "xgmPolyToGuide -createAll -d ";
    $command += $desc;

    $command += " -distance ";
    float $xgmPTGTdistance = `floatSliderGrp -q -v xgmPTGTdistanceFSG`;
    optionVar -fv "xgmPTGTdistance" $xgmPTGTdistance;
    $command += $xgmPTGTdistance;
    
    // Always use $DESC/REGION for region map
    $command += " -regionMapDir \"";
    $command += $xgmRegionMapDir;
    $command += "\"";

    $command += " -texelsPerUnit ";
    float $xgmPTGTtexelsPerUnit = `floatSliderGrp -q -v xgmPTGTtexelsPerUnitFSG`;
    optionVar -fv "xgmPTGTtexelsPerUnit" $xgmPTGTtexelsPerUnit;
    $command += $xgmPTGTtexelsPerUnit;

    print( eval( $command ) );

    waitCursor -state off;
}


global proc xgmPolyToGuideToolDescChangedCB()
{
    if ( `textFieldGrp -exists xgmPTGTdescriptionTFG` ) {
        string $desc = python( "xgui.currentDescription()" );
        if ( $desc == "" ) {
	    $desc = "<NONE>";
	}
        textFieldGrp -e -text $desc xgmPTGTdescriptionTFG;        
    } else {
        python( "xg.deregisterCallback(\"CurrentDescriptionSet\",\"xgenm.xmaya.xgmPolyToGuidesTool.xgmPolyToGuideToolDescChangedCB\")" );
    }
}
