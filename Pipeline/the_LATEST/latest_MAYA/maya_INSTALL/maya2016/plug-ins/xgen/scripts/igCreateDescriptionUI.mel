// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

/**
 * @file igCreateDescriptionUI.mel
 * @brief UI for creating a new iGroom description.
 *
 * <b>CONFIDENTIAL INFORMATION: This software is the confidential and
 * proprietary information of Walt Disney Animation Studios ("WDAS").
 * This software may not be used, disclosed, reproduced or distributed
 * for any purpose without prior written authorization and license
 * from WDAS. Reproduction of any section of this software must include
 * this legend and all copyright notices.
 * Copyright Disney Enterprises, Inc. All rights reserved.</b>
 *
 * @author Thomas V Thompson II
 *
 * @version tthompso  07/27/07  Initial Version
 * @version tthompso  11/05/07  Create description from scratch
 */


/** Dialog for creating a new description. */
global proc igCreateDescriptionUI()
{
    if (`window -exists igCreateDescriptionWindow`)
        deleteUI -window  igCreateDescriptionWindow;

    window -sizeable false -minimizeButton false -maximizeButton false
	    -menuBar false -width 600 -height 100
	    -title (uiRes("m_igCreateDescriptionUI.kIgroomCreateDescription")) igCreateDescriptionWindow;

    columnLayout -adj on -rs 10;
    {
        textFieldGrp -l (uiRes("m_igCreateDescriptionUI.kXgenDescription")) -adj 2
            -ann (uiRes("m_igCreateDescriptionUI.kNameOfXgenDescrAnn"))
            igFromXDescriptionField;

        rowLayout -numberOfColumns 3 -columnWidth3 130 130 130
            -columnAlign3 "center" "center" "center"
            -adjustableColumn3 1;
        {
            // Control over the dialog
            text -l "";
            button -label (uiRes("m_igCreateDescriptionUI.kCreate")) -w 130
                -ann (uiRes("m_igCreateDescriptionUI.kCreateTheNewDescriptionAnn"))
                -c "igCreateDescriptionCB;deleteUI igCreateDescriptionWindow;";
            button -label (uiRes("m_igCreateDescriptionUI.kCancel")) -w 130 
                -ann (uiRes("m_igCreateDescriptionUI.kCancelCreateProcessAnn"))
                -c "deleteUI igCreateDescriptionWindow";
            setParent ..;
        }

        setParent ..;
    }

    showWindow igCreateDescriptionWindow;

    // Dont let the window pop-up the wrong size
    window -e -width 600 igCreateDescriptionWindow;
    window -e -height 70 igCreateDescriptionWindow;
}


/**
 * Callback for the create description UI. This simply gathers imput and
 * calls the main api for creating a new description.
 */
global proc igCreateDescriptionCB()
{
    string $xdesc = `textFieldGrp -q -tx igFromXDescriptionField`;

    igCreateDescription( $xdesc, 1 );
}


/**
 * Create an iGroom description out of a XGen description. This will gather
 * up the bound geometry and use it to create the iGroom bindings. The new
 * description will be made current.
 */
global proc string igCreateDescription( string $xdesc, int $openView )
{
    global string $igCurrentDescription;
    
    // Save the original selection list so that we can restore later
    string $selOrig[] = `ls -sl`;

    // Create igDescription node and set up the attributes and connections
    string $name;
    if ( $xdesc != "" ) {
        $name = "ig_"+$xdesc;
    } else {
        $name = "igDescription";
    }
    string $parent = `createNode transform -n $name`;
    string $desc = `createNode -ss igmDescription -parent $parent 
                        -n ( $parent + "Shape" )`;

    // Set the path for maps
    string $path;
    if ( $xdesc != "" ) {
        string $xpal = python("xg.palette(\""+$xdesc+"\")");
        $path = python("xg.getAttr(\"xgDataPath\",\""+$xpal+"\")");
    } 

	if( $path == "" )
        $path = "${PROJECT}/xgen/collections/undefined_palette";

    setAttr -type "string" ( $desc + ".path" ) $path;

    // Restore the original selection
    select -r $selOrig;

    $igCurrentDescription = $parent;
    
    // Bind to geometry
    if ( $xdesc != "" ) {
        igBindFromXGen( $xdesc );
    } else {
        igBindFromSelection( 1 );
    }

    if ( $openView == 1 ) {
        iGroomWindowUI;
    }
    
    return $desc;
}
