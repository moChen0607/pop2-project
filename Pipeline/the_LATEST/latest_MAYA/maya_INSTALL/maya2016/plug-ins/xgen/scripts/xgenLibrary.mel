// Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

global string $gXGenLibraryWindow;
global string $gXGenPresetTreeView;
global string $gXGenPresetViewerLayout;
global string $gCurrentXGenPresetIconTextButton;
global float  $gCurrentXGenPresetIconTextButtonBGColor[];
global string $gAllXGenPresetIconTextButtons[];
global int    $gAllXGenPresetTypeIds[];
global string $gOptionVarNameForXGenPresetPaths = "XGenPresetPaths";
global string $gOptionVarNameForXGenPresetPathsIncludeSubdirectories = "XGenPresetPathsIncludeSubdirectories";
global string $gXGenPresetSearchField;
global string $gXGenPresetThumbnailSizeSlider;
global string $gXGenValidPresetTypes[];
global int    $gXGenPresetTypesOnOff[];
global int    $gXGenPresetPathIncludeSubdir;
// The file paths stored in this array have the same order as the treeview items are built. 
// The index of the path in the array will be used as the item name in the treeview.
// So that the same sub-folder can be displayed in the treeview multiple times from different folder hierachies.
global string $gPresetFilePaths[]; 
proc string getLastFolderName_XGenLib(string $filePath)
{
    string $lastFolderName;
    string $folderNameArray[];
    tokenize($filePath, "/", $folderNameArray);
    if(size($folderNameArray) > 1)
        $lastFolderName = $folderNameArray[size($folderNameArray) - 1];
        
     return $lastFolderName;
}
global proc selectXGenPresetFileCB(string $presetFile, string $iconButton)
{
    global string $gCurrentXGenPresetIconTextButton;
    global float $gCurrentXGenPresetIconTextButtonBGColor[];
    //restore previous icon background
    if(size($gCurrentXGenPresetIconTextButton) > 0 && `shelfButton -q -exists $gCurrentXGenPresetIconTextButton`){
        shelfButton -edit
                        -backgroundColor $gCurrentXGenPresetIconTextButtonBGColor[0] $gCurrentXGenPresetIconTextButtonBGColor[1] $gCurrentXGenPresetIconTextButtonBGColor[2]
                        $gCurrentXGenPresetIconTextButton;
    }
        
    $gCurrentXGenPresetIconTextButtonBGColor = `shelfButton -q -backgroundColor $iconButton`;
                                
    shelfButton -edit
                    -backgroundColor 1 1 0
                    $iconButton;
                    
    $gCurrentXGenPresetIconTextButton = $iconButton;
}
global proc assignXGenPresetToObjects(string $presetFile)
{
    python("xgui.importPresetWithPath(\"" + $presetFile +"\")");
}
proc string presetType(string $presetFile)
{
    return python("xgui.getPresetType(\"" + $presetFile +"\")");
}
proc int presetTypeId(string $presetType)
{
    global string $gXGenValidPresetTypes[];
    
    int $i;
    for($i=0; $i<size($gXGenValidPresetTypes); $i++)
    {
        if($gXGenValidPresetTypes[$i] == $presetType)
            return $i;
    }
    string $warningInfo = (uiRes("m_xgenLibrary.kXGenPresetTypeUnrecognized"));
    warning `format -s $presetType $warningInfo`;
    
    return 0;
}
proc float[] getShelfButtonBGColorByType(string $presetType)
{
    float $rgb[] = {0.6, 0.6, 0.6};
    if($presetType == "Archive") {
        $rgb[0] = 0.298;
        $rgb[1] = 0.639;
        $rgb[2] = 1;
    } else if ($presetType == "Guide") {
        $rgb[0] = 1;
        $rgb[1] = 0.565;
        $rgb[2] = 0.247;
    } else if ($presetType == "Groom") {
        $rgb[0] = 0.184;
        $rgb[1] = 0.902;
        $rgb[2] = 0.58;
    }
    return $rgb;
}
proc int matchString(string $key, string $strToMatch)
{
    string $keyLower = `tolower $key`;
    string $strLower = `tolower $strToMatch`;
    
    string $matchedStr = `match $keyLower $strLower`;
    if(size($matchedStr) != 0) 
        return 1;
    
    return 0;
}
proc findAllXGenPresets(string $item)
{
    global string $gXGenPresetViewerLayout;
    global string $gXGenLibraryWindow;
    global string $gAllXGenPresetIconTextButtons[];
    global int    $gAllXGenPresetTypeIds[];
    global string $gPresetFilePaths[]; 
    global string $gXGenPresetThumbnailSizeSlider;
    global string $gXGenPresetSearchField;
    global int    $gXGenPresetTypesOnOff[];
    
    string $filePath = $gPresetFilePaths[(int)$item];
    
    if(!endsWith($filePath, "/") && !endsWith($filePath, "\\") )
        $filePath += "/";
    
    string $xgp_files[] = `getFileList -folder $filePath -filespec "*.xgp"`;
    
    int $i;
    string $testImagePath;
    string $fileName;
    string $xgpFileFullPath;
    string $search = `textField -q -text $gXGenPresetSearchField`;
    for($i = 0; $i < size($xgp_files); $i++){
        //get filename without extension (remove ".xgp")
        $fileName = startString($xgp_files[$i], size($xgp_files[$i])-4);

        int $matched = 1;
        if(size($search)!=0) {
            $matched = matchString($search, $fileName);
        }
        
        $testImagePath = $filePath;
        $testImagePath+= $fileName + ".png";
        $realImagePath = "mayaico.png";
        //return true if file exists and is a regular file.
        if(`filetest -f $testImagePath` == 1){
            $realImagePath  = $testImagePath;
        }
        else{
            $testImagePath = $filePath + $fileName + ".jpg";
            //return true if file exists and is a regular file.
            if(`filetest -f $testImagePath` == 1){
                $realImagePath  = $testImagePath;
            }
        }
        
        $xgpFileFullPath = $filePath + $xgp_files[$i];
        string $importPresetCmd = "assignXGenPresetToObjects \"";
        $importPresetCmd += $xgpFileFullPath;
        $importPresetCmd += "\"";

        string $presetType = presetType($xgpFileFullPath);
        int $presetTypeId = presetTypeId($presetType);
        $matched *= $gXGenPresetTypesOnOff[$presetTypeId];
        float $rgb[] = getShelfButtonBGColorByType($presetType);
        int $XGenPresetIconWidth = `intSlider -q -value $gXGenPresetThumbnailSizeSlider`;
        int $XgenPresetIconHeight = $XGenPresetIconWidth + 20;
        
        shelfLayout -e -cellWidthHeight $XGenPresetIconWidth $XgenPresetIconHeight $gXGenPresetViewerLayout;
        string $shelfButton = `shelfButton
                                //-align "left"
                                -style "iconAndTextVertical"
                                -label $fileName
                                -annotation (uiRes("m_xgenLibrary.kXGenPresetAnn"))
                                -image  $realImagePath
                                -backgroundColor $rgb[0] $rgb[1] $rgb[2]
                                -scaleIcon
                                -visible $matched
                                -noDefaultPopup
                                -parent $gXGenPresetViewerLayout`;
                    
        int $IconIndex = size($gAllXGenPresetIconTextButtons);
        $gAllXGenPresetIconTextButtons[$IconIndex] = $shelfButton;
        $gAllXGenPresetTypeIds[$IconIndex] = $presetTypeId;
        string $SelectPresetFileCmd = "selectXGenPresetFileCB \"";
        $SelectPresetFileCmd += $xgpFileFullPath;
        $SelectPresetFileCmd += "\" \"";
        $SelectPresetFileCmd += $shelfButton;
        $SelectPresetFileCmd += "\"";
        shelfButton -edit
                    -doubleClickCommand $importPresetCmd
                    -command $SelectPresetFileCmd
                    $shelfButton;

        string $menuName = (uiRes("m_xgenLibrary.kXGenPresetViewerImportPopupMenu"));
        string $popMenu = `popupMenu -parent $shelfButton`;
        menuItem -parent $popMenu 
                 -label `format -s $fileName $menuName`
                 -command $importPresetCmd;
    }
    
}
proc int getSubFolders_XGenLib(string $filePath, string $subFolders[])
{
    int $subFolderCount = 0; 
    string $files[] = `getFileList -folder $filePath`;
    string $filePathHeader = $filePath;
    if(!endsWith($filePathHeader , "/") && !endsWith($filePathHeader , "\\") )
        $filePathHeader  += "/";
        
    int $i;
    string $tempPath;
    for ($i = 0; $i < size($files); $i++){
        $tempPath = $filePathHeader + $files[$i];
        //return true if file exists and is a directory.
        if(`filetest -d $tempPath`){
            $subFolders[$subFolderCount] = $files[$i];
            $subFolderCount++;
        }
    }
    
    return $subFolderCount;
}
// Add given path to the treeview, under the given parent item.
proc int addPathToTreeView_XGenLib(string $filePath, string $parentItem)
{
    global string $gPresetFilePaths[];
    global string $gXGenPresetTreeView;
    int $currentItem = size($gPresetFilePaths);
    string $itemLabel = "";
    if(size($parentItem) == 0) {
        $itemLabel = $filePath;
    } else {
        $itemLabel = getLastFolderName_XGenLib($filePath);
    }
    if(!`treeView -q -itemExists $currentItem $gXGenPresetTreeView`){
        treeView -edit -addItem $currentItem $parentItem $gXGenPresetTreeView;
        treeView -edit -displayLabel $currentItem $itemLabel $gXGenPresetTreeView;
        treeView -edit -expandItem $currentItem 0 $gXGenPresetTreeView;
        $gPresetFilePaths[$currentItem] = $filePath;
        return $currentItem;
    }
    return -1;
}
// Add subfolders of the given path to the treeview
proc int addChildrenPathToTreeView_XGenLib(string $filePath, string $parentItem)
{
    int $status = 1;
    string $folders[];
    int $folderCount = 0;
    $folderCount = getSubFolders_XGenLib($filePath, $folders);
    string $filePathHeader = $filePath;
    if(!endsWith($filePathHeader , "/") && !endsWith($filePathHeader , "\\") )
        $filePathHeader  += "/";
    
    int $i;
    string $currentPath;
    for ($i = 0; $i < $folderCount; $i++){
        $currentPath = $filePathHeader + $folders[$i];
        int $item = addPathToTreeView_XGenLib ($currentPath, $parentItem);
        if( $item == -1 ) {
            $status = 0;
            break;
        }
    }
    return $status;
}
proc int addRootItemToTreeView_XGenLib (string $filePath, int $includeSubDir)
{
    int $status = 1;
    int $item = addPathToTreeView_XGenLib($filePath, "");
    if($item != -1) {
        if($includeSubDir) {
            $status = addChildrenPathToTreeView_XGenLib($filePath, $item);
        }
    } else {
        $status = 0;
    }
    return $status;
}
proc int isFilePathAdded(string $pathContainer[], string $path)
{
    int $i;
    for($i = 0; $i < size($pathContainer); $i++){
        if($path == $pathContainer[$i])
            return 1;
    }
    return 0;
}
proc int getFilePathIndex(string $pathContainer[], string $path)
{
    int $i;
    for($i = 0; $i < size($pathContainer); $i++){
        if($path == $pathContainer[$i])
            return $i;
    }
    return -1;
}
proc int findPresetPathFromOptionVar(string $path)
{
    global string $gOptionVarNameForXGenPresetPaths;
    if(`optionVar -exists $gOptionVarNameForXGenPresetPaths`){
        string $savedPaths[] = `optionVar -q $gOptionVarNameForXGenPresetPaths`;
        return isFilePathAdded($savedPaths, $path);
    }
    return 0;
}
proc clearPresetViewer()
{
    global string $gAllXGenPresetIconTextButtons[];
    global int    $gAllXGenPresetTypeIds[];
    
    int $i;
    for ($i = 0; $i < size($gAllXGenPresetIconTextButtons); $i++){
        if(`shelfButton -q -exists $gAllXGenPresetIconTextButtons[$i]` == 1)
            deleteUI -control $gAllXGenPresetIconTextButtons[$i];
    }
    
    clear $gAllXGenPresetIconTextButtons;
    clear $gAllXGenPresetTypeIds;
}
global proc filterPresetsCB()
{
    global string $gAllXGenPresetIconTextButtons[];
    global string $gXGenPresetSearchField;
    global int    $gXGenPresetTypesOnOff[];
    global int    $gAllXGenPresetTypeIds[];
    string $search = `textField -q -text $gXGenPresetSearchField`;
    int $i;
    for($i = 0; $i < size($gAllXGenPresetIconTextButtons); $i++) {
        string $buttonName = $gAllXGenPresetIconTextButtons[$i];
        int $presetTypeId = $gAllXGenPresetTypeIds[$i];
        if($gXGenPresetTypesOnOff[$presetTypeId]) {
            if(size($search) !=0 ) {
                string $presetName = `shelfButton -q -label $gAllXGenPresetIconTextButtons[$i]`;
                int $matched = matchString($search, $presetName);
                shelfButton -e -visible $matched $buttonName;
            } else {
                shelfButton -e -visible true $buttonName;
            }
        } else {
            shelfButton -e -visible false $buttonName;
        }
    }
}
global proc filterPresetByTypeCB(string $menuItemName, int $typeId)
{
    global int    $gXGenPresetTypesOnOff[];
    
    int $onOff = `menuItem -q -checkBox $menuItemName`;
    $gXGenPresetTypesOnOff[$typeId] = $onOff;
    
    filterPresetsCB();
}
global proc changeThumbnailSizeCB()
{
    global string $gXGenPresetThumbnailSizeSlider;
    global string $gXGenPresetViewerLayout;
    
    int $XGenPresetIconWidth = `intSlider -q -value $gXGenPresetThumbnailSizeSlider`;
    int $XgenPresetIconHeight = $XGenPresetIconWidth + 20;
    
    shelfLayout -e -cellWidthHeight $XGenPresetIconWidth $XgenPresetIconHeight $gXGenPresetViewerLayout;
}
global proc int clickPresetTreeViewCB (string $item, int $onoff)
{
    global string $removePathButton;
    global string $gXGenPresetTreeView;
    
    if($onoff) {
        clearPresetViewer();
        findAllXGenPresets($item);
        string $parent = `treeView -q -itemParent $item $gXGenPresetTreeView`;
        if(size($parent) == 0) {
            button -e -enable true $removePathButton;
        } else {
            button -e -enable false $removePathButton;
        }
    } else {
        button -e -enable false $removePathButton;
    }
    
    return 1;
}
global proc doubleClickTreeViewItemCB(string $item)
{
    // Dummy double click callback.
    // So that the rename behavior can be superseded when user double clicks the item.
}
global proc expandCollapseTreeViewCB(string $item, int $expand)
{
    global string $gXGenPresetTreeView;
    global string $gPresetFilePaths[]; 
    
    if($expand) {
        // Add one more level of subfolder into the treeveiw.
        // So that the drop-down arrows for the first level subfolders of the given item can be displayed
        string $children[] = `treeView -q -children $item $gXGenPresetTreeView`;
        
        int $i;
        for( $i = 0; $i < size($children); $i++){
            string $childItem = $children[$i];
            int $isLeaf = `treeView -q -isLeaf $childItem $gXGenPresetTreeView`;
            if($isLeaf) {
                // The children items are not generated before
                string $filePath = $gPresetFilePaths[(int)$childItem]; 
                addChildrenPathToTreeView_XGenLib($filePath, $childItem);
            }
       }
   }
}
global proc addPathForXGenPresetCustomOptionsUISetup(string $parent)
{
    global int $gXGenPresetPathIncludeSubdir;
    setParent $parent;
    //  Activate the default UI template so that the layout of this
    //  option box is consistent with the layout of the rest of the
    //  application.
    //
    setUITemplate -pushTemplate DefaultTemplate;
    frameLayout -collapsable true -collapse false -label (uiRes("m_xgenLibrary.kXGenPresetAddPathGeneralOptions"));
    
    columnLayout -adjustableColumn true;
    
    checkBoxGrp -cw 2 240 
                -numberOfCheckBoxes 1
                -label1 (uiRes("m_xgenLibrary.kXGenPresetPathIncludeSubdirectories"))
                -onCommand "$gXGenPresetPathIncludeSubdir = 1;"
                -offCommand "$gXGenPresetPathIncludeSubdir = 0;";
    setParent ..;
    setParent ..;
    setUITemplate -popTemplate;
}
global proc addPathForXGenPresetButtonAction()
{
    global string $gOptionVarNameForXGenPresetPaths;
    global string $gOptionVarNameForXGenPresetPathsIncludeSubdirectories;
    global int $gXGenPresetPathIncludeSubdir;
    $gXGenPresetPathIncludeSubdir = 0;
    string $files[] = `fileDialog2 -fileMode 2
                    -fileFilter (uiRes("m_xgenLibrary.kXGenPresetBrowserFilter"))
                    -okCaption (uiRes("m_xgenLibrary.kXGenPresetBrowserOKCaption"))
                    -caption (uiRes("m_xgenLibrary.kXGenPresetBrowserCaption")) 
                    -optionsUICreate "addPathForXGenPresetCustomOptionsUISetup"`;
    if(size($files) > 0){

        if(!findPresetPathFromOptionVar($files[0])) {
            int $status = addRootItemToTreeView_XGenLib( $files[0], $gXGenPresetPathIncludeSubdir);
            if($status == 1){
                optionVar -stringValueAppend $gOptionVarNameForXGenPresetPaths $files[0];
                optionVar -intValueAppend $gOptionVarNameForXGenPresetPathsIncludeSubdirectories $gXGenPresetPathIncludeSubdir;
            }
        } else {
            string $warningInfo = (uiRes("m_xgenLibrary.kXGenAddPresetPathToTreeViewWarning"));
            warning `format -s $files[0] $warningInfo`;
        }
    }
}
proc initializePathForXGenPresetTreeView()
{
    global string $gOptionVarNameForXGenPresetPaths;
    global string $gOptionVarNameForXGenPresetPathsIncludeSubdirectories;
    global string $gPresetFilePaths[];
    clear $gPresetFilePaths;
    
    //no path and no option var by default
    //let's add the default one to option var
    if(!`optionVar -exists $gOptionVarNameForXGenPresetPaths` && !`optionVar -exists $gOptionVarNameForXGenPresetPathsIncludeSubdirectories`){
        string $runTimeDir = `getenv "MAYA_LOCATION"`;
        if(`about -mac`){
            string $mayaLocationRoot = substitute( "/Maya.app/Contents", $runTimeDir, "");
            $runTimeDir = $mayaLocationRoot;
        }
        string $XGenPresetPath = $runTimeDir + "/plug-ins/xgen/presets/library";
        optionVar -stringValueAppend $gOptionVarNameForXGenPresetPaths $XGenPresetPath;
        optionVar -intValueAppend $gOptionVarNameForXGenPresetPathsIncludeSubdirectories 0;
    }
    
    if(`optionVar -exists $gOptionVarNameForXGenPresetPaths`){
        string $savedPaths[] = `optionVar -q $gOptionVarNameForXGenPresetPaths`;
        int $includeSubDirs[] = `optionVar -q $gOptionVarNameForXGenPresetPathsIncludeSubdirectories`;
        int $i;
        for($i = 0; $i < size($savedPaths); $i++){
            //option var hold a list of paths. Add each of them to preset tree view
            addRootItemToTreeView_XGenLib( $savedPaths[$i], $includeSubDirs[$i]);
        }
    }
}
global proc removePathForXGenPresetButtonAction()
{
    global string $gOptionVarNameForXGenPresetPaths;
    global string $gOptionVarNameForXGenPresetPathsIncludeSubdirectories;
    global string $gXGenPresetTreeView;
    global string $gPresetFilePaths[]; 
    string $selectedItems[] = `treeView -q -selectItem $gXGenPresetTreeView`;
    string $savedPaths[] = `optionVar -q $gOptionVarNameForXGenPresetPaths`;
    int $i;
    for($i = 0; $i < size($selectedItems); $i++){
        string $item = $selectedItems[$i];
        string $filePath = $gPresetFilePaths[(int)$item];
        string $message = (uiRes("m_xgenLibrary.kConfirmToRemoveXGenPresetPath"));
        $message = `format -s $filePath $message`;
        string $title = (uiRes("m_xgenLibrary.kRemoveXGenPresetPathWindow"));
        string $continue = (uiRes("m_xgenLibrary.kContinueToRemoveXGenPresetPath"));
        string $cancel = (uiRes("m_xgenLibrary.kCancelToRemoveXGenPresetPath"));
        string $result = `confirmDialog 
            -title $title
            -message $message
            -button $continue
            -button $cancel
            -defaultButton $continue
            -dismissString $cancel
            -cancelButton $cancel`;

        if ($result == $cancel) 
                return;
        int $index = getFilePathIndex($savedPaths, $filePath);
        optionVar -removeFromArray $gOptionVarNameForXGenPresetPaths $index;
        optionVar -removeFromArray $gOptionVarNameForXGenPresetPathsIncludeSubdirectories $index;
        treeView -e -removeItem $item $gXGenPresetTreeView;
    }
    clearPresetViewer();
}
global proc XGenLibraryWindow()
{
    global string $gXGenPresetTreeView;
    global string $gXGenPresetViewerLayout;
    global string $gXGenLibraryWindow;
    global string $removePathButton;
    global string $gXGenPresetSearchField;
    global string $gXGenPresetThumbnailSizeSlider;
    global string $gXGenValidPresetTypes[];
    global int    $gXGenPresetTypesOnOff[];
    if (size($gXGenValidPresetTypes) == 0) {
        $gXGenValidPresetTypes = {"AttrExpr", "Guide", "Groom", "Archive"};
    }
    if (size($gXGenPresetTypesOnOff) == 0) {
        $gXGenPresetTypesOnOff = {1, 1, 1, 1};
    }
    if (!`window -exists $gXGenLibraryWindow`)
    {
        $gXGenLibraryWindow = `window -title (uiRes("m_xgenLibrary.kXGenLibraryWindowTitle"))
                               -widthHeight 600 400 -retain`;
        // Menu bar
        menuBarLayout;
        menu -tearOff true -label (uiRes("m_xgenLibrary.kShowMenuInXGenLibrary"));
            menuItem -divider true -dividerLabel (uiRes("m_xgenLibrary.kShowMenuPresetTypeDivider"));
                menuItem -label (uiRes("m_xgenLibrary.kItemAttributeExpressionBased"))
                        -checkBox $gXGenPresetTypesOnOff[0]
                        -command "filterPresetByTypeCB menuItemAttributeExpressionBased 0"
                        menuItemAttributeExpressionBased;
                menuItem -optionBox true -optionBoxIcon "xgen_preset_attribute.png";
                menuItem -label (uiRes("m_xgenLibrary.kItemGuideBased"))
                        -checkBox $gXGenPresetTypesOnOff[1]
                        -command "filterPresetByTypeCB menuItemGuideBased 1"
                        menuItemGuideBased;
                menuItem -optionBox true -optionBoxIcon "xgen_preset_guide.png";
                menuItem -label (uiRes("m_xgenLibrary.kItemGroomableSpline"))
                        -checkBox $gXGenPresetTypesOnOff[2]
                        -command "filterPresetByTypeCB menuItemGroomableSpline 2"
                        menuItemGroomableSpline;
                menuItem -optionBox true -optionBoxIcon "xgen_preset_groom.png";
                menuItem -label (uiRes("m_xgenLibrary.kItemArchiveBased"))
                        -checkBox $gXGenPresetTypesOnOff[3]
                        -command "filterPresetByTypeCB menuItemArchiveBased 3"
                        menuItemArchiveBased;
                menuItem -optionBox true -optionBoxIcon "xgen_preset_archive.png";
        menu -label (uiRes("m_xgenLibrary.kHelpMenuInXGenLibrary")) -helpMenu true;
            menuItem -label (uiRes("m_xgenLibrary.kHelpOnXGenLibWin"))
                    -command "showHelp XGenLibrary"
                    -enableCommandRepeat false;
        
        //tab layout
        string $tabLayout = `tabLayout`;

        //add XGen preset tab
        string $presetPanelLayout = `paneLayout -configuration "vertical2"`;
        
        //**left view
        string $presetLeftFormLayout = `formLayout -numberOfDivisions 100 `;
        string $headerText = `text -label (uiRes("m_xgenLibrary.kPresetLibraryPathLabel"))`;

        //Add tree view
        treeView
                 -allowMultiSelection 0
                 -allowDragAndDrop 0 
                 -allowReparenting 0 
                 -selectCommand "clickPresetTreeViewCB"
                 -itemDblClickCommand "doubleClickTreeViewItemCB"
                 -expandCollapseCommand "expandCollapseTreeViewCB"
                 presetTreeView;
        $gXGenPresetTreeView = `treeView -q -fullPathName presetTreeView`;

        //add path button
        string $addPathButton = `button -width 100 -label (uiRes("m_xgenLibrary.kPresetAddPathLabel")) -command "addPathForXGenPresetButtonAction" `;

        //remove path button
        $removePathButton = `button -width 100 -enable 0 -label (uiRes("m_xgenLibrary.kPresetRemovePathLabel")) -command "removePathForXGenPresetButtonAction" `;

        formLayout  -edit
                    -attachForm $headerText "top"  5 
                    -attachControl $gXGenPresetTreeView "top"  5 $headerText 
                    -attachForm $gXGenPresetTreeView "left" 1
                    -attachForm $gXGenPresetTreeView "right"   5
                    -attachForm $gXGenPresetTreeView "bottom"   60
                    -attachForm $removePathButton "left" 1
                    -attachForm $addPathButton "left" 1
                    -attachForm $removePathButton "right"   5
                    -attachForm $addPathButton "right"   5
                    -attachForm $removePathButton "bottom"   5
                    -attachForm $addPathButton "bottom"   30
                    $presetLeftFormLayout;

        //**right view

        setParent ..;

        string $presetRightFormLayout = `formLayout`;
        // Search field and thumbnail resize silder
        string $searchAndThumbnailLayout = `paneLayout -configuration "vertical3"`;
        text -label "";
        textField -placeholderText (uiRes("m_xgenLibrary.kXGenPresetSearchFieldPlaceholderText"))
                -textChangedCommand "filterPresetsCB" 
                searchField;
        $gXGenPresetSearchField = `textField -q -fullPathName searchField`;
        $gXGenPresetThumbnailSizeSlider = `intSlider -min 32 -max 512 -value 128 -step 1 -dragCommand "changeThumbnailSizeCB"`;
          
        setParent ..;
        $gXGenPresetViewerLayout = `shelfLayout -backgroundColor 0.169 0.169 0.169 -spacing 1`;
        formLayout  -edit
                    -attachForm $searchAndThumbnailLayout "top"  0 
                    -attachForm $searchAndThumbnailLayout "right" 0
                    -attachForm $searchAndThumbnailLayout "left" 5
                    -attachControl $gXGenPresetViewerLayout "top" 0 $searchAndThumbnailLayout 
                    -attachForm $gXGenPresetViewerLayout "right" 0
                    -attachForm $gXGenPresetViewerLayout "left" 5
                    -attachForm $gXGenPresetViewerLayout "bottom" 5
                    $presetRightFormLayout;

        tabLayout   -edit
                    -tabLabel $presetPanelLayout (uiRes("m_xgenLibrary.kXGenPresetTabLabel"))
                    $tabLayout;
        
        setParent ..;
        setParent ..;
        setParent ..;
        setParent ..;

        //get paths from option var and add these paths to Preset Tree View.
        initializePathForXGenPresetTreeView();          
    }
    else{
        // do nothing if the XGenLibraryWindow is visible
        if (`window -q -vis $gXGenLibraryWindow`) 
        {
            setFocus $gXGenLibraryWindow;
        }
    }
    
    showWindow $gXGenLibraryWindow;
}
