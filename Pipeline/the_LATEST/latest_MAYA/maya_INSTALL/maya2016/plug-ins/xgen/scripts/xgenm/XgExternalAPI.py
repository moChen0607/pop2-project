# Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
# All rights reserved.
#
# The coded instructions, statements, computer programs, and/or related
# material (collectively the "Data") in these files contain unpublished
# information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
# which is protected by U.S. and Canadian federal copyright law and by
# international treaties.
#
# The Data is provided for use exclusively by You. You have the right to use,
# modify, and incorporate this Data into other products for purposes authorized 
# by the Autodesk software license agreement, without fee.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
# DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
# INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
# OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
# LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
# DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
# LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XgExternalAPI', [dirname(__file__)])
        except ImportError:
            import _XgExternalAPI
            return _XgExternalAPI
        if fp is not None:
            try:
                _mod = imp.load_module('_XgExternalAPI', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _XgExternalAPI = swig_import_helper()
    del swig_import_helper
else:
    import _XgExternalAPI
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XgExternalAPI.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _XgExternalAPI.SwigPyIterator_value(self)
    def incr(self, n = 1): return _XgExternalAPI.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _XgExternalAPI.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _XgExternalAPI.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _XgExternalAPI.SwigPyIterator_equal(self, *args)
    def copy(self): return _XgExternalAPI.SwigPyIterator_copy(self)
    def next(self): return _XgExternalAPI.SwigPyIterator_next(self)
    def __next__(self): return _XgExternalAPI.SwigPyIterator___next__(self)
    def previous(self): return _XgExternalAPI.SwigPyIterator_previous(self)
    def advance(self, *args): return _XgExternalAPI.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _XgExternalAPI.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _XgExternalAPI.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _XgExternalAPI.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _XgExternalAPI.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _XgExternalAPI.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _XgExternalAPI.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _XgExternalAPI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _XgExternalAPI.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _XgExternalAPI.IntVector___nonzero__(self)
    def __bool__(self): return _XgExternalAPI.IntVector___bool__(self)
    def __len__(self): return _XgExternalAPI.IntVector___len__(self)
    def pop(self): return _XgExternalAPI.IntVector_pop(self)
    def __getslice__(self, *args): return _XgExternalAPI.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _XgExternalAPI.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _XgExternalAPI.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _XgExternalAPI.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _XgExternalAPI.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _XgExternalAPI.IntVector___setitem__(self, *args)
    def append(self, *args): return _XgExternalAPI.IntVector_append(self, *args)
    def empty(self): return _XgExternalAPI.IntVector_empty(self)
    def size(self): return _XgExternalAPI.IntVector_size(self)
    def clear(self): return _XgExternalAPI.IntVector_clear(self)
    def swap(self, *args): return _XgExternalAPI.IntVector_swap(self, *args)
    def get_allocator(self): return _XgExternalAPI.IntVector_get_allocator(self)
    def begin(self): return _XgExternalAPI.IntVector_begin(self)
    def end(self): return _XgExternalAPI.IntVector_end(self)
    def rbegin(self): return _XgExternalAPI.IntVector_rbegin(self)
    def rend(self): return _XgExternalAPI.IntVector_rend(self)
    def pop_back(self): return _XgExternalAPI.IntVector_pop_back(self)
    def erase(self, *args): return _XgExternalAPI.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _XgExternalAPI.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _XgExternalAPI.IntVector_push_back(self, *args)
    def front(self): return _XgExternalAPI.IntVector_front(self)
    def back(self): return _XgExternalAPI.IntVector_back(self)
    def assign(self, *args): return _XgExternalAPI.IntVector_assign(self, *args)
    def resize(self, *args): return _XgExternalAPI.IntVector_resize(self, *args)
    def insert(self, *args): return _XgExternalAPI.IntVector_insert(self, *args)
    def reserve(self, *args): return _XgExternalAPI.IntVector_reserve(self, *args)
    def capacity(self): return _XgExternalAPI.IntVector_capacity(self)
IntVector_swigregister = _XgExternalAPI.IntVector_swigregister
IntVector_swigregister(IntVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _XgExternalAPI.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _XgExternalAPI.StringVector___nonzero__(self)
    def __bool__(self): return _XgExternalAPI.StringVector___bool__(self)
    def __len__(self): return _XgExternalAPI.StringVector___len__(self)
    def pop(self): return _XgExternalAPI.StringVector_pop(self)
    def __getslice__(self, *args): return _XgExternalAPI.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _XgExternalAPI.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _XgExternalAPI.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _XgExternalAPI.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _XgExternalAPI.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _XgExternalAPI.StringVector___setitem__(self, *args)
    def append(self, *args): return _XgExternalAPI.StringVector_append(self, *args)
    def empty(self): return _XgExternalAPI.StringVector_empty(self)
    def size(self): return _XgExternalAPI.StringVector_size(self)
    def clear(self): return _XgExternalAPI.StringVector_clear(self)
    def swap(self, *args): return _XgExternalAPI.StringVector_swap(self, *args)
    def get_allocator(self): return _XgExternalAPI.StringVector_get_allocator(self)
    def begin(self): return _XgExternalAPI.StringVector_begin(self)
    def end(self): return _XgExternalAPI.StringVector_end(self)
    def rbegin(self): return _XgExternalAPI.StringVector_rbegin(self)
    def rend(self): return _XgExternalAPI.StringVector_rend(self)
    def pop_back(self): return _XgExternalAPI.StringVector_pop_back(self)
    def erase(self, *args): return _XgExternalAPI.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _XgExternalAPI.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _XgExternalAPI.StringVector_push_back(self, *args)
    def front(self): return _XgExternalAPI.StringVector_front(self)
    def back(self): return _XgExternalAPI.StringVector_back(self)
    def assign(self, *args): return _XgExternalAPI.StringVector_assign(self, *args)
    def resize(self, *args): return _XgExternalAPI.StringVector_resize(self, *args)
    def insert(self, *args): return _XgExternalAPI.StringVector_insert(self, *args)
    def reserve(self, *args): return _XgExternalAPI.StringVector_reserve(self, *args)
    def capacity(self): return _XgExternalAPI.StringVector_capacity(self)
StringVector_swigregister = _XgExternalAPI.StringVector_swigregister
StringVector_swigregister(StringVector)

class IntSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntSet, name)
    __repr__ = _swig_repr
    def iterator(self): return _XgExternalAPI.IntSet_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _XgExternalAPI.IntSet___nonzero__(self)
    def __bool__(self): return _XgExternalAPI.IntSet___bool__(self)
    def __len__(self): return _XgExternalAPI.IntSet___len__(self)
    def append(self, *args): return _XgExternalAPI.IntSet_append(self, *args)
    def __contains__(self, *args): return _XgExternalAPI.IntSet___contains__(self, *args)
    def __getitem__(self, *args): return _XgExternalAPI.IntSet___getitem__(self, *args)
    def __init__(self, *args): 
        this = _XgExternalAPI.new_IntSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _XgExternalAPI.IntSet_empty(self)
    def size(self): return _XgExternalAPI.IntSet_size(self)
    def clear(self): return _XgExternalAPI.IntSet_clear(self)
    def swap(self, *args): return _XgExternalAPI.IntSet_swap(self, *args)
    def count(self, *args): return _XgExternalAPI.IntSet_count(self, *args)
    def begin(self): return _XgExternalAPI.IntSet_begin(self)
    def end(self): return _XgExternalAPI.IntSet_end(self)
    def rbegin(self): return _XgExternalAPI.IntSet_rbegin(self)
    def rend(self): return _XgExternalAPI.IntSet_rend(self)
    def erase(self, *args): return _XgExternalAPI.IntSet_erase(self, *args)
    def find(self, *args): return _XgExternalAPI.IntSet_find(self, *args)
    def lower_bound(self, *args): return _XgExternalAPI.IntSet_lower_bound(self, *args)
    def upper_bound(self, *args): return _XgExternalAPI.IntSet_upper_bound(self, *args)
    def equal_range(self, *args): return _XgExternalAPI.IntSet_equal_range(self, *args)
    def insert(self, *args): return _XgExternalAPI.IntSet_insert(self, *args)
IntSet_swigregister = _XgExternalAPI.IntSet_swigregister
IntSet_swigregister(IntSet)

__all__ = ['createDescription','createPalette',
           'deletePalette','deleteDescription',
           'palettes','descriptions','palette','getActive','setActive',
           'objects','initInterpolation',
           'attrExists','getAttr','setAttr','setTextureAttr','attrs','addCustomAttr',
           'remCustomAttr','customAttrs','allAttrs','getAttrFromFile',
           'objNameSpace','stripNameSpace','objBaseNameSpace',
           'availableModules', 'fxModules',
           'fxModuleType','addFXModule','removeFXModule',
           'moveFXModule', 'fxModuleIncludedInPreset',
           'culledPrimPatches','culledPrimFaces','culledPrims',
           'boundGeometry','boundFaces',
           'importPalette','exportPalette','canCreateDelta','initSnapshot','createDelta','applyDelta',
           'importDescription','exportDescription','importDescriptionAsPreset','exportDescriptionAsPreset','importFXModule',
           'exportFXModule',
           'setMessageLevel','getMessageLevel','logMessage',
           'rootDir','iconDir','docsDir','version','globalRepo','localRepo', 'initConfig', 'setProjectPath','getProjectPath',
           'userRepo','fileCleanup','promoteFunc','prepForEditor','prepForAttribute', 'expandFilepath', 'findFileInXgDataPath',
           'encodeMessage', 'XGDebug','XGStats','XGWarning','XGError','XGTip']


def createDescription(*args):
  return _XgExternalAPI.createDescription(*args)
createDescription = _XgExternalAPI.createDescription

def createPalette(*args):
  return _XgExternalAPI.createPalette(*args)
createPalette = _XgExternalAPI.createPalette

def deletePalette(*args):
  return _XgExternalAPI.deletePalette(*args)
deletePalette = _XgExternalAPI.deletePalette

def deleteDescription(*args):
  return _XgExternalAPI.deleteDescription(*args)
deleteDescription = _XgExternalAPI.deleteDescription

def palettes():
  return _XgExternalAPI.palettes()
palettes = _XgExternalAPI.palettes

def palette(*args):
  return _XgExternalAPI.palette(*args)
palette = _XgExternalAPI.palette

def getActive(*args):
  return _XgExternalAPI.getActive(*args)
getActive = _XgExternalAPI.getActive

def getAttrFromFile(*args):
  return _XgExternalAPI.getAttrFromFile(*args)
getAttrFromFile = _XgExternalAPI.getAttrFromFile

def objNameSpace(*args):
  return _XgExternalAPI.objNameSpace(*args)
objNameSpace = _XgExternalAPI.objNameSpace

def objBaseNameSpace(*args):
  return _XgExternalAPI.objBaseNameSpace(*args)
objBaseNameSpace = _XgExternalAPI.objBaseNameSpace

def stripNameSpace(*args):
  return _XgExternalAPI.stripNameSpace(*args)
stripNameSpace = _XgExternalAPI.stripNameSpace

def availableModules():
  return _XgExternalAPI.availableModules()
availableModules = _XgExternalAPI.availableModules

def fxModules(*args):
  return _XgExternalAPI.fxModules(*args)
fxModules = _XgExternalAPI.fxModules

def fxModuleType(*args):
  return _XgExternalAPI.fxModuleType(*args)
fxModuleType = _XgExternalAPI.fxModuleType

def removeFXModule(*args):
  return _XgExternalAPI.removeFXModule(*args)
removeFXModule = _XgExternalAPI.removeFXModule

def moveFXModule(*args):
  return _XgExternalAPI.moveFXModule(*args)
moveFXModule = _XgExternalAPI.moveFXModule

def fxModuleIncludedInPreset(*args):
  return _XgExternalAPI.fxModuleIncludedInPreset(*args)
fxModuleIncludedInPreset = _XgExternalAPI.fxModuleIncludedInPreset

def culledPrimPatches(*args):
  return _XgExternalAPI.culledPrimPatches(*args)
culledPrimPatches = _XgExternalAPI.culledPrimPatches

def culledPrimFaces(*args):
  return _XgExternalAPI.culledPrimFaces(*args)
culledPrimFaces = _XgExternalAPI.culledPrimFaces

def culledPrims(*args):
  return _XgExternalAPI.culledPrims(*args)
culledPrims = _XgExternalAPI.culledPrims

def boundGeometry(*args):
  return _XgExternalAPI.boundGeometry(*args)
boundGeometry = _XgExternalAPI.boundGeometry

def exportPalette(*args):
  return _XgExternalAPI.exportPalette(*args)
exportPalette = _XgExternalAPI.exportPalette

def initSnapshot(*args):
  return _XgExternalAPI.initSnapshot(*args)
initSnapshot = _XgExternalAPI.initSnapshot

def canCreateDelta(*args):
  return _XgExternalAPI.canCreateDelta(*args)
canCreateDelta = _XgExternalAPI.canCreateDelta

def createDelta(*args):
  return _XgExternalAPI.createDelta(*args)
createDelta = _XgExternalAPI.createDelta

def applyDelta(*args):
  return _XgExternalAPI.applyDelta(*args)
applyDelta = _XgExternalAPI.applyDelta

def importDescription(*args):
  return _XgExternalAPI.importDescription(*args)
importDescription = _XgExternalAPI.importDescription

def importFXModule(*args):
  return _XgExternalAPI.importFXModule(*args)
importFXModule = _XgExternalAPI.importFXModule

def exportFXModule(*args):
  return _XgExternalAPI.exportFXModule(*args)
exportFXModule = _XgExternalAPI.exportFXModule

def setMessageLevel(*args):
  return _XgExternalAPI.setMessageLevel(*args)
setMessageLevel = _XgExternalAPI.setMessageLevel

def getMessageLevel(*args):
  return _XgExternalAPI.getMessageLevel(*args)
getMessageLevel = _XgExternalAPI.getMessageLevel

def logMessage(*args):
  return _XgExternalAPI.logMessage(*args)
logMessage = _XgExternalAPI.logMessage

def rootDir():
  return _XgExternalAPI.rootDir()
rootDir = _XgExternalAPI.rootDir

def iconDir():
  return _XgExternalAPI.iconDir()
iconDir = _XgExternalAPI.iconDir

def version():
  return _XgExternalAPI.version()
version = _XgExternalAPI.version

def globalRepo():
  return _XgExternalAPI.globalRepo()
globalRepo = _XgExternalAPI.globalRepo

def localRepo():
  return _XgExternalAPI.localRepo()
localRepo = _XgExternalAPI.localRepo

def userRepo():
  return _XgExternalAPI.userRepo()
userRepo = _XgExternalAPI.userRepo

def docsDir():
  return _XgExternalAPI.docsDir()
docsDir = _XgExternalAPI.docsDir

def fileCleanup(*args):
  return _XgExternalAPI.fileCleanup(*args)
fileCleanup = _XgExternalAPI.fileCleanup

def promoteFunc():
  return _XgExternalAPI.promoteFunc()
promoteFunc = _XgExternalAPI.promoteFunc

def prepForEditor(*args):
  return _XgExternalAPI.prepForEditor(*args)
prepForEditor = _XgExternalAPI.prepForEditor

def prepForAttribute(*args):
  return _XgExternalAPI.prepForAttribute(*args)
prepForAttribute = _XgExternalAPI.prepForAttribute

def initConfig(*args):
  return _XgExternalAPI.initConfig(*args)
initConfig = _XgExternalAPI.initConfig

def setProjectPath(*args):
  return _XgExternalAPI.setProjectPath(*args)
setProjectPath = _XgExternalAPI.setProjectPath

def getProjectPath():
  return _XgExternalAPI.getProjectPath()
getProjectPath = _XgExternalAPI.getProjectPath

#I18N_TODO
import locale
def encodeMessage(mesg):
    # if string is ascii, pass it along as ascii
    if isinstance(mesg, str):
        return str(mesg)
    # if string is unicode, decode it into proper format depending maya codepage
    else:
        # for a list of encodings check the python encode page:
        # http://docs.python.org/2/library/codecs.html#standard-encodings
        (category, loc) = locale.getlocale()
        return mesg.encode(loc)

import traceback
def XGDebug( level, mesg ):
    """Log a debug message."""
    try:
        file, line = traceback.extract_stack()[-2][0:2]
    except:
        traceback.print_exc()
        file, line = 'Unknown file', 0
    logMessage("debug",level,str(mesg),file,line)


def XGStats( level, mesg ):
    """Log a stats message."""
    try:
        file, line = traceback.extract_stack()[-2][0:2]
    except:
        traceback.print_exc()
        file, line = 'Unknown file', 0
    logMessage("stats",level,str(mesg),file,line)


def XGWarning( level, mesg ):
    """Log a warning message."""
    try:
        file, line = traceback.extract_stack()[-2][0:2]
    except:
        traceback.print_exc()
        file, line = 'Unknown file', 0
    logMessage("warning",level,encodeMessage(mesg),file,line)


def XGError( mesg ):
    """Log an error message."""
    try:
        file, line = traceback.extract_stack()[-2][0:2]
    except:
        traceback.print_exc()
        file, line = 'Unknown file', 0
    logMessage("error",0,encodeMessage(mesg),file,line)

def XGTip( level, mesg ):
    """Log an tip message."""
    try:
        file, line = traceback.extract_stack()[-2][0:2]
    except:
        traceback.print_exc()
        file, line = 'Unknown file', 0
    logMessage("tip",level,encodeMessage(mesg),file,line)



def descriptions(palette = ""):
  return _XgExternalAPI.descriptions(palette)
descriptions = _XgExternalAPI.descriptions

def setActive(*args):
  return _XgExternalAPI.setActive(*args)
setActive = _XgExternalAPI.setActive

def objects(*args):
  return _XgExternalAPI.objects(*args)
objects = _XgExternalAPI.objects

def initInterpolation(*args):
  return _XgExternalAPI.initInterpolation(*args)
initInterpolation = _XgExternalAPI.initInterpolation

def attrExists(*args):
  return _XgExternalAPI.attrExists(*args)
attrExists = _XgExternalAPI.attrExists

def getAttr(*args):
  return _XgExternalAPI.getAttr(*args)
getAttr = _XgExternalAPI.getAttr

def setAttr(*args):
  return _XgExternalAPI.setAttr(*args)
setAttr = _XgExternalAPI.setAttr

def setTextureAttr(*args):
  return _XgExternalAPI.setTextureAttr(*args)
setTextureAttr = _XgExternalAPI.setTextureAttr

def attrs(*args):
  return _XgExternalAPI.attrs(*args)
attrs = _XgExternalAPI.attrs

def addCustomAttr(*args):
  return _XgExternalAPI.addCustomAttr(*args)
addCustomAttr = _XgExternalAPI.addCustomAttr

def remCustomAttr(*args):
  return _XgExternalAPI.remCustomAttr(*args)
remCustomAttr = _XgExternalAPI.remCustomAttr

def customAttrs(*args):
  return _XgExternalAPI.customAttrs(*args)
customAttrs = _XgExternalAPI.customAttrs

def allAttrs(*args):
  return _XgExternalAPI.allAttrs(*args)
allAttrs = _XgExternalAPI.allAttrs

def addFXModule(*args):
  return _XgExternalAPI.addFXModule(*args)
addFXModule = _XgExternalAPI.addFXModule

def boundFaces(*args):
  return _XgExternalAPI.boundFaces(*args)
boundFaces = _XgExternalAPI.boundFaces

def importPalette(*args):
  return _XgExternalAPI.importPalette(*args)
importPalette = _XgExternalAPI.importPalette

def exportDescription(*args):
  return _XgExternalAPI.exportDescription(*args)
exportDescription = _XgExternalAPI.exportDescription

def importDescriptionAsPreset(*args):
  return _XgExternalAPI.importDescriptionAsPreset(*args)
importDescriptionAsPreset = _XgExternalAPI.importDescriptionAsPreset

def exportDescriptionAsPreset(*args):
  return _XgExternalAPI.exportDescriptionAsPreset(*args)
exportDescriptionAsPreset = _XgExternalAPI.exportDescriptionAsPreset

def expandFilepath(*args):
  return _XgExternalAPI.expandFilepath(*args)
expandFilepath = _XgExternalAPI.expandFilepath

def findFileInXgDataPath(*args):
  return _XgExternalAPI.findFileInXgDataPath(*args)
findFileInXgDataPath = _XgExternalAPI.findFileInXgDataPath

