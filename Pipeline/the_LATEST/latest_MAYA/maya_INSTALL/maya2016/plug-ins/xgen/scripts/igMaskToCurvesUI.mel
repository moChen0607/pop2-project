// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

/**
 * @file igMaskToCurvesUI.mel
 * @brief UI for creating maya curves from the prims within the mask.
 *
 * <b>CONFIDENTIAL INFORMATION: This software is the confidential and
 * proprietary information of Walt Disney Animation Studios ("WDAS").
 * This software may not be used, disclosed, reproduced or distributed
 * for any purpose without prior written authorization and license
 * from WDAS. Reproduction of any section of this software must include
 * this legend and all copyright notices.
 * Copyright Disney Enterprises, Inc. All rights reserved.</b>
 *
 * @author Thomas V Thompson II
 *
 * @version tthompso  07/27/07  Initial Version
 */


/** Create maya curves from the primitives within the current mask. */
global proc igMaskToCurvesUI()
{    
    if (`window -exists igMaskToCurvesWindow`)
        deleteUI -window  igMaskToCurvesWindow;

    window -sizeable false -minimizeButton false -maximizeButton false
	    -menuBar false -width 600 -height 100
            -title (uiRes("m_igMaskToCurvesUI.kMaskToCurves")) igMaskToCurvesWindow;

    columnLayout -adj on -rs 10;
    {
        textFieldGrp -label (uiRes("m_igMaskToCurvesUI.kCurvesGroup")) -tx "igroom_curves" -adj 2
            -ann (uiRes("m_igMaskToCurvesUI.kCurvesGroupAnnot"))
            igCurvesGroupField;

        floatSliderGrp -label (uiRes("m_igMaskToCurvesUI.kThreshold")) -f true -adj 3 -cw 2 70
            -min 0.0 -max 1.0 -pre 4 -step 0.1 -v 0.5
            -ann (uiRes("m_igMaskToCurvesUI.kThresholdAnnot"))
            igCurvesThresholdField;
        
        rowLayout -numberOfColumns 3 -columnWidth3 130 130 130
            -columnAlign3 "center" "center" "center"
            -adjustableColumn3 1;
        {
            // Control over the dialog
            text -label "";
            button -label (uiRes("m_igMaskToCurvesUI.kCreate")) -w 130
                -ann (uiRes("m_igMaskToCurvesUI.kCreateAnnot"))
                -c "igMaskToCurves;deleteUI igMaskToCurvesWindow;";
            button -label (uiRes("m_igMaskToCurvesUI.kCancel")) -w 130 
                -ann (uiRes("m_igMaskToCurvesUI.kCancelAnnot"))
                -c "deleteUI igMaskToCurvesWindow";
            setParent ..;
        }

        setParent ..;
    }

    showWindow igMaskToCurvesWindow;

    // Dont let the window pop-up the wrong size
    window -e -width 600 igMaskToCurvesWindow;
    window -e -height 100 igMaskToCurvesWindow;
}


global proc igMaskToCurves()
{
    global string $igNullDescriptionTag;
    
    string $group = `textFieldGrp -q -tx igCurvesGroupField`;
    float $threshold = `floatSliderGrp -q -v igCurvesThresholdField`;

    string $desc = igCurrentDescription();
    if ( $desc != $igNullDescriptionTag && $desc != "" ) {
        waitCursor -state on;
        // Create the group if it is missing
        if (!`objExists $group`) {
            group -empty -n $group;
        }
        // Get the primitives CVs into a file
        iGroom -mc $threshold -d $desc;
        // Create the maya curves
        $fileId = `fopen "/tmp/igroom.prims" "r"`;
        string $nextLine = `fgetline $fileId`;
        string $points[];
        while ( size( $nextLine ) > 0 ) {
            string $cmd = "curve -d 2 ";
            $num = `tokenize $nextLine ":" $points`;
            for ( $i=0; $i<$num; $i++ ) {
                $cmd += "-p "+$points[$i]+" ";
            }
            string $curve = eval($cmd);
            parent -r $curve $group;
            $nextLine = `fgetline $fileId`;
        }
        fclose $fileId;

        waitCursor -state off;
    }
}
