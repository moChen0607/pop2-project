// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

/**
 * @file xgmCopyCurvesTool.mel
 * @brief Contains the XgmCopyCurvesTool MEL procedure.
 *
 * <b>CONFIDENTIAL INFORMATION: This software is the confidential and
 * proprietary information of Walt Disney Animation Studios ("WDAS").
 * This software may not be used, disclosed, reproduced or distributed
 * for any purpose without prior written authorization and license
 * from WDAS. Reproduction of any section of this software must include
 * this legend and all copyright notices.
 * Copyright Disney Enterprises, Inc. All rights reserved.</b>
 *
 * @author Thomas V Thompson II
 *
 * @version Created 08/14/07
 */


/**
 * User interface for copying and pasting curves.
 */
global proc xgmCopyCurvesTool(string $parent)
{
    // Create a rowLayout to store the three command buttons.
    rowLayout -parent $parent
        -nc 2 -cat 1 "left" 1 -cat 2 "right" 1
        -cw 1 115 -cw 2 115;
    {
        // Create a button to copy the selected curve.
        button -l (uiRes("m_xgmCopyCurvesTool.kCopy")) -w 115 -al "center"
            -ann (uiRes("m_xgmCopyCurvesTool.kCopyAnn"))
            -c "xgmCopyCurves(\"copy\")";
        
        // Create a button to paste over the selected curves.
        button -l (uiRes("m_xgmCopyCurvesTool.kPaste")) -w 115 -al "center"
            -ann (uiRes("m_xgmCopyCurvesTool.kPasteAnn"))
            -c "xgmCopyCurves(\"paste\")";
        
        setParent ..;
    }
}


/**
 * Procedure to copy and paste curves.
 */
global proc xgmCopyCurves( string $state )
{
    global string $xgmCopyCurve;
    global string $xgmGuideAttrList[];
    int $attrSet[];
    float $attrVal[];
    int $numAttrs = size($xgmGuideAttrList), $i;
    
    if ( $state == "copy" ) {
        // Only copy one thing, the first nurbs curve in the selection
        string $sel[] = `ls -sl -dag -type nurbsCurve`;
        if ( size($sel) == 0 ) {
            warning((uiRes("m_xgmCopyCurvesTool.kNoCurvesSelected1")));
            $xgmCopyCurve="";
            return;
        }
        string $oneXform[] =
            `listRelatives -p -path -type "transform" $sel[0]`;
        $xgmCopyCurve = $oneXform[0];
    } else if ( $state == "paste" ) {
        if ( $xgmCopyCurve == "" ) {
            warning((uiRes("m_xgmCopyCurvesTool.kNothingCopiedSoNothingToPaste")));
            return;
        }
        // Grab selected curves
        string $sel[] = `ls -sl -dag -type nurbsCurve`;
        if ( size($sel) == 0 ) {
            warning((uiRes("m_xgmCopyCurvesTool.kNoCurvesSelected2")));
            return;
        }
        // Grab information from the "copy" curve
        $degree = `getAttr ($xgmCopyCurve+".degree")`;
        $spans = `getAttr ($xgmCopyCurve+".spans")`;
        $numCVs = $degree + $spans;
        // Get optional attributes to copy
        for ( $i=0; $i<$numAttrs; $i++ ) {
            if ( `attributeQuery -ex -node $xgmCopyCurve $xgmGuideAttrList[$i]` ) {
                $attrSet[$i] = 1;
                $attrVal[$i] = `getAttr ($xgmCopyCurve+"."+$xgmGuideAttrList[$i])`;
            } else {
                $attrSet[$i] = 0;
            }
        }
        // Rebuild all selected curves to match up with copied curve
        string $crvs[] = `listRelatives -p -path -type "transform" $sel`;
        float $base[] = `getAttr ($xgmCopyCurve+".cv[0]")`;
        for ( $crv in $crvs ) {
            rebuildCurve -rt 2 -kr 2 -fr false -d $degree $crv $xgmCopyCurve;
            // Move all the CVs of selected curves to match copied curve
            int $i;
            float $base2[] = `getAttr ($crv+".cv[0]")`;
            for ( $i=1; $i<$numCVs; $i++ ) {
                float $res[] = `getAttr ($xgmCopyCurve+".cv["+$i+"]")`;
                $res[0] = $res[0] - $base[0] + $base2[0];
                $res[1] = $res[1] - $base[1] + $base2[1];
                $res[2] = $res[2] - $base[2] + $base2[2];
                move -a $res[0] $res[1] $res[2] ($crv+".cv["+$i+"]");
            }
            // Add optional attributes
            for ( $i=0; $i<$numAttrs; $i++ ) {
                if ( $attrSet[$i] ) {
                    if ( `attributeQuery -ex -node $crv $xgmGuideAttrList[$i]` ) {
                        setAttr ($crv+"."+$xgmGuideAttrList[$i]) $attrVal[$i];
                    } else {
                        addAttr -ln $xgmGuideAttrList[$i] -at double
                            -dv $attrVal[$i] -k true $crv;
                    }
                }
            }
        }
    } else {
      	string $fmt = (uiRes("m_xgmCopyCurvesTool.kUnknownState"));
        warning( `format -s $state $fmt` );
    }
}
