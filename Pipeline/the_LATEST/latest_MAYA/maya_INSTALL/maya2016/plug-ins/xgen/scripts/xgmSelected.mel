// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

/**
 * @file xgmSelected.mel
 * @brief Contains utility mel functions for working with selection
 *
 * <b>CONFIDENTIAL INFORMATION: This software is the confidential and
 * proprietary information of Walt Disney Animation Studios ("WDAS").
 * This software may not be used, disclosed, reproduced or distributed
 * for any purpose without prior written authorization and license
 * from WDAS. Reproduction of any section of this software must include
 * this legend and all copyright notices.
 * Copyright Disney Enterprises, Inc. All rights reserved.</b>
 *
 * @author Stephen D. Bowline
 * @author Thomas V Thompson II
 * @author Ying Liu
 *
 * @version Created 01/18/05
 */

/**
 * Return selected Maya curves.
 *
 * @param $components  If true, then find the curve from selected CVs
 */
global proc string[] xgmSelectedCurves( int $components  )
{
    // object mode selections
    string $cList[] = `ls -sl -ni -dag -type nurbsCurve`;

    // component mode selections
    if ( $components  ) {
        string $sel[] = `ls -sl`;
        for ( $obj in $sel ) {
            string $buffer[];
            int $numTokens = `tokenize $obj ".[:]" $buffer`;	
            string $curve;
            if( $numTokens > 2 ) {
                string $sh[] = `ls -dag -type nurbsCurve $buffer[0]`;
                if ( $sh[0] != "" )
                appendStringArray( $cList, $sh, 1 );
            }
        }
    }

    $cList = stringArrayRemoveDuplicates($cList);

    return $cList;
}


/**
 * Returns unique item array of guide shapes found anywhere in the
 * selection hierarchy. optionally includes guides (shapes) associated
 * with component type selections, e.g. :
 *
 *   hl_head158_lewsAA_hairXGen_lewsAA_1_xgmGuide24.vtx[4:5]
 */
global proc string[] xgmSelectedGuideShapes( string $type, int $components  )
{
    // no specified type means all possible types
    string $typeStr = xgmBuildGuideTypeArgList( $type );

    // object mode selections
    string $cmd = "ls -sl -dag " + $typeStr;
    string $gList[] = `eval($cmd)`;

    // component mode selections
    if ( $components  ) {
        string $sel[] = `ls -sl`;
        for ( $obj in $sel ) {
            string $buffer[];
            int $numTokens = `tokenize $obj ".[:]" $buffer`;	
            string $curve;
            if ( $numTokens > 2 ) {
                $cmd = "ls -dag " + $typeStr + $buffer[0];
                string $sh[] = `eval($cmd)`;
                if ( $sh[0] != "" )
                    appendStringArray( $gList, $sh, 1 );
            }
        }
    }

    $gList = stringArrayRemoveDuplicates($gList);

    // get rid of tweak versions or anything not connected to a makeGuide
    string $gList2[];
    int $i=0;

    for ( $guide in $gList ) {
        string $makeGuide = `xgmGuideMakeGuide $guide`;
        if ( $makeGuide != "" ) {
            $gList2[$i] = $guide;
            $i++;
        }
    }

    return $gList2;
}


/**
 * Returns unique item array of guides (xforms) found anywhere in the
 * selection hierarchy. optionally includes guides (shapes) associated
 * with component type selections, e.g. :
 *
 *   hl_head158_lewsAA_hairXGen_lewsAA_1_xgmGuide24.vtx[4:5]
 */
global proc string[] xgmSelectedGuides( string $type, int $components )
{
    string $xforms[];

    string $shapes[] = xgmSelectedGuideShapes( $type, $components );
    string $shape;
    int    $i=0;
    for ( $shape in $shapes ) {
        string $oneXform[] = `listRelatives -pa -p -type "transform" $shape`;
        $xforms[$i++] = $oneXform[0];
    }

    return $xforms;
}


/**
 * This function will construct three arrays from the currently selected
 * Spline Primitive guides: an array of the guide shape nodes, an array of
 * indices that start the CV selection list, and an array of indices that
 * end the selection list.
 *
 * NOTE: This may only work with contiguously seleted CVs!!!
 *
 * @param $guideArray  The array of selected guide shapes
 * @param $startArray  An array of indices, one index per guide, of start CVs
 * @param $endtArray   An array of indices, one index per guide, of end CVs
 */
global proc xgmSelectedSplineGuideComponents( string $guideArray[],
                                              int    $startArray[],
                                              int    $endArray[] )
{
    int    $i=0;
    string $sel[] = `ls -sl`;

    for ( $obj in $sel ) {
        string $buffer[];
        int $numTokens = `tokenize $obj ".[:]" $buffer`;
        if ( $numTokens > 2 ) {
            $guide = xgmGuideShape( $buffer[0], "Spline" );
            if ( $guide != "" ) {
                $guideArray[$i] = $guide;
                $startArray[$i] = (int) $buffer[2];
                $endArray[$i++]   = (int) $buffer[$numTokens-1];
            }
        }
    }
}
