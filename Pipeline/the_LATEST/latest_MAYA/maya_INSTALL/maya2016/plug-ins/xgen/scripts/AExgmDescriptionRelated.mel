// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

// FILE: AExgmDescriptionTemplate.mel
// INPUT: string (node name)
// RETURN:	string[] (list of related nodes, with the node whose
//			tab you want to be opened duplicated at the
//			end of the array)
//

global proc string[] AExgmDescriptionRelated( string $node )
{
	string $retval[];

	$retval[0] = $node;

	// Get the default tabs for this node

	string $relNodes[] = `defaultNavigation -ren -d $node`;
	string $preferredNode = `defaultNavigation -dwn -d $node`;

	for ($relNode in $relNodes) {
		$retval[size($retval)] = $relNode;
	}

	// Get the connections to the mesh node

	string $plugs[] = `listConnections -s false -sh true -d true $node`;

	// Look for a connected shading engine - this is
	// the jumping off point to get to the rendering nodes
	// from a selected surface

	for( $plug in $plugs ) {
		string $nType = `nodeType $plug`;
		if ( $nType == "shadingEngine" ) {

			// Get the shader that's connected to this
			// shading engine
			
			string $mayaShaders[] =
					`listConnections ( $plug + ".surfaceShader" )`;

			string $customShaders[];
			string $customShadersArray[] = `callbacks -executeCallbacks -hook "allConnectedShaders" $plug`;
			string $customShadersAsString;
			for( $customShadersAsString in $customShadersArray )
			{
				string $tokens[];
				tokenize($customShadersAsString, ":", $tokens);
				appendStringArray($customShaders, $tokens, size($tokens));
			}
			
			// If the connection is null, then there is no
			// shading group attached to this node - simply
			// return the node itself.

			int $mayaSize = size($mayaShaders);
			int $customShadersSize = size($customShaders);
			if ($mayaSize == 0 && $customShadersSize == 0) {
				$retval[size($retval)] = $plug;
			} else {
				appendStringArray($retval, $mayaShaders, $mayaSize);
				appendStringArray($retval, $customShaders, $customShadersSize);
			}
		}
	}

	if( $preferredNode == "" ) {
		$preferredNode = $node;
	}
	$retval[size($retval)] = $preferredNode;

	return $retval;
}

