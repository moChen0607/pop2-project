
//**************************************************************************/
// Copyright (c) 2012 Autodesk, Inc.
// All rights reserved.
//
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information written by Autodesk, Inc., and are
// protected by Federal copyright law. They may not be disclosed to third
// parties or copied or duplicated in any form, in whole or in part, without
// the prior written consent of Autodesk, Inc.
//**************************************************************************/


/** Export region maps */
global proc igExportRegionUI()
{
    global string $igNullDescriptionTag;

    if (`window -exists igExportRegionWindow`)
        deleteUI -window  igExportRegionWindow;

    window -sizeable false -minimizeButton false -maximizeButton false
	    -menuBar false -width 600 -height 230
            -title (uiRes("m_igExportRegionUI.kIgroomExportRegionMap")) igExportRegionWindow;

    columnLayout -adj on -rs 10;
    {
        formLayout igExportRegionDescLayout;
        {
            text -label (uiRes("m_igExportRegionUI.kDescription")) igExportRegionDescLabel;
            igCreateIconPopup( "igExportRegionDescMenu",
                               (uiRes("m_igExportRegionUI.kDescToExport")),
                               (uiRes("m_igExportRegionUI.kDescToExportAnnot")),
                               "" );
            string $descs[] = igAllDescriptions();
            for ( $desc in $descs ) {
                igAddDeepMenuItem( $desc, "igExportRegionDescMenu",
                                   "igExportRegionDescMenuCB" );
            }
            string $cdesc = igCurrentDescription();
            if ( $cdesc == "" ) 
                $cdesc = $igNullDescriptionTag;
            textField -edit -tx $cdesc igExportRegionDescMenuValue;
                
            setParent ..;
        }
        // Create a text field for the filename.
        $browser = "igFileBrowser \"iGroom Export\" igExportRegionPathField 1";
        textFieldButtonGrp -l (uiRes("m_igExportRegionUI.kMapPath"))
            -bl (uiRes("m_igExportRegionUI.kBrowse")) -bc $browser -cal 1 right -adj 2
            -ann (uiRes("m_igExportRegionUI.kBrowseAnnot"))
            igExportRegionPathField;

        floatSliderGrp -l (uiRes("m_igExportRegionUI.kTexelsPerUnit")) -f true -adj 3 -cw 2 70
            -min 0.001 -max 100.0 -fmx 10000.0 -pre 3 -step 0.001
            -ann (uiRes("m_igExportRegionUI.kTexelsAnnot"))
            igExportRegionTexelsPerUnitField;

        checkBoxGrp -l (uiRes("m_igExportRegionUI.kSyncToXgen")) -ncb 1 -l1 " " -v1 off
            -cc igSyncButtonCB
            -ann (uiRes("m_igExportRegionUI.kSyncAnnot"))
            igXGenSyncField;

        textFieldGrp -l (uiRes("m_igExportRegionUI.kXgenDescription")) -adj 2 -en false
            -ann (uiRes("m_igExportRegionUI.kXgenDescAnnot"))
            igXGenDescriptionField;

        rowLayout -numberOfColumns 3 -columnWidth3 130 130 130
            -columnAlign3 "center" "center" "center"
            -adjustableColumn3 1;
        {
            // Control over the dialog
            text -l "";
            button -label (uiRes("m_igExportRegionUI.kExport")) -w 130 
				-ann (uiRes("m_igExportRegionUI.kExportAnnot"))
                -c "igExportRegion; deleteUI igExportRegionWindow";
            button -label (uiRes("m_igExportRegionUI.kCancel")) -w 130 
                -ann (uiRes("m_igExportRegionUI.kCancelAnnot"))
                -c "deleteUI igExportRegionWindow";
            setParent ..;
        }

        // Attach the new layouts.
        formLayout -edit
            -attachForm igExportRegionDescLabel left 63
            -attachForm igExportRegionDescLabel top 8
            -attachNone igExportRegionDescLabel right
            -attachNone igExportRegionDescLabel bottom
            
            -attachForm    igExportRegionDescMenuValue top 8
            -attachControl igExportRegionDescMenuValue left 10 igExportRegionDescLabel
            -attachNone    igExportRegionDescMenuValue right
            -attachNone    igExportRegionDescMenuValue bottom
            
            -attachForm    igExportRegionDescMenuImage top 8
            -attachControl igExportRegionDescMenuImage left 3 igExportRegionDescMenuValue
            -attachNone    igExportRegionDescMenuImage right
            -attachNone    igExportRegionDescMenuImage bottom

            igExportRegionDescLayout;
        
        setParent ..;
    }

    igExportRegionFillFields;
    showWindow igExportRegionWindow;

    // Dont let the window pop-up the wrong size
    window -e -width 600 igExportRegionWindow;
    window -e -height 230 igExportRegionWindow;
}


global proc igExportRegionFillFields()
{
    global string $igBasepath;
    string $path = "";
    string $xdesc = "";
    float $tpu = 1.0;
    
    string $desc = `textField -q -tx igExportRegionDescMenuValue`;
    if ( `attributeQuery -ex -node $desc "mapPath"` ) {
        $path = `getAttr ($desc+".mapPath")`;
        $path = strip($path);
    }
    if ( `attributeQuery -ex -node $desc "xgenDesc"` ) {
        $xdesc = `getAttr ($desc+".xgenDesc")`;
    }
    if ( `attributeQuery -ex -node $desc "texelsPerUnit"` ) {
        $tpu = `getAttr ($desc+".texelsPerUnit")`;        
    } else if ( `attributeQuery -ex -node $desc "texelSize"` ) {
        $tpu = 1.0 / `getAttr ($desc+".texelSize")`;        
    }

    // Get the base for the path from the descriptions path. We will always
    // grab the first entry when multiples are present.
    $igBasepath = igOutputDir( $desc );
    if ( $path == "" ) {
        $path = $igBasepath + "igroom";
    }
    
    textFieldButtonGrp -e -tx $path igExportRegionPathField;
    floatSliderGrp -e -v $tpu igExportRegionTexelsPerUnitField;
    checkBoxGrp -e -v1 off igXGenSyncField;
    textFieldGrp -e -en false -tx $xdesc igXGenDescriptionField;
}


/** Allow editing multiple igDescriptions obejcts */ 
global proc igExportRegionDescMenuCB( string $desc, string $menu )
{
    string $menuValue = $menu + "Value";
    if (`textField -exists $menuValue`) {
        textField -e -tx $desc $menuValue;
    }
    igExportRegionFillFields;
}


global proc igSyncButtonCB()
{
    int $state = `checkBoxGrp -q -v1 igXGenSyncField`;
    if ( $state == on ) {
        textFieldGrp -e -en true igXGenDescriptionField;
    } else {
        textFieldGrp -e -en false igXGenDescriptionField;
    }
}


global proc igExportRegion()
{
    global string $igBasepath;
    global string $igNullDescriptionTag;

    string $desc = `textField -q -tx igExportRegionDescMenuValue`;

    if ( $desc != $igNullDescriptionTag && $desc != "" ) {
        string $path = `textFieldButtonGrp -q -tx igExportRegionPathField`;
        float $tpu = `floatSliderGrp -q -v igExportRegionTexelsPerUnitField`;
        string $xdesc = `textFieldGrp -q -tx igXGenDescriptionField`;
        int $xsync = `checkBoxGrp -q -v1 igXGenSyncField`;        

        waitCursor -state on;
        igExportRegion2( $desc, $path, $tpu, $xdesc, $xsync );
        waitCursor -state off;
    }
}

global proc igExportRegion2( string $desc, string $path, float $tpu, string $xdesc, int $xsync )
{
    global string $igBasepath;
    global string $igNullDescriptionTag;
    
    if ( $desc != $igNullDescriptionTag && $desc != "" ) {
        iGroom -xr $path -tpu $tpu -d $desc;

        // Get path to be relative to basepath
        $path = strip($path);
        if ( `startsWith $path "/"`){
            if ( `startsWith $igBasepath "./"`){
                string $pwd = `getenv "PWD"` + "/";
                $igBasepath = $pwd + $igBasepath;
                $igBasepath = `substitute "/./" $igBasepath "/"`;
            }
        }
        if ( `startsWith $path $igBasepath` ) {
            $path = `substitute $igBasepath $path ""`;
        }

        $path = igValidPath($path);

        // Remember what was entered before via attributes on the description
        if ( !`attributeQuery -ex -node $desc "mapPath"` ) {
            addAttr -ln "mapPath" -sn "mapPath" -dt "string" $desc;
        }
        if ( !`attributeQuery -ex -node $desc "xgenDesc"` ) {
            addAttr -ln "xgenDesc" -sn "xgenDesc" -dt "string" $desc;
        }
        if ( !`attributeQuery -ex -node $desc "texelsPerUnit"` ) {
            addAttr -ln "texelsPerUnit" -sn "texelsPerUnit" -at "float" $desc;
        }
        setAttr -type "string" ($desc+".mapPath") $path;
        setAttr -type "string" ($desc+".xgenDesc") $xdesc;
        setAttr ($desc+".texelsPerUnit") $tpu;

        // Remove old texelSize attribute
        if ( `attributeQuery -ex -node $desc "texelSize"` ) {
            deleteAttr -at "texelSize" $desc;
        }

        // Sync xgen if requested
        if ( $xsync == on ) {
            igSyncRegionToXgen( $xdesc, $path );
        }
    }
}


global proc igSyncRegionToXgen( string $xdesc, string $path )
{
    string $xpal = python("xg.palette(\""+$xdesc+"\")");
    string $prim = python("xg.getActive(\""+$xpal+"\",\""+$xdesc+"\",\"Primitive\")");

    xgmSetAttr -a "regionMap" -v $path -p $xpal -d $xdesc -o $prim;

    string $pvr = python("xg.getActive(\""+$xpal+"\",\""+$xdesc+"\",\"Previewer\")");

    string $value = "map('"+$path+"/region')";
    xgmSetAttr -a "color" -v $value -p $xpal -d $xdesc -o $pvr;

    python("xgui.refreshDescriptionEditor()");
}
