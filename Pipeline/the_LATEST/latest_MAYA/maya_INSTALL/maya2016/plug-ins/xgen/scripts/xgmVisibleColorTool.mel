// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

/**
 * @file xgmVisibleColorTool.mel
 * @brief Contains the XgmVisibileColorTool MEL procedure.
 *
 * <b>CONFIDENTIAL INFORMATION: This software is the confidential and
 * proprietary information of Walt Disney Animation Studios ("WDAS").
 * This software may not be used, disclosed, reproduced or distributed
 * for any purpose without prior written authorization and license
 * from WDAS. Reproduction of any section of this software must include
 * this legend and all copyright notices.
 * Copyright Disney Enterprises, Inc. All rights reserved.</b>
 *
 * @author Thomas V Thompson II
 *
 * @version Created 03/08/07
 */

/**
 * User interface for controling the color and visibility.
 */
global proc xgmVisibleColorTool(string $parent)
{
    formLayout xgmVisibleColorToolForm;
    {
        columnLayout -adjustableColumn 1;
        {
            rowLayout
                -numberOfColumns 2
                -columnWidth 1 100
                -columnWidth 2 100;
            {
                button -l (uiRes("m_xgmVisibleColorTool.kAllVisible")) -w 100 -h 25
                    -c "xgmSetAllVisibility(1)";
                button -l (uiRes("m_xgmVisibleColorTool.kAllInvis")) -w 100 -h 25
                    -c "xgmSetAllVisibility(0)";
                setParent ..;
            }
            
            rowLayout
                -numberOfColumns 2
                -columnWidth 1 100
                -columnWidth 2 100;
            {
                button -l (uiRes("m_xgmVisibleColorTool.kAssnAzure")) -w 100 -h 25
                    -c "xgmAssignShader(\"xgAzure\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kAssnAzureAnn"));
                button -l (uiRes("m_xgmVisibleColorTool.kHideShow1")) -w 100 -h 25
                    -c "xgmToggleVisibility(\"xgAzureLayer\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kHideShowAnn1"));
                setParent ..;
            }
            
            rowLayout
                -numberOfColumns 2
                -columnWidth 1 100
                -columnWidth 2 100;
            {
                button -l (uiRes("m_xgmVisibleColorTool.kAssnBlue")) -w 100 -h 25
                    -c "xgmAssignShader(\"xgBlue\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kAssnBlueAnn"));
                button -l (uiRes("m_xgmVisibleColorTool.kHideShow2")) -w 100 -h 25
                    -c "xgmToggleVisibility(\"xgBlueLayer\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kHideShowAnn2"));
                setParent ..;
            }
            
            rowLayout
                -numberOfColumns 2
                -columnWidth 1 100
                -columnWidth 2 100;
            {
                button -l (uiRes("m_xgmVisibleColorTool.kAssnCyan")) -w 100 -h 25
                    -c "xgmAssignShader(\"xgCyan\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kAssnCyanAnn"));
                button -l (uiRes("m_xgmVisibleColorTool.kHideShow3")) -w 100 -h 25
                    -c "xgmToggleVisibility(\"xgCyanLayer\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kHideShowAnn3"));
                setParent ..;
            }
            
            rowLayout
                -numberOfColumns 2
                -columnWidth 1 100
                -columnWidth 2 100;
            {
                button -l (uiRes("m_xgmVisibleColorTool.kAssnGold")) -w 100 -h 25
                    -c "xgmAssignShader(\"xgGold\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kAssnGoldAnn"));
                button -l (uiRes("m_xgmVisibleColorTool.kHideShow4")) -w 100 -h 25
                    -c "xgmToggleVisibility(\"xgGoldLayer\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kHideShowAnn4"));
                setParent ..;
            }

            rowLayout
                -numberOfColumns 2
                -columnWidth 1 100
                -columnWidth 2 100;
            {
                button -l (uiRes("m_xgmVisibleColorTool.kAssnGreen")) -w 100 -h 25
                    -c "xgmAssignShader(\"xgGreen\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kAssnGreenAnn"));
                button -l (uiRes("m_xgmVisibleColorTool.kHideShow5")) -w 100 -h 25
                    -c "xgmToggleVisibility(\"xgGreenLayer\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kHideShowAnn5"));
                setParent ..;
            }

            rowLayout
                -numberOfColumns 2
                -columnWidth 1 100
                -columnWidth 2 100;
            {
                button -l (uiRes("m_xgmVisibleColorTool.kAssnOrange")) -w 100 -h 25
                    -c "xgmAssignShader(\"xgOrange\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kAssnOrangeAnn"));
                button -l (uiRes("m_xgmVisibleColorTool.kHideShow6")) -w 100 -h 25
                    -c "xgmToggleVisibility(\"xgOrangeLayer\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kHideShowAnn6"));
                setParent ..;
            }

            rowLayout
                -numberOfColumns 2
                -columnWidth 1 100
                -columnWidth 2 100;
            {
                button -l (uiRes("m_xgmVisibleColorTool.kAssnPink")) -w 100 -h 25
                    -c "xgmAssignShader(\"xgPink\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kAssnPinkAnn"));
                button -l (uiRes("m_xgmVisibleColorTool.kHideShow7")) -w 100 -h 25
                    -c "xgmToggleVisibility(\"xgPinkLayer\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kHideShowAnn7"));
                setParent ..;
            }

            rowLayout
                -numberOfColumns 2
                -columnWidth 1 100
                -columnWidth 2 100;
            {
                button -l (uiRes("m_xgmVisibleColorTool.kAssnPurple")) -w 100 -h 25
                    -c "xgmAssignShader(\"xgPurple\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kAssnPurpAnn"));
                button -l (uiRes("m_xgmVisibleColorTool.kHideShow8")) -w 100 -h 25
                    -c "xgmToggleVisibility(\"xgPurpleLayer\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kHideShowAnn8"));
                setParent ..;
            }

            rowLayout
                -numberOfColumns 2
                -columnWidth 1 100
                -columnWidth 2 100;
            {
                button -l (uiRes("m_xgmVisibleColorTool.kAssnRed")) -w 100 -h 25
                    -c "xgmAssignShader(\"xgRed\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kAssnRedAnn"));
                button -l (uiRes("m_xgmVisibleColorTool.kHideShow9")) -w 100 -h 25
                    -c "xgmToggleVisibility(\"xgRedLayer\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kHideShowAnn9"));
                setParent ..;
            }

            rowLayout
                -numberOfColumns 2
                -columnWidth 1 100
                -columnWidth 2 100;
            {
                button -l (uiRes("m_xgmVisibleColorTool.kAssnYellow")) -w 100 -h 25
                    -c "xgmAssignShader(\"xgYellow\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kAssnYellowAnn"));
                button -l (uiRes("m_xgmVisibleColorTool.kHideShow10")) -w 100 -h 25
                    -c "xgmToggleVisibility(\"xgYellowLayer\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kHideShowAnn10"));
                setParent ..;
            }

            rowLayout
                -numberOfColumns 2
                -columnWidth 1 100
                -columnWidth 2 100;
            {
                button -l (uiRes("m_xgmVisibleColorTool.kAssnBlonde")) -w 100 -h 25
                    -c "xgmAssignShader(\"xgBlondeRamp\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kAssnBlondeAnn"));
                button -l (uiRes("m_xgmVisibleColorTool.kHideShow11")) -w 100 -h 25
                    -c "xgmToggleVisibility(\"xgBlondeLayer\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kHideShowAnn11"));
                setParent ..;
            }

            rowLayout
                -numberOfColumns 2
                -columnWidth 1 100
                -columnWidth 2 100;
            {
                button -l (uiRes("m_xgmVisibleColorTool.kAssnBrown")) -w 100 -h 25
                    -c "xgmAssignShader(\"xgBrownRamp\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kAssnBrownAnn"));
                button -l (uiRes("m_xgmVisibleColorTool.kHideShow12")) -w 100 -h 25
                    -c "xgmToggleVisibility(\"xgBrownLayer\")"
                    -ann (uiRes("m_xgmVisibleColorTool.kHideShowAnn12"));
                setParent ..;
            }

            rowLayout
                -numberOfColumns 1
                -columnWidth 1 200;
            {
                button -l (uiRes("m_xgmVisibleColorTool.kCleanupShadersLayers")) -w 200 -h 25
                    -c "xgmDeleteShaders()"
                    -ann (uiRes("m_xgmVisibleColorTool.kCleanupShadersAnn"));
                setParent ..;
            }

            setParent ..;
        }
        setParent ..;
    }
}


/**
 * Make a ramp shader from the given two colors.
 */
proc mkRampShader( string $name,
                   float $r0, float $g0, float $b0,
                   float $r1, float $g1, float $b1 )
{
    shadingNode -asShader blinn -n $name;
    string $ramp1Name = ($name+"1");
    shadingNode -asTexture ramp -name $ramp1Name;
    string $ramp2Name = ($name+"2");
    shadingNode -asTexture ramp -name $ramp2Name;
    string $uvUtility1Name = ($name+"Tex1");
    shadingNode -asUtility place2dTexture -name $uvUtility1Name;
    string $uvUtility2Name =($name+"Tex2");
    shadingNode -asUtility place2dTexture -name $uvUtility1Name;

    // set ramp colors, interpolation and junk
    setAttr ($ramp1Name+".colorEntryList[1].color")
	    -type double3 $r0 $g0 $b0; 
    setAttr ($ramp1Name+".colorEntryList[1].position") 0;
    setAttr ($ramp1Name+".colorEntryList[2].position") 1;
    setAttr ($ramp2Name+".colorEntryList[0].color")
	    -type double3 $r0 $g0 $b0;
    setAttr ($ramp2Name+".colorEntryList[1].color")
	    -type double3 $r1 $g1 $b1;
    setAttr ($ramp2Name+".colorEntryList[2].color")
	    -type double3 $r0 $g0 $b0;
    setAttr ($ramp2Name+".colorEntryList[0].position") 0; 
    setAttr ($ramp2Name+".colorEntryList[1].position") .5;
    setAttr ($ramp2Name+".colorEntryList[2].position") 1;
    setAttr ($ramp2Name+".interpolation") 5;     
    setAttr ($ramp2Name+".type") 1;     

    // connect everything together
    connectAttr ($uvUtility1Name+".outUV") ($ramp1Name+".uv");
    connectAttr ($uvUtility1Name+".outUvFilterSize")
		($ramp1Name+".uvFilterSize");
    connectAttr ($uvUtility2Name+".outUV") ($ramp2Name+".uv");
    connectAttr ($uvUtility2Name+".outUvFilterSize")
		($ramp2Name+".uvFilterSize");
    defaultNavigation -force true -connectToExisting -source $ramp1Name
		      -destination ($name+".color");
    defaultNavigation -ce -source $ramp2Name
		      -destination ($ramp1Name+".colorEntryList[2].color");

    // change shader settings and bind to xgPalette node
    setAttr ($name+".specularColor") -type double3 1 1 1;
    setAttr ($name+".eccentricity") 0.039;
    setAttr ($name+".specularRollOff") 1;
    setAttr ($name+".specularColor") -type double3 0.391974 0.391974 0.391974;
}


/**
 * Create the named shader and associated layer.
 */
global proc xgmCreateShader( string $name )
{
    string $selection[] = `selectedNodes`;
    
    // Basic color shaders for guides and other objects
    if ( $name == "xgAzure" ) {
        if ( !`objExists xgAzure` ) {
            shadingNode -asShader blinn -n xgAzure;
            setAttr xgAzure.color -type double3 .357 .573 0.898;
            createDisplayLayer -name "xgAzureLayer" -number 1 -empty;
        }
    } else if ( $name == "xgBlue" ) {
        if ( !`objExists xgBlue` ) {
            shadingNode -asShader blinn -n xgBlue;
            setAttr xgBlue.color -type double3 0 0 1;
            createDisplayLayer -name "xgBlueLayer" -number 1 -empty;
        }
    } else if ( $name == "xgCyan" ) {
        if ( !`objExists xgCyan` ) {
            shadingNode -asShader blinn -n xgCyan;
            setAttr xgCyan.color -type double3 0 1 1;
            createDisplayLayer -name "xgCyanLayer" -number 1 -empty;
        }
    } else if ( $name == "xgGold" ) {
        if ( !`objExists xgGold` ) {
            shadingNode -asShader blinn -n xgGold;
            setAttr xgGold.color -type double3 .6 .58 .34;
            createDisplayLayer -name "xgGoldLayer" -number 1 -empty;
        }
    } else if ( $name == "xgGreen" ) {
        if ( !`objExists xgGreen` ) {
            shadingNode -asShader blinn -n xgGreen;
            setAttr xgGreen.color -type double3 0 1 0;
            createDisplayLayer -name "xgGreenLayer" -number 1 -empty;
        }
    } else if ( $name == "xgOrange" ) {
        if ( !`objExists xgOrange` ) {
            shadingNode -asShader blinn -n xgOrange;
            setAttr xgOrange.color -type double3 1 .5 0;
            createDisplayLayer -name "xgOrangeLayer" -number 1 -empty;
        }
    } else if ( $name == "xgPink" ) {
        if ( !`objExists xgPink` ) {
            shadingNode -asShader blinn -n xgPink;
            setAttr xgPink.color -type double3 1 0.67 0.959;
            createDisplayLayer -name "xgPinkLayer" -number 1 -empty;
        }
    } else if ( $name == "xgPurple" ) {
        if ( !`objExists xgPurple` ) {
            shadingNode -asShader blinn -n xgPurple;
            setAttr xgPurple.color -type double3 .62 .0 1;
            createDisplayLayer -name "xgPurpleLayer" -number 1 -empty;
        }
    } else if ( $name == "xgRed" ) {
        if ( !`objExists xgRed` ) {
            shadingNode -asShader blinn -n xgRed;
            setAttr xgRed.color -type double3 1 0 0;
            createDisplayLayer -name "xgRedLayer" -number 1 -empty;
        }
    } else if ( $name == "xgYellow" ) {
        if ( !`objExists xgYellow` ) {
            shadingNode -asShader blinn -n xgYellow;
            setAttr xgYellow.color -type double3 1 1 0;
            createDisplayLayer -name "xgYellowLayer" -number 1 -empty;
        }

        // Blonde hair ramp shader
    } else if ( $name == "xgBlondeRamp" ) {
        if ( !`objExists xgBlondeRamp` ) {
            mkRampShader( "xgBlondeRamp", 0.221,0.143,0.099, 0.989,0.751,0.512 );
            createDisplayLayer -name "xgBlondeRampLayer" -number 1 -empty;
        }
    } else if ( $name == "xgBrownRamp" ) {
        if ( !`objExists xgBrownRamp` ) {
            mkRampShader( "xgBrownRamp", 0.150,0.097,0.067, 0.641,0.374,0.104 );
            createDisplayLayer -name "xgBrownRampLayer" -number 1 -empty;
        }
    }
    select -r $selection;
}


/**
 * Delete all the XGen create shaders and layers.
 */
global proc xgmDeleteShaders()
{
    if ( `objExists xgAzureLayer` )
        delete xgAzureLayer;
    if ( `objExists xgAzure` ){
        delete xgAzure;
        delete xgAzureSG;
    }
    if ( `objExists xgBlueLayer` )
        delete xgBlueLayer;
    if ( `objExists xgBlue` ){
        delete xgBlue;
        delete xgBlueSG;
    }
    if ( `objExists xgCyanLayer` )
        delete xgCyanLayer;
    if ( `objExists xgCyan` ){
        delete xgCyan;
        delete xgCyanSG;
    }
    if ( `objExists xgGoldLayer` )
        delete xgGoldLayer;
    if ( `objExists xgGold` ){
        delete xgGold;
        delete xgGoldSG;
    }
    if ( `objExists xgGreenLayer` )
        delete xgGreenLayer;
    if ( `objExists xgGreen` ){
        delete xgGreen;
        delete xgGreenSG;
    }        
    if ( `objExists xgOrangeLayer` )
        delete xgOrangeLayer;
    if ( `objExists xgOrange` ){
        delete xgOrange;
        delete xgOrangeSG;
    }        
    if ( `objExists xgPinkLayer` )
        delete xgPinkLayer;
    if ( `objExists xgPink` ){
        delete xgPink;
        delete xgPinkSG;
    }        
    if ( `objExists xgPurpleLayer` )
        delete xgPurpleLayer;
    if ( `objExists xgPurple` ){
        delete xgPurple;
        delete xgPurpleSG;
    }
    if ( `objExists xgRedLayer` )
        delete xgRedLayer;
    if ( `objExists xgRed` ){
        delete xgRed;
        delete xgRedSG;
    }
    if ( `objExists xgYellowLayer` )
        delete xgYellowLayer;
    if ( `objExists xgYellow` ){
        delete xgYellow;
        delete xgYellowSG;
    }
    if ( `objExists xgBlondeRampLayer` )
        delete xgBlondeRampLayer;
    if ( `objExists xgBlondeRamp` ){
        delete xgBlondeRamp;
        delete xgBlondeRampSG;
        delete xgBlondeRamp1;
        delete xgBlondeRamp2;
        delete xgBlondeRampTex1;
        delete xgBlondeRampTex2;
    }
    if ( `objExists xgBrownRampLayer` )
        delete xgBrownRampLayer;
    if ( `objExists xgBrownRamp` ){
        delete xgBrownRamp;
        delete xgBrownRampSG;
        delete xgBrownRamp1;
        delete xgBrownRamp2;
        delete xgBrownRampTex1;
        delete xgBrownRampTex2;
    }
}


/**
 * Assign selected objects to the given shader and associated layer.
 */
global proc xgmAssignShader( string $name )
{
    if ( !`objExists $name` )
        xgmCreateShader( $name );
    hyperShade -assign $name;
    layerEditorAddObjects ($name+"Layer");
}


/**
 * Flip the state of the visibility for the name layer.
 */
global proc xgmToggleVisibility( string $name )
{
    if ( `objExists $name` )
        layerEditorLayerButtonVisibilityChange $name;
}


/**
 * Set all layers to teh same visibility state.
 */
global proc xgmSetAllVisibility( int $state )
{
    if ( `objExists xgAzureLayer` )
        setAttr xgAzureLayer.visibility $state;
    if ( `objExists xgBlueLayer` )
        setAttr xgBlueLayer.visibility $state;
    if ( `objExists xgCyanLayer` )
        setAttr xgCyanLayer.visibility $state;
    if ( `objExists xgGoldLayer` )
        setAttr xgGoldLayer.visibility $state;
    if ( `objExists xgGreenLayer` )
        setAttr xgGreenLayer.visibility $state;
    if ( `objExists xgOrangeLayer` )
        setAttr xgOrangeLayer.visibility $state;
    if ( `objExists xgPinkLayer` )
        setAttr xgPinkLayer.visibility $state;
    if ( `objExists xgPurpleLayer` )
        setAttr xgPurpleLayer.visibility $state;
    if ( `objExists xgRedLayer` )
        setAttr xgRedLayer.visibility $state;
    if ( `objExists xgYellowLayer` )
        setAttr xgYellowLayer.visibility $state;
    if ( `objExists xgBlondeRampLayer` )
        setAttr xgBlondeRampLayer.visibility $state;
    if ( `objExists xgBrownRampLayer` )
        setAttr xgBrownRampLayer.visibility $state;
}
