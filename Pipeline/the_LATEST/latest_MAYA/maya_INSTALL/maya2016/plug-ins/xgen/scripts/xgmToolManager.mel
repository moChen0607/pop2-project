// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

/**
 * @file xgmToolManager.mel
 * @brief Contains the xgmToolManager MEL procedure.
 *
 * <b>CONFIDENTIAL INFORMATION: This software is the confidential and
 * proprietary information of Walt Disney Animation Studios ("WDAS").
 * This software may not be used, disclosed, reproduced or distributed
 * for any purpose without prior written authorization and license
 * from WDAS. Reproduction of any section of this software must include
 * this legend and all copyright notices.
 * Copyright Disney Enterprises, Inc. All rights reserved.</b>
 *
 * @author Rajesh Sharma
 * @author Thomas V Thompson II
 * @author Lee Gramling
 *
 * @version Created 07/19/04
 */

global string $gxgmTMLookupTable[];
global int    $gxgmTMLookupTableCreated = false;
global string $gxgmTMFramePrefix = "XGFrame_";

global proc tmUpdateOptionVars(string $parent)
{
    global string $gxgmTMLookupTable[];
    global string $gxgmTMFramePrefix;

    optionVar -ca "xgmTMLoadedToolNames";
    optionVar -ca "xgmTMLoadedToolStates";

    string $childArray[] = `layout -query -childArray $parent`;
    
    for ($child in $childArray) {
        if ( startsWith( $child, $gxgmTMFramePrefix ) )  {
            string $tool = stringRemovePrefix( $child, $gxgmTMFramePrefix );
            int $collapsed = `frameLayout -query -collapse $child`;
            optionVar -sva "xgmTMLoadedToolNames" $tool;
            optionVar -iva "xgmTMLoadedToolStates" $collapsed;
        }
    }
}


global proc tmLoadTool(string $parent, string $createProcedure, int $collapsed)
{        
    global string $gxgmTMLookupTable[];
    global string $gxgmTMFramePrefix; 
    string $root = python("xg.rootDir()");
    string $xgmIconDir = $root + "icons/";

    if (exists($createProcedure)) {
        string $toolNameLoc = lookupTableLookup(
            $gxgmTMLookupTable,
            "toolCreateUIMethod",
            $createProcedure,
            "toolName");
        string $toolDescr = lookupTableLookup(
            $gxgmTMLookupTable,
            "toolCreateUIMethod",
            $createProcedure,
            "toolDescr");

        string $toolFrameName = stringAddPrefix($createProcedure, $gxgmTMFramePrefix);
        string $tframe = `frameLayout -parent $parent -l $toolNameLoc
			-lv true
            -cll true -collapse $collapsed -ann $toolDescr -mh 0
            $toolFrameName`;

        string $toolForm = $parent + "_toolform";
        $toolForm  = `formLayout -parent $tframe $toolForm`;
        $createCmd = $createProcedure;
        $createCmd += " ";
        $createCmd += "\"" + $toolForm+"\"";

        // create the ui for the tool under the form
        eval($createCmd);

        // get the name of the ui
        string $ui[] = `formLayout -q -childArray $toolForm`;

        // TODO: check to make sure there is only 1 child
        
        string $tearOffButton = $createProcedure+"TearOffButton";
        
        iconTextButton -parent $toolForm 
         -label "-"
         -image1 ($xgmIconDir + "/xgTMTear.xpm")
         -style "iconOnly"
         -ann (uiRes("m_xgmToolManager.kTearOffAnn"))
         -c ("xgmTMTearOffToolUI " + "\"" + $createProcedure + "\"" + " 0 0")
         -mw 0 -mh 0
         -height 14 -width 14 $tearOffButton;

        string $hcmd = "showHelp "+$createProcedure+";";
        string $helpButton = $createProcedure+"HelpOffButton";
        
        iconTextButton -parent $toolForm 
         -label "?"
         -image1 ($xgmIconDir + "/xgTMHelp.xpm")
         -style "iconOnly"
         -ann (uiRes("m_xgmToolManager.kToolHelpAnn"))
         -c $hcmd
         -mw 0 -mh 0
         -height 14 -width 14 $helpButton;

        // attachments
        formLayout -edit
            -attachForm    $tearOffButton top    0
            -attachNone    $tearOffButton left   
            -attachNone    $tearOffButton bottom
            -attachControl $tearOffButton right  2 $helpButton

            -attachForm    $helpButton top    0
            -attachNone    $helpButton left  
            -attachNone    $helpButton bottom
            -attachForm    $helpButton right  0

            -attachControl $ui[0] top    0 $tearOffButton
            -attachForm    $ui[0] left   0
            -attachForm    $ui[0] bottom 0
            -attachForm    $ui[0] right  0

            $toolForm;
    }
}

global proc tmUnloadTool(string $parent, string $createProcedure)
{
    global string $gxgmTMFramePrefix;
    string $toolFrameName = stringAddPrefix($createProcedure, $gxgmTMFramePrefix);
    deleteUI $toolFrameName;
}


proc tmCreateLookupTable()
{
    global string $gxgmTMLookupTable[];
    global int $gxgmTMLookupTableCreated;

    if (! $gxgmTMLookupTableCreated) {
        string $columns[];
        $columns[0] = "toolName";
        $columns[1] = "toolIcon";
        $columns[2] = "toolCreateUIMethod";
        $columns[3] = "toolDescr";
        $columns[4] = "toolWidth";
        $columns[5] = "toolHeight";
        lookupTable($gxgmTMLookupTable, $columns); // in scripts/others
        $gxgmTMLookupTableCreated = true;
    }
}

global proc xgmToolManagerRegisterTool(
    string $name,
    string $icon,
    string $createUIMethod,
    string $descr,
    int    $width,
    int    $height)
{
    global string $gxgmTMLookupTable[];
    tmCreateLookupTable();

    if (($name == "") || ($createUIMethod == "")) {
        error 
            -showLineNumber true 
            ("xgmToolManager: Must provide a name and a create method.");
    }
    if ($descr == "") {
        $descr = "No description provided for this tool.";
    }

    string $row[];
    $row[0] = $name;
    $row[1] = $icon;
    $row[2] = $createUIMethod;
    $row[3] = $descr;
    $row[4] = $width;
    $row[5] = $height;
    if (lookupTableLookup($gxgmTMLookupTable, 
                          "toolName", $name, 
                          "toolCreateUIMethod") != "") 
	{
		string $fmt = (uiRes("m_xgmToolManager.kAlreadyRegistered"));
        warning `format -s $name $fmt`;
    }
    else {
        lookupTableAddRow($gxgmTMLookupTable, $row);
    }
}


// returns a sorted list of registered tools
global proc string[] xgmToolManagerRegisteredTools()
{
    global string $gxgmTMLookupTable[];
    string $tools[] = lookupTableGetColumn($gxgmTMLookupTable, "toolName");
    return `sort($tools)`;
}


global proc string[] tmRestoreStateFromOptionVars(string $parent)
{
    string $empty[];
    // if using this version of tool manager for the first time 
    // or if option vars have somehow vanished, reset and clear
    // the optionVars from earlier version.
    if (! `optionVar -exists xgmTMPreferenceVersion`) {
        string $version = python("xg.version()");
        // add a version number
        optionVar -stringValue xgmTMPreferenceVersion $version;
        optionVar -ca xgmTMToolFilters;
        optionVar -stringValue xgmTMCurrentFilter "";
        optionVar -ca xgmTMLoadedToolNames;
        optionVar -ca xgmTMLoadedToolStates;
        return $empty;
    }

    if (!`optionVar -exists xgmTMLoadedToolNames`) {
        optionVar -ca xgmTMLoadedToolNames;
        optionVar -ca xgmTMLoadedToolStates;
        return $empty;
    }

    if (!`optionVar -exists xgmTMLoadedToolStates`) {
        optionVar -ca xgmTMLoadedToolNames;
        optionVar -ca xgmTMLoadedToolStates;
        return $empty;
    }

    // get the tools and their states
    string $loadedToolNames[] = `optionVar -query "xgmTMLoadedToolNames"`;
    int $loadedToolStates[] = `optionVar -query "xgmTMLoadedToolStates"`;

    // bail out after clearing the optionVars if there is a mismatch
    if ((size($loadedToolNames) == 0) ||
        (size($loadedToolStates) == 0)  ||
        (size($loadedToolNames) != size($loadedToolStates))) {
        optionVar -ca xgmTMLoadedToolNames;
        optionVar -ca xgmTMLoadedToolStates;
        return $empty;
    }

    // load the tools specified in the optionVars
    for ($i = 0; $i < size($loadedToolNames); $i++) {
        tmLoadTool($parent, $loadedToolNames[$i], $loadedToolStates[$i]);
    }

    return $loadedToolNames;
}


/**
 * Allow tools written for the tool manager to be torn off.
 */
global proc xgmTMTearOffToolUI(string $createProcedure, int $tWidth, int $tHeight)
{
    global string $gxgmTMLookupTable[];

    // default w, h
    int $width = 525;
    int $height = 240;

    if ($tWidth == 0 || $tHeight == 0) { // try to use the preferred h, w
        string $prefWidth = lookupTableLookup(
                $gxgmTMLookupTable,
                "toolCreateUIMethod",
                $createProcedure,
                "toolWidth");

        string $prefHeight = lookupTableLookup(
                $gxgmTMLookupTable,
                "toolCreateUIMethod",
                $createProcedure,
                "toolHeight");

        if ($prefWidth == "" || $prefHeight == "") {
			string $fmt = (uiRes("m_xgmToolManager.kToolNotRegistered"));
            warning `format -s $createProcedure $fmt`;
            return;
        }

        if ($prefWidth != "0") $width = $prefWidth;
        if ($prefHeight != "0") $height = $prefHeight;
    } 
    else { // use the given w, h
        $width = $tWidth;
        $height = $tHeight;
    }

    // create the tool in its own window
    string $win = $createProcedure + "Window";
    if (!`window -exists $win`) {
        string $toolNameLoc = lookupTableLookup(
            $gxgmTMLookupTable,
            "toolCreateUIMethod",
            $createProcedure,
            "toolName");
        window -title $toolNameLoc
            -menuBar off -sizeable false
            -minimizeButton false -maximizeButton false
            -width $width -height $height $win;
        eval($createProcedure + " " + $win);
    }
    showWindow($win);
}

