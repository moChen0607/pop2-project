// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

/**
 * @file igImportMapsUI.mel
 * @brief UI for importing maps to shape the iGroom.
 *
 * <b>CONFIDENTIAL INFORMATION: This software is the confidential and
 * proprietary information of Walt Disney Animation Studios ("WDAS").
 * This software may not be used, disclosed, reproduced or distributed
 * for any purpose without prior written authorization and license
 * from WDAS. Reproduction of any section of this software must include
 * this legend and all copyright notices.
 * Copyright Disney Enterprises, Inc. All rights reserved.</b>
 *
 * @author Thomas V Thompson II
 *
 * @version tthompso  05/14/07  Initial Version
 */


/** Import maps that will shape the iGroom */
global proc igImportMapsUI()
{
    global string $igBasepath;
    string $path = "";
    string $desc = igCurrentDescription();
    if ( `attributeQuery -ex -node $desc "mapPath"` ) {
        $path = `getAttr ($desc+".mapPath")`;
        $path = strip($path);
    }

    // Get the base for the path from the descriptions path. We will always
    // grab the first entry when multiples are present.
    $igBasepath = igOutputDir( $desc );
    if ( $path == "" ) {
        $path = $igBasepath + "igroom";
    }
    
    if (`window -exists igImportMapsWindow`)
        deleteUI -window  igImportMapsWindow;

    window -sizeable false -minimizeButton false -maximizeButton false
	    -menuBar false -width 600 -height 100
	    -title (uiRes("m_igImportMapsUI.kIgroomImportMaps")) igImportMapsWindow;

    columnLayout -adj on -rs 10;
    {
        // Create a text field for the filename.
        $browser = "igFileBrowser \"iGroom Import\" igImportMapsPathField 1";
        textFieldButtonGrp -l (uiRes("m_igImportMapsUI.kMapPath")) -tx $path
            -bl (uiRes("m_igImportMapsUI.kBrowse")) -bc $browser -cal 1 right -adj 2
            -ann (uiRes("m_igImportMapsUI.kBrowseAnnot"))
            igImportMapsPathField;

        rowLayout -numberOfColumns 3 -columnWidth3 130 130 130
            -columnAlign3 "center" "center" "center"
            -adjustableColumn3 1;
        {
            // Control over the dialog
            text -l "";
            button -label (uiRes("m_igImportMapsUI.kImport")) -w 130
                -ann (uiRes("m_igImportMapsUI.kImportAnnot"))
                -c "igImportMaps;deleteUI igImportMapsWindow;";
            button -label (uiRes("m_igImportMapsUI.kCancel")) -w 130 
                -ann (uiRes("m_igImportMapsUI.kCancelAnnot"))
                -c "deleteUI igImportMapsWindow";
            setParent ..;
        }

        setParent ..;
    }

    showWindow igImportMapsWindow;

    // Dont let the window pop-up the wrong size
    window -e -width 600 igImportMapsWindow;
    window -e -height 70 igImportMapsWindow;
}


global proc igImportMaps()
{
    global string $igBasepath;
    global string $igNullDescriptionTag;

    string $path = `textFieldButtonGrp -q -tx igImportMapsPathField`;
    
    string $desc = igCurrentDescription();
    if ( $desc != $igNullDescriptionTag && $desc != "" ) {
        waitCursor -state on;
        iGroom -im $path -d $desc;
        
        // Get path to be relative to basepath
        $path = strip($path);
        if ( `startsWith $path "/"`){
            if ( `startsWith $igBasepath "./"`){
                string $pwd = `getenv "PWD"` + "/";
                $igBasepath = $pwd + $igBasepath;
                $igBasepath = `substitute "/./" $igBasepath "/"`;
            }
        }
        if ( `startsWith $path $igBasepath` ) {
            $path = `substitute $igBasepath $path ""`;
        }
        $path = igValidPath($path);
    
        // Remember what was entered before via attributes on the description
        if ( !`attributeQuery -ex -node $desc "mapPath"` ) {
            addAttr -ln "mapPath" -sn "mapPath" -dt "string" $desc;
        }
        setAttr -type "string" ($desc+".mapPath") $path;
        
        waitCursor -state off;
    }
}
