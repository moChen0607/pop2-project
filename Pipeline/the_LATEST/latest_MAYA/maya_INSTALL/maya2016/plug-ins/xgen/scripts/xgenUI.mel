// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

/**
 * @file xgenUI.mel
 * @brief Contains the xgen UI MEL procedures.
 *
 * <b>CONFIDENTIAL INFORMATION: This software is the confidential and
 * proprietary information of Walt Disney Animation Studios ("WDAS").
 * This software may not be used, disclosed, reproduced or distributed
 * for any purpose without prior written authorization and license
 * from WDAS. Reproduction of any section of this software must include
 * this legend and all copyright notices.
 * Copyright Disney Enterprises, Inc. All rights reserved.</b>
 *
 * @author Thomas V Thompson II
 * @author Stephen D. Bowline
 * @author Ying Liu
 * @author Rajesh Sharma
 * @author Kelly Ward
 * @author Lawrence Chai
 *
 * @version Created 11/30/04
 */


global proc xgenCafUI()
{
	// Add Caf UI only if xgen is loaded
	if ( `pluginInfo -q -loaded xgenToolkit` )
		xgenUI();
}

global proc xgenCafUIDel()
{
	// Delete Caf UI from Xgen menu
	if ( `pluginInfo -q -loaded xgenToolkit` )
	{
		string $menu = "mayaAnimCacheMenu";
		if ( `menu -q -exists $menu` ) 
			deleteUI $menu;
	}
}

/** 
* This procedure adds the menu items for xgen:
*	- After menu restructuring in Maya 2016, xgen is moved under MODELING->Generate.
*	- In legacy menu, xgen is a standalone menu under the main menu bar.
* This procedure checks which mode to use and set the menu items accordingly.
*/
global proc xgenAddMenuItems()
{
	global string $gMainWindow;

    // Declare global variables used by the UI here...
    global string $xgmDynamicGuidesGroup = "xgDynamicGuides";
    global string $xgmGroomGroup = "xgGroom";

	string $whereToInsert; // a string for where to insert the menuItem.

	// Check if we can find the anchor point for xgen menu items (for current menu)
	global string $gMainGenerateXGenAnchor;
	int $anchorFound = `menuItem -q -exists $gMainGenerateXGenAnchor`;
	int $buildxGenForModelingMenuSet = 0; // this variable controls whether to build xgen menu in MODELING->Generate

	// Add XGen to the plugins menu (if it exists)
	string $xgenMenu = "xgenMenu";
	if ( `menu -q -exists $xgenMenu` ) 
		deleteUI $xgenMenu;

	// check if the anchor is found
	if($anchorFound)
	{
		// when we can't find "XGen Editor" in MODELING->Generate, we have to 
		// build xgen menu items under it. Otherwise it's already built.
		if (!`menuItem -q -exists "XGenEditorMenuItem"`)
		{
			$buildxGenForModelingMenuSet = 1;
			global string $gMainGenerateMenu;
			$xgenMenu = $gMainGenerateMenu;
			setParent -menu $xgenMenu;
		}
	}

	//
	// NOTE: Please ensure giving a string name to each menu item and make sure the 
	//       subsequent one insert after the previous menu item. It's necessary for 
	//       xGen menu items under the restructured MODELING->Generate menu.
	//
	if ($buildxGenForModelingMenuSet)
	{ 
		menuItem -version 2015 -label (uiRes("m_xgenUI.kOpenTheUIForTheXgenTools1"))
			-ann (uiRes("m_xgenUI.kOpenTheXGenWindowAnn1"))
			-c "XgCreateDescriptionEditor"
			-insertAfter $gMainGenerateXGenAnchor // For MODELING->Generate, we insert it after the anchor point.
			XGenEditorMenuItem;
			
		menuItem -version 2016 -label (uiRes("m_xgenUI.kOpenTheUIForTheXgenLibrary"))
			-ann (uiRes("m_xgenUI.kOpenTheXGenLibraryAnn1"))
			-c "XGenLibraryWindow"
			-insertAfter XGenEditorMenuItem
			XGenLibraryMenuItem;

		// this divider is only for restructured menu.
		menuItem -divider on 
			-insertAfter XGenLibraryMenuItem
			divider1MenuItem;
	}

	if ($buildxGenForModelingMenuSet)
	{
		// A special one here as there is a divider in restructured menu.
		$whereToInsert = "divider1MenuItem"; 
		menuItem -version 2015 -label (uiRes("m_xgenUI.kCreateDescription"))
			-ann (uiRes("m_xgenUI.kCreateDescriptionAnn"))
			-c "XgCreateDescription" 
			-insertAfter $whereToInsert
			createDescMenuItem;

		// Another special one here as there is a divider in legacy menu.
		$whereToInsert = "createDescMenuItem";
		menuItem -version 2015 -label (uiRes("m_xgenUI.kImportMenuBar"))
			-ann (uiRes("m_xgenUI.kImportAnn"))
			-c "python(\"xgui.importFile()\")" 
			-insertAfter $whereToInsert
			impColDescMenuItem;

		menuItem -version 2015 -label (uiRes("m_xgenUI.kExportMenuBar"))
			-ann (uiRes("m_xgenUI.kExportAnn"))
			-c "python(\"xgui.exportFile()\")"
			-insertAfter impColDescMenuItem
			expColDesMenuItem;

		menuItem -version 2015 -label (uiRes("m_xgenUI.kExportSelectionAsArchive"))
			-ann (uiRes("m_xgenUI.kExportSelectionAnn"))
			-c XgExportArchive
			-insertAfter expColDesMenuItem
			expSelArhvMenuItem;

		menuItem -version 2015 -label (uiRes("m_xgenUI.kBatchConvertScenesToArchives"))
			-ann (uiRes("m_xgenUI.kBatchConvertAnn2"))
			-c XgBatchExportArchive
			-insertAfter expSelArhvMenuItem
			batConScnArhvMenuItem;

		menuItem -version 2016 -label (uiRes("m_xgenUI.kImportPresetLabel"))
			-c "python(\"xgui.importPreset()\")"
			-insertAfter batConScnArhvMenuItem
			importPresetMenuItem;
		menuItem -version 2016 -label (uiRes("m_xgenUI.kExportPresetLabel"))
			-c "python(\"xgui.exportPreset()\")"
			-insertAfter importPresetMenuItem
			exportPresetMenuItem;


		// TODO: help
	//    menuItem -label _L10N( kHelpOnXgen, "Help on XGen..." )
	//        -ann _L10N( kHelpOnXgenAnn, "Go to XGen project's main page." )
	//        -c "showHelp -a \"http://techweb/community/tech-storefront/look_tools/xgen/\""
	//		  -ia $menu
	//        XGenHelpMenuItem;

	} // End of creating menu items
}

/**
 * This procedure does all the setup needed to load everything related to
 * the XGen User Interface.
 */
global proc xgenUI()
{
    waitCursor -state on;
    
	// create menu items, for legacy menu the xgen menu items will be created here.
	// but for restructured menu, it actually does nothing, as the anchor point 
	// is not created yet. The actual menu item creating for restructured menu is 
	// called separately in refreshModelingGenerateMenu() in ModelingGenerateMenu.mel
	xgenAddMenuItems();

	registerXGenPrefTab();

	// Add an icon to the Plugins shelf
	xgmAddXGenToShelf("XGen");
	//python("xgui.createDescriptionEditor(False)");
    
    //---Removed f7 hotkey functionality in MAYA-26209    
    //hotkey -k "F7" -n "XgCreateDescriptionEditor";

    global int $dlUseSceneNavigator;
    if ( $dlUseSceneNavigator ) {
        eval("python(\"xg.xgpipe.xgenIOManager.XGenIOManager.registerWithSceneMgr()\")");
    }
    
    // Get the description editor to refresh after a new palette is created
    python("xg.registerCallback(\"PostDescriptionCreate\",\"xgenm.ui.xgDescriptionEditor._refreshCB\")");

    waitCursor -state off;
}


/**
 * Add the XGen description editor button to a shelf of the users choice.
 */
global proc xgmAddXGenToShelf( string $shelf )
{
    string $root = python("xg.rootDir()");
    string $iconDir = $root + "icons/";
    
    if ( `exists muAddShelfButton` ) {
		
		// XGen Description Editor
		muAddShelfButton( $shelf,
		                  (uiRes("m_xgenUI.kXGenShelfButtonOpenDescriptionEditor")),
		                  "XgCreateDescriptionEditor",
		                  (uiRes("m_xgenUI.kOpenTheXgenWindow")),
		                  ($iconDir + "xgDEditor.png"),
		                  "", "2015" );
		
		// Preview
		muAddShelfButton( $shelf,
		                  (uiRes("m_xgenUI.kXGenShelfButtonUpdatePreview")),
		                  "XgPreview",
		                  (uiRes("m_xgenUI.kPreviewXgenDescriptionsInTheViewport")),
		                  ($iconDir + "xgPreview.png"),
		                  "", "2015" );
		
		// Hide Preview
		muAddShelfButton( $shelf,
		                  (uiRes("m_xgenUI.kXGenShelfButtonClearPreview")),
		                  "python(\"xgui.createDescriptionEditor(False).preview(True)\")",
		                  (uiRes("m_xgenUI.kCleanPreviewsOfXgenDescriptionsInTheViewport")),
		                  ($iconDir + "xgPreviewClear.png"),
		                  "", "2015" );
		                  
		// Create Description
		muAddShelfButton( $shelf,
		                  (uiRes("m_xgenUI.kXGenShelfButtonCreateDescription")),
		                  "XgCreateDescription",
		                  (uiRes("m_xgenUI.kCreateANewXgenDescriptionAndBindItOnTheSelectedObjects")),
		                  ($iconDir + "xgCreateDescription.png"),
		                  "", "2015" );
		
		// Bind Patches with a popup menu.
		string $appendfaces = (uiRes("m_xgenUI.kAppendFaces"));
		string $replacefaces = (uiRes("m_xgenUI.kReplaceFaces"));
		string $removefaces = (uiRes("m_xgenUI.kRemoveFaces"));
		string $mapfaces = (uiRes("m_xgenUI.kMapFaces"));
		string $selectfaces = (uiRes("m_xgenUI.kSelectFaces"));
		string $bindScript;
                $bindScript = "from PySide import QtGui\\n";
                $bindScript = $bindScript + "m = QtGui.QMenu()\\n";
                $bindScript = $bindScript + "m.addAction(u\\\""+$appendfaces+"\\\",  lambda: xgui.createDescriptionEditor(False).modifyBinding(\\\"Append\\\") )\\n";
                $bindScript = $bindScript + "m.addAction(u\\\""+$replacefaces+"\\\", lambda: xgui.createDescriptionEditor(False).modifyBinding(\\\"Replace\\\") )\\n";
                $bindScript = $bindScript + "m.addAction(u\\\""+$removefaces+"\\\",  lambda: xgui.createDescriptionEditor(False).modifyBinding(\\\"Remove\\\") )\\n";
                $bindScript = $bindScript + "m.addAction(u\\\""+$mapfaces+"\\\",     lambda: xgui.createDescriptionEditor(False).modifyBinding(\\\"Map\\\") )\\n";
                $bindScript = $bindScript + "m.addSeparator()\\n";
                $bindScript = $bindScript + "m.addAction(u\\\""+$selectfaces+"\\\",  lambda: xgui.createDescriptionEditor(False).selectBinding() )\\n";
                $bindScript = $bindScript + "m.popup(QtGui.QCursor.pos())\\n";
		muAddShelfButton( $shelf,
		                  (uiRes("m_xgenUI.kXGenShelfButtonBindPatches")),
		                  "python(\"" + $bindScript + "\")",
		                  (uiRes("m_xgenUI.kPatchesBindingsMenu")),
		                  ($iconDir + "xgBindFaces.png"),
		                  "", "2015" );
		                  
		// Guide Context Tool
        muAddShelfButton( $shelf,
		                  (uiRes("m_xgenUI.kXGenShelfButtonAddOrMoveGuides")),
		                  "XgGuideTool",
		                  (uiRes("m_xgenUI.kAddOrMoveGuidesForTheCurrentDescription")),
		                  ($iconDir + "xgGuideContext.png"),
		                  "", "2015" );
		
		// Toggle guide visibility
		muAddShelfButton( $shelf,
		                  (uiRes("m_xgenUI.kXGenShelfButtonToggleGuidesVisibility")),
		                  "python(\"xgen.toggleGuideDisplay(xgui.createDescriptionEditor(False).currentDescription())\")",
		                  (uiRes("m_xgenUI.kToggleVisibilityOfCurrentDescriptionsGuides")),
		                  ($iconDir + "xgToggleGuide.png"),
		                  "", "2015" );
		           
		// Toggle guide reference
		muAddShelfButton( $shelf,
		                  (uiRes("m_xgenUI.kXGenShelfButtonToggleGuidesSelectability")),
		                  "python(\"xgen.toggleGuideReference(xgui.createDescriptionEditor(False).currentDescription())\")",
		                  (uiRes("m_xgenUI.kToggleAbilityToSelectCurrentDescriptionsGuides")),
		                  ($iconDir + "xgToggleGuideReference.png"),
		                  "", "2015" );
		
		// Flip guides across model
		muAddShelfButton( $shelf,
		                  (uiRes("m_xgenUI.kXGenShelfButtonMirrorGuidesXAxis")),
		                  "xgmFlipGuides( python(\"xgui.createDescriptionEditor(False).currentDescription()\") )",
		                  (uiRes("m_xgenUI.kFlipSelectedGuidesAcrossXAxis")),
		                  ($iconDir + "xgFlipGuides.png"),
		                  "", "2015" );    
    
		// Sync patch to geometry visibility
		muAddShelfButton( $shelf,
		              (uiRes("m_xgenUI.kXGenShelfButtonSyncPatchVisibility")),
			          "xgmSyncPatchVisibility",
			          (uiRes("m_xgenUI.kMatchXgenPatchVisibilityToGeometryVisibility")),   
			          ($iconDir + "xgSyncPatchVisibility.png"),
			           "", "2015" );
		                  
		// Toggle selection of xgen and geometry
		muAddShelfButton( $shelf,
		                  (uiRes("m_xgenUI.kXGenShelfButtonFlipSelected")),
                          "python(\"xgen.selectionToggle(xgui.createDescriptionEditor(False).currentDescription())\")",
		                  (uiRes("m_xgenUI.kToggleBetweenXgenPatchesAndGeometry")),
		                  ($iconDir + "xgSelectionToggle.png"),
		                  "", "2015" );
		                  
		// Isolate select of primitives
		muAddShelfButton( $shelf,
		                  (uiRes("m_xgenUI.kXGenShelfButtonSelectPrimitives")),
		                  "python(\"xgui.createDescriptionEditor(False).primSelectionContext()\")",
		                  (uiRes("m_xgenUI.kCreatePrimitiveSelectionBox")),
		                  ($iconDir + "xgPrimSelection.png"),
		                  "", "2015" );

		// Cull primitives
		muAddShelfButton( $shelf,
		                  (uiRes("m_xgenUI.kXGenShelfButtonCullPrimitives")),
		                  "python(\"xgui.createDescriptionEditor(False).cullSelectedPrimitives()\")",
		                  (uiRes("m_xgenUI.kCullPrimitivesWithinSelectionBox")),
		                  ($iconDir + "xgCullPrimContextSelect.png"),
		                  "", "2015" );

        // Sculpt guides
		string $button = muAddShelfButton( $shelf,
		                  (uiRes("m_xgenUI.kXGenShelfButtonSculptGuides")),
		                  "python(\"xgui.createDescriptionEditor(False).guideSculptContext(False)\")",
		                  (uiRes("m_xgenUI.kSculptGuidesSelectionBox")),
		                  ($iconDir + "xgGuideSculptTool.png"),
		                  "", "2016" );
        if (size($button) > 0)
            shelfButton -e -doubleClickCommand "python(\"xgui.createDescriptionEditor(False).guideSculptContext(True)\")" $button;
    }

	// Add the version tag to this shelf for the what's new highlighting.
	if ( `shelfLayout -ex $shelf` )
	{
		shelfLayout -e -version "2015" $shelf;
    }
}

global proc xgenSelectMenuItems( string $parent, string $item )
{
	string $shape = $item;
	string $object[] = `listRelatives -path -s $item`;

	for ($i = 0; $i < size($object); ++$i) 
	{
		// Check if the shape is not an intermadiate object
		if( 0 == getAttr($object[$i] + ".io") )
		{
			$shape = $object[$i];
			break;
		}
	}

	string $nt = `nodeType $shape`;
	if( $nt == "xgmSplineGuide" || $nt == "xgmArchiveGuide" || $nt == "xgmCardGuide" || $nt == "xgmSphereGuide" )
	{
		menuItem 
		-label (uiRes("m_xgenUI.kAddOrMoveGuidesSelectMenu"))
		-echoCommand true
		-c "XgGuideTool"
		-rp "N";

		menuItem 
		-label (uiRes("m_xgenUI.kGuideControlPointsMenu"))
		-echoCommand true
		-c "selectMode -component"
		-rp "NW";

		menuItem 
		-label (uiRes("m_xgenUI.kObjectModeSelectMenu"))
		-echoCommand true
		-c "selectMode -object"
		-rp "NE";

		menuItem 
		-label (uiRes("m_xgenUI.kPasteGuideShapeSelectMenu"))
		-echoCommand true
		-c "selectMode -object; xgmCopyGuides(\"paste\")"
		-rp "W";

		menuItem 
		-label (uiRes("m_xgenUI.kCopyGuideShapeSelectMenu"))
		-echoCommand true
		-c "selectMode -object; xgmCopyGuides(\"copy\")"
		-rp "E";
	}
}
