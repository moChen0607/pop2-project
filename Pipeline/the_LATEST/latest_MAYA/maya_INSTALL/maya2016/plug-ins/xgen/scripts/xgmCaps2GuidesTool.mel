// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

/**
 * @file xgmCaps2GuidesTool.mel
 * @brief Contains code to wrap the poly2guide process when using points
 *
 * <b>CONFIDENTIAL INFORMATION: This software is the confidential and
 * proprietary information of Walt Disney Animation Studios ("WDAS").
 * This software may not be used, disclosed, reproduced or distributed
 * for any purpose without prior written authorization and license
 * from WDAS. Reproduction of any section of this software must include
 * this legend and all copyright notices.
 * Copyright Disney Enterprises, Inc. All rights reserved.</b>
 *
 * @author Yun-chen Sung
 * @author Thomas V Thompson II
 *
 * @version Created 11/19/10
 */


proc xgmC2GTShrinkCapsFrame()
{
    frameLayout -l (uiRes("m_xgmCaps2GuidesTool.kShrinkCaps1")) -cll true -cl false -li 5
      -bv true ;
    {
        columnLayout -adj false -columnOffset left 5;
        {

            floatSliderGrp -label (uiRes("m_xgmCaps2GuidesTool.kShrinkAmount")) 
                -cw3 120 60 170
   	        -ann ((uiRes("m_xgmCaps2GuidesTool.kShrinkAmountAnn")))
                -field true -minValue 0.0 -maxValue 1 -value 0
	      xgmC2GTshrinkCapsFrame_scale;

	    radioButtonGrp -numberOfRadioButtons 2 -label (uiRes("m_xgmCaps2GuidesTool.kUvAxis"))
	      -labelArray2 (uiRes("m_xgmCaps2GuidesTool.kU"))
	      		    (uiRes("m_xgmCaps2GuidesTool.kV")) -sl 2
                xgmC2GTshrinkCapsFrame_axis;

	    floatFieldGrp -label (uiRes("m_xgmCaps2GuidesTool.kEndParam")) -value1 0
                xgmC2GTshrinkCapsFrame_end;
	       
	    button -label (uiRes("m_xgmCaps2GuidesTool.kShrinkCaps2")) -w 300 -align "center"
	      -ann ((uiRes("m_xgmCaps2GuidesTool.kShrinkCapsAnn2")))
	      -command "xgmShrinkCaps";
	    setParent ..;
	}
	setParent ..;
    }
}

/****************************************************************************
 *
 * This part incorporates the GUI from C2G_xgmPolyToGuidsTool.mel
 */

global string $xgmRegionMapDir = "${DESC}/Region/";

proc xgmC2GTGuideSettingFrame()
{
    frameLayout -l (uiRes("m_xgmCaps2GuidesTool.kGuideSettings")) -cll true -cl false -li 5
        -bv true -ec "xgmJiggleWindowCB" -cc "xgmJiggleWindowCB"; 
    {
        columnLayout -adj false -columnOffset left 5;
        {
            int $xgmC2GTextWidth = 110;
            int $xgmC2GTextFieldWidth = 60;
            int $xgmC2GTSliderWidth = 170;

            float $xgmC2GTdistance = `optionVar -query xgmC2GTdistance`;
            if ($xgmC2GTdistance == 0) $xgmC2GTdistance = 0.2;
            floatSliderGrp -label (uiRes("m_xgmCaps2GuidesTool.kDistance")) 
                -cw3 $xgmC2GTextWidth $xgmC2GTextFieldWidth $xgmC2GTSliderWidth
                -ann ((uiRes("m_xgmCaps2GuidesTool.kMinimumGuideAnn")) )
                -field true -minValue 0.0 -value $xgmC2GTdistance
                -pre 3 xgmC2GTdistanceFSG;

            rowLayout -nc 3 -cw3 $xgmC2GTextWidth 110 110 
                -cl3 "center" "center" "center";
            {
                text "";

                button -l (uiRes("m_xgmCaps2GuidesTool.kTestSettings1")) -w 110
                    -ann (uiRes("m_xgmCaps2GuidesTool.kTestSettngsAnn"))
                    -c xgmC2GTCreateLocators;

                button -l (uiRes("m_xgmCaps2GuidesTool.kRemoveTest1")) -w 110 
		       -ann (uiRes("m_xgmCaps2GuidesTool.kRemoveTestsAnn"))
                       -c xgmC2GTDeleteLocators;

                setParent ..;
            }

            setParent ..;
        }

        setParent ..;
    }
}


proc xgmC2GTMapSettingFrame()
{
    frameLayout -l (uiRes("m_xgmCaps2GuidesTool.kMapSettings")) -cll true -cl false -li 5
        -bv true -ec "xgmJiggleWindowCB" -cc "xgmJiggleWindowCB"; 
    {
        columnLayout -adj 0 -columnOffset left 5 ;
        {
            float $xgmC2GTtexelsPerUnit = `optionVar -query xgmC2GTtexelsPerUnit`;
            if ( $xgmC2GTtexelsPerUnit == 0 ) 
                $xgmC2GTtexelsPerUnit = 0.01;
            floatSliderGrp -label (uiRes("m_xgmCaps2GuidesTool.kTexelsPerUnit")) -cw3 110 60 230
                -field true -min 0.001 -max 100.0 -fieldMaxValue 10000.0
                -step 0.001 -pre 3 -v $xgmC2GTtexelsPerUnit 
                -ann ( (uiRes("m_xgmCaps2GuidesTool.kTexelsPerUnitAnn")) ) 
                xgmC2GTtexelsPerUnitFSG;

            rowLayout -nc 3 -cw3 110 110 110 -cl3 "center" "center" "center";
            {
                text "";

                button -l (uiRes("m_xgmCaps2GuidesTool.kTestSettings2")) -w 110
                    -ann (uiRes("m_xgmCaps2GuidesTool.kTestSettingsAnn2"))
                    -c xgmC2GTTestMapSettings;

                button -l (uiRes("m_xgmCaps2GuidesTool.kRemoveTest2")) -w 110 
		       -ann (uiRes("m_xgmCaps2GuidesTool.kRemoveTestsAnn2"))
                    -c xgmC2GTRemoveMapTest;

                setParent ..;
            }
       
            setParent ..;
        }

        setParent ..;
    }
}


/**
 * Create locators at guide positions.
 */
global proc xgmC2GTCreateLocators()
{
    string $desc = python( "xgui.currentDescription()" );
    if ( $desc == "" ) {
        confirmDialog -title (uiRes("m_xgmCaps2GuidesTool.kCaps2guidesError1")) 
		      -m (uiRes("m_xgmCaps2GuidesTool.kErrorCurrentDescriptionIsNotSet1"))  
		      -messageAlign "left" -button (uiRes("m_xgmCaps2GuidesTool.kOk1"));
        return;
    }

    // Create new locators at guide locations
    string $command = "xgmPolyToGuide -createLocators -d ";
    $command += $desc;

    $command += " -distance ";
    float $xgmC2GTdistance = `floatSliderGrp -q -v xgmC2GTdistanceFSG`;
    optionVar -fv "xgmC2GTdistance" $xgmC2GTdistance;
    $command += $xgmC2GTdistance;
    
    eval( $command );
}


global proc xgmC2GTDeleteLocators()
{
    xgmPolyToGuide -deleteLocators;
}


global proc xgmC2GTRemoveMapTest()
{
    xgmLoadPtexToolCleanUp();
}


global proc xgmC2GTTestMapSettings()
{
    global string $xgmRegionMapDir;

    string $desc = python( "xgui.currentDescription()" );
    if ( $desc == "" ) {
        confirmDialog -title (uiRes("m_xgmCaps2GuidesTool.kCaps2guidesError2")) 
		      -m (uiRes("m_xgmCaps2GuidesTool.kErrorCurrentDescriptionIsNotSet2"))  
		      -messageAlign "left" 
			-button (uiRes("m_xgmCaps2GuidesTool.kOk"));
        return;
    }

    string $selection[] = `ls -sl`;

    string $command = "xgmPolyToGuide -testMap -d ";
    $command += $desc;

    $command += " -regionMapDir \"";
    $command += $xgmRegionMapDir;
    $command += "\"";

    $command += " -texelsPerUnit ";
    float $xgmC2GTtexelsPerUnit = `floatSliderGrp -q -v xgmC2GTtexelsPerUnitFSG`;
    optionVar -fv "xgmC2GTtexelsPerUnit" $xgmC2GTtexelsPerUnit;
    $command += $xgmC2GTtexelsPerUnit;

    print( eval( $command ) );

    // Restore the original selection
    select -r $selection;
}


global proc int xgmC2GTGeneratesGuidesAndMaps()
{
    global string $xgmRegionMapDir;
    
    string $desc = python( "xgui.currentDescription()" );
    if ( $desc == "" ) {
        confirmDialog -title (uiRes("m_xgmCaps2GuidesTool.kCaps2guidesError3")) 
		      -m (uiRes("m_xgmCaps2GuidesTool.kErrorCurrentDescriptionIsNotSet3"))  
		      -messageAlign "left" -button (uiRes("m_xgmCaps2GuidesTool.kOk2"));
        return 0;
    }

    waitCursor -state on;
    
    // Remove existing locators and ptex clouds
    xgmC2GTDeleteLocators();
    xgmC2GTRemoveMapTest();

    // Create guide, curves and maps
    string $command = "xgmPolyToGuide -createAll -d ";
    $command += $desc;

    $command += " -distance ";
    float $xgmC2GTdistance = `floatSliderGrp -q -v xgmC2GTdistanceFSG`;
    optionVar -fv "xgmC2GTdistance" $xgmC2GTdistance;
    $command += $xgmC2GTdistance;
    
    // Always use $DESC/REGION for region map
    $command += " -regionMapDir \"";
    $command += $xgmRegionMapDir;
    $command += "\"";

    $command += " -texelsPerUnit ";
    float $xgmC2GTtexelsPerUnit = `floatSliderGrp -q -v xgmC2GTtexelsPerUnitFSG`;
    optionVar -fv "xgmC2GTtexelsPerUnit" $xgmC2GTtexelsPerUnit;
    $command += $xgmC2GTtexelsPerUnit;

    int $result = 0;
    if ( !catch( eval( $command ) ) ) {
        $result = 1;
    }
    waitCursor -state off;
    return 1;
}


/****************************************************************************/


global proc xgmCaps2GuidesTool( string $parent )
{
  columnLayout -parent $parent -width 420;
  {

        // shrink caps tool
        xgmC2GTShrinkCapsFrame();
        
        // Guide and Map Settings frame
        xgmC2GTGuideSettingFrame();
        xgmC2GTMapSettingFrame();

        textFieldGrp -label (uiRes("m_xgmCaps2GuidesTool.kDescription")) -cw2 120 120
            -ann (uiRes("m_xgmCaps2GuidesTool.kDescriptionAnn"))
	    -editable false xgmC2GTMainDesc;

        float $density = `optionVar -query xgmC2GTdensity`;
        if ($density == 0) $density = 0.1;
        floatFieldGrp -label (uiRes("m_xgmCaps2GuidesTool.kDensity"))  -cw2 120 70 
            -ann ((uiRes("m_xgmCaps2GuidesTool.kDensityAnn")) )
            -v1 $density -pre 3 xgmC2GTdensity;

	string $xuv = `optionVar -query xgmC2GTXUVPath`;
	if ($xuv == 0) $xuv = "";
        textFieldGrp -label (uiRes("m_xgmCaps2GuidesTool.kXuvDirectory")) -cw2 120 300 
            -ann (uiRes("m_xgmCaps2GuidesTool.kXUVDirectoryAnn"))
	    -editable true xgmC2GTXUVPath;
	textFieldGrp -e -text $xuv xgmC2GTXUVPath;

        button -label (uiRes("m_xgmCaps2GuidesTool.kCreateGuidesFromCaps")) -w 420 -align "center"
	    -ann ((uiRes("m_xgmCaps2GuidesTool.kCreateGuidesFromCapsAnn")))
            -command "xgmCaps2GuidesToolCreate";

        setParent ..;
  }


    python( "xg.registerCallback(\"CurrentDescriptionSet\",\"xgenm.xmaya.xgmCaps2GuidesTool.descChangedCB\")" );

    xgmCaps2GuidesToolDescChangedCB();
    //setParent ..;
}


global proc xgmCaps2GuidesToolDescChangedCB()
{
    if ( `textFieldGrp -exists xgmC2GTMainDesc` ) {
        string $desc = python( "xgui.currentDescription()" );
        if ( $desc == "" ) {
	    $desc = "<NONE>";
	}
        textFieldGrp -e -text $desc xgmC2GTMainDesc;        
    } else {
        python( "xg.deregisterCallback(\"CurrentDescriptionSet\",\"xgenm.xmaya.xgmCaps2GuidesTool.descChangedCB\")" );
    }
}


global proc xgmCaps2GuidesToolCreate()
{
    python("import xgenm.xmaya.xgmCaps2GuidesTool");
    string $sel[] = `ls -sl`;

    if (size($sel) == 0) {
        confirmDialog -title (uiRes("m_xgmCaps2GuidesTool.kCaps2guidesError4")) 
		      -m (uiRes("m_xgmCaps2GuidesTool.kErrornoCapsGeometrySelected"))  
		      -messageAlign "left" -button (uiRes("m_xgmCaps2GuidesTool.kOk3"));
        return;
    }

    string $xuv = `textFieldGrp -q -text xgmC2GTXUVPath`;
    float $density = `floatFieldGrp -q -v1 xgmC2GTdensity`;
    
    optionVar -sv "xgmC2GTXUVPath" $xuv;
    optionVar -fv "xgmC2GTdensity" $density;
 
    string $cmd = ("xgenm.xmaya.xgmCaps2GuidesTool.caps2guides("+$density+", '"+$xuv+"')");
    print ($cmd+"\n");

    python($cmd);

}


//
// What follows is everything needed for shrinking the CAPS to get a better
// fit before generating maps and guides.
//


//
// Get list of edges in selected mesh or components
//
proc string[] getEdges()
{
    select -r `polyListComponentConversion -te`;
    string $result[]=`filterExpand -ex true -sm 32`;
    return $result;
    
}


//
// Get list of vertices from selected mesh or components
//
proc string[] getVertices()
{
    select -r `polyListComponentConversion -tv`;
    string $result[]=`filterExpand -ex true -sm 31`;
    return $result;
}


//
// Filter vertices from selection list whose u or v equals the specified value
//
proc string[] selectVertexUV(int $axis, float $value)
{
    string $keep[];
    string $sel[] = `polyListComponentConversion -tuv`;
    select -r $sel;
    $sel = `filterExpand -expand true -sm 35`;
    
    string $s;
    int $n = 0;
    for ($s in $sel) {
        float $uv[] = `polyEditUV -q -u -v $s`;
        float $val = $uv[$axis];
        if (abs($val-$value) < .001) {
            $keep[$n++] = $s;
        }
    }
    $cmd = "polyListComponentConversion -tv ";
    for ($s in $keep) {
        $cmd += ($s+" ");
    }
    return eval($cmd);
}


//
// Select edges from specified mesh
//
proc polySelectEdges(string $mesh, string $method)
{
    select -r $mesh;
    string $edges[] = `getEdges`;
    if (`size $edges`){
        string $buffer[];
        int $numTokens;
        $numTokens = `tokenize $edges[0] "[]" $buffer`;
        
        string $cmd = "polySelect -";
        $cmd += $method;
        $cmd += " ";
        $cmd += $buffer[1];
        
        if (`size $edges` > 1){
            int $i;
            for ($i = 1;$i < `size $edges`;$i++){
                $numTokens = `tokenize $edges[$i] "[]" $buffer`;
                $cmd += " -";
                $cmd += $method;
                $cmd += " ";
                $cmd += $buffer[1];
            }
        }
        eval($cmd);
    }
}


//
// Shrink the botton edge of a polymesh cap by some fraction [0,1]
//
proc shrinkSingleCap(string $mesh, float $scale, int $axis, float $end)
{
    polySelectEdges($mesh, "edgeBorder");
    string $verts[] = getVertices();
    
    $verts = selectVertexUV($axis, $end);
    
    string $vtx;
    int $n = 0;
    float $center[] = {0, 0, 0};
    for ($vtx in $verts) {
        float $p[] = `xform -q -t $vtx`;
        $center[0] += $p[0];
        $center[1] += $p[1];
        $center[2] += $p[2];
        $n++;
    }
    if ($n == 0) {
		string $fmt = (uiRes("m_xgmCaps2GuidesTool.kHasNoVertices"));
        print `format -s $mesh $fmt`;
        return;
    }
    
    $center[0] /= $n;
    $center[1] /= $n;
    $center[2] /= $n;
    
    float $del[3];
    for ($vtx in $verts) {
        float $p[] = `xform -q -t $vtx`;
        $del[0] = $center[0] - $p[0];
        $del[1] = $center[1] - $p[1];
        $del[2] = $center[2] - $p[2];
        $del[0] *= $scale;
        $del[1] *= $scale;
        $del[2] *= $scale;
        polyMoveVertex -ws true -t $del[0] $del[1] $del[2] $vtx;
    }
}


//
// Shrink all the caps in the specified group 
//
proc shrinkCaps(string $meshGroup, float $scale, int $axis, float $end)
{
    string $sel[] = `listRelatives -children $meshGroup`;
    string $s;
    for ($s in $sel) {
        shrinkSingleCap($s, $scale, $axis, $end);
    }
    select -r $meshGroup;
}


global proc xgmShrinkCaps()
{
    string $sel[] = `ls -sl`;
    if (size($sel) == 0) {
        confirmDialog -title (uiRes("m_xgmCaps2GuidesTool.kXgmshrinkcapsError"))
            -m (uiRes("m_xgmCaps2GuidesTool.kErrorNoCapsGroupSelected"))
            -messageAlign "left" -button (uiRes("m_xgmCaps2GuidesTool.kOk4"));
        return;
    }
    
    float $scale = `floatSliderGrp -q -v xgmC2GTshrinkCapsFrame_scale`;
    float $end = `floatFieldGrp -q -value1 xgmC2GTshrinkCapsFrame_end`;
    int $axis = `radioButtonGrp -q -sl xgmC2GTshrinkCapsFrame_axis`;
    $axis--;

	string $fmt = (uiRes("m_xgmCaps2GuidesTool.kShrinkCaps"));
    print `format -s $sel[0] -s $scale -s $axis -s $end $fmt`;

    shrinkCaps($sel[0], $scale, $axis, $end);
}
