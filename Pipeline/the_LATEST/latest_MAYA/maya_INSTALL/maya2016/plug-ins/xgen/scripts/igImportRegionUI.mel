//**************************************************************************/
// Copyright (c) 2012 Autodesk, Inc.
// All rights reserved.
//
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information written by Autodesk, Inc., and are
// protected by Federal copyright law. They may not be disclosed to third
// parties or copied or duplicated in any form, in whole or in part, without
// the prior written consent of Autodesk, Inc.
//**************************************************************************/


/** Import region that will shape the iGroom */
global proc igImportRegionUI()
{
    global string $igBasepath;
    string $path = "";
    string $desc = igCurrentDescription();
    if ( `attributeQuery -ex -node $desc "mapPath"` ) {
        $path = `getAttr ($desc+".mapPath")`;
        $path = strip($path);
    }

    // Get the base for the path from the descriptions path. We will always
    // grab the first entry when multiples are present.
    $igBasepath = igOutputDir( $desc );
    if ( $path == "" ) {
        $path = $igBasepath + "igroom";
    }
    
    if (`window -exists igImportRegionWindow`)
        deleteUI -window  igImportRegionWindow;

    window -sizeable false -minimizeButton false -maximizeButton false
	    -menuBar false -width 600 -height 100
	    -title (uiRes("m_igImportRegionUI.kImportMaps")) igImportRegionWindow;

    columnLayout -adj on -rs 10;
    {
        // Create a text field for the filename.
		string $igroomImport = (uiRes("m_igImportRegionUI.kIgroomImport"));
        $browser = "igFileBrowser \"" + $igroomImport + "\" igImportRegionPathField 1";
        textFieldButtonGrp -label (uiRes("m_igImportRegionUI.kMapPath")) -tx $path
            -bl (uiRes("m_igImportRegionUI.kBrowse")) -bc $browser -cal 1 right -adj 2
            -ann (uiRes("m_igImportRegionUI.kBrowseAnnot"))
            igImportRegionPathField;

        rowLayout -numberOfColumns 3 -columnWidth3 130 130 130
            -columnAlign3 "center" "center" "center"
            -adjustableColumn3 1;
        {
            // Control over the dialog
            text -label "";
            button -label (uiRes("m_igImportRegionUI.kImport")) -w 130
                -ann (uiRes("m_igImportRegionUI.kImportAnnot"))
                -c "igImportRegion;deleteUI igImportRegionWindow;";
            button -label (uiRes("m_igImportRegionUI.kCancel")) -w 130 
                -ann (uiRes("m_igImportRegionUI.kCancelAnnot"))
                -c "deleteUI igImportRegionWindow";
            setParent ..;
        }

        setParent ..;
    }

    showWindow igImportRegionWindow;

    // Dont let the window pop-up the wrong size
    window -e -width 600 igImportRegionWindow;
    window -e -height 70 igImportRegionWindow;
}


global proc igImportRegion()
{
    global string $igBasepath;
    global string $igNullDescriptionTag;

    string $path = `textFieldButtonGrp -q -tx igImportRegionPathField`;
    
    string $desc = igCurrentDescription();
    if ( $desc != $igNullDescriptionTag && $desc != "" ) {
        waitCursor -state on;
        iGroom -ir $path -d $desc;
        
        // Get path to be relative to basepath
        $path = strip($path);
        if ( `startsWith $path "/"`){
            if ( `startsWith $igBasepath "./"`){
                string $pwd = `getenv "PWD"` + "/";
                $igBasepath = $pwd + $igBasepath;
                $igBasepath = `substitute "/./" $igBasepath "/"`;
            }
        }
        if ( `startsWith $path $igBasepath` ) {
            $path = `substitute $igBasepath $path ""`;
        }
        $path = igValidPath($path);
    
        // Remember what was entered before via attributes on the description
        if ( !`attributeQuery -ex -node $desc "mapPath"` ) {
            addAttr -ln "mapPath" -sn "mapPath" -dt "string" $desc;
        }
        setAttr -type "string" ($desc+".mapPath") $path;
        
        waitCursor -state off;
    }
}
