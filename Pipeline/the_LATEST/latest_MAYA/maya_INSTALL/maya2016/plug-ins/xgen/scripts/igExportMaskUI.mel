// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

/**
 * @file igExportMaskUI.mel
 * @brief UI for exporting mask from iGroom.
 *
 * <b>CONFIDENTIAL INFORMATION: This software is the confidential and
 * proprietary information of Walt Disney Animation Studios ("WDAS").
 * This software may not be used, disclosed, reproduced or distributed
 * for any purpose without prior written authorization and license
 * from WDAS. Reproduction of any section of this software must include
 * this legend and all copyright notices.
 * Copyright Disney Enterprises, Inc. All rights reserved.</b>
 *
 * @author Thomas V Thompson II
 *
 * @version tthompso  07/13/07  Initial Version
 * @version tthompso  11/09/07  Switch to texels per unit
 */


/** Export iGroom mask for later use */
global proc igExportMaskUI()
{
    global string $igBasepath;
    string $path = "";
    float $tpu = 20.0;
    
    string $desc = igCurrentDescription();
    if ( `attributeQuery -ex -node $desc "texelsPerUnit"` ) {
        $tpu = `getAttr ($desc+".texelsPerUnit")`;        
    } else if ( `attributeQuery -ex -node $desc "texelSize"` ) {
        $tpu = 1.0 / `getAttr ($desc+".texelSize")`;        
    }

    // Get the base for the path from the descriptions path. We will always
    // grab the first entry when multiples are present.
    $igBasepath = igOutputDir( $desc );
    
    // Construct the long version of the path for the user. This path
    // is relative to the current working directory.
    $path = $igBasepath + "igroom/mask/";
    
    if (`window -exists igExportMaskWindow`)
        deleteUI -window  igExportMaskWindow;

	string $fmt = (uiRes("m_igExportMaskUI.kIgroomExportMask"));
    window -sizeable false -minimizeButton false -maximizeButton false
	    -menuBar false -width 600 -height 100
            -title `format -s $desc $fmt` igExportMaskWindow;

    columnLayout -adj on -rs 10;
    {
        // Create a text field for the filename.
        $browser = "igFileBrowser \"iGroom Export\" igExportMaskPathField 1";
        textFieldButtonGrp -label (uiRes("m_igExportMaskUI.kMaskPath")) -tx $path
            -bl (uiRes("m_igExportMaskUI.kBrowse")) -bc $browser -cal 1 right -adj 2
            -ann (uiRes("m_igExportMaskUI.kBrowseAnn"))
            igExportMaskPathField;

        floatSliderGrp -label (uiRes("m_igExportMaskUI.kTexelsPerUnit")) -f true -adj 3 -cw 2 70
            -min 0.001 -max 100.0 -fmx 10000.0 -pre 3 -step 0.001 -v 25
            -ann (uiRes("m_igExportMaskUI.kTexelsAnnot"))
            igExportMaskTexelsPerUnitField;
        
        rowLayout -numberOfColumns 3 -columnWidth3 130 130 130
            -columnAlign3 "center" "center" "center"
            -adjustableColumn3 1;
        {
            // Control over the dialog
            text -l "";
            button -label (uiRes("m_igExportMaskUI.kExport")) -w 130
                -ann (uiRes("m_igExportMaskUI.kExportAnnot"))
                -c "igExportMask;deleteUI igExportMaskWindow;";
            button -label (uiRes("m_igExportMaskUI.kCancel")) -w 130 
                -ann (uiRes("m_igExportMaskUI.kCancelAnnot"))
                -c "deleteUI igExportMaskWindow";
            setParent ..;
        }

        setParent ..;
    }

    showWindow igExportMaskWindow;

    // Dont let the window pop-up the wrong size
    window -e -width 600 igExportMaskWindow;
    window -e -height 100 igExportMaskWindow;
}


global proc igExportMask()
{
    string $path = `textFieldButtonGrp -q -tx igExportMaskPathField`;
    float $tpu = `floatSliderGrp -q -v igExportMaskTexelsPerUnitField`;

    igExportMask2( $path, $tpu );
}

global proc igExportMask2( string $path, float $tpu )
{
    global string $igBasepath;
    global string $igNullDescriptionTag;

    string $desc = igCurrentDescription();
    if ( $desc != $igNullDescriptionTag && $desc != "" ) {
        waitCursor -state on;
        iGroom -xk $path -tpu $tpu -d $desc;
        waitCursor -state off;
    }
}
