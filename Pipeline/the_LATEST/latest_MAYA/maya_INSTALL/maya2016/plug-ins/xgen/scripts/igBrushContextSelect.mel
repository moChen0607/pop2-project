// Copyright (C) 1997-2013 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

/**
 * @file igBrushContextSelect.mel
 * @brief Tool for controling the iGroom brush.
 *
 * <b>CONFIDENTIAL INFORMATION: This software is the confidential and
 * proprietary information of Walt Disney Animation Studios ("WDAS").
 * This software may not be used, disclosed, reproduced or distributed
 * for any purpose without prior written authorization and license
 * from WDAS. Reproduction of any section of this software must include
 * this legend and all copyright notices.
 * Copyright Disney Enterprises, Inc. All rights reserved.</b>
 *
 * @author Thomas V Thompson II
 *
 * @version tthompso  05/14/07  Initial Version
 */


global proc igBrushContextSelect()
{
	global string $igNullDescriptionTag;
	string $desc = igCurrentDescription();
	if (( $desc=="" ) || ( $desc == $igNullDescriptionTag )) return;

	//We need to be bound to a geometry
	if( `getAttr ($desc+".faceIds[0]")` > 0 )
	{
		if ( !`igBrushContext -q -ex igBrushContextInstance` ) 
		{
			igBrushContext igBrushContextInstance;
		}
		setToolTo igBrushContextInstance;
	}
}


/**
 * Get a list of all the objects that the brush should be applied. This is
 * called each time the context is activated.
 */
global proc string[] igBrushObjects()
{
    string $geoms[];
    string $desc = igCurrentDescription();

    // Get the proxy geometry for the current description.
    // It will be used as intersection object in proxyBrush.
    $geoms = igGeometry( $desc );
    if ( size($geoms) == 0 ) {
        string $fmt = (uiRes("m_igBrushContextSelect.kNoGeometryFound"));
        warning `format -s $desc $fmt`;
    }
    return $geoms;
}


/**
 * Pack up the brush parameters for use within the brush context. These
 * are grabbed on the down event and then reused during drag and up events.
 */
global proc string[] igBrushParameters()
{
    global string $igActiveBrush;
    global float $igBrushMagnitude0;
    global float $igBrushMagnitude1;
    global float $igBrushMagnitude2;
    global float $igBrushMagnitude3;
    global float $igBrushMagnitude4;
    global float $igBrushMagnitude5;
    
    string $param[];
    int $i=0;

    $param[$i++] = igCurrentDescription();
    $param[$i++] = $igActiveBrush;
    if ( `optionVar -exists igBrushSpacing` )
         $param[$i++] = `optionVar -query igBrushSpacing`;
    else
        $param[$i++] = "0.05";
    if ( `optionVar -exists igBrushFalloff` )
        $param[$i++] = `optionVar -query igBrushFalloff`;
    else
        $param[$i++] = "1";
    if ( `optionVar -exists igBrushMaskUse` )
        $param[$i++] = `optionVar -query igBrushMaskUse`;
    else
        $param[$i++] = "1";
    $param[$i++] = $igBrushMagnitude0;
    $param[$i++] = $igBrushMagnitude1;
    $param[$i++] = $igBrushMagnitude2;
    $param[$i++] = $igBrushMagnitude3;
    $param[$i++] = $igBrushMagnitude4;
    $param[$i++] = $igBrushMagnitude5;

    return $param;
}
