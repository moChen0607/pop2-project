
//**************************************************************************/
// Copyright (c) 2012 Autodesk, Inc.
// All rights reserved.
//
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information written by Autodesk, Inc., and are
// protected by Federal copyright law. They may not be disclosed to third
// parties or copied or duplicated in any form, in whole or in part, without
// the prior written consent of Autodesk, Inc.
//**************************************************************************/


/** Export UvSet as ptex maps */
global proc igExportUVsUI()
{
    global string $igNullDescriptionTag;

    if (`window -exists igExportUVsWindow`)
        deleteUI -window  igExportUVsWindow;

    window -sizeable false -minimizeButton false -maximizeButton false
	    -menuBar false -width 600 -height 230
            -title (uiRes("m_igExportUVsUI.kIgroomExport")) igExportUVsWindow;

    columnLayout -adj on -rs 10;
    {
        formLayout igExportUVsDescLayout;
        {
            text -label (uiRes("m_igExportUVsUI.kDescription")) igExportUVsDescLabel;
            igCreateIconPopup( "igExportUVsDescMenu",
                               (uiRes("m_igExportUVsUI.kDescExp")),
                               (uiRes("m_igExportUVsUI.kDescExpAnnot")),
                               "" );
            string $descs[] = igAllDescriptions();
            for ( $desc in $descs ) {
                igAddDeepMenuItem( $desc, "igExportUVsDescMenu",
                                   "igExportUVsDescMenuCB" );
            }
            string $cdesc = igCurrentDescription();
            if ( $cdesc == "" ) 
                $cdesc = $igNullDescriptionTag;
            textField -edit -tx $cdesc igExportUVsDescMenuValue;
                
            setParent ..;
        }
        // Create a text field for the filename.
        $browser = "igFileBrowser \"iGroom Export\" igExportUVsPathField 1";
        textFieldButtonGrp -l (uiRes("m_igExportUVsUI.kMapPath"))
            -bl (uiRes("m_igExportUVsUI.kBrowse")) -bc $browser -cal 1 right -adj 2
            -ann (uiRes("m_igExportUVsUI.kBrowseAnnot"))
            igExportUVsPathField;

		textFieldGrp -l (uiRes("m_igExportUVsUI.kUvset")) -adj 2
            -ann (uiRes("m_igExportUVsUI.kUvsetAnnot"))
            igUvSetField;
            
        checkBoxGrp -l (uiRes("m_igExportUVsUI.kSyncToXgenPreviewColor")) -ncb 1 -l1 " " -v1 off
            -cc igSyncButtonCB
            -ann (uiRes("m_igExportUVsUI.kSyncAnnot"))
            igXGenSyncField;

        textFieldGrp -l (uiRes("m_igExportUVsUI.kXgenDescription")) -adj 2 -en false
            -ann (uiRes("m_igExportUVsUI.kXgenDescAnnot"))
            igXGenDescriptionField;

        rowLayout -numberOfColumns 3 -columnWidth3 130 130 130
            -columnAlign3 "center" "center" "center"
            -adjustableColumn3 1;
        {
            // Control over the dialog
            text -l "";
            button -label (uiRes("m_igExportUVsUI.kExport")) -w 130 
				-ann (uiRes("m_igExportUVsUI.kExportAnnot"))
                -c "igExportUVs; deleteUI igExportUVsWindow";
            button -label (uiRes("m_igExportUVsUI.kCancel")) -w 130 
                -ann (uiRes("m_igExportUVsUI.kCancelAnnot"))
                -c "deleteUI igExportUVsWindow";
            setParent ..;
        }

        // Attach the new layouts.
        formLayout -edit
            -attachForm igExportUVsDescLabel left 63
            -attachForm igExportUVsDescLabel top 8
            -attachNone igExportUVsDescLabel right
            -attachNone igExportUVsDescLabel bottom
            
            -attachForm    igExportUVsDescMenuValue top 8
            -attachControl igExportUVsDescMenuValue left 10 igExportUVsDescLabel
            -attachNone    igExportUVsDescMenuValue right
            -attachNone    igExportUVsDescMenuValue bottom
            
            -attachForm    igExportUVsDescMenuImage top 8
            -attachControl igExportUVsDescMenuImage left 3 igExportUVsDescMenuValue
            -attachNone    igExportUVsDescMenuImage right
            -attachNone    igExportUVsDescMenuImage bottom

            igExportUVsDescLayout;
        
        setParent ..;
    }

    igExportUVsFillFields;
    showWindow igExportUVsWindow;

    // Dont let the window pop-up the wrong size
    window -e -width 600 igExportUVsWindow;
    window -e -height 230 igExportUVsWindow;
}


global proc igExportUVsFillFields()
{
    global string $igBasepath;
    string $path = "";
    string $xdesc = "";
    string $uvSet = "map1";
    
    string $desc = `textField -q -tx igExportUVsDescMenuValue`;
    if ( `attributeQuery -ex -node $desc "mapPath"` ) {
        $path = `getAttr ($desc+".mapPath")`;
        $path = strip($path);
    }
    if ( `attributeQuery -ex -node $desc "uvSet"` ) {
        $uvSet = `getAttr ($desc+".uvSet")`;
    }
   	
    if ( `attributeQuery -ex -node $desc "xgenDesc"` ) {
        $xdesc = `getAttr ($desc+".xgenDesc")`;
    }

    // Get the base for the path from the descriptions path. We will always
    // grab the first entry when multiples are present.
    $igBasepath = igOutputDir( $desc );
    if ( $path == "" ) {
        $path = $igBasepath + "igroom";
    }
    
    textFieldButtonGrp -e -tx $path igExportUVsPathField;
    checkBoxGrp -e -v1 off igXGenSyncField;
    textFieldGrp -e -en false -tx $xdesc igXGenDescriptionField;
    textFieldGrp -e -tx $uvSet igUvSetField;
}


/** Allow editing multiple igDescriptions obejcts */ 
global proc igExportUVsDescMenuCB( string $desc, string $menu )
{
    string $menuValue = $menu + "Value";
    if (`textField -exists $menuValue`) {
        textField -e -tx $desc $menuValue;
    }
    igExportUVsFillFields;
}


global proc igSyncButtonCB()
{
    int $state = `checkBoxGrp -q -v1 igXGenSyncField`;
    if ( $state == on ) {
        textFieldGrp -e -en true igXGenDescriptionField;
    } else {
        textFieldGrp -e -en false igXGenDescriptionField;
    }
}


global proc igExportUVs()
{
    global string $igBasepath;
    global string $igNullDescriptionTag;

    string $desc = `textField -q -tx igExportUVsDescMenuValue`;
    string $path = `textFieldButtonGrp -q -tx igExportUVsPathField`;
    string $xdesc = `textFieldGrp -q -tx igXGenDescriptionField`;
    string $xpal = python("xg.palette(\""+$xdesc+"\")");
    string $uvSet = `textFieldGrp -q -tx igUvSetField`;
    
    if ( $desc != $igNullDescriptionTag && $desc != "" && $uvSet!= "" ) {
        waitCursor -state on;
        
        // Get the patch geometry
        $mesh = `getAttr ($desc+".geom")`;

		string $ptexPath = $path + "/" + $uvSet;
		
		string $bakeCmd = "ptexBake -inMesh \"" + $mesh + "\" -outPtex \"" + $ptexPath + "\" -bakeUV \"" + $uvSet + "\"" ;
		evalEcho( $bakeCmd );

        // Get path to be relative to basepath
        $path = strip($path);
        if ( `startsWith $path "/"`){
            if ( `startsWith $igBasepath "./"`){
                string $pwd = `getenv "PWD"` + "/";
                $igBasepath = $pwd + $igBasepath;
                $igBasepath = `substitute "/./" $igBasepath "/"`;
            }
        }
        if ( `startsWith $path $igBasepath` ) {
            $path = `substitute $igBasepath $path ""`;
        }

        $path = igValidPath($path);

        // Remember what was entered before via attributes on the description
        if ( !`attributeQuery -ex -node $desc "mapPath"` ) {
            addAttr -ln "mapPath" -sn "mapPath" -dt "string" $desc;
        }
        if ( !`attributeQuery -ex -node $desc "xgenDesc"` ) {
            addAttr -ln "xgenDesc" -sn "xgenDesc" -dt "string" $desc;
        }
        if ( !`attributeQuery -ex -node $desc "uvSet"` ) {
            addAttr -ln "uvSet" -sn "uvSet" -dt "string" $desc;
        }
        setAttr -type "string" ($desc+".mapPath") $path;
        setAttr -type "string" ($desc+".xgenDesc") $xdesc;
        setAttr -type "string" ($desc+".uvSet") $uvSet;

        // If the sync option was active, copy everything over to the
        // XGen description along with some error checking.
        int $state = `checkBoxGrp -q -v1 igXGenSyncField`;        
        if ( $state == on ) {
            python("xg.setAttr(\"color\",\"vmap(\\\""+$ptexPath+"\\\")->clamp(0.01,1)\",\""+$xpal+"\",\""+$xdesc+"\",\""+"GLRenderer"+"\")");                                    
            python("xgui.refreshDescriptionEditor()");
        }
        

        waitCursor -state off;
    }
}

