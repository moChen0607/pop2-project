/*********************************************************************NVMH3****
Path:  NVSDK\Common\media\cgfx1.4
File:  $Id: //sw/devtools/FXComposer2/Alpha4+/SDK/MEDIA/CgFX1.4/simpleOGL.cgfx#1 $

Copyright NVIDIA Corporation 2002
TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED
*AS IS* AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS
BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES
WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS)
ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS
BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.


Comments:
	$Id: //sw/devtools/FXComposer2/Alpha4+/SDK/MEDIA/CgFX1.4/simpleOGL.cgfx#1 $
	Lambert-lit white surface,with either colored lamp or white variable-intensity lamp

******************************************************************************/

///////////////// Untweakables //////////

float4x4 WorldITXf : WorldInverseTranspose;
float4x4 WorldViewProjXf : WorldViewProjection;
float4x4 WorldXf : World;

///////////////// tweakables ////////

float Intensity 
<
	string UIName = "Intensity";
	string UIWidget = "Slider";
	float UIMin = 0;
	float UIMax = 1;
> = 1.0f;

float4 LightPos : Position
<
	string Object = "PointLight";
	string UIName = "Lamp Position";
	string Space = "World";
> = {100.0f, 100.0f, 100.0f, 0.0f};
                                 
float3 LampColor : Diffuse
<
  string UIName =  "Light Color";
  string UIWidget = "Color";
> = {0.8f, 0.5f, 0.1f};

///////////// textures //////////

texture DiffuseTexture : Diffuse
<
	string ResourceName = "nvidia1.dds";
	string ResourceType = "2D";
>;

sampler2D DiffuseSampler = sampler_state
{
	Texture = <DiffuseTexture>;
  	minFilter = LinearMipMapLinear;
  	magFilter = Linear;
};

texture DiffuseTexture2 : Diffuse
<
	string ResourceName = "checker.dds";
	string ResourceType = "2D";
>;

sampler2D DiffuseSampler2 = sampler_state
{
	Texture = <DiffuseTexture2>;
  minFilter = LinearMipMapLinear;
  magFilter = Linear;
};

///////////// structures for VB->VS->FS connections /////////

struct appdata 
{
	float3 Position	: POSITION;
	float4 Normal	: NORMAL;
	float2 texcoord0: TEXCOORD0;
	float3 Tangent  : TEXCOORD1;
	float3 Binormal : TEXCOORD2;
};

struct vertexOutput 
{
	float4 HPosition	: POSITION;
	float2 texcoord0	: TEXCOORD0;
	float4 diffCol		: COLOR0;
};

//////////////////////////
// shaders ///////////////
//////////////////////////

vertexOutput VShader(appdata IN)
{
	vertexOutput OUT;
	float3 Nn = normalize(mul(WorldITXf, IN.Normal).xyz);
	float4 Po = float4(IN.Position.xyz,1.0f);
	float3 Pw = mul(WorldXf, Po).xyz;
	float3 Ln = normalize(LightPos.xyz - Pw).xyz;
	float3 mixColor = LampColor * max(0.0f, dot(Ln, Nn));
	OUT.diffCol = float4(mixColor.xyz,1.0f);
	OUT.HPosition = mul(WorldViewProjXf, Po);
	OUT.texcoord0 = IN.texcoord0;
	return OUT;
}

vertexOutput VShader2(appdata IN)
{
	vertexOutput OUT;
	float3 Nn = normalize(mul(WorldITXf, IN.Normal).xyz);
	float4 Po = float4(IN.Position.xyz,1.0f);
	float3 Pw = mul(WorldXf, Po).xyz;
	float3 Ln = normalize(LightPos.xyz - Pw).xyz;
	float mixColor = Intensity * max(0.0f, dot(Ln, Nn));
	OUT.diffCol = float4(mixColor.xxx,1.0f);
	OUT.texcoord0 = IN.texcoord0;
	OUT.HPosition = mul(WorldViewProjXf, Po);
	return OUT;
}

float4 simpleFS(vertexOutput IN) : COLOR
{
	float4 diff = tex2D(DiffuseSampler, IN.texcoord0.xy);
	float4 diff2 = tex2D(DiffuseSampler2, IN.texcoord0.xy);
	return (diff + diff2)* IN.diffCol;
}

/////////////////////////////////////////////////////////
// techniques ///////////////////////////////////////////
/////////////////////////////////////////////////////////

technique Color {
	pass p0 {
		DepthFunc = LEqual;
		DepthTestEnable = true;
		VertexProgram = compile arbvp1 VShader();
		FragmentProgram = compile arbfp1 simpleFS();
	}
}

technique Grey {
	pass p0 {
		DepthFunc = LEqual;
		DepthTestEnable = true;
		VertexProgram = compile arbvp1 VShader2();
		FragmentProgram = compile arbfp1 simpleFS();
	}
}

/////////////////////////////////////////////////////////
///////////////////////////////////////////////// eof ///
/////////////////////////////////////////////////////////
