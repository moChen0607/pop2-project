import os
import os.path
import re

__all__ = [ 'MayaFileIterator', 'getMayaFilesByDirectory' ]

def MayaFileIterator(rootDirectory,
                     skipMA=False,
                     skipMB=False,
                     skipFiles=(),
                     skipDirectories=(),
                     descend=True):
	"""
	Iterator to walk all Maya files in or below a specific directory.

	Parameters:
		skipMA			: Skip files with a .ma extension
		skipMB			: Skip files with a .mb extension
		skipFile		: Do not process any files with the given name.
							Name is given as a regular expression so multiple
							files can be skipped using this. To match the
							name exactly you must use escaped special characters.

							'.*temp'	: Matches 'temp', 'xtemp', and 'xtempY'
							'^temp$' 	: Matches 'temp' only
							'^t*p$'	 	: Matches 'temp' and 'trip' but not 'temps' or 'stamp'
		skipDirectories : Do not process any directories with the given name.
							Name is given as a regular expression so multiple
							directories can be skipped using this. To match
							the name exactly you must use escaped special characters.

							'.*temp'	 : Matches 'temp', 'xtemp', and 'xtempY'
							'temp\\w'	 : Matches 'temp.mb' or 'temp.file.mb' but not 'tempfile.mb'
							't*p\\w'	 : Matches 'temp' and 'trip' but not 'temps' or 'stamp'
		descend		   	: Recurse into directories

	Return:
		list of filepaths

	Note that only .ma and .mb extensions are recognized so if you turn on both
	skipMA and skipMB nothing will be found. The iterator gives the full path of
	each file found relative to the root directory.

	Usage:
		Find all Maya files under "root/projects" that aren't temporary files,
		defined as those named temp.ma, temp.mb, or that live in a temp/ subdirectory.

		import MayaFileIterator
		for path in MayaFileIterator.MayaFileIterator('Maya/projects',
													  skipFiles=['^temp.m{a,b}$'],
													  skipDirectories=['temp']):
			print path
	"""
	filePatterns = [re.compile(skipFile) for skipFile in skipFiles]
	dirPatterns = [re.compile(skipDirectory) for skipDirectory in skipDirectories]

	#======================================================================
	def __isFileExcluded(file):
		"""
		Check to see if the named file is excluded by the filters
		"""
		fileName, fileExtension = os.path.splitext(file)
		if skipMA and fileExtension == '.ma':  return True
		if skipMB and fileExtension == '.mb':  return True
		if fileExtension not in ['.ma','.mb']: return True

		for filePattern in filePatterns:
			if filePattern.match( file ):
				return True
			print '%s did not match pattern' % file

		return False

	#======================================================================
	def __isDirectoryExcluded(dir):
		"""
		Check to see if the named directory is excluded by the filters.
		Note that this is not applied at the root directory level. It is
		assumed that if you want to exclude the root you won't bother
		calling the iterator.
		"""
		if not descend:
			print 'NOT DESCENDING into',d
			return True

		for dirPattern in dirPatterns:
			if dirPattern.match( dir ):
				return True

		return False

	for root, dirs, files in os.walk(rootDirectory, topdown=True):
		# The [:] is to overwrite the existing list in place so that descent
		# through excluded directories in os.walk is avoided
		dirs[:] = [d for d in dirs if not __isDirectoryExcluded(d)]
		for name in (f for f in files if not __isFileExcluded(f)):
			yield os.path.join(root, name)

#======================================================================
def getMayaFilesByDirectory(generator):
	"""
	Help function for the MayaFileIterator class that runs the generator
	and then packages up the results in a directory-centric format.

	Parameter
		generator : A MayaFileIterator function call, already constructed but not used

	Return value
		A list of ( DIRECTORY, [FILES] ) pairs consisting of
		all matching files from generation using the passed-in generator.

	theGen = MayaFileIterator("Maya/projects", skipFiles=['temp\\w'])
	for (theDir,theFiles) in getMayaFilesByDirectory(theGen):
		print theDir
		for theFile in theFiles:
			print ' -- ',theFile
	"""
	dirList = []
	lastDir = None
	for fullPath in generator:
		(theDir,theFile) = os.path.split( fullPath )
		if theDir != lastDir:
			dirList.append( (theDir, [theFile]) )
			lastDir = theDir
		else:
			dirList[len(dirList)-1][1].append( theFile )
	return dirList

# Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
# All rights reserved.
#
# The coded instructions, statements, computer programs, and/or related
# material (collectively the "Data") in these files contain unpublished
# information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
# which is protected by U.S. and Canadian federal copyright law and by
# international treaties.
#
# The Data is provided for use exclusively by You. You have the right to use,
# modify, and incorporate this Data into other products for purposes authorized 
# by the Autodesk software license agreement, without fee.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
# DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
# INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
# OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
# LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
# DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
# LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

