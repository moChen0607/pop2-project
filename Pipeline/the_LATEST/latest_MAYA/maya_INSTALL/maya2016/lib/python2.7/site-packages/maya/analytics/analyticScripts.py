import re
import maya.cmds
from .BaseAnalytic import BaseAnalytic
from .decorators import addMethodDocs,addHelp,makeAnalytic

jobPattern = re.compile( '"[^"]+"' )
@addMethodDocs
@addHelp
@makeAnalytic
class analyticScripts(BaseAnalytic):
	"""
	Analyze usage of the 'scriptJob' callback.
	"""
	def __checkExists(self, jobArgs, shortName, longName):
		"""
		Utility to see if the named flag from the 'scriptJob' command appears
		in the output given by the 'scriptJob.(listJobs=True)' command.

		If the flag was found then a class member variable with the same
		longName as the flag is incremented for later use. e.g. if the flag
		longName is 'FLAG' this will do the equivalent of:
			self.FLAG += 1
		"""
		shortFlagName = '-%s' % shortName
		longFlagName = '-%s' % longName
		if (shortFlagName in jobArgs) or (longFlagName in jobArgs):
			if self.showDetails:
				self._outputCSV( [longName, '', jobArgs[-1:][0]] )
			else:
				if hasattr(self, longName):
					setattr(self, longName, getattr(self, longName) + 1)
				else:
					setattr(self, longName, 1)

	def __checkFlag(self, jobArgs, shortName, longName):
		"""
		Utility to see if the named flag from the 'scriptJob' command appears
		in the output given by the 'scriptJob.(listJobs=True)' command followed
		by a parameter that we wish to collect. For example if the argument is
		'conditionChange' then we also want to know the condition. Requires
		a bit more work than simple existence check.

		When self.showDetails is turned off then a count per ARG is maintained.
		If the flag was found then a class member variable is incremented. If
		the flag is named 'FLAG' and its argument is 'ARG' then the code will
		be equivalent to this:
			self.FLAG[ARG] += 1

		When self.showDetails is turned on then each active flag's data is
		displayed as it is encountered. There's no need to maintain counts in
		this case since they won't be reported.
		"""
		shortFlagName = '-%s' % shortName
		longFlagName = '-%s' % longName
		foundKey = False
		for arg in jobArgs:
			if foundKey:
				if self.showDetails:
					self._outputCSV( [longName, arg, jobArgs[-1:][0]] )
				else:
					newList = {}
					if hasattr(self, longName):
						newList = getattr( self, longName )
					newList[arg] = newList.get(arg,0) + 1
					setattr(self, longName, newList)
				# Assumption here that only one condition appears per command
				break
			else:
				if (shortFlagName == arg) or (longFlagName == arg):
					foundKey = True

	def __reportExists(self, name):
		"""
		This reports flag data in the CSV format as collected by __checkExists.
		See that method for a description of how the data was collected.
		"""
		if hasattr(self, name):
			self.scriptCount += 1
			self._outputCSV( [name, '', getattr(self,name)] )

	def __reportFlag(self, name):
		"""
		This reports flag data in the CSV format as collected by __checkFlag.
		See that method for a description of how the data was collected.
		"""
		if hasattr(self, name):
			argList = getattr(self, name)
			if argList != None:
				for arg,count in argList.iteritems():
					self.scriptCount += 1
					self._outputCSV( [name, arg, count] )

	def run(self, showDetails=False):
		"""
		Generates the number of scriptJobs active in the scene, grouped
		by the type of event that they are watching. No details of the
		actual event are collected. Output is in CSV form with the
		columns 'eventType,count', ordered from most frequent to least
		frequent.

		Set the option 'showDetails' flag to True to include the name
		of the script called and detail parameters for certain other
		triggers (e.g. the name of the node whose name change is being
		monitored).
		"""
		if not self._open():
			return

		try:
			self.showDetails = showDetails
			self.scriptCount = 0

			existenceFlags = [ ('ie',  'idleEvent')
							 , ('tc',  'timeChange')
							 , ('ui',  'uiDeleted')
							 ]
			argumentFlags  = [ ('cc', 'conditionChange')
							 , ('cf', 'conditionFalse')
							 , ('ct', 'conditionTrue')
							 , ('e',  'event')
							 ]
			# This flags have arguments but those arguments include customer
			# scene information so they have to be explicitly enabled.
			namedFlags = [ ('nnc', 'nodeNameChanged')
						 , ('ac',  'attributeChange')
						 , ('ad',  'attributeDeleted')
						 , ('aa',  'attributeAdded')
						 , ('con', 'connectionChange') ]
			jobs = maya.cmds.scriptJob( listJobs=True )
			if self.showDetails:
				self._outputCSV( ['Event Type', 'Parameter', 'Script'] )
				argumentFlags += namedFlags
			else:
				self._outputCSV( ['Event Type', 'Parameter', 'Count'] )
				existenceFlags += namedFlags
			for job in jobs:
				jobArgs = []
				# Temporarily replace escaped quotes with a special character
				# to make separation easier.
				jobWithoutQuotes = job.replace( '\\"', '\a' )
				for p in jobPattern.finditer( jobWithoutQuotes ):
					quotedArg = p.group(0).replace( '\a', '\\"' )
					jobArgs.append( quotedArg[1:][:len(quotedArg)-2] )
				for (shortName,longName) in existenceFlags:
					self.__checkExists( jobArgs, shortName, longName )
				for (shortName, longName) in argumentFlags:
					self.__checkFlag( jobArgs, shortName, longName )

			# If details are being shown they were output during the
			# checking phase so there's nothing to do here.
			if not self.showDetails:
				for (shortName,longName) in existenceFlags:
					self.__reportExists( longName )
				for (shortName, longName) in argumentFlags:
					self.__reportFlag( longName )
	
		except Exception, ex:
			print 'Analytic failed: "%s"' % str(ex)
		finally:
			self._close()

# Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
# All rights reserved.
#
# The coded instructions, statements, computer programs, and/or related
# material (collectively the "Data") in these files contain unpublished
# information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
# which is protected by U.S. and Canadian federal copyright law and by
# international treaties.
#
# The Data is provided for use exclusively by You. You have the right to use,
# modify, and incorporate this Data into other products for purposes authorized 
# by the Autodesk software license agreement, without fee.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
# DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
# INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
# OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
# LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
# DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
# LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

