import maya.cmds
from .BaseAnalytic import BaseAnalytic
from .decorators import addMethodDocs,addHelp,makeAnalytic

@addMethodDocs
@addHelp
@makeAnalytic
class analyticCharacter(BaseAnalytic):
	"""
	Analyze the DG connectivity.
	"""
	def run(self, showDetails=False):
		"""
		Examine the characters in the scene for a few basic structure
		elements. The CSV file headings are generic so as to maximize the
		ability to process the data - 'Character','Type','Value'.

		When 'showDetails' is False, the default then the following rows are
		reported:
			- Character Name, 'Member', Number of members in the character
			- Character Name, 'Map', Character to which it is mapped

		When 'showDetails' is True then the data looks like this:
			- Character Name, 'Member', Character Member Plug name
			- Character Name, 'Map', Character to which it is mapped
		"""
		try:
			if not self._open():
				return

			self._outputCSV( [ 'Character'
							 , 'Type'
							 , 'Value'
							 ] )

			characterList = maya.cmds.ls( type='character' )
			try:
				if len(characterList) == 0:
					print 'Warning: No characters to report'
					return
			except Exception, ex:
				# If the 'character' command returns None this is the easiest
				# way to trap that case.
				print 'Warning: No characters to report'
				return

			for character in characterList:
				characterName = self._sanitizedNodeName(character, showDetails)
				memberList = maya.cmds.character( character, query=True )
				if memberList == None:
					memberList = []
				if showDetails:
					for member in memberList:
						self._outputCSV( [ character, 'Member', member ] )
				else:
					self._outputCSV( [ characterName, 'Member', str(len(memberList)) ] )

				# This O(N^2) check for character maps is easier than looking
				# through connections. It's only necessary because the
				# 'characterMap' command can only be queried with both
				# characters as arguments.
				for character2 in characterList:
					# Not sure why Maya thinks a character maps onto itself.
					if character2 == character:
						continue
					if maya.cmds.characterMap( [character, character2], query=True ) != None:
						character2Name = self._sanitizedNodeName(character2, showDetails)
						self._outputCSV( [ characterName, 'Map', character2Name ] )

		except Exception, ex:
			print 'Analytic failed: "%s"' % str(ex)
		finally:
			self._close()


# Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
# All rights reserved.
#
# The coded instructions, statements, computer programs, and/or related
# material (collectively the "Data") in these files contain unpublished
# information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
# which is protected by U.S. and Canadian federal copyright law and by
# international treaties.
#
# The Data is provided for use exclusively by You. You have the right to use,
# modify, and incorporate this Data into other products for purposes authorized 
# by the Autodesk software license agreement, without fee.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
# DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
# INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
# OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
# LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
# DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
# LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

