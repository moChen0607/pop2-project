"""
Summarize all of the analyticNodeType data into a pair of spreadsheets.
The optional parameter indicates the directory where the data is to
be found. If omitted it will assume the current directory.

If the file defaultNodes.csv exists then it will contain the list of
Maya's default (undeletable) nodes and should be in this form:

defaultNodes.csv
	"Default Node","Node Type"
	"DEFAULT NODE NAME","DEFAULT NODE TYPE"
	...

All nodes appearing in this file will be filtered out of the analytics.
If the file doesn't exist then all nodes will be reported.

The directory is scanned for analytic collections. They appear as a
directory containing the file 'analyticNodeTypes.csv'. All of those
files are scanned and then summarized into the following two files:

summaryNodeTypes.csv
	The first file contains a list of the merged contents of all node type
	analytic files, filtered to remove default nodes. Only node types with
	a count > 0 are considered. For files A, B, and C the output will look
	like this:
	
		FILEA,,,FILEB,,,FILEC,,,
		,Node Type,Count,,Node Type,Count,,Node Type,Count
		,BLAH,23,,FOO,42,,BAR,11
	
summaryNodeTypeCounts.csv
	This indicates there the most frequent node types are BLAH in FILEA
	with 23 instances, FOO in FILEB with 42 instance, and BAR in FILEC
	with 11 instances.

	The second file contains a list of the merged contents of all node type
	analytic files, filtered to remove default nodes, sorted and aligned into
	one row per node type for node types in any file. If the node type count
	in a particular file is 0 then the field will be left empty rather than

	populating with a '0' to make visual inspection easier.
	
	The format of the CSV file is something like this:
	
		Sorted By Node Type Count,,,Sorted By Appearances,,,,Sorted By Node Type
		Node Type,Count,,Node Type,Appearances,Count,,,Node Type,Totals,FILEA,FILEB,FILEC
		BAR,11933,,FOO,26,4201,,BLAH,125,75,,50
	
	This indicates that node type BAR is the most frequent with 11933
	nodes in all files, though FOO appears in the most files at 26 with
	a (smaller) total of 4201 instances in those files, and for node type
	BLAH there are 125 of them in FILEA, none of them in FILEB, and 50 of
	them in FILEC.  The rows are sorted by node type name, ascending
	alphabetically.
"""
import os
import csv
import sys
import getopt
import operator

helpInfo = 'Usage: summarizeAnalyticNodeTypes.py [rootDirectoryWithData]'

rootDir = '.'
try:
	opts, args = getopt.getopt(sys.argv[1:], "h", ["help"])
	if len(args) > 0 : rootDir = args[0]
	for o, a in opts:
		if o in ("-h", "--help"):
			print helpInfo
			sys.exit()
except getopt.GetoptError as err:
	print str(err) # will print something like "option -a not recognized"
	print helpInfo
	sys.exit(2)

def analyticDirectoriesBelow(dataDir):
	"""
	Descend the dataDir and find all directories below it containing the set
	of files generated by running animation analytics. The key file it looks
	for is "analyticNodeTypes.csv". If it finds that it assumes the directory
	contains analytic information and processes it in order.
	"""
	dirList = []
	for content in os.listdir(dataDir):
		childPath = os.path.join(dataDir, content)
		if os.path.isdir(childPath):
			subList = analyticDirectoriesBelow( childPath )
			dirList += subList
		elif content == "analyticNodeTypes.csv" and os.path.isfile(childPath):
			dirList.append( dataDir )
	return dirList

isDefault = {}
defaultCounts = {}

#======================================================================
#
# Read the list of default nodes so that they can be filtered out of the results.
# If there is a default node list it should exist at the root of the directory
# being analyzed.
#
try:
	with open(os.path.join(rootDir, 'defaultNodes.csv'), 'r') as csvfile:
		defaultReader = csv.reader(csvfile)
		for row in defaultReader:
			if row[0] == 'Default Node':
				continue
			defaultCounts[row[1]] = defaultCounts.get(row[1],0) + 1
	print 'Using default list found at %s' % rootDir
except Exception,ex:
	print 'No defaults, all nodes will be reported'
	pass

maxRowCount = 0
nodeTypeData = {}
nodeTypeTotals = {}
nodeTypeCounts = {}
nodeTypeCountTotals = {}
nodeTypeAppearances = {}

dirList = analyticDirectoriesBelow(rootDir)
dirList.sort( key=lambda x: x.lower() )
print 'Analyzing a total of %d directories' % len(dirList)

#======================================================================
#
# Walk each directory that contains the node type analytic results
#
for dir in dirList:
	nodeTypeFile = os.path.join(dir, 'analyticNodeTypes.csv')
	if not os.path.isfile(nodeTypeFile):
		print 'Skipping directory %s, it has no analytics' % dir
		continue
	print 'Processing directory %s' % dir
	nodeTypeData[dir] = []
	nodeTypeCounts[dir] = {}

	# Load the node type counts, keeping track of the maximum number of rows
	# for later formatting (since CSV files have to be written out by the row)
	with open(nodeTypeFile, 'r') as csvfile:
		nodeTypeReader = csv.reader(csvfile)
		myNodeTypeCounts = {}
		for row in nodeTypeReader:
			if row[0] == 'Node Type':
				assert((len(row) > 2 and row[3] == 'Count') or (row[1] == 'Count'))
				continue

			if len(row) > 2:
				count = int(row[3])
			else:
				# Old format from customers only had two columns
				count = int(row[1])

			# Remove the defaults from the counts. Assume that the default
			# node list came from the same cut of Maya as the analytic results
			# since we don't have the node name information for a true match.
			if row[0] in defaultCounts:
				count = count - defaultCounts[row[0]]
			if count > 0:
				myNodeTypeCounts[row[0]]  = count
			if len(myNodeTypeCounts) > maxRowCount:
				maxRowCount = len(myNodeTypeCounts)
	# Since we have to extract by index to accommodate writing rows the
	# dictionary has to be pulled out into two parallel lists.
	nodeTypeTotals[dir] = 0
	for nodeType,count in sorted(myNodeTypeCounts.iteritems(), key=operator.itemgetter(1), reverse=True):
		nodeTypeData[dir].append( nodeType )
		nodeTypeCounts[dir][nodeType] = count
		nodeTypeCountTotals[nodeType] = nodeTypeCountTotals.get(nodeType, 0) + count
		nodeTypeTotals[dir] += count
		nodeTypeAppearances[nodeType] = nodeTypeAppearances.get(nodeType,0) + 1

#======================================================================
#
# Generate the amalgamation of all node type data.
#
#======================================================================

with open(os.path.join(rootDir,'summaryNodeTypes.csv'), 'wb') as csvfile:
	summaryWriter = csv.writer(csvfile, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
	# First write out the canonical headers with the file name appearing above the
	# actual headers so that the data can be easily recognized.
	# The "sum" trick is to easily flatten out the list of lists we'd
	# otherwise get from the list comprehension. The idea is that the file
	# names appear every third column since we want them to be main headers
	# over the three columns from each file (blank, node type, count)
	summaryWriter.writerow( sum([['',j,''] for j in dirList],[]) )
	summaryWriter.writerow( sum([['','Node Type','Count'] for j in dirList],[]) )
	for row in range(0,maxRowCount):
		rowList = []
		for dir in dirList:
			if len(nodeTypeData[dir]) > row:
				nodeType = nodeTypeData[dir][row]
				rowList += ['',nodeType,nodeTypeCounts[dir][nodeType]]
			else:
				rowList += ['','','']
		summaryWriter.writerow( rowList )

#======================================================================
#
# Generate the summary file with totals and sorted columns.
#
#======================================================================

appearanceColumns = [(j,k,nodeTypeCountTotals[j]) for j,k in nodeTypeAppearances.iteritems()]
sortedAppearances = [j for j,k,c in sorted(appearanceColumns, key=operator.itemgetter(1,2), reverse=True)]

sortedCounts = [j for j,k in sorted(nodeTypeCountTotals.iteritems(), key=operator.itemgetter(1), reverse=True)]
with open(os.path.join(rootDir,'summaryNodeTypeCounts.csv'), 'wb') as csvfile:
	summaryWriter = csv.writer(csvfile, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
	summaryWriter.writerow( ['Sorted By Node Type Count','','','Sorted By Appearance','','','','','Sorted By Node Type'] )
	summaryWriter.writerow( ['Node Type', 'Count', '', 'Node Type', 'Appearances', 'Count', 'Average', '', 'Node Type','Totals']+dirList )
	totalsRow = ['','','','','','','','','Total',sum(nodeTypeCountTotals.values())]
	for dir in dirList:
		totalsRow += [sum(nodeTypeCounts[dir].values())]
	summaryWriter.writerow( totalsRow )
	index = 0
	for nodeType,appearances in sorted(nodeTypeAppearances.iteritems()):
		average = 0
		if nodeTypeAppearances[sortedAppearances[index]] > 0:
			average = nodeTypeCountTotals[sortedAppearances[index]] / nodeTypeAppearances[sortedAppearances[index]]
		columns = [sortedCounts[index],nodeTypeCountTotals[sortedCounts[index]],'',sortedAppearances[index],nodeTypeAppearances[sortedAppearances[index]],nodeTypeCountTotals[sortedAppearances[index]],average,'',nodeType,nodeTypeCountTotals[nodeType]]
		for dir in dirList:
			if nodeType in nodeTypeData[dir]:
				columns += [nodeTypeCounts[dir][nodeType]]
			else:
				columns += ['']
		summaryWriter.writerow( columns )
		index += 1

# Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
# All rights reserved.
#
# The coded instructions, statements, computer programs, and/or related
# material (collectively the "Data") in these files contain unpublished
# information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
# which is protected by U.S. and Canadian federal copyright law and by
# international treaties.
#
# The Data is provided for use exclusively by You. You have the right to use,
# modify, and incorporate this Data into other products for purposes authorized 
# by the Autodesk software license agreement, without fee.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
# DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
# INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
# OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
# LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
# DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
# LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

