import maya.mel
import maya.cmds
from .BaseAnalytic import BaseAnalytic
from .decorators import addMethodDocs,addHelp,makeAnalytic
from .analyticGPUDeformers import analyticGPUDeformers

@addMethodDocs
@addHelp
@makeAnalytic
class analyticGPUTweaks(BaseAnalytic):
	"""
	Analyze the usage mode of tweak node.
	"""
	def run(self, showDetails=False):
		"""
		Examine animated tweak nodes and check how they are used.  It checks
		whether they use the relative or absolute mode and whether individual
		tweaks themselves are actually used.
		
		When 'showDetails' is False, the default, then the CSV columns are:

			TweakType		: Description of the usage for the animated tweak node
			Relative		: Value of the relativeTweak attribute of the animated tweak nodes meeting this criteria
			UsesTweaks		: True if tweaks are used in the nodes meeting this criteria
			UsesMesh		: True if some of the geometry processed by animated tweak nodes meeting this criteria is a mesh
			Count			: Number of animated tweak nodes meeting this criteria

		When 'showDetails' is True, then the CSV columns are:

			TweakNode		: Name of the animated tweak node
			Relative		: Value of the relativeTweak attribute of the animated tweak node
			UsesTweaks		: True if tweaks are used in the node
			UsesMesh		: True if some of the geometry processed by animated tweak node is a mesh

		One row is output for every animated tweak node.

		Return True if the analysis succeeded, else False
		"""
		success = True
		try:
			if not self._open():
				return False

			# Get all animated nodes.
			maya.mel.eval( 'setEvaluationManagerModeSerial;' )
			evaluationGraph = maya.cmds.dbpeek( op='graph', a=['evaluationGraph','nodes'] )
			maya.mel.eval( 'setEvaluationManagerModeDefaultDG;' )
			animatedNodes = set( evaluationGraph.split() )
			
			# Loop and process only tweak nodes.
			tweakNodes = []
			for node in animatedNodes:
				if maya.cmds.nodeType( node ) == 'tweak':
					# Read the relativeTweak attribute.
					relativeTweak = maya.cmds.getAttr( node + '.relativeTweak' )
					
					# Check if tweaks are used.
					usesTweaks = False
					for attribute in [ 'vlist' , 'plist' ]:
						source = maya.cmds.listConnections( node + '.' + attribute , source=True , destination=False )
						if source and len( source ) > 0:
							usesTweaks = True
							break;
					
					# Check if the deformed geometry is a mesh.
					usesMesh = False
					destinationPlugs = maya.cmds.listConnections( node + '.outputGeometry' , source=False , destination=True , plugs=True )
					for plug in destinationPlugs:
						geometryType = maya.cmds.getAttr( plug , type=True )
						if geometryType == 'mesh':
							usesMesh = True
							break
					
					tweakNodes.append( ( node , relativeTweak , usesTweaks , usesMesh ) )
			
			# Output to CSV.
			if showDetails:
				self._outputCSV( [ 'TweakNode'
								 , 'Relative'
								 , 'UsesTweaks'
								 , 'UsesMesh'
								 ] )
				outputRows = tweakNodes
			else:
				self._outputCSV( [ 'TweakType'
								 , 'Relative'
								 , 'UsesTweaks'
								 , 'UsesMesh'
								 , 'Count'
								 ] )
				
				# Build the summary using different categories.
				categories = [
					( 'Relative_Tweaks_Mesh'       , ( True  , True  , True  ) ) ,
					( 'NoRelative_Tweaks_Mesh'     , ( False , True  , True  ) ) ,
					( 'Relative_NoTweaks_Mesh'     , ( True  , False , True  ) ) ,
					( 'NoRelative_NoTweaks_Mesh'   , ( False , False , True  ) ) ,
					( 'Relative_Tweaks_NoMesh'     , ( True  , True  , False ) ) ,
					( 'NoRelative_Tweaks_NoMesh'   , ( False , True  , False ) ) ,
					( 'Relative_NoTweaks_NoMesh'   , ( True  , False , False ) ) ,
					( 'NoRelative_NoTweaks_NoMesh' , ( False , False , False ) ) ,
					]
				summary = []
				for category in categories:
					name = category[ 0 ]
					criteria = category[ 1 ]
					tester = lambda x : x[1:4] == criteria
					count = len( [node for node in tweakNodes if tester( node ) ] )
					
					summary.append( ( name , criteria[0] , criteria[1] , criteria[2] , count ) )
				
				outputRows = summary
			
			for row in outputRows:
				self._outputCSV( list( row ) )
			
		except Exception, ex:
			print 'analyticGPUTweaks failed: "%s"' % str(ex)
			success = False
		finally:
			self._close()

		return success
# Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
# All rights reserved.
#
# The coded instructions, statements, computer programs, and/or related
# material (collectively the "Data") in these files contain unpublished
# information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
# which is protected by U.S. and Canadian federal copyright law and by
# international treaties.
#
# The Data is provided for use exclusively by You. You have the right to use,
# modify, and incorporate this Data into other products for purposes authorized 
# by the Autodesk software license agreement, without fee.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
# DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
# INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
# OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
# LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
# DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
# LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

