"""
Base EDL Translator

Used by Maya's EDL Import/Export feature.
Subclasses must return dictionaries with the appropriate data

Should log errors of the following types:
error = something we cannot recover from

"""
import os.path
import logging

class Translator(object):
	def __init__(self, fileName):
		"""
		self.fileName	= name of EDL file to be used for input or output
		self.logger		= logging interface to capture errors/warnings. Modules
						  that use Translator should register their handlers
						  with this logger.
		"""
		self.fileName = fileName
		self.logger = logging.getLogger(__name__)
		self.logger.setLevel(logging.WARNING)

	def readFromFile(self):
		"""
		Read the EDL file from disk into memory.
		"""
		pass

	def writeToFile(self):
		"""
		Write the in-memory EDL to disk
		"""
		pass

	def getSequence():
		"""
		Read the sequence information from an EDL file.
		Assumes readFromFile has already been called

		Returns dictionary containing the following:

		name			= name of the sequence
		duration 		= duration in frames
		framerate 		= in frames per second
		video_tracks 	= list of video track sub elements. Use getTrack to
						  read the contents
		audio_tracks	= list of audio track SubElements. use getTrack to
						  read the contents
		"""
		return {}

	def getTrack(self, track_elem):
		"""
		Given a track element (which is returned by getSequence), read the
		relevant track information.

		Returns dictionary containing the following:

		locked 		= true/false
		enabled 	= true/false
		width		= width in pixels (if specified)
		height		= height in pixels (if specified)

		clip_list 	= list of clipitem sub elements that are a part of this track.
					  To read data from the clips, use getClip
		"""
		return {}

	def getClip(self, clip_elem):
		"""
		Given a clip element (which is returned b getTrack), return a dictionary
		with the following information:
		id			= id of the clip. Will be used for linking
		name 		= name of the clip
		duration	= in frames
		enabled 	= true/false
		start/end 	= defines placement of clip in the sequence
		in/out		= define start/end frames of the clip in source media
		file		= file sub element. Use getFile method to read contents
		"""
		return {}

	def getFile(self, file_elem):
		"""
		Given a file element (returned by getClip), return a dictionary with the 
		following information:

		id			= id of the clip. Can be used to reference a file that's 
					  already been defined somewhere else
		name		= name of file
		pathurl 	= path to file (i.e. file:///)
		"""
		return {}

	def getTimecode(self, timecode_elem):
		"""
		Given a timecode sub element (which is returned by getSequence or getClip or getFile),
		return the following information:

		framerate 	= in frames per second
		format 		= type of timecode. ex: "smpte" 
		"""
		return {}


# Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
# All rights reserved.
#
# The coded instructions, statements, computer programs, and/or related
# material (collectively the "Data") in these files contain unpublished
# information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
# which is protected by U.S. and Canadian federal copyright law and by
# international treaties.
#
# The Data is provided for use exclusively by You. You have the right to use,
# modify, and incorporate this Data into other products for purposes authorized 
# by the Autodesk software license agreement, without fee.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
# DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
# INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
# OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
# LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
# DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
# LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

