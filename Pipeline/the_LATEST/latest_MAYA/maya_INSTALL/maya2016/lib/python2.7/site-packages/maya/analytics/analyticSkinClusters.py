import re
import maya.cmds
from .BaseAnalytic import BaseAnalytic
from .decorators import addMethodDocs,addHelp,makeAnalytic

vtxPattern = re.compile( 'vtx\[([0-9]+)\]' )
vtxPairPattern = re.compile( 'vtx\[([0-9]+):([0-9]+)\]' )
vtxAllPattern = re.compile( 'vtx\[\*\]' )

@addMethodDocs
@addHelp
@makeAnalytic
class analyticSkinClusters(BaseAnalytic):
	"""
	Analyze type and usage of skin cluster deformers to discover usage
	patterns contrary to the assumptions of the code.
	"""
	def run(self, showDetails=False):
		"""
		Examine the skin cluster nodes in the scene for connection on the
		driver points attribute. Checks for any connection first, and then for
		the size of the driver versus the size of the driven mesh second. The
		assumption was that the driver would always be much smaller than the
		driven mesh since that's kind of the point of a skin cluster.

		The analytics output contains the following columns
			Deformer	: Name of the skin cluster found
			Connection	: Name of the node connected at the driver points
						  input or '' if none
			DriverSize	: Number of points in the driver points input
			DrivenSize	: Number of points in the driven object

		If 'showDetails' is False then the names are anonymized.
		"""
		try:
			if not self._open():
				return

			self._outputCSV( [ 'Deformer'
							 , 'Connection'
							 , 'DriverSize'
							 , 'DrivenSize'
							 ] )

			clusterList = maya.cmds.ls( type='skinCluster' )
			try:
				if len(clusterList) == 0:
					print 'Warning: No skin clusters to check'
					return
			except Exception, ex:
				# If the 'ls' command returns None this is the easiest
				# way to trap that case.
				print 'Warning: No skin clusters to check'
				return

			for skinCluster in clusterList:
				driverSize = 0
				drivenSize = 0
				drivers = maya.cmds.listConnections( '%s.driverPoints' % skinCluster, destination=False, source=True )
				if drivers:
					for driver in drivers:
						self._outputCSV( [ self._sanitizedNodeName(skinCluster, showDetails)
										 , self._sanitizedNodeName(driver, showDetails)
										 , str(driverSize)
										 , str(drivenSize)
										 ] )
				else:
					self._outputCSV( [ self._sanitizedNodeName(skinCluster, showDetails)
									 , ''
									 , '0'
									 , str(drivenSize)
									 ] )

		except Exception, ex:
			print 'analyticSkinClusters failed: "%s"' % str(ex)
		finally:
			self._close()


# Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
# All rights reserved.
#
# The coded instructions, statements, computer programs, and/or related
# material (collectively the "Data") in these files contain unpublished
# information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
# which is protected by U.S. and Canadian federal copyright law and by
# international treaties.
#
# The Data is provided for use exclusively by You. You have the right to use,
# modify, and incorporate this Data into other products for purposes authorized 
# by the Autodesk software license agreement, without fee.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
# DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
# INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
# OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
# LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
# DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
# LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

