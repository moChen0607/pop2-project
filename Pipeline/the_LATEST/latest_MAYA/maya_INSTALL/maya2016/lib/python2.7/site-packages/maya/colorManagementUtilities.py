import maya.cmds as cmds

def __runCommand(cmdName, parameterContent):
    return eval(cmdName + parameterContent)

#
# Purpose: Updates the gamma of the Editor
#
def updateGamma(editor, floatFieldPath, cmdName) :
    value = cmds.floatField(floatFieldPath, q=True, value=True)
    parameterContent = '("{theEditor}", e=True, gamma={gamma})'.format(theEditor=editor, gamma=value)
    __runCommand(cmdName, parameterContent)

#
# Purpose: Updates the exposure of the Editor
#
def updateExposure(editor, floatFieldPath, cmdName) :
    value = cmds.floatField(floatFieldPath, q=True, value=True)
    parameterContent = '("{theEditor}", e=True, exposure={exposure})'.format(theEditor=editor, exposure=value)
    __runCommand(cmdName, parameterContent)

#
# Purpose: Synchronizes the gamma of the editor with a floatField
#
def syncGammaField(editor, floatFieldPath, cmdName) :
    parameterContent = '("{theEditor}", e=True, toggleGamma=True)'.format(theEditor=editor)
    __runCommand(cmdName, parameterContent)
    parameterContent = '("{theEditor}", q=True, gamma=True)'.format(theEditor=editor)
    value = __runCommand(cmdName, parameterContent)
    cmds.floatField(floatFieldPath, e=True, value=value)

#
# Purpose: Synchronizes the exposure of the editor with a floatField
#
def syncExposureField(editor, floatFieldPath, cmdName) :
    parameterContent = '("{theEditor}", e=True, toggleExposure=True)'.format(theEditor=editor)
    __runCommand(cmdName, parameterContent)
    parameterContent = '("{theEditor}", q=True, exposure=True)'.format(theEditor=editor)
    value = __runCommand(cmdName, parameterContent)
    cmds.floatField(floatFieldPath, e=True, value=value)

#
# Purpose: Toggles the color management in the editor
#
def toggleCM(editor, buttonPath, cmdName) :
    enabled = cmds.symbolCheckBox(buttonPath, q=True, value=True )
    globalCmEnabled = cmds.colorManagementPrefs(q=True, cmEnabled=True)
    parameterContent = '("{theEditor}", e=True, cmEnabled={cmEnabled})'.format(theEditor=editor, cmEnabled= enabled)
    __runCommand(cmdName, parameterContent)
    cmds.symbolCheckBox(buttonPath, e=True, enable=globalCmEnabled)

#
# Purpose: Sets the viewTransformName used by the Editor
#
def setViewTransform(editor, optionMenuPath, cmdName) :
    newVtName = cmds.optionMenu(optionMenuPath, q=True, value=True )
    parameterContent = '("{theEditor}", q=True, viewTransformName=True)'.format(theEditor=editor)
    curVtName = __runCommand(cmdName, parameterContent)
    try:
        parameterContent = '("{theEditor}", e=True, viewTransformName="{vtName}")'.format(theEditor=editor, vtName=newVtName)
        __runCommand(cmdName, parameterContent)
    except RuntimeError:
        cmds.optionMenu(optionMenuPath, e=True, value=curVtName )
        raise



# Copyright (C) 1997-2014 Autodesk, Inc., and/or its licensors.
# All rights reserved.
#
# The coded instructions, statements, computer programs, and/or related
# material (collectively the "Data") in these files contain unpublished
# information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
# which is protected by U.S. and Canadian federal copyright law and by
# international treaties.
#
# The Data is provided for use exclusively by You. You have the right to use,
# modify, and incorporate this Data into other products for purposes authorized 
# by the Autodesk software license agreement, without fee.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
# DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
# INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
# OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
# LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
# DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
# LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.

