# A utility command for displaying an histogram of the current image.
# Colored images are internally converted to an illuminace grayscale
# before the IceMan.Histogram() operator generates the data used to
# draw a bar graph. The shape of the graph displayed in 'it' will 
# match a PhotoShop histogram generated by the,
#    Image->Adjustments->Levels menu
# Unlike PhotoShop this utility makes no attempt to apply differential
# vertical scaling in order to avoid excessively "flat" bar graphs.
#
# M.Kesson Aug 25 2014

import math,it,ice
from it.It3Command import It3Command

class Histogram(It3Command):
	def __init__(self):
		It3Command.__init__(self)
		self.m_menuPath = 'Commands/Histogram'

	def Invoke(self):
		self.histogram()
		
	def histogram(self):
		try:
			elem = it.GetCurrentElement()
		except:
			it.app.Warning('The Histogram command cannot be used without an image.')
			it.app.RaiseLogWindow()
			return
		srcImage = elem.GetImage()
			
		# Histogram graphic____________________________________	
		w,h = self.getDimensions(srcImage)
		h_totalPixels = w * h
		# Light gray background
		bg_image = ice.FilledImage(ice.constants.FLOAT,[0,512,0,256],[0.9,0.9,0.9])
		# Dark gray bars
		bar_color = ice.Card(ice.constants.FLOAT, [0.24,0.24,0.24,1])
		bar_width = 2
			
		# Histogram values_____________________________________
		data = srcImage.Histogram(256, [0,1])
		gray = []
		max_bar_num = 0
		num_components = len(data)
		if num_components > 3:
			num_components = 3
		for n in range(len(data[0])):
			if num_components == 3:
				num = data[0][n] * 0.21 + data[1][n] * 0.72 + data[2][n] * 0.07
			else:
				num = data[0][n]	
			gray.append(num)
			if num > max_bar_num:
				max_bar_num = num
				
		# Bar Chart Outline___________________________________
		verts = [(0,0)]
		for n in range(len(gray)):
			# Scaling by 220 pixels ensures the tallest bar will not touch 
			# the top edge of the background.
			y = (float(gray[n])/max_bar_num) * 220
			x = n * bar_width
			verts.append( (x,y) )
			verts.append( (x + 1,y) )
		verts.append( (512,0) )	
		bars = ice.PolyFill(bar_color, verts, [0,0]) # zero filtering

		# Compositing________________________________________
		bg_image = bg_image.Over(bars)
		bg_image = bg_image.Flip(False, True, False) # flip vertically
		it.AddImage(bg_image)
			
	#-----------------------------------------------------
	# Returns width and height
	def getDimensions(self, image):
		box = image.DataBox()
		return [box[1] - box[0] + 1, box[3] - box[2] + 1]
		
# Add the new menu item
it.commands.append(Histogram)

