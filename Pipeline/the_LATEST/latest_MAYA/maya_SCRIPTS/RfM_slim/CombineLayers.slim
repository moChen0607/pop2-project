# Based on Pixars "CombineColorList" template implemented in lists.slim
# The purpose of this template is to provide a node that offers a greater range of "compositing"
# options than Pixars standard CombineColorList. This node references another Alab custome 
# template called "ColorListUI.slim". It is almost identical to "ListUI" (listui.slim). The
# only difference is that I have replaced its "+, -, *" color combine options with a list taken
# from Pixars "LayerGeneral" template (shadingmodels_layering.slim). The extended list of "color
# combine" modes require the use of opacity values. For this reason this template addes an opacity
# UI element. To tidy-up the interface the "vslider" found in CombineColorList has been removed.
# 
# Malcolm Kesson
# Begun 4 August 2008
# Modified 10 March 2014: Base Color is now hidden and default op is "Over"
slim 1 extensions cutter {
    extensions fundza cutr {    
        templateV multiple CombineLayers 0 {
        description {
            Version: 1
            <br>
            Extension of the standard Pixar CombineColorList node.
            This node, however, provides a full range of color "mixing" modes.
            }
		previewinfo {
			shadingrate 1
			objectsize 1
			objectshape Plane
			frame 1
			}
        parameter color BaseColor {
            label "Base Color"
            detail varying
            default {0 0 0}
            defaultinput 1
			display hidden
            }
        collection customuiFullWidth void {
            subtype propertycreator
            drawmode children
            customui fundza ColorListUI
            state open
                #{-type color -default {1 1 1}}
                #{-type float -default 1 -subtype vslider -range {0 1 .001}}
                #{-type color -detail {mustvary pixar,ColorBuild}}
				#{-type color -detail {varying} -default {1 1 1}}
            label {-buttonlabel {Add Layer} -elementdesc {
                    {-type float -subtype switch -default 1} 
                    {-type string -subtype combineOp -default over}        
                    {-type color -detail {mustvary pixar,SurfaceColor}}
                    {-type color -detail {varying} -default {1 1 1}}
                    }
                  }
            }
        #collection void result {
         #      access output
         #      display hidden
            parameter color ResultColor {
				   label "Color"
                   #detail varying
                   #default {0 0 0}
                   access output
				   display hidden
                }
            parameter color ResultOpacity {
			       label "Mask"
                   #detail varying
                   #default {1 1 1}
                   access output
				   display hidden
                }
        #    } 
        RSLSource DynamicFunction {
        proc primvars {} {}
        proc function {} {
            output -noindent {#include "pxslBlend.h"}
            generateBody {
            set cnm [getproperties -name BaseColor -access input]
            output "ResultColor = $cnm;"
            output "uniform float first = 1;"
            output "uniform string compOp = \"over\";"
            set aovlist [safeeval ::aovGetAOVNames]
            set addaovs [safeeval ::aovGetAdditiveAOVNames]
            set maxaovs [safeeval ::aovGetMaxAOVNames]
            set parmnames [getproperties -name LI* -access input]
            foreach {en op c o} $parmnames {
                output "if ($en != 0) {"
                output "    if(first == 1) {"
                output "        ResultColor = $c; ResultOpacity = $o;"
                output "        ResultColor *= $o;"
                output "        first = 0;"
                output "        }"
                output "    else"
                output "        {"
                output "        pxslMayaBlend(compOp,ResultColor, ResultOpacity,"
                output "                   $c, $o,ResultColor, ResultOpacity);"
                output "        color opac = 1;"
                output "        }"
                output "    compOp = $op;"
                output "    }"
                }
			
            output "ResultColor *= ResultOpacity;"   
            }
        }
        }
    }}}
  

