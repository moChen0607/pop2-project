#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
Makes sierpinski pattern from a polyPyramid in Maya
"""

# IMPORT STANDARD LIBRARIES
import sys
import random

# IMPORT THIRD PARTY LIBRARIES
import pymel.core as pm


def midpoint_3d(p1, p2):
    midpoint = [(value + p2[index]) / 2 for index, value in enumerate(p1)]
    return midpoint
# end midpoint_3d


def get_tetrahedron_points(pyPyramidShape):
    print pyPyramidShape
    polyPyra = pyPyramidShape.listConnections()[1]
    polyPyra.setNumberOfSides(3)
    return pyPyramidShape.getPoints()
# end get_tetrahedron_points


def sierpinski(seed, verts, reps):
    """
    Creates sierpinski pattern from a at least 3 points
    """
    if len(verts) < 3:
        sys.exit("Please provide at least 3 points")

    for n in xrange(reps):
        randPoint = random.choice(pyPyramidPnts)
        midPnt = [(value + seed[index]) / 2 for index, value in enumerate(randPoint)]
        loc = pm.polyCube()[0]
        loc.translate.set(midPnt)
        seed = midPnt
# end sierpinski


def main():
    seed = [0, 0, 0]
    try:
        tetrahedron = pm.PyNode('pPyramid1')
        tetrahedronShapePnts = get_tetrahedron_points(tetrahedron.getShape())
    except pm.MayaNodeError:
        print "another"
        tetrahedron = pm.polyPyramid()[0]
        tetrahedronShapePnts = get_tetrahedron_points(tetrahedron.getShape())
    except:
        raise
        
    seed = [0,0,0]
    verts = tetrahedronShapePnts
    print verts
    verts = [tetrahedron.translate.get() + x for x in tetrahedronShapePnts]
    print verts
    reps = 200
    sierPnts = sierpinski(seed, verts, reps)
    # groupParent = pm.group()
    # groupParent = pm.group(*list(sierPnts), name='null#')
    # [pm.parent(x) for x in sierPnts]
# end main


if __name__ == "__main__":
    main()
