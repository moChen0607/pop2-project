#! /usr/local/Nuke9.0v6/libnuke-9.0.6.so -nx
version 9.0 v6
Gizmo {
 addUserKnob {20 User}
 addUserKnob {6 colorFalloff_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {3 quality l Quality t "The number of blurs you want to apply. Increasing this value will make a nicer blur but also increase render time"}
 quality {10}
 addUserKnob {22 update l Update t "Commit any new changes" -STARTLINE T "from __future__ import with_statement\nimport math\n\ndef set_bias(input, bias):\n    if bias > 0:\n        power = math.log10(bias) / math.log10(0.5)\n        return math.pow(input, power)\n    else:\n        return 0\n# end set_bias\n\ndef set_contrast(input, contrast):\n    if input < 0.5:\n        outValue = set_bias(2 * input, 1 - contrast)\n    else:\n        outValue =  2 - set_bias(2 - (2 * input), 1 - contrast)\n    return outValue * 0.5\n# end set_contrast\n\ndef set_gamma(input, gamma):\n    return math.pow(input, 1/gamma)\n# end set_gamma\n\ndef set_compression(input, lo, hi):\n    return ((hi-lo) * input) + lo\n# end set_compression\n\ndef set_expansion(input, lo, hi):\n    returnval = 0\n    if (lo == hi):\n        if input < lo:\n            return 0\n        else:\n            return 1\n    else:\n        return float(input - lo) / (hi-lo)\n# end set_expansion\n\nthisNode = nuke.thisNode()\n# thisNode = nuke.toNode(\"blurStack\")\nquality = int(thisNode.knob(\"quality\").getValue())\nminimum = int(thisNode.knob(\"minBlur\").getValue())\nmaximum = int(thisNode.knob(\"maxBlur\").getValue())\ncontrast = thisNode.knob(\"contrast\").getValue()\ngamma = thisNode.knob(\"gamma\").getValue()\ncompress = thisNode.knob(\"compression\").getValue()\nexpand = thisNode.knob(\"expansion\").getValue()\ncolorFalloff = thisNode.knob(\"colorFalloff\").getValue()\nwith thisNode:\n    # GET INFO FOR REINITIALIZATION\n    connectedNode = thisNode.input(0)\n\n    # RESET ALL\n    nAll = nuke.allNodes()\n    \[nuke.delete(n) for n in nAll]\n    \n    # REINITIALIZATION FROM START\n    input = nuke.nodes.Input()\n    input.setInput(0, connectedNode)\n\n    for i in xrange(quality):\n        # perform some simple math ops to modify the (otherwise) linear step function\n        step = 1 - float(i)/quality\n        color = step\n        colorFalloff = \[1 - ((1- colorFalloff\[0]) * color),\n                        1 - ((1- colorFalloff\[1]) * color),\n                        1 - ((1- colorFalloff\[2]) * color)]\n        step = set_contrast(step, contrast)\n        step = set_gamma(step, gamma)\n        step = set_compression(step, compress\[0], compress\[1])\n        step = set_expansion(step, expand\[0], expand\[1])\n        if step < 0:\n            step = 0\n        elif step > 1:\n            step = 1\n\n        value = (step * (maximum - minimum)) + minimum\n        blur = nuke.nodes.Blur()\n        merge = nuke.nodes.Merge()\n        \n        blur.connectInput(0, input)\n        blur.knob(\"size\").setValue(value)\n\n        multiply = nuke.nodes.Multiply()\n        multiply.knob(\"value\").setValue(\[colorFalloff\[0],\n                                         colorFalloff\[1],\n                                         colorFalloff\[2],\n                                         1])\n        multiply.connectInput(0, blur)\n\n        merge.connectInput(1, multiply)\n        if i == 0:\n            merge.connectInput(0, input)\n        else:\n            merge.connectInput(0, previous)\n        \n        previous = merge\n\n    # create one more\n    blur = nuke.nodes.Blur()\n    merge = nuke.nodes.Merge()\n    \n    blur.connectInput(0, input)\n    blur.knob(\"size\").setValue(minimum)\n\n    merge.connectInput(1, blur)\n\n    if i == 0:\n        merge.connectInput(0, input)\n    else:\n        merge.connectInput(0, previous)\n\n    output = nuke.nodes.Output()\n    output.connectInput(0, merge)"}
 addUserKnob {26 ""}
 addUserKnob {7 minBlur l "Minimum Blur" t "Change to non-zero value to increase blur across the entire input" R 0 100}
 minBlur {40}
 addUserKnob {7 maxBlur l "Maximum Blur" t "Increase the spread of the blur" R 0 100}
 maxBlur {400}
 addUserKnob {26 ""}
 addUserKnob {18 colorFalloff l "Color Falloff" t "Create a fringe color to tint the blur"}
 colorFalloff {0.4 1 1}
 addUserKnob {7 contrast l Contrast t "Change how quickly the smallest blur radius transitions to the high blur radius. Setting to 0.5 will have no effect"}
 contrast {0.69}
 addUserKnob {7 gamma l Gamma t "Change the falloff of the blur. Setting it to 1 will have no effect" R 0 2}
 gamma {1}
 addUserKnob {14 compression l Compression t "Determine how quickly the blur reaches its maximum value. Setting \[0, 1] has no effect." R 0 100}
 compression {0 1}
 addUserKnob {14 expansion l Expansion t "Determine how long the blur stays in its minimum value before trying to reach its maximum value. Setting to \[0, 1] has no effect." R 0 100}
 expansion {0 1}
 addUserKnob {6 colorFalloff_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
 Roto {
  inputs 0
  output alpha
  curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 2097152}
    {t x44800000 x44428000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}
    {curvegroup Bezier1 512 bezier
     {{cc
       {f 8192}
       {px 1
        {xc2ae0000 x41600000}
        {x440d8000 x447d0000}
        {x42ae0000 xc1600000}
        {xc1880000 x42000000}
        {x44990000 x44760000}
        {x41880000 xc2000000}
        {1 x423c0000}
        {x44a9c000 x44400000}
        {xbf800000 xc23c0000}
        {x40000000 xc0000000}
        {x44688000 x441cc000}
        {xc0000000 x40000000}
        {x40a00000 xc1b80000}
        {x441d4000 x442d8000}
        {xc0a00000 x41b80000}}}     idem}
     {tx 1 x446b599a x444c4000}
     {a osw x41200000 osf 0 str 1 spx x44800000 spy x44428000 sb 1 tt x40800000}}}}}}
  toolbox {selectAll {
  { selectAll str 1 ssx 1 ssy 1 sf 1 }
  { createBezier str 1 ssx 1 ssy 1 sf 1 sb 1 tt 4 }
  { createBezierCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createBSpline str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createEllipse str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangle str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { createRectangleCusped str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { brush str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { eraser src 2 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { clone src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { reveal src 3 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { dodge src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { burn src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { blur src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { sharpen src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
  { smear src 1 str 1 ssx 1 ssy 1 sf 1 sb 1 }
} }
  toolbar_brush_hardness 0.200000003
  toolbar_source_transform_scale {1 1}
  toolbar_source_transform_center {1024 778}
  colorOverlay {0 0 0 0}
  lifetime_type "all frames"
  motionblur_shutter_offset_type centred
  source_black_outside true
  name Roto2
  xpos 527
  ypos -1
 }
 CheckerBoard2 {
  inputs 0
  name CheckerBoard2
  xpos 371
  ypos -29
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy2
  xpos 472
  ypos 47
 }
 Premult {
  name Premult2
  xpos 472
  ypos 85
 }
 Input {
  name Input1
 }
set N109df230 [stack 0]
 Blur {
  size 40
  name Blur11
 }
push $N109df230
 Blur {
  size 51.86454074
  name Blur10
 }
 Multiply {
  value {0.999782272 1 1 1}
  name Multiply10
 }
push $N109df230
 Blur {
  size 78.27271206
  name Blur9
 }
 Multiply {
  value {0.99782272 1 1 1}
  name Multiply9
 }
push $N109df230
 Blur {
  size 115.9317787
  name Blur8
 }
 Multiply {
  value {0.9891136 1 1 1}
  name Multiply8
 }
push $N109df230
 Blur {
  size 163.4603615
  name Blur7
 }
 Multiply {
  value {0.963712 1 1 1}
  name Multiply7
 }
push $N109df230
 Blur {
  size 220
  name Blur6
 }
 Multiply {
  value {0.90928 1 1 1}
  name Multiply6
 }
push $N109df230
 Blur {
  size 276.5396385
  name Blur5
 }
 Multiply {
  value {0.81856 1 1 1}
  name Multiply5
 }
push $N109df230
 Blur {
  size 324.0682213
  name Blur4
 }
 Multiply {
  value {0.6976 1 1 1}
  name Multiply4
 }
push $N109df230
 Blur {
  size 361.7272879
  name Blur3
 }
 Multiply {
  value {0.568 1 1 1}
  name Multiply3
 }
push $N109df230
 Blur {
  size 388.1354593
  name Blur2
 }
 Multiply {
  value {0.46 1 1 1}
  name Multiply2
 }
push $N109df230
 Blur {
  size 400
  name Blur1
 }
 Multiply {
  value {0.4 1 1 1}
  name Multiply1
 }
push $N109df230
 Merge {
  inputs 2
  name Merge1
 }
 Merge {
  inputs 2
  name Merge2
 }
 Merge {
  inputs 2
  name Merge3
 }
 Merge {
  inputs 2
  name Merge4
 }
 Merge {
  inputs 2
  name Merge5
 }
 Merge {
  inputs 2
  name Merge6
 }
 Merge {
  inputs 2
  name Merge7
 }
 Merge {
  inputs 2
  name Merge8
 }
 Merge {
  inputs 2
  name Merge9
 }
 Merge {
  inputs 2
  name Merge10
 }
 Merge {
  inputs 2
  name Merge11
 }
 Output {
  name Output1
 }
end_group
