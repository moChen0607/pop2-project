from __future__ import with_statement
# thisNode = nuke.thisNode()
thisNode = nuke.toNode('Group1')
selectedNodes = nuke.selectedNodes()

with thisNode:
    # RESET
    nAll = nuke.allNodes()

    for n in nAll:
        nuke.delete(n)
    
    # REINITIALIZE AND CONNECT
    getFromSelection = int(thisNode.knob('getFromSelection').getValue())
    if getFromSelection:
        mergeNum = len(selectedNodes) - 1
    else:
        mergeNum = thisNode.knob('merge_num')
        previous = None
    
    count = 0
    for i in xrange(mergeNum):
        input_h = nuke.createNode("Input")
        merge_h = nuke.createNode("Merge")

        if previous is not None:
            merge_h.setInput(0, previous)
            merge_h.setInput(1, input_h)
        else:
            count += 1
            input2_h = nuke.createNode("Input")
            merge_h.setInput(0, input_h)
            merge_h.setInput(1, input2_h)
    
    if getFromSelection and previous is not None:
        thisNode.setInput(count, selectedNode[count])

    previous = merge_h
    count += 1
