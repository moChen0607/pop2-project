# -*- coding: utf-8 -*-
#
# Portal: Origins [Part 2] documentation build configuration file, created by
# sphinx-quickstart on Tue Jan 26 16:46:05 2016.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.autodoc', 'sphinxcontrib.napoleon',
              'sphinx.ext.viewcode']
# extensions = ['sphinx.ext.autodoc', 'sphinxcontrib.napoleon']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['.templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Portal: Origins [Part 2]'
copyright = u'2016, Colin Kennedy'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '1.0.0'
# The full version, including alpha/beta/rc tags.
release = '1.0.0'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['.build']

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['.static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'PortalOriginsPart2doc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', 'PortalOriginsPart2.tex', u'Portal: Origins {[}Part 2{]} Documentation',
   u'Colin Kennedy', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'portaloriginspart2', u'Portal: Origins [Part 2] Documentation',
     [u'Colin Kennedy'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'PortalOriginsPart2', u'Portal: Origins [Part 2] Documentation',
   u'Colin Kennedy', 'PortalOriginsPart2', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False

###############################################################################
# START COLIN EDITS
###############################################################################
# Add sys.paths manually
import os
import sys
# Directives to allow HTML inserts
from cgi import escape
from docutils import nodes
from docutils.parsers.rst import directives, Directive

# IMPORT THIRD-PARTY LIBRARIES
import sphinx_rtd_theme

# sys.path = []  # clear PATH variable
paths = [os.path.join(os.environ['PIPELINE_DIR'], 'latest_DOCS', 'sphinx_test_0001'),
         os.path.join(os.environ['PIPELINE_DIR'], 'sys_PY', 'py_MODULES'),
         os.path.join(os.environ['PIPELINE_DIR'], 'latest_MAYA', 'maya_SCRIPTS'),
         os.path.join(os.environ['PIPELINE_DIR'], 'latest_NUKE', 'nuke_SCRIPTS'),
         os.path.join(os.environ['PIPELINE_DIR'], 'latest_HOUDINI', 'hou_PY'),
         os.path.join("/usr", "lib", "python2.7", "site-packages"),
         os.path.join("/usr", "lib", "python2.7", "dist-packages")]

for path in paths:
    sys.path.insert(0, path)

# pass imports of modules that would otherwise break sphinx on compile
autodoc_mock_imports = ['maya', 'maya.OpenMaya', 'maya.cmds', 'nuke', 'hou']
# print sys.path
# sys.path.append(
# sys.path.append(os.path.join(os.environ['PIPELINE_DIR'], 'latest_DOCS', 'sphinx_test_0001'))
# sys.path.append(os.path.join(os.environ['PIPELINE_DIR'], 'sys_PY', 'py_MODULES'))
# sys.path.append(os.path.join("/usr", "lib", "python2.7", "site-packages"))
# sys.path.append(os.path.join("/usr", "lib", "python2.7", "dist-packages"))
# Add rst variables
def replacementText(variableName, replacementText):
        msg = ".. |{variableName}| replace:: "\
              "{replaceText}".format(variableName=variableName,
                                     replaceText=replacementText)
        return msg

valueReplaceDict = {
                        "project_long_name": "Portal: Origins [Part 2]",
                        "project_short_name": "POP2",
                        "Administrator1 Slack Handle": "@colinkennedy",
                   }

replacementTextFullList = []
for key, item in valueReplaceDict.iteritems():
    replacementTextFullList.append(replacementText(key, item))
replacementTextFullList = '\n\n'.join(replacementTextFullList)
rst_epilog = replacementTextFullList

# Set theme style
html_theme = "sphinx_rtd_theme"

html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]
# Change sidebar
# html_sidebars = { '**': ['globaltoc.html', 'relations.html', 'sourcelink.html', 'searchbox.html'], }
# html_additional_pages = {
#     'download': 'customdownload.html',
# }
# html_theme_options = {
#     "relbarbgcolor": "black"
# }


class CodeDirective(Directive):
    """
    reStructuredText directive to show code listings with google-code-prettify
    """

    has_content = True
    def __init__(self):
        self.text = '<pre class="prettyprint">%s</pre>'

    def run(self):
        self.assert_has_content()
        text = self.text % self._get_escaped_content()
        return [nodes.raw('', self.text, format='html')]
    # run

    def _get_escaped_content(self):
        return '\n'.join(map(escape, self.content))
    # _get_escaped_content
# CodeDirective


class CodeDirectiveTODO(CodeDirective):
    has_content = True
    # text = '<h1 class="TODO">%s</h1>'
    text = '<div class="admonition note" style="background-color: #e5ffe5;">'\
            '<p class="todo-title first admonition-title" style="background-color: #00cc00;">TO DO</p>'\
            '<p class="todo last">%s</p>'\
           '</div>'
# end CodeDirectiveTODO


class CodeDirectiveAuthorNote(CodeDirective):
    has_content = True
    bgColor = "#ffffe5"
    titleColor = "#003300"
    titleText = "Author Note"
    classLabel = "author-note"
    # text = '<h1 class="TODO">%s</h1>'
    def __init__(self):
        text = '<div class="admonition note" style="background-color: {bgcolor};">'.format(bgcolor=bgColor) + \
                '<p class="{classlabel}-title first admonition-title" '\
                'style="background-color: {titlecolor};">{titletext}'\
                '</p>'.format(classlabel=classLabel, titlecolor=titleColor, titletext=titleText) + \
                '<p class="{classlabel} last">%s</p>'.format(classlabel=classLabel) + \
               '</div>'
# end CodeDirectiveAuthorNote

class CodeDirectiveConsiderations(CodeDirectiveAuthorNote):
    bgColor = "#ffffff"
    titleColor = "yellow"
    titleText = "Considerations"
    classLabel = "considerations"

    def __init__(self):
        super(CodeDirectiveConsiderations, self).__init__()
        print '\n'*20
        print self.text
    # end __init__
# end CoreDirectiveConsiderations


class CodeDirectiveH2(CodeDirective):
    text = '<h2 class="changelogwrapper">%s</h2>'
# end CodeDirectiveH2


class CodeDirectiveH3(CodeDirective):
    text = '<h3 class="changelogwrapper">%s</h3>'
# end CodeDirectiveH3


directives.register_directive("code-list", CodeDirective)
directives.register_directive("sourcecode", CodeDirective)
directives.register_directive("todo", CodeDirectiveTODO)
directives.register_directive("authornote", CodeDirectiveAuthorNote)
directives.register_directive("considerations", CodeDirectiveTODO)

###############################################################################
# END COLIN EDITS
###############################################################################
